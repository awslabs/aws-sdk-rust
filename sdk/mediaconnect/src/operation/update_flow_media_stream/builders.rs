// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_flow_media_stream::_update_flow_media_stream_output::UpdateFlowMediaStreamOutputBuilder;

pub use crate::operation::update_flow_media_stream::_update_flow_media_stream_input::UpdateFlowMediaStreamInputBuilder;

impl crate::operation::update_flow_media_stream::builders::UpdateFlowMediaStreamInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_flow_media_stream::UpdateFlowMediaStreamOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_flow_media_stream();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateFlowMediaStream`.
///
/// Updates an existing media stream.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateFlowMediaStreamFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_flow_media_stream::builders::UpdateFlowMediaStreamInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_flow_media_stream::UpdateFlowMediaStreamOutput,
        crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError,
    > for UpdateFlowMediaStreamFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamOutput,
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateFlowMediaStreamFluentBuilder {
    /// Creates a new `UpdateFlowMediaStream`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateFlowMediaStream as a reference.
    pub fn as_input(&self) -> &crate::operation::update_flow_media_stream::builders::UpdateFlowMediaStreamInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_flow_media_stream::UpdateFlowMediaStreamOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_flow_media_stream::UpdateFlowMediaStream::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_flow_media_stream::UpdateFlowMediaStream::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_flow_media_stream::UpdateFlowMediaStreamOutput,
        crate::operation::update_flow_media_stream::UpdateFlowMediaStreamError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// The attributes that you want to assign to the media stream.
    pub fn attributes(mut self, input: crate::types::MediaStreamAttributesRequest) -> Self {
        self.inner = self.inner.attributes(input);
        self
    }
    /// The attributes that you want to assign to the media stream.
    pub fn set_attributes(mut self, input: ::std::option::Option<crate::types::MediaStreamAttributesRequest>) -> Self {
        self.inner = self.inner.set_attributes(input);
        self
    }
    /// The attributes that you want to assign to the media stream.
    pub fn get_attributes(&self) -> &::std::option::Option<crate::types::MediaStreamAttributesRequest> {
        self.inner.get_attributes()
    }
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    pub fn clock_rate(mut self, input: i32) -> Self {
        self.inner = self.inner.clock_rate(input);
        self
    }
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    pub fn set_clock_rate(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_clock_rate(input);
        self
    }
    /// The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    pub fn get_clock_rate(&self) -> &::std::option::Option<i32> {
        self.inner.get_clock_rate()
    }
    /// Description
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// Description
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// Description
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_description()
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The Amazon Resource Name (ARN) of the flow.
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_flow_arn()
    }
    /// The name of the media stream that you want to update.
    pub fn media_stream_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.media_stream_name(input.into());
        self
    }
    /// The name of the media stream that you want to update.
    pub fn set_media_stream_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_media_stream_name(input);
        self
    }
    /// The name of the media stream that you want to update.
    pub fn get_media_stream_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_media_stream_name()
    }
    /// The type of media stream.
    pub fn media_stream_type(mut self, input: crate::types::MediaStreamType) -> Self {
        self.inner = self.inner.media_stream_type(input);
        self
    }
    /// The type of media stream.
    pub fn set_media_stream_type(mut self, input: ::std::option::Option<crate::types::MediaStreamType>) -> Self {
        self.inner = self.inner.set_media_stream_type(input);
        self
    }
    /// The type of media stream.
    pub fn get_media_stream_type(&self) -> &::std::option::Option<crate::types::MediaStreamType> {
        self.inner.get_media_stream_type()
    }
    /// The resolution of the video.
    pub fn video_format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.video_format(input.into());
        self
    }
    /// The resolution of the video.
    pub fn set_video_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_video_format(input);
        self
    }
    /// The resolution of the video.
    pub fn get_video_format(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_video_format()
    }
}
