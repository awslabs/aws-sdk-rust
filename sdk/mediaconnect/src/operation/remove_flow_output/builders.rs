// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::remove_flow_output::_remove_flow_output_output::RemoveFlowOutputOutputBuilder;

pub use crate::operation::remove_flow_output::_remove_flow_output_input::RemoveFlowOutputInputBuilder;

impl RemoveFlowOutputInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::remove_flow_output::RemoveFlowOutputOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::remove_flow_output::RemoveFlowOutputError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.remove_flow_output();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RemoveFlowOutput`.
///
/// Removes an output from an existing flow. This request can be made only on an output that does not have an entitlement associated with it. If the output has an entitlement, you must revoke the entitlement instead. When an entitlement is revoked from a flow, the service automatically removes the associated output.
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RemoveFlowOutputFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::remove_flow_output::builders::RemoveFlowOutputInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::remove_flow_output::RemoveFlowOutputOutput,
        crate::operation::remove_flow_output::RemoveFlowOutputError,
    > for RemoveFlowOutputFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::remove_flow_output::RemoveFlowOutputOutput,
            crate::operation::remove_flow_output::RemoveFlowOutputError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RemoveFlowOutputFluentBuilder {
    /// Creates a new `RemoveFlowOutput`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RemoveFlowOutput as a reference.
    pub fn as_input(&self) -> &crate::operation::remove_flow_output::builders::RemoveFlowOutputInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::remove_flow_output::RemoveFlowOutputOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::remove_flow_output::RemoveFlowOutputError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::remove_flow_output::RemoveFlowOutput::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::remove_flow_output::RemoveFlowOutput::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::remove_flow_output::RemoveFlowOutputOutput,
        crate::operation::remove_flow_output::RemoveFlowOutputError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// The flow that you want to remove an output from.
    pub fn flow_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to remove an output from.
    pub fn set_flow_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The flow that you want to remove an output from.
    pub fn get_flow_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_flow_arn()
    }
    /// The ARN of the output that you want to remove.
    pub fn output_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.output_arn(input.into());
        self
    }
    /// The ARN of the output that you want to remove.
    pub fn set_output_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_output_arn(input);
        self
    }
    /// The ARN of the output that you want to remove.
    pub fn get_output_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_output_arn()
    }
}
