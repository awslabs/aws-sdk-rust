// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddBridgeSourcesOutput {
    /// The Amazon Resource Number (ARN) of the bridge.
    pub bridge_arn: ::std::option::Option<::std::string::String>,
    /// The sources that you added to this bridge.
    pub sources: ::std::option::Option<::std::vec::Vec<crate::types::BridgeSource>>,
    _request_id: Option<String>,
}
impl AddBridgeSourcesOutput {
    /// The Amazon Resource Number (ARN) of the bridge.
    pub fn bridge_arn(&self) -> ::std::option::Option<&str> {
        self.bridge_arn.as_deref()
    }
    /// The sources that you added to this bridge.
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sources.is_none()`.
    pub fn sources(&self) -> &[crate::types::BridgeSource] {
        self.sources.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for AddBridgeSourcesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AddBridgeSourcesOutput {
    /// Creates a new builder-style object to manufacture [`AddBridgeSourcesOutput`](crate::operation::add_bridge_sources::AddBridgeSourcesOutput).
    pub fn builder() -> crate::operation::add_bridge_sources::builders::AddBridgeSourcesOutputBuilder {
        crate::operation::add_bridge_sources::builders::AddBridgeSourcesOutputBuilder::default()
    }
}

/// A builder for [`AddBridgeSourcesOutput`](crate::operation::add_bridge_sources::AddBridgeSourcesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AddBridgeSourcesOutputBuilder {
    pub(crate) bridge_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::BridgeSource>>,
    _request_id: Option<String>,
}
impl AddBridgeSourcesOutputBuilder {
    /// The Amazon Resource Number (ARN) of the bridge.
    pub fn bridge_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bridge_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// The Amazon Resource Number (ARN) of the bridge.
    pub fn set_bridge_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bridge_arn = input;
        self
    }
    /// The Amazon Resource Number (ARN) of the bridge.
    pub fn get_bridge_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.bridge_arn
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// The sources that you added to this bridge.
    pub fn sources(mut self, input: crate::types::BridgeSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// The sources that you added to this bridge.
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::BridgeSource>>) -> Self {
        self.sources = input;
        self
    }
    /// The sources that you added to this bridge.
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::BridgeSource>> {
        &self.sources
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AddBridgeSourcesOutput`](crate::operation::add_bridge_sources::AddBridgeSourcesOutput).
    pub fn build(self) -> crate::operation::add_bridge_sources::AddBridgeSourcesOutput {
        crate::operation::add_bridge_sources::AddBridgeSourcesOutput {
            bridge_arn: self.bridge_arn,
            sources: self.sources,
            _request_id: self._request_id,
        }
    }
}
