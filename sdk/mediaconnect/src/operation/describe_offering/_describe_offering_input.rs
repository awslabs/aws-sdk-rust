// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeOfferingInput {
    /// The Amazon Resource Name (ARN) of the offering.
    #[doc(hidden)]
    pub offering_arn: std::option::Option<std::string::String>,
}
impl DescribeOfferingInput {
    /// The Amazon Resource Name (ARN) of the offering.
    pub fn offering_arn(&self) -> std::option::Option<&str> {
        self.offering_arn.as_deref()
    }
}
impl DescribeOfferingInput {
    /// Creates a new builder-style object to manufacture [`DescribeOfferingInput`](crate::operation::describe_offering::DescribeOfferingInput).
    pub fn builder() -> crate::operation::describe_offering::builders::DescribeOfferingInputBuilder
    {
        crate::operation::describe_offering::builders::DescribeOfferingInputBuilder::default()
    }
}

/// A builder for [`DescribeOfferingInput`](crate::operation::describe_offering::DescribeOfferingInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeOfferingInputBuilder {
    pub(crate) offering_arn: std::option::Option<std::string::String>,
}
impl DescribeOfferingInputBuilder {
    /// The Amazon Resource Name (ARN) of the offering.
    pub fn offering_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.offering_arn = Some(input.into());
        self
    }
    /// The Amazon Resource Name (ARN) of the offering.
    pub fn set_offering_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.offering_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeOfferingInput`](crate::operation::describe_offering::DescribeOfferingInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_offering::DescribeOfferingInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::describe_offering::DescribeOfferingInput {
            offering_arn: self.offering_arn,
        })
    }
}
