// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::remove_flow_vpc_interface::_remove_flow_vpc_interface_output::RemoveFlowVpcInterfaceOutputBuilder;

pub use crate::operation::remove_flow_vpc_interface::_remove_flow_vpc_interface_input::RemoveFlowVpcInterfaceInputBuilder;

/// Fluent builder constructing a request to `RemoveFlowVpcInterface`.
///
/// Removes a VPC Interface from an existing flow. This request can be made only on a VPC interface that does not have a Source or Output associated with it. If the VPC interface is referenced by a Source or Output, you must first delete or update the Source or Output to no longer reference the VPC interface.
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct RemoveFlowVpcInterfaceFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::remove_flow_vpc_interface::builders::RemoveFlowVpcInterfaceInputBuilder,
}
impl RemoveFlowVpcInterfaceFluentBuilder {
    /// Creates a new `RemoveFlowVpcInterface`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterface,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::remove_flow_vpc_interface::RemoveFlowVpcInterfaceError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// The flow that you want to remove a VPC interface from.
    pub fn flow_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.flow_arn(input.into());
        self
    }
    /// The flow that you want to remove a VPC interface from.
    pub fn set_flow_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_flow_arn(input);
        self
    }
    /// The name of the VPC interface that you want to remove.
    pub fn vpc_interface_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.vpc_interface_name(input.into());
        self
    }
    /// The name of the VPC interface that you want to remove.
    pub fn set_vpc_interface_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_vpc_interface_name(input);
        self
    }
}
