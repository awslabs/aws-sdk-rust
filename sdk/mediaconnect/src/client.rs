// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS MediaConnect
///
/// Client for invoking operations on AWS MediaConnect. Each operation on AWS MediaConnect is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_mediaconnect::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_mediaconnect::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_mediaconnect::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AddFlowMediaStreams`](crate::client::fluent_builders::AddFlowMediaStreams) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::AddFlowMediaStreams::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::AddFlowMediaStreams::set_flow_arn): The Amazon Resource Name (ARN) of the flow.
    ///   - [`media_streams(Vec<AddMediaStreamRequest>)`](crate::client::fluent_builders::AddFlowMediaStreams::media_streams) / [`set_media_streams(Option<Vec<AddMediaStreamRequest>>)`](crate::client::fluent_builders::AddFlowMediaStreams::set_media_streams): The media streams that you want to add to the flow.
    /// - On success, responds with [`AddFlowMediaStreamsOutput`](crate::output::AddFlowMediaStreamsOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::AddFlowMediaStreamsOutput::flow_arn): The ARN of the flow that you added media streams to.
    ///   - [`media_streams(Option<Vec<MediaStream>>)`](crate::output::AddFlowMediaStreamsOutput::media_streams): The media streams that you added to the flow.
    /// - On failure, responds with [`SdkError<AddFlowMediaStreamsError>`](crate::error::AddFlowMediaStreamsError)
    pub fn add_flow_media_streams(&self) -> crate::client::fluent_builders::AddFlowMediaStreams {
        crate::client::fluent_builders::AddFlowMediaStreams::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddFlowOutputs`](crate::client::fluent_builders::AddFlowOutputs) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::AddFlowOutputs::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::AddFlowOutputs::set_flow_arn): The flow that you want to add outputs to.
    ///   - [`outputs(Vec<AddOutputRequest>)`](crate::client::fluent_builders::AddFlowOutputs::outputs) / [`set_outputs(Option<Vec<AddOutputRequest>>)`](crate::client::fluent_builders::AddFlowOutputs::set_outputs): A list of outputs that you want to add.
    /// - On success, responds with [`AddFlowOutputsOutput`](crate::output::AddFlowOutputsOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::AddFlowOutputsOutput::flow_arn): The ARN of the flow that these outputs were added to.
    ///   - [`outputs(Option<Vec<Output>>)`](crate::output::AddFlowOutputsOutput::outputs): The details of the newly added outputs.
    /// - On failure, responds with [`SdkError<AddFlowOutputsError>`](crate::error::AddFlowOutputsError)
    pub fn add_flow_outputs(&self) -> crate::client::fluent_builders::AddFlowOutputs {
        crate::client::fluent_builders::AddFlowOutputs::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddFlowSources`](crate::client::fluent_builders::AddFlowSources) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::AddFlowSources::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::AddFlowSources::set_flow_arn): The flow that you want to mutate.
    ///   - [`sources(Vec<SetSourceRequest>)`](crate::client::fluent_builders::AddFlowSources::sources) / [`set_sources(Option<Vec<SetSourceRequest>>)`](crate::client::fluent_builders::AddFlowSources::set_sources): A list of sources that you want to add.
    /// - On success, responds with [`AddFlowSourcesOutput`](crate::output::AddFlowSourcesOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::AddFlowSourcesOutput::flow_arn): The ARN of the flow that these sources were added to.
    ///   - [`sources(Option<Vec<Source>>)`](crate::output::AddFlowSourcesOutput::sources): The details of the newly added sources.
    /// - On failure, responds with [`SdkError<AddFlowSourcesError>`](crate::error::AddFlowSourcesError)
    pub fn add_flow_sources(&self) -> crate::client::fluent_builders::AddFlowSources {
        crate::client::fluent_builders::AddFlowSources::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`AddFlowVpcInterfaces`](crate::client::fluent_builders::AddFlowVpcInterfaces) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::AddFlowVpcInterfaces::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::AddFlowVpcInterfaces::set_flow_arn): The flow that you want to mutate.
    ///   - [`vpc_interfaces(Vec<VpcInterfaceRequest>)`](crate::client::fluent_builders::AddFlowVpcInterfaces::vpc_interfaces) / [`set_vpc_interfaces(Option<Vec<VpcInterfaceRequest>>)`](crate::client::fluent_builders::AddFlowVpcInterfaces::set_vpc_interfaces): A list of VPC interfaces that you want to add.
    /// - On success, responds with [`AddFlowVpcInterfacesOutput`](crate::output::AddFlowVpcInterfacesOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::AddFlowVpcInterfacesOutput::flow_arn): The ARN of the flow that these VPC interfaces were added to.
    ///   - [`vpc_interfaces(Option<Vec<VpcInterface>>)`](crate::output::AddFlowVpcInterfacesOutput::vpc_interfaces): The details of the newly added VPC interfaces.
    /// - On failure, responds with [`SdkError<AddFlowVpcInterfacesError>`](crate::error::AddFlowVpcInterfacesError)
    pub fn add_flow_vpc_interfaces(&self) -> crate::client::fluent_builders::AddFlowVpcInterfaces {
        crate::client::fluent_builders::AddFlowVpcInterfaces::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateFlow`](crate::client::fluent_builders::CreateFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`availability_zone(impl Into<String>)`](crate::client::fluent_builders::CreateFlow::availability_zone) / [`set_availability_zone(Option<String>)`](crate::client::fluent_builders::CreateFlow::set_availability_zone): The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
    ///   - [`entitlements(Vec<GrantEntitlementRequest>)`](crate::client::fluent_builders::CreateFlow::entitlements) / [`set_entitlements(Option<Vec<GrantEntitlementRequest>>)`](crate::client::fluent_builders::CreateFlow::set_entitlements): The entitlements that you want to grant on a flow.
    ///   - [`media_streams(Vec<AddMediaStreamRequest>)`](crate::client::fluent_builders::CreateFlow::media_streams) / [`set_media_streams(Option<Vec<AddMediaStreamRequest>>)`](crate::client::fluent_builders::CreateFlow::set_media_streams): The media streams that you want to add to the flow. You can associate these media streams with sources and outputs on the flow.
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateFlow::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateFlow::set_name): The name of the flow.
    ///   - [`outputs(Vec<AddOutputRequest>)`](crate::client::fluent_builders::CreateFlow::outputs) / [`set_outputs(Option<Vec<AddOutputRequest>>)`](crate::client::fluent_builders::CreateFlow::set_outputs): The outputs that you want to add to this flow.
    ///   - [`source(SetSourceRequest)`](crate::client::fluent_builders::CreateFlow::source) / [`set_source(Option<SetSourceRequest>)`](crate::client::fluent_builders::CreateFlow::set_source): The settings for the source of the flow.
    ///   - [`source_failover_config(FailoverConfig)`](crate::client::fluent_builders::CreateFlow::source_failover_config) / [`set_source_failover_config(Option<FailoverConfig>)`](crate::client::fluent_builders::CreateFlow::set_source_failover_config): The settings for source failover.
    ///   - [`sources(Vec<SetSourceRequest>)`](crate::client::fluent_builders::CreateFlow::sources) / [`set_sources(Option<Vec<SetSourceRequest>>)`](crate::client::fluent_builders::CreateFlow::set_sources): (undocumented)
    ///   - [`vpc_interfaces(Vec<VpcInterfaceRequest>)`](crate::client::fluent_builders::CreateFlow::vpc_interfaces) / [`set_vpc_interfaces(Option<Vec<VpcInterfaceRequest>>)`](crate::client::fluent_builders::CreateFlow::set_vpc_interfaces): The VPC interfaces you want on the flow.
    ///   - [`maintenance(AddMaintenance)`](crate::client::fluent_builders::CreateFlow::maintenance) / [`set_maintenance(Option<AddMaintenance>)`](crate::client::fluent_builders::CreateFlow::set_maintenance): Create maintenance setting for a flow
    /// - On success, responds with [`CreateFlowOutput`](crate::output::CreateFlowOutput) with field(s):
    ///   - [`flow(Option<Flow>)`](crate::output::CreateFlowOutput::flow): The settings for a flow, including its source, outputs, and entitlements.
    /// - On failure, responds with [`SdkError<CreateFlowError>`](crate::error::CreateFlowError)
    pub fn create_flow(&self) -> crate::client::fluent_builders::CreateFlow {
        crate::client::fluent_builders::CreateFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteFlow`](crate::client::fluent_builders::DeleteFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::DeleteFlow::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::DeleteFlow::set_flow_arn): The ARN of the flow that you want to delete.
    /// - On success, responds with [`DeleteFlowOutput`](crate::output::DeleteFlowOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::DeleteFlowOutput::flow_arn): The ARN of the flow that was deleted.
    ///   - [`status(Option<Status>)`](crate::output::DeleteFlowOutput::status): The status of the flow when the DeleteFlow process begins.
    /// - On failure, responds with [`SdkError<DeleteFlowError>`](crate::error::DeleteFlowError)
    pub fn delete_flow(&self) -> crate::client::fluent_builders::DeleteFlow {
        crate::client::fluent_builders::DeleteFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeFlow`](crate::client::fluent_builders::DescribeFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeFlow::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::DescribeFlow::set_flow_arn): The ARN of the flow that you want to describe.
    /// - On success, responds with [`DescribeFlowOutput`](crate::output::DescribeFlowOutput) with field(s):
    ///   - [`flow(Option<Flow>)`](crate::output::DescribeFlowOutput::flow): The settings for a flow, including its source, outputs, and entitlements.
    ///   - [`messages(Option<Messages>)`](crate::output::DescribeFlowOutput::messages): Messages that provide the state of the flow.
    /// - On failure, responds with [`SdkError<DescribeFlowError>`](crate::error::DescribeFlowError)
    pub fn describe_flow(&self) -> crate::client::fluent_builders::DescribeFlow {
        crate::client::fluent_builders::DescribeFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeOffering`](crate::client::fluent_builders::DescribeOffering) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`offering_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeOffering::offering_arn) / [`set_offering_arn(Option<String>)`](crate::client::fluent_builders::DescribeOffering::set_offering_arn): The Amazon Resource Name (ARN) of the offering.
    /// - On success, responds with [`DescribeOfferingOutput`](crate::output::DescribeOfferingOutput) with field(s):
    ///   - [`offering(Option<Offering>)`](crate::output::DescribeOfferingOutput::offering): A savings plan that reserves a certain amount of outbound bandwidth usage at a discounted rate each month over a period of time.
    /// - On failure, responds with [`SdkError<DescribeOfferingError>`](crate::error::DescribeOfferingError)
    pub fn describe_offering(&self) -> crate::client::fluent_builders::DescribeOffering {
        crate::client::fluent_builders::DescribeOffering::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeReservation`](crate::client::fluent_builders::DescribeReservation) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`reservation_arn(impl Into<String>)`](crate::client::fluent_builders::DescribeReservation::reservation_arn) / [`set_reservation_arn(Option<String>)`](crate::client::fluent_builders::DescribeReservation::set_reservation_arn): The Amazon Resource Name (ARN) of the reservation.
    /// - On success, responds with [`DescribeReservationOutput`](crate::output::DescribeReservationOutput) with field(s):
    ///   - [`reservation(Option<Reservation>)`](crate::output::DescribeReservationOutput::reservation): A pricing agreement for a discounted rate for a specific outbound bandwidth that your MediaConnect account will use each month over a specific time period. The discounted rate in the reservation applies to outbound bandwidth for all flows from your account until your account reaches the amount of bandwidth in your reservation. If you use more outbound bandwidth than the agreed upon amount in a single month, the overage is charged at the on-demand rate.
    /// - On failure, responds with [`SdkError<DescribeReservationError>`](crate::error::DescribeReservationError)
    pub fn describe_reservation(&self) -> crate::client::fluent_builders::DescribeReservation {
        crate::client::fluent_builders::DescribeReservation::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GrantFlowEntitlements`](crate::client::fluent_builders::GrantFlowEntitlements) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`entitlements(Vec<GrantEntitlementRequest>)`](crate::client::fluent_builders::GrantFlowEntitlements::entitlements) / [`set_entitlements(Option<Vec<GrantEntitlementRequest>>)`](crate::client::fluent_builders::GrantFlowEntitlements::set_entitlements): The list of entitlements that you want to grant.
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::GrantFlowEntitlements::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::GrantFlowEntitlements::set_flow_arn): The flow that you want to grant entitlements on.
    /// - On success, responds with [`GrantFlowEntitlementsOutput`](crate::output::GrantFlowEntitlementsOutput) with field(s):
    ///   - [`entitlements(Option<Vec<Entitlement>>)`](crate::output::GrantFlowEntitlementsOutput::entitlements): The entitlements that were just granted.
    ///   - [`flow_arn(Option<String>)`](crate::output::GrantFlowEntitlementsOutput::flow_arn): The ARN of the flow that these entitlements were granted to.
    /// - On failure, responds with [`SdkError<GrantFlowEntitlementsError>`](crate::error::GrantFlowEntitlementsError)
    pub fn grant_flow_entitlements(&self) -> crate::client::fluent_builders::GrantFlowEntitlements {
        crate::client::fluent_builders::GrantFlowEntitlements::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListEntitlements`](crate::client::fluent_builders::ListEntitlements) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListEntitlements::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListEntitlements::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListEntitlements::set_max_results): The maximum number of results to return per API request. For example, you submit a ListEntitlements request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 20 results per page.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListEntitlements::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListEntitlements::set_next_token): The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.
    /// - On success, responds with [`ListEntitlementsOutput`](crate::output::ListEntitlementsOutput) with field(s):
    ///   - [`entitlements(Option<Vec<ListedEntitlement>>)`](crate::output::ListEntitlementsOutput::entitlements): A list of entitlements that have been granted to you from other AWS accounts.
    ///   - [`next_token(Option<String>)`](crate::output::ListEntitlementsOutput::next_token): The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.
    /// - On failure, responds with [`SdkError<ListEntitlementsError>`](crate::error::ListEntitlementsError)
    pub fn list_entitlements(&self) -> crate::client::fluent_builders::ListEntitlements {
        crate::client::fluent_builders::ListEntitlements::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListFlows`](crate::client::fluent_builders::ListFlows) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListFlows::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListFlows::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListFlows::set_max_results): The maximum number of results to return per API request. For example, you submit a ListFlows request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListFlows::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListFlows::set_next_token): The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.
    /// - On success, responds with [`ListFlowsOutput`](crate::output::ListFlowsOutput) with field(s):
    ///   - [`flows(Option<Vec<ListedFlow>>)`](crate::output::ListFlowsOutput::flows): A list of flow summaries.
    ///   - [`next_token(Option<String>)`](crate::output::ListFlowsOutput::next_token): The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.
    /// - On failure, responds with [`SdkError<ListFlowsError>`](crate::error::ListFlowsError)
    pub fn list_flows(&self) -> crate::client::fluent_builders::ListFlows {
        crate::client::fluent_builders::ListFlows::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListOfferings`](crate::client::fluent_builders::ListOfferings) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListOfferings::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListOfferings::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListOfferings::set_max_results): The maximum number of results to return per API request. For example, you submit a ListOfferings request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListOfferings::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListOfferings::set_next_token): The token that identifies which batch of results that you want to see. For example, you submit a ListOfferings request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
    /// - On success, responds with [`ListOfferingsOutput`](crate::output::ListOfferingsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListOfferingsOutput::next_token): The token that identifies which batch of results that you want to see. For example, you submit a ListOfferings request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
    ///   - [`offerings(Option<Vec<Offering>>)`](crate::output::ListOfferingsOutput::offerings): A list of offerings that are available to this account in the current AWS Region.
    /// - On failure, responds with [`SdkError<ListOfferingsError>`](crate::error::ListOfferingsError)
    pub fn list_offerings(&self) -> crate::client::fluent_builders::ListOfferings {
        crate::client::fluent_builders::ListOfferings::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListReservations`](crate::client::fluent_builders::ListReservations) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListReservations::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListReservations::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListReservations::set_max_results): The maximum number of results to return per API request. For example, you submit a ListReservations request with MaxResults set at 5. Although 20 items match your request, the service returns no more than the first 5 items. (The service also returns a NextToken value that you can use to fetch the next batch of results.) The service might return fewer results than the MaxResults value. If MaxResults is not included in the request, the service defaults to pagination with a maximum of 10 results per page.
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListReservations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListReservations::set_next_token): The token that identifies which batch of results that you want to see. For example, you submit a ListReservations request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListOfferings request a second time and specify the NextToken value.
    /// - On success, responds with [`ListReservationsOutput`](crate::output::ListReservationsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListReservationsOutput::next_token): The token that identifies which batch of results that you want to see. For example, you submit a ListReservations request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListReservations request a second time and specify the NextToken value.
    ///   - [`reservations(Option<Vec<Reservation>>)`](crate::output::ListReservationsOutput::reservations): A list of all reservations that have been purchased by this account in the current AWS Region.
    /// - On failure, responds with [`SdkError<ListReservationsError>`](crate::error::ListReservationsError)
    pub fn list_reservations(&self) -> crate::client::fluent_builders::ListReservations {
        crate::client::fluent_builders::ListReservations::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource for which to list the tags.
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PurchaseOffering`](crate::client::fluent_builders::PurchaseOffering) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`offering_arn(impl Into<String>)`](crate::client::fluent_builders::PurchaseOffering::offering_arn) / [`set_offering_arn(Option<String>)`](crate::client::fluent_builders::PurchaseOffering::set_offering_arn): The Amazon Resource Name (ARN) of the offering.
    ///   - [`reservation_name(impl Into<String>)`](crate::client::fluent_builders::PurchaseOffering::reservation_name) / [`set_reservation_name(Option<String>)`](crate::client::fluent_builders::PurchaseOffering::set_reservation_name): The name that you want to use for the reservation.
    ///   - [`start(impl Into<String>)`](crate::client::fluent_builders::PurchaseOffering::start) / [`set_start(Option<String>)`](crate::client::fluent_builders::PurchaseOffering::set_start): The date and time that you want the reservation to begin, in Coordinated Universal Time (UTC). You can specify any date and time between 12:00am on the first day of the current month to the current time on today's date, inclusive. Specify the start in a 24-hour notation. Use the following format: YYYY-MM-DDTHH:mm:SSZ, where T and Z are literal characters. For example, to specify 11:30pm on March 5, 2020, enter 2020-03-05T23:30:00Z.
    /// - On success, responds with [`PurchaseOfferingOutput`](crate::output::PurchaseOfferingOutput) with field(s):
    ///   - [`reservation(Option<Reservation>)`](crate::output::PurchaseOfferingOutput::reservation): A pricing agreement for a discounted rate for a specific outbound bandwidth that your MediaConnect account will use each month over a specific time period. The discounted rate in the reservation applies to outbound bandwidth for all flows from your account until your account reaches the amount of bandwidth in your reservation. If you use more outbound bandwidth than the agreed upon amount in a single month, the overage is charged at the on-demand rate.
    /// - On failure, responds with [`SdkError<PurchaseOfferingError>`](crate::error::PurchaseOfferingError)
    pub fn purchase_offering(&self) -> crate::client::fluent_builders::PurchaseOffering {
        crate::client::fluent_builders::PurchaseOffering::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveFlowMediaStream`](crate::client::fluent_builders::RemoveFlowMediaStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::RemoveFlowMediaStream::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::RemoveFlowMediaStream::set_flow_arn): The Amazon Resource Name (ARN) of the flow.
    ///   - [`media_stream_name(impl Into<String>)`](crate::client::fluent_builders::RemoveFlowMediaStream::media_stream_name) / [`set_media_stream_name(Option<String>)`](crate::client::fluent_builders::RemoveFlowMediaStream::set_media_stream_name): The name of the media stream that you want to remove.
    /// - On success, responds with [`RemoveFlowMediaStreamOutput`](crate::output::RemoveFlowMediaStreamOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::RemoveFlowMediaStreamOutput::flow_arn): The Amazon Resource Name (ARN) of the flow.
    ///   - [`media_stream_name(Option<String>)`](crate::output::RemoveFlowMediaStreamOutput::media_stream_name): The name of the media stream that was removed.
    /// - On failure, responds with [`SdkError<RemoveFlowMediaStreamError>`](crate::error::RemoveFlowMediaStreamError)
    pub fn remove_flow_media_stream(
        &self,
    ) -> crate::client::fluent_builders::RemoveFlowMediaStream {
        crate::client::fluent_builders::RemoveFlowMediaStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveFlowOutput`](crate::client::fluent_builders::RemoveFlowOutput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::RemoveFlowOutput::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::RemoveFlowOutput::set_flow_arn): The flow that you want to remove an output from.
    ///   - [`output_arn(impl Into<String>)`](crate::client::fluent_builders::RemoveFlowOutput::output_arn) / [`set_output_arn(Option<String>)`](crate::client::fluent_builders::RemoveFlowOutput::set_output_arn): The ARN of the output that you want to remove.
    /// - On success, responds with [`RemoveFlowOutputOutput`](crate::output::RemoveFlowOutputOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::RemoveFlowOutputOutput::flow_arn): The ARN of the flow that is associated with the output you removed.
    ///   - [`output_arn(Option<String>)`](crate::output::RemoveFlowOutputOutput::output_arn): The ARN of the output that was removed.
    /// - On failure, responds with [`SdkError<RemoveFlowOutputError>`](crate::error::RemoveFlowOutputError)
    pub fn remove_flow_output(&self) -> crate::client::fluent_builders::RemoveFlowOutput {
        crate::client::fluent_builders::RemoveFlowOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveFlowSource`](crate::client::fluent_builders::RemoveFlowSource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::RemoveFlowSource::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::RemoveFlowSource::set_flow_arn): The flow that you want to remove a source from.
    ///   - [`source_arn(impl Into<String>)`](crate::client::fluent_builders::RemoveFlowSource::source_arn) / [`set_source_arn(Option<String>)`](crate::client::fluent_builders::RemoveFlowSource::set_source_arn): The ARN of the source that you want to remove.
    /// - On success, responds with [`RemoveFlowSourceOutput`](crate::output::RemoveFlowSourceOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::RemoveFlowSourceOutput::flow_arn): The ARN of the flow that is associated with the source you removed.
    ///   - [`source_arn(Option<String>)`](crate::output::RemoveFlowSourceOutput::source_arn): The ARN of the source that was removed.
    /// - On failure, responds with [`SdkError<RemoveFlowSourceError>`](crate::error::RemoveFlowSourceError)
    pub fn remove_flow_source(&self) -> crate::client::fluent_builders::RemoveFlowSource {
        crate::client::fluent_builders::RemoveFlowSource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RemoveFlowVpcInterface`](crate::client::fluent_builders::RemoveFlowVpcInterface) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::RemoveFlowVpcInterface::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::RemoveFlowVpcInterface::set_flow_arn): The flow that you want to remove a VPC interface from.
    ///   - [`vpc_interface_name(impl Into<String>)`](crate::client::fluent_builders::RemoveFlowVpcInterface::vpc_interface_name) / [`set_vpc_interface_name(Option<String>)`](crate::client::fluent_builders::RemoveFlowVpcInterface::set_vpc_interface_name): The name of the VPC interface that you want to remove.
    /// - On success, responds with [`RemoveFlowVpcInterfaceOutput`](crate::output::RemoveFlowVpcInterfaceOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::RemoveFlowVpcInterfaceOutput::flow_arn): The ARN of the flow that is associated with the VPC interface you removed.
    ///   - [`non_deleted_network_interface_ids(Option<Vec<String>>)`](crate::output::RemoveFlowVpcInterfaceOutput::non_deleted_network_interface_ids): IDs of network interfaces associated with the removed VPC interface that Media Connect was unable to remove.
    ///   - [`vpc_interface_name(Option<String>)`](crate::output::RemoveFlowVpcInterfaceOutput::vpc_interface_name): The name of the VPC interface that was removed.
    /// - On failure, responds with [`SdkError<RemoveFlowVpcInterfaceError>`](crate::error::RemoveFlowVpcInterfaceError)
    pub fn remove_flow_vpc_interface(
        &self,
    ) -> crate::client::fluent_builders::RemoveFlowVpcInterface {
        crate::client::fluent_builders::RemoveFlowVpcInterface::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`RevokeFlowEntitlement`](crate::client::fluent_builders::RevokeFlowEntitlement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`entitlement_arn(impl Into<String>)`](crate::client::fluent_builders::RevokeFlowEntitlement::entitlement_arn) / [`set_entitlement_arn(Option<String>)`](crate::client::fluent_builders::RevokeFlowEntitlement::set_entitlement_arn): The ARN of the entitlement that you want to revoke.
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::RevokeFlowEntitlement::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::RevokeFlowEntitlement::set_flow_arn): The flow that you want to revoke an entitlement from.
    /// - On success, responds with [`RevokeFlowEntitlementOutput`](crate::output::RevokeFlowEntitlementOutput) with field(s):
    ///   - [`entitlement_arn(Option<String>)`](crate::output::RevokeFlowEntitlementOutput::entitlement_arn): The ARN of the entitlement that was revoked.
    ///   - [`flow_arn(Option<String>)`](crate::output::RevokeFlowEntitlementOutput::flow_arn): The ARN of the flow that the entitlement was revoked from.
    /// - On failure, responds with [`SdkError<RevokeFlowEntitlementError>`](crate::error::RevokeFlowEntitlementError)
    pub fn revoke_flow_entitlement(&self) -> crate::client::fluent_builders::RevokeFlowEntitlement {
        crate::client::fluent_builders::RevokeFlowEntitlement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StartFlow`](crate::client::fluent_builders::StartFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::StartFlow::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::StartFlow::set_flow_arn): The ARN of the flow that you want to start.
    /// - On success, responds with [`StartFlowOutput`](crate::output::StartFlowOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::StartFlowOutput::flow_arn): The ARN of the flow that you started.
    ///   - [`status(Option<Status>)`](crate::output::StartFlowOutput::status): The status of the flow when the StartFlow process begins.
    /// - On failure, responds with [`SdkError<StartFlowError>`](crate::error::StartFlowError)
    pub fn start_flow(&self) -> crate::client::fluent_builders::StartFlow {
        crate::client::fluent_builders::StartFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`StopFlow`](crate::client::fluent_builders::StopFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::StopFlow::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::StopFlow::set_flow_arn): The ARN of the flow that you want to stop.
    /// - On success, responds with [`StopFlowOutput`](crate::output::StopFlowOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::StopFlowOutput::flow_arn): The ARN of the flow that you stopped.
    ///   - [`status(Option<Status>)`](crate::output::StopFlowOutput::status): The status of the flow when the StopFlow process begins.
    /// - On failure, responds with [`SdkError<StopFlowError>`](crate::error::StopFlowError)
    pub fn stop_flow(&self) -> crate::client::fluent_builders::StopFlow {
        crate::client::fluent_builders::StopFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource to which to add tags.
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): A map from tag keys to values. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): The Amazon Resource Name (ARN) that identifies the AWS Elemental MediaConnect resource from which to delete tags.
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): The keys of the tags to be removed.
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFlow`](crate::client::fluent_builders::UpdateFlow) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlow::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlow::set_flow_arn): The flow that you want to update.
    ///   - [`source_failover_config(UpdateFailoverConfig)`](crate::client::fluent_builders::UpdateFlow::source_failover_config) / [`set_source_failover_config(Option<UpdateFailoverConfig>)`](crate::client::fluent_builders::UpdateFlow::set_source_failover_config): The settings for source failover.
    ///   - [`maintenance(UpdateMaintenance)`](crate::client::fluent_builders::UpdateFlow::maintenance) / [`set_maintenance(Option<UpdateMaintenance>)`](crate::client::fluent_builders::UpdateFlow::set_maintenance): Update maintenance setting for a flow
    /// - On success, responds with [`UpdateFlowOutput`](crate::output::UpdateFlowOutput) with field(s):
    ///   - [`flow(Option<Flow>)`](crate::output::UpdateFlowOutput::flow): The settings for a flow, including its source, outputs, and entitlements.
    /// - On failure, responds with [`SdkError<UpdateFlowError>`](crate::error::UpdateFlowError)
    pub fn update_flow(&self) -> crate::client::fluent_builders::UpdateFlow {
        crate::client::fluent_builders::UpdateFlow::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFlowEntitlement`](crate::client::fluent_builders::UpdateFlowEntitlement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowEntitlement::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateFlowEntitlement::set_description): A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
    ///   - [`encryption(UpdateEncryption)`](crate::client::fluent_builders::UpdateFlowEntitlement::encryption) / [`set_encryption(Option<UpdateEncryption>)`](crate::client::fluent_builders::UpdateFlowEntitlement::set_encryption): The type of encryption that will be used on the output associated with this entitlement.
    ///   - [`entitlement_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowEntitlement::entitlement_arn) / [`set_entitlement_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlowEntitlement::set_entitlement_arn): The ARN of the entitlement that you want to update.
    ///   - [`entitlement_status(EntitlementStatus)`](crate::client::fluent_builders::UpdateFlowEntitlement::entitlement_status) / [`set_entitlement_status(Option<EntitlementStatus>)`](crate::client::fluent_builders::UpdateFlowEntitlement::set_entitlement_status): An indication of whether you want to enable the entitlement to allow access, or disable it to stop streaming content to the subscriber’s flow temporarily. If you don’t specify the entitlementStatus field in your request, MediaConnect leaves the value unchanged.
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowEntitlement::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlowEntitlement::set_flow_arn): The flow that is associated with the entitlement that you want to update.
    ///   - [`subscribers(Vec<String>)`](crate::client::fluent_builders::UpdateFlowEntitlement::subscribers) / [`set_subscribers(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateFlowEntitlement::set_subscribers): The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
    /// - On success, responds with [`UpdateFlowEntitlementOutput`](crate::output::UpdateFlowEntitlementOutput) with field(s):
    ///   - [`entitlement(Option<Entitlement>)`](crate::output::UpdateFlowEntitlementOutput::entitlement): The new configuration of the entitlement that you updated.
    ///   - [`flow_arn(Option<String>)`](crate::output::UpdateFlowEntitlementOutput::flow_arn): The ARN of the flow that this entitlement was granted on.
    /// - On failure, responds with [`SdkError<UpdateFlowEntitlementError>`](crate::error::UpdateFlowEntitlementError)
    pub fn update_flow_entitlement(&self) -> crate::client::fluent_builders::UpdateFlowEntitlement {
        crate::client::fluent_builders::UpdateFlowEntitlement::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFlowMediaStream`](crate::client::fluent_builders::UpdateFlowMediaStream) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`attributes(MediaStreamAttributesRequest)`](crate::client::fluent_builders::UpdateFlowMediaStream::attributes) / [`set_attributes(Option<MediaStreamAttributesRequest>)`](crate::client::fluent_builders::UpdateFlowMediaStream::set_attributes): The attributes that you want to assign to the media stream.
    ///   - [`clock_rate(i32)`](crate::client::fluent_builders::UpdateFlowMediaStream::clock_rate) / [`set_clock_rate(i32)`](crate::client::fluent_builders::UpdateFlowMediaStream::set_clock_rate): The sample rate (in Hz) for the stream. If the media stream type is video or ancillary data, set this value to 90000. If the media stream type is audio, set this value to either 48000 or 96000.
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowMediaStream::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateFlowMediaStream::set_description): Description
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowMediaStream::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlowMediaStream::set_flow_arn): The Amazon Resource Name (ARN) of the flow.
    ///   - [`media_stream_name(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowMediaStream::media_stream_name) / [`set_media_stream_name(Option<String>)`](crate::client::fluent_builders::UpdateFlowMediaStream::set_media_stream_name): The name of the media stream that you want to update.
    ///   - [`media_stream_type(MediaStreamType)`](crate::client::fluent_builders::UpdateFlowMediaStream::media_stream_type) / [`set_media_stream_type(Option<MediaStreamType>)`](crate::client::fluent_builders::UpdateFlowMediaStream::set_media_stream_type): The type of media stream.
    ///   - [`video_format(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowMediaStream::video_format) / [`set_video_format(Option<String>)`](crate::client::fluent_builders::UpdateFlowMediaStream::set_video_format): The resolution of the video.
    /// - On success, responds with [`UpdateFlowMediaStreamOutput`](crate::output::UpdateFlowMediaStreamOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::UpdateFlowMediaStreamOutput::flow_arn): The ARN of the flow that is associated with the media stream that you updated.
    ///   - [`media_stream(Option<MediaStream>)`](crate::output::UpdateFlowMediaStreamOutput::media_stream): The media stream that you updated.
    /// - On failure, responds with [`SdkError<UpdateFlowMediaStreamError>`](crate::error::UpdateFlowMediaStreamError)
    pub fn update_flow_media_stream(
        &self,
    ) -> crate::client::fluent_builders::UpdateFlowMediaStream {
        crate::client::fluent_builders::UpdateFlowMediaStream::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFlowOutput`](crate::client::fluent_builders::UpdateFlowOutput) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`cidr_allow_list(Vec<String>)`](crate::client::fluent_builders::UpdateFlowOutput::cidr_allow_list) / [`set_cidr_allow_list(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateFlowOutput::set_cidr_allow_list): The range of IP addresses that should be allowed to initiate output requests to this flow. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowOutput::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateFlowOutput::set_description): A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
    ///   - [`destination(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowOutput::destination) / [`set_destination(Option<String>)`](crate::client::fluent_builders::UpdateFlowOutput::set_destination): The IP address where you want to send the output.
    ///   - [`encryption(UpdateEncryption)`](crate::client::fluent_builders::UpdateFlowOutput::encryption) / [`set_encryption(Option<UpdateEncryption>)`](crate::client::fluent_builders::UpdateFlowOutput::set_encryption): The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowOutput::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlowOutput::set_flow_arn): The flow that is associated with the output that you want to update.
    ///   - [`max_latency(i32)`](crate::client::fluent_builders::UpdateFlowOutput::max_latency) / [`set_max_latency(i32)`](crate::client::fluent_builders::UpdateFlowOutput::set_max_latency): The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    ///   - [`media_stream_output_configurations(Vec<MediaStreamOutputConfigurationRequest>)`](crate::client::fluent_builders::UpdateFlowOutput::media_stream_output_configurations) / [`set_media_stream_output_configurations(Option<Vec<MediaStreamOutputConfigurationRequest>>)`](crate::client::fluent_builders::UpdateFlowOutput::set_media_stream_output_configurations): The media streams that are associated with the output, and the parameters for those associations.
    ///   - [`min_latency(i32)`](crate::client::fluent_builders::UpdateFlowOutput::min_latency) / [`set_min_latency(i32)`](crate::client::fluent_builders::UpdateFlowOutput::set_min_latency): The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    ///   - [`output_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowOutput::output_arn) / [`set_output_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlowOutput::set_output_arn): The ARN of the output that you want to update.
    ///   - [`port(i32)`](crate::client::fluent_builders::UpdateFlowOutput::port) / [`set_port(i32)`](crate::client::fluent_builders::UpdateFlowOutput::set_port): The port to use when content is distributed to this output.
    ///   - [`protocol(Protocol)`](crate::client::fluent_builders::UpdateFlowOutput::protocol) / [`set_protocol(Option<Protocol>)`](crate::client::fluent_builders::UpdateFlowOutput::set_protocol): The protocol to use for the output.
    ///   - [`remote_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowOutput::remote_id) / [`set_remote_id(Option<String>)`](crate::client::fluent_builders::UpdateFlowOutput::set_remote_id): The remote ID for the Zixi-pull stream.
    ///   - [`sender_control_port(i32)`](crate::client::fluent_builders::UpdateFlowOutput::sender_control_port) / [`set_sender_control_port(i32)`](crate::client::fluent_builders::UpdateFlowOutput::set_sender_control_port): The port that the flow uses to send outbound requests to initiate connection with the sender.
    ///   - [`sender_ip_address(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowOutput::sender_ip_address) / [`set_sender_ip_address(Option<String>)`](crate::client::fluent_builders::UpdateFlowOutput::set_sender_ip_address): The IP address that the flow communicates with to initiate connection with the sender.
    ///   - [`smoothing_latency(i32)`](crate::client::fluent_builders::UpdateFlowOutput::smoothing_latency) / [`set_smoothing_latency(i32)`](crate::client::fluent_builders::UpdateFlowOutput::set_smoothing_latency): The smoothing latency in milliseconds for RIST, RTP, and RTP-FEC streams.
    ///   - [`stream_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowOutput::stream_id) / [`set_stream_id(Option<String>)`](crate::client::fluent_builders::UpdateFlowOutput::set_stream_id): The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    ///   - [`vpc_interface_attachment(VpcInterfaceAttachment)`](crate::client::fluent_builders::UpdateFlowOutput::vpc_interface_attachment) / [`set_vpc_interface_attachment(Option<VpcInterfaceAttachment>)`](crate::client::fluent_builders::UpdateFlowOutput::set_vpc_interface_attachment): The name of the VPC interface attachment to use for this output.
    /// - On success, responds with [`UpdateFlowOutputOutput`](crate::output::UpdateFlowOutputOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::UpdateFlowOutputOutput::flow_arn): The ARN of the flow that is associated with the updated output.
    ///   - [`output(Option<Output>)`](crate::output::UpdateFlowOutputOutput::output): The new settings of the output that you updated.
    /// - On failure, responds with [`SdkError<UpdateFlowOutputError>`](crate::error::UpdateFlowOutputError)
    pub fn update_flow_output(&self) -> crate::client::fluent_builders::UpdateFlowOutput {
        crate::client::fluent_builders::UpdateFlowOutput::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateFlowSource`](crate::client::fluent_builders::UpdateFlowSource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`decryption(UpdateEncryption)`](crate::client::fluent_builders::UpdateFlowSource::decryption) / [`set_decryption(Option<UpdateEncryption>)`](crate::client::fluent_builders::UpdateFlowSource::set_decryption): The type of encryption used on the content ingested from this source.
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_description): A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
    ///   - [`entitlement_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::entitlement_arn) / [`set_entitlement_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_entitlement_arn): The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
    ///   - [`flow_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::flow_arn) / [`set_flow_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_flow_arn): The flow that is associated with the source that you want to update.
    ///   - [`ingest_port(i32)`](crate::client::fluent_builders::UpdateFlowSource::ingest_port) / [`set_ingest_port(i32)`](crate::client::fluent_builders::UpdateFlowSource::set_ingest_port): The port that the flow will be listening on for incoming content.
    ///   - [`max_bitrate(i32)`](crate::client::fluent_builders::UpdateFlowSource::max_bitrate) / [`set_max_bitrate(i32)`](crate::client::fluent_builders::UpdateFlowSource::set_max_bitrate): The smoothing max bitrate for RIST, RTP, and RTP-FEC streams.
    ///   - [`max_latency(i32)`](crate::client::fluent_builders::UpdateFlowSource::max_latency) / [`set_max_latency(i32)`](crate::client::fluent_builders::UpdateFlowSource::set_max_latency): The maximum latency in milliseconds. This parameter applies only to RIST-based, Zixi-based, and Fujitsu-based streams.
    ///   - [`max_sync_buffer(i32)`](crate::client::fluent_builders::UpdateFlowSource::max_sync_buffer) / [`set_max_sync_buffer(i32)`](crate::client::fluent_builders::UpdateFlowSource::set_max_sync_buffer): The size of the buffer (in milliseconds) to use to sync incoming source data.
    ///   - [`media_stream_source_configurations(Vec<MediaStreamSourceConfigurationRequest>)`](crate::client::fluent_builders::UpdateFlowSource::media_stream_source_configurations) / [`set_media_stream_source_configurations(Option<Vec<MediaStreamSourceConfigurationRequest>>)`](crate::client::fluent_builders::UpdateFlowSource::set_media_stream_source_configurations): The media streams that are associated with the source, and the parameters for those associations.
    ///   - [`min_latency(i32)`](crate::client::fluent_builders::UpdateFlowSource::min_latency) / [`set_min_latency(i32)`](crate::client::fluent_builders::UpdateFlowSource::set_min_latency): The minimum latency in milliseconds for SRT-based streams. In streams that use the SRT protocol, this value that you set on your MediaConnect source or output represents the minimal potential latency of that connection. The latency of the stream is set to the highest number between the sender’s minimum latency and the receiver’s minimum latency.
    ///   - [`protocol(Protocol)`](crate::client::fluent_builders::UpdateFlowSource::protocol) / [`set_protocol(Option<Protocol>)`](crate::client::fluent_builders::UpdateFlowSource::set_protocol): The protocol that is used by the source.
    ///   - [`sender_control_port(i32)`](crate::client::fluent_builders::UpdateFlowSource::sender_control_port) / [`set_sender_control_port(i32)`](crate::client::fluent_builders::UpdateFlowSource::set_sender_control_port): The port that the flow uses to send outbound requests to initiate connection with the sender.
    ///   - [`sender_ip_address(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::sender_ip_address) / [`set_sender_ip_address(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_sender_ip_address): The IP address that the flow communicates with to initiate connection with the sender.
    ///   - [`source_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::source_arn) / [`set_source_arn(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_source_arn): The ARN of the source that you want to update.
    ///   - [`source_listener_address(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::source_listener_address) / [`set_source_listener_address(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_source_listener_address): Source IP or domain name for SRT-caller protocol.
    ///   - [`source_listener_port(i32)`](crate::client::fluent_builders::UpdateFlowSource::source_listener_port) / [`set_source_listener_port(i32)`](crate::client::fluent_builders::UpdateFlowSource::set_source_listener_port): Source port for SRT-caller protocol.
    ///   - [`stream_id(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::stream_id) / [`set_stream_id(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_stream_id): The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
    ///   - [`vpc_interface_name(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::vpc_interface_name) / [`set_vpc_interface_name(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_vpc_interface_name): The name of the VPC interface to use for this source.
    ///   - [`whitelist_cidr(impl Into<String>)`](crate::client::fluent_builders::UpdateFlowSource::whitelist_cidr) / [`set_whitelist_cidr(Option<String>)`](crate::client::fluent_builders::UpdateFlowSource::set_whitelist_cidr): The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should be in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
    /// - On success, responds with [`UpdateFlowSourceOutput`](crate::output::UpdateFlowSourceOutput) with field(s):
    ///   - [`flow_arn(Option<String>)`](crate::output::UpdateFlowSourceOutput::flow_arn): The ARN of the flow that you want to update.
    ///   - [`source(Option<Source>)`](crate::output::UpdateFlowSourceOutput::source): The settings for the source of the flow.
    /// - On failure, responds with [`SdkError<UpdateFlowSourceError>`](crate::error::UpdateFlowSourceError)
    pub fn update_flow_source(&self) -> crate::client::fluent_builders::UpdateFlowSource {
        crate::client::fluent_builders::UpdateFlowSource::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
