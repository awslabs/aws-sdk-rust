// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn bad_request_exception_correct_errors(
    mut builder: crate::types::error::builders::BadRequestExceptionBuilder,
) -> crate::types::error::builders::BadRequestExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn forbidden_exception_correct_errors(
    mut builder: crate::types::error::builders::ForbiddenExceptionBuilder,
) -> crate::types::error::builders::ForbiddenExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_error_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerErrorExceptionBuilder,
) -> crate::types::error::builders::InternalServerErrorExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::NotFoundExceptionBuilder,
) -> crate::types::error::builders::NotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_unavailable_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceUnavailableExceptionBuilder,
) -> crate::types::error::builders::ServiceUnavailableExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_requests_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyRequestsExceptionBuilder,
) -> crate::types::error::builders::TooManyRequestsExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn add_flow_outputs420_exception_correct_errors(
    mut builder: crate::types::error::builders::AddFlowOutputs420ExceptionBuilder,
) -> crate::types::error::builders::AddFlowOutputs420ExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_bridge420_exception_correct_errors(
    mut builder: crate::types::error::builders::CreateBridge420ExceptionBuilder,
) -> crate::types::error::builders::CreateBridge420ExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_flow420_exception_correct_errors(
    mut builder: crate::types::error::builders::CreateFlow420ExceptionBuilder,
) -> crate::types::error::builders::CreateFlow420ExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_gateway420_exception_correct_errors(
    mut builder: crate::types::error::builders::CreateGateway420ExceptionBuilder,
) -> crate::types::error::builders::CreateGateway420ExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn grant_flow_entitlements420_exception_correct_errors(
    mut builder: crate::types::error::builders::GrantFlowEntitlements420ExceptionBuilder,
) -> crate::types::error::builders::GrantFlowEntitlements420ExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn bridge_correct_errors(mut builder: crate::types::builders::BridgeBuilder) -> crate::types::builders::BridgeBuilder {
    if builder.bridge_arn.is_none() {
        builder.bridge_arn = Some(Default::default())
    }
    if builder.bridge_state.is_none() {
        builder.bridge_state = "no value was set".parse::<crate::types::BridgeState>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.placement_arn.is_none() {
        builder.placement_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn entitlement_correct_errors(mut builder: crate::types::builders::EntitlementBuilder) -> crate::types::builders::EntitlementBuilder {
    if builder.entitlement_arn.is_none() {
        builder.entitlement_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.subscribers.is_none() {
        builder.subscribers = Some(Default::default())
    }
    builder
}

pub(crate) fn flow_correct_errors(mut builder: crate::types::builders::FlowBuilder) -> crate::types::builders::FlowBuilder {
    if builder.availability_zone.is_none() {
        builder.availability_zone = Some(Default::default())
    }
    if builder.entitlements.is_none() {
        builder.entitlements = Some(Default::default())
    }
    if builder.flow_arn.is_none() {
        builder.flow_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.outputs.is_none() {
        builder.outputs = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = {
            let builder = crate::types::builders::SourceBuilder::default();
            Some(crate::serde_util::source_correct_errors(builder).build())
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    builder
}

pub(crate) fn gateway_correct_errors(mut builder: crate::types::builders::GatewayBuilder) -> crate::types::builders::GatewayBuilder {
    if builder.egress_cidr_blocks.is_none() {
        builder.egress_cidr_blocks = Some(Default::default())
    }
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.networks.is_none() {
        builder.networks = Some(Default::default())
    }
    builder
}

pub(crate) fn gateway_instance_correct_errors(
    mut builder: crate::types::builders::GatewayInstanceBuilder,
) -> crate::types::builders::GatewayInstanceBuilder {
    if builder.bridge_placement.is_none() {
        builder.bridge_placement = "no value was set".parse::<crate::types::BridgePlacement>().ok()
    }
    if builder.connection_status.is_none() {
        builder.connection_status = "no value was set".parse::<crate::types::ConnectionStatus>().ok()
    }
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.gateway_instance_arn.is_none() {
        builder.gateway_instance_arn = Some(Default::default())
    }
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    if builder.instance_state.is_none() {
        builder.instance_state = "no value was set".parse::<crate::types::InstanceState>().ok()
    }
    if builder.running_bridge_count.is_none() {
        builder.running_bridge_count = Some(Default::default())
    }
    builder
}

pub(crate) fn media_stream_correct_errors(mut builder: crate::types::builders::MediaStreamBuilder) -> crate::types::builders::MediaStreamBuilder {
    if builder.fmt.is_none() {
        builder.fmt = Some(Default::default())
    }
    if builder.media_stream_id.is_none() {
        builder.media_stream_id = Some(Default::default())
    }
    if builder.media_stream_name.is_none() {
        builder.media_stream_name = Some(Default::default())
    }
    if builder.media_stream_type.is_none() {
        builder.media_stream_type = "no value was set".parse::<crate::types::MediaStreamType>().ok()
    }
    builder
}

pub(crate) fn messages_correct_errors(mut builder: crate::types::builders::MessagesBuilder) -> crate::types::builders::MessagesBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn offering_correct_errors(mut builder: crate::types::builders::OfferingBuilder) -> crate::types::builders::OfferingBuilder {
    if builder.currency_code.is_none() {
        builder.currency_code = Some(Default::default())
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    if builder.duration_units.is_none() {
        builder.duration_units = "no value was set".parse::<crate::types::DurationUnits>().ok()
    }
    if builder.offering_arn.is_none() {
        builder.offering_arn = Some(Default::default())
    }
    if builder.offering_description.is_none() {
        builder.offering_description = Some(Default::default())
    }
    if builder.price_per_unit.is_none() {
        builder.price_per_unit = Some(Default::default())
    }
    if builder.price_units.is_none() {
        builder.price_units = "no value was set".parse::<crate::types::PriceUnits>().ok()
    }
    if builder.resource_specification.is_none() {
        builder.resource_specification = {
            let builder = crate::types::builders::ResourceSpecificationBuilder::default();
            Some(crate::serde_util::resource_specification_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn output_correct_errors(mut builder: crate::types::builders::OutputBuilder) -> crate::types::builders::OutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.output_arn.is_none() {
        builder.output_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn reservation_correct_errors(mut builder: crate::types::builders::ReservationBuilder) -> crate::types::builders::ReservationBuilder {
    if builder.currency_code.is_none() {
        builder.currency_code = Some(Default::default())
    }
    if builder.duration.is_none() {
        builder.duration = Some(Default::default())
    }
    if builder.duration_units.is_none() {
        builder.duration_units = "no value was set".parse::<crate::types::DurationUnits>().ok()
    }
    if builder.end.is_none() {
        builder.end = Some(Default::default())
    }
    if builder.offering_arn.is_none() {
        builder.offering_arn = Some(Default::default())
    }
    if builder.offering_description.is_none() {
        builder.offering_description = Some(Default::default())
    }
    if builder.price_per_unit.is_none() {
        builder.price_per_unit = Some(Default::default())
    }
    if builder.price_units.is_none() {
        builder.price_units = "no value was set".parse::<crate::types::PriceUnits>().ok()
    }
    if builder.reservation_arn.is_none() {
        builder.reservation_arn = Some(Default::default())
    }
    if builder.reservation_name.is_none() {
        builder.reservation_name = Some(Default::default())
    }
    if builder.reservation_state.is_none() {
        builder.reservation_state = "no value was set".parse::<crate::types::ReservationState>().ok()
    }
    if builder.resource_specification.is_none() {
        builder.resource_specification = {
            let builder = crate::types::builders::ResourceSpecificationBuilder::default();
            Some(crate::serde_util::resource_specification_correct_errors(builder).build())
        }
    }
    if builder.start.is_none() {
        builder.start = Some(Default::default())
    }
    builder
}

pub(crate) fn source_correct_errors(mut builder: crate::types::builders::SourceBuilder) -> crate::types::builders::SourceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.source_arn.is_none() {
        builder.source_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn bridge_flow_output_correct_errors(
    mut builder: crate::types::builders::BridgeFlowOutputBuilder,
) -> crate::types::builders::BridgeFlowOutputBuilder {
    if builder.flow_arn.is_none() {
        builder.flow_arn = Some(Default::default())
    }
    if builder.flow_source_arn.is_none() {
        builder.flow_source_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn bridge_flow_source_correct_errors(
    mut builder: crate::types::builders::BridgeFlowSourceBuilder,
) -> crate::types::builders::BridgeFlowSourceBuilder {
    if builder.flow_arn.is_none() {
        builder.flow_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn bridge_network_output_correct_errors(
    mut builder: crate::types::builders::BridgeNetworkOutputBuilder,
) -> crate::types::builders::BridgeNetworkOutputBuilder {
    if builder.ip_address.is_none() {
        builder.ip_address = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.network_name.is_none() {
        builder.network_name = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.protocol.is_none() {
        builder.protocol = "no value was set".parse::<crate::types::Protocol>().ok()
    }
    if builder.ttl.is_none() {
        builder.ttl = Some(Default::default())
    }
    builder
}

pub(crate) fn bridge_network_source_correct_errors(
    mut builder: crate::types::builders::BridgeNetworkSourceBuilder,
) -> crate::types::builders::BridgeNetworkSourceBuilder {
    if builder.multicast_ip.is_none() {
        builder.multicast_ip = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.network_name.is_none() {
        builder.network_name = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    if builder.protocol.is_none() {
        builder.protocol = "no value was set".parse::<crate::types::Protocol>().ok()
    }
    builder
}

pub(crate) fn egress_gateway_bridge_correct_errors(
    mut builder: crate::types::builders::EgressGatewayBridgeBuilder,
) -> crate::types::builders::EgressGatewayBridgeBuilder {
    if builder.max_bitrate.is_none() {
        builder.max_bitrate = Some(Default::default())
    }
    builder
}

pub(crate) fn encryption_correct_errors(mut builder: crate::types::builders::EncryptionBuilder) -> crate::types::builders::EncryptionBuilder {
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn gateway_bridge_source_correct_errors(
    mut builder: crate::types::builders::GatewayBridgeSourceBuilder,
) -> crate::types::builders::GatewayBridgeSourceBuilder {
    if builder.bridge_arn.is_none() {
        builder.bridge_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn ingress_gateway_bridge_correct_errors(
    mut builder: crate::types::builders::IngressGatewayBridgeBuilder,
) -> crate::types::builders::IngressGatewayBridgeBuilder {
    if builder.max_bitrate.is_none() {
        builder.max_bitrate = Some(Default::default())
    }
    if builder.max_outputs.is_none() {
        builder.max_outputs = Some(Default::default())
    }
    builder
}

pub(crate) fn listed_bridge_correct_errors(mut builder: crate::types::builders::ListedBridgeBuilder) -> crate::types::builders::ListedBridgeBuilder {
    if builder.bridge_arn.is_none() {
        builder.bridge_arn = Some(Default::default())
    }
    if builder.bridge_state.is_none() {
        builder.bridge_state = "no value was set".parse::<crate::types::BridgeState>().ok()
    }
    if builder.bridge_type.is_none() {
        builder.bridge_type = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.placement_arn.is_none() {
        builder.placement_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn listed_entitlement_correct_errors(
    mut builder: crate::types::builders::ListedEntitlementBuilder,
) -> crate::types::builders::ListedEntitlementBuilder {
    if builder.entitlement_arn.is_none() {
        builder.entitlement_arn = Some(Default::default())
    }
    if builder.entitlement_name.is_none() {
        builder.entitlement_name = Some(Default::default())
    }
    builder
}

pub(crate) fn listed_flow_correct_errors(mut builder: crate::types::builders::ListedFlowBuilder) -> crate::types::builders::ListedFlowBuilder {
    if builder.availability_zone.is_none() {
        builder.availability_zone = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.flow_arn.is_none() {
        builder.flow_arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.source_type.is_none() {
        builder.source_type = "no value was set".parse::<crate::types::SourceType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::Status>().ok()
    }
    builder
}

pub(crate) fn listed_gateway_correct_errors(
    mut builder: crate::types::builders::ListedGatewayBuilder,
) -> crate::types::builders::ListedGatewayBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.gateway_state.is_none() {
        builder.gateway_state = "no value was set".parse::<crate::types::GatewayState>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn listed_gateway_instance_correct_errors(
    mut builder: crate::types::builders::ListedGatewayInstanceBuilder,
) -> crate::types::builders::ListedGatewayInstanceBuilder {
    if builder.gateway_arn.is_none() {
        builder.gateway_arn = Some(Default::default())
    }
    if builder.gateway_instance_arn.is_none() {
        builder.gateway_instance_arn = Some(Default::default())
    }
    if builder.instance_id.is_none() {
        builder.instance_id = Some(Default::default())
    }
    builder
}

pub(crate) fn media_stream_attributes_correct_errors(
    mut builder: crate::types::builders::MediaStreamAttributesBuilder,
) -> crate::types::builders::MediaStreamAttributesBuilder {
    if builder.fmtp.is_none() {
        builder.fmtp = {
            let builder = crate::types::builders::FmtpBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn resource_specification_correct_errors(
    mut builder: crate::types::builders::ResourceSpecificationBuilder,
) -> crate::types::builders::ResourceSpecificationBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = "no value was set".parse::<crate::types::ResourceType>().ok()
    }
    builder
}

pub(crate) fn transport_correct_errors(mut builder: crate::types::builders::TransportBuilder) -> crate::types::builders::TransportBuilder {
    if builder.protocol.is_none() {
        builder.protocol = "no value was set".parse::<crate::types::Protocol>().ok()
    }
    builder
}

pub(crate) fn vpc_interface_correct_errors(mut builder: crate::types::builders::VpcInterfaceBuilder) -> crate::types::builders::VpcInterfaceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.network_interface_ids.is_none() {
        builder.network_interface_ids = Some(Default::default())
    }
    if builder.network_interface_type.is_none() {
        builder.network_interface_type = "no value was set".parse::<crate::types::NetworkInterfaceType>().ok()
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    if builder.subnet_id.is_none() {
        builder.subnet_id = Some(Default::default())
    }
    builder
}

pub(crate) fn gateway_network_correct_errors(
    mut builder: crate::types::builders::GatewayNetworkBuilder,
) -> crate::types::builders::GatewayNetworkBuilder {
    if builder.cidr_block.is_none() {
        builder.cidr_block = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn media_stream_output_configuration_correct_errors(
    mut builder: crate::types::builders::MediaStreamOutputConfigurationBuilder,
) -> crate::types::builders::MediaStreamOutputConfigurationBuilder {
    if builder.encoding_name.is_none() {
        builder.encoding_name = "no value was set".parse::<crate::types::EncodingName>().ok()
    }
    if builder.media_stream_name.is_none() {
        builder.media_stream_name = Some(Default::default())
    }
    builder
}

pub(crate) fn media_stream_source_configuration_correct_errors(
    mut builder: crate::types::builders::MediaStreamSourceConfigurationBuilder,
) -> crate::types::builders::MediaStreamSourceConfigurationBuilder {
    if builder.encoding_name.is_none() {
        builder.encoding_name = "no value was set".parse::<crate::types::EncodingName>().ok()
    }
    if builder.media_stream_name.is_none() {
        builder.media_stream_name = Some(Default::default())
    }
    builder
}

pub(crate) fn message_detail_correct_errors(
    mut builder: crate::types::builders::MessageDetailBuilder,
) -> crate::types::builders::MessageDetailBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn encoding_parameters_correct_errors(
    mut builder: crate::types::builders::EncodingParametersBuilder,
) -> crate::types::builders::EncodingParametersBuilder {
    if builder.compression_factor.is_none() {
        builder.compression_factor = Some(Default::default())
    }
    if builder.encoder_profile.is_none() {
        builder.encoder_profile = "no value was set".parse::<crate::types::EncoderProfile>().ok()
    }
    builder
}

pub(crate) fn destination_configuration_correct_errors(
    mut builder: crate::types::builders::DestinationConfigurationBuilder,
) -> crate::types::builders::DestinationConfigurationBuilder {
    if builder.destination_ip.is_none() {
        builder.destination_ip = Some(Default::default())
    }
    if builder.destination_port.is_none() {
        builder.destination_port = Some(Default::default())
    }
    if builder.interface.is_none() {
        builder.interface = {
            let builder = crate::types::builders::InterfaceBuilder::default();
            Some(crate::serde_util::interface_correct_errors(builder).build())
        }
    }
    if builder.outbound_ip.is_none() {
        builder.outbound_ip = Some(Default::default())
    }
    builder
}

pub(crate) fn input_configuration_correct_errors(
    mut builder: crate::types::builders::InputConfigurationBuilder,
) -> crate::types::builders::InputConfigurationBuilder {
    if builder.input_ip.is_none() {
        builder.input_ip = Some(Default::default())
    }
    if builder.input_port.is_none() {
        builder.input_port = Some(Default::default())
    }
    if builder.interface.is_none() {
        builder.interface = {
            let builder = crate::types::builders::InterfaceBuilder::default();
            Some(crate::serde_util::interface_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn interface_correct_errors(mut builder: crate::types::builders::InterfaceBuilder) -> crate::types::builders::InterfaceBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
