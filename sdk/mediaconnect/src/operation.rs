// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `AddFlowMediaStreams`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`add_flow_media_streams`](crate::client::fluent_builders::AddFlowMediaStreams).
///
/// `ParseStrictResponse` impl for `AddFlowMediaStreams`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AddFlowMediaStreams {
    _private: (),
}
impl AddFlowMediaStreams {
    /// Creates a new builder-style object to manufacture [`AddFlowMediaStreamsInput`](crate::input::AddFlowMediaStreamsInput).
    pub fn builder() -> crate::input::add_flow_media_streams_input::Builder {
        crate::input::add_flow_media_streams_input::Builder::default()
    }
    /// Creates a new `AddFlowMediaStreams` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AddFlowMediaStreams {
    type Output = std::result::Result<
        crate::output::AddFlowMediaStreamsOutput,
        crate::error::AddFlowMediaStreamsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_add_flow_media_streams::de_add_flow_media_streams_http_error(response)
        } else {
            crate::protocol_serde::shape_add_flow_media_streams::de_add_flow_media_streams_http_response(response)
        }
    }
}

/// Operation shape for `AddFlowOutputs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`add_flow_outputs`](crate::client::fluent_builders::AddFlowOutputs).
///
/// `ParseStrictResponse` impl for `AddFlowOutputs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AddFlowOutputs {
    _private: (),
}
impl AddFlowOutputs {
    /// Creates a new builder-style object to manufacture [`AddFlowOutputsInput`](crate::input::AddFlowOutputsInput).
    pub fn builder() -> crate::input::add_flow_outputs_input::Builder {
        crate::input::add_flow_outputs_input::Builder::default()
    }
    /// Creates a new `AddFlowOutputs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AddFlowOutputs {
    type Output =
        std::result::Result<crate::output::AddFlowOutputsOutput, crate::error::AddFlowOutputsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_add_flow_outputs::de_add_flow_outputs_http_error(response)
        } else {
            crate::protocol_serde::shape_add_flow_outputs::de_add_flow_outputs_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `AddFlowSources`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`add_flow_sources`](crate::client::fluent_builders::AddFlowSources).
///
/// `ParseStrictResponse` impl for `AddFlowSources`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AddFlowSources {
    _private: (),
}
impl AddFlowSources {
    /// Creates a new builder-style object to manufacture [`AddFlowSourcesInput`](crate::input::AddFlowSourcesInput).
    pub fn builder() -> crate::input::add_flow_sources_input::Builder {
        crate::input::add_flow_sources_input::Builder::default()
    }
    /// Creates a new `AddFlowSources` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AddFlowSources {
    type Output =
        std::result::Result<crate::output::AddFlowSourcesOutput, crate::error::AddFlowSourcesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_add_flow_sources::de_add_flow_sources_http_error(response)
        } else {
            crate::protocol_serde::shape_add_flow_sources::de_add_flow_sources_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `AddFlowVpcInterfaces`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`add_flow_vpc_interfaces`](crate::client::fluent_builders::AddFlowVpcInterfaces).
///
/// `ParseStrictResponse` impl for `AddFlowVpcInterfaces`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct AddFlowVpcInterfaces {
    _private: (),
}
impl AddFlowVpcInterfaces {
    /// Creates a new builder-style object to manufacture [`AddFlowVpcInterfacesInput`](crate::input::AddFlowVpcInterfacesInput).
    pub fn builder() -> crate::input::add_flow_vpc_interfaces_input::Builder {
        crate::input::add_flow_vpc_interfaces_input::Builder::default()
    }
    /// Creates a new `AddFlowVpcInterfaces` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for AddFlowVpcInterfaces {
    type Output = std::result::Result<
        crate::output::AddFlowVpcInterfacesOutput,
        crate::error::AddFlowVpcInterfacesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_add_flow_vpc_interfaces::de_add_flow_vpc_interfaces_http_error(response)
        } else {
            crate::protocol_serde::shape_add_flow_vpc_interfaces::de_add_flow_vpc_interfaces_http_response(response)
        }
    }
}

/// Operation shape for `CreateFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_flow`](crate::client::fluent_builders::CreateFlow).
///
/// `ParseStrictResponse` impl for `CreateFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateFlow {
    _private: (),
}
impl CreateFlow {
    /// Creates a new builder-style object to manufacture [`CreateFlowInput`](crate::input::CreateFlowInput).
    pub fn builder() -> crate::input::create_flow_input::Builder {
        crate::input::create_flow_input::Builder::default()
    }
    /// Creates a new `CreateFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateFlow {
    type Output =
        std::result::Result<crate::output::CreateFlowOutput, crate::error::CreateFlowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_flow::de_create_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_create_flow::de_create_flow_http_response(response)
        }
    }
}

/// Operation shape for `DeleteFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_flow`](crate::client::fluent_builders::DeleteFlow).
///
/// `ParseStrictResponse` impl for `DeleteFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteFlow {
    _private: (),
}
impl DeleteFlow {
    /// Creates a new builder-style object to manufacture [`DeleteFlowInput`](crate::input::DeleteFlowInput).
    pub fn builder() -> crate::input::delete_flow_input::Builder {
        crate::input::delete_flow_input::Builder::default()
    }
    /// Creates a new `DeleteFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteFlow {
    type Output =
        std::result::Result<crate::output::DeleteFlowOutput, crate::error::DeleteFlowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_delete_flow::de_delete_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_flow::de_delete_flow_http_response(response)
        }
    }
}

/// Operation shape for `DescribeFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_flow`](crate::client::fluent_builders::DescribeFlow).
///
/// `ParseStrictResponse` impl for `DescribeFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeFlow {
    _private: (),
}
impl DescribeFlow {
    /// Creates a new builder-style object to manufacture [`DescribeFlowInput`](crate::input::DescribeFlowInput).
    pub fn builder() -> crate::input::describe_flow_input::Builder {
        crate::input::describe_flow_input::Builder::default()
    }
    /// Creates a new `DescribeFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeFlow {
    type Output =
        std::result::Result<crate::output::DescribeFlowOutput, crate::error::DescribeFlowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_flow::de_describe_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_flow::de_describe_flow_http_response(response)
        }
    }
}

/// Operation shape for `DescribeOffering`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_offering`](crate::client::fluent_builders::DescribeOffering).
///
/// `ParseStrictResponse` impl for `DescribeOffering`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeOffering {
    _private: (),
}
impl DescribeOffering {
    /// Creates a new builder-style object to manufacture [`DescribeOfferingInput`](crate::input::DescribeOfferingInput).
    pub fn builder() -> crate::input::describe_offering_input::Builder {
        crate::input::describe_offering_input::Builder::default()
    }
    /// Creates a new `DescribeOffering` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeOffering {
    type Output = std::result::Result<
        crate::output::DescribeOfferingOutput,
        crate::error::DescribeOfferingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_offering::de_describe_offering_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_offering::de_describe_offering_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeReservation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_reservation`](crate::client::fluent_builders::DescribeReservation).
///
/// `ParseStrictResponse` impl for `DescribeReservation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeReservation {
    _private: (),
}
impl DescribeReservation {
    /// Creates a new builder-style object to manufacture [`DescribeReservationInput`](crate::input::DescribeReservationInput).
    pub fn builder() -> crate::input::describe_reservation_input::Builder {
        crate::input::describe_reservation_input::Builder::default()
    }
    /// Creates a new `DescribeReservation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeReservation {
    type Output = std::result::Result<
        crate::output::DescribeReservationOutput,
        crate::error::DescribeReservationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_reservation::de_describe_reservation_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_reservation::de_describe_reservation_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GrantFlowEntitlements`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`grant_flow_entitlements`](crate::client::fluent_builders::GrantFlowEntitlements).
///
/// `ParseStrictResponse` impl for `GrantFlowEntitlements`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GrantFlowEntitlements {
    _private: (),
}
impl GrantFlowEntitlements {
    /// Creates a new builder-style object to manufacture [`GrantFlowEntitlementsInput`](crate::input::GrantFlowEntitlementsInput).
    pub fn builder() -> crate::input::grant_flow_entitlements_input::Builder {
        crate::input::grant_flow_entitlements_input::Builder::default()
    }
    /// Creates a new `GrantFlowEntitlements` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GrantFlowEntitlements {
    type Output = std::result::Result<
        crate::output::GrantFlowEntitlementsOutput,
        crate::error::GrantFlowEntitlementsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_grant_flow_entitlements::de_grant_flow_entitlements_http_error(response)
        } else {
            crate::protocol_serde::shape_grant_flow_entitlements::de_grant_flow_entitlements_http_response(response)
        }
    }
}

/// Operation shape for `ListEntitlements`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_entitlements`](crate::client::fluent_builders::ListEntitlements).
///
/// `ParseStrictResponse` impl for `ListEntitlements`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListEntitlements {
    _private: (),
}
impl ListEntitlements {
    /// Creates a new builder-style object to manufacture [`ListEntitlementsInput`](crate::input::ListEntitlementsInput).
    pub fn builder() -> crate::input::list_entitlements_input::Builder {
        crate::input::list_entitlements_input::Builder::default()
    }
    /// Creates a new `ListEntitlements` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListEntitlements {
    type Output = std::result::Result<
        crate::output::ListEntitlementsOutput,
        crate::error::ListEntitlementsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_entitlements::de_list_entitlements_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_entitlements::de_list_entitlements_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListFlows`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_flows`](crate::client::fluent_builders::ListFlows).
///
/// `ParseStrictResponse` impl for `ListFlows`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListFlows {
    _private: (),
}
impl ListFlows {
    /// Creates a new builder-style object to manufacture [`ListFlowsInput`](crate::input::ListFlowsInput).
    pub fn builder() -> crate::input::list_flows_input::Builder {
        crate::input::list_flows_input::Builder::default()
    }
    /// Creates a new `ListFlows` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListFlows {
    type Output = std::result::Result<crate::output::ListFlowsOutput, crate::error::ListFlowsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_flows::de_list_flows_http_error(response)
        } else {
            crate::protocol_serde::shape_list_flows::de_list_flows_http_response(response)
        }
    }
}

/// Operation shape for `ListOfferings`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_offerings`](crate::client::fluent_builders::ListOfferings).
///
/// `ParseStrictResponse` impl for `ListOfferings`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListOfferings {
    _private: (),
}
impl ListOfferings {
    /// Creates a new builder-style object to manufacture [`ListOfferingsInput`](crate::input::ListOfferingsInput).
    pub fn builder() -> crate::input::list_offerings_input::Builder {
        crate::input::list_offerings_input::Builder::default()
    }
    /// Creates a new `ListOfferings` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListOfferings {
    type Output =
        std::result::Result<crate::output::ListOfferingsOutput, crate::error::ListOfferingsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_offerings::de_list_offerings_http_error(response)
        } else {
            crate::protocol_serde::shape_list_offerings::de_list_offerings_http_response(response)
        }
    }
}

/// Operation shape for `ListReservations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_reservations`](crate::client::fluent_builders::ListReservations).
///
/// `ParseStrictResponse` impl for `ListReservations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListReservations {
    _private: (),
}
impl ListReservations {
    /// Creates a new builder-style object to manufacture [`ListReservationsInput`](crate::input::ListReservationsInput).
    pub fn builder() -> crate::input::list_reservations_input::Builder {
        crate::input::list_reservations_input::Builder::default()
    }
    /// Creates a new `ListReservations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListReservations {
    type Output = std::result::Result<
        crate::output::ListReservationsOutput,
        crate::error::ListReservationsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_reservations::de_list_reservations_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_reservations::de_list_reservations_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `PurchaseOffering`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`purchase_offering`](crate::client::fluent_builders::PurchaseOffering).
///
/// `ParseStrictResponse` impl for `PurchaseOffering`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct PurchaseOffering {
    _private: (),
}
impl PurchaseOffering {
    /// Creates a new builder-style object to manufacture [`PurchaseOfferingInput`](crate::input::PurchaseOfferingInput).
    pub fn builder() -> crate::input::purchase_offering_input::Builder {
        crate::input::purchase_offering_input::Builder::default()
    }
    /// Creates a new `PurchaseOffering` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for PurchaseOffering {
    type Output = std::result::Result<
        crate::output::PurchaseOfferingOutput,
        crate::error::PurchaseOfferingError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_purchase_offering::de_purchase_offering_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_purchase_offering::de_purchase_offering_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RemoveFlowMediaStream`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_flow_media_stream`](crate::client::fluent_builders::RemoveFlowMediaStream).
///
/// `ParseStrictResponse` impl for `RemoveFlowMediaStream`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveFlowMediaStream {
    _private: (),
}
impl RemoveFlowMediaStream {
    /// Creates a new builder-style object to manufacture [`RemoveFlowMediaStreamInput`](crate::input::RemoveFlowMediaStreamInput).
    pub fn builder() -> crate::input::remove_flow_media_stream_input::Builder {
        crate::input::remove_flow_media_stream_input::Builder::default()
    }
    /// Creates a new `RemoveFlowMediaStream` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveFlowMediaStream {
    type Output = std::result::Result<
        crate::output::RemoveFlowMediaStreamOutput,
        crate::error::RemoveFlowMediaStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_remove_flow_media_stream::de_remove_flow_media_stream_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_flow_media_stream::de_remove_flow_media_stream_http_response(response)
        }
    }
}

/// Operation shape for `RemoveFlowOutput`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_flow_output`](crate::client::fluent_builders::RemoveFlowOutput).
///
/// `ParseStrictResponse` impl for `RemoveFlowOutput`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveFlowOutput {
    _private: (),
}
impl RemoveFlowOutput {
    /// Creates a new builder-style object to manufacture [`RemoveFlowOutputInput`](crate::input::RemoveFlowOutputInput).
    pub fn builder() -> crate::input::remove_flow_output_input::Builder {
        crate::input::remove_flow_output_input::Builder::default()
    }
    /// Creates a new `RemoveFlowOutput` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveFlowOutput {
    type Output = std::result::Result<
        crate::output::RemoveFlowOutputOutput,
        crate::error::RemoveFlowOutputError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_remove_flow_output::de_remove_flow_output_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_remove_flow_output::de_remove_flow_output_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RemoveFlowSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_flow_source`](crate::client::fluent_builders::RemoveFlowSource).
///
/// `ParseStrictResponse` impl for `RemoveFlowSource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveFlowSource {
    _private: (),
}
impl RemoveFlowSource {
    /// Creates a new builder-style object to manufacture [`RemoveFlowSourceInput`](crate::input::RemoveFlowSourceInput).
    pub fn builder() -> crate::input::remove_flow_source_input::Builder {
        crate::input::remove_flow_source_input::Builder::default()
    }
    /// Creates a new `RemoveFlowSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveFlowSource {
    type Output = std::result::Result<
        crate::output::RemoveFlowSourceOutput,
        crate::error::RemoveFlowSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_remove_flow_source::de_remove_flow_source_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_remove_flow_source::de_remove_flow_source_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `RemoveFlowVpcInterface`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_flow_vpc_interface`](crate::client::fluent_builders::RemoveFlowVpcInterface).
///
/// `ParseStrictResponse` impl for `RemoveFlowVpcInterface`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RemoveFlowVpcInterface {
    _private: (),
}
impl RemoveFlowVpcInterface {
    /// Creates a new builder-style object to manufacture [`RemoveFlowVpcInterfaceInput`](crate::input::RemoveFlowVpcInterfaceInput).
    pub fn builder() -> crate::input::remove_flow_vpc_interface_input::Builder {
        crate::input::remove_flow_vpc_interface_input::Builder::default()
    }
    /// Creates a new `RemoveFlowVpcInterface` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveFlowVpcInterface {
    type Output = std::result::Result<
        crate::output::RemoveFlowVpcInterfaceOutput,
        crate::error::RemoveFlowVpcInterfaceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_remove_flow_vpc_interface::de_remove_flow_vpc_interface_http_error(response)
        } else {
            crate::protocol_serde::shape_remove_flow_vpc_interface::de_remove_flow_vpc_interface_http_response(response)
        }
    }
}

/// Operation shape for `RevokeFlowEntitlement`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`revoke_flow_entitlement`](crate::client::fluent_builders::RevokeFlowEntitlement).
///
/// `ParseStrictResponse` impl for `RevokeFlowEntitlement`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RevokeFlowEntitlement {
    _private: (),
}
impl RevokeFlowEntitlement {
    /// Creates a new builder-style object to manufacture [`RevokeFlowEntitlementInput`](crate::input::RevokeFlowEntitlementInput).
    pub fn builder() -> crate::input::revoke_flow_entitlement_input::Builder {
        crate::input::revoke_flow_entitlement_input::Builder::default()
    }
    /// Creates a new `RevokeFlowEntitlement` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RevokeFlowEntitlement {
    type Output = std::result::Result<
        crate::output::RevokeFlowEntitlementOutput,
        crate::error::RevokeFlowEntitlementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_revoke_flow_entitlement::de_revoke_flow_entitlement_http_error(response)
        } else {
            crate::protocol_serde::shape_revoke_flow_entitlement::de_revoke_flow_entitlement_http_response(response)
        }
    }
}

/// Operation shape for `StartFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_flow`](crate::client::fluent_builders::StartFlow).
///
/// `ParseStrictResponse` impl for `StartFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartFlow {
    _private: (),
}
impl StartFlow {
    /// Creates a new builder-style object to manufacture [`StartFlowInput`](crate::input::StartFlowInput).
    pub fn builder() -> crate::input::start_flow_input::Builder {
        crate::input::start_flow_input::Builder::default()
    }
    /// Creates a new `StartFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartFlow {
    type Output = std::result::Result<crate::output::StartFlowOutput, crate::error::StartFlowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_start_flow::de_start_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_start_flow::de_start_flow_http_response(response)
        }
    }
}

/// Operation shape for `StopFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_flow`](crate::client::fluent_builders::StopFlow).
///
/// `ParseStrictResponse` impl for `StopFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopFlow {
    _private: (),
}
impl StopFlow {
    /// Creates a new builder-style object to manufacture [`StopFlowInput`](crate::input::StopFlowInput).
    pub fn builder() -> crate::input::stop_flow_input::Builder {
        crate::input::stop_flow_input::Builder::default()
    }
    /// Creates a new `StopFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopFlow {
    type Output = std::result::Result<crate::output::StopFlowOutput, crate::error::StopFlowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_stop_flow::de_stop_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_stop_flow::de_stop_flow_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateFlow`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_flow`](crate::client::fluent_builders::UpdateFlow).
///
/// `ParseStrictResponse` impl for `UpdateFlow`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFlow {
    _private: (),
}
impl UpdateFlow {
    /// Creates a new builder-style object to manufacture [`UpdateFlowInput`](crate::input::UpdateFlowInput).
    pub fn builder() -> crate::input::update_flow_input::Builder {
        crate::input::update_flow_input::Builder::default()
    }
    /// Creates a new `UpdateFlow` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFlow {
    type Output =
        std::result::Result<crate::output::UpdateFlowOutput, crate::error::UpdateFlowError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_flow::de_update_flow_http_error(response)
        } else {
            crate::protocol_serde::shape_update_flow::de_update_flow_http_response(response)
        }
    }
}

/// Operation shape for `UpdateFlowEntitlement`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_flow_entitlement`](crate::client::fluent_builders::UpdateFlowEntitlement).
///
/// `ParseStrictResponse` impl for `UpdateFlowEntitlement`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFlowEntitlement {
    _private: (),
}
impl UpdateFlowEntitlement {
    /// Creates a new builder-style object to manufacture [`UpdateFlowEntitlementInput`](crate::input::UpdateFlowEntitlementInput).
    pub fn builder() -> crate::input::update_flow_entitlement_input::Builder {
        crate::input::update_flow_entitlement_input::Builder::default()
    }
    /// Creates a new `UpdateFlowEntitlement` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFlowEntitlement {
    type Output = std::result::Result<
        crate::output::UpdateFlowEntitlementOutput,
        crate::error::UpdateFlowEntitlementError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_flow_entitlement::de_update_flow_entitlement_http_error(response)
        } else {
            crate::protocol_serde::shape_update_flow_entitlement::de_update_flow_entitlement_http_response(response)
        }
    }
}

/// Operation shape for `UpdateFlowMediaStream`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_flow_media_stream`](crate::client::fluent_builders::UpdateFlowMediaStream).
///
/// `ParseStrictResponse` impl for `UpdateFlowMediaStream`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFlowMediaStream {
    _private: (),
}
impl UpdateFlowMediaStream {
    /// Creates a new builder-style object to manufacture [`UpdateFlowMediaStreamInput`](crate::input::UpdateFlowMediaStreamInput).
    pub fn builder() -> crate::input::update_flow_media_stream_input::Builder {
        crate::input::update_flow_media_stream_input::Builder::default()
    }
    /// Creates a new `UpdateFlowMediaStream` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFlowMediaStream {
    type Output = std::result::Result<
        crate::output::UpdateFlowMediaStreamOutput,
        crate::error::UpdateFlowMediaStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_flow_media_stream::de_update_flow_media_stream_http_error(response)
        } else {
            crate::protocol_serde::shape_update_flow_media_stream::de_update_flow_media_stream_http_response(response)
        }
    }
}

/// Operation shape for `UpdateFlowOutput`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_flow_output`](crate::client::fluent_builders::UpdateFlowOutput).
///
/// `ParseStrictResponse` impl for `UpdateFlowOutput`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFlowOutput {
    _private: (),
}
impl UpdateFlowOutput {
    /// Creates a new builder-style object to manufacture [`UpdateFlowOutputInput`](crate::input::UpdateFlowOutputInput).
    pub fn builder() -> crate::input::update_flow_output_input::Builder {
        crate::input::update_flow_output_input::Builder::default()
    }
    /// Creates a new `UpdateFlowOutput` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFlowOutput {
    type Output = std::result::Result<
        crate::output::UpdateFlowOutputOutput,
        crate::error::UpdateFlowOutputError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_flow_output::de_update_flow_output_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_flow_output::de_update_flow_output_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateFlowSource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_flow_source`](crate::client::fluent_builders::UpdateFlowSource).
///
/// `ParseStrictResponse` impl for `UpdateFlowSource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFlowSource {
    _private: (),
}
impl UpdateFlowSource {
    /// Creates a new builder-style object to manufacture [`UpdateFlowSourceInput`](crate::input::UpdateFlowSourceInput).
    pub fn builder() -> crate::input::update_flow_source_input::Builder {
        crate::input::update_flow_source_input::Builder::default()
    }
    /// Creates a new `UpdateFlowSource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFlowSource {
    type Output = std::result::Result<
        crate::output::UpdateFlowSourceOutput,
        crate::error::UpdateFlowSourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_update_flow_source::de_update_flow_source_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_flow_source::de_update_flow_source_http_response(
                response,
            )
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
