// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration settings of the Amazon Kinesis Data Streams destination for an Amazon QLDB journal stream.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KinesisConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.</p>
    pub stream_arn: ::std::string::String,
    /// <p>Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the number of records sent per API call.</p>
    /// <p>Default: <code>True</code> </p> <important>
    /// <p>Record aggregation has important implications for processing records and requires de-aggregation in your stream consumer. To learn more, see <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-concepts.html">KPL Key Concepts</a> and <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-consumer-deaggregation.html">Consumer De-aggregation</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>
    /// </important>
    pub aggregation_enabled: ::std::option::Option<bool>,
}
impl KinesisConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.</p>
    pub fn stream_arn(&self) -> &str {
        use std::ops::Deref;
        self.stream_arn.deref()
    }
    /// <p>Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the number of records sent per API call.</p>
    /// <p>Default: <code>True</code> </p> <important>
    /// <p>Record aggregation has important implications for processing records and requires de-aggregation in your stream consumer. To learn more, see <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-concepts.html">KPL Key Concepts</a> and <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-consumer-deaggregation.html">Consumer De-aggregation</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>
    /// </important>
    pub fn aggregation_enabled(&self) -> ::std::option::Option<bool> {
        self.aggregation_enabled
    }
}
impl KinesisConfiguration {
    /// Creates a new builder-style object to manufacture [`KinesisConfiguration`](crate::types::KinesisConfiguration).
    pub fn builder() -> crate::types::builders::KinesisConfigurationBuilder {
        crate::types::builders::KinesisConfigurationBuilder::default()
    }
}

/// A builder for [`KinesisConfiguration`](crate::types::KinesisConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KinesisConfigurationBuilder {
    pub(crate) stream_arn: ::std::option::Option<::std::string::String>,
    pub(crate) aggregation_enabled: ::std::option::Option<bool>,
}
impl KinesisConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.</p>
    /// This field is required.
    pub fn stream_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stream_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.</p>
    pub fn set_stream_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stream_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Kinesis Data Streams resource.</p>
    pub fn get_stream_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.stream_arn
    }
    /// <p>Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the number of records sent per API call.</p>
    /// <p>Default: <code>True</code> </p> <important>
    /// <p>Record aggregation has important implications for processing records and requires de-aggregation in your stream consumer. To learn more, see <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-concepts.html">KPL Key Concepts</a> and <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-consumer-deaggregation.html">Consumer De-aggregation</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>
    /// </important>
    pub fn aggregation_enabled(mut self, input: bool) -> Self {
        self.aggregation_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the number of records sent per API call.</p>
    /// <p>Default: <code>True</code> </p> <important>
    /// <p>Record aggregation has important implications for processing records and requires de-aggregation in your stream consumer. To learn more, see <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-concepts.html">KPL Key Concepts</a> and <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-consumer-deaggregation.html">Consumer De-aggregation</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>
    /// </important>
    pub fn set_aggregation_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.aggregation_enabled = input;
        self
    }
    /// <p>Enables QLDB to publish multiple data records in a single Kinesis Data Streams record, increasing the number of records sent per API call.</p>
    /// <p>Default: <code>True</code> </p> <important>
    /// <p>Record aggregation has important implications for processing records and requires de-aggregation in your stream consumer. To learn more, see <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-concepts.html">KPL Key Concepts</a> and <a href="https://docs.aws.amazon.com/streams/latest/dev/kinesis-kpl-consumer-deaggregation.html">Consumer De-aggregation</a> in the <i>Amazon Kinesis Data Streams Developer Guide</i>.</p>
    /// </important>
    pub fn get_aggregation_enabled(&self) -> &::std::option::Option<bool> {
        &self.aggregation_enabled
    }
    /// Consumes the builder and constructs a [`KinesisConfiguration`](crate::types::KinesisConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`stream_arn`](crate::types::builders::KinesisConfigurationBuilder::stream_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::KinesisConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KinesisConfiguration {
            stream_arn: self.stream_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "stream_arn",
                    "stream_arn was not specified but it is required when building KinesisConfiguration",
                )
            })?,
            aggregation_enabled: self.aggregation_enabled,
        })
    }
}
