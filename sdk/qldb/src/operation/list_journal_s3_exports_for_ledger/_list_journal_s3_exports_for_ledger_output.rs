// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListJournalS3ExportsForLedgerOutput {
    /// <p>The array of journal export job descriptions that are associated with the specified ledger.</p>
    #[doc(hidden)]
    pub journal_s3_exports:
        std::option::Option<std::vec::Vec<crate::types::JournalS3ExportDescription>>,
    /// <ul>
    /// <li> <p>If <code>NextToken</code> is empty, then the last page of results has been processed and there are no more results to be retrieved.</p> </li>
    /// <li> <p>If <code>NextToken</code> is <i>not</i> empty, then there are more results available. To retrieve the next page of results, use the value of <code>NextToken</code> in a subsequent <code>ListJournalS3ExportsForLedger</code> call.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListJournalS3ExportsForLedgerOutput {
    /// <p>The array of journal export job descriptions that are associated with the specified ledger.</p>
    pub fn journal_s3_exports(
        &self,
    ) -> std::option::Option<&[crate::types::JournalS3ExportDescription]> {
        self.journal_s3_exports.as_deref()
    }
    /// <ul>
    /// <li> <p>If <code>NextToken</code> is empty, then the last page of results has been processed and there are no more results to be retrieved.</p> </li>
    /// <li> <p>If <code>NextToken</code> is <i>not</i> empty, then there are more results available. To retrieve the next page of results, use the value of <code>NextToken</code> in a subsequent <code>ListJournalS3ExportsForLedger</code> call.</p> </li>
    /// </ul>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListJournalS3ExportsForLedgerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListJournalS3ExportsForLedgerOutput {
    /// Creates a new builder-style object to manufacture [`ListJournalS3ExportsForLedgerOutput`](crate::operation::list_journal_s3_exports_for_ledger::ListJournalS3ExportsForLedgerOutput).
    pub fn builder() -> crate::operation::list_journal_s3_exports_for_ledger::builders::ListJournalS3ExportsForLedgerOutputBuilder{
        crate::operation::list_journal_s3_exports_for_ledger::builders::ListJournalS3ExportsForLedgerOutputBuilder::default()
    }
}

/// A builder for [`ListJournalS3ExportsForLedgerOutput`](crate::operation::list_journal_s3_exports_for_ledger::ListJournalS3ExportsForLedgerOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListJournalS3ExportsForLedgerOutputBuilder {
    pub(crate) journal_s3_exports:
        std::option::Option<std::vec::Vec<crate::types::JournalS3ExportDescription>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListJournalS3ExportsForLedgerOutputBuilder {
    /// Appends an item to `journal_s3_exports`.
    ///
    /// To override the contents of this collection use [`set_journal_s3_exports`](Self::set_journal_s3_exports).
    ///
    /// <p>The array of journal export job descriptions that are associated with the specified ledger.</p>
    pub fn journal_s3_exports(mut self, input: crate::types::JournalS3ExportDescription) -> Self {
        let mut v = self.journal_s3_exports.unwrap_or_default();
        v.push(input);
        self.journal_s3_exports = Some(v);
        self
    }
    /// <p>The array of journal export job descriptions that are associated with the specified ledger.</p>
    pub fn set_journal_s3_exports(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::JournalS3ExportDescription>>,
    ) -> Self {
        self.journal_s3_exports = input;
        self
    }
    /// <ul>
    /// <li> <p>If <code>NextToken</code> is empty, then the last page of results has been processed and there are no more results to be retrieved.</p> </li>
    /// <li> <p>If <code>NextToken</code> is <i>not</i> empty, then there are more results available. To retrieve the next page of results, use the value of <code>NextToken</code> in a subsequent <code>ListJournalS3ExportsForLedger</code> call.</p> </li>
    /// </ul>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <ul>
    /// <li> <p>If <code>NextToken</code> is empty, then the last page of results has been processed and there are no more results to be retrieved.</p> </li>
    /// <li> <p>If <code>NextToken</code> is <i>not</i> empty, then there are more results available. To retrieve the next page of results, use the value of <code>NextToken</code> in a subsequent <code>ListJournalS3ExportsForLedger</code> call.</p> </li>
    /// </ul>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListJournalS3ExportsForLedgerOutput`](crate::operation::list_journal_s3_exports_for_ledger::ListJournalS3ExportsForLedgerOutput).
    pub fn build(
        self,
    ) -> crate::operation::list_journal_s3_exports_for_ledger::ListJournalS3ExportsForLedgerOutput
    {
        crate::operation::list_journal_s3_exports_for_ledger::ListJournalS3ExportsForLedgerOutput {
            journal_s3_exports: self.journal_s3_exports,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
