// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDigestOutput {
    /// <p>The 256-bit hash value representing the digest returned by a <code>GetDigest</code> request.</p>
    #[doc(hidden)]
    pub digest: std::option::Option<aws_smithy_types::Blob>,
    /// <p>The latest block location covered by the digest that you requested. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    #[doc(hidden)]
    pub digest_tip_address: std::option::Option<crate::types::ValueHolder>,
    _request_id: Option<String>,
}
impl GetDigestOutput {
    /// <p>The 256-bit hash value representing the digest returned by a <code>GetDigest</code> request.</p>
    pub fn digest(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.digest.as_ref()
    }
    /// <p>The latest block location covered by the digest that you requested. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    pub fn digest_tip_address(&self) -> std::option::Option<&crate::types::ValueHolder> {
        self.digest_tip_address.as_ref()
    }
}
impl std::fmt::Debug for GetDigestOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDigestOutput");
        formatter.field("digest", &self.digest);
        formatter.field("digest_tip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for GetDigestOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDigestOutput {
    /// Creates a new builder-style object to manufacture [`GetDigestOutput`](crate::operation::get_digest::GetDigestOutput).
    pub fn builder() -> crate::operation::get_digest::builders::GetDigestOutputBuilder {
        crate::operation::get_digest::builders::GetDigestOutputBuilder::default()
    }
}

/// A builder for [`GetDigestOutput`](crate::operation::get_digest::GetDigestOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetDigestOutputBuilder {
    pub(crate) digest: std::option::Option<aws_smithy_types::Blob>,
    pub(crate) digest_tip_address: std::option::Option<crate::types::ValueHolder>,
    _request_id: Option<String>,
}
impl GetDigestOutputBuilder {
    /// <p>The 256-bit hash value representing the digest returned by a <code>GetDigest</code> request.</p>
    pub fn digest(mut self, input: aws_smithy_types::Blob) -> Self {
        self.digest = Some(input);
        self
    }
    /// <p>The 256-bit hash value representing the digest returned by a <code>GetDigest</code> request.</p>
    pub fn set_digest(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.digest = input;
        self
    }
    /// <p>The latest block location covered by the digest that you requested. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    pub fn digest_tip_address(mut self, input: crate::types::ValueHolder) -> Self {
        self.digest_tip_address = Some(input);
        self
    }
    /// <p>The latest block location covered by the digest that you requested. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    pub fn set_digest_tip_address(
        mut self,
        input: std::option::Option<crate::types::ValueHolder>,
    ) -> Self {
        self.digest_tip_address = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDigestOutput`](crate::operation::get_digest::GetDigestOutput).
    pub fn build(self) -> crate::operation::get_digest::GetDigestOutput {
        crate::operation::get_digest::GetDigestOutput {
            digest: self.digest,
            digest_tip_address: self.digest_tip_address,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for GetDigestOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDigestOutputBuilder");
        formatter.field("digest", &self.digest);
        formatter.field("digest_tip_address", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
