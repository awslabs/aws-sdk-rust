// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetBlockOutput {
    /// <p>The block data object in Amazon Ion format.</p>
    pub block: ::std::option::Option<crate::types::ValueHolder>,
    /// <p>The proof object in Amazon Ion format returned by a <code>GetBlock</code> request. A proof contains the list of hash values required to recalculate the specified digest using a Merkle tree, starting with the specified block.</p>
    pub proof: ::std::option::Option<crate::types::ValueHolder>,
    _request_id: Option<String>,
}
impl GetBlockOutput {
    /// <p>The block data object in Amazon Ion format.</p>
    pub fn block(&self) -> ::std::option::Option<&crate::types::ValueHolder> {
        self.block.as_ref()
    }
    /// <p>The proof object in Amazon Ion format returned by a <code>GetBlock</code> request. A proof contains the list of hash values required to recalculate the specified digest using a Merkle tree, starting with the specified block.</p>
    pub fn proof(&self) -> ::std::option::Option<&crate::types::ValueHolder> {
        self.proof.as_ref()
    }
}
impl ::std::fmt::Debug for GetBlockOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetBlockOutput");
        formatter.field("block", &"*** Sensitive Data Redacted ***");
        formatter.field("proof", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_http::request_id::RequestId for GetBlockOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetBlockOutput {
    /// Creates a new builder-style object to manufacture [`GetBlockOutput`](crate::operation::get_block::GetBlockOutput).
    pub fn builder() -> crate::operation::get_block::builders::GetBlockOutputBuilder {
        crate::operation::get_block::builders::GetBlockOutputBuilder::default()
    }
}

/// A builder for [`GetBlockOutput`](crate::operation::get_block::GetBlockOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetBlockOutputBuilder {
    pub(crate) block: ::std::option::Option<crate::types::ValueHolder>,
    pub(crate) proof: ::std::option::Option<crate::types::ValueHolder>,
    _request_id: Option<String>,
}
impl GetBlockOutputBuilder {
    /// <p>The block data object in Amazon Ion format.</p>
    /// This field is required.
    pub fn block(mut self, input: crate::types::ValueHolder) -> Self {
        self.block = ::std::option::Option::Some(input);
        self
    }
    /// <p>The block data object in Amazon Ion format.</p>
    pub fn set_block(mut self, input: ::std::option::Option<crate::types::ValueHolder>) -> Self {
        self.block = input;
        self
    }
    /// <p>The block data object in Amazon Ion format.</p>
    pub fn get_block(&self) -> &::std::option::Option<crate::types::ValueHolder> {
        &self.block
    }
    /// <p>The proof object in Amazon Ion format returned by a <code>GetBlock</code> request. A proof contains the list of hash values required to recalculate the specified digest using a Merkle tree, starting with the specified block.</p>
    pub fn proof(mut self, input: crate::types::ValueHolder) -> Self {
        self.proof = ::std::option::Option::Some(input);
        self
    }
    /// <p>The proof object in Amazon Ion format returned by a <code>GetBlock</code> request. A proof contains the list of hash values required to recalculate the specified digest using a Merkle tree, starting with the specified block.</p>
    pub fn set_proof(mut self, input: ::std::option::Option<crate::types::ValueHolder>) -> Self {
        self.proof = input;
        self
    }
    /// <p>The proof object in Amazon Ion format returned by a <code>GetBlock</code> request. A proof contains the list of hash values required to recalculate the specified digest using a Merkle tree, starting with the specified block.</p>
    pub fn get_proof(&self) -> &::std::option::Option<crate::types::ValueHolder> {
        &self.proof
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetBlockOutput`](crate::operation::get_block::GetBlockOutput).
    pub fn build(self) -> crate::operation::get_block::GetBlockOutput {
        crate::operation::get_block::GetBlockOutput {
            block: self.block,
            proof: self.proof,
            _request_id: self._request_id,
        }
    }
}
impl ::std::fmt::Debug for GetBlockOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetBlockOutputBuilder");
        formatter.field("block", &"*** Sensitive Data Redacted ***");
        formatter.field("proof", &"*** Sensitive Data Redacted ***");
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
