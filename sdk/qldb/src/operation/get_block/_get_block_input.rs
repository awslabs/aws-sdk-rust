// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetBlockInput {
    /// <p>The name of the ledger.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The location of the block that you want to request. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    /// <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:14}</code>.</p>
    #[doc(hidden)]
    pub block_address: std::option::Option<crate::types::ValueHolder>,
    /// <p>The latest block location covered by the digest for which to request a proof. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    /// <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:49}</code>.</p>
    #[doc(hidden)]
    pub digest_tip_address: std::option::Option<crate::types::ValueHolder>,
}
impl GetBlockInput {
    /// <p>The name of the ledger.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The location of the block that you want to request. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    /// <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:14}</code>.</p>
    pub fn block_address(&self) -> std::option::Option<&crate::types::ValueHolder> {
        self.block_address.as_ref()
    }
    /// <p>The latest block location covered by the digest for which to request a proof. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    /// <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:49}</code>.</p>
    pub fn digest_tip_address(&self) -> std::option::Option<&crate::types::ValueHolder> {
        self.digest_tip_address.as_ref()
    }
}
impl std::fmt::Debug for GetBlockInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetBlockInput");
        formatter.field("name", &self.name);
        formatter.field("block_address", &"*** Sensitive Data Redacted ***");
        formatter.field("digest_tip_address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GetBlockInput {
    /// Creates a new builder-style object to manufacture [`GetBlockInput`](crate::operation::get_block::GetBlockInput).
    pub fn builder() -> crate::operation::get_block::builders::GetBlockInputBuilder {
        crate::operation::get_block::builders::GetBlockInputBuilder::default()
    }
}

/// A builder for [`GetBlockInput`](crate::operation::get_block::GetBlockInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct GetBlockInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) block_address: std::option::Option<crate::types::ValueHolder>,
    pub(crate) digest_tip_address: std::option::Option<crate::types::ValueHolder>,
}
impl GetBlockInputBuilder {
    /// <p>The name of the ledger.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the ledger.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The location of the block that you want to request. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    /// <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:14}</code>.</p>
    pub fn block_address(mut self, input: crate::types::ValueHolder) -> Self {
        self.block_address = Some(input);
        self
    }
    /// <p>The location of the block that you want to request. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    /// <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:14}</code>.</p>
    pub fn set_block_address(
        mut self,
        input: std::option::Option<crate::types::ValueHolder>,
    ) -> Self {
        self.block_address = input;
        self
    }
    /// <p>The latest block location covered by the digest for which to request a proof. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    /// <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:49}</code>.</p>
    pub fn digest_tip_address(mut self, input: crate::types::ValueHolder) -> Self {
        self.digest_tip_address = Some(input);
        self
    }
    /// <p>The latest block location covered by the digest for which to request a proof. An address is an Amazon Ion structure that has two fields: <code>strandId</code> and <code>sequenceNo</code>.</p>
    /// <p>For example: <code>{strandId:"BlFTjlSXze9BIh1KOszcE3",sequenceNo:49}</code>.</p>
    pub fn set_digest_tip_address(
        mut self,
        input: std::option::Option<crate::types::ValueHolder>,
    ) -> Self {
        self.digest_tip_address = input;
        self
    }
    /// Consumes the builder and constructs a [`GetBlockInput`](crate::operation::get_block::GetBlockInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_block::GetBlockInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_block::GetBlockInput {
            name: self.name,
            block_address: self.block_address,
            digest_tip_address: self.digest_tip_address,
        })
    }
}
impl std::fmt::Debug for GetBlockInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetBlockInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("block_address", &"*** Sensitive Data Redacted ***");
        formatter.field("digest_tip_address", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
