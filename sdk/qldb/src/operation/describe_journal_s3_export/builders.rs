// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_journal_s3_export::_describe_journal_s3_export_output::DescribeJournalS3ExportOutputBuilder;

pub use crate::operation::describe_journal_s3_export::_describe_journal_s3_export_input::DescribeJournalS3ExportInputBuilder;

/// Fluent builder constructing a request to `DescribeJournalS3Export`.
///
/// <p>Returns information about a journal export job, including the ledger name, export ID, creation time, current status, and the parameters of the original export creation request.</p>
/// <p>This action does not return any expired export jobs. For more information, see <a href="https://docs.aws.amazon.com/qldb/latest/developerguide/export-journal.request.html#export-journal.request.expiration">Export job expiration</a> in the <i>Amazon QLDB Developer Guide</i>.</p>
/// <p>If the export job with the given <code>ExportId</code> doesn't exist, then throws <code>ResourceNotFoundException</code>.</p>
/// <p>If the ledger with the given <code>Name</code> doesn't exist, then throws <code>ResourceNotFoundException</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeJournalS3ExportFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner:
        crate::operation::describe_journal_s3_export::builders::DescribeJournalS3ExportInputBuilder,
}
impl DescribeJournalS3ExportFluentBuilder {
    /// Creates a new `DescribeJournalS3Export`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_journal_s3_export::DescribeJournalS3Export,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_journal_s3_export::DescribeJournalS3ExportError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_journal_s3_export::DescribeJournalS3ExportOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_journal_s3_export::DescribeJournalS3ExportError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the ledger.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name(input.into());
        self
    }
    /// <p>The name of the ledger.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name(input);
        self
    }
    /// <p>The UUID (represented in Base62-encoded text) of the journal export job to describe.</p>
    pub fn export_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.export_id(input.into());
        self
    }
    /// <p>The UUID (represented in Base62-encoded text) of the journal export job to describe.</p>
    pub fn set_export_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_export_id(input);
        self
    }
}
