// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    InvalidParameterError(crate::error::InvalidParameterError),
    LimitExceededError(crate::error::LimitExceededError),
    ResourceAlreadyExistsError(crate::error::ResourceAlreadyExistsError),
    ResourceInUseError(crate::error::ResourceInUseError),
    ResourceNotFoundError(crate::error::ResourceNotFoundError),
    ResourcePreconditionNotMetError(crate::error::ResourcePreconditionNotMetError),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InvalidParameterError(inner) => inner.fmt(f),
            Error::LimitExceededError(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsError(inner) => inner.fmt(f),
            Error::ResourceInUseError(inner) => inner.fmt(f),
            Error::ResourceNotFoundError(inner) => inner.fmt(f),
            Error::ResourcePreconditionNotMetError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CancelJournalKinesisStreamError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::CancelJournalKinesisStreamError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::CancelJournalKinesisStreamErrorKind::InvalidParameterError(inner) => Error::InvalidParameterError(inner),
                crate::error::CancelJournalKinesisStreamErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::CancelJournalKinesisStreamErrorKind::ResourcePreconditionNotMetError(inner) => Error::ResourcePreconditionNotMetError(inner),
                crate::error::CancelJournalKinesisStreamErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateLedgerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateLedgerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateLedgerErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::CreateLedgerErrorKind::LimitExceededError(inner) => {
                    Error::LimitExceededError(inner)
                }
                crate::error::CreateLedgerErrorKind::ResourceAlreadyExistsError(inner) => {
                    Error::ResourceAlreadyExistsError(inner)
                }
                crate::error::CreateLedgerErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::CreateLedgerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteLedgerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteLedgerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteLedgerErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DeleteLedgerErrorKind::ResourceInUseError(inner) => {
                    Error::ResourceInUseError(inner)
                }
                crate::error::DeleteLedgerErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DeleteLedgerErrorKind::ResourcePreconditionNotMetError(inner) => {
                    Error::ResourcePreconditionNotMetError(inner)
                }
                crate::error::DeleteLedgerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeJournalKinesisStreamError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeJournalKinesisStreamError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeJournalKinesisStreamErrorKind::InvalidParameterError(inner) => Error::InvalidParameterError(inner),
                crate::error::DescribeJournalKinesisStreamErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::DescribeJournalKinesisStreamErrorKind::ResourcePreconditionNotMetError(inner) => Error::ResourcePreconditionNotMetError(inner),
                crate::error::DescribeJournalKinesisStreamErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeJournalS3ExportError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeJournalS3ExportError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeJournalS3ExportErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeJournalS3ExportErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeLedgerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeLedgerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeLedgerErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::DescribeLedgerErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::DescribeLedgerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ExportJournalToS3Error>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ExportJournalToS3Error>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ExportJournalToS3ErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ExportJournalToS3ErrorKind::ResourcePreconditionNotMetError(
                    inner,
                ) => Error::ResourcePreconditionNotMetError(inner),
                crate::error::ExportJournalToS3ErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetBlockError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetBlockError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetBlockErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetBlockErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetBlockErrorKind::ResourcePreconditionNotMetError(inner) => {
                    Error::ResourcePreconditionNotMetError(inner)
                }
                crate::error::GetBlockErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDigestError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDigestError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDigestErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetDigestErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetDigestErrorKind::ResourcePreconditionNotMetError(inner) => {
                    Error::ResourcePreconditionNotMetError(inner)
                }
                crate::error::GetDigestErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRevisionError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRevisionError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRevisionErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::GetRevisionErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::GetRevisionErrorKind::ResourcePreconditionNotMetError(inner) => {
                    Error::ResourcePreconditionNotMetError(inner)
                }
                crate::error::GetRevisionErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListJournalKinesisStreamsForLedgerError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListJournalKinesisStreamsForLedgerError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ListJournalKinesisStreamsForLedgerErrorKind::InvalidParameterError(inner) => Error::InvalidParameterError(inner),
                crate::error::ListJournalKinesisStreamsForLedgerErrorKind::ResourceNotFoundError(inner) => Error::ResourceNotFoundError(inner),
                crate::error::ListJournalKinesisStreamsForLedgerErrorKind::ResourcePreconditionNotMetError(inner) => Error::ResourcePreconditionNotMetError(inner),
                crate::error::ListJournalKinesisStreamsForLedgerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListJournalS3ExportsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListJournalS3ExportsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListJournalS3ExportsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListJournalS3ExportsForLedgerError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::ListJournalS3ExportsForLedgerError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListJournalS3ExportsForLedgerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListLedgersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListLedgersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListLedgersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StreamJournalToKinesisError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StreamJournalToKinesisError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StreamJournalToKinesisErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::StreamJournalToKinesisErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::StreamJournalToKinesisErrorKind::ResourcePreconditionNotMetError(
                    inner,
                ) => Error::ResourcePreconditionNotMetError(inner),
                crate::error::StreamJournalToKinesisErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::TagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateLedgerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateLedgerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateLedgerErrorKind::InvalidParameterError(inner) => {
                    Error::InvalidParameterError(inner)
                }
                crate::error::UpdateLedgerErrorKind::ResourceNotFoundError(inner) => {
                    Error::ResourceNotFoundError(inner)
                }
                crate::error::UpdateLedgerErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateLedgerPermissionsModeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateLedgerPermissionsModeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateLedgerPermissionsModeErrorKind::InvalidParameterError(
                    inner,
                ) => Error::InvalidParameterError(inner),
                crate::error::UpdateLedgerPermissionsModeErrorKind::ResourceNotFoundError(
                    inner,
                ) => Error::ResourceNotFoundError(inner),
                crate::error::UpdateLedgerPermissionsModeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
