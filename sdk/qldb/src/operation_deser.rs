// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_cancel_journal_kinesis_stream_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::CancelJournalKinesisStreamOutput,
    crate::error::CancelJournalKinesisStreamError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CancelJournalKinesisStreamError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::CancelJournalKinesisStreamError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::CancelJournalKinesisStreamError {
            meta: generic,
            kind: crate::error::CancelJournalKinesisStreamErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CancelJournalKinesisStreamError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::CancelJournalKinesisStreamError {
            meta: generic,
            kind: crate::error::CancelJournalKinesisStreamErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CancelJournalKinesisStreamError::unhandled)?;
                output.build()
            }),
        },
        "ResourcePreconditionNotMetException" => crate::error::CancelJournalKinesisStreamError {
            meta: generic,
            kind:
                crate::error::CancelJournalKinesisStreamErrorKind::ResourcePreconditionNotMetError(
                    {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_precondition_not_met_error::Builder::default();
                        let _ = response;
                        output = crate::json_deser::resource_precondition_not_met_exception(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::CancelJournalKinesisStreamError::unhandled)?;
                        output.build()
                    },
                ),
        },
        _ => crate::error::CancelJournalKinesisStreamError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_cancel_journal_kinesis_stream_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::CancelJournalKinesisStreamOutput,
    crate::error::CancelJournalKinesisStreamError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::cancel_journal_kinesis_stream_output::Builder::default();
        let _ = response;
        output = crate::json_deser::cancel_journal_kinesis_stream_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::CancelJournalKinesisStreamError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_ledger_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::CreateLedgerOutput, crate::error::CreateLedgerError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::CreateLedgerError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::CreateLedgerError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::CreateLedgerError {
            meta: generic,
            kind: crate::error::CreateLedgerErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateLedgerError::unhandled)?;
                output.build()
            }),
        },
        "LimitExceededException" => crate::error::CreateLedgerError {
            meta: generic,
            kind: crate::error::CreateLedgerErrorKind::LimitExceededError({
                #[allow(unused_mut)]
                let mut output = crate::error::limit_exceeded_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::limit_exceeded_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateLedgerError::unhandled)?;
                output.build()
            }),
        },
        "ResourceAlreadyExistsException" => crate::error::CreateLedgerError {
            meta: generic,
            kind: crate::error::CreateLedgerErrorKind::ResourceAlreadyExistsError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_already_exists_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_already_exists_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::CreateLedgerError::unhandled)?;
                output.build()
            }),
        },
        "ResourceInUseException" => crate::error::CreateLedgerError {
            meta: generic,
            kind: crate::error::CreateLedgerErrorKind::ResourceInUseError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_in_use_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::resource_in_use_exception(response.body().as_ref(), output)
                        .map_err(crate::error::CreateLedgerError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::CreateLedgerError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_create_ledger_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::CreateLedgerOutput, crate::error::CreateLedgerError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::create_ledger_output::Builder::default();
        let _ = response;
        output = crate::json_deser::create_ledger_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::CreateLedgerError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_ledger_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteLedgerOutput, crate::error::DeleteLedgerError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteLedgerError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteLedgerError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::DeleteLedgerError {
            meta: generic,
            kind: crate::error::DeleteLedgerErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteLedgerError::unhandled)?;
                output.build()
            }),
        },
        "ResourceInUseException" => crate::error::DeleteLedgerError {
            meta: generic,
            kind: crate::error::DeleteLedgerErrorKind::ResourceInUseError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_in_use_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::resource_in_use_exception(response.body().as_ref(), output)
                        .map_err(crate::error::DeleteLedgerError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::DeleteLedgerError {
            meta: generic,
            kind: crate::error::DeleteLedgerErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteLedgerError::unhandled)?;
                output.build()
            }),
        },
        "ResourcePreconditionNotMetException" => crate::error::DeleteLedgerError {
            meta: generic,
            kind: crate::error::DeleteLedgerErrorKind::ResourcePreconditionNotMetError({
                #[allow(unused_mut)]
                let mut output =
                    crate::error::resource_precondition_not_met_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_precondition_not_met_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DeleteLedgerError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteLedgerError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_ledger_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteLedgerOutput, crate::error::DeleteLedgerError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_ledger_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_journal_kinesis_stream_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::DescribeJournalKinesisStreamOutput,
    crate::error::DescribeJournalKinesisStreamError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeJournalKinesisStreamError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeJournalKinesisStreamError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::DescribeJournalKinesisStreamError {
            meta: generic,
            kind: crate::error::DescribeJournalKinesisStreamErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeJournalKinesisStreamError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::DescribeJournalKinesisStreamError {
            meta: generic,
            kind: crate::error::DescribeJournalKinesisStreamErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeJournalKinesisStreamError::unhandled)?;
                output.build()
            }),
        },
        "ResourcePreconditionNotMetException" => crate::error::DescribeJournalKinesisStreamError {
            meta: generic,
            kind:
                crate::error::DescribeJournalKinesisStreamErrorKind::ResourcePreconditionNotMetError(
                    {
                        #[allow(unused_mut)]
                        let mut output =
                            crate::error::resource_precondition_not_met_error::Builder::default();
                        let _ = response;
                        output = crate::json_deser::resource_precondition_not_met_exception(
                            response.body().as_ref(),
                            output,
                        )
                        .map_err(crate::error::DescribeJournalKinesisStreamError::unhandled)?;
                        output.build()
                    },
                ),
        },
        _ => crate::error::DescribeJournalKinesisStreamError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_journal_kinesis_stream_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::DescribeJournalKinesisStreamOutput,
    crate::error::DescribeJournalKinesisStreamError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_journal_kinesis_stream_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_journal_kinesis_stream_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeJournalKinesisStreamError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_journal_s3_export_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DescribeJournalS3ExportOutput, crate::error::DescribeJournalS3ExportError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeJournalS3ExportError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::DescribeJournalS3ExportError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "ResourceNotFoundException" => crate::error::DescribeJournalS3ExportError {
            meta: generic,
            kind: crate::error::DescribeJournalS3ExportErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeJournalS3ExportError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeJournalS3ExportError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_journal_s3_export_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DescribeJournalS3ExportOutput, crate::error::DescribeJournalS3ExportError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_journal_s3_export_output::Builder::default();
        let _ = response;
        output = crate::json_deser::describe_journal_s3_export_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::DescribeJournalS3ExportError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_ledger_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DescribeLedgerOutput, crate::error::DescribeLedgerError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DescribeLedgerError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DescribeLedgerError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::DescribeLedgerError {
            meta: generic,
            kind: crate::error::DescribeLedgerErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeLedgerError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::DescribeLedgerError {
            meta: generic,
            kind: crate::error::DescribeLedgerErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::DescribeLedgerError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DescribeLedgerError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_describe_ledger_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DescribeLedgerOutput, crate::error::DescribeLedgerError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::describe_ledger_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::describe_ledger_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::DescribeLedgerError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_export_journal_to_s3_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ExportJournalToS3Output, crate::error::ExportJournalToS3Error> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ExportJournalToS3Error::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ExportJournalToS3Error::unhandled(generic)),
    };
    Err(match error_code {
        "ResourceNotFoundException" => crate::error::ExportJournalToS3Error {
            meta: generic,
            kind: crate::error::ExportJournalToS3ErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ExportJournalToS3Error::unhandled)?;
                output.build()
            }),
        },
        "ResourcePreconditionNotMetException" => crate::error::ExportJournalToS3Error {
            meta: generic,
            kind: crate::error::ExportJournalToS3ErrorKind::ResourcePreconditionNotMetError({
                #[allow(unused_mut)]
                let mut output =
                    crate::error::resource_precondition_not_met_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_precondition_not_met_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ExportJournalToS3Error::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ExportJournalToS3Error::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_export_journal_to_s3_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ExportJournalToS3Output, crate::error::ExportJournalToS3Error> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::export_journal_to_s3_output::Builder::default();
        let _ = response;
        output = crate::json_deser::export_journal_to_s3_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ExportJournalToS3Error::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_block_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetBlockOutput, crate::error::GetBlockError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetBlockError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetBlockError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::GetBlockError {
            meta: generic,
            kind: crate::error::GetBlockErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetBlockError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::GetBlockError {
            meta: generic,
            kind: crate::error::GetBlockErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetBlockError::unhandled)?;
                output.build()
            }),
        },
        "ResourcePreconditionNotMetException" => crate::error::GetBlockError {
            meta: generic,
            kind: crate::error::GetBlockErrorKind::ResourcePreconditionNotMetError({
                #[allow(unused_mut)]
                let mut output =
                    crate::error::resource_precondition_not_met_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_precondition_not_met_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetBlockError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetBlockError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_block_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetBlockOutput, crate::error::GetBlockError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_block_output::Builder::default();
        let _ = response;
        output = crate::json_deser::get_block_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::GetBlockError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_digest_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetDigestOutput, crate::error::GetDigestError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetDigestError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetDigestError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::GetDigestError {
            meta: generic,
            kind: crate::error::GetDigestErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetDigestError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::GetDigestError {
            meta: generic,
            kind: crate::error::GetDigestErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetDigestError::unhandled)?;
                output.build()
            }),
        },
        "ResourcePreconditionNotMetException" => crate::error::GetDigestError {
            meta: generic,
            kind: crate::error::GetDigestErrorKind::ResourcePreconditionNotMetError({
                #[allow(unused_mut)]
                let mut output =
                    crate::error::resource_precondition_not_met_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_precondition_not_met_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetDigestError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetDigestError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_digest_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetDigestOutput, crate::error::GetDigestError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_digest_output::Builder::default();
        let _ = response;
        output = crate::json_deser::get_digest_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::GetDigestError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_revision_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetRevisionOutput, crate::error::GetRevisionError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetRevisionError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetRevisionError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::GetRevisionError {
            meta: generic,
            kind: crate::error::GetRevisionErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetRevisionError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::GetRevisionError {
            meta: generic,
            kind: crate::error::GetRevisionErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetRevisionError::unhandled)?;
                output.build()
            }),
        },
        "ResourcePreconditionNotMetException" => crate::error::GetRevisionError {
            meta: generic,
            kind: crate::error::GetRevisionErrorKind::ResourcePreconditionNotMetError({
                #[allow(unused_mut)]
                let mut output =
                    crate::error::resource_precondition_not_met_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_precondition_not_met_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::GetRevisionError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetRevisionError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_revision_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetRevisionOutput, crate::error::GetRevisionError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_revision_output::Builder::default();
        let _ = response;
        output = crate::json_deser::get_revision_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::GetRevisionError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_journal_kinesis_streams_for_ledger_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListJournalKinesisStreamsForLedgerOutput,
    crate::error::ListJournalKinesisStreamsForLedgerError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListJournalKinesisStreamsForLedgerError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::ListJournalKinesisStreamsForLedgerError::unhandled(generic))
        }
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::ListJournalKinesisStreamsForLedgerError { meta: generic, kind: crate::error::ListJournalKinesisStreamsForLedgerErrorKind::InvalidParameterError({
            #[allow(unused_mut)]let mut output = crate::error::invalid_parameter_error::Builder::default();
            let _ = response;
            output = crate::json_deser::invalid_parameter_exception(response.body().as_ref(), output).map_err(crate::error::ListJournalKinesisStreamsForLedgerError::unhandled)?;
            output.build()
        })},
        "ResourceNotFoundException" => crate::error::ListJournalKinesisStreamsForLedgerError { meta: generic, kind: crate::error::ListJournalKinesisStreamsForLedgerErrorKind::ResourceNotFoundError({
            #[allow(unused_mut)]let mut output = crate::error::resource_not_found_error::Builder::default();
            let _ = response;
            output = crate::json_deser::resource_not_found_exception(response.body().as_ref(), output).map_err(crate::error::ListJournalKinesisStreamsForLedgerError::unhandled)?;
            output.build()
        })},
        "ResourcePreconditionNotMetException" => crate::error::ListJournalKinesisStreamsForLedgerError { meta: generic, kind: crate::error::ListJournalKinesisStreamsForLedgerErrorKind::ResourcePreconditionNotMetError({
            #[allow(unused_mut)]let mut output = crate::error::resource_precondition_not_met_error::Builder::default();
            let _ = response;
            output = crate::json_deser::resource_precondition_not_met_exception(response.body().as_ref(), output).map_err(crate::error::ListJournalKinesisStreamsForLedgerError::unhandled)?;
            output.build()
        })},
        _ => crate::error::ListJournalKinesisStreamsForLedgerError::generic(generic)
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_journal_kinesis_streams_for_ledger_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListJournalKinesisStreamsForLedgerOutput,
    crate::error::ListJournalKinesisStreamsForLedgerError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::list_journal_kinesis_streams_for_ledger_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_journal_kinesis_streams_for_ledger_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListJournalKinesisStreamsForLedgerError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_journal_s3_exports_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListJournalS3ExportsOutput, crate::error::ListJournalS3ExportsError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListJournalS3ExportsError::unhandled)?;
    Err(crate::error::ListJournalS3ExportsError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_journal_s3_exports_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListJournalS3ExportsOutput, crate::error::ListJournalS3ExportsError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_journal_s3_exports_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_journal_s3_exports_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListJournalS3ExportsError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_journal_s3_exports_for_ledger_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListJournalS3ExportsForLedgerOutput,
    crate::error::ListJournalS3ExportsForLedgerError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListJournalS3ExportsForLedgerError::unhandled)?;
    Err(crate::error::ListJournalS3ExportsForLedgerError::generic(
        generic,
    ))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_journal_s3_exports_for_ledger_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::ListJournalS3ExportsForLedgerOutput,
    crate::error::ListJournalS3ExportsForLedgerError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output =
            crate::output::list_journal_s3_exports_for_ledger_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_journal_s3_exports_for_ledger_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListJournalS3ExportsForLedgerError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_ledgers_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListLedgersOutput, crate::error::ListLedgersError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListLedgersError::unhandled)?;
    Err(crate::error::ListLedgersError::generic(generic))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_ledgers_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListLedgersOutput, crate::error::ListLedgersError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_ledgers_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_ledgers_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::ListLedgersError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListTagsForResourceOutput, crate::error::ListTagsForResourceError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::ListTagsForResourceError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::ListTagsForResourceError {
            meta: generic,
            kind: crate::error::ListTagsForResourceErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::ListTagsForResourceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::ListTagsForResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_list_tags_for_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::ListTagsForResourceOutput, crate::error::ListTagsForResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::list_tags_for_resource_output::Builder::default();
        let _ = response;
        output = crate::json_deser::list_tags_for_resource_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::ListTagsForResourceError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stream_journal_to_kinesis_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::StreamJournalToKinesisOutput, crate::error::StreamJournalToKinesisError>
{
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::StreamJournalToKinesisError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::StreamJournalToKinesisError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::StreamJournalToKinesisError {
            meta: generic,
            kind: crate::error::StreamJournalToKinesisErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StreamJournalToKinesisError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::StreamJournalToKinesisError {
            meta: generic,
            kind: crate::error::StreamJournalToKinesisErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StreamJournalToKinesisError::unhandled)?;
                output.build()
            }),
        },
        "ResourcePreconditionNotMetException" => crate::error::StreamJournalToKinesisError {
            meta: generic,
            kind: crate::error::StreamJournalToKinesisErrorKind::ResourcePreconditionNotMetError({
                #[allow(unused_mut)]
                let mut output =
                    crate::error::resource_precondition_not_met_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_precondition_not_met_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::StreamJournalToKinesisError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::StreamJournalToKinesisError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_stream_journal_to_kinesis_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::StreamJournalToKinesisOutput, crate::error::StreamJournalToKinesisError>
{
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::stream_journal_to_kinesis_output::Builder::default();
        let _ = response;
        output = crate::json_deser::stream_journal_to_kinesis_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::StreamJournalToKinesisError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::TagResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::TagResourceError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::TagResourceError {
            meta: generic,
            kind: crate::error::TagResourceErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::TagResourceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::TagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_tag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::TagResourceOutput, crate::error::TagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::tag_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UntagResourceError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UntagResourceError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::UntagResourceError {
            meta: generic,
            kind: crate::error::UntagResourceErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UntagResourceError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UntagResourceError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_untag_resource_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::untag_resource_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_ledger_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::UpdateLedgerOutput, crate::error::UpdateLedgerError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateLedgerError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::UpdateLedgerError::unhandled(generic)),
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::UpdateLedgerError {
            meta: generic,
            kind: crate::error::UpdateLedgerErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateLedgerError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::UpdateLedgerError {
            meta: generic,
            kind: crate::error::UpdateLedgerErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateLedgerError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateLedgerError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_ledger_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::UpdateLedgerOutput, crate::error::UpdateLedgerError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_ledger_output::Builder::default();
        let _ = response;
        output = crate::json_deser::update_ledger_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::UpdateLedgerError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_ledger_permissions_mode_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::UpdateLedgerPermissionsModeOutput,
    crate::error::UpdateLedgerPermissionsModeError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::UpdateLedgerPermissionsModeError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => {
            return Err(crate::error::UpdateLedgerPermissionsModeError::unhandled(
                generic,
            ))
        }
    };
    Err(match error_code {
        "InvalidParameterException" => crate::error::UpdateLedgerPermissionsModeError {
            meta: generic,
            kind: crate::error::UpdateLedgerPermissionsModeErrorKind::InvalidParameterError({
                #[allow(unused_mut)]
                let mut output = crate::error::invalid_parameter_error::Builder::default();
                let _ = response;
                output = crate::json_deser::invalid_parameter_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateLedgerPermissionsModeError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFoundException" => crate::error::UpdateLedgerPermissionsModeError {
            meta: generic,
            kind: crate::error::UpdateLedgerPermissionsModeErrorKind::ResourceNotFoundError({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found_error::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found_exception(
                    response.body().as_ref(),
                    output,
                )
                .map_err(crate::error::UpdateLedgerPermissionsModeError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::UpdateLedgerPermissionsModeError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_update_ledger_permissions_mode_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    crate::output::UpdateLedgerPermissionsModeOutput,
    crate::error::UpdateLedgerPermissionsModeError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::update_ledger_permissions_mode_output::Builder::default();
        let _ = response;
        output = crate::json_deser::update_ledger_permissions_mode_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::UpdateLedgerPermissionsModeError::unhandled)?;
        output.build()
    })
}
