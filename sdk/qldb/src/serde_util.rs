// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn describe_journal_s3_export_output_correct_errors(
    mut builder: crate::operation::describe_journal_s3_export::builders::DescribeJournalS3ExportOutputBuilder,
) -> crate::operation::describe_journal_s3_export::builders::DescribeJournalS3ExportOutputBuilder {
    if builder.export_description.is_none() {
        builder.export_description = {
            let builder = crate::types::builders::JournalS3ExportDescriptionBuilder::default();
            crate::serde_util::journal_s3_export_description_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn export_journal_to_s3_output_correct_errors(
    mut builder: crate::operation::export_journal_to_s3::builders::ExportJournalToS3OutputBuilder,
) -> crate::operation::export_journal_to_s3::builders::ExportJournalToS3OutputBuilder {
    if builder.export_id.is_none() {
        builder.export_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_block_output_correct_errors(
    mut builder: crate::operation::get_block::builders::GetBlockOutputBuilder,
) -> crate::operation::get_block::builders::GetBlockOutputBuilder {
    if builder.block.is_none() {
        builder.block = {
            let builder = crate::types::builders::ValueHolderBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_digest_output_correct_errors(
    mut builder: crate::operation::get_digest::builders::GetDigestOutputBuilder,
) -> crate::operation::get_digest::builders::GetDigestOutputBuilder {
    if builder.digest.is_none() {
        builder.digest = Some(::aws_smithy_types::Blob::new(""))
    }
    if builder.digest_tip_address.is_none() {
        builder.digest_tip_address = {
            let builder = crate::types::builders::ValueHolderBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_revision_output_correct_errors(
    mut builder: crate::operation::get_revision::builders::GetRevisionOutputBuilder,
) -> crate::operation::get_revision::builders::GetRevisionOutputBuilder {
    if builder.revision.is_none() {
        builder.revision = {
            let builder = crate::types::builders::ValueHolderBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn journal_s3_export_description_correct_errors(
    mut builder: crate::types::builders::JournalS3ExportDescriptionBuilder,
) -> crate::types::builders::JournalS3ExportDescriptionBuilder {
    if builder.ledger_name.is_none() {
        builder.ledger_name = Some(Default::default())
    }
    if builder.export_id.is_none() {
        builder.export_id = Some(Default::default())
    }
    if builder.export_creation_time.is_none() {
        builder.export_creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ExportStatus>().ok()
    }
    if builder.inclusive_start_time.is_none() {
        builder.inclusive_start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.exclusive_end_time.is_none() {
        builder.exclusive_end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.s3_export_configuration.is_none() {
        builder.s3_export_configuration = {
            let builder = crate::types::builders::S3ExportConfigurationBuilder::default();
            crate::serde_util::s3_export_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn journal_kinesis_stream_description_correct_errors(
    mut builder: crate::types::builders::JournalKinesisStreamDescriptionBuilder,
) -> crate::types::builders::JournalKinesisStreamDescriptionBuilder {
    if builder.ledger_name.is_none() {
        builder.ledger_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.stream_id.is_none() {
        builder.stream_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::StreamStatus>().ok()
    }
    if builder.kinesis_configuration.is_none() {
        builder.kinesis_configuration = {
            let builder = crate::types::builders::KinesisConfigurationBuilder::default();
            crate::serde_util::kinesis_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.stream_name.is_none() {
        builder.stream_name = Some(Default::default())
    }
    builder
}

pub(crate) fn ledger_encryption_description_correct_errors(
    mut builder: crate::types::builders::LedgerEncryptionDescriptionBuilder,
) -> crate::types::builders::LedgerEncryptionDescriptionBuilder {
    if builder.kms_key_arn.is_none() {
        builder.kms_key_arn = Some(Default::default())
    }
    if builder.encryption_status.is_none() {
        builder.encryption_status = "no value was set".parse::<crate::types::EncryptionStatus>().ok()
    }
    builder
}

pub(crate) fn s3_export_configuration_correct_errors(
    mut builder: crate::types::builders::S3ExportConfigurationBuilder,
) -> crate::types::builders::S3ExportConfigurationBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.prefix.is_none() {
        builder.prefix = Some(Default::default())
    }
    if builder.encryption_configuration.is_none() {
        builder.encryption_configuration = {
            let builder = crate::types::builders::S3EncryptionConfigurationBuilder::default();
            crate::serde_util::s3_encryption_configuration_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn kinesis_configuration_correct_errors(
    mut builder: crate::types::builders::KinesisConfigurationBuilder,
) -> crate::types::builders::KinesisConfigurationBuilder {
    if builder.stream_arn.is_none() {
        builder.stream_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_encryption_configuration_correct_errors(
    mut builder: crate::types::builders::S3EncryptionConfigurationBuilder,
) -> crate::types::builders::S3EncryptionConfigurationBuilder {
    if builder.object_encryption_type.is_none() {
        builder.object_encryption_type = "no value was set".parse::<crate::types::S3ObjectEncryptionType>().ok()
    }
    builder
}
