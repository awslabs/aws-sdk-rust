// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_stream_journal_to_kinesis_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::stream_journal_to_kinesis::StreamJournalToKinesisInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.exclusive_end_time {
        object
            .key("ExclusiveEndTime")
            .date_time(var_1, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_2) = &input.inclusive_start_time {
        object
            .key("InclusiveStartTime")
            .date_time(var_2, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_3) = &input.kinesis_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("KinesisConfiguration").start_object();
        crate::protocol_serde::shape_kinesis_configuration::ser_kinesis_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.role_arn {
        object.key("RoleArn").string(var_5.as_str());
    }
    if let Some(var_6) = &input.stream_name {
        object.key("StreamName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.tags {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Tags").start_object();
        for (key_9, value_10) in var_7 {
            if let Some(var_11) = value_10 {
                object_8.key(key_9.as_str()).string(var_11.as_str());
            } else {
                object_8.key(key_9.as_str()).null();
            }
        }
        object_8.finish();
    }
    Ok(())
}
