// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CancelJournalKinesisStream`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`cancel_journal_kinesis_stream`](crate::client::fluent_builders::CancelJournalKinesisStream).
///
/// `ParseStrictResponse` impl for `CancelJournalKinesisStream`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CancelJournalKinesisStream {
    _private: (),
}
impl CancelJournalKinesisStream {
    /// Creates a new builder-style object to manufacture [`CancelJournalKinesisStreamInput`](crate::input::CancelJournalKinesisStreamInput).
    pub fn builder() -> crate::input::cancel_journal_kinesis_stream_input::Builder {
        crate::input::cancel_journal_kinesis_stream_input::Builder::default()
    }
    /// Creates a new `CancelJournalKinesisStream` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CancelJournalKinesisStream {
    type Output = std::result::Result<
        crate::output::CancelJournalKinesisStreamOutput,
        crate::error::CancelJournalKinesisStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_cancel_journal_kinesis_stream::de_cancel_journal_kinesis_stream_http_error(response)
        } else {
            crate::protocol_serde::shape_cancel_journal_kinesis_stream::de_cancel_journal_kinesis_stream_http_response(response)
        }
    }
}

/// Operation shape for `CreateLedger`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_ledger`](crate::client::fluent_builders::CreateLedger).
///
/// `ParseStrictResponse` impl for `CreateLedger`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLedger {
    _private: (),
}
impl CreateLedger {
    /// Creates a new builder-style object to manufacture [`CreateLedgerInput`](crate::input::CreateLedgerInput).
    pub fn builder() -> crate::input::create_ledger_input::Builder {
        crate::input::create_ledger_input::Builder::default()
    }
    /// Creates a new `CreateLedger` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLedger {
    type Output =
        std::result::Result<crate::output::CreateLedgerOutput, crate::error::CreateLedgerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_ledger::de_create_ledger_http_error(response)
        } else {
            crate::protocol_serde::shape_create_ledger::de_create_ledger_http_response(response)
        }
    }
}

/// Operation shape for `DeleteLedger`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_ledger`](crate::client::fluent_builders::DeleteLedger).
///
/// `ParseStrictResponse` impl for `DeleteLedger`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteLedger {
    _private: (),
}
impl DeleteLedger {
    /// Creates a new builder-style object to manufacture [`DeleteLedgerInput`](crate::input::DeleteLedgerInput).
    pub fn builder() -> crate::input::delete_ledger_input::Builder {
        crate::input::delete_ledger_input::Builder::default()
    }
    /// Creates a new `DeleteLedger` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteLedger {
    type Output =
        std::result::Result<crate::output::DeleteLedgerOutput, crate::error::DeleteLedgerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_ledger::de_delete_ledger_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_ledger::de_delete_ledger_http_response(response)
        }
    }
}

/// Operation shape for `DescribeJournalKinesisStream`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_journal_kinesis_stream`](crate::client::fluent_builders::DescribeJournalKinesisStream).
///
/// `ParseStrictResponse` impl for `DescribeJournalKinesisStream`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeJournalKinesisStream {
    _private: (),
}
impl DescribeJournalKinesisStream {
    /// Creates a new builder-style object to manufacture [`DescribeJournalKinesisStreamInput`](crate::input::DescribeJournalKinesisStreamInput).
    pub fn builder() -> crate::input::describe_journal_kinesis_stream_input::Builder {
        crate::input::describe_journal_kinesis_stream_input::Builder::default()
    }
    /// Creates a new `DescribeJournalKinesisStream` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeJournalKinesisStream {
    type Output = std::result::Result<
        crate::output::DescribeJournalKinesisStreamOutput,
        crate::error::DescribeJournalKinesisStreamError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_journal_kinesis_stream::de_describe_journal_kinesis_stream_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_journal_kinesis_stream::de_describe_journal_kinesis_stream_http_response(response)
        }
    }
}

/// Operation shape for `DescribeJournalS3Export`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_journal_s3_export`](crate::client::fluent_builders::DescribeJournalS3Export).
///
/// `ParseStrictResponse` impl for `DescribeJournalS3Export`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeJournalS3Export {
    _private: (),
}
impl DescribeJournalS3Export {
    /// Creates a new builder-style object to manufacture [`DescribeJournalS3ExportInput`](crate::input::DescribeJournalS3ExportInput).
    pub fn builder() -> crate::input::describe_journal_s3_export_input::Builder {
        crate::input::describe_journal_s3_export_input::Builder::default()
    }
    /// Creates a new `DescribeJournalS3Export` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeJournalS3Export {
    type Output = std::result::Result<
        crate::output::DescribeJournalS3ExportOutput,
        crate::error::DescribeJournalS3ExportError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_journal_s3_export::de_describe_journal_s3_export_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_journal_s3_export::de_describe_journal_s3_export_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLedger`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_ledger`](crate::client::fluent_builders::DescribeLedger).
///
/// `ParseStrictResponse` impl for `DescribeLedger`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLedger {
    _private: (),
}
impl DescribeLedger {
    /// Creates a new builder-style object to manufacture [`DescribeLedgerInput`](crate::input::DescribeLedgerInput).
    pub fn builder() -> crate::input::describe_ledger_input::Builder {
        crate::input::describe_ledger_input::Builder::default()
    }
    /// Creates a new `DescribeLedger` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLedger {
    type Output =
        std::result::Result<crate::output::DescribeLedgerOutput, crate::error::DescribeLedgerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_ledger::de_describe_ledger_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_ledger::de_describe_ledger_http_response(response)
        }
    }
}

/// Operation shape for `ExportJournalToS3`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`export_journal_to_s3`](crate::client::fluent_builders::ExportJournalToS3).
///
/// `ParseStrictResponse` impl for `ExportJournalToS3`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ExportJournalToS3 {
    _private: (),
}
impl ExportJournalToS3 {
    /// Creates a new builder-style object to manufacture [`ExportJournalToS3Input`](crate::input::ExportJournalToS3Input).
    pub fn builder() -> crate::input::export_journal_to_s3_input::Builder {
        crate::input::export_journal_to_s3_input::Builder::default()
    }
    /// Creates a new `ExportJournalToS3` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ExportJournalToS3 {
    type Output = std::result::Result<
        crate::output::ExportJournalToS3Output,
        crate::error::ExportJournalToS3Error,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_export_journal_to_s3::de_export_journal_to_s3_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_export_journal_to_s3::de_export_journal_to_s3_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetBlock`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_block`](crate::client::fluent_builders::GetBlock).
///
/// `ParseStrictResponse` impl for `GetBlock`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetBlock {
    _private: (),
}
impl GetBlock {
    /// Creates a new builder-style object to manufacture [`GetBlockInput`](crate::input::GetBlockInput).
    pub fn builder() -> crate::input::get_block_input::Builder {
        crate::input::get_block_input::Builder::default()
    }
    /// Creates a new `GetBlock` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetBlock {
    type Output = std::result::Result<crate::output::GetBlockOutput, crate::error::GetBlockError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_block::de_get_block_http_error(response)
        } else {
            crate::protocol_serde::shape_get_block::de_get_block_http_response(response)
        }
    }
}

/// Operation shape for `GetDigest`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_digest`](crate::client::fluent_builders::GetDigest).
///
/// `ParseStrictResponse` impl for `GetDigest`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetDigest {
    _private: (),
}
impl GetDigest {
    /// Creates a new builder-style object to manufacture [`GetDigestInput`](crate::input::GetDigestInput).
    pub fn builder() -> crate::input::get_digest_input::Builder {
        crate::input::get_digest_input::Builder::default()
    }
    /// Creates a new `GetDigest` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetDigest {
    type Output = std::result::Result<crate::output::GetDigestOutput, crate::error::GetDigestError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_digest::de_get_digest_http_error(response)
        } else {
            crate::protocol_serde::shape_get_digest::de_get_digest_http_response(response)
        }
    }
}

/// Operation shape for `GetRevision`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_revision`](crate::client::fluent_builders::GetRevision).
///
/// `ParseStrictResponse` impl for `GetRevision`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRevision {
    _private: (),
}
impl GetRevision {
    /// Creates a new builder-style object to manufacture [`GetRevisionInput`](crate::input::GetRevisionInput).
    pub fn builder() -> crate::input::get_revision_input::Builder {
        crate::input::get_revision_input::Builder::default()
    }
    /// Creates a new `GetRevision` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRevision {
    type Output =
        std::result::Result<crate::output::GetRevisionOutput, crate::error::GetRevisionError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_revision::de_get_revision_http_error(response)
        } else {
            crate::protocol_serde::shape_get_revision::de_get_revision_http_response(response)
        }
    }
}

/// Operation shape for `ListJournalKinesisStreamsForLedger`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_journal_kinesis_streams_for_ledger`](crate::client::fluent_builders::ListJournalKinesisStreamsForLedger).
///
/// `ParseStrictResponse` impl for `ListJournalKinesisStreamsForLedger`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListJournalKinesisStreamsForLedger {
    _private: (),
}
impl ListJournalKinesisStreamsForLedger {
    /// Creates a new builder-style object to manufacture [`ListJournalKinesisStreamsForLedgerInput`](crate::input::ListJournalKinesisStreamsForLedgerInput).
    pub fn builder() -> crate::input::list_journal_kinesis_streams_for_ledger_input::Builder {
        crate::input::list_journal_kinesis_streams_for_ledger_input::Builder::default()
    }
    /// Creates a new `ListJournalKinesisStreamsForLedger` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListJournalKinesisStreamsForLedger {
    type Output = std::result::Result<
        crate::output::ListJournalKinesisStreamsForLedgerOutput,
        crate::error::ListJournalKinesisStreamsForLedgerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_journal_kinesis_streams_for_ledger::de_list_journal_kinesis_streams_for_ledger_http_error(response)
        } else {
            crate::protocol_serde::shape_list_journal_kinesis_streams_for_ledger::de_list_journal_kinesis_streams_for_ledger_http_response(response)
        }
    }
}

/// Operation shape for `ListJournalS3Exports`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_journal_s3_exports`](crate::client::fluent_builders::ListJournalS3Exports).
///
/// `ParseStrictResponse` impl for `ListJournalS3Exports`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListJournalS3Exports {
    _private: (),
}
impl ListJournalS3Exports {
    /// Creates a new builder-style object to manufacture [`ListJournalS3ExportsInput`](crate::input::ListJournalS3ExportsInput).
    pub fn builder() -> crate::input::list_journal_s3_exports_input::Builder {
        crate::input::list_journal_s3_exports_input::Builder::default()
    }
    /// Creates a new `ListJournalS3Exports` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListJournalS3Exports {
    type Output = std::result::Result<
        crate::output::ListJournalS3ExportsOutput,
        crate::error::ListJournalS3ExportsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_journal_s3_exports::de_list_journal_s3_exports_http_error(response)
        } else {
            crate::protocol_serde::shape_list_journal_s3_exports::de_list_journal_s3_exports_http_response(response)
        }
    }
}

/// Operation shape for `ListJournalS3ExportsForLedger`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_journal_s3_exports_for_ledger`](crate::client::fluent_builders::ListJournalS3ExportsForLedger).
///
/// `ParseStrictResponse` impl for `ListJournalS3ExportsForLedger`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListJournalS3ExportsForLedger {
    _private: (),
}
impl ListJournalS3ExportsForLedger {
    /// Creates a new builder-style object to manufacture [`ListJournalS3ExportsForLedgerInput`](crate::input::ListJournalS3ExportsForLedgerInput).
    pub fn builder() -> crate::input::list_journal_s3_exports_for_ledger_input::Builder {
        crate::input::list_journal_s3_exports_for_ledger_input::Builder::default()
    }
    /// Creates a new `ListJournalS3ExportsForLedger` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListJournalS3ExportsForLedger {
    type Output = std::result::Result<
        crate::output::ListJournalS3ExportsForLedgerOutput,
        crate::error::ListJournalS3ExportsForLedgerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_journal_s3_exports_for_ledger::de_list_journal_s3_exports_for_ledger_http_error(response)
        } else {
            crate::protocol_serde::shape_list_journal_s3_exports_for_ledger::de_list_journal_s3_exports_for_ledger_http_response(response)
        }
    }
}

/// Operation shape for `ListLedgers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_ledgers`](crate::client::fluent_builders::ListLedgers).
///
/// `ParseStrictResponse` impl for `ListLedgers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListLedgers {
    _private: (),
}
impl ListLedgers {
    /// Creates a new builder-style object to manufacture [`ListLedgersInput`](crate::input::ListLedgersInput).
    pub fn builder() -> crate::input::list_ledgers_input::Builder {
        crate::input::list_ledgers_input::Builder::default()
    }
    /// Creates a new `ListLedgers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListLedgers {
    type Output =
        std::result::Result<crate::output::ListLedgersOutput, crate::error::ListLedgersError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_ledgers::de_list_ledgers_http_error(response)
        } else {
            crate::protocol_serde::shape_list_ledgers::de_list_ledgers_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `StreamJournalToKinesis`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stream_journal_to_kinesis`](crate::client::fluent_builders::StreamJournalToKinesis).
///
/// `ParseStrictResponse` impl for `StreamJournalToKinesis`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StreamJournalToKinesis {
    _private: (),
}
impl StreamJournalToKinesis {
    /// Creates a new builder-style object to manufacture [`StreamJournalToKinesisInput`](crate::input::StreamJournalToKinesisInput).
    pub fn builder() -> crate::input::stream_journal_to_kinesis_input::Builder {
        crate::input::stream_journal_to_kinesis_input::Builder::default()
    }
    /// Creates a new `StreamJournalToKinesis` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StreamJournalToKinesis {
    type Output = std::result::Result<
        crate::output::StreamJournalToKinesisOutput,
        crate::error::StreamJournalToKinesisError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_stream_journal_to_kinesis::de_stream_journal_to_kinesis_http_error(response)
        } else {
            crate::protocol_serde::shape_stream_journal_to_kinesis::de_stream_journal_to_kinesis_http_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateLedger`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_ledger`](crate::client::fluent_builders::UpdateLedger).
///
/// `ParseStrictResponse` impl for `UpdateLedger`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLedger {
    _private: (),
}
impl UpdateLedger {
    /// Creates a new builder-style object to manufacture [`UpdateLedgerInput`](crate::input::UpdateLedgerInput).
    pub fn builder() -> crate::input::update_ledger_input::Builder {
        crate::input::update_ledger_input::Builder::default()
    }
    /// Creates a new `UpdateLedger` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLedger {
    type Output =
        std::result::Result<crate::output::UpdateLedgerOutput, crate::error::UpdateLedgerError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_ledger::de_update_ledger_http_error(response)
        } else {
            crate::protocol_serde::shape_update_ledger::de_update_ledger_http_response(response)
        }
    }
}

/// Operation shape for `UpdateLedgerPermissionsMode`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_ledger_permissions_mode`](crate::client::fluent_builders::UpdateLedgerPermissionsMode).
///
/// `ParseStrictResponse` impl for `UpdateLedgerPermissionsMode`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLedgerPermissionsMode {
    _private: (),
}
impl UpdateLedgerPermissionsMode {
    /// Creates a new builder-style object to manufacture [`UpdateLedgerPermissionsModeInput`](crate::input::UpdateLedgerPermissionsModeInput).
    pub fn builder() -> crate::input::update_ledger_permissions_mode_input::Builder {
        crate::input::update_ledger_permissions_mode_input::Builder::default()
    }
    /// Creates a new `UpdateLedgerPermissionsMode` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLedgerPermissionsMode {
    type Output = std::result::Result<
        crate::output::UpdateLedgerPermissionsModeOutput,
        crate::error::UpdateLedgerPermissionsModeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_ledger_permissions_mode::de_update_ledger_permissions_mode_http_error(response)
        } else {
            crate::protocol_serde::shape_update_ledger_permissions_mode::de_update_ledger_permissions_mode_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
