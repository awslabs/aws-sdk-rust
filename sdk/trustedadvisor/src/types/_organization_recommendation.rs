// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Recommendation for accounts within an Organization</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct OrganizationRecommendation {
    /// <p>The ID which identifies where the Recommendation was produced</p>
    pub id: ::std::string::String,
    /// <p>Whether the Recommendation was automated or generated by AWS Trusted Advisor Priority</p>
    pub r#type: crate::types::RecommendationType,
    /// <p>The AWS Trusted Advisor Check ARN that relates to the Recommendation</p>
    pub check_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the Recommendation</p>
    pub status: crate::types::RecommendationStatus,
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub lifecycle_stage: ::std::option::Option<crate::types::RecommendationLifecycleStage>,
    /// <p>The Pillars that the Recommendation is optimizing</p>
    pub pillars: ::std::vec::Vec<crate::types::RecommendationPillar>,
    /// <p>The source of the Recommendation</p>
    pub source: crate::types::RecommendationSource,
    /// <p>The AWS Services that the Recommendation applies to</p>
    pub aws_services: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The name of the AWS Trusted Advisor Recommendation</p>
    pub name: ::std::string::String,
    /// <p>An aggregation of all resources</p>
    pub resources_aggregates: ::std::option::Option<crate::types::RecommendationResourcesAggregates>,
    /// <p>The pillar aggregations for cost savings</p>
    pub pillar_specific_aggregates: ::std::option::Option<crate::types::RecommendationPillarSpecificAggregates>,
    /// <p>When the Recommendation was created, if created by AWS Trusted Advisor Priority</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>When the Recommendation was last updated</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the Recommendation</p>
    pub arn: ::std::string::String,
    /// <p>A description for AWS Trusted Advisor recommendations</p>
    pub description: ::std::string::String,
    /// <p>The creator, if created by AWS Trusted Advisor Priority</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub updated_on_behalf_of: ::std::option::Option<::std::string::String>,
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub updated_on_behalf_of_job_title: ::std::option::Option<::std::string::String>,
    /// <p>Reason for the lifecycle stage change</p>
    pub update_reason: ::std::option::Option<::std::string::String>,
    /// <p>Reason code for the lifecycle state change</p>
    pub update_reason_code: ::std::option::Option<crate::types::UpdateRecommendationLifecycleStageReasonCode>,
    /// <p>When the Recommendation was resolved</p>
    pub resolved_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl OrganizationRecommendation {
    /// <p>The ID which identifies where the Recommendation was produced</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>Whether the Recommendation was automated or generated by AWS Trusted Advisor Priority</p>
    pub fn r#type(&self) -> &crate::types::RecommendationType {
        &self.r#type
    }
    /// <p>The AWS Trusted Advisor Check ARN that relates to the Recommendation</p>
    pub fn check_arn(&self) -> ::std::option::Option<&str> {
        self.check_arn.as_deref()
    }
    /// <p>The status of the Recommendation</p>
    pub fn status(&self) -> &crate::types::RecommendationStatus {
        &self.status
    }
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub fn lifecycle_stage(&self) -> ::std::option::Option<&crate::types::RecommendationLifecycleStage> {
        self.lifecycle_stage.as_ref()
    }
    /// <p>The Pillars that the Recommendation is optimizing</p>
    pub fn pillars(&self) -> &[crate::types::RecommendationPillar] {
        use std::ops::Deref;
        self.pillars.deref()
    }
    /// <p>The source of the Recommendation</p>
    pub fn source(&self) -> &crate::types::RecommendationSource {
        &self.source
    }
    /// <p>The AWS Services that the Recommendation applies to</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.aws_services.is_none()`.
    pub fn aws_services(&self) -> &[::std::string::String] {
        self.aws_services.as_deref().unwrap_or_default()
    }
    /// <p>The name of the AWS Trusted Advisor Recommendation</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>An aggregation of all resources</p>
    pub fn resources_aggregates(&self) -> ::std::option::Option<&crate::types::RecommendationResourcesAggregates> {
        self.resources_aggregates.as_ref()
    }
    /// <p>The pillar aggregations for cost savings</p>
    pub fn pillar_specific_aggregates(&self) -> ::std::option::Option<&crate::types::RecommendationPillarSpecificAggregates> {
        self.pillar_specific_aggregates.as_ref()
    }
    /// <p>When the Recommendation was created, if created by AWS Trusted Advisor Priority</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>When the Recommendation was last updated</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The ARN of the Recommendation</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>A description for AWS Trusted Advisor recommendations</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The creator, if created by AWS Trusted Advisor Priority</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn updated_on_behalf_of(&self) -> ::std::option::Option<&str> {
        self.updated_on_behalf_of.as_deref()
    }
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn updated_on_behalf_of_job_title(&self) -> ::std::option::Option<&str> {
        self.updated_on_behalf_of_job_title.as_deref()
    }
    /// <p>Reason for the lifecycle stage change</p>
    pub fn update_reason(&self) -> ::std::option::Option<&str> {
        self.update_reason.as_deref()
    }
    /// <p>Reason code for the lifecycle state change</p>
    pub fn update_reason_code(&self) -> ::std::option::Option<&crate::types::UpdateRecommendationLifecycleStageReasonCode> {
        self.update_reason_code.as_ref()
    }
    /// <p>When the Recommendation was resolved</p>
    pub fn resolved_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.resolved_at.as_ref()
    }
}
impl ::std::fmt::Debug for OrganizationRecommendation {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OrganizationRecommendation");
        formatter.field("id", &self.id);
        formatter.field("r#type", &self.r#type);
        formatter.field("check_arn", &self.check_arn);
        formatter.field("status", &self.status);
        formatter.field("lifecycle_stage", &self.lifecycle_stage);
        formatter.field("pillars", &self.pillars);
        formatter.field("source", &self.source);
        formatter.field("aws_services", &self.aws_services);
        formatter.field("name", &self.name);
        formatter.field("resources_aggregates", &self.resources_aggregates);
        formatter.field("pillar_specific_aggregates", &self.pillar_specific_aggregates);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("arn", &self.arn);
        formatter.field("description", &self.description);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_on_behalf_of", &self.updated_on_behalf_of);
        formatter.field("updated_on_behalf_of_job_title", &self.updated_on_behalf_of_job_title);
        formatter.field("update_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("update_reason_code", &self.update_reason_code);
        formatter.field("resolved_at", &self.resolved_at);
        formatter.finish()
    }
}
impl OrganizationRecommendation {
    /// Creates a new builder-style object to manufacture [`OrganizationRecommendation`](crate::types::OrganizationRecommendation).
    pub fn builder() -> crate::types::builders::OrganizationRecommendationBuilder {
        crate::types::builders::OrganizationRecommendationBuilder::default()
    }
}

/// A builder for [`OrganizationRecommendation`](crate::types::OrganizationRecommendation).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct OrganizationRecommendationBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::RecommendationType>,
    pub(crate) check_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::RecommendationStatus>,
    pub(crate) lifecycle_stage: ::std::option::Option<crate::types::RecommendationLifecycleStage>,
    pub(crate) pillars: ::std::option::Option<::std::vec::Vec<crate::types::RecommendationPillar>>,
    pub(crate) source: ::std::option::Option<crate::types::RecommendationSource>,
    pub(crate) aws_services: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) resources_aggregates: ::std::option::Option<crate::types::RecommendationResourcesAggregates>,
    pub(crate) pillar_specific_aggregates: ::std::option::Option<crate::types::RecommendationPillarSpecificAggregates>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) updated_on_behalf_of: ::std::option::Option<::std::string::String>,
    pub(crate) updated_on_behalf_of_job_title: ::std::option::Option<::std::string::String>,
    pub(crate) update_reason: ::std::option::Option<::std::string::String>,
    pub(crate) update_reason_code: ::std::option::Option<crate::types::UpdateRecommendationLifecycleStageReasonCode>,
    pub(crate) resolved_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl OrganizationRecommendationBuilder {
    /// <p>The ID which identifies where the Recommendation was produced</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID which identifies where the Recommendation was produced</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID which identifies where the Recommendation was produced</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>Whether the Recommendation was automated or generated by AWS Trusted Advisor Priority</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::RecommendationType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the Recommendation was automated or generated by AWS Trusted Advisor Priority</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::RecommendationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Whether the Recommendation was automated or generated by AWS Trusted Advisor Priority</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::RecommendationType> {
        &self.r#type
    }
    /// <p>The AWS Trusted Advisor Check ARN that relates to the Recommendation</p>
    pub fn check_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.check_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Trusted Advisor Check ARN that relates to the Recommendation</p>
    pub fn set_check_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.check_arn = input;
        self
    }
    /// <p>The AWS Trusted Advisor Check ARN that relates to the Recommendation</p>
    pub fn get_check_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.check_arn
    }
    /// <p>The status of the Recommendation</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::RecommendationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Recommendation</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::RecommendationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Recommendation</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::RecommendationStatus> {
        &self.status
    }
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub fn lifecycle_stage(mut self, input: crate::types::RecommendationLifecycleStage) -> Self {
        self.lifecycle_stage = ::std::option::Option::Some(input);
        self
    }
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub fn set_lifecycle_stage(mut self, input: ::std::option::Option<crate::types::RecommendationLifecycleStage>) -> Self {
        self.lifecycle_stage = input;
        self
    }
    /// <p>The lifecycle stage from AWS Trusted Advisor Priority</p>
    pub fn get_lifecycle_stage(&self) -> &::std::option::Option<crate::types::RecommendationLifecycleStage> {
        &self.lifecycle_stage
    }
    /// Appends an item to `pillars`.
    ///
    /// To override the contents of this collection use [`set_pillars`](Self::set_pillars).
    ///
    /// <p>The Pillars that the Recommendation is optimizing</p>
    pub fn pillars(mut self, input: crate::types::RecommendationPillar) -> Self {
        let mut v = self.pillars.unwrap_or_default();
        v.push(input);
        self.pillars = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Pillars that the Recommendation is optimizing</p>
    pub fn set_pillars(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RecommendationPillar>>) -> Self {
        self.pillars = input;
        self
    }
    /// <p>The Pillars that the Recommendation is optimizing</p>
    pub fn get_pillars(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RecommendationPillar>> {
        &self.pillars
    }
    /// <p>The source of the Recommendation</p>
    /// This field is required.
    pub fn source(mut self, input: crate::types::RecommendationSource) -> Self {
        self.source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the Recommendation</p>
    pub fn set_source(mut self, input: ::std::option::Option<crate::types::RecommendationSource>) -> Self {
        self.source = input;
        self
    }
    /// <p>The source of the Recommendation</p>
    pub fn get_source(&self) -> &::std::option::Option<crate::types::RecommendationSource> {
        &self.source
    }
    /// Appends an item to `aws_services`.
    ///
    /// To override the contents of this collection use [`set_aws_services`](Self::set_aws_services).
    ///
    /// <p>The AWS Services that the Recommendation applies to</p>
    pub fn aws_services(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.aws_services.unwrap_or_default();
        v.push(input.into());
        self.aws_services = ::std::option::Option::Some(v);
        self
    }
    /// <p>The AWS Services that the Recommendation applies to</p>
    pub fn set_aws_services(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.aws_services = input;
        self
    }
    /// <p>The AWS Services that the Recommendation applies to</p>
    pub fn get_aws_services(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.aws_services
    }
    /// <p>The name of the AWS Trusted Advisor Recommendation</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the AWS Trusted Advisor Recommendation</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the AWS Trusted Advisor Recommendation</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An aggregation of all resources</p>
    /// This field is required.
    pub fn resources_aggregates(mut self, input: crate::types::RecommendationResourcesAggregates) -> Self {
        self.resources_aggregates = ::std::option::Option::Some(input);
        self
    }
    /// <p>An aggregation of all resources</p>
    pub fn set_resources_aggregates(mut self, input: ::std::option::Option<crate::types::RecommendationResourcesAggregates>) -> Self {
        self.resources_aggregates = input;
        self
    }
    /// <p>An aggregation of all resources</p>
    pub fn get_resources_aggregates(&self) -> &::std::option::Option<crate::types::RecommendationResourcesAggregates> {
        &self.resources_aggregates
    }
    /// <p>The pillar aggregations for cost savings</p>
    pub fn pillar_specific_aggregates(mut self, input: crate::types::RecommendationPillarSpecificAggregates) -> Self {
        self.pillar_specific_aggregates = ::std::option::Option::Some(input);
        self
    }
    /// <p>The pillar aggregations for cost savings</p>
    pub fn set_pillar_specific_aggregates(mut self, input: ::std::option::Option<crate::types::RecommendationPillarSpecificAggregates>) -> Self {
        self.pillar_specific_aggregates = input;
        self
    }
    /// <p>The pillar aggregations for cost savings</p>
    pub fn get_pillar_specific_aggregates(&self) -> &::std::option::Option<crate::types::RecommendationPillarSpecificAggregates> {
        &self.pillar_specific_aggregates
    }
    /// <p>When the Recommendation was created, if created by AWS Trusted Advisor Priority</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the Recommendation was created, if created by AWS Trusted Advisor Priority</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>When the Recommendation was created, if created by AWS Trusted Advisor Priority</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>When the Recommendation was last updated</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the Recommendation was last updated</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>When the Recommendation was last updated</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The ARN of the Recommendation</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Recommendation</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the Recommendation</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>A description for AWS Trusted Advisor recommendations</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for AWS Trusted Advisor recommendations</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for AWS Trusted Advisor recommendations</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The creator, if created by AWS Trusted Advisor Priority</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The creator, if created by AWS Trusted Advisor Priority</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The creator, if created by AWS Trusted Advisor Priority</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn updated_on_behalf_of(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_on_behalf_of = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn set_updated_on_behalf_of(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_on_behalf_of = input;
        self
    }
    /// <p>The person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn get_updated_on_behalf_of(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_on_behalf_of
    }
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn updated_on_behalf_of_job_title(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.updated_on_behalf_of_job_title = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn set_updated_on_behalf_of_job_title(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.updated_on_behalf_of_job_title = input;
        self
    }
    /// <p>The job title of the person on whose behalf a Technical Account Manager (TAM) updated the recommendation. This information is only available when a Technical Account Manager takes an action on a recommendation managed by AWS Trusted Advisor Priority</p>
    pub fn get_updated_on_behalf_of_job_title(&self) -> &::std::option::Option<::std::string::String> {
        &self.updated_on_behalf_of_job_title
    }
    /// <p>Reason for the lifecycle stage change</p>
    pub fn update_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.update_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Reason for the lifecycle stage change</p>
    pub fn set_update_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.update_reason = input;
        self
    }
    /// <p>Reason for the lifecycle stage change</p>
    pub fn get_update_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.update_reason
    }
    /// <p>Reason code for the lifecycle state change</p>
    pub fn update_reason_code(mut self, input: crate::types::UpdateRecommendationLifecycleStageReasonCode) -> Self {
        self.update_reason_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>Reason code for the lifecycle state change</p>
    pub fn set_update_reason_code(mut self, input: ::std::option::Option<crate::types::UpdateRecommendationLifecycleStageReasonCode>) -> Self {
        self.update_reason_code = input;
        self
    }
    /// <p>Reason code for the lifecycle state change</p>
    pub fn get_update_reason_code(&self) -> &::std::option::Option<crate::types::UpdateRecommendationLifecycleStageReasonCode> {
        &self.update_reason_code
    }
    /// <p>When the Recommendation was resolved</p>
    pub fn resolved_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.resolved_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the Recommendation was resolved</p>
    pub fn set_resolved_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.resolved_at = input;
        self
    }
    /// <p>When the Recommendation was resolved</p>
    pub fn get_resolved_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.resolved_at
    }
    /// Consumes the builder and constructs a [`OrganizationRecommendation`](crate::types::OrganizationRecommendation).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::OrganizationRecommendationBuilder::id)
    /// - [`r#type`](crate::types::builders::OrganizationRecommendationBuilder::type)
    /// - [`status`](crate::types::builders::OrganizationRecommendationBuilder::status)
    /// - [`pillars`](crate::types::builders::OrganizationRecommendationBuilder::pillars)
    /// - [`source`](crate::types::builders::OrganizationRecommendationBuilder::source)
    /// - [`name`](crate::types::builders::OrganizationRecommendationBuilder::name)
    /// - [`arn`](crate::types::builders::OrganizationRecommendationBuilder::arn)
    /// - [`description`](crate::types::builders::OrganizationRecommendationBuilder::description)
    pub fn build(self) -> ::std::result::Result<crate::types::OrganizationRecommendation, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OrganizationRecommendation {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building OrganizationRecommendation",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building OrganizationRecommendation",
                )
            })?,
            check_arn: self.check_arn,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building OrganizationRecommendation",
                )
            })?,
            lifecycle_stage: self.lifecycle_stage,
            pillars: self.pillars.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "pillars",
                    "pillars was not specified but it is required when building OrganizationRecommendation",
                )
            })?,
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building OrganizationRecommendation",
                )
            })?,
            aws_services: self.aws_services,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building OrganizationRecommendation",
                )
            })?,
            resources_aggregates: self.resources_aggregates,
            pillar_specific_aggregates: self.pillar_specific_aggregates,
            created_at: self.created_at,
            last_updated_at: self.last_updated_at,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building OrganizationRecommendation",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building OrganizationRecommendation",
                )
            })?,
            created_by: self.created_by,
            updated_on_behalf_of: self.updated_on_behalf_of,
            updated_on_behalf_of_job_title: self.updated_on_behalf_of_job_title,
            update_reason: self.update_reason,
            update_reason_code: self.update_reason_code,
            resolved_at: self.resolved_at,
        })
    }
}
impl ::std::fmt::Debug for OrganizationRecommendationBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("OrganizationRecommendationBuilder");
        formatter.field("id", &self.id);
        formatter.field("r#type", &self.r#type);
        formatter.field("check_arn", &self.check_arn);
        formatter.field("status", &self.status);
        formatter.field("lifecycle_stage", &self.lifecycle_stage);
        formatter.field("pillars", &self.pillars);
        formatter.field("source", &self.source);
        formatter.field("aws_services", &self.aws_services);
        formatter.field("name", &self.name);
        formatter.field("resources_aggregates", &self.resources_aggregates);
        formatter.field("pillar_specific_aggregates", &self.pillar_specific_aggregates);
        formatter.field("created_at", &self.created_at);
        formatter.field("last_updated_at", &self.last_updated_at);
        formatter.field("arn", &self.arn);
        formatter.field("description", &self.description);
        formatter.field("created_by", &self.created_by);
        formatter.field("updated_on_behalf_of", &self.updated_on_behalf_of);
        formatter.field("updated_on_behalf_of_job_title", &self.updated_on_behalf_of_job_title);
        formatter.field("update_reason", &"*** Sensitive Data Redacted ***");
        formatter.field("update_reason_code", &self.update_reason_code);
        formatter.field("resolved_at", &self.resolved_at);
        formatter.finish()
    }
}
