// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters to the <code>CreateOutboundConnection</code> operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateOutboundConnectionInput {
    /// <p>Name and Region of the source (local) domain.</p>
    #[doc(hidden)]
    pub local_domain_info: std::option::Option<crate::types::DomainInformationContainer>,
    /// <p>Name and Region of the destination (remote) domain.</p>
    #[doc(hidden)]
    pub remote_domain_info: std::option::Option<crate::types::DomainInformationContainer>,
    /// <p>Name of the connection.</p>
    #[doc(hidden)]
    pub connection_alias: std::option::Option<std::string::String>,
}
impl CreateOutboundConnectionInput {
    /// <p>Name and Region of the source (local) domain.</p>
    pub fn local_domain_info(
        &self,
    ) -> std::option::Option<&crate::types::DomainInformationContainer> {
        self.local_domain_info.as_ref()
    }
    /// <p>Name and Region of the destination (remote) domain.</p>
    pub fn remote_domain_info(
        &self,
    ) -> std::option::Option<&crate::types::DomainInformationContainer> {
        self.remote_domain_info.as_ref()
    }
    /// <p>Name of the connection.</p>
    pub fn connection_alias(&self) -> std::option::Option<&str> {
        self.connection_alias.as_deref()
    }
}
impl CreateOutboundConnectionInput {
    /// Creates a new builder-style object to manufacture [`CreateOutboundConnectionInput`](crate::operation::create_outbound_connection::CreateOutboundConnectionInput).
    pub fn builder(
    ) -> crate::operation::create_outbound_connection::builders::CreateOutboundConnectionInputBuilder
    {
        crate::operation::create_outbound_connection::builders::CreateOutboundConnectionInputBuilder::default()
    }
}

/// A builder for [`CreateOutboundConnectionInput`](crate::operation::create_outbound_connection::CreateOutboundConnectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateOutboundConnectionInputBuilder {
    pub(crate) local_domain_info: std::option::Option<crate::types::DomainInformationContainer>,
    pub(crate) remote_domain_info: std::option::Option<crate::types::DomainInformationContainer>,
    pub(crate) connection_alias: std::option::Option<std::string::String>,
}
impl CreateOutboundConnectionInputBuilder {
    /// <p>Name and Region of the source (local) domain.</p>
    pub fn local_domain_info(mut self, input: crate::types::DomainInformationContainer) -> Self {
        self.local_domain_info = Some(input);
        self
    }
    /// <p>Name and Region of the source (local) domain.</p>
    pub fn set_local_domain_info(
        mut self,
        input: std::option::Option<crate::types::DomainInformationContainer>,
    ) -> Self {
        self.local_domain_info = input;
        self
    }
    /// <p>Name and Region of the destination (remote) domain.</p>
    pub fn remote_domain_info(mut self, input: crate::types::DomainInformationContainer) -> Self {
        self.remote_domain_info = Some(input);
        self
    }
    /// <p>Name and Region of the destination (remote) domain.</p>
    pub fn set_remote_domain_info(
        mut self,
        input: std::option::Option<crate::types::DomainInformationContainer>,
    ) -> Self {
        self.remote_domain_info = input;
        self
    }
    /// <p>Name of the connection.</p>
    pub fn connection_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_alias = Some(input.into());
        self
    }
    /// <p>Name of the connection.</p>
    pub fn set_connection_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_alias = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateOutboundConnectionInput`](crate::operation::create_outbound_connection::CreateOutboundConnectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_outbound_connection::CreateOutboundConnectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_outbound_connection::CreateOutboundConnectionInput {
                local_domain_info: self.local_domain_info,
                remote_domain_info: self.remote_domain_info,
                connection_alias: self.connection_alias,
            },
        )
    }
}
