// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for request parameters to the <code>PurchaseReservedInstanceOffering</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PurchaseReservedInstanceOfferingInput {
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub reserved_instance_offering_id: ::std::option::Option<::std::string::String>,
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub reservation_name: ::std::option::Option<::std::string::String>,
    /// <p>The number of OpenSearch instances to reserve.</p>
    pub instance_count: ::std::option::Option<i32>,
}
impl PurchaseReservedInstanceOfferingInput {
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn reserved_instance_offering_id(&self) -> ::std::option::Option<&str> {
        self.reserved_instance_offering_id.as_deref()
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn reservation_name(&self) -> ::std::option::Option<&str> {
        self.reservation_name.as_deref()
    }
    /// <p>The number of OpenSearch instances to reserve.</p>
    pub fn instance_count(&self) -> ::std::option::Option<i32> {
        self.instance_count
    }
}
impl PurchaseReservedInstanceOfferingInput {
    /// Creates a new builder-style object to manufacture [`PurchaseReservedInstanceOfferingInput`](crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingInput).
    pub fn builder() -> crate::operation::purchase_reserved_instance_offering::builders::PurchaseReservedInstanceOfferingInputBuilder {
        crate::operation::purchase_reserved_instance_offering::builders::PurchaseReservedInstanceOfferingInputBuilder::default()
    }
}

/// A builder for [`PurchaseReservedInstanceOfferingInput`](crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PurchaseReservedInstanceOfferingInputBuilder {
    pub(crate) reserved_instance_offering_id: ::std::option::Option<::std::string::String>,
    pub(crate) reservation_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_count: ::std::option::Option<i32>,
}
impl PurchaseReservedInstanceOfferingInputBuilder {
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    /// This field is required.
    pub fn reserved_instance_offering_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reserved_instance_offering_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn set_reserved_instance_offering_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reserved_instance_offering_id = input;
        self
    }
    /// <p>The ID of the Reserved Instance offering to purchase.</p>
    pub fn get_reserved_instance_offering_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.reserved_instance_offering_id
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    /// This field is required.
    pub fn reservation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.reservation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn set_reservation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.reservation_name = input;
        self
    }
    /// <p>A customer-specified identifier to track this reservation.</p>
    pub fn get_reservation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.reservation_name
    }
    /// <p>The number of OpenSearch instances to reserve.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of OpenSearch instances to reserve.</p>
    pub fn set_instance_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The number of OpenSearch instances to reserve.</p>
    pub fn get_instance_count(&self) -> &::std::option::Option<i32> {
        &self.instance_count
    }
    /// Consumes the builder and constructs a [`PurchaseReservedInstanceOfferingInput`](crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingInput {
                reserved_instance_offering_id: self.reserved_instance_offering_id,
                reservation_name: self.reservation_name,
                instance_count: self.instance_count,
            },
        )
    }
}
