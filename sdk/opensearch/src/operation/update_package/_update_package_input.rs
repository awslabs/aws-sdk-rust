// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for request parameters to the <code>UpdatePackage</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdatePackageInput {
    /// <p>The unique identifier for the package.</p>
    pub package_id: ::std::option::Option<::std::string::String>,
    /// <p>Amazon S3 bucket and key for the package.</p>
    pub package_source: ::std::option::Option<crate::types::PackageSource>,
    /// <p>A new description of the package.</p>
    pub package_description: ::std::option::Option<::std::string::String>,
    /// <p>Commit message for the updated file, which is shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    pub commit_message: ::std::option::Option<::std::string::String>,
}
impl UpdatePackageInput {
    /// <p>The unique identifier for the package.</p>
    pub fn package_id(&self) -> ::std::option::Option<&str> {
        self.package_id.as_deref()
    }
    /// <p>Amazon S3 bucket and key for the package.</p>
    pub fn package_source(&self) -> ::std::option::Option<&crate::types::PackageSource> {
        self.package_source.as_ref()
    }
    /// <p>A new description of the package.</p>
    pub fn package_description(&self) -> ::std::option::Option<&str> {
        self.package_description.as_deref()
    }
    /// <p>Commit message for the updated file, which is shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    pub fn commit_message(&self) -> ::std::option::Option<&str> {
        self.commit_message.as_deref()
    }
}
impl UpdatePackageInput {
    /// Creates a new builder-style object to manufacture [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
    pub fn builder() -> crate::operation::update_package::builders::UpdatePackageInputBuilder {
        crate::operation::update_package::builders::UpdatePackageInputBuilder::default()
    }
}

/// A builder for [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdatePackageInputBuilder {
    pub(crate) package_id: ::std::option::Option<::std::string::String>,
    pub(crate) package_source: ::std::option::Option<crate::types::PackageSource>,
    pub(crate) package_description: ::std::option::Option<::std::string::String>,
    pub(crate) commit_message: ::std::option::Option<::std::string::String>,
}
impl UpdatePackageInputBuilder {
    /// <p>The unique identifier for the package.</p>
    /// This field is required.
    pub fn package_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier for the package.</p>
    pub fn set_package_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_id = input;
        self
    }
    /// <p>The unique identifier for the package.</p>
    pub fn get_package_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_id
    }
    /// <p>Amazon S3 bucket and key for the package.</p>
    /// This field is required.
    pub fn package_source(mut self, input: crate::types::PackageSource) -> Self {
        self.package_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>Amazon S3 bucket and key for the package.</p>
    pub fn set_package_source(mut self, input: ::std::option::Option<crate::types::PackageSource>) -> Self {
        self.package_source = input;
        self
    }
    /// <p>Amazon S3 bucket and key for the package.</p>
    pub fn get_package_source(&self) -> &::std::option::Option<crate::types::PackageSource> {
        &self.package_source
    }
    /// <p>A new description of the package.</p>
    pub fn package_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A new description of the package.</p>
    pub fn set_package_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_description = input;
        self
    }
    /// <p>A new description of the package.</p>
    pub fn get_package_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_description
    }
    /// <p>Commit message for the updated file, which is shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    pub fn commit_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.commit_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Commit message for the updated file, which is shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    pub fn set_commit_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.commit_message = input;
        self
    }
    /// <p>Commit message for the updated file, which is shown as part of <code>GetPackageVersionHistoryResponse</code>.</p>
    pub fn get_commit_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.commit_message
    }
    /// Consumes the builder and constructs a [`UpdatePackageInput`](crate::operation::update_package::UpdatePackageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_package::UpdatePackageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_package::UpdatePackageInput {
            package_id: self.package_id,
            package_source: self.package_source,
            package_description: self.package_description,
            commit_message: self.commit_message,
        })
    }
}
