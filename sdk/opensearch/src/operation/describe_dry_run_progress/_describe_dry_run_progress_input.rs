// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDryRunProgressInput {
    /// <p>The name of the domain.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the dry run.</p>
    #[doc(hidden)]
    pub dry_run_id: std::option::Option<std::string::String>,
    /// <p>Whether to include the configuration of the dry run in the response. The configuration specifies the updates that you're planning to make on the domain.</p>
    #[doc(hidden)]
    pub load_dry_run_config: std::option::Option<bool>,
}
impl DescribeDryRunProgressInput {
    /// <p>The name of the domain.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The unique identifier of the dry run.</p>
    pub fn dry_run_id(&self) -> std::option::Option<&str> {
        self.dry_run_id.as_deref()
    }
    /// <p>Whether to include the configuration of the dry run in the response. The configuration specifies the updates that you're planning to make on the domain.</p>
    pub fn load_dry_run_config(&self) -> std::option::Option<bool> {
        self.load_dry_run_config
    }
}
impl DescribeDryRunProgressInput {
    /// Creates a new builder-style object to manufacture [`DescribeDryRunProgressInput`](crate::operation::describe_dry_run_progress::DescribeDryRunProgressInput).
    pub fn builder(
    ) -> crate::operation::describe_dry_run_progress::builders::DescribeDryRunProgressInputBuilder
    {
        crate::operation::describe_dry_run_progress::builders::DescribeDryRunProgressInputBuilder::default()
    }
}

/// A builder for [`DescribeDryRunProgressInput`](crate::operation::describe_dry_run_progress::DescribeDryRunProgressInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDryRunProgressInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) dry_run_id: std::option::Option<std::string::String>,
    pub(crate) load_dry_run_config: std::option::Option<bool>,
}
impl DescribeDryRunProgressInputBuilder {
    /// <p>The name of the domain.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The name of the domain.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The unique identifier of the dry run.</p>
    pub fn dry_run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dry_run_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the dry run.</p>
    pub fn set_dry_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dry_run_id = input;
        self
    }
    /// <p>Whether to include the configuration of the dry run in the response. The configuration specifies the updates that you're planning to make on the domain.</p>
    pub fn load_dry_run_config(mut self, input: bool) -> Self {
        self.load_dry_run_config = Some(input);
        self
    }
    /// <p>Whether to include the configuration of the dry run in the response. The configuration specifies the updates that you're planning to make on the domain.</p>
    pub fn set_load_dry_run_config(mut self, input: std::option::Option<bool>) -> Self {
        self.load_dry_run_config = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDryRunProgressInput`](crate::operation::describe_dry_run_progress::DescribeDryRunProgressInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_dry_run_progress::DescribeDryRunProgressInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressInput {
                domain_name: self.domain_name,
                dry_run_id: self.dry_run_id,
                load_dry_run_config: self.load_dry_run_config,
            },
        )
    }
}
