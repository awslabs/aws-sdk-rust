// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeDryRunProgressOutput {
    /// <p>The current status of the dry run, including any validation errors.</p>
    #[doc(hidden)]
    pub dry_run_progress_status: std::option::Option<crate::types::DryRunProgressStatus>,
    /// <p>Details about the changes you're planning to make on the domain.</p>
    #[doc(hidden)]
    pub dry_run_config: std::option::Option<crate::types::DomainStatus>,
    /// <p>The results of the dry run. </p>
    #[doc(hidden)]
    pub dry_run_results: std::option::Option<crate::types::DryRunResults>,
    _request_id: Option<String>,
}
impl DescribeDryRunProgressOutput {
    /// <p>The current status of the dry run, including any validation errors.</p>
    pub fn dry_run_progress_status(
        &self,
    ) -> std::option::Option<&crate::types::DryRunProgressStatus> {
        self.dry_run_progress_status.as_ref()
    }
    /// <p>Details about the changes you're planning to make on the domain.</p>
    pub fn dry_run_config(&self) -> std::option::Option<&crate::types::DomainStatus> {
        self.dry_run_config.as_ref()
    }
    /// <p>The results of the dry run. </p>
    pub fn dry_run_results(&self) -> std::option::Option<&crate::types::DryRunResults> {
        self.dry_run_results.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeDryRunProgressOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDryRunProgressOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDryRunProgressOutput`](crate::operation::describe_dry_run_progress::DescribeDryRunProgressOutput).
    pub fn builder(
    ) -> crate::operation::describe_dry_run_progress::builders::DescribeDryRunProgressOutputBuilder
    {
        crate::operation::describe_dry_run_progress::builders::DescribeDryRunProgressOutputBuilder::default()
    }
}

/// A builder for [`DescribeDryRunProgressOutput`](crate::operation::describe_dry_run_progress::DescribeDryRunProgressOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeDryRunProgressOutputBuilder {
    pub(crate) dry_run_progress_status: std::option::Option<crate::types::DryRunProgressStatus>,
    pub(crate) dry_run_config: std::option::Option<crate::types::DomainStatus>,
    pub(crate) dry_run_results: std::option::Option<crate::types::DryRunResults>,
    _request_id: Option<String>,
}
impl DescribeDryRunProgressOutputBuilder {
    /// <p>The current status of the dry run, including any validation errors.</p>
    pub fn dry_run_progress_status(mut self, input: crate::types::DryRunProgressStatus) -> Self {
        self.dry_run_progress_status = Some(input);
        self
    }
    /// <p>The current status of the dry run, including any validation errors.</p>
    pub fn set_dry_run_progress_status(
        mut self,
        input: std::option::Option<crate::types::DryRunProgressStatus>,
    ) -> Self {
        self.dry_run_progress_status = input;
        self
    }
    /// <p>Details about the changes you're planning to make on the domain.</p>
    pub fn dry_run_config(mut self, input: crate::types::DomainStatus) -> Self {
        self.dry_run_config = Some(input);
        self
    }
    /// <p>Details about the changes you're planning to make on the domain.</p>
    pub fn set_dry_run_config(
        mut self,
        input: std::option::Option<crate::types::DomainStatus>,
    ) -> Self {
        self.dry_run_config = input;
        self
    }
    /// <p>The results of the dry run. </p>
    pub fn dry_run_results(mut self, input: crate::types::DryRunResults) -> Self {
        self.dry_run_results = Some(input);
        self
    }
    /// <p>The results of the dry run. </p>
    pub fn set_dry_run_results(
        mut self,
        input: std::option::Option<crate::types::DryRunResults>,
    ) -> Self {
        self.dry_run_results = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDryRunProgressOutput`](crate::operation::describe_dry_run_progress::DescribeDryRunProgressOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_dry_run_progress::DescribeDryRunProgressOutput {
        crate::operation::describe_dry_run_progress::DescribeDryRunProgressOutput {
            dry_run_progress_status: self.dry_run_progress_status,
            dry_run_config: self.dry_run_config,
            dry_run_results: self.dry_run_results,
            _request_id: self._request_id,
        }
    }
}
