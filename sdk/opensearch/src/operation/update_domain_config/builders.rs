// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_domain_config::_update_domain_config_output::UpdateDomainConfigOutputBuilder;

pub use crate::operation::update_domain_config::_update_domain_config_input::UpdateDomainConfigInputBuilder;

/// Fluent builder constructing a request to `UpdateDomainConfig`.
///
/// <p>Modifies the cluster configuration of the specified Amazon OpenSearch Service domain.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDomainConfigFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_domain_config::builders::UpdateDomainConfigInputBuilder,
}
impl UpdateDomainConfigFluentBuilder {
    /// Creates a new `UpdateDomainConfig`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_domain_config::UpdateDomainConfig,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_domain_config::UpdateDomainConfigError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_domain_config::UpdateDomainConfigOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_domain_config::UpdateDomainConfigError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the domain that you're updating.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain that you're updating.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>Changes that you want to make to the cluster configuration, such as the instance type and number of EC2 instances.</p>
    pub fn cluster_config(mut self, input: crate::types::ClusterConfig) -> Self {
        self.inner = self.inner.cluster_config(input);
        self
    }
    /// <p>Changes that you want to make to the cluster configuration, such as the instance type and number of EC2 instances.</p>
    pub fn set_cluster_config(
        mut self,
        input: std::option::Option<crate::types::ClusterConfig>,
    ) -> Self {
        self.inner = self.inner.set_cluster_config(input);
        self
    }
    /// <p>The type and size of the EBS volume to attach to instances in the domain.</p>
    pub fn ebs_options(mut self, input: crate::types::EbsOptions) -> Self {
        self.inner = self.inner.ebs_options(input);
        self
    }
    /// <p>The type and size of the EBS volume to attach to instances in the domain.</p>
    pub fn set_ebs_options(mut self, input: std::option::Option<crate::types::EbsOptions>) -> Self {
        self.inner = self.inner.set_ebs_options(input);
        self
    }
    /// <p>Option to set the time, in UTC format, for the daily automated snapshot. Default value is <code>0</code> hours. </p>
    pub fn snapshot_options(mut self, input: crate::types::SnapshotOptions) -> Self {
        self.inner = self.inner.snapshot_options(input);
        self
    }
    /// <p>Option to set the time, in UTC format, for the daily automated snapshot. Default value is <code>0</code> hours. </p>
    pub fn set_snapshot_options(
        mut self,
        input: std::option::Option<crate::types::SnapshotOptions>,
    ) -> Self {
        self.inner = self.inner.set_snapshot_options(input);
        self
    }
    /// <p>Options to specify the subnets and security groups for a VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html">Launching your Amazon OpenSearch Service domains using a VPC</a>.</p>
    pub fn vpc_options(mut self, input: crate::types::VpcOptions) -> Self {
        self.inner = self.inner.vpc_options(input);
        self
    }
    /// <p>Options to specify the subnets and security groups for a VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html">Launching your Amazon OpenSearch Service domains using a VPC</a>.</p>
    pub fn set_vpc_options(mut self, input: std::option::Option<crate::types::VpcOptions>) -> Self {
        self.inner = self.inner.set_vpc_options(input);
        self
    }
    /// <p>Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.</p>
    pub fn cognito_options(mut self, input: crate::types::CognitoOptions) -> Self {
        self.inner = self.inner.cognito_options(input);
        self
    }
    /// <p>Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.</p>
    pub fn set_cognito_options(
        mut self,
        input: std::option::Option<crate::types::CognitoOptions>,
    ) -> Self {
        self.inner = self.inner.set_cognito_options(input);
        self
    }
    /// Adds a key-value pair to `AdvancedOptions`.
    ///
    /// To override the contents of this collection use [`set_advanced_options`](Self::set_advanced_options).
    ///
    /// <p>Key-value pairs to specify advanced configuration options. The following key-value pairs are supported:</p>
    /// <ul>
    /// <li> <p> <code>"rest.action.multi.allow_explicit_index": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.</p> </li>
    /// <li> <p> <code>"indices.fielddata.cache.size": "80" </code> - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.</p> </li>
    /// <li> <p> <code>"indices.query.bool.max_clause_count": "1024"</code> - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a <code>TooManyClauses</code> error.</p> </li>
    /// <li> <p> <code>"override_main_response_version": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether the domain reports its version as 7.10 to allow Elasticsearch OSS clients and plugins to continue working with it. Default is false when creating a domain and true when upgrading a domain.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced cluster parameters</a>.</p>
    pub fn advanced_options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.advanced_options(k.into(), v.into());
        self
    }
    /// <p>Key-value pairs to specify advanced configuration options. The following key-value pairs are supported:</p>
    /// <ul>
    /// <li> <p> <code>"rest.action.multi.allow_explicit_index": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.</p> </li>
    /// <li> <p> <code>"indices.fielddata.cache.size": "80" </code> - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.</p> </li>
    /// <li> <p> <code>"indices.query.bool.max_clause_count": "1024"</code> - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a <code>TooManyClauses</code> error.</p> </li>
    /// <li> <p> <code>"override_main_response_version": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether the domain reports its version as 7.10 to allow Elasticsearch OSS clients and plugins to continue working with it. Default is false when creating a domain and true when upgrading a domain.</p> </li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced cluster parameters</a>.</p>
    pub fn set_advanced_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_advanced_options(input);
        self
    }
    /// <p>Identity and Access Management (IAM) access policy as a JSON-formatted string.</p>
    pub fn access_policies(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.access_policies(input.into());
        self
    }
    /// <p>Identity and Access Management (IAM) access policy as a JSON-formatted string.</p>
    pub fn set_access_policies(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_access_policies(input);
        self
    }
    /// Adds a key-value pair to `LogPublishingOptions`.
    ///
    /// To override the contents of this collection use [`set_log_publishing_options`](Self::set_log_publishing_options).
    ///
    /// <p>Options to publish OpenSearch lots to Amazon CloudWatch Logs.</p>
    pub fn log_publishing_options(
        mut self,
        k: crate::types::LogType,
        v: crate::types::LogPublishingOption,
    ) -> Self {
        self.inner = self.inner.log_publishing_options(k, v);
        self
    }
    /// <p>Options to publish OpenSearch lots to Amazon CloudWatch Logs.</p>
    pub fn set_log_publishing_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<crate::types::LogType, crate::types::LogPublishingOption>,
        >,
    ) -> Self {
        self.inner = self.inner.set_log_publishing_options(input);
        self
    }
    /// <p>Encryption at rest options for the domain.</p>
    pub fn encryption_at_rest_options(
        mut self,
        input: crate::types::EncryptionAtRestOptions,
    ) -> Self {
        self.inner = self.inner.encryption_at_rest_options(input);
        self
    }
    /// <p>Encryption at rest options for the domain.</p>
    pub fn set_encryption_at_rest_options(
        mut self,
        input: std::option::Option<crate::types::EncryptionAtRestOptions>,
    ) -> Self {
        self.inner = self.inner.set_encryption_at_rest_options(input);
        self
    }
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    pub fn domain_endpoint_options(mut self, input: crate::types::DomainEndpointOptions) -> Self {
        self.inner = self.inner.domain_endpoint_options(input);
        self
    }
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    pub fn set_domain_endpoint_options(
        mut self,
        input: std::option::Option<crate::types::DomainEndpointOptions>,
    ) -> Self {
        self.inner = self.inner.set_domain_endpoint_options(input);
        self
    }
    /// <p>Node-To-Node Encryption options for the domain.</p>
    pub fn node_to_node_encryption_options(
        mut self,
        input: crate::types::NodeToNodeEncryptionOptions,
    ) -> Self {
        self.inner = self.inner.node_to_node_encryption_options(input);
        self
    }
    /// <p>Node-To-Node Encryption options for the domain.</p>
    pub fn set_node_to_node_encryption_options(
        mut self,
        input: std::option::Option<crate::types::NodeToNodeEncryptionOptions>,
    ) -> Self {
        self.inner = self.inner.set_node_to_node_encryption_options(input);
        self
    }
    /// <p>Options for fine-grained access control.</p>
    pub fn advanced_security_options(
        mut self,
        input: crate::types::AdvancedSecurityOptionsInput,
    ) -> Self {
        self.inner = self.inner.advanced_security_options(input);
        self
    }
    /// <p>Options for fine-grained access control.</p>
    pub fn set_advanced_security_options(
        mut self,
        input: std::option::Option<crate::types::AdvancedSecurityOptionsInput>,
    ) -> Self {
        self.inner = self.inner.set_advanced_security_options(input);
        self
    }
    /// <p>Options for Auto-Tune.</p>
    pub fn auto_tune_options(mut self, input: crate::types::AutoTuneOptions) -> Self {
        self.inner = self.inner.auto_tune_options(input);
        self
    }
    /// <p>Options for Auto-Tune.</p>
    pub fn set_auto_tune_options(
        mut self,
        input: std::option::Option<crate::types::AutoTuneOptions>,
    ) -> Self {
        self.inner = self.inner.set_auto_tune_options(input);
        self
    }
    /// <p>This flag, when set to True, specifies whether the <code>UpdateDomain</code> request should return the results of a dry run analysis without actually applying the change. A dry run determines what type of deployment the update will cause.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>This flag, when set to True, specifies whether the <code>UpdateDomain</code> request should return the results of a dry run analysis without actually applying the change. A dry run determines what type of deployment the update will cause.</p>
    pub fn set_dry_run(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>The type of dry run to perform.</p>
    /// <ul>
    /// <li> <p> <code>Basic</code> only returns the type of deployment (blue/green or dynamic) that the update will cause.</p> </li>
    /// <li> <p> <code>Verbose</code> runs an additional check to validate the changes you're making. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#validation-check">Validating a domain update</a>.</p> </li>
    /// </ul>
    pub fn dry_run_mode(mut self, input: crate::types::DryRunMode) -> Self {
        self.inner = self.inner.dry_run_mode(input);
        self
    }
    /// <p>The type of dry run to perform.</p>
    /// <ul>
    /// <li> <p> <code>Basic</code> only returns the type of deployment (blue/green or dynamic) that the update will cause.</p> </li>
    /// <li> <p> <code>Verbose</code> runs an additional check to validate the changes you're making. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#validation-check">Validating a domain update</a>.</p> </li>
    /// </ul>
    pub fn set_dry_run_mode(
        mut self,
        input: std::option::Option<crate::types::DryRunMode>,
    ) -> Self {
        self.inner = self.inner.set_dry_run_mode(input);
        self
    }
}
