// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_domain_config::_update_domain_config_output::UpdateDomainConfigOutputBuilder;

pub use crate::operation::update_domain_config::_update_domain_config_input::UpdateDomainConfigInputBuilder;

impl crate::operation::update_domain_config::builders::UpdateDomainConfigInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_domain_config::UpdateDomainConfigOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_domain_config::UpdateDomainConfigError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_domain_config();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateDomainConfig`.
///
/// <p>Modifies the cluster configuration of the specified Amazon OpenSearch Service domain.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateDomainConfigFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_domain_config::builders::UpdateDomainConfigInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_domain_config::UpdateDomainConfigOutput,
        crate::operation::update_domain_config::UpdateDomainConfigError,
    > for UpdateDomainConfigFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_domain_config::UpdateDomainConfigOutput,
            crate::operation::update_domain_config::UpdateDomainConfigError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateDomainConfigFluentBuilder {
    /// Creates a new `UpdateDomainConfig`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateDomainConfig as a reference.
    pub fn as_input(&self) -> &crate::operation::update_domain_config::builders::UpdateDomainConfigInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_domain_config::UpdateDomainConfigOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_domain_config::UpdateDomainConfigError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_domain_config::UpdateDomainConfig::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_domain_config::UpdateDomainConfig::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_domain_config::UpdateDomainConfigOutput,
        crate::operation::update_domain_config::UpdateDomainConfigError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the domain that you're updating.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The name of the domain that you're updating.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The name of the domain that you're updating.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_name()
    }
    /// <p>Changes that you want to make to the cluster configuration, such as the instance type and number of EC2 instances.</p>
    pub fn cluster_config(mut self, input: crate::types::ClusterConfig) -> Self {
        self.inner = self.inner.cluster_config(input);
        self
    }
    /// <p>Changes that you want to make to the cluster configuration, such as the instance type and number of EC2 instances.</p>
    pub fn set_cluster_config(mut self, input: ::std::option::Option<crate::types::ClusterConfig>) -> Self {
        self.inner = self.inner.set_cluster_config(input);
        self
    }
    /// <p>Changes that you want to make to the cluster configuration, such as the instance type and number of EC2 instances.</p>
    pub fn get_cluster_config(&self) -> &::std::option::Option<crate::types::ClusterConfig> {
        self.inner.get_cluster_config()
    }
    /// <p>The type and size of the EBS volume to attach to instances in the domain.</p>
    pub fn ebs_options(mut self, input: crate::types::EbsOptions) -> Self {
        self.inner = self.inner.ebs_options(input);
        self
    }
    /// <p>The type and size of the EBS volume to attach to instances in the domain.</p>
    pub fn set_ebs_options(mut self, input: ::std::option::Option<crate::types::EbsOptions>) -> Self {
        self.inner = self.inner.set_ebs_options(input);
        self
    }
    /// <p>The type and size of the EBS volume to attach to instances in the domain.</p>
    pub fn get_ebs_options(&self) -> &::std::option::Option<crate::types::EbsOptions> {
        self.inner.get_ebs_options()
    }
    /// <p>Option to set the time, in UTC format, for the daily automated snapshot. Default value is <code>0</code> hours.</p>
    pub fn snapshot_options(mut self, input: crate::types::SnapshotOptions) -> Self {
        self.inner = self.inner.snapshot_options(input);
        self
    }
    /// <p>Option to set the time, in UTC format, for the daily automated snapshot. Default value is <code>0</code> hours.</p>
    pub fn set_snapshot_options(mut self, input: ::std::option::Option<crate::types::SnapshotOptions>) -> Self {
        self.inner = self.inner.set_snapshot_options(input);
        self
    }
    /// <p>Option to set the time, in UTC format, for the daily automated snapshot. Default value is <code>0</code> hours.</p>
    pub fn get_snapshot_options(&self) -> &::std::option::Option<crate::types::SnapshotOptions> {
        self.inner.get_snapshot_options()
    }
    /// <p>Options to specify the subnets and security groups for a VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html">Launching your Amazon OpenSearch Service domains using a VPC</a>.</p>
    pub fn vpc_options(mut self, input: crate::types::VpcOptions) -> Self {
        self.inner = self.inner.vpc_options(input);
        self
    }
    /// <p>Options to specify the subnets and security groups for a VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html">Launching your Amazon OpenSearch Service domains using a VPC</a>.</p>
    pub fn set_vpc_options(mut self, input: ::std::option::Option<crate::types::VpcOptions>) -> Self {
        self.inner = self.inner.set_vpc_options(input);
        self
    }
    /// <p>Options to specify the subnets and security groups for a VPC endpoint. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html">Launching your Amazon OpenSearch Service domains using a VPC</a>.</p>
    pub fn get_vpc_options(&self) -> &::std::option::Option<crate::types::VpcOptions> {
        self.inner.get_vpc_options()
    }
    /// <p>Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.</p>
    pub fn cognito_options(mut self, input: crate::types::CognitoOptions) -> Self {
        self.inner = self.inner.cognito_options(input);
        self
    }
    /// <p>Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.</p>
    pub fn set_cognito_options(mut self, input: ::std::option::Option<crate::types::CognitoOptions>) -> Self {
        self.inner = self.inner.set_cognito_options(input);
        self
    }
    /// <p>Key-value pairs to configure Amazon Cognito authentication for OpenSearch Dashboards.</p>
    pub fn get_cognito_options(&self) -> &::std::option::Option<crate::types::CognitoOptions> {
        self.inner.get_cognito_options()
    }
    ///
    /// Adds a key-value pair to `AdvancedOptions`.
    ///
    /// To override the contents of this collection use [`set_advanced_options`](Self::set_advanced_options).
    ///
    /// <p>Key-value pairs to specify advanced configuration options. The following key-value pairs are supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>"rest.action.multi.allow_explicit_index": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.</p></li>
    /// <li>
    /// <p><code>"indices.fielddata.cache.size": "80" </code> - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.</p></li>
    /// <li>
    /// <p><code>"indices.query.bool.max_clause_count": "1024"</code> - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a <code>TooManyClauses</code> error.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced cluster parameters</a>.</p>
    pub fn advanced_options(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.advanced_options(k.into(), v.into());
        self
    }
    /// <p>Key-value pairs to specify advanced configuration options. The following key-value pairs are supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>"rest.action.multi.allow_explicit_index": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.</p></li>
    /// <li>
    /// <p><code>"indices.fielddata.cache.size": "80" </code> - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.</p></li>
    /// <li>
    /// <p><code>"indices.query.bool.max_clause_count": "1024"</code> - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a <code>TooManyClauses</code> error.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced cluster parameters</a>.</p>
    pub fn set_advanced_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_advanced_options(input);
        self
    }
    /// <p>Key-value pairs to specify advanced configuration options. The following key-value pairs are supported:</p>
    /// <ul>
    /// <li>
    /// <p><code>"rest.action.multi.allow_explicit_index": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.</p></li>
    /// <li>
    /// <p><code>"indices.fielddata.cache.size": "80" </code> - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.</p></li>
    /// <li>
    /// <p><code>"indices.query.bool.max_clause_count": "1024"</code> - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a <code>TooManyClauses</code> error.</p></li>
    /// </ul>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced cluster parameters</a>.</p>
    pub fn get_advanced_options(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_advanced_options()
    }
    /// <p>Identity and Access Management (IAM) access policy as a JSON-formatted string.</p>
    pub fn access_policies(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.access_policies(input.into());
        self
    }
    /// <p>Identity and Access Management (IAM) access policy as a JSON-formatted string.</p>
    pub fn set_access_policies(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_access_policies(input);
        self
    }
    /// <p>Identity and Access Management (IAM) access policy as a JSON-formatted string.</p>
    pub fn get_access_policies(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_access_policies()
    }
    /// <p>Specify either dual stack or IPv4 as your IP address type. Dual stack allows you to share domain resources across IPv4 and IPv6 address types, and is the recommended option. If your IP address type is currently set to dual stack, you can't change it.</p>
    pub fn ip_address_type(mut self, input: crate::types::IpAddressType) -> Self {
        self.inner = self.inner.ip_address_type(input);
        self
    }
    /// <p>Specify either dual stack or IPv4 as your IP address type. Dual stack allows you to share domain resources across IPv4 and IPv6 address types, and is the recommended option. If your IP address type is currently set to dual stack, you can't change it.</p>
    pub fn set_ip_address_type(mut self, input: ::std::option::Option<crate::types::IpAddressType>) -> Self {
        self.inner = self.inner.set_ip_address_type(input);
        self
    }
    /// <p>Specify either dual stack or IPv4 as your IP address type. Dual stack allows you to share domain resources across IPv4 and IPv6 address types, and is the recommended option. If your IP address type is currently set to dual stack, you can't change it.</p>
    pub fn get_ip_address_type(&self) -> &::std::option::Option<crate::types::IpAddressType> {
        self.inner.get_ip_address_type()
    }
    ///
    /// Adds a key-value pair to `LogPublishingOptions`.
    ///
    /// To override the contents of this collection use [`set_log_publishing_options`](Self::set_log_publishing_options).
    ///
    /// <p>Options to publish OpenSearch logs to Amazon CloudWatch Logs.</p>
    pub fn log_publishing_options(mut self, k: crate::types::LogType, v: crate::types::LogPublishingOption) -> Self {
        self.inner = self.inner.log_publishing_options(k, v);
        self
    }
    /// <p>Options to publish OpenSearch logs to Amazon CloudWatch Logs.</p>
    pub fn set_log_publishing_options(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::LogType, crate::types::LogPublishingOption>>,
    ) -> Self {
        self.inner = self.inner.set_log_publishing_options(input);
        self
    }
    /// <p>Options to publish OpenSearch logs to Amazon CloudWatch Logs.</p>
    pub fn get_log_publishing_options(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::LogType, crate::types::LogPublishingOption>> {
        self.inner.get_log_publishing_options()
    }
    /// <p>Encryption at rest options for the domain.</p>
    pub fn encryption_at_rest_options(mut self, input: crate::types::EncryptionAtRestOptions) -> Self {
        self.inner = self.inner.encryption_at_rest_options(input);
        self
    }
    /// <p>Encryption at rest options for the domain.</p>
    pub fn set_encryption_at_rest_options(mut self, input: ::std::option::Option<crate::types::EncryptionAtRestOptions>) -> Self {
        self.inner = self.inner.set_encryption_at_rest_options(input);
        self
    }
    /// <p>Encryption at rest options for the domain.</p>
    pub fn get_encryption_at_rest_options(&self) -> &::std::option::Option<crate::types::EncryptionAtRestOptions> {
        self.inner.get_encryption_at_rest_options()
    }
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    pub fn domain_endpoint_options(mut self, input: crate::types::DomainEndpointOptions) -> Self {
        self.inner = self.inner.domain_endpoint_options(input);
        self
    }
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    pub fn set_domain_endpoint_options(mut self, input: ::std::option::Option<crate::types::DomainEndpointOptions>) -> Self {
        self.inner = self.inner.set_domain_endpoint_options(input);
        self
    }
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    pub fn get_domain_endpoint_options(&self) -> &::std::option::Option<crate::types::DomainEndpointOptions> {
        self.inner.get_domain_endpoint_options()
    }
    /// <p>Node-to-node encryption options for the domain.</p>
    pub fn node_to_node_encryption_options(mut self, input: crate::types::NodeToNodeEncryptionOptions) -> Self {
        self.inner = self.inner.node_to_node_encryption_options(input);
        self
    }
    /// <p>Node-to-node encryption options for the domain.</p>
    pub fn set_node_to_node_encryption_options(mut self, input: ::std::option::Option<crate::types::NodeToNodeEncryptionOptions>) -> Self {
        self.inner = self.inner.set_node_to_node_encryption_options(input);
        self
    }
    /// <p>Node-to-node encryption options for the domain.</p>
    pub fn get_node_to_node_encryption_options(&self) -> &::std::option::Option<crate::types::NodeToNodeEncryptionOptions> {
        self.inner.get_node_to_node_encryption_options()
    }
    /// <p>Options for fine-grained access control.</p>
    pub fn advanced_security_options(mut self, input: crate::types::AdvancedSecurityOptionsInput) -> Self {
        self.inner = self.inner.advanced_security_options(input);
        self
    }
    /// <p>Options for fine-grained access control.</p>
    pub fn set_advanced_security_options(mut self, input: ::std::option::Option<crate::types::AdvancedSecurityOptionsInput>) -> Self {
        self.inner = self.inner.set_advanced_security_options(input);
        self
    }
    /// <p>Options for fine-grained access control.</p>
    pub fn get_advanced_security_options(&self) -> &::std::option::Option<crate::types::AdvancedSecurityOptionsInput> {
        self.inner.get_advanced_security_options()
    }
    /// <p>Options for Auto-Tune.</p>
    pub fn auto_tune_options(mut self, input: crate::types::AutoTuneOptions) -> Self {
        self.inner = self.inner.auto_tune_options(input);
        self
    }
    /// <p>Options for Auto-Tune.</p>
    pub fn set_auto_tune_options(mut self, input: ::std::option::Option<crate::types::AutoTuneOptions>) -> Self {
        self.inner = self.inner.set_auto_tune_options(input);
        self
    }
    /// <p>Options for Auto-Tune.</p>
    pub fn get_auto_tune_options(&self) -> &::std::option::Option<crate::types::AutoTuneOptions> {
        self.inner.get_auto_tune_options()
    }
    /// <p>This flag, when set to True, specifies whether the <code>UpdateDomain</code> request should return the results of a dry run analysis without actually applying the change. A dry run determines what type of deployment the update will cause.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.inner = self.inner.dry_run(input);
        self
    }
    /// <p>This flag, when set to True, specifies whether the <code>UpdateDomain</code> request should return the results of a dry run analysis without actually applying the change. A dry run determines what type of deployment the update will cause.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_dry_run(input);
        self
    }
    /// <p>This flag, when set to True, specifies whether the <code>UpdateDomain</code> request should return the results of a dry run analysis without actually applying the change. A dry run determines what type of deployment the update will cause.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        self.inner.get_dry_run()
    }
    /// <p>The type of dry run to perform.</p>
    /// <ul>
    /// <li>
    /// <p><code>Basic</code> only returns the type of deployment (blue/green or dynamic) that the update will cause.</p></li>
    /// <li>
    /// <p><code>Verbose</code> runs an additional check to validate the changes you're making. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#validation-check">Validating a domain update</a>.</p></li>
    /// </ul>
    pub fn dry_run_mode(mut self, input: crate::types::DryRunMode) -> Self {
        self.inner = self.inner.dry_run_mode(input);
        self
    }
    /// <p>The type of dry run to perform.</p>
    /// <ul>
    /// <li>
    /// <p><code>Basic</code> only returns the type of deployment (blue/green or dynamic) that the update will cause.</p></li>
    /// <li>
    /// <p><code>Verbose</code> runs an additional check to validate the changes you're making. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#validation-check">Validating a domain update</a>.</p></li>
    /// </ul>
    pub fn set_dry_run_mode(mut self, input: ::std::option::Option<crate::types::DryRunMode>) -> Self {
        self.inner = self.inner.set_dry_run_mode(input);
        self
    }
    /// <p>The type of dry run to perform.</p>
    /// <ul>
    /// <li>
    /// <p><code>Basic</code> only returns the type of deployment (blue/green or dynamic) that the update will cause.</p></li>
    /// <li>
    /// <p><code>Verbose</code> runs an additional check to validate the changes you're making. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/managedomains-configuration-changes#validation-check">Validating a domain update</a>.</p></li>
    /// </ul>
    pub fn get_dry_run_mode(&self) -> &::std::option::Option<crate::types::DryRunMode> {
        self.inner.get_dry_run_mode()
    }
    /// <p>Off-peak window options for the domain.</p>
    pub fn off_peak_window_options(mut self, input: crate::types::OffPeakWindowOptions) -> Self {
        self.inner = self.inner.off_peak_window_options(input);
        self
    }
    /// <p>Off-peak window options for the domain.</p>
    pub fn set_off_peak_window_options(mut self, input: ::std::option::Option<crate::types::OffPeakWindowOptions>) -> Self {
        self.inner = self.inner.set_off_peak_window_options(input);
        self
    }
    /// <p>Off-peak window options for the domain.</p>
    pub fn get_off_peak_window_options(&self) -> &::std::option::Option<crate::types::OffPeakWindowOptions> {
        self.inner.get_off_peak_window_options()
    }
    /// <p>Service software update options for the domain.</p>
    pub fn software_update_options(mut self, input: crate::types::SoftwareUpdateOptions) -> Self {
        self.inner = self.inner.software_update_options(input);
        self
    }
    /// <p>Service software update options for the domain.</p>
    pub fn set_software_update_options(mut self, input: ::std::option::Option<crate::types::SoftwareUpdateOptions>) -> Self {
        self.inner = self.inner.set_software_update_options(input);
        self
    }
    /// <p>Service software update options for the domain.</p>
    pub fn get_software_update_options(&self) -> &::std::option::Option<crate::types::SoftwareUpdateOptions> {
        self.inner.get_software_update_options()
    }
}
