// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The result of a <code>DescribeDomainAutoTunes</code> request.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeDomainAutoTunesOutput {
    /// <p>The list of setting adjustments that Auto-Tune has made to the domain.</p>
    pub auto_tunes: ::std::option::Option<::std::vec::Vec<crate::types::AutoTune>>,
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDomainAutoTunesOutput {
    /// <p>The list of setting adjustments that Auto-Tune has made to the domain.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.auto_tunes.is_none()`.
    pub fn auto_tunes(&self) -> &[crate::types::AutoTune] {
        self.auto_tunes.as_deref().unwrap_or_default()
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeDomainAutoTunesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeDomainAutoTunesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeDomainAutoTunesOutput`](crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesOutput).
    pub fn builder() -> crate::operation::describe_domain_auto_tunes::builders::DescribeDomainAutoTunesOutputBuilder {
        crate::operation::describe_domain_auto_tunes::builders::DescribeDomainAutoTunesOutputBuilder::default()
    }
}

/// A builder for [`DescribeDomainAutoTunesOutput`](crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeDomainAutoTunesOutputBuilder {
    pub(crate) auto_tunes: ::std::option::Option<::std::vec::Vec<crate::types::AutoTune>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeDomainAutoTunesOutputBuilder {
    /// Appends an item to `auto_tunes`.
    ///
    /// To override the contents of this collection use [`set_auto_tunes`](Self::set_auto_tunes).
    ///
    /// <p>The list of setting adjustments that Auto-Tune has made to the domain.</p>
    pub fn auto_tunes(mut self, input: crate::types::AutoTune) -> Self {
        let mut v = self.auto_tunes.unwrap_or_default();
        v.push(input);
        self.auto_tunes = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of setting adjustments that Auto-Tune has made to the domain.</p>
    pub fn set_auto_tunes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AutoTune>>) -> Self {
        self.auto_tunes = input;
        self
    }
    /// <p>The list of setting adjustments that Auto-Tune has made to the domain.</p>
    pub fn get_auto_tunes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AutoTune>> {
        &self.auto_tunes
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>When <code>nextToken</code> is returned, there are more results available. The value of <code>nextToken</code> is a unique pagination token for each page. Make the call again using the returned token to retrieve the next page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeDomainAutoTunesOutput`](crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesOutput).
    pub fn build(self) -> crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesOutput {
        crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesOutput {
            auto_tunes: self.auto_tunes,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
