// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters to the <code>ListDomainMaintenances</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListDomainMaintenancesInput {
    /// <p>The name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the action.</p>
    pub action: ::std::option::Option<crate::types::MaintenanceType>,
    /// <p>The status of the action.</p>
    pub status: ::std::option::Option<crate::types::MaintenanceStatus>,
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>If your initial <code>ListDomainMaintenances</code> operation returns a <code>nextToken</code>, include the returned <code>nextToken</code> in subsequent <code>ListDomainMaintenances</code> operations, which returns results in the next page.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListDomainMaintenancesInput {
    /// <p>The name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The name of the action.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::MaintenanceType> {
        self.action.as_ref()
    }
    /// <p>The status of the action.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MaintenanceStatus> {
        self.status.as_ref()
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>If your initial <code>ListDomainMaintenances</code> operation returns a <code>nextToken</code>, include the returned <code>nextToken</code> in subsequent <code>ListDomainMaintenances</code> operations, which returns results in the next page.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListDomainMaintenancesInput {
    /// Creates a new builder-style object to manufacture [`ListDomainMaintenancesInput`](crate::operation::list_domain_maintenances::ListDomainMaintenancesInput).
    pub fn builder() -> crate::operation::list_domain_maintenances::builders::ListDomainMaintenancesInputBuilder {
        crate::operation::list_domain_maintenances::builders::ListDomainMaintenancesInputBuilder::default()
    }
}

/// A builder for [`ListDomainMaintenancesInput`](crate::operation::list_domain_maintenances::ListDomainMaintenancesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListDomainMaintenancesInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<crate::types::MaintenanceType>,
    pub(crate) status: ::std::option::Option<crate::types::MaintenanceStatus>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListDomainMaintenancesInputBuilder {
    /// <p>The name of the domain.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The name of the action.</p>
    pub fn action(mut self, input: crate::types::MaintenanceType) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the action.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::MaintenanceType>) -> Self {
        self.action = input;
        self
    }
    /// <p>The name of the action.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::MaintenanceType> {
        &self.action
    }
    /// <p>The status of the action.</p>
    pub fn status(mut self, input: crate::types::MaintenanceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MaintenanceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the action.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MaintenanceStatus> {
        &self.status
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An optional parameter that specifies the maximum number of results to return. You can use <code>nextToken</code> to get the next page of results.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>If your initial <code>ListDomainMaintenances</code> operation returns a <code>nextToken</code>, include the returned <code>nextToken</code> in subsequent <code>ListDomainMaintenances</code> operations, which returns results in the next page.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>If your initial <code>ListDomainMaintenances</code> operation returns a <code>nextToken</code>, include the returned <code>nextToken</code> in subsequent <code>ListDomainMaintenances</code> operations, which returns results in the next page.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>If your initial <code>ListDomainMaintenances</code> operation returns a <code>nextToken</code>, include the returned <code>nextToken</code> in subsequent <code>ListDomainMaintenances</code> operations, which returns results in the next page.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListDomainMaintenancesInput`](crate::operation::list_domain_maintenances::ListDomainMaintenancesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_domain_maintenances::ListDomainMaintenancesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_domain_maintenances::ListDomainMaintenancesInput {
            domain_name: self.domain_name,
            action: self.action,
            status: self.status,
            max_results: self.max_results,
            next_token: self.next_token,
        })
    }
}
