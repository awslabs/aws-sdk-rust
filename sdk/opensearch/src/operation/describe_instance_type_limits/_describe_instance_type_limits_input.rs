// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters to the <code>DescribeInstanceTypeLimits</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeInstanceTypeLimitsInput {
    /// <p>The name of the domain. Only specify if you need the limits for an existing domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The OpenSearch Service instance type for which you need limit information.</p>
    pub instance_type: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub engine_version: ::std::option::Option<::std::string::String>,
}
impl DescribeInstanceTypeLimitsInput {
    /// <p>The name of the domain. Only specify if you need the limits for an existing domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The OpenSearch Service instance type for which you need limit information.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&crate::types::OpenSearchPartitionInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub fn engine_version(&self) -> ::std::option::Option<&str> {
        self.engine_version.as_deref()
    }
}
impl DescribeInstanceTypeLimitsInput {
    /// Creates a new builder-style object to manufacture [`DescribeInstanceTypeLimitsInput`](crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsInput).
    pub fn builder() -> crate::operation::describe_instance_type_limits::builders::DescribeInstanceTypeLimitsInputBuilder {
        crate::operation::describe_instance_type_limits::builders::DescribeInstanceTypeLimitsInputBuilder::default()
    }
}

/// A builder for [`DescribeInstanceTypeLimitsInput`](crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeInstanceTypeLimitsInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    pub(crate) engine_version: ::std::option::Option<::std::string::String>,
}
impl DescribeInstanceTypeLimitsInputBuilder {
    /// <p>The name of the domain. Only specify if you need the limits for an existing domain.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain. Only specify if you need the limits for an existing domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name of the domain. Only specify if you need the limits for an existing domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The OpenSearch Service instance type for which you need limit information.</p>
    /// This field is required.
    pub fn instance_type(mut self, input: crate::types::OpenSearchPartitionInstanceType) -> Self {
        self.instance_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The OpenSearch Service instance type for which you need limit information.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<crate::types::OpenSearchPartitionInstanceType>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The OpenSearch Service instance type for which you need limit information.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<crate::types::OpenSearchPartitionInstanceType> {
        &self.instance_type
    }
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    /// This field is required.
    pub fn engine_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.engine_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub fn set_engine_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Version of OpenSearch or Elasticsearch, in the format Elasticsearch_X.Y or OpenSearch_X.Y. Defaults to the latest version of OpenSearch.</p>
    pub fn get_engine_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.engine_version
    }
    /// Consumes the builder and constructs a [`DescribeInstanceTypeLimitsInput`](crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsInput {
            domain_name: self.domain_name,
            instance_type: self.instance_type,
            engine_version: self.engine_version,
        })
    }
}
