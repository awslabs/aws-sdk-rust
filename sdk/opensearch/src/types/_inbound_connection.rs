// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an inbound cross-cluster connection for Amazon OpenSearch Service. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cross-cluster-search.html">Cross-cluster search for Amazon OpenSearch Service</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InboundConnection {
    /// <p>Information about the source (local) domain.</p>
    #[doc(hidden)]
    pub local_domain_info: std::option::Option<crate::types::DomainInformationContainer>,
    /// <p>Information about the destination (remote) domain.</p>
    #[doc(hidden)]
    pub remote_domain_info: std::option::Option<crate::types::DomainInformationContainer>,
    /// <p>The unique identifier of the connection.</p>
    #[doc(hidden)]
    pub connection_id: std::option::Option<std::string::String>,
    /// <p>The current status of the connection.</p>
    #[doc(hidden)]
    pub connection_status: std::option::Option<crate::types::InboundConnectionStatus>,
}
impl InboundConnection {
    /// <p>Information about the source (local) domain.</p>
    pub fn local_domain_info(
        &self,
    ) -> std::option::Option<&crate::types::DomainInformationContainer> {
        self.local_domain_info.as_ref()
    }
    /// <p>Information about the destination (remote) domain.</p>
    pub fn remote_domain_info(
        &self,
    ) -> std::option::Option<&crate::types::DomainInformationContainer> {
        self.remote_domain_info.as_ref()
    }
    /// <p>The unique identifier of the connection.</p>
    pub fn connection_id(&self) -> std::option::Option<&str> {
        self.connection_id.as_deref()
    }
    /// <p>The current status of the connection.</p>
    pub fn connection_status(&self) -> std::option::Option<&crate::types::InboundConnectionStatus> {
        self.connection_status.as_ref()
    }
}
impl InboundConnection {
    /// Creates a new builder-style object to manufacture [`InboundConnection`](crate::types::InboundConnection).
    pub fn builder() -> crate::types::builders::InboundConnectionBuilder {
        crate::types::builders::InboundConnectionBuilder::default()
    }
}

/// A builder for [`InboundConnection`](crate::types::InboundConnection).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InboundConnectionBuilder {
    pub(crate) local_domain_info: std::option::Option<crate::types::DomainInformationContainer>,
    pub(crate) remote_domain_info: std::option::Option<crate::types::DomainInformationContainer>,
    pub(crate) connection_id: std::option::Option<std::string::String>,
    pub(crate) connection_status: std::option::Option<crate::types::InboundConnectionStatus>,
}
impl InboundConnectionBuilder {
    /// <p>Information about the source (local) domain.</p>
    pub fn local_domain_info(mut self, input: crate::types::DomainInformationContainer) -> Self {
        self.local_domain_info = Some(input);
        self
    }
    /// <p>Information about the source (local) domain.</p>
    pub fn set_local_domain_info(
        mut self,
        input: std::option::Option<crate::types::DomainInformationContainer>,
    ) -> Self {
        self.local_domain_info = input;
        self
    }
    /// <p>Information about the destination (remote) domain.</p>
    pub fn remote_domain_info(mut self, input: crate::types::DomainInformationContainer) -> Self {
        self.remote_domain_info = Some(input);
        self
    }
    /// <p>Information about the destination (remote) domain.</p>
    pub fn set_remote_domain_info(
        mut self,
        input: std::option::Option<crate::types::DomainInformationContainer>,
    ) -> Self {
        self.remote_domain_info = input;
        self
    }
    /// <p>The unique identifier of the connection.</p>
    pub fn connection_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the connection.</p>
    pub fn set_connection_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_id = input;
        self
    }
    /// <p>The current status of the connection.</p>
    pub fn connection_status(mut self, input: crate::types::InboundConnectionStatus) -> Self {
        self.connection_status = Some(input);
        self
    }
    /// <p>The current status of the connection.</p>
    pub fn set_connection_status(
        mut self,
        input: std::option::Option<crate::types::InboundConnectionStatus>,
    ) -> Self {
        self.connection_status = input;
        self
    }
    /// Consumes the builder and constructs a [`InboundConnection`](crate::types::InboundConnection).
    pub fn build(self) -> crate::types::InboundConnection {
        crate::types::InboundConnection {
            local_domain_info: self.local_domain_info,
            remote_domain_info: self.remote_domain_info,
            connection_id: self.connection_id,
            connection_status: self.connection_status,
        }
    }
}
