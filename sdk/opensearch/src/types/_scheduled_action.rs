// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a scheduled configuration change for an OpenSearch Service domain. This actions can be a <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html">service software update</a> or a <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html#auto-tune-types">blue/green Auto-Tune enhancement</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ScheduledAction {
    /// <p>The unique identifier of the scheduled action.</p>
    pub id: ::std::string::String,
    /// <p>The type of action that will be taken on the domain.</p>
    pub r#type: crate::types::ActionType,
    /// <p>The severity of the action.</p>
    pub severity: crate::types::ActionSeverity,
    /// <p>The time when the change is scheduled to happen.</p>
    pub scheduled_time: i64,
    /// <p>A description of the action to be taken.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    pub scheduled_by: ::std::option::Option<crate::types::ScheduledBy>,
    /// <p>The current status of the scheduled action.</p>
    pub status: ::std::option::Option<crate::types::ActionStatus>,
    /// <p>Whether the action is required or optional.</p>
    pub mandatory: ::std::option::Option<bool>,
    /// <p>Whether or not the scheduled action is cancellable.</p>
    pub cancellable: ::std::option::Option<bool>,
}
impl ScheduledAction {
    /// <p>The unique identifier of the scheduled action.</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The type of action that will be taken on the domain.</p>
    pub fn r#type(&self) -> &crate::types::ActionType {
        &self.r#type
    }
    /// <p>The severity of the action.</p>
    pub fn severity(&self) -> &crate::types::ActionSeverity {
        &self.severity
    }
    /// <p>The time when the change is scheduled to happen.</p>
    pub fn scheduled_time(&self) -> i64 {
        self.scheduled_time
    }
    /// <p>A description of the action to be taken.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    pub fn scheduled_by(&self) -> ::std::option::Option<&crate::types::ScheduledBy> {
        self.scheduled_by.as_ref()
    }
    /// <p>The current status of the scheduled action.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ActionStatus> {
        self.status.as_ref()
    }
    /// <p>Whether the action is required or optional.</p>
    pub fn mandatory(&self) -> ::std::option::Option<bool> {
        self.mandatory
    }
    /// <p>Whether or not the scheduled action is cancellable.</p>
    pub fn cancellable(&self) -> ::std::option::Option<bool> {
        self.cancellable
    }
}
impl ScheduledAction {
    /// Creates a new builder-style object to manufacture [`ScheduledAction`](crate::types::ScheduledAction).
    pub fn builder() -> crate::types::builders::ScheduledActionBuilder {
        crate::types::builders::ScheduledActionBuilder::default()
    }
}

/// A builder for [`ScheduledAction`](crate::types::ScheduledAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ScheduledActionBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::ActionType>,
    pub(crate) severity: ::std::option::Option<crate::types::ActionSeverity>,
    pub(crate) scheduled_time: ::std::option::Option<i64>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) scheduled_by: ::std::option::Option<crate::types::ScheduledBy>,
    pub(crate) status: ::std::option::Option<crate::types::ActionStatus>,
    pub(crate) mandatory: ::std::option::Option<bool>,
    pub(crate) cancellable: ::std::option::Option<bool>,
}
impl ScheduledActionBuilder {
    /// <p>The unique identifier of the scheduled action.</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the scheduled action.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The unique identifier of the scheduled action.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The type of action that will be taken on the domain.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::ActionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of action that will be taken on the domain.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::ActionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of action that will be taken on the domain.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::ActionType> {
        &self.r#type
    }
    /// <p>The severity of the action.</p>
    /// This field is required.
    pub fn severity(mut self, input: crate::types::ActionSeverity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>The severity of the action.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::ActionSeverity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>The severity of the action.</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::ActionSeverity> {
        &self.severity
    }
    /// <p>The time when the change is scheduled to happen.</p>
    /// This field is required.
    pub fn scheduled_time(mut self, input: i64) -> Self {
        self.scheduled_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the change is scheduled to happen.</p>
    pub fn set_scheduled_time(mut self, input: ::std::option::Option<i64>) -> Self {
        self.scheduled_time = input;
        self
    }
    /// <p>The time when the change is scheduled to happen.</p>
    pub fn get_scheduled_time(&self) -> &::std::option::Option<i64> {
        &self.scheduled_time
    }
    /// <p>A description of the action to be taken.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the action to be taken.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the action to be taken.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    pub fn scheduled_by(mut self, input: crate::types::ScheduledBy) -> Self {
        self.scheduled_by = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    pub fn set_scheduled_by(mut self, input: ::std::option::Option<crate::types::ScheduledBy>) -> Self {
        self.scheduled_by = input;
        self
    }
    /// <p>Whether the action was scheduled manually (<code>CUSTOMER</code>, or by OpenSearch Service automatically (<code>SYSTEM</code>).</p>
    pub fn get_scheduled_by(&self) -> &::std::option::Option<crate::types::ScheduledBy> {
        &self.scheduled_by
    }
    /// <p>The current status of the scheduled action.</p>
    pub fn status(mut self, input: crate::types::ActionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the scheduled action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the scheduled action.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ActionStatus> {
        &self.status
    }
    /// <p>Whether the action is required or optional.</p>
    pub fn mandatory(mut self, input: bool) -> Self {
        self.mandatory = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the action is required or optional.</p>
    pub fn set_mandatory(mut self, input: ::std::option::Option<bool>) -> Self {
        self.mandatory = input;
        self
    }
    /// <p>Whether the action is required or optional.</p>
    pub fn get_mandatory(&self) -> &::std::option::Option<bool> {
        &self.mandatory
    }
    /// <p>Whether or not the scheduled action is cancellable.</p>
    pub fn cancellable(mut self, input: bool) -> Self {
        self.cancellable = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether or not the scheduled action is cancellable.</p>
    pub fn set_cancellable(mut self, input: ::std::option::Option<bool>) -> Self {
        self.cancellable = input;
        self
    }
    /// <p>Whether or not the scheduled action is cancellable.</p>
    pub fn get_cancellable(&self) -> &::std::option::Option<bool> {
        &self.cancellable
    }
    /// Consumes the builder and constructs a [`ScheduledAction`](crate::types::ScheduledAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::ScheduledActionBuilder::id)
    /// - [`r#type`](crate::types::builders::ScheduledActionBuilder::r#type)
    /// - [`severity`](crate::types::builders::ScheduledActionBuilder::severity)
    /// - [`scheduled_time`](crate::types::builders::ScheduledActionBuilder::scheduled_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ScheduledAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ScheduledAction {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building ScheduledAction",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ScheduledAction",
                )
            })?,
            severity: self.severity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "severity",
                    "severity was not specified but it is required when building ScheduledAction",
                )
            })?,
            scheduled_time: self.scheduled_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scheduled_time",
                    "scheduled_time was not specified but it is required when building ScheduledAction",
                )
            })?,
            description: self.description,
            scheduled_by: self.scheduled_by,
            status: self.status,
            mandatory: self.mandatory,
            cancellable: self.cancellable,
        })
    }
}
