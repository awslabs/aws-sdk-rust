// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The connection endpoint for connecting to an Amazon OpenSearch Service domain through a proxy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcEndpoint {
    /// <p>The unique identifier of the endpoint.</p>
    #[doc(hidden)]
    pub vpc_endpoint_id: std::option::Option<std::string::String>,
    /// <p>The creator of the endpoint.</p>
    #[doc(hidden)]
    pub vpc_endpoint_owner: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the domain associated with the endpoint.</p>
    #[doc(hidden)]
    pub domain_arn: std::option::Option<std::string::String>,
    /// <p>Options to specify the subnets and security groups for an Amazon OpenSearch Service VPC endpoint.</p>
    #[doc(hidden)]
    pub vpc_options: std::option::Option<crate::types::VpcDerivedInfo>,
    /// <p>The current status of the endpoint.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::VpcEndpointStatus>,
    /// <p>The connection endpoint ID for connecting to the domain.</p>
    #[doc(hidden)]
    pub endpoint: std::option::Option<std::string::String>,
}
impl VpcEndpoint {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn vpc_endpoint_id(&self) -> std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>The creator of the endpoint.</p>
    pub fn vpc_endpoint_owner(&self) -> std::option::Option<&str> {
        self.vpc_endpoint_owner.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the domain associated with the endpoint.</p>
    pub fn domain_arn(&self) -> std::option::Option<&str> {
        self.domain_arn.as_deref()
    }
    /// <p>Options to specify the subnets and security groups for an Amazon OpenSearch Service VPC endpoint.</p>
    pub fn vpc_options(&self) -> std::option::Option<&crate::types::VpcDerivedInfo> {
        self.vpc_options.as_ref()
    }
    /// <p>The current status of the endpoint.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::VpcEndpointStatus> {
        self.status.as_ref()
    }
    /// <p>The connection endpoint ID for connecting to the domain.</p>
    pub fn endpoint(&self) -> std::option::Option<&str> {
        self.endpoint.as_deref()
    }
}
impl VpcEndpoint {
    /// Creates a new builder-style object to manufacture [`VpcEndpoint`](crate::types::VpcEndpoint).
    pub fn builder() -> crate::types::builders::VpcEndpointBuilder {
        crate::types::builders::VpcEndpointBuilder::default()
    }
}

/// A builder for [`VpcEndpoint`](crate::types::VpcEndpoint).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VpcEndpointBuilder {
    pub(crate) vpc_endpoint_id: std::option::Option<std::string::String>,
    pub(crate) vpc_endpoint_owner: std::option::Option<std::string::String>,
    pub(crate) domain_arn: std::option::Option<std::string::String>,
    pub(crate) vpc_options: std::option::Option<crate::types::VpcDerivedInfo>,
    pub(crate) status: std::option::Option<crate::types::VpcEndpointStatus>,
    pub(crate) endpoint: std::option::Option<std::string::String>,
}
impl VpcEndpointBuilder {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn vpc_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_endpoint_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the endpoint.</p>
    pub fn set_vpc_endpoint_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The creator of the endpoint.</p>
    pub fn vpc_endpoint_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_endpoint_owner = Some(input.into());
        self
    }
    /// <p>The creator of the endpoint.</p>
    pub fn set_vpc_endpoint_owner(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpc_endpoint_owner = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the domain associated with the endpoint.</p>
    pub fn domain_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the domain associated with the endpoint.</p>
    pub fn set_domain_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_arn = input;
        self
    }
    /// <p>Options to specify the subnets and security groups for an Amazon OpenSearch Service VPC endpoint.</p>
    pub fn vpc_options(mut self, input: crate::types::VpcDerivedInfo) -> Self {
        self.vpc_options = Some(input);
        self
    }
    /// <p>Options to specify the subnets and security groups for an Amazon OpenSearch Service VPC endpoint.</p>
    pub fn set_vpc_options(
        mut self,
        input: std::option::Option<crate::types::VpcDerivedInfo>,
    ) -> Self {
        self.vpc_options = input;
        self
    }
    /// <p>The current status of the endpoint.</p>
    pub fn status(mut self, input: crate::types::VpcEndpointStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current status of the endpoint.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::VpcEndpointStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The connection endpoint ID for connecting to the domain.</p>
    pub fn endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.endpoint = Some(input.into());
        self
    }
    /// <p>The connection endpoint ID for connecting to the domain.</p>
    pub fn set_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.endpoint = input;
        self
    }
    /// Consumes the builder and constructs a [`VpcEndpoint`](crate::types::VpcEndpoint).
    pub fn build(self) -> crate::types::VpcEndpoint {
        crate::types::VpcEndpoint {
            vpc_endpoint_id: self.vpc_endpoint_id,
            vpc_endpoint_owner: self.vpc_endpoint_owner,
            domain_arn: self.domain_arn,
            vpc_options: self.vpc_options,
            status: self.status,
            endpoint: self.endpoint,
        }
    }
}
