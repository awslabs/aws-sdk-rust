// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters required to enable Cognito authentication for an OpenSearch Service domain. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html">Configuring Amazon Cognito authentication for OpenSearch Dashboards</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CognitoOptions {
    /// <p>Whether to enable or disable Amazon Cognito authentication for OpenSearch Dashboards.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>The Amazon Cognito user pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Cognito identity pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.</p>
    #[doc(hidden)]
    pub identity_pool_id: std::option::Option<std::string::String>,
    /// <p>The <code>AmazonOpenSearchServiceCognitoAccess</code> role that allows OpenSearch Service to configure your user pool and identity pool.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
}
impl CognitoOptions {
    /// <p>Whether to enable or disable Amazon Cognito authentication for OpenSearch Dashboards.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>The Amazon Cognito user pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The Amazon Cognito identity pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.</p>
    pub fn identity_pool_id(&self) -> std::option::Option<&str> {
        self.identity_pool_id.as_deref()
    }
    /// <p>The <code>AmazonOpenSearchServiceCognitoAccess</code> role that allows OpenSearch Service to configure your user pool and identity pool.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
}
impl CognitoOptions {
    /// Creates a new builder-style object to manufacture [`CognitoOptions`](crate::types::CognitoOptions).
    pub fn builder() -> crate::types::builders::CognitoOptionsBuilder {
        crate::types::builders::CognitoOptionsBuilder::default()
    }
}

/// A builder for [`CognitoOptions`](crate::types::CognitoOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CognitoOptionsBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) identity_pool_id: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
}
impl CognitoOptionsBuilder {
    /// <p>Whether to enable or disable Amazon Cognito authentication for OpenSearch Dashboards.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Whether to enable or disable Amazon Cognito authentication for OpenSearch Dashboards.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The Amazon Cognito user pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The Amazon Cognito user pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The Amazon Cognito identity pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.</p>
    pub fn identity_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.identity_pool_id = Some(input.into());
        self
    }
    /// <p>The Amazon Cognito identity pool ID that you want OpenSearch Service to use for OpenSearch Dashboards authentication.</p>
    pub fn set_identity_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identity_pool_id = input;
        self
    }
    /// <p>The <code>AmazonOpenSearchServiceCognitoAccess</code> role that allows OpenSearch Service to configure your user pool and identity pool.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The <code>AmazonOpenSearchServiceCognitoAccess</code> role that allows OpenSearch Service to configure your user pool and identity pool.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`CognitoOptions`](crate::types::CognitoOptions).
    pub fn build(self) -> crate::types::CognitoOptions {
        crate::types::CognitoOptions {
            enabled: self.enabled,
            user_pool_id: self.user_pool_id,
            identity_pool_id: self.identity_pool_id,
            role_arn: self.role_arn,
        }
    }
}
