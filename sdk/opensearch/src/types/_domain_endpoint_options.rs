// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options to configure a custom endpoint for an OpenSearch Service domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainEndpointOptions {
    /// <p>True to require that all traffic to the domain arrive over HTTPS.</p>
    #[doc(hidden)]
    pub enforce_https: std::option::Option<bool>,
    /// <p>Specify the TLS security policy to apply to the HTTPS endpoint of the domain.</p>
    /// <p> Can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>Policy-Min-TLS-1-0-2019-07:</b> TLS security policy which supports TLS version 1.0 and higher.</p> </li>
    /// <li> <p> <b>Policy-Min-TLS-1-2-2019-07:</b> TLS security policy which supports only TLS version 1.2 </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub tls_security_policy: std::option::Option<crate::types::TlsSecurityPolicy>,
    /// <p>Whether to enable a custom endpoint for the domain.</p>
    #[doc(hidden)]
    pub custom_endpoint_enabled: std::option::Option<bool>,
    /// <p>The fully qualified URL for the custom endpoint.</p>
    #[doc(hidden)]
    pub custom_endpoint: std::option::Option<std::string::String>,
    /// <p>The ARN for your security certificate, managed in Amazon Web Services Certificate Manager (ACM).</p>
    #[doc(hidden)]
    pub custom_endpoint_certificate_arn: std::option::Option<std::string::String>,
}
impl DomainEndpointOptions {
    /// <p>True to require that all traffic to the domain arrive over HTTPS.</p>
    pub fn enforce_https(&self) -> std::option::Option<bool> {
        self.enforce_https
    }
    /// <p>Specify the TLS security policy to apply to the HTTPS endpoint of the domain.</p>
    /// <p> Can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>Policy-Min-TLS-1-0-2019-07:</b> TLS security policy which supports TLS version 1.0 and higher.</p> </li>
    /// <li> <p> <b>Policy-Min-TLS-1-2-2019-07:</b> TLS security policy which supports only TLS version 1.2 </p> </li>
    /// </ul>
    pub fn tls_security_policy(&self) -> std::option::Option<&crate::types::TlsSecurityPolicy> {
        self.tls_security_policy.as_ref()
    }
    /// <p>Whether to enable a custom endpoint for the domain.</p>
    pub fn custom_endpoint_enabled(&self) -> std::option::Option<bool> {
        self.custom_endpoint_enabled
    }
    /// <p>The fully qualified URL for the custom endpoint.</p>
    pub fn custom_endpoint(&self) -> std::option::Option<&str> {
        self.custom_endpoint.as_deref()
    }
    /// <p>The ARN for your security certificate, managed in Amazon Web Services Certificate Manager (ACM).</p>
    pub fn custom_endpoint_certificate_arn(&self) -> std::option::Option<&str> {
        self.custom_endpoint_certificate_arn.as_deref()
    }
}
impl DomainEndpointOptions {
    /// Creates a new builder-style object to manufacture [`DomainEndpointOptions`](crate::types::DomainEndpointOptions).
    pub fn builder() -> crate::types::builders::DomainEndpointOptionsBuilder {
        crate::types::builders::DomainEndpointOptionsBuilder::default()
    }
}

/// A builder for [`DomainEndpointOptions`](crate::types::DomainEndpointOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainEndpointOptionsBuilder {
    pub(crate) enforce_https: std::option::Option<bool>,
    pub(crate) tls_security_policy: std::option::Option<crate::types::TlsSecurityPolicy>,
    pub(crate) custom_endpoint_enabled: std::option::Option<bool>,
    pub(crate) custom_endpoint: std::option::Option<std::string::String>,
    pub(crate) custom_endpoint_certificate_arn: std::option::Option<std::string::String>,
}
impl DomainEndpointOptionsBuilder {
    /// <p>True to require that all traffic to the domain arrive over HTTPS.</p>
    pub fn enforce_https(mut self, input: bool) -> Self {
        self.enforce_https = Some(input);
        self
    }
    /// <p>True to require that all traffic to the domain arrive over HTTPS.</p>
    pub fn set_enforce_https(mut self, input: std::option::Option<bool>) -> Self {
        self.enforce_https = input;
        self
    }
    /// <p>Specify the TLS security policy to apply to the HTTPS endpoint of the domain.</p>
    /// <p> Can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>Policy-Min-TLS-1-0-2019-07:</b> TLS security policy which supports TLS version 1.0 and higher.</p> </li>
    /// <li> <p> <b>Policy-Min-TLS-1-2-2019-07:</b> TLS security policy which supports only TLS version 1.2 </p> </li>
    /// </ul>
    pub fn tls_security_policy(mut self, input: crate::types::TlsSecurityPolicy) -> Self {
        self.tls_security_policy = Some(input);
        self
    }
    /// <p>Specify the TLS security policy to apply to the HTTPS endpoint of the domain.</p>
    /// <p> Can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <b>Policy-Min-TLS-1-0-2019-07:</b> TLS security policy which supports TLS version 1.0 and higher.</p> </li>
    /// <li> <p> <b>Policy-Min-TLS-1-2-2019-07:</b> TLS security policy which supports only TLS version 1.2 </p> </li>
    /// </ul>
    pub fn set_tls_security_policy(
        mut self,
        input: std::option::Option<crate::types::TlsSecurityPolicy>,
    ) -> Self {
        self.tls_security_policy = input;
        self
    }
    /// <p>Whether to enable a custom endpoint for the domain.</p>
    pub fn custom_endpoint_enabled(mut self, input: bool) -> Self {
        self.custom_endpoint_enabled = Some(input);
        self
    }
    /// <p>Whether to enable a custom endpoint for the domain.</p>
    pub fn set_custom_endpoint_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.custom_endpoint_enabled = input;
        self
    }
    /// <p>The fully qualified URL for the custom endpoint.</p>
    pub fn custom_endpoint(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_endpoint = Some(input.into());
        self
    }
    /// <p>The fully qualified URL for the custom endpoint.</p>
    pub fn set_custom_endpoint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.custom_endpoint = input;
        self
    }
    /// <p>The ARN for your security certificate, managed in Amazon Web Services Certificate Manager (ACM).</p>
    pub fn custom_endpoint_certificate_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.custom_endpoint_certificate_arn = Some(input.into());
        self
    }
    /// <p>The ARN for your security certificate, managed in Amazon Web Services Certificate Manager (ACM).</p>
    pub fn set_custom_endpoint_certificate_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.custom_endpoint_certificate_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainEndpointOptions`](crate::types::DomainEndpointOptions).
    pub fn build(self) -> crate::types::DomainEndpointOptions {
        crate::types::DomainEndpointOptions {
            enforce_https: self.enforce_https,
            tls_security_policy: self.tls_security_policy,
            custom_endpoint_enabled: self.custom_endpoint_enabled,
            custom_endpoint: self.custom_endpoint,
            custom_endpoint_certificate_arn: self.custom_endpoint_certificate_arn,
        }
    }
}
