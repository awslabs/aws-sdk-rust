// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the parameters required to enable cold storage for an OpenSearch Service domain. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/cold-storage.html">Cold storage for Amazon OpenSearch Service</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ColdStorageOptions {
    /// <p>Whether to enable or disable cold storage on the domain.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
}
impl ColdStorageOptions {
    /// <p>Whether to enable or disable cold storage on the domain.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
}
impl ColdStorageOptions {
    /// Creates a new builder-style object to manufacture [`ColdStorageOptions`](crate::types::ColdStorageOptions).
    pub fn builder() -> crate::types::builders::ColdStorageOptionsBuilder {
        crate::types::builders::ColdStorageOptionsBuilder::default()
    }
}

/// A builder for [`ColdStorageOptions`](crate::types::ColdStorageOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ColdStorageOptionsBuilder {
    pub(crate) enabled: std::option::Option<bool>,
}
impl ColdStorageOptionsBuilder {
    /// <p>Whether to enable or disable cold storage on the domain.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Whether to enable or disable cold storage on the domain.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`ColdStorageOptions`](crate::types::ColdStorageOptions).
    pub fn build(self) -> crate::types::ColdStorageOptions {
        crate::types::ColdStorageOptions {
            enabled: self.enabled,
        }
    }
}
