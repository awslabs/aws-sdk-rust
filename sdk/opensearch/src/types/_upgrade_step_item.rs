// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a single step of an upgrade or upgrade eligibility check workflow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpgradeStepItem {
    /// <p> One of three steps that an upgrade or upgrade eligibility check goes through: </p>
    /// <ul>
    /// <li> <p>PreUpgradeCheck</p> </li>
    /// <li> <p>Snapshot</p> </li>
    /// <li> <p>Upgrade</p> </li>
    /// </ul>
    pub upgrade_step: ::std::option::Option<crate::types::UpgradeStep>,
    /// <p> The current status of the upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li> <p>In Progress</p> </li>
    /// <li> <p>Succeeded</p> </li>
    /// <li> <p>Succeeded with Issues</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul>
    pub upgrade_step_status: ::std::option::Option<crate::types::UpgradeStatus>,
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    pub issues: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The floating point value representing the progress percentage of a particular step.</p>
    pub progress_percent: ::std::option::Option<f64>,
}
impl UpgradeStepItem {
    /// <p> One of three steps that an upgrade or upgrade eligibility check goes through: </p>
    /// <ul>
    /// <li> <p>PreUpgradeCheck</p> </li>
    /// <li> <p>Snapshot</p> </li>
    /// <li> <p>Upgrade</p> </li>
    /// </ul>
    pub fn upgrade_step(&self) -> ::std::option::Option<&crate::types::UpgradeStep> {
        self.upgrade_step.as_ref()
    }
    /// <p> The current status of the upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li> <p>In Progress</p> </li>
    /// <li> <p>Succeeded</p> </li>
    /// <li> <p>Succeeded with Issues</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul>
    pub fn upgrade_step_status(&self) -> ::std::option::Option<&crate::types::UpgradeStatus> {
        self.upgrade_step_status.as_ref()
    }
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.issues.is_none()`.
    pub fn issues(&self) -> &[::std::string::String] {
        self.issues.as_deref().unwrap_or_default()
    }
    /// <p>The floating point value representing the progress percentage of a particular step.</p>
    pub fn progress_percent(&self) -> ::std::option::Option<f64> {
        self.progress_percent
    }
}
impl UpgradeStepItem {
    /// Creates a new builder-style object to manufacture [`UpgradeStepItem`](crate::types::UpgradeStepItem).
    pub fn builder() -> crate::types::builders::UpgradeStepItemBuilder {
        crate::types::builders::UpgradeStepItemBuilder::default()
    }
}

/// A builder for [`UpgradeStepItem`](crate::types::UpgradeStepItem).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpgradeStepItemBuilder {
    pub(crate) upgrade_step: ::std::option::Option<crate::types::UpgradeStep>,
    pub(crate) upgrade_step_status: ::std::option::Option<crate::types::UpgradeStatus>,
    pub(crate) issues: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) progress_percent: ::std::option::Option<f64>,
}
impl UpgradeStepItemBuilder {
    /// <p> One of three steps that an upgrade or upgrade eligibility check goes through: </p>
    /// <ul>
    /// <li> <p>PreUpgradeCheck</p> </li>
    /// <li> <p>Snapshot</p> </li>
    /// <li> <p>Upgrade</p> </li>
    /// </ul>
    pub fn upgrade_step(mut self, input: crate::types::UpgradeStep) -> Self {
        self.upgrade_step = ::std::option::Option::Some(input);
        self
    }
    /// <p> One of three steps that an upgrade or upgrade eligibility check goes through: </p>
    /// <ul>
    /// <li> <p>PreUpgradeCheck</p> </li>
    /// <li> <p>Snapshot</p> </li>
    /// <li> <p>Upgrade</p> </li>
    /// </ul>
    pub fn set_upgrade_step(mut self, input: ::std::option::Option<crate::types::UpgradeStep>) -> Self {
        self.upgrade_step = input;
        self
    }
    /// <p> One of three steps that an upgrade or upgrade eligibility check goes through: </p>
    /// <ul>
    /// <li> <p>PreUpgradeCheck</p> </li>
    /// <li> <p>Snapshot</p> </li>
    /// <li> <p>Upgrade</p> </li>
    /// </ul>
    pub fn get_upgrade_step(&self) -> &::std::option::Option<crate::types::UpgradeStep> {
        &self.upgrade_step
    }
    /// <p> The current status of the upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li> <p>In Progress</p> </li>
    /// <li> <p>Succeeded</p> </li>
    /// <li> <p>Succeeded with Issues</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul>
    pub fn upgrade_step_status(mut self, input: crate::types::UpgradeStatus) -> Self {
        self.upgrade_step_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The current status of the upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li> <p>In Progress</p> </li>
    /// <li> <p>Succeeded</p> </li>
    /// <li> <p>Succeeded with Issues</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul>
    pub fn set_upgrade_step_status(mut self, input: ::std::option::Option<crate::types::UpgradeStatus>) -> Self {
        self.upgrade_step_status = input;
        self
    }
    /// <p> The current status of the upgrade. The status can take one of the following values: </p>
    /// <ul>
    /// <li> <p>In Progress</p> </li>
    /// <li> <p>Succeeded</p> </li>
    /// <li> <p>Succeeded with Issues</p> </li>
    /// <li> <p>Failed</p> </li>
    /// </ul>
    pub fn get_upgrade_step_status(&self) -> &::std::option::Option<crate::types::UpgradeStatus> {
        &self.upgrade_step_status
    }
    /// Appends an item to `issues`.
    ///
    /// To override the contents of this collection use [`set_issues`](Self::set_issues).
    ///
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    pub fn issues(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.issues.unwrap_or_default();
        v.push(input.into());
        self.issues = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    pub fn set_issues(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.issues = input;
        self
    }
    /// <p>A list of strings containing detailed information about the errors encountered in a particular step.</p>
    pub fn get_issues(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.issues
    }
    /// <p>The floating point value representing the progress percentage of a particular step.</p>
    pub fn progress_percent(mut self, input: f64) -> Self {
        self.progress_percent = ::std::option::Option::Some(input);
        self
    }
    /// <p>The floating point value representing the progress percentage of a particular step.</p>
    pub fn set_progress_percent(mut self, input: ::std::option::Option<f64>) -> Self {
        self.progress_percent = input;
        self
    }
    /// <p>The floating point value representing the progress percentage of a particular step.</p>
    pub fn get_progress_percent(&self) -> &::std::option::Option<f64> {
        &self.progress_percent
    }
    /// Consumes the builder and constructs a [`UpgradeStepItem`](crate::types::UpgradeStepItem).
    pub fn build(self) -> crate::types::UpgradeStepItem {
        crate::types::UpgradeStepItem {
            upgrade_step: self.upgrade_step,
            upgrade_step_status: self.upgrade_step_status,
            issues: self.issues,
            progress_percent: self.progress_percent,
        }
    }
}
