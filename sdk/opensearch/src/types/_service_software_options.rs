// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The current status of the service software for an Amazon OpenSearch Service domain. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/service-software.html">Service software updates in Amazon OpenSearch Service</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceSoftwareOptions {
    /// <p>The current service software version present on the domain.</p>
    #[doc(hidden)]
    pub current_version: std::option::Option<std::string::String>,
    /// <p>The new service software version, if one is available.</p>
    #[doc(hidden)]
    pub new_version: std::option::Option<std::string::String>,
    /// <p>True if you're able to update your service software version. False if you can't update your service software version.</p>
    #[doc(hidden)]
    pub update_available: std::option::Option<bool>,
    /// <p> True if you're able to cancel your service software version update. False if you can't cancel your service software update.</p>
    #[doc(hidden)]
    pub cancellable: std::option::Option<bool>,
    /// <p>The status of your service software update.</p>
    #[doc(hidden)]
    pub update_status: std::option::Option<crate::types::DeploymentStatus>,
    /// <p>A description of the service software update status.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.</p>
    #[doc(hidden)]
    pub automated_update_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>True if a service software is never automatically updated. False if a service software is automatically updated after the automated update date.</p>
    #[doc(hidden)]
    pub optional_deployment: std::option::Option<bool>,
}
impl ServiceSoftwareOptions {
    /// <p>The current service software version present on the domain.</p>
    pub fn current_version(&self) -> std::option::Option<&str> {
        self.current_version.as_deref()
    }
    /// <p>The new service software version, if one is available.</p>
    pub fn new_version(&self) -> std::option::Option<&str> {
        self.new_version.as_deref()
    }
    /// <p>True if you're able to update your service software version. False if you can't update your service software version.</p>
    pub fn update_available(&self) -> std::option::Option<bool> {
        self.update_available
    }
    /// <p> True if you're able to cancel your service software version update. False if you can't cancel your service software update.</p>
    pub fn cancellable(&self) -> std::option::Option<bool> {
        self.cancellable
    }
    /// <p>The status of your service software update.</p>
    pub fn update_status(&self) -> std::option::Option<&crate::types::DeploymentStatus> {
        self.update_status.as_ref()
    }
    /// <p>A description of the service software update status.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.</p>
    pub fn automated_update_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.automated_update_date.as_ref()
    }
    /// <p>True if a service software is never automatically updated. False if a service software is automatically updated after the automated update date.</p>
    pub fn optional_deployment(&self) -> std::option::Option<bool> {
        self.optional_deployment
    }
}
impl ServiceSoftwareOptions {
    /// Creates a new builder-style object to manufacture [`ServiceSoftwareOptions`](crate::types::ServiceSoftwareOptions).
    pub fn builder() -> crate::types::builders::ServiceSoftwareOptionsBuilder {
        crate::types::builders::ServiceSoftwareOptionsBuilder::default()
    }
}

/// A builder for [`ServiceSoftwareOptions`](crate::types::ServiceSoftwareOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceSoftwareOptionsBuilder {
    pub(crate) current_version: std::option::Option<std::string::String>,
    pub(crate) new_version: std::option::Option<std::string::String>,
    pub(crate) update_available: std::option::Option<bool>,
    pub(crate) cancellable: std::option::Option<bool>,
    pub(crate) update_status: std::option::Option<crate::types::DeploymentStatus>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) automated_update_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) optional_deployment: std::option::Option<bool>,
}
impl ServiceSoftwareOptionsBuilder {
    /// <p>The current service software version present on the domain.</p>
    pub fn current_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_version = Some(input.into());
        self
    }
    /// <p>The current service software version present on the domain.</p>
    pub fn set_current_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.current_version = input;
        self
    }
    /// <p>The new service software version, if one is available.</p>
    pub fn new_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.new_version = Some(input.into());
        self
    }
    /// <p>The new service software version, if one is available.</p>
    pub fn set_new_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.new_version = input;
        self
    }
    /// <p>True if you're able to update your service software version. False if you can't update your service software version.</p>
    pub fn update_available(mut self, input: bool) -> Self {
        self.update_available = Some(input);
        self
    }
    /// <p>True if you're able to update your service software version. False if you can't update your service software version.</p>
    pub fn set_update_available(mut self, input: std::option::Option<bool>) -> Self {
        self.update_available = input;
        self
    }
    /// <p> True if you're able to cancel your service software version update. False if you can't cancel your service software update.</p>
    pub fn cancellable(mut self, input: bool) -> Self {
        self.cancellable = Some(input);
        self
    }
    /// <p> True if you're able to cancel your service software version update. False if you can't cancel your service software update.</p>
    pub fn set_cancellable(mut self, input: std::option::Option<bool>) -> Self {
        self.cancellable = input;
        self
    }
    /// <p>The status of your service software update.</p>
    pub fn update_status(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.update_status = Some(input);
        self
    }
    /// <p>The status of your service software update.</p>
    pub fn set_update_status(
        mut self,
        input: std::option::Option<crate::types::DeploymentStatus>,
    ) -> Self {
        self.update_status = input;
        self
    }
    /// <p>A description of the service software update status.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the service software update status.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.</p>
    pub fn automated_update_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.automated_update_date = Some(input);
        self
    }
    /// <p>The timestamp, in Epoch time, until which you can manually request a service software update. After this date, we automatically update your service software.</p>
    pub fn set_automated_update_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.automated_update_date = input;
        self
    }
    /// <p>True if a service software is never automatically updated. False if a service software is automatically updated after the automated update date.</p>
    pub fn optional_deployment(mut self, input: bool) -> Self {
        self.optional_deployment = Some(input);
        self
    }
    /// <p>True if a service software is never automatically updated. False if a service software is automatically updated after the automated update date.</p>
    pub fn set_optional_deployment(mut self, input: std::option::Option<bool>) -> Self {
        self.optional_deployment = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceSoftwareOptions`](crate::types::ServiceSoftwareOptions).
    pub fn build(self) -> crate::types::ServiceSoftwareOptions {
        crate::types::ServiceSoftwareOptions {
            current_version: self.current_version,
            new_version: self.new_version,
            update_available: self.update_available,
            cancellable: self.cancellable,
            update_status: self.update_status,
            description: self.description,
            automated_update_date: self.automated_update_date,
            optional_deployment: self.optional_deployment,
        }
    }
}
