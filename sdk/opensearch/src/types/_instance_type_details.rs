// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lists all instance types and available features for a given OpenSearch or Elasticsearch version.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InstanceTypeDetails {
    /// <p>The instance type.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    /// <p>Whether encryption at rest and node-to-node encryption are supported for the instance type.</p>
    #[doc(hidden)]
    pub encryption_enabled: std::option::Option<bool>,
    /// <p>Whether Amazon Cognito access is supported for the instance type.</p>
    #[doc(hidden)]
    pub cognito_enabled: std::option::Option<bool>,
    /// <p>Whether logging is supported for the instance type.</p>
    #[doc(hidden)]
    pub app_logs_enabled: std::option::Option<bool>,
    /// <p>Whether fine-grained access control is supported for the instance type.</p>
    #[doc(hidden)]
    pub advanced_security_enabled: std::option::Option<bool>,
    /// <p>Whether UltraWarm is supported for the instance type.</p>
    #[doc(hidden)]
    pub warm_enabled: std::option::Option<bool>,
    /// <p>Whether the instance acts as a data node, a dedicated master node, or an UltraWarm node.</p>
    #[doc(hidden)]
    pub instance_role: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl InstanceTypeDetails {
    /// <p>The instance type.</p>
    pub fn instance_type(
        &self,
    ) -> std::option::Option<&crate::types::OpenSearchPartitionInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>Whether encryption at rest and node-to-node encryption are supported for the instance type.</p>
    pub fn encryption_enabled(&self) -> std::option::Option<bool> {
        self.encryption_enabled
    }
    /// <p>Whether Amazon Cognito access is supported for the instance type.</p>
    pub fn cognito_enabled(&self) -> std::option::Option<bool> {
        self.cognito_enabled
    }
    /// <p>Whether logging is supported for the instance type.</p>
    pub fn app_logs_enabled(&self) -> std::option::Option<bool> {
        self.app_logs_enabled
    }
    /// <p>Whether fine-grained access control is supported for the instance type.</p>
    pub fn advanced_security_enabled(&self) -> std::option::Option<bool> {
        self.advanced_security_enabled
    }
    /// <p>Whether UltraWarm is supported for the instance type.</p>
    pub fn warm_enabled(&self) -> std::option::Option<bool> {
        self.warm_enabled
    }
    /// <p>Whether the instance acts as a data node, a dedicated master node, or an UltraWarm node.</p>
    pub fn instance_role(&self) -> std::option::Option<&[std::string::String]> {
        self.instance_role.as_deref()
    }
}
impl InstanceTypeDetails {
    /// Creates a new builder-style object to manufacture [`InstanceTypeDetails`](crate::types::InstanceTypeDetails).
    pub fn builder() -> crate::types::builders::InstanceTypeDetailsBuilder {
        crate::types::builders::InstanceTypeDetailsBuilder::default()
    }
}

/// A builder for [`InstanceTypeDetails`](crate::types::InstanceTypeDetails).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InstanceTypeDetailsBuilder {
    pub(crate) instance_type: std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    pub(crate) encryption_enabled: std::option::Option<bool>,
    pub(crate) cognito_enabled: std::option::Option<bool>,
    pub(crate) app_logs_enabled: std::option::Option<bool>,
    pub(crate) advanced_security_enabled: std::option::Option<bool>,
    pub(crate) warm_enabled: std::option::Option<bool>,
    pub(crate) instance_role: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl InstanceTypeDetailsBuilder {
    /// <p>The instance type.</p>
    pub fn instance_type(mut self, input: crate::types::OpenSearchPartitionInstanceType) -> Self {
        self.instance_type = Some(input);
        self
    }
    /// <p>The instance type.</p>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    ) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>Whether encryption at rest and node-to-node encryption are supported for the instance type.</p>
    pub fn encryption_enabled(mut self, input: bool) -> Self {
        self.encryption_enabled = Some(input);
        self
    }
    /// <p>Whether encryption at rest and node-to-node encryption are supported for the instance type.</p>
    pub fn set_encryption_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.encryption_enabled = input;
        self
    }
    /// <p>Whether Amazon Cognito access is supported for the instance type.</p>
    pub fn cognito_enabled(mut self, input: bool) -> Self {
        self.cognito_enabled = Some(input);
        self
    }
    /// <p>Whether Amazon Cognito access is supported for the instance type.</p>
    pub fn set_cognito_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.cognito_enabled = input;
        self
    }
    /// <p>Whether logging is supported for the instance type.</p>
    pub fn app_logs_enabled(mut self, input: bool) -> Self {
        self.app_logs_enabled = Some(input);
        self
    }
    /// <p>Whether logging is supported for the instance type.</p>
    pub fn set_app_logs_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.app_logs_enabled = input;
        self
    }
    /// <p>Whether fine-grained access control is supported for the instance type.</p>
    pub fn advanced_security_enabled(mut self, input: bool) -> Self {
        self.advanced_security_enabled = Some(input);
        self
    }
    /// <p>Whether fine-grained access control is supported for the instance type.</p>
    pub fn set_advanced_security_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.advanced_security_enabled = input;
        self
    }
    /// <p>Whether UltraWarm is supported for the instance type.</p>
    pub fn warm_enabled(mut self, input: bool) -> Self {
        self.warm_enabled = Some(input);
        self
    }
    /// <p>Whether UltraWarm is supported for the instance type.</p>
    pub fn set_warm_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.warm_enabled = input;
        self
    }
    /// Appends an item to `instance_role`.
    ///
    /// To override the contents of this collection use [`set_instance_role`](Self::set_instance_role).
    ///
    /// <p>Whether the instance acts as a data node, a dedicated master node, or an UltraWarm node.</p>
    pub fn instance_role(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.instance_role.unwrap_or_default();
        v.push(input.into());
        self.instance_role = Some(v);
        self
    }
    /// <p>Whether the instance acts as a data node, a dedicated master node, or an UltraWarm node.</p>
    pub fn set_instance_role(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.instance_role = input;
        self
    }
    /// Consumes the builder and constructs a [`InstanceTypeDetails`](crate::types::InstanceTypeDetails).
    pub fn build(self) -> crate::types::InstanceTypeDetails {
        crate::types::InstanceTypeDetails {
            instance_type: self.instance_type,
            encryption_enabled: self.encryption_enabled,
            cognito_enabled: self.cognito_enabled,
            app_logs_enabled: self.app_logs_enabled,
            advanced_security_enabled: self.advanced_security_enabled,
            warm_enabled: self.warm_enabled,
            instance_role: self.instance_role,
        }
    }
}
