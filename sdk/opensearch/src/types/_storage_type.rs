// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of storage types for an Amazon OpenSearch Service domain that are available for a given intance type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StorageType {
    /// <p>The name of the storage type.</p>
    pub storage_type_name: ::std::option::Option<::std::string::String>,
    /// <p>The storage sub-type, such as <code>gp3</code> or <code>io1</code>.</p>
    pub storage_sub_type_name: ::std::option::Option<::std::string::String>,
    /// <p>Limits that are applicable for the given storage type.</p>
    pub storage_type_limits: ::std::option::Option<::std::vec::Vec<crate::types::StorageTypeLimit>>,
}
impl StorageType {
    /// <p>The name of the storage type.</p>
    pub fn storage_type_name(&self) -> ::std::option::Option<&str> {
        self.storage_type_name.as_deref()
    }
    /// <p>The storage sub-type, such as <code>gp3</code> or <code>io1</code>.</p>
    pub fn storage_sub_type_name(&self) -> ::std::option::Option<&str> {
        self.storage_sub_type_name.as_deref()
    }
    /// <p>Limits that are applicable for the given storage type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.storage_type_limits.is_none()`.
    pub fn storage_type_limits(&self) -> &[crate::types::StorageTypeLimit] {
        self.storage_type_limits.as_deref().unwrap_or_default()
    }
}
impl StorageType {
    /// Creates a new builder-style object to manufacture [`StorageType`](crate::types::StorageType).
    pub fn builder() -> crate::types::builders::StorageTypeBuilder {
        crate::types::builders::StorageTypeBuilder::default()
    }
}

/// A builder for [`StorageType`](crate::types::StorageType).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StorageTypeBuilder {
    pub(crate) storage_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) storage_sub_type_name: ::std::option::Option<::std::string::String>,
    pub(crate) storage_type_limits: ::std::option::Option<::std::vec::Vec<crate::types::StorageTypeLimit>>,
}
impl StorageTypeBuilder {
    /// <p>The name of the storage type.</p>
    pub fn storage_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the storage type.</p>
    pub fn set_storage_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_type_name = input;
        self
    }
    /// <p>The name of the storage type.</p>
    pub fn get_storage_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_type_name
    }
    /// <p>The storage sub-type, such as <code>gp3</code> or <code>io1</code>.</p>
    pub fn storage_sub_type_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_sub_type_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The storage sub-type, such as <code>gp3</code> or <code>io1</code>.</p>
    pub fn set_storage_sub_type_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_sub_type_name = input;
        self
    }
    /// <p>The storage sub-type, such as <code>gp3</code> or <code>io1</code>.</p>
    pub fn get_storage_sub_type_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_sub_type_name
    }
    /// Appends an item to `storage_type_limits`.
    ///
    /// To override the contents of this collection use [`set_storage_type_limits`](Self::set_storage_type_limits).
    ///
    /// <p>Limits that are applicable for the given storage type.</p>
    pub fn storage_type_limits(mut self, input: crate::types::StorageTypeLimit) -> Self {
        let mut v = self.storage_type_limits.unwrap_or_default();
        v.push(input);
        self.storage_type_limits = ::std::option::Option::Some(v);
        self
    }
    /// <p>Limits that are applicable for the given storage type.</p>
    pub fn set_storage_type_limits(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::StorageTypeLimit>>) -> Self {
        self.storage_type_limits = input;
        self
    }
    /// <p>Limits that are applicable for the given storage type.</p>
    pub fn get_storage_type_limits(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::StorageTypeLimit>> {
        &self.storage_type_limits
    }
    /// Consumes the builder and constructs a [`StorageType`](crate::types::StorageType).
    pub fn build(self) -> crate::types::StorageType {
        crate::types::StorageType {
            storage_type_name: self.storage_type_name,
            storage_sub_type_name: self.storage_sub_type_name,
            storage_type_limits: self.storage_type_limits,
        }
    }
}
