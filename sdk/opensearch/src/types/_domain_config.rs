// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the configuration of an OpenSearch Service domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainConfig {
    /// <p>The OpenSearch or Elasticsearch version that the domain is running.</p>
    #[doc(hidden)]
    pub engine_version: std::option::Option<crate::types::VersionStatus>,
    /// <p>Container for the cluster configuration of a the domain.</p>
    #[doc(hidden)]
    pub cluster_config: std::option::Option<crate::types::ClusterConfigStatus>,
    /// <p>Container for EBS options configured for an OpenSearch Service domain.</p>
    #[doc(hidden)]
    pub ebs_options: std::option::Option<crate::types::EbsOptionsStatus>,
    /// <p>Specifies the access policies for the domain.</p>
    #[doc(hidden)]
    pub access_policies: std::option::Option<crate::types::AccessPoliciesStatus>,
    /// <p>DEPRECATED. Container for parameters required to configure automated snapshots of domain indexes.</p>
    #[doc(hidden)]
    pub snapshot_options: std::option::Option<crate::types::SnapshotOptionsStatus>,
    /// <p>The current VPC options for the domain and the status of any updates to their configuration.</p>
    #[doc(hidden)]
    pub vpc_options: std::option::Option<crate::types::VpcDerivedInfoStatus>,
    /// <p>Container for Amazon Cognito options for the domain.</p>
    #[doc(hidden)]
    pub cognito_options: std::option::Option<crate::types::CognitoOptionsStatus>,
    /// <p>Key-value pairs to enable encryption at rest.</p>
    #[doc(hidden)]
    pub encryption_at_rest_options:
        std::option::Option<crate::types::EncryptionAtRestOptionsStatus>,
    /// <p>Whether node-to-node encryption is enabled or disabled.</p>
    #[doc(hidden)]
    pub node_to_node_encryption_options:
        std::option::Option<crate::types::NodeToNodeEncryptionOptionsStatus>,
    /// <p>Key-value pairs to specify advanced configuration options. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced options</a>.</p>
    #[doc(hidden)]
    pub advanced_options: std::option::Option<crate::types::AdvancedOptionsStatus>,
    /// <p>Key-value pairs to configure slow log publishing.</p>
    #[doc(hidden)]
    pub log_publishing_options: std::option::Option<crate::types::LogPublishingOptionsStatus>,
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    #[doc(hidden)]
    pub domain_endpoint_options: std::option::Option<crate::types::DomainEndpointOptionsStatus>,
    /// <p>Container for fine-grained access control settings for the domain.</p>
    #[doc(hidden)]
    pub advanced_security_options: std::option::Option<crate::types::AdvancedSecurityOptionsStatus>,
    /// <p>Container for Auto-Tune settings for the domain.</p>
    #[doc(hidden)]
    pub auto_tune_options: std::option::Option<crate::types::AutoTuneOptionsStatus>,
    /// <p>Container for information about the progress of an existing configuration change.</p>
    #[doc(hidden)]
    pub change_progress_details: std::option::Option<crate::types::ChangeProgressDetails>,
}
impl DomainConfig {
    /// <p>The OpenSearch or Elasticsearch version that the domain is running.</p>
    pub fn engine_version(&self) -> std::option::Option<&crate::types::VersionStatus> {
        self.engine_version.as_ref()
    }
    /// <p>Container for the cluster configuration of a the domain.</p>
    pub fn cluster_config(&self) -> std::option::Option<&crate::types::ClusterConfigStatus> {
        self.cluster_config.as_ref()
    }
    /// <p>Container for EBS options configured for an OpenSearch Service domain.</p>
    pub fn ebs_options(&self) -> std::option::Option<&crate::types::EbsOptionsStatus> {
        self.ebs_options.as_ref()
    }
    /// <p>Specifies the access policies for the domain.</p>
    pub fn access_policies(&self) -> std::option::Option<&crate::types::AccessPoliciesStatus> {
        self.access_policies.as_ref()
    }
    /// <p>DEPRECATED. Container for parameters required to configure automated snapshots of domain indexes.</p>
    pub fn snapshot_options(&self) -> std::option::Option<&crate::types::SnapshotOptionsStatus> {
        self.snapshot_options.as_ref()
    }
    /// <p>The current VPC options for the domain and the status of any updates to their configuration.</p>
    pub fn vpc_options(&self) -> std::option::Option<&crate::types::VpcDerivedInfoStatus> {
        self.vpc_options.as_ref()
    }
    /// <p>Container for Amazon Cognito options for the domain.</p>
    pub fn cognito_options(&self) -> std::option::Option<&crate::types::CognitoOptionsStatus> {
        self.cognito_options.as_ref()
    }
    /// <p>Key-value pairs to enable encryption at rest.</p>
    pub fn encryption_at_rest_options(
        &self,
    ) -> std::option::Option<&crate::types::EncryptionAtRestOptionsStatus> {
        self.encryption_at_rest_options.as_ref()
    }
    /// <p>Whether node-to-node encryption is enabled or disabled.</p>
    pub fn node_to_node_encryption_options(
        &self,
    ) -> std::option::Option<&crate::types::NodeToNodeEncryptionOptionsStatus> {
        self.node_to_node_encryption_options.as_ref()
    }
    /// <p>Key-value pairs to specify advanced configuration options. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced options</a>.</p>
    pub fn advanced_options(&self) -> std::option::Option<&crate::types::AdvancedOptionsStatus> {
        self.advanced_options.as_ref()
    }
    /// <p>Key-value pairs to configure slow log publishing.</p>
    pub fn log_publishing_options(
        &self,
    ) -> std::option::Option<&crate::types::LogPublishingOptionsStatus> {
        self.log_publishing_options.as_ref()
    }
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    pub fn domain_endpoint_options(
        &self,
    ) -> std::option::Option<&crate::types::DomainEndpointOptionsStatus> {
        self.domain_endpoint_options.as_ref()
    }
    /// <p>Container for fine-grained access control settings for the domain.</p>
    pub fn advanced_security_options(
        &self,
    ) -> std::option::Option<&crate::types::AdvancedSecurityOptionsStatus> {
        self.advanced_security_options.as_ref()
    }
    /// <p>Container for Auto-Tune settings for the domain.</p>
    pub fn auto_tune_options(&self) -> std::option::Option<&crate::types::AutoTuneOptionsStatus> {
        self.auto_tune_options.as_ref()
    }
    /// <p>Container for information about the progress of an existing configuration change.</p>
    pub fn change_progress_details(
        &self,
    ) -> std::option::Option<&crate::types::ChangeProgressDetails> {
        self.change_progress_details.as_ref()
    }
}
impl DomainConfig {
    /// Creates a new builder-style object to manufacture [`DomainConfig`](crate::types::DomainConfig).
    pub fn builder() -> crate::types::builders::DomainConfigBuilder {
        crate::types::builders::DomainConfigBuilder::default()
    }
}

/// A builder for [`DomainConfig`](crate::types::DomainConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainConfigBuilder {
    pub(crate) engine_version: std::option::Option<crate::types::VersionStatus>,
    pub(crate) cluster_config: std::option::Option<crate::types::ClusterConfigStatus>,
    pub(crate) ebs_options: std::option::Option<crate::types::EbsOptionsStatus>,
    pub(crate) access_policies: std::option::Option<crate::types::AccessPoliciesStatus>,
    pub(crate) snapshot_options: std::option::Option<crate::types::SnapshotOptionsStatus>,
    pub(crate) vpc_options: std::option::Option<crate::types::VpcDerivedInfoStatus>,
    pub(crate) cognito_options: std::option::Option<crate::types::CognitoOptionsStatus>,
    pub(crate) encryption_at_rest_options:
        std::option::Option<crate::types::EncryptionAtRestOptionsStatus>,
    pub(crate) node_to_node_encryption_options:
        std::option::Option<crate::types::NodeToNodeEncryptionOptionsStatus>,
    pub(crate) advanced_options: std::option::Option<crate::types::AdvancedOptionsStatus>,
    pub(crate) log_publishing_options:
        std::option::Option<crate::types::LogPublishingOptionsStatus>,
    pub(crate) domain_endpoint_options:
        std::option::Option<crate::types::DomainEndpointOptionsStatus>,
    pub(crate) advanced_security_options:
        std::option::Option<crate::types::AdvancedSecurityOptionsStatus>,
    pub(crate) auto_tune_options: std::option::Option<crate::types::AutoTuneOptionsStatus>,
    pub(crate) change_progress_details: std::option::Option<crate::types::ChangeProgressDetails>,
}
impl DomainConfigBuilder {
    /// <p>The OpenSearch or Elasticsearch version that the domain is running.</p>
    pub fn engine_version(mut self, input: crate::types::VersionStatus) -> Self {
        self.engine_version = Some(input);
        self
    }
    /// <p>The OpenSearch or Elasticsearch version that the domain is running.</p>
    pub fn set_engine_version(
        mut self,
        input: std::option::Option<crate::types::VersionStatus>,
    ) -> Self {
        self.engine_version = input;
        self
    }
    /// <p>Container for the cluster configuration of a the domain.</p>
    pub fn cluster_config(mut self, input: crate::types::ClusterConfigStatus) -> Self {
        self.cluster_config = Some(input);
        self
    }
    /// <p>Container for the cluster configuration of a the domain.</p>
    pub fn set_cluster_config(
        mut self,
        input: std::option::Option<crate::types::ClusterConfigStatus>,
    ) -> Self {
        self.cluster_config = input;
        self
    }
    /// <p>Container for EBS options configured for an OpenSearch Service domain.</p>
    pub fn ebs_options(mut self, input: crate::types::EbsOptionsStatus) -> Self {
        self.ebs_options = Some(input);
        self
    }
    /// <p>Container for EBS options configured for an OpenSearch Service domain.</p>
    pub fn set_ebs_options(
        mut self,
        input: std::option::Option<crate::types::EbsOptionsStatus>,
    ) -> Self {
        self.ebs_options = input;
        self
    }
    /// <p>Specifies the access policies for the domain.</p>
    pub fn access_policies(mut self, input: crate::types::AccessPoliciesStatus) -> Self {
        self.access_policies = Some(input);
        self
    }
    /// <p>Specifies the access policies for the domain.</p>
    pub fn set_access_policies(
        mut self,
        input: std::option::Option<crate::types::AccessPoliciesStatus>,
    ) -> Self {
        self.access_policies = input;
        self
    }
    /// <p>DEPRECATED. Container for parameters required to configure automated snapshots of domain indexes.</p>
    pub fn snapshot_options(mut self, input: crate::types::SnapshotOptionsStatus) -> Self {
        self.snapshot_options = Some(input);
        self
    }
    /// <p>DEPRECATED. Container for parameters required to configure automated snapshots of domain indexes.</p>
    pub fn set_snapshot_options(
        mut self,
        input: std::option::Option<crate::types::SnapshotOptionsStatus>,
    ) -> Self {
        self.snapshot_options = input;
        self
    }
    /// <p>The current VPC options for the domain and the status of any updates to their configuration.</p>
    pub fn vpc_options(mut self, input: crate::types::VpcDerivedInfoStatus) -> Self {
        self.vpc_options = Some(input);
        self
    }
    /// <p>The current VPC options for the domain and the status of any updates to their configuration.</p>
    pub fn set_vpc_options(
        mut self,
        input: std::option::Option<crate::types::VpcDerivedInfoStatus>,
    ) -> Self {
        self.vpc_options = input;
        self
    }
    /// <p>Container for Amazon Cognito options for the domain.</p>
    pub fn cognito_options(mut self, input: crate::types::CognitoOptionsStatus) -> Self {
        self.cognito_options = Some(input);
        self
    }
    /// <p>Container for Amazon Cognito options for the domain.</p>
    pub fn set_cognito_options(
        mut self,
        input: std::option::Option<crate::types::CognitoOptionsStatus>,
    ) -> Self {
        self.cognito_options = input;
        self
    }
    /// <p>Key-value pairs to enable encryption at rest.</p>
    pub fn encryption_at_rest_options(
        mut self,
        input: crate::types::EncryptionAtRestOptionsStatus,
    ) -> Self {
        self.encryption_at_rest_options = Some(input);
        self
    }
    /// <p>Key-value pairs to enable encryption at rest.</p>
    pub fn set_encryption_at_rest_options(
        mut self,
        input: std::option::Option<crate::types::EncryptionAtRestOptionsStatus>,
    ) -> Self {
        self.encryption_at_rest_options = input;
        self
    }
    /// <p>Whether node-to-node encryption is enabled or disabled.</p>
    pub fn node_to_node_encryption_options(
        mut self,
        input: crate::types::NodeToNodeEncryptionOptionsStatus,
    ) -> Self {
        self.node_to_node_encryption_options = Some(input);
        self
    }
    /// <p>Whether node-to-node encryption is enabled or disabled.</p>
    pub fn set_node_to_node_encryption_options(
        mut self,
        input: std::option::Option<crate::types::NodeToNodeEncryptionOptionsStatus>,
    ) -> Self {
        self.node_to_node_encryption_options = input;
        self
    }
    /// <p>Key-value pairs to specify advanced configuration options. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced options</a>.</p>
    pub fn advanced_options(mut self, input: crate::types::AdvancedOptionsStatus) -> Self {
        self.advanced_options = Some(input);
        self
    }
    /// <p>Key-value pairs to specify advanced configuration options. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced options</a>.</p>
    pub fn set_advanced_options(
        mut self,
        input: std::option::Option<crate::types::AdvancedOptionsStatus>,
    ) -> Self {
        self.advanced_options = input;
        self
    }
    /// <p>Key-value pairs to configure slow log publishing.</p>
    pub fn log_publishing_options(
        mut self,
        input: crate::types::LogPublishingOptionsStatus,
    ) -> Self {
        self.log_publishing_options = Some(input);
        self
    }
    /// <p>Key-value pairs to configure slow log publishing.</p>
    pub fn set_log_publishing_options(
        mut self,
        input: std::option::Option<crate::types::LogPublishingOptionsStatus>,
    ) -> Self {
        self.log_publishing_options = input;
        self
    }
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    pub fn domain_endpoint_options(
        mut self,
        input: crate::types::DomainEndpointOptionsStatus,
    ) -> Self {
        self.domain_endpoint_options = Some(input);
        self
    }
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all traffic.</p>
    pub fn set_domain_endpoint_options(
        mut self,
        input: std::option::Option<crate::types::DomainEndpointOptionsStatus>,
    ) -> Self {
        self.domain_endpoint_options = input;
        self
    }
    /// <p>Container for fine-grained access control settings for the domain.</p>
    pub fn advanced_security_options(
        mut self,
        input: crate::types::AdvancedSecurityOptionsStatus,
    ) -> Self {
        self.advanced_security_options = Some(input);
        self
    }
    /// <p>Container for fine-grained access control settings for the domain.</p>
    pub fn set_advanced_security_options(
        mut self,
        input: std::option::Option<crate::types::AdvancedSecurityOptionsStatus>,
    ) -> Self {
        self.advanced_security_options = input;
        self
    }
    /// <p>Container for Auto-Tune settings for the domain.</p>
    pub fn auto_tune_options(mut self, input: crate::types::AutoTuneOptionsStatus) -> Self {
        self.auto_tune_options = Some(input);
        self
    }
    /// <p>Container for Auto-Tune settings for the domain.</p>
    pub fn set_auto_tune_options(
        mut self,
        input: std::option::Option<crate::types::AutoTuneOptionsStatus>,
    ) -> Self {
        self.auto_tune_options = input;
        self
    }
    /// <p>Container for information about the progress of an existing configuration change.</p>
    pub fn change_progress_details(mut self, input: crate::types::ChangeProgressDetails) -> Self {
        self.change_progress_details = Some(input);
        self
    }
    /// <p>Container for information about the progress of an existing configuration change.</p>
    pub fn set_change_progress_details(
        mut self,
        input: std::option::Option<crate::types::ChangeProgressDetails>,
    ) -> Self {
        self.change_progress_details = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainConfig`](crate::types::DomainConfig).
    pub fn build(self) -> crate::types::DomainConfig {
        crate::types::DomainConfig {
            engine_version: self.engine_version,
            cluster_config: self.cluster_config,
            ebs_options: self.ebs_options,
            access_policies: self.access_policies,
            snapshot_options: self.snapshot_options,
            vpc_options: self.vpc_options,
            cognito_options: self.cognito_options,
            encryption_at_rest_options: self.encryption_at_rest_options,
            node_to_node_encryption_options: self.node_to_node_encryption_options,
            advanced_options: self.advanced_options,
            log_publishing_options: self.log_publishing_options,
            domain_endpoint_options: self.domain_endpoint_options,
            advanced_security_options: self.advanced_security_options,
            auto_tune_options: self.auto_tune_options,
            change_progress_details: self.change_progress_details,
        }
    }
}
