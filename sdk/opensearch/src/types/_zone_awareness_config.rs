// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The zone awareness configuration for an Amazon OpenSearch Service domain.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ZoneAwarenessConfig {
    /// <p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be equal to number of subnets.</p>
    #[doc(hidden)]
    pub availability_zone_count: std::option::Option<i32>,
}
impl ZoneAwarenessConfig {
    /// <p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be equal to number of subnets.</p>
    pub fn availability_zone_count(&self) -> std::option::Option<i32> {
        self.availability_zone_count
    }
}
impl ZoneAwarenessConfig {
    /// Creates a new builder-style object to manufacture [`ZoneAwarenessConfig`](crate::types::ZoneAwarenessConfig).
    pub fn builder() -> crate::types::builders::ZoneAwarenessConfigBuilder {
        crate::types::builders::ZoneAwarenessConfigBuilder::default()
    }
}

/// A builder for [`ZoneAwarenessConfig`](crate::types::ZoneAwarenessConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ZoneAwarenessConfigBuilder {
    pub(crate) availability_zone_count: std::option::Option<i32>,
}
impl ZoneAwarenessConfigBuilder {
    /// <p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be equal to number of subnets.</p>
    pub fn availability_zone_count(mut self, input: i32) -> Self {
        self.availability_zone_count = Some(input);
        self
    }
    /// <p>If you enabled multiple Availability Zones, this value is the number of zones that you want the domain to use. Valid values are <code>2</code> and <code>3</code>. If your domain is provisioned within a VPC, this value be equal to number of subnets.</p>
    pub fn set_availability_zone_count(mut self, input: std::option::Option<i32>) -> Self {
        self.availability_zone_count = input;
        self
    }
    /// Consumes the builder and constructs a [`ZoneAwarenessConfig`](crate::types::ZoneAwarenessConfig).
    pub fn build(self) -> crate::types::ZoneAwarenessConfig {
        crate::types::ZoneAwarenessConfig {
            availability_zone_count: self.availability_zone_count,
        }
    }
}
