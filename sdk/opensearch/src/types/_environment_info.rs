// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the active domain environment.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EnvironmentInfo {
    /// <p> A list of <code>AvailabilityZoneInfo</code> for the domain.</p>
    pub availability_zone_information: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZoneInfo>>,
}
impl EnvironmentInfo {
    /// <p> A list of <code>AvailabilityZoneInfo</code> for the domain.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.availability_zone_information.is_none()`.
    pub fn availability_zone_information(&self) -> &[crate::types::AvailabilityZoneInfo] {
        self.availability_zone_information.as_deref().unwrap_or_default()
    }
}
impl EnvironmentInfo {
    /// Creates a new builder-style object to manufacture [`EnvironmentInfo`](crate::types::EnvironmentInfo).
    pub fn builder() -> crate::types::builders::EnvironmentInfoBuilder {
        crate::types::builders::EnvironmentInfoBuilder::default()
    }
}

/// A builder for [`EnvironmentInfo`](crate::types::EnvironmentInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EnvironmentInfoBuilder {
    pub(crate) availability_zone_information: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZoneInfo>>,
}
impl EnvironmentInfoBuilder {
    /// Appends an item to `availability_zone_information`.
    ///
    /// To override the contents of this collection use [`set_availability_zone_information`](Self::set_availability_zone_information).
    ///
    /// <p> A list of <code>AvailabilityZoneInfo</code> for the domain.</p>
    pub fn availability_zone_information(mut self, input: crate::types::AvailabilityZoneInfo) -> Self {
        let mut v = self.availability_zone_information.unwrap_or_default();
        v.push(input);
        self.availability_zone_information = ::std::option::Option::Some(v);
        self
    }
    /// <p> A list of <code>AvailabilityZoneInfo</code> for the domain.</p>
    pub fn set_availability_zone_information(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZoneInfo>>) -> Self {
        self.availability_zone_information = input;
        self
    }
    /// <p> A list of <code>AvailabilityZoneInfo</code> for the domain.</p>
    pub fn get_availability_zone_information(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AvailabilityZoneInfo>> {
        &self.availability_zone_information
    }
    /// Consumes the builder and constructs a [`EnvironmentInfo`](crate::types::EnvironmentInfo).
    pub fn build(self) -> crate::types::EnvironmentInfo {
        crate::types::EnvironmentInfo {
            availability_zone_information: self.availability_zone_information,
        }
    }
}
