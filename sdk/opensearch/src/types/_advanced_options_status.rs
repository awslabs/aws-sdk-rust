// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Status of the advanced options for the specified domain. The following options are available: </p>
/// <ul>
/// <li> <p> <code>"rest.action.multi.allow_explicit_index": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether explicit references to indexes are allowed inside the body of HTTP requests. If you want to configure access policies for domain sub-resources, such as specific indexes and domain APIs, you must disable this property. Default is true.</p> </li>
/// <li> <p> <code>"indices.fielddata.cache.size": "80" </code> - Note the use of a string rather than a boolean. Specifies the percentage of heap space allocated to field data. Default is unbounded.</p> </li>
/// <li> <p> <code>"indices.query.bool.max_clause_count": "1024"</code> - Note the use of a string rather than a boolean. Specifies the maximum number of clauses allowed in a Lucene boolean query. Default is 1,024. Queries with more than the permitted number of clauses result in a <code>TooManyClauses</code> error.</p> </li>
/// <li> <p> <code>"override_main_response_version": "true" | "false"</code> - Note the use of a string rather than a boolean. Specifies whether the domain reports its version as 7.10 to allow Elasticsearch OSS clients and plugins to continue working with it. Default is false when creating a domain and true when upgrading a domain.</p> </li>
/// </ul>
/// <p>For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options">Advanced cluster parameters</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdvancedOptionsStatus {
    /// <p>The status of advanced options for the specified domain.</p>
    #[doc(hidden)]
    pub options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The status of advanced options for the specified domain.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::OptionStatus>,
}
impl AdvancedOptionsStatus {
    /// <p>The status of advanced options for the specified domain.</p>
    pub fn options(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.options.as_ref()
    }
    /// <p>The status of advanced options for the specified domain.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::OptionStatus> {
        self.status.as_ref()
    }
}
impl AdvancedOptionsStatus {
    /// Creates a new builder-style object to manufacture [`AdvancedOptionsStatus`](crate::types::AdvancedOptionsStatus).
    pub fn builder() -> crate::types::builders::AdvancedOptionsStatusBuilder {
        crate::types::builders::AdvancedOptionsStatusBuilder::default()
    }
}

/// A builder for [`AdvancedOptionsStatus`](crate::types::AdvancedOptionsStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdvancedOptionsStatusBuilder {
    pub(crate) options:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) status: std::option::Option<crate::types::OptionStatus>,
}
impl AdvancedOptionsStatusBuilder {
    /// Adds a key-value pair to `options`.
    ///
    /// To override the contents of this collection use [`set_options`](Self::set_options).
    ///
    /// <p>The status of advanced options for the specified domain.</p>
    pub fn options(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.options.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.options = Some(hash_map);
        self
    }
    /// <p>The status of advanced options for the specified domain.</p>
    pub fn set_options(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.options = input;
        self
    }
    /// <p>The status of advanced options for the specified domain.</p>
    pub fn status(mut self, input: crate::types::OptionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of advanced options for the specified domain.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::OptionStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`AdvancedOptionsStatus`](crate::types::AdvancedOptionsStatus).
    pub fn build(self) -> crate::types::AdvancedOptionsStatus {
        crate::types::AdvancedOptionsStatus {
            options: self.options,
            status: self.status,
        }
    }
}
