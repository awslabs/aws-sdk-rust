// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Options for enabling and configuring fine-grained access control. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html">Fine-grained access control in Amazon OpenSearch Service</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AdvancedSecurityOptionsInput {
    /// <p>True to enable fine-grained access control.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>True to enable the internal user database.</p>
    #[doc(hidden)]
    pub internal_user_database_enabled: std::option::Option<bool>,
    /// <p>Container for information about the master user.</p>
    #[doc(hidden)]
    pub master_user_options: std::option::Option<crate::types::MasterUserOptions>,
    /// <p>Container for information about the SAML configuration for OpenSearch Dashboards.</p>
    #[doc(hidden)]
    pub saml_options: std::option::Option<crate::types::SamlOptionsInput>,
    /// <p>True to enable a 30-day migration period during which administrators can create role mappings. Only necessary when <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing">enabling fine-grained access control on an existing domain</a>.</p>
    #[doc(hidden)]
    pub anonymous_auth_enabled: std::option::Option<bool>,
}
impl AdvancedSecurityOptionsInput {
    /// <p>True to enable fine-grained access control.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>True to enable the internal user database.</p>
    pub fn internal_user_database_enabled(&self) -> std::option::Option<bool> {
        self.internal_user_database_enabled
    }
    /// <p>Container for information about the master user.</p>
    pub fn master_user_options(&self) -> std::option::Option<&crate::types::MasterUserOptions> {
        self.master_user_options.as_ref()
    }
    /// <p>Container for information about the SAML configuration for OpenSearch Dashboards.</p>
    pub fn saml_options(&self) -> std::option::Option<&crate::types::SamlOptionsInput> {
        self.saml_options.as_ref()
    }
    /// <p>True to enable a 30-day migration period during which administrators can create role mappings. Only necessary when <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing">enabling fine-grained access control on an existing domain</a>.</p>
    pub fn anonymous_auth_enabled(&self) -> std::option::Option<bool> {
        self.anonymous_auth_enabled
    }
}
impl AdvancedSecurityOptionsInput {
    /// Creates a new builder-style object to manufacture [`AdvancedSecurityOptionsInput`](crate::types::AdvancedSecurityOptionsInput).
    pub fn builder() -> crate::types::builders::AdvancedSecurityOptionsInputBuilder {
        crate::types::builders::AdvancedSecurityOptionsInputBuilder::default()
    }
}

/// A builder for [`AdvancedSecurityOptionsInput`](crate::types::AdvancedSecurityOptionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AdvancedSecurityOptionsInputBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) internal_user_database_enabled: std::option::Option<bool>,
    pub(crate) master_user_options: std::option::Option<crate::types::MasterUserOptions>,
    pub(crate) saml_options: std::option::Option<crate::types::SamlOptionsInput>,
    pub(crate) anonymous_auth_enabled: std::option::Option<bool>,
}
impl AdvancedSecurityOptionsInputBuilder {
    /// <p>True to enable fine-grained access control.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>True to enable fine-grained access control.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>True to enable the internal user database.</p>
    pub fn internal_user_database_enabled(mut self, input: bool) -> Self {
        self.internal_user_database_enabled = Some(input);
        self
    }
    /// <p>True to enable the internal user database.</p>
    pub fn set_internal_user_database_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.internal_user_database_enabled = input;
        self
    }
    /// <p>Container for information about the master user.</p>
    pub fn master_user_options(mut self, input: crate::types::MasterUserOptions) -> Self {
        self.master_user_options = Some(input);
        self
    }
    /// <p>Container for information about the master user.</p>
    pub fn set_master_user_options(
        mut self,
        input: std::option::Option<crate::types::MasterUserOptions>,
    ) -> Self {
        self.master_user_options = input;
        self
    }
    /// <p>Container for information about the SAML configuration for OpenSearch Dashboards.</p>
    pub fn saml_options(mut self, input: crate::types::SamlOptionsInput) -> Self {
        self.saml_options = Some(input);
        self
    }
    /// <p>Container for information about the SAML configuration for OpenSearch Dashboards.</p>
    pub fn set_saml_options(
        mut self,
        input: std::option::Option<crate::types::SamlOptionsInput>,
    ) -> Self {
        self.saml_options = input;
        self
    }
    /// <p>True to enable a 30-day migration period during which administrators can create role mappings. Only necessary when <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing">enabling fine-grained access control on an existing domain</a>.</p>
    pub fn anonymous_auth_enabled(mut self, input: bool) -> Self {
        self.anonymous_auth_enabled = Some(input);
        self
    }
    /// <p>True to enable a 30-day migration period during which administrators can create role mappings. Only necessary when <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/fgac.html#fgac-enabling-existing">enabling fine-grained access control on an existing domain</a>.</p>
    pub fn set_anonymous_auth_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.anonymous_auth_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`AdvancedSecurityOptionsInput`](crate::types::AdvancedSecurityOptionsInput).
    pub fn build(self) -> crate::types::AdvancedSecurityOptionsInput {
        crate::types::AdvancedSecurityOptionsInput {
            enabled: self.enabled,
            internal_user_database_enabled: self.internal_user_database_enabled,
            master_user_options: self.master_user_options,
            saml_options: self.saml_options,
            anonymous_auth_enabled: self.anonymous_auth_enabled,
        }
    }
}
