// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Error information when attempting to describe an Amazon OpenSearch Service-managed VPC endpoint.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcEndpointError {
    /// <p>The unique identifier of the endpoint.</p>
    #[doc(hidden)]
    pub vpc_endpoint_id: std::option::Option<std::string::String>,
    /// <p>The code associated with the error.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<crate::types::VpcEndpointErrorCode>,
    /// <p>A message describing the error.</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl VpcEndpointError {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn vpc_endpoint_id(&self) -> std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>The code associated with the error.</p>
    pub fn error_code(&self) -> std::option::Option<&crate::types::VpcEndpointErrorCode> {
        self.error_code.as_ref()
    }
    /// <p>A message describing the error.</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl VpcEndpointError {
    /// Creates a new builder-style object to manufacture [`VpcEndpointError`](crate::types::VpcEndpointError).
    pub fn builder() -> crate::types::builders::VpcEndpointErrorBuilder {
        crate::types::builders::VpcEndpointErrorBuilder::default()
    }
}

/// A builder for [`VpcEndpointError`](crate::types::VpcEndpointError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VpcEndpointErrorBuilder {
    pub(crate) vpc_endpoint_id: std::option::Option<std::string::String>,
    pub(crate) error_code: std::option::Option<crate::types::VpcEndpointErrorCode>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl VpcEndpointErrorBuilder {
    /// <p>The unique identifier of the endpoint.</p>
    pub fn vpc_endpoint_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_endpoint_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the endpoint.</p>
    pub fn set_vpc_endpoint_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>The code associated with the error.</p>
    pub fn error_code(mut self, input: crate::types::VpcEndpointErrorCode) -> Self {
        self.error_code = Some(input);
        self
    }
    /// <p>The code associated with the error.</p>
    pub fn set_error_code(
        mut self,
        input: std::option::Option<crate::types::VpcEndpointErrorCode>,
    ) -> Self {
        self.error_code = input;
        self
    }
    /// <p>A message describing the error.</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>A message describing the error.</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`VpcEndpointError`](crate::types::VpcEndpointError).
    pub fn build(self) -> crate::types::VpcEndpointError {
        crate::types::VpcEndpointError {
            vpc_endpoint_id: self.vpc_endpoint_id,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
