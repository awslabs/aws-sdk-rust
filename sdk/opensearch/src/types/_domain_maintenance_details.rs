// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Container for the domain maintenance details.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DomainMaintenanceDetails {
    /// <p>The ID of the requested action.</p>
    pub maintenance_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the domain.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the action.</p>
    pub action: ::std::option::Option<crate::types::MaintenanceType>,
    /// <p>The ID of the data node.</p>
    pub node_id: ::std::option::Option<::std::string::String>,
    /// <p>The status of the action.</p>
    pub status: ::std::option::Option<crate::types::MaintenanceStatus>,
    /// <p>The status message for the action.</p>
    pub status_message: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the action was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time at which the action was updated.</p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DomainMaintenanceDetails {
    /// <p>The ID of the requested action.</p>
    pub fn maintenance_id(&self) -> ::std::option::Option<&str> {
        self.maintenance_id.as_deref()
    }
    /// <p>The name of the domain.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The name of the action.</p>
    pub fn action(&self) -> ::std::option::Option<&crate::types::MaintenanceType> {
        self.action.as_ref()
    }
    /// <p>The ID of the data node.</p>
    pub fn node_id(&self) -> ::std::option::Option<&str> {
        self.node_id.as_deref()
    }
    /// <p>The status of the action.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::MaintenanceStatus> {
        self.status.as_ref()
    }
    /// <p>The status message for the action.</p>
    pub fn status_message(&self) -> ::std::option::Option<&str> {
        self.status_message.as_deref()
    }
    /// <p>The time at which the action was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time at which the action was updated.</p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl DomainMaintenanceDetails {
    /// Creates a new builder-style object to manufacture [`DomainMaintenanceDetails`](crate::types::DomainMaintenanceDetails).
    pub fn builder() -> crate::types::builders::DomainMaintenanceDetailsBuilder {
        crate::types::builders::DomainMaintenanceDetailsBuilder::default()
    }
}

/// A builder for [`DomainMaintenanceDetails`](crate::types::DomainMaintenanceDetails).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DomainMaintenanceDetailsBuilder {
    pub(crate) maintenance_id: ::std::option::Option<::std::string::String>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) action: ::std::option::Option<crate::types::MaintenanceType>,
    pub(crate) node_id: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::MaintenanceStatus>,
    pub(crate) status_message: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl DomainMaintenanceDetailsBuilder {
    /// <p>The ID of the requested action.</p>
    pub fn maintenance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.maintenance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the requested action.</p>
    pub fn set_maintenance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.maintenance_id = input;
        self
    }
    /// <p>The ID of the requested action.</p>
    pub fn get_maintenance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.maintenance_id
    }
    /// <p>The name of the domain.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the domain.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name of the domain.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The name of the action.</p>
    pub fn action(mut self, input: crate::types::MaintenanceType) -> Self {
        self.action = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the action.</p>
    pub fn set_action(mut self, input: ::std::option::Option<crate::types::MaintenanceType>) -> Self {
        self.action = input;
        self
    }
    /// <p>The name of the action.</p>
    pub fn get_action(&self) -> &::std::option::Option<crate::types::MaintenanceType> {
        &self.action
    }
    /// <p>The ID of the data node.</p>
    pub fn node_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.node_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the data node.</p>
    pub fn set_node_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// <p>The ID of the data node.</p>
    pub fn get_node_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.node_id
    }
    /// <p>The status of the action.</p>
    pub fn status(mut self, input: crate::types::MaintenanceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the action.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::MaintenanceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the action.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::MaintenanceStatus> {
        &self.status
    }
    /// <p>The status message for the action.</p>
    pub fn status_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status message for the action.</p>
    pub fn set_status_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_message = input;
        self
    }
    /// <p>The status message for the action.</p>
    pub fn get_status_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_message
    }
    /// <p>The time at which the action was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the action was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the action was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time at which the action was updated.</p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the action was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time at which the action was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Consumes the builder and constructs a [`DomainMaintenanceDetails`](crate::types::DomainMaintenanceDetails).
    pub fn build(self) -> crate::types::DomainMaintenanceDetails {
        crate::types::DomainMaintenanceDetails {
            maintenance_id: self.maintenance_id,
            domain_name: self.domain_name,
            action: self.action,
            node_id: self.node_id,
            status: self.status,
            status_message: self.status_message,
            created_at: self.created_at,
            updated_at: self.updated_at,
        }
    }
}
