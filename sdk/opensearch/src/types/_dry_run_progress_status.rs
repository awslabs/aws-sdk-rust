// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the progress of a pre-upgrade dry run analysis.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DryRunProgressStatus {
    /// <p>The unique identifier of the dry run.</p>
    pub dry_run_id: ::std::string::String,
    /// <p>The current status of the dry run.</p>
    pub dry_run_status: ::std::string::String,
    /// <p>The timestamp when the dry run was initiated.</p>
    pub creation_date: ::std::string::String,
    /// <p>The timestamp when the dry run was last updated.</p>
    pub update_date: ::std::string::String,
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    pub validation_failures: ::std::option::Option<::std::vec::Vec<crate::types::ValidationFailure>>,
}
impl DryRunProgressStatus {
    /// <p>The unique identifier of the dry run.</p>
    pub fn dry_run_id(&self) -> &str {
        use std::ops::Deref;
        self.dry_run_id.deref()
    }
    /// <p>The current status of the dry run.</p>
    pub fn dry_run_status(&self) -> &str {
        use std::ops::Deref;
        self.dry_run_status.deref()
    }
    /// <p>The timestamp when the dry run was initiated.</p>
    pub fn creation_date(&self) -> &str {
        use std::ops::Deref;
        self.creation_date.deref()
    }
    /// <p>The timestamp when the dry run was last updated.</p>
    pub fn update_date(&self) -> &str {
        use std::ops::Deref;
        self.update_date.deref()
    }
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.validation_failures.is_none()`.
    pub fn validation_failures(&self) -> &[crate::types::ValidationFailure] {
        self.validation_failures.as_deref().unwrap_or_default()
    }
}
impl DryRunProgressStatus {
    /// Creates a new builder-style object to manufacture [`DryRunProgressStatus`](crate::types::DryRunProgressStatus).
    pub fn builder() -> crate::types::builders::DryRunProgressStatusBuilder {
        crate::types::builders::DryRunProgressStatusBuilder::default()
    }
}

/// A builder for [`DryRunProgressStatus`](crate::types::DryRunProgressStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DryRunProgressStatusBuilder {
    pub(crate) dry_run_id: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run_status: ::std::option::Option<::std::string::String>,
    pub(crate) creation_date: ::std::option::Option<::std::string::String>,
    pub(crate) update_date: ::std::option::Option<::std::string::String>,
    pub(crate) validation_failures: ::std::option::Option<::std::vec::Vec<crate::types::ValidationFailure>>,
}
impl DryRunProgressStatusBuilder {
    /// <p>The unique identifier of the dry run.</p>
    /// This field is required.
    pub fn dry_run_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dry_run_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the dry run.</p>
    pub fn set_dry_run_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dry_run_id = input;
        self
    }
    /// <p>The unique identifier of the dry run.</p>
    pub fn get_dry_run_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.dry_run_id
    }
    /// <p>The current status of the dry run.</p>
    /// This field is required.
    pub fn dry_run_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.dry_run_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current status of the dry run.</p>
    pub fn set_dry_run_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.dry_run_status = input;
        self
    }
    /// <p>The current status of the dry run.</p>
    pub fn get_dry_run_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.dry_run_status
    }
    /// <p>The timestamp when the dry run was initiated.</p>
    /// This field is required.
    pub fn creation_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.creation_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when the dry run was initiated.</p>
    pub fn set_creation_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The timestamp when the dry run was initiated.</p>
    pub fn get_creation_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.creation_date
    }
    /// <p>The timestamp when the dry run was last updated.</p>
    /// This field is required.
    pub fn update_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.update_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp when the dry run was last updated.</p>
    pub fn set_update_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.update_date = input;
        self
    }
    /// <p>The timestamp when the dry run was last updated.</p>
    pub fn get_update_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.update_date
    }
    /// Appends an item to `validation_failures`.
    ///
    /// To override the contents of this collection use [`set_validation_failures`](Self::set_validation_failures).
    ///
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    pub fn validation_failures(mut self, input: crate::types::ValidationFailure) -> Self {
        let mut v = self.validation_failures.unwrap_or_default();
        v.push(input);
        self.validation_failures = ::std::option::Option::Some(v);
        self
    }
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    pub fn set_validation_failures(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ValidationFailure>>) -> Self {
        self.validation_failures = input;
        self
    }
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    pub fn get_validation_failures(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ValidationFailure>> {
        &self.validation_failures
    }
    /// Consumes the builder and constructs a [`DryRunProgressStatus`](crate::types::DryRunProgressStatus).
    /// This method will fail if any of the following fields are not set:
    /// - [`dry_run_id`](crate::types::builders::DryRunProgressStatusBuilder::dry_run_id)
    /// - [`dry_run_status`](crate::types::builders::DryRunProgressStatusBuilder::dry_run_status)
    /// - [`creation_date`](crate::types::builders::DryRunProgressStatusBuilder::creation_date)
    /// - [`update_date`](crate::types::builders::DryRunProgressStatusBuilder::update_date)
    pub fn build(self) -> ::std::result::Result<crate::types::DryRunProgressStatus, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DryRunProgressStatus {
            dry_run_id: self.dry_run_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dry_run_id",
                    "dry_run_id was not specified but it is required when building DryRunProgressStatus",
                )
            })?,
            dry_run_status: self.dry_run_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "dry_run_status",
                    "dry_run_status was not specified but it is required when building DryRunProgressStatus",
                )
            })?,
            creation_date: self.creation_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_date",
                    "creation_date was not specified but it is required when building DryRunProgressStatus",
                )
            })?,
            update_date: self.update_date.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_date",
                    "update_date was not specified but it is required when building DryRunProgressStatus",
                )
            })?,
            validation_failures: self.validation_failures,
        })
    }
}
