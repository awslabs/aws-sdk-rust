// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the progress of a pre-upgrade dry run analysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DryRunProgressStatus {
    /// <p>The unique identifier of the dry run.</p>
    #[doc(hidden)]
    pub dry_run_id: std::option::Option<std::string::String>,
    /// <p>The current status of the dry run.</p>
    #[doc(hidden)]
    pub dry_run_status: std::option::Option<std::string::String>,
    /// <p>The timestamp when the dry run was initiated.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<std::string::String>,
    /// <p>The timestamp when the dry run was last updated.</p>
    #[doc(hidden)]
    pub update_date: std::option::Option<std::string::String>,
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    #[doc(hidden)]
    pub validation_failures: std::option::Option<std::vec::Vec<crate::types::ValidationFailure>>,
}
impl DryRunProgressStatus {
    /// <p>The unique identifier of the dry run.</p>
    pub fn dry_run_id(&self) -> std::option::Option<&str> {
        self.dry_run_id.as_deref()
    }
    /// <p>The current status of the dry run.</p>
    pub fn dry_run_status(&self) -> std::option::Option<&str> {
        self.dry_run_status.as_deref()
    }
    /// <p>The timestamp when the dry run was initiated.</p>
    pub fn creation_date(&self) -> std::option::Option<&str> {
        self.creation_date.as_deref()
    }
    /// <p>The timestamp when the dry run was last updated.</p>
    pub fn update_date(&self) -> std::option::Option<&str> {
        self.update_date.as_deref()
    }
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    pub fn validation_failures(&self) -> std::option::Option<&[crate::types::ValidationFailure]> {
        self.validation_failures.as_deref()
    }
}
impl DryRunProgressStatus {
    /// Creates a new builder-style object to manufacture [`DryRunProgressStatus`](crate::types::DryRunProgressStatus).
    pub fn builder() -> crate::types::builders::DryRunProgressStatusBuilder {
        crate::types::builders::DryRunProgressStatusBuilder::default()
    }
}

/// A builder for [`DryRunProgressStatus`](crate::types::DryRunProgressStatus).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DryRunProgressStatusBuilder {
    pub(crate) dry_run_id: std::option::Option<std::string::String>,
    pub(crate) dry_run_status: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<std::string::String>,
    pub(crate) update_date: std::option::Option<std::string::String>,
    pub(crate) validation_failures:
        std::option::Option<std::vec::Vec<crate::types::ValidationFailure>>,
}
impl DryRunProgressStatusBuilder {
    /// <p>The unique identifier of the dry run.</p>
    pub fn dry_run_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.dry_run_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the dry run.</p>
    pub fn set_dry_run_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dry_run_id = input;
        self
    }
    /// <p>The current status of the dry run.</p>
    pub fn dry_run_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.dry_run_status = Some(input.into());
        self
    }
    /// <p>The current status of the dry run.</p>
    pub fn set_dry_run_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.dry_run_status = input;
        self
    }
    /// <p>The timestamp when the dry run was initiated.</p>
    pub fn creation_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.creation_date = Some(input.into());
        self
    }
    /// <p>The timestamp when the dry run was initiated.</p>
    pub fn set_creation_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The timestamp when the dry run was last updated.</p>
    pub fn update_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.update_date = Some(input.into());
        self
    }
    /// <p>The timestamp when the dry run was last updated.</p>
    pub fn set_update_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.update_date = input;
        self
    }
    /// Appends an item to `validation_failures`.
    ///
    /// To override the contents of this collection use [`set_validation_failures`](Self::set_validation_failures).
    ///
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    pub fn validation_failures(mut self, input: crate::types::ValidationFailure) -> Self {
        let mut v = self.validation_failures.unwrap_or_default();
        v.push(input);
        self.validation_failures = Some(v);
        self
    }
    /// <p>Any validation failures that occurred as a result of the dry run.</p>
    pub fn set_validation_failures(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ValidationFailure>>,
    ) -> Self {
        self.validation_failures = input;
        self
    }
    /// Consumes the builder and constructs a [`DryRunProgressStatus`](crate::types::DryRunProgressStatus).
    pub fn build(self) -> crate::types::DryRunProgressStatus {
        crate::types::DryRunProgressStatus {
            dry_run_id: self.dry_run_id,
            dry_run_status: self.dry_run_status,
            creation_date: self.creation_date,
            update_date: self.update_date,
            validation_failures: self.validation_failures,
        }
    }
}
