// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Auto-Tune settings when updating a domain. For more information, see <a href="https://docs.aws.amazon.com/opensearch-service/latest/developerguide/auto-tune.html">Auto-Tune for Amazon OpenSearch Service</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutoTuneOptions {
    /// <p>Whether Auto-Tune is enabled or disabled.</p>
    #[doc(hidden)]
    pub desired_state: std::option::Option<crate::types::AutoTuneDesiredState>,
    /// <p>When disabling Auto-Tune, specify <code>NO_ROLLBACK</code> to retain all prior Auto-Tune settings or <code>DEFAULT_ROLLBACK</code> to revert to the OpenSearch Service defaults. If you specify <code>DEFAULT_ROLLBACK</code>, you must include a <code>MaintenanceSchedule</code> in the request. Otherwise, OpenSearch Service is unable to perform the rollback.</p>
    #[doc(hidden)]
    pub rollback_on_disable: std::option::Option<crate::types::RollbackOnDisable>,
    /// <p>A list of maintenance schedules during which Auto-Tune can deploy changes.</p>
    #[doc(hidden)]
    pub maintenance_schedules:
        std::option::Option<std::vec::Vec<crate::types::AutoTuneMaintenanceSchedule>>,
}
impl AutoTuneOptions {
    /// <p>Whether Auto-Tune is enabled or disabled.</p>
    pub fn desired_state(&self) -> std::option::Option<&crate::types::AutoTuneDesiredState> {
        self.desired_state.as_ref()
    }
    /// <p>When disabling Auto-Tune, specify <code>NO_ROLLBACK</code> to retain all prior Auto-Tune settings or <code>DEFAULT_ROLLBACK</code> to revert to the OpenSearch Service defaults. If you specify <code>DEFAULT_ROLLBACK</code>, you must include a <code>MaintenanceSchedule</code> in the request. Otherwise, OpenSearch Service is unable to perform the rollback.</p>
    pub fn rollback_on_disable(&self) -> std::option::Option<&crate::types::RollbackOnDisable> {
        self.rollback_on_disable.as_ref()
    }
    /// <p>A list of maintenance schedules during which Auto-Tune can deploy changes.</p>
    pub fn maintenance_schedules(
        &self,
    ) -> std::option::Option<&[crate::types::AutoTuneMaintenanceSchedule]> {
        self.maintenance_schedules.as_deref()
    }
}
impl AutoTuneOptions {
    /// Creates a new builder-style object to manufacture [`AutoTuneOptions`](crate::types::AutoTuneOptions).
    pub fn builder() -> crate::types::builders::AutoTuneOptionsBuilder {
        crate::types::builders::AutoTuneOptionsBuilder::default()
    }
}

/// A builder for [`AutoTuneOptions`](crate::types::AutoTuneOptions).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutoTuneOptionsBuilder {
    pub(crate) desired_state: std::option::Option<crate::types::AutoTuneDesiredState>,
    pub(crate) rollback_on_disable: std::option::Option<crate::types::RollbackOnDisable>,
    pub(crate) maintenance_schedules:
        std::option::Option<std::vec::Vec<crate::types::AutoTuneMaintenanceSchedule>>,
}
impl AutoTuneOptionsBuilder {
    /// <p>Whether Auto-Tune is enabled or disabled.</p>
    pub fn desired_state(mut self, input: crate::types::AutoTuneDesiredState) -> Self {
        self.desired_state = Some(input);
        self
    }
    /// <p>Whether Auto-Tune is enabled or disabled.</p>
    pub fn set_desired_state(
        mut self,
        input: std::option::Option<crate::types::AutoTuneDesiredState>,
    ) -> Self {
        self.desired_state = input;
        self
    }
    /// <p>When disabling Auto-Tune, specify <code>NO_ROLLBACK</code> to retain all prior Auto-Tune settings or <code>DEFAULT_ROLLBACK</code> to revert to the OpenSearch Service defaults. If you specify <code>DEFAULT_ROLLBACK</code>, you must include a <code>MaintenanceSchedule</code> in the request. Otherwise, OpenSearch Service is unable to perform the rollback.</p>
    pub fn rollback_on_disable(mut self, input: crate::types::RollbackOnDisable) -> Self {
        self.rollback_on_disable = Some(input);
        self
    }
    /// <p>When disabling Auto-Tune, specify <code>NO_ROLLBACK</code> to retain all prior Auto-Tune settings or <code>DEFAULT_ROLLBACK</code> to revert to the OpenSearch Service defaults. If you specify <code>DEFAULT_ROLLBACK</code>, you must include a <code>MaintenanceSchedule</code> in the request. Otherwise, OpenSearch Service is unable to perform the rollback.</p>
    pub fn set_rollback_on_disable(
        mut self,
        input: std::option::Option<crate::types::RollbackOnDisable>,
    ) -> Self {
        self.rollback_on_disable = input;
        self
    }
    /// Appends an item to `maintenance_schedules`.
    ///
    /// To override the contents of this collection use [`set_maintenance_schedules`](Self::set_maintenance_schedules).
    ///
    /// <p>A list of maintenance schedules during which Auto-Tune can deploy changes.</p>
    pub fn maintenance_schedules(
        mut self,
        input: crate::types::AutoTuneMaintenanceSchedule,
    ) -> Self {
        let mut v = self.maintenance_schedules.unwrap_or_default();
        v.push(input);
        self.maintenance_schedules = Some(v);
        self
    }
    /// <p>A list of maintenance schedules during which Auto-Tune can deploy changes.</p>
    pub fn set_maintenance_schedules(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AutoTuneMaintenanceSchedule>>,
    ) -> Self {
        self.maintenance_schedules = input;
        self
    }
    /// Consumes the builder and constructs a [`AutoTuneOptions`](crate::types::AutoTuneOptions).
    pub fn build(self) -> crate::types::AutoTuneOptions {
        crate::types::AutoTuneOptions {
            desired_state: self.desired_state,
            rollback_on_disable: self.rollback_on_disable,
            maintenance_schedules: self.maintenance_schedules,
        }
    }
}
