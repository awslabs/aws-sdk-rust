// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of an OpenSearch Reserved Instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReservedInstance {
    /// <p>The customer-specified identifier to track this reservation.</p>
    #[doc(hidden)]
    pub reservation_name: std::option::Option<std::string::String>,
    /// <p>The unique identifier for the reservation.</p>
    #[doc(hidden)]
    pub reserved_instance_id: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the billing subscription.</p>
    #[doc(hidden)]
    pub billing_subscription_id: std::option::Option<i64>,
    /// <p>The unique identifier of the Reserved Instance offering.</p>
    #[doc(hidden)]
    pub reserved_instance_offering_id: std::option::Option<std::string::String>,
    /// <p>The OpenSearch instance type offered by theReserved Instance offering.</p>
    #[doc(hidden)]
    pub instance_type: std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    /// <p>The date and time when the reservation was purchased.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The duration, in seconds, for which the OpenSearch instance is reserved.</p>
    #[doc(hidden)]
    pub duration: i32,
    /// <p>The upfront fixed charge you will paid to purchase the specific Reserved Instance offering.</p>
    #[doc(hidden)]
    pub fixed_price: std::option::Option<f64>,
    /// <p>The hourly rate at which you're charged for the domain using this Reserved Instance.</p>
    #[doc(hidden)]
    pub usage_price: std::option::Option<f64>,
    /// <p>The currency code for the offering.</p>
    #[doc(hidden)]
    pub currency_code: std::option::Option<std::string::String>,
    /// <p>The number of OpenSearch instances that have been reserved.</p>
    #[doc(hidden)]
    pub instance_count: i32,
    /// <p>The state of the Reserved Instance.</p>
    #[doc(hidden)]
    pub state: std::option::Option<std::string::String>,
    /// <p>The payment option as defined in the Reserved Instance offering.</p>
    #[doc(hidden)]
    pub payment_option: std::option::Option<crate::types::ReservedInstancePaymentOption>,
    /// <p>The recurring charge to your account, regardless of whether you create any domains using the Reserved Instance offering.</p>
    #[doc(hidden)]
    pub recurring_charges: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
}
impl ReservedInstance {
    /// <p>The customer-specified identifier to track this reservation.</p>
    pub fn reservation_name(&self) -> std::option::Option<&str> {
        self.reservation_name.as_deref()
    }
    /// <p>The unique identifier for the reservation.</p>
    pub fn reserved_instance_id(&self) -> std::option::Option<&str> {
        self.reserved_instance_id.as_deref()
    }
    /// <p>The unique identifier of the billing subscription.</p>
    pub fn billing_subscription_id(&self) -> std::option::Option<i64> {
        self.billing_subscription_id
    }
    /// <p>The unique identifier of the Reserved Instance offering.</p>
    pub fn reserved_instance_offering_id(&self) -> std::option::Option<&str> {
        self.reserved_instance_offering_id.as_deref()
    }
    /// <p>The OpenSearch instance type offered by theReserved Instance offering.</p>
    pub fn instance_type(
        &self,
    ) -> std::option::Option<&crate::types::OpenSearchPartitionInstanceType> {
        self.instance_type.as_ref()
    }
    /// <p>The date and time when the reservation was purchased.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The duration, in seconds, for which the OpenSearch instance is reserved.</p>
    pub fn duration(&self) -> i32 {
        self.duration
    }
    /// <p>The upfront fixed charge you will paid to purchase the specific Reserved Instance offering.</p>
    pub fn fixed_price(&self) -> std::option::Option<f64> {
        self.fixed_price
    }
    /// <p>The hourly rate at which you're charged for the domain using this Reserved Instance.</p>
    pub fn usage_price(&self) -> std::option::Option<f64> {
        self.usage_price
    }
    /// <p>The currency code for the offering.</p>
    pub fn currency_code(&self) -> std::option::Option<&str> {
        self.currency_code.as_deref()
    }
    /// <p>The number of OpenSearch instances that have been reserved.</p>
    pub fn instance_count(&self) -> i32 {
        self.instance_count
    }
    /// <p>The state of the Reserved Instance.</p>
    pub fn state(&self) -> std::option::Option<&str> {
        self.state.as_deref()
    }
    /// <p>The payment option as defined in the Reserved Instance offering.</p>
    pub fn payment_option(
        &self,
    ) -> std::option::Option<&crate::types::ReservedInstancePaymentOption> {
        self.payment_option.as_ref()
    }
    /// <p>The recurring charge to your account, regardless of whether you create any domains using the Reserved Instance offering.</p>
    pub fn recurring_charges(&self) -> std::option::Option<&[crate::types::RecurringCharge]> {
        self.recurring_charges.as_deref()
    }
}
impl ReservedInstance {
    /// Creates a new builder-style object to manufacture [`ReservedInstance`](crate::types::ReservedInstance).
    pub fn builder() -> crate::types::builders::ReservedInstanceBuilder {
        crate::types::builders::ReservedInstanceBuilder::default()
    }
}

/// A builder for [`ReservedInstance`](crate::types::ReservedInstance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReservedInstanceBuilder {
    pub(crate) reservation_name: std::option::Option<std::string::String>,
    pub(crate) reserved_instance_id: std::option::Option<std::string::String>,
    pub(crate) billing_subscription_id: std::option::Option<i64>,
    pub(crate) reserved_instance_offering_id: std::option::Option<std::string::String>,
    pub(crate) instance_type: std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) duration: std::option::Option<i32>,
    pub(crate) fixed_price: std::option::Option<f64>,
    pub(crate) usage_price: std::option::Option<f64>,
    pub(crate) currency_code: std::option::Option<std::string::String>,
    pub(crate) instance_count: std::option::Option<i32>,
    pub(crate) state: std::option::Option<std::string::String>,
    pub(crate) payment_option: std::option::Option<crate::types::ReservedInstancePaymentOption>,
    pub(crate) recurring_charges: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
}
impl ReservedInstanceBuilder {
    /// <p>The customer-specified identifier to track this reservation.</p>
    pub fn reservation_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.reservation_name = Some(input.into());
        self
    }
    /// <p>The customer-specified identifier to track this reservation.</p>
    pub fn set_reservation_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reservation_name = input;
        self
    }
    /// <p>The unique identifier for the reservation.</p>
    pub fn reserved_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_instance_id = Some(input.into());
        self
    }
    /// <p>The unique identifier for the reservation.</p>
    pub fn set_reserved_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_instance_id = input;
        self
    }
    /// <p>The unique identifier of the billing subscription.</p>
    pub fn billing_subscription_id(mut self, input: i64) -> Self {
        self.billing_subscription_id = Some(input);
        self
    }
    /// <p>The unique identifier of the billing subscription.</p>
    pub fn set_billing_subscription_id(mut self, input: std::option::Option<i64>) -> Self {
        self.billing_subscription_id = input;
        self
    }
    /// <p>The unique identifier of the Reserved Instance offering.</p>
    pub fn reserved_instance_offering_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.reserved_instance_offering_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the Reserved Instance offering.</p>
    pub fn set_reserved_instance_offering_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.reserved_instance_offering_id = input;
        self
    }
    /// <p>The OpenSearch instance type offered by theReserved Instance offering.</p>
    pub fn instance_type(mut self, input: crate::types::OpenSearchPartitionInstanceType) -> Self {
        self.instance_type = Some(input);
        self
    }
    /// <p>The OpenSearch instance type offered by theReserved Instance offering.</p>
    pub fn set_instance_type(
        mut self,
        input: std::option::Option<crate::types::OpenSearchPartitionInstanceType>,
    ) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The date and time when the reservation was purchased.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The date and time when the reservation was purchased.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The duration, in seconds, for which the OpenSearch instance is reserved.</p>
    pub fn duration(mut self, input: i32) -> Self {
        self.duration = Some(input);
        self
    }
    /// <p>The duration, in seconds, for which the OpenSearch instance is reserved.</p>
    pub fn set_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.duration = input;
        self
    }
    /// <p>The upfront fixed charge you will paid to purchase the specific Reserved Instance offering.</p>
    pub fn fixed_price(mut self, input: f64) -> Self {
        self.fixed_price = Some(input);
        self
    }
    /// <p>The upfront fixed charge you will paid to purchase the specific Reserved Instance offering.</p>
    pub fn set_fixed_price(mut self, input: std::option::Option<f64>) -> Self {
        self.fixed_price = input;
        self
    }
    /// <p>The hourly rate at which you're charged for the domain using this Reserved Instance.</p>
    pub fn usage_price(mut self, input: f64) -> Self {
        self.usage_price = Some(input);
        self
    }
    /// <p>The hourly rate at which you're charged for the domain using this Reserved Instance.</p>
    pub fn set_usage_price(mut self, input: std::option::Option<f64>) -> Self {
        self.usage_price = input;
        self
    }
    /// <p>The currency code for the offering.</p>
    pub fn currency_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.currency_code = Some(input.into());
        self
    }
    /// <p>The currency code for the offering.</p>
    pub fn set_currency_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.currency_code = input;
        self
    }
    /// <p>The number of OpenSearch instances that have been reserved.</p>
    pub fn instance_count(mut self, input: i32) -> Self {
        self.instance_count = Some(input);
        self
    }
    /// <p>The number of OpenSearch instances that have been reserved.</p>
    pub fn set_instance_count(mut self, input: std::option::Option<i32>) -> Self {
        self.instance_count = input;
        self
    }
    /// <p>The state of the Reserved Instance.</p>
    pub fn state(mut self, input: impl Into<std::string::String>) -> Self {
        self.state = Some(input.into());
        self
    }
    /// <p>The state of the Reserved Instance.</p>
    pub fn set_state(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.state = input;
        self
    }
    /// <p>The payment option as defined in the Reserved Instance offering.</p>
    pub fn payment_option(mut self, input: crate::types::ReservedInstancePaymentOption) -> Self {
        self.payment_option = Some(input);
        self
    }
    /// <p>The payment option as defined in the Reserved Instance offering.</p>
    pub fn set_payment_option(
        mut self,
        input: std::option::Option<crate::types::ReservedInstancePaymentOption>,
    ) -> Self {
        self.payment_option = input;
        self
    }
    /// Appends an item to `recurring_charges`.
    ///
    /// To override the contents of this collection use [`set_recurring_charges`](Self::set_recurring_charges).
    ///
    /// <p>The recurring charge to your account, regardless of whether you create any domains using the Reserved Instance offering.</p>
    pub fn recurring_charges(mut self, input: crate::types::RecurringCharge) -> Self {
        let mut v = self.recurring_charges.unwrap_or_default();
        v.push(input);
        self.recurring_charges = Some(v);
        self
    }
    /// <p>The recurring charge to your account, regardless of whether you create any domains using the Reserved Instance offering.</p>
    pub fn set_recurring_charges(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RecurringCharge>>,
    ) -> Self {
        self.recurring_charges = input;
        self
    }
    /// Consumes the builder and constructs a [`ReservedInstance`](crate::types::ReservedInstance).
    pub fn build(self) -> crate::types::ReservedInstance {
        crate::types::ReservedInstance {
            reservation_name: self.reservation_name,
            reserved_instance_id: self.reserved_instance_id,
            billing_subscription_id: self.billing_subscription_id,
            reserved_instance_offering_id: self.reserved_instance_offering_id,
            instance_type: self.instance_type,
            start_time: self.start_time,
            duration: self.duration.unwrap_or_default(),
            fixed_price: self.fixed_price,
            usage_price: self.usage_price,
            currency_code: self.currency_code,
            instance_count: self.instance_count.unwrap_or_default(),
            state: self.state,
            payment_option: self.payment_option,
            recurring_charges: self.recurring_charges,
        }
    }
}
