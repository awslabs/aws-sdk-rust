// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>An error occurred while processing the request.</p>
    BaseException(crate::types::error::BaseException),
    /// <p>An error occurred because the client attempts to remove a resource that is currently in use. Returns HTTP status code 409.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An error occured because the client wanted to access a not supported operation. Gives http status code of 409.</p>
    DisabledOperationException(crate::types::error::DisabledOperationException),
    /// <p>The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.</p>
    InternalException(crate::types::error::InternalException),
    /// <p>The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400. </p>
    InvalidPaginationTokenException(crate::types::error::InvalidPaginationTokenException),
    /// <p>An exception for trying to create or access sub-resource that is either invalid or not supported. Gives http status code of 409.</p>
    InvalidTypeException(crate::types::error::InvalidTypeException),
    /// <p>An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>An exception for creating a resource that already exists. Gives http status code of 400.</p>
    ResourceAlreadyExistsException(crate::types::error::ResourceAlreadyExistsException),
    /// <p>An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>An exception for missing / invalid input fields. Gives http status code of 400.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BaseException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DisabledOperationException(inner) => inner.fmt(f),
            Error::InternalException(inner) => inner.fmt(f),
            Error::InvalidPaginationTokenException(inner) => inner.fmt(f),
            Error::InvalidTypeException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::accept_inbound_connection::AcceptInboundConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::accept_inbound_connection::AcceptInboundConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::accept_inbound_connection::AcceptInboundConnectionError> for Error {
    fn from(
        err: crate::operation::accept_inbound_connection::AcceptInboundConnectionError,
    ) -> Self {
        match err {
            crate::operation::accept_inbound_connection::AcceptInboundConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::accept_inbound_connection::AcceptInboundConnectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::accept_inbound_connection::AcceptInboundConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::accept_inbound_connection::AcceptInboundConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::add_tags::AddTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::add_tags::AddTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::add_tags::AddTagsError> for Error {
    fn from(err: crate::operation::add_tags::AddTagsError) -> Self {
        match err {
            crate::operation::add_tags::AddTagsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::add_tags::AddTagsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::add_tags::AddTagsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::add_tags::AddTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::add_tags::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_package::AssociatePackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_package::AssociatePackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_package::AssociatePackageError> for Error {
    fn from(err: crate::operation::associate_package::AssociatePackageError) -> Self {
        match err {
            crate::operation::associate_package::AssociatePackageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_package::AssociatePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::associate_package::AssociatePackageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_package::AssociatePackageError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::associate_package::AssociatePackageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_package::AssociatePackageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_package::AssociatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError>
    for Error
{
    fn from(
        err: crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError,
    ) -> Self {
        match err {
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::authorize_vpc_endpoint_access::AuthorizeVpcEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError>
    for Error
{
    fn from(
        err: crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError,
    ) -> Self {
        match err {
            crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_service_software_update::CancelServiceSoftwareUpdateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_domain::CreateDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_domain::CreateDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_domain::CreateDomainError> for Error {
    fn from(err: crate::operation::create_domain::CreateDomainError) -> Self {
        match err {
            crate::operation::create_domain::CreateDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::create_domain::CreateDomainError::DisabledOperationException(
                inner,
            ) => Error::DisabledOperationException(inner),
            crate::operation::create_domain::CreateDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::create_domain::CreateDomainError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::operation::create_domain::CreateDomainError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_domain::CreateDomainError::ResourceAlreadyExistsException(
                inner,
            ) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_domain::CreateDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_domain::CreateDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_outbound_connection::CreateOutboundConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_outbound_connection::CreateOutboundConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_outbound_connection::CreateOutboundConnectionError> for Error {
    fn from(
        err: crate::operation::create_outbound_connection::CreateOutboundConnectionError,
    ) -> Self {
        match err {
            crate::operation::create_outbound_connection::CreateOutboundConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::create_outbound_connection::CreateOutboundConnectionError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::create_outbound_connection::CreateOutboundConnectionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_outbound_connection::CreateOutboundConnectionError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_outbound_connection::CreateOutboundConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_package::CreatePackageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_package::CreatePackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_package::CreatePackageError> for Error {
    fn from(err: crate::operation::create_package::CreatePackageError) -> Self {
        match err {
            crate::operation::create_package::CreatePackageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_package::CreatePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::create_package::CreatePackageError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::create_package::CreatePackageError::InvalidTypeException(inner) => Error::InvalidTypeException(inner),
            crate::operation::create_package::CreatePackageError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_package::CreatePackageError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::create_package::CreatePackageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_package::CreatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_vpc_endpoint::CreateVpcEndpointError> for Error {
    fn from(err: crate::operation::create_vpc_endpoint::CreateVpcEndpointError) -> Self {
        match err {
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_vpc_endpoint::CreateVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_domain::DeleteDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_domain::DeleteDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_domain::DeleteDomainError> for Error {
    fn from(err: crate::operation::delete_domain::DeleteDomainError) -> Self {
        match err {
            crate::operation::delete_domain::DeleteDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_domain::DeleteDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_inbound_connection::DeleteInboundConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_inbound_connection::DeleteInboundConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_inbound_connection::DeleteInboundConnectionError> for Error {
    fn from(
        err: crate::operation::delete_inbound_connection::DeleteInboundConnectionError,
    ) -> Self {
        match err {
            crate::operation::delete_inbound_connection::DeleteInboundConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::delete_inbound_connection::DeleteInboundConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_inbound_connection::DeleteInboundConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_outbound_connection::DeleteOutboundConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_outbound_connection::DeleteOutboundConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_outbound_connection::DeleteOutboundConnectionError> for Error {
    fn from(
        err: crate::operation::delete_outbound_connection::DeleteOutboundConnectionError,
    ) -> Self {
        match err {
            crate::operation::delete_outbound_connection::DeleteOutboundConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::delete_outbound_connection::DeleteOutboundConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_outbound_connection::DeleteOutboundConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_package::DeletePackageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_package::DeletePackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_package::DeletePackageError> for Error {
    fn from(err: crate::operation::delete_package::DeletePackageError) -> Self {
        match err {
            crate::operation::delete_package::DeletePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_package::DeletePackageError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::delete_package::DeletePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_package::DeletePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::delete_package::DeletePackageError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_package::DeletePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_package::DeletePackageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError> for Error {
    fn from(err: crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError) -> Self {
        match err {
            crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_vpc_endpoint::DeleteVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_domain::DescribeDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_domain::DescribeDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_domain::DescribeDomainError> for Error {
    fn from(err: crate::operation::describe_domain::DescribeDomainError) -> Self {
        match err {
            crate::operation::describe_domain::DescribeDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::describe_domain::DescribeDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::describe_domain::DescribeDomainError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_domain::DescribeDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_domain::DescribeDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError> for Error {
    fn from(
        err: crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError,
    ) -> Self {
        match err {
            crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_domain_auto_tunes::DescribeDomainAutoTunesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError>
    for Error
{
    fn from(
        err: crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError,
    ) -> Self {
        match err {
            crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_domain_change_progress::DescribeDomainChangeProgressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_domain_config::DescribeDomainConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_domain_config::DescribeDomainConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_domain_config::DescribeDomainConfigError> for Error {
    fn from(err: crate::operation::describe_domain_config::DescribeDomainConfigError) -> Self {
        match err {
            crate::operation::describe_domain_config::DescribeDomainConfigError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::describe_domain_config::DescribeDomainConfigError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_domain_config::DescribeDomainConfigError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_domain_config::DescribeDomainConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_domain_config::DescribeDomainConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_domains::DescribeDomainsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_domains::DescribeDomainsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_domains::DescribeDomainsError> for Error {
    fn from(err: crate::operation::describe_domains::DescribeDomainsError) -> Self {
        match err {
            crate::operation::describe_domains::DescribeDomainsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::describe_domains::DescribeDomainsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::describe_domains::DescribeDomainsError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::describe_domains::DescribeDomainsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_dry_run_progress::DescribeDryRunProgressError> for Error {
    fn from(err: crate::operation::describe_dry_run_progress::DescribeDryRunProgressError) -> Self {
        match err {
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_dry_run_progress::DescribeDryRunProgressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_inbound_connections::DescribeInboundConnectionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_inbound_connections::DescribeInboundConnectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_inbound_connections::DescribeInboundConnectionsError>
    for Error
{
    fn from(
        err: crate::operation::describe_inbound_connections::DescribeInboundConnectionsError,
    ) -> Self {
        match err {
            crate::operation::describe_inbound_connections::DescribeInboundConnectionsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::describe_inbound_connections::DescribeInboundConnectionsError::InvalidPaginationTokenException(inner) => Error::InvalidPaginationTokenException(inner),
            crate::operation::describe_inbound_connections::DescribeInboundConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError>
    for Error
{
    fn from(
        err: crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError,
    ) -> Self {
        match err {
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError::InvalidTypeException(inner) => Error::InvalidTypeException(inner),
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_instance_type_limits::DescribeInstanceTypeLimitsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_outbound_connections::DescribeOutboundConnectionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_outbound_connections::DescribeOutboundConnectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_outbound_connections::DescribeOutboundConnectionsError>
    for Error
{
    fn from(
        err: crate::operation::describe_outbound_connections::DescribeOutboundConnectionsError,
    ) -> Self {
        match err {
            crate::operation::describe_outbound_connections::DescribeOutboundConnectionsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::describe_outbound_connections::DescribeOutboundConnectionsError::InvalidPaginationTokenException(inner) => Error::InvalidPaginationTokenException(inner),
            crate::operation::describe_outbound_connections::DescribeOutboundConnectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_packages::DescribePackagesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_packages::DescribePackagesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_packages::DescribePackagesError> for Error {
    fn from(err: crate::operation::describe_packages::DescribePackagesError) -> Self {
        match err {
            crate::operation::describe_packages::DescribePackagesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_packages::DescribePackagesError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::describe_packages::DescribePackagesError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_packages::DescribePackagesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_packages::DescribePackagesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_packages::DescribePackagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError> for Error {
    fn from(err: crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError) -> Self {
        match err {
            crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_reserved_instance_offerings::DescribeReservedInstanceOfferingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_reserved_instances::DescribeReservedInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_reserved_instances::DescribeReservedInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_reserved_instances::DescribeReservedInstancesError> for Error {
    fn from(
        err: crate::operation::describe_reserved_instances::DescribeReservedInstancesError,
    ) -> Self {
        match err {
            crate::operation::describe_reserved_instances::DescribeReservedInstancesError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::describe_reserved_instances::DescribeReservedInstancesError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_reserved_instances::DescribeReservedInstancesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_reserved_instances::DescribeReservedInstancesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_reserved_instances::DescribeReservedInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError> for Error {
    fn from(err: crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError) -> Self {
        match err {
            crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_vpc_endpoints::DescribeVpcEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::dissociate_package::DissociatePackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::dissociate_package::DissociatePackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::dissociate_package::DissociatePackageError> for Error {
    fn from(err: crate::operation::dissociate_package::DissociatePackageError) -> Self {
        match err {
            crate::operation::dissociate_package::DissociatePackageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::dissociate_package::DissociatePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::dissociate_package::DissociatePackageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::dissociate_package::DissociatePackageError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::dissociate_package::DissociatePackageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::dissociate_package::DissociatePackageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::dissociate_package::DissociatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_compatible_versions::GetCompatibleVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_compatible_versions::GetCompatibleVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_compatible_versions::GetCompatibleVersionsError> for Error {
    fn from(err: crate::operation::get_compatible_versions::GetCompatibleVersionsError) -> Self {
        match err {
            crate::operation::get_compatible_versions::GetCompatibleVersionsError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::get_compatible_versions::GetCompatibleVersionsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::get_compatible_versions::GetCompatibleVersionsError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::get_compatible_versions::GetCompatibleVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_compatible_versions::GetCompatibleVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_compatible_versions::GetCompatibleVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_package_version_history::GetPackageVersionHistoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_package_version_history::GetPackageVersionHistoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_package_version_history::GetPackageVersionHistoryError> for Error {
    fn from(
        err: crate::operation::get_package_version_history::GetPackageVersionHistoryError,
    ) -> Self {
        match err {
            crate::operation::get_package_version_history::GetPackageVersionHistoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_package_version_history::GetPackageVersionHistoryError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::get_package_version_history::GetPackageVersionHistoryError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::get_package_version_history::GetPackageVersionHistoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_package_version_history::GetPackageVersionHistoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_package_version_history::GetPackageVersionHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_upgrade_history::GetUpgradeHistoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_upgrade_history::GetUpgradeHistoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_upgrade_history::GetUpgradeHistoryError> for Error {
    fn from(err: crate::operation::get_upgrade_history::GetUpgradeHistoryError) -> Self {
        match err {
            crate::operation::get_upgrade_history::GetUpgradeHistoryError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::get_upgrade_history::GetUpgradeHistoryError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::get_upgrade_history::GetUpgradeHistoryError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::get_upgrade_history::GetUpgradeHistoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_upgrade_history::GetUpgradeHistoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_upgrade_history::GetUpgradeHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_upgrade_status::GetUpgradeStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_upgrade_status::GetUpgradeStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_upgrade_status::GetUpgradeStatusError> for Error {
    fn from(err: crate::operation::get_upgrade_status::GetUpgradeStatusError) -> Self {
        match err {
            crate::operation::get_upgrade_status::GetUpgradeStatusError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::get_upgrade_status::GetUpgradeStatusError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::get_upgrade_status::GetUpgradeStatusError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::get_upgrade_status::GetUpgradeStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_upgrade_status::GetUpgradeStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_upgrade_status::GetUpgradeStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_domain_names::ListDomainNamesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_domain_names::ListDomainNamesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_domain_names::ListDomainNamesError> for Error {
    fn from(err: crate::operation::list_domain_names::ListDomainNamesError) -> Self {
        match err {
            crate::operation::list_domain_names::ListDomainNamesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::list_domain_names::ListDomainNamesError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::list_domain_names::ListDomainNamesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_domains_for_package::ListDomainsForPackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_domains_for_package::ListDomainsForPackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_domains_for_package::ListDomainsForPackageError> for Error {
    fn from(err: crate::operation::list_domains_for_package::ListDomainsForPackageError) -> Self {
        match err {
            crate::operation::list_domains_for_package::ListDomainsForPackageError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_domains_for_package::ListDomainsForPackageError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::list_domains_for_package::ListDomainsForPackageError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_domains_for_package::ListDomainsForPackageError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_domains_for_package::ListDomainsForPackageError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_domains_for_package::ListDomainsForPackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_instance_type_details::ListInstanceTypeDetailsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_instance_type_details::ListInstanceTypeDetailsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_instance_type_details::ListInstanceTypeDetailsError> for Error {
    fn from(
        err: crate::operation::list_instance_type_details::ListInstanceTypeDetailsError,
    ) -> Self {
        match err {
            crate::operation::list_instance_type_details::ListInstanceTypeDetailsError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::list_instance_type_details::ListInstanceTypeDetailsError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_instance_type_details::ListInstanceTypeDetailsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_instance_type_details::ListInstanceTypeDetailsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_instance_type_details::ListInstanceTypeDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_packages_for_domain::ListPackagesForDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_packages_for_domain::ListPackagesForDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_packages_for_domain::ListPackagesForDomainError> for Error {
    fn from(err: crate::operation::list_packages_for_domain::ListPackagesForDomainError) -> Self {
        match err {
            crate::operation::list_packages_for_domain::ListPackagesForDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_packages_for_domain::ListPackagesForDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::list_packages_for_domain::ListPackagesForDomainError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_packages_for_domain::ListPackagesForDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_packages_for_domain::ListPackagesForDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_packages_for_domain::ListPackagesForDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_tags::ListTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_tags::ListTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags::ListTagsError> for Error {
    fn from(err: crate::operation::list_tags::ListTagsError) -> Self {
        match err {
            crate::operation::list_tags::ListTagsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::list_tags::ListTagsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::list_tags::ListTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags::ListTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_tags::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_versions::ListVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_versions::ListVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_versions::ListVersionsError> for Error {
    fn from(err: crate::operation::list_versions::ListVersionsError) -> Self {
        match err {
            crate::operation::list_versions::ListVersionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::list_versions::ListVersionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::list_versions::ListVersionsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_versions::ListVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_versions::ListVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError> for Error {
    fn from(err: crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError) -> Self {
        match err {
            crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_vpc_endpoint_access::ListVpcEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_vpc_endpoints::ListVpcEndpointsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_vpc_endpoints::ListVpcEndpointsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_vpc_endpoints::ListVpcEndpointsError> for Error {
    fn from(err: crate::operation::list_vpc_endpoints::ListVpcEndpointsError) -> Self {
        match err {
            crate::operation::list_vpc_endpoints::ListVpcEndpointsError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::list_vpc_endpoints::ListVpcEndpointsError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::list_vpc_endpoints::ListVpcEndpointsError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_vpc_endpoints::ListVpcEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError>
    for Error
{
    fn from(
        err: crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError,
    ) -> Self {
        match err {
            crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_vpc_endpoints_for_domain::ListVpcEndpointsForDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError> for Error {
    fn from(err: crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError) -> Self {
        match err {
            crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::purchase_reserved_instance_offering::PurchaseReservedInstanceOfferingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::reject_inbound_connection::RejectInboundConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::reject_inbound_connection::RejectInboundConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reject_inbound_connection::RejectInboundConnectionError> for Error {
    fn from(
        err: crate::operation::reject_inbound_connection::RejectInboundConnectionError,
    ) -> Self {
        match err {
            crate::operation::reject_inbound_connection::RejectInboundConnectionError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::reject_inbound_connection::RejectInboundConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reject_inbound_connection::RejectInboundConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::remove_tags::RemoveTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::remove_tags::RemoveTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::remove_tags::RemoveTagsError> for Error {
    fn from(err: crate::operation::remove_tags::RemoveTagsError) -> Self {
        match err {
            crate::operation::remove_tags::RemoveTagsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::remove_tags::RemoveTagsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::remove_tags::RemoveTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::remove_tags::RemoveTagsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError> for Error {
    fn from(
        err: crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError,
    ) -> Self {
        match err {
            crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::revoke_vpc_endpoint_access::RevokeVpcEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_service_software_update::StartServiceSoftwareUpdateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_service_software_update::StartServiceSoftwareUpdateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_service_software_update::StartServiceSoftwareUpdateError>
    for Error
{
    fn from(
        err: crate::operation::start_service_software_update::StartServiceSoftwareUpdateError,
    ) -> Self {
        match err {
            crate::operation::start_service_software_update::StartServiceSoftwareUpdateError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::start_service_software_update::StartServiceSoftwareUpdateError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::start_service_software_update::StartServiceSoftwareUpdateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_service_software_update::StartServiceSoftwareUpdateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_service_software_update::StartServiceSoftwareUpdateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_domain_config::UpdateDomainConfigError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_domain_config::UpdateDomainConfigError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_domain_config::UpdateDomainConfigError> for Error {
    fn from(err: crate::operation::update_domain_config::UpdateDomainConfigError) -> Self {
        match err {
            crate::operation::update_domain_config::UpdateDomainConfigError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::update_domain_config::UpdateDomainConfigError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::update_domain_config::UpdateDomainConfigError::InvalidTypeException(inner) => Error::InvalidTypeException(inner),
            crate::operation::update_domain_config::UpdateDomainConfigError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_domain_config::UpdateDomainConfigError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_domain_config::UpdateDomainConfigError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_domain_config::UpdateDomainConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_package::UpdatePackageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_package::UpdatePackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_package::UpdatePackageError> for Error {
    fn from(err: crate::operation::update_package::UpdatePackageError) -> Self {
        match err {
            crate::operation::update_package::UpdatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_package::UpdatePackageError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::operation::update_package::UpdatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::operation::update_package::UpdatePackageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_package::UpdatePackageError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_package::UpdatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_package::UpdatePackageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_vpc_endpoint::UpdateVpcEndpointError> for Error {
    fn from(err: crate::operation::update_vpc_endpoint::UpdateVpcEndpointError) -> Self {
        match err {
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_vpc_endpoint::UpdateVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::upgrade_domain::UpgradeDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::upgrade_domain::UpgradeDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::upgrade_domain::UpgradeDomainError> for Error {
    fn from(err: crate::operation::upgrade_domain::UpgradeDomainError) -> Self {
        match err {
            crate::operation::upgrade_domain::UpgradeDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::operation::upgrade_domain::UpgradeDomainError::DisabledOperationException(inner) => Error::DisabledOperationException(inner),
            crate::operation::upgrade_domain::UpgradeDomainError::InternalException(inner) => Error::InternalException(inner),
            crate::operation::upgrade_domain::UpgradeDomainError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::operation::upgrade_domain::UpgradeDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::upgrade_domain::UpgradeDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::upgrade_domain::UpgradeDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BaseException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DisabledOperationException(e) => e.request_id(),
            Self::InternalException(e) => e.request_id(),
            Self::InvalidPaginationTokenException(e) => e.request_id(),
            Self::InvalidTypeException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
