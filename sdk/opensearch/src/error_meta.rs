// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An error occurred because user does not have permissions to access the resource. Returns HTTP status code 403.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>An error occurred while processing the request.</p>
    BaseException(crate::error::BaseException),
    /// <p>An error occurred because the client attempts to remove a resource that is currently in use. Returns HTTP status code 409.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>An error occured because the client wanted to access a not supported operation. Gives http status code of 409.</p>
    DisabledOperationException(crate::error::DisabledOperationException),
    /// <p>The request processing has failed because of an unknown error, exception or failure (the failure is internal to the service) . Gives http status code of 500.</p>
    InternalException(crate::error::InternalException),
    /// <p>The request processing has failed because of invalid pagination token provided by customer. Returns an HTTP status code of 400. </p>
    InvalidPaginationTokenException(crate::error::InvalidPaginationTokenException),
    /// <p>An exception for trying to create or access sub-resource that is either invalid or not supported. Gives http status code of 409.</p>
    InvalidTypeException(crate::error::InvalidTypeException),
    /// <p>An exception for trying to create more than allowed resources or sub-resources. Gives http status code of 409.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>An exception for creating a resource that already exists. Gives http status code of 400.</p>
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    /// <p>An exception for accessing or deleting a resource that does not exist. Gives http status code of 400.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>An exception for missing / invalid input fields. Gives http status code of 400.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::BaseException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DisabledOperationException(inner) => inner.fmt(f),
            Error::InternalException(inner) => inner.fmt(f),
            Error::InvalidPaginationTokenException(inner) => inner.fmt(f),
            Error::InvalidTypeException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptInboundConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AcceptInboundConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptInboundConnectionError> for Error {
    fn from(err: crate::error::AcceptInboundConnectionError) -> Self {
        match err {
            crate::error::AcceptInboundConnectionError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::AcceptInboundConnectionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AcceptInboundConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AcceptInboundConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsError> for Error {
    fn from(err: crate::error::AddTagsError) -> Self {
        match err {
            crate::error::AddTagsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::AddTagsError::InternalException(inner) => Error::InternalException(inner),
            crate::error::AddTagsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AddTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AddTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociatePackageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociatePackageError> for Error {
    fn from(err: crate::error::AssociatePackageError) -> Self {
        match err {
            crate::error::AssociatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AssociatePackageError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::AssociatePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::AssociatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::AssociatePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AssociatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AuthorizeVpcEndpointAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AuthorizeVpcEndpointAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AuthorizeVpcEndpointAccessError> for Error {
    fn from(err: crate::error::AuthorizeVpcEndpointAccessError) -> Self {
        match err {
            crate::error::AuthorizeVpcEndpointAccessError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AuthorizeVpcEndpointAccessError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelServiceSoftwareUpdateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelServiceSoftwareUpdateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelServiceSoftwareUpdateError> for Error {
    fn from(err: crate::error::CancelServiceSoftwareUpdateError) -> Self {
        match err {
            crate::error::CancelServiceSoftwareUpdateError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::CancelServiceSoftwareUpdateError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CancelServiceSoftwareUpdateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelServiceSoftwareUpdateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CancelServiceSoftwareUpdateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDomainError> for Error {
    fn from(err: crate::error::CreateDomainError) -> Self {
        match err {
            crate::error::CreateDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::error::CreateDomainError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::CreateDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateDomainError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::CreateDomainError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDomainError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateOutboundConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateOutboundConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateOutboundConnectionError> for Error {
    fn from(err: crate::error::CreateOutboundConnectionError) -> Self {
        match err {
            crate::error::CreateOutboundConnectionError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::CreateOutboundConnectionError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateOutboundConnectionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateOutboundConnectionError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateOutboundConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreatePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreatePackageError> for Error {
    fn from(err: crate::error::CreatePackageError) -> Self {
        match err {
            crate::error::CreatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreatePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::error::CreatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreatePackageError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::CreatePackageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreatePackageError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVpcEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateVpcEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVpcEndpointError> for Error {
    fn from(err: crate::error::CreateVpcEndpointError) -> Self {
        match err {
            crate::error::CreateVpcEndpointError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::CreateVpcEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVpcEndpointError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::CreateVpcEndpointError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::CreateVpcEndpointError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVpcEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDomainError> for Error {
    fn from(err: crate::error::DeleteDomainError) -> Self {
        match err {
            crate::error::DeleteDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DeleteDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteInboundConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteInboundConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteInboundConnectionError> for Error {
    fn from(err: crate::error::DeleteInboundConnectionError) -> Self {
        match err {
            crate::error::DeleteInboundConnectionError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DeleteInboundConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteInboundConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteOutboundConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteOutboundConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteOutboundConnectionError> for Error {
    fn from(err: crate::error::DeleteOutboundConnectionError) -> Self {
        match err {
            crate::error::DeleteOutboundConnectionError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DeleteOutboundConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteOutboundConnectionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePackageError> for Error {
    fn from(err: crate::error::DeletePackageError) -> Self {
        match err {
            crate::error::DeletePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeletePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DeletePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeletePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeletePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeletePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVpcEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteVpcEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVpcEndpointError> for Error {
    fn from(err: crate::error::DeleteVpcEndpointError) -> Self {
        match err {
            crate::error::DeleteVpcEndpointError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DeleteVpcEndpointError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DeleteVpcEndpointError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DeleteVpcEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainError> for Error {
    fn from(err: crate::error::DescribeDomainError) -> Self {
        match err {
            crate::error::DescribeDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DescribeDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainAutoTunesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainAutoTunesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainAutoTunesError> for Error {
    fn from(err: crate::error::DescribeDomainAutoTunesError) -> Self {
        match err {
            crate::error::DescribeDomainAutoTunesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeDomainAutoTunesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainAutoTunesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDomainAutoTunesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDomainAutoTunesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainChangeProgressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainChangeProgressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainChangeProgressError> for Error {
    fn from(err: crate::error::DescribeDomainChangeProgressError) -> Self {
        match err {
            crate::error::DescribeDomainChangeProgressError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeDomainChangeProgressError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainChangeProgressError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDomainChangeProgressError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDomainChangeProgressError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainConfigError> for Error {
    fn from(err: crate::error::DescribeDomainConfigError) -> Self {
        match err {
            crate::error::DescribeDomainConfigError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeDomainConfigError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDomainConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDomainConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainsError> for Error {
    fn from(err: crate::error::DescribeDomainsError) -> Self {
        match err {
            crate::error::DescribeDomainsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::DescribeDomainsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDomainsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDryRunProgressError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDryRunProgressError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDryRunProgressError> for Error {
    fn from(err: crate::error::DescribeDryRunProgressError) -> Self {
        match err {
            crate::error::DescribeDryRunProgressError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeDryRunProgressError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DescribeDryRunProgressError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeDryRunProgressError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDryRunProgressError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeDryRunProgressError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInboundConnectionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInboundConnectionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInboundConnectionsError> for Error {
    fn from(err: crate::error::DescribeInboundConnectionsError) -> Self {
        match err {
            crate::error::DescribeInboundConnectionsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DescribeInboundConnectionsError::InvalidPaginationTokenException(
                inner,
            ) => Error::InvalidPaginationTokenException(inner),
            crate::error::DescribeInboundConnectionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeInstanceTypeLimitsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeInstanceTypeLimitsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeInstanceTypeLimitsError> for Error {
    fn from(err: crate::error::DescribeInstanceTypeLimitsError) -> Self {
        match err {
            crate::error::DescribeInstanceTypeLimitsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeInstanceTypeLimitsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeInstanceTypeLimitsError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::DescribeInstanceTypeLimitsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DescribeInstanceTypeLimitsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeInstanceTypeLimitsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeInstanceTypeLimitsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeOutboundConnectionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeOutboundConnectionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeOutboundConnectionsError> for Error {
    fn from(err: crate::error::DescribeOutboundConnectionsError) -> Self {
        match err {
            crate::error::DescribeOutboundConnectionsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DescribeOutboundConnectionsError::InvalidPaginationTokenException(
                inner,
            ) => Error::InvalidPaginationTokenException(inner),
            crate::error::DescribeOutboundConnectionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribePackagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribePackagesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribePackagesError> for Error {
    fn from(err: crate::error::DescribePackagesError) -> Self {
        match err {
            crate::error::DescribePackagesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribePackagesError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribePackagesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribePackagesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribePackagesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribePackagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeReservedInstanceOfferingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReservedInstanceOfferingsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedInstanceOfferingsError> for Error {
    fn from(err: crate::error::DescribeReservedInstanceOfferingsError) -> Self {
        match err {
            crate::error::DescribeReservedInstanceOfferingsError::DisabledOperationException(
                inner,
            ) => Error::DisabledOperationException(inner),
            crate::error::DescribeReservedInstanceOfferingsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeReservedInstanceOfferingsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeReservedInstanceOfferingsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeReservedInstanceOfferingsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeReservedInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeReservedInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReservedInstancesError> for Error {
    fn from(err: crate::error::DescribeReservedInstancesError) -> Self {
        match err {
            crate::error::DescribeReservedInstancesError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DescribeReservedInstancesError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeReservedInstancesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeReservedInstancesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeReservedInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVpcEndpointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVpcEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVpcEndpointsError> for Error {
    fn from(err: crate::error::DescribeVpcEndpointsError) -> Self {
        match err {
            crate::error::DescribeVpcEndpointsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DescribeVpcEndpointsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::DescribeVpcEndpointsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DescribeVpcEndpointsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeVpcEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DissociatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DissociatePackageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DissociatePackageError> for Error {
    fn from(err: crate::error::DissociatePackageError) -> Self {
        match err {
            crate::error::DissociatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DissociatePackageError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::DissociatePackageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DissociatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::DissociatePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DissociatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DissociatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCompatibleVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetCompatibleVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCompatibleVersionsError> for Error {
    fn from(err: crate::error::GetCompatibleVersionsError) -> Self {
        match err {
            crate::error::GetCompatibleVersionsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::GetCompatibleVersionsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::GetCompatibleVersionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetCompatibleVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCompatibleVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetCompatibleVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPackageVersionHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetPackageVersionHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPackageVersionHistoryError> for Error {
    fn from(err: crate::error::GetPackageVersionHistoryError) -> Self {
        match err {
            crate::error::GetPackageVersionHistoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetPackageVersionHistoryError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::GetPackageVersionHistoryError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetPackageVersionHistoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetPackageVersionHistoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetPackageVersionHistoryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUpgradeHistoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUpgradeHistoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUpgradeHistoryError> for Error {
    fn from(err: crate::error::GetUpgradeHistoryError) -> Self {
        match err {
            crate::error::GetUpgradeHistoryError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::GetUpgradeHistoryError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::GetUpgradeHistoryError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetUpgradeHistoryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUpgradeHistoryError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetUpgradeHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUpgradeStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUpgradeStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUpgradeStatusError> for Error {
    fn from(err: crate::error::GetUpgradeStatusError) -> Self {
        match err {
            crate::error::GetUpgradeStatusError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::GetUpgradeStatusError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::GetUpgradeStatusError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::GetUpgradeStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUpgradeStatusError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetUpgradeStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainNamesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDomainNamesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainNamesError> for Error {
    fn from(err: crate::error::ListDomainNamesError) -> Self {
        match err {
            crate::error::ListDomainNamesError::BaseException(inner) => Error::BaseException(inner),
            crate::error::ListDomainNamesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDomainNamesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainsForPackageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDomainsForPackageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainsForPackageError> for Error {
    fn from(err: crate::error::ListDomainsForPackageError) -> Self {
        match err {
            crate::error::ListDomainsForPackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDomainsForPackageError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListDomainsForPackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListDomainsForPackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDomainsForPackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDomainsForPackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListInstanceTypeDetailsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListInstanceTypeDetailsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListInstanceTypeDetailsError> for Error {
    fn from(err: crate::error::ListInstanceTypeDetailsError) -> Self {
        match err {
            crate::error::ListInstanceTypeDetailsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListInstanceTypeDetailsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListInstanceTypeDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListInstanceTypeDetailsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListInstanceTypeDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPackagesForDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListPackagesForDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPackagesForDomainError> for Error {
    fn from(err: crate::error::ListPackagesForDomainError) -> Self {
        match err {
            crate::error::ListPackagesForDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListPackagesForDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListPackagesForDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListPackagesForDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPackagesForDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListPackagesForDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsError> for Error {
    fn from(err: crate::error::ListTagsError) -> Self {
        match err {
            crate::error::ListTagsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::ListTagsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListTagsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListVersionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVersionsError> for Error {
    fn from(err: crate::error::ListVersionsError) -> Self {
        match err {
            crate::error::ListVersionsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::ListVersionsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListVersionsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVpcEndpointAccessError> for Error {
    fn from(err: crate::error::ListVpcEndpointAccessError) -> Self {
        match err {
            crate::error::ListVpcEndpointAccessError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListVpcEndpointAccessError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::ListVpcEndpointAccessError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListVpcEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListVpcEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVpcEndpointsError> for Error {
    fn from(err: crate::error::ListVpcEndpointsError) -> Self {
        match err {
            crate::error::ListVpcEndpointsError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListVpcEndpointsError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::ListVpcEndpointsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListVpcEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointsForDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVpcEndpointsForDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVpcEndpointsForDomainError> for Error {
    fn from(err: crate::error::ListVpcEndpointsForDomainError) -> Self {
        match err {
            crate::error::ListVpcEndpointsForDomainError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::ListVpcEndpointsForDomainError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::ListVpcEndpointsForDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::ListVpcEndpointsForDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListVpcEndpointsForDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::PurchaseReservedInstanceOfferingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::PurchaseReservedInstanceOfferingError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PurchaseReservedInstanceOfferingError> for Error {
    fn from(err: crate::error::PurchaseReservedInstanceOfferingError) -> Self {
        match err {
            crate::error::PurchaseReservedInstanceOfferingError::DisabledOperationException(
                inner,
            ) => Error::DisabledOperationException(inner),
            crate::error::PurchaseReservedInstanceOfferingError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::PurchaseReservedInstanceOfferingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PurchaseReservedInstanceOfferingError::ResourceAlreadyExistsException(
                inner,
            ) => Error::ResourceAlreadyExistsException(inner),
            crate::error::PurchaseReservedInstanceOfferingError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::PurchaseReservedInstanceOfferingError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::PurchaseReservedInstanceOfferingError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RejectInboundConnectionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RejectInboundConnectionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RejectInboundConnectionError> for Error {
    fn from(err: crate::error::RejectInboundConnectionError) -> Self {
        match err {
            crate::error::RejectInboundConnectionError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::RejectInboundConnectionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RejectInboundConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsError> for Error {
    fn from(err: crate::error::RemoveTagsError) -> Self {
        match err {
            crate::error::RemoveTagsError::BaseException(inner) => Error::BaseException(inner),
            crate::error::RemoveTagsError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::RemoveTagsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RemoveTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RevokeVpcEndpointAccessError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RevokeVpcEndpointAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RevokeVpcEndpointAccessError> for Error {
    fn from(err: crate::error::RevokeVpcEndpointAccessError) -> Self {
        match err {
            crate::error::RevokeVpcEndpointAccessError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RevokeVpcEndpointAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartServiceSoftwareUpdateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartServiceSoftwareUpdateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartServiceSoftwareUpdateError> for Error {
    fn from(err: crate::error::StartServiceSoftwareUpdateError) -> Self {
        match err {
            crate::error::StartServiceSoftwareUpdateError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::StartServiceSoftwareUpdateError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::StartServiceSoftwareUpdateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartServiceSoftwareUpdateError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartServiceSoftwareUpdateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDomainConfigError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDomainConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDomainConfigError> for Error {
    fn from(err: crate::error::UpdateDomainConfigError) -> Self {
        match err {
            crate::error::UpdateDomainConfigError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpdateDomainConfigError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateDomainConfigError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::UpdateDomainConfigError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDomainConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDomainConfigError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateDomainConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdatePackageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdatePackageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdatePackageError> for Error {
    fn from(err: crate::error::UpdatePackageError) -> Self {
        match err {
            crate::error::UpdatePackageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdatePackageError::BaseException(inner) => Error::BaseException(inner),
            crate::error::UpdatePackageError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdatePackageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdatePackageError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdatePackageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdatePackageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVpcEndpointError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVpcEndpointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVpcEndpointError> for Error {
    fn from(err: crate::error::UpdateVpcEndpointError) -> Self {
        match err {
            crate::error::UpdateVpcEndpointError::BaseException(inner) => {
                Error::BaseException(inner)
            }
            crate::error::UpdateVpcEndpointError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVpcEndpointError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::UpdateVpcEndpointError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpdateVpcEndpointError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateVpcEndpointError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateVpcEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpgradeDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpgradeDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpgradeDomainError> for Error {
    fn from(err: crate::error::UpgradeDomainError) -> Self {
        match err {
            crate::error::UpgradeDomainError::BaseException(inner) => Error::BaseException(inner),
            crate::error::UpgradeDomainError::DisabledOperationException(inner) => {
                Error::DisabledOperationException(inner)
            }
            crate::error::UpgradeDomainError::InternalException(inner) => {
                Error::InternalException(inner)
            }
            crate::error::UpgradeDomainError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::UpgradeDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpgradeDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpgradeDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::BaseException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DisabledOperationException(e) => e.request_id(),
            Self::InternalException(e) => e.request_id(),
            Self::InvalidPaginationTokenException(e) => e.request_id(),
            Self::InvalidTypeException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
