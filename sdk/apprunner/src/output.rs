// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateVpcIngressConnectionOutput {
    /// <p>A description of the App Runner VPC Ingress Connection resource that's updated by this request.</p>
    #[doc(hidden)]
    pub vpc_ingress_connection: std::option::Option<crate::model::VpcIngressConnection>,
    _request_id: Option<String>,
}
impl UpdateVpcIngressConnectionOutput {
    /// <p>A description of the App Runner VPC Ingress Connection resource that's updated by this request.</p>
    pub fn vpc_ingress_connection(
        &self,
    ) -> std::option::Option<&crate::model::VpcIngressConnection> {
        self.vpc_ingress_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for UpdateVpcIngressConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateVpcIngressConnectionOutput {
    /// Creates a new builder-style object to manufacture [`UpdateVpcIngressConnectionOutput`](crate::output::UpdateVpcIngressConnectionOutput).
    pub fn builder() -> crate::output::update_vpc_ingress_connection_output::Builder {
        crate::output::update_vpc_ingress_connection_output::Builder::default()
    }
}

/// See [`UpdateVpcIngressConnectionOutput`](crate::output::UpdateVpcIngressConnectionOutput).
pub mod update_vpc_ingress_connection_output {

    /// A builder for [`UpdateVpcIngressConnectionOutput`](crate::output::UpdateVpcIngressConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_ingress_connection: std::option::Option<crate::model::VpcIngressConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner VPC Ingress Connection resource that's updated by this request.</p>
        pub fn vpc_ingress_connection(mut self, input: crate::model::VpcIngressConnection) -> Self {
            self.vpc_ingress_connection = Some(input);
            self
        }
        /// <p>A description of the App Runner VPC Ingress Connection resource that's updated by this request.</p>
        pub fn set_vpc_ingress_connection(
            mut self,
            input: std::option::Option<crate::model::VpcIngressConnection>,
        ) -> Self {
            self.vpc_ingress_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateVpcIngressConnectionOutput`](crate::output::UpdateVpcIngressConnectionOutput).
        pub fn build(self) -> crate::output::UpdateVpcIngressConnectionOutput {
            crate::output::UpdateVpcIngressConnectionOutput {
                vpc_ingress_connection: self.vpc_ingress_connection,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateServiceOutput {
    /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::model::Service>,
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl UpdateServiceOutput {
    /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
    pub fn service(&self) -> std::option::Option<&crate::model::Service> {
        self.service.as_ref()
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for UpdateServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateServiceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateServiceOutput`](crate::output::UpdateServiceOutput).
    pub fn builder() -> crate::output::update_service_output::Builder {
        crate::output::update_service_output::Builder::default()
    }
}

/// See [`UpdateServiceOutput`](crate::output::UpdateServiceOutput).
pub mod update_service_output {

    /// A builder for [`UpdateServiceOutput`](crate::output::UpdateServiceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service: std::option::Option<crate::model::Service>,
        pub(crate) operation_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
        pub fn service(mut self, input: crate::model::Service) -> Self {
            self.service = Some(input);
            self
        }
        /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
        pub fn set_service(mut self, input: std::option::Option<crate::model::Service>) -> Self {
            self.service = input;
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.operation_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.operation_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UpdateServiceOutput`](crate::output::UpdateServiceOutput).
        pub fn build(self) -> crate::output::UpdateServiceOutput {
            crate::output::UpdateServiceOutput {
                service: self.service,
                operation_id: self.operation_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UntagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for UntagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput).
pub mod untag_resource_output {

    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput).
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TagResourceOutput {
    _request_id: Option<String>,
}
impl aws_http::request_id::RequestId for TagResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput).
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

/// See [`TagResourceOutput`](crate::output::TagResourceOutput).
pub mod tag_resource_output {

    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        _request_id: Option<String>,
    }
    impl Builder {
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput).
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartDeploymentOutput {
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl StartDeploymentOutput {
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for StartDeploymentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartDeploymentOutput {
    /// Creates a new builder-style object to manufacture [`StartDeploymentOutput`](crate::output::StartDeploymentOutput).
    pub fn builder() -> crate::output::start_deployment_output::Builder {
        crate::output::start_deployment_output::Builder::default()
    }
}

/// See [`StartDeploymentOutput`](crate::output::StartDeploymentOutput).
pub mod start_deployment_output {

    /// A builder for [`StartDeploymentOutput`](crate::output::StartDeploymentOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) operation_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.operation_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.operation_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`StartDeploymentOutput`](crate::output::StartDeploymentOutput).
        pub fn build(self) -> crate::output::StartDeploymentOutput {
            crate::output::StartDeploymentOutput {
                operation_id: self.operation_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResumeServiceOutput {
    /// <p>A description of the App Runner service that this request just resumed.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::model::Service>,
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ResumeServiceOutput {
    /// <p>A description of the App Runner service that this request just resumed.</p>
    pub fn service(&self) -> std::option::Option<&crate::model::Service> {
        self.service.as_ref()
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for ResumeServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ResumeServiceOutput {
    /// Creates a new builder-style object to manufacture [`ResumeServiceOutput`](crate::output::ResumeServiceOutput).
    pub fn builder() -> crate::output::resume_service_output::Builder {
        crate::output::resume_service_output::Builder::default()
    }
}

/// See [`ResumeServiceOutput`](crate::output::ResumeServiceOutput).
pub mod resume_service_output {

    /// A builder for [`ResumeServiceOutput`](crate::output::ResumeServiceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service: std::option::Option<crate::model::Service>,
        pub(crate) operation_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner service that this request just resumed.</p>
        pub fn service(mut self, input: crate::model::Service) -> Self {
            self.service = Some(input);
            self
        }
        /// <p>A description of the App Runner service that this request just resumed.</p>
        pub fn set_service(mut self, input: std::option::Option<crate::model::Service>) -> Self {
            self.service = input;
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.operation_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.operation_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ResumeServiceOutput`](crate::output::ResumeServiceOutput).
        pub fn build(self) -> crate::output::ResumeServiceOutput {
            crate::output::ResumeServiceOutput {
                service: self.service,
                operation_id: self.operation_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PauseServiceOutput {
    /// <p>A description of the App Runner service that this request just paused.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::model::Service>,
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl PauseServiceOutput {
    /// <p>A description of the App Runner service that this request just paused.</p>
    pub fn service(&self) -> std::option::Option<&crate::model::Service> {
        self.service.as_ref()
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for PauseServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PauseServiceOutput {
    /// Creates a new builder-style object to manufacture [`PauseServiceOutput`](crate::output::PauseServiceOutput).
    pub fn builder() -> crate::output::pause_service_output::Builder {
        crate::output::pause_service_output::Builder::default()
    }
}

/// See [`PauseServiceOutput`](crate::output::PauseServiceOutput).
pub mod pause_service_output {

    /// A builder for [`PauseServiceOutput`](crate::output::PauseServiceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service: std::option::Option<crate::model::Service>,
        pub(crate) operation_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner service that this request just paused.</p>
        pub fn service(mut self, input: crate::model::Service) -> Self {
            self.service = Some(input);
            self
        }
        /// <p>A description of the App Runner service that this request just paused.</p>
        pub fn set_service(mut self, input: std::option::Option<crate::model::Service>) -> Self {
            self.service = input;
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.operation_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.operation_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`PauseServiceOutput`](crate::output::PauseServiceOutput).
        pub fn build(self) -> crate::output::PauseServiceOutput {
            crate::output::PauseServiceOutput {
                service: self.service,
                operation_id: self.operation_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVpcIngressConnectionsOutput {
    /// <p>A list of summary information records for VPC Ingress Connections. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    #[doc(hidden)]
    pub vpc_ingress_connection_summary_list:
        std::option::Option<std::vec::Vec<crate::model::VpcIngressConnectionSummary>>,
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListVpcIngressConnectionsOutput {
    /// <p>A list of summary information records for VPC Ingress Connections. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    pub fn vpc_ingress_connection_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::VpcIngressConnectionSummary]> {
        self.vpc_ingress_connection_summary_list.as_deref()
    }
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVpcIngressConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListVpcIngressConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`ListVpcIngressConnectionsOutput`](crate::output::ListVpcIngressConnectionsOutput).
    pub fn builder() -> crate::output::list_vpc_ingress_connections_output::Builder {
        crate::output::list_vpc_ingress_connections_output::Builder::default()
    }
}

/// See [`ListVpcIngressConnectionsOutput`](crate::output::ListVpcIngressConnectionsOutput).
pub mod list_vpc_ingress_connections_output {

    /// A builder for [`ListVpcIngressConnectionsOutput`](crate::output::ListVpcIngressConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_ingress_connection_summary_list:
            std::option::Option<std::vec::Vec<crate::model::VpcIngressConnectionSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpc_ingress_connection_summary_list`.
        ///
        /// To override the contents of this collection use [`set_vpc_ingress_connection_summary_list`](Self::set_vpc_ingress_connection_summary_list).
        ///
        /// <p>A list of summary information records for VPC Ingress Connections. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn vpc_ingress_connection_summary_list(
            mut self,
            input: crate::model::VpcIngressConnectionSummary,
        ) -> Self {
            let mut v = self.vpc_ingress_connection_summary_list.unwrap_or_default();
            v.push(input);
            self.vpc_ingress_connection_summary_list = Some(v);
            self
        }
        /// <p>A list of summary information records for VPC Ingress Connections. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn set_vpc_ingress_connection_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcIngressConnectionSummary>>,
        ) -> Self {
            self.vpc_ingress_connection_summary_list = input;
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVpcIngressConnectionsOutput`](crate::output::ListVpcIngressConnectionsOutput).
        pub fn build(self) -> crate::output::ListVpcIngressConnectionsOutput {
            crate::output::ListVpcIngressConnectionsOutput {
                vpc_ingress_connection_summary_list: self.vpc_ingress_connection_summary_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListVpcConnectorsOutput {
    /// <p>A list of information records for VPC connectors. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    #[doc(hidden)]
    pub vpc_connectors: std::option::Option<std::vec::Vec<crate::model::VpcConnector>>,
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListVpcConnectorsOutput {
    /// <p>A list of information records for VPC connectors. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    pub fn vpc_connectors(&self) -> std::option::Option<&[crate::model::VpcConnector]> {
        self.vpc_connectors.as_deref()
    }
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListVpcConnectorsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListVpcConnectorsOutput {
    /// Creates a new builder-style object to manufacture [`ListVpcConnectorsOutput`](crate::output::ListVpcConnectorsOutput).
    pub fn builder() -> crate::output::list_vpc_connectors_output::Builder {
        crate::output::list_vpc_connectors_output::Builder::default()
    }
}

/// See [`ListVpcConnectorsOutput`](crate::output::ListVpcConnectorsOutput).
pub mod list_vpc_connectors_output {

    /// A builder for [`ListVpcConnectorsOutput`](crate::output::ListVpcConnectorsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_connectors: std::option::Option<std::vec::Vec<crate::model::VpcConnector>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `vpc_connectors`.
        ///
        /// To override the contents of this collection use [`set_vpc_connectors`](Self::set_vpc_connectors).
        ///
        /// <p>A list of information records for VPC connectors. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn vpc_connectors(mut self, input: crate::model::VpcConnector) -> Self {
            let mut v = self.vpc_connectors.unwrap_or_default();
            v.push(input);
            self.vpc_connectors = Some(v);
            self
        }
        /// <p>A list of information records for VPC connectors. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn set_vpc_connectors(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcConnector>>,
        ) -> Self {
            self.vpc_connectors = input;
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListVpcConnectorsOutput`](crate::output::ListVpcConnectorsOutput).
        pub fn build(self) -> crate::output::ListVpcConnectorsOutput {
            crate::output::ListVpcConnectorsOutput {
                vpc_connectors: self.vpc_connectors,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTagsForResourceOutput {
    /// <p>A list of the tag key-value pairs that are associated with the resource.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    _request_id: Option<String>,
}
impl ListTagsForResourceOutput {
    /// <p>A list of the tag key-value pairs that are associated with the resource.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tags.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTagsForResourceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
pub mod list_tags_for_resource_output {

    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of the tag key-value pairs that are associated with the resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input);
            self.tags = Some(v);
            self
        }
        /// <p>A list of the tag key-value pairs that are associated with the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput).
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tags: self.tags,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListServicesOutput {
    /// <p>A list of service summary information records. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    #[doc(hidden)]
    pub service_summary_list: std::option::Option<std::vec::Vec<crate::model::ServiceSummary>>,
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListServicesOutput {
    /// <p>A list of service summary information records. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    pub fn service_summary_list(&self) -> std::option::Option<&[crate::model::ServiceSummary]> {
        self.service_summary_list.as_deref()
    }
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListServicesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListServicesOutput {
    /// Creates a new builder-style object to manufacture [`ListServicesOutput`](crate::output::ListServicesOutput).
    pub fn builder() -> crate::output::list_services_output::Builder {
        crate::output::list_services_output::Builder::default()
    }
}

/// See [`ListServicesOutput`](crate::output::ListServicesOutput).
pub mod list_services_output {

    /// A builder for [`ListServicesOutput`](crate::output::ListServicesOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ServiceSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `service_summary_list`.
        ///
        /// To override the contents of this collection use [`set_service_summary_list`](Self::set_service_summary_list).
        ///
        /// <p>A list of service summary information records. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn service_summary_list(mut self, input: crate::model::ServiceSummary) -> Self {
            let mut v = self.service_summary_list.unwrap_or_default();
            v.push(input);
            self.service_summary_list = Some(v);
            self
        }
        /// <p>A list of service summary information records. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn set_service_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ServiceSummary>>,
        ) -> Self {
            self.service_summary_list = input;
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListServicesOutput`](crate::output::ListServicesOutput).
        pub fn build(self) -> crate::output::ListServicesOutput {
            crate::output::ListServicesOutput {
                service_summary_list: self.service_summary_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListOperationsOutput {
    /// <p>A list of operation summary information records. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    #[doc(hidden)]
    pub operation_summary_list: std::option::Option<std::vec::Vec<crate::model::OperationSummary>>,
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListOperationsOutput {
    /// <p>A list of operation summary information records. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    pub fn operation_summary_list(&self) -> std::option::Option<&[crate::model::OperationSummary]> {
        self.operation_summary_list.as_deref()
    }
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListOperationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListOperationsOutput {
    /// Creates a new builder-style object to manufacture [`ListOperationsOutput`](crate::output::ListOperationsOutput).
    pub fn builder() -> crate::output::list_operations_output::Builder {
        crate::output::list_operations_output::Builder::default()
    }
}

/// See [`ListOperationsOutput`](crate::output::ListOperationsOutput).
pub mod list_operations_output {

    /// A builder for [`ListOperationsOutput`](crate::output::ListOperationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) operation_summary_list:
            std::option::Option<std::vec::Vec<crate::model::OperationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `operation_summary_list`.
        ///
        /// To override the contents of this collection use [`set_operation_summary_list`](Self::set_operation_summary_list).
        ///
        /// <p>A list of operation summary information records. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn operation_summary_list(mut self, input: crate::model::OperationSummary) -> Self {
            let mut v = self.operation_summary_list.unwrap_or_default();
            v.push(input);
            self.operation_summary_list = Some(v);
            self
        }
        /// <p>A list of operation summary information records. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn set_operation_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OperationSummary>>,
        ) -> Self {
            self.operation_summary_list = input;
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListOperationsOutput`](crate::output::ListOperationsOutput).
        pub fn build(self) -> crate::output::ListOperationsOutput {
            crate::output::ListOperationsOutput {
                operation_summary_list: self.operation_summary_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListObservabilityConfigurationsOutput {
    /// <p>A list of summary information records for observability configurations. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    #[doc(hidden)]
    pub observability_configuration_summary_list:
        std::option::Option<std::vec::Vec<crate::model::ObservabilityConfigurationSummary>>,
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListObservabilityConfigurationsOutput {
    /// <p>A list of summary information records for observability configurations. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    pub fn observability_configuration_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::ObservabilityConfigurationSummary]> {
        self.observability_configuration_summary_list.as_deref()
    }
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListObservabilityConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListObservabilityConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListObservabilityConfigurationsOutput`](crate::output::ListObservabilityConfigurationsOutput).
    pub fn builder() -> crate::output::list_observability_configurations_output::Builder {
        crate::output::list_observability_configurations_output::Builder::default()
    }
}

/// See [`ListObservabilityConfigurationsOutput`](crate::output::ListObservabilityConfigurationsOutput).
pub mod list_observability_configurations_output {

    /// A builder for [`ListObservabilityConfigurationsOutput`](crate::output::ListObservabilityConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) observability_configuration_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ObservabilityConfigurationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `observability_configuration_summary_list`.
        ///
        /// To override the contents of this collection use [`set_observability_configuration_summary_list`](Self::set_observability_configuration_summary_list).
        ///
        /// <p>A list of summary information records for observability configurations. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn observability_configuration_summary_list(
            mut self,
            input: crate::model::ObservabilityConfigurationSummary,
        ) -> Self {
            let mut v = self
                .observability_configuration_summary_list
                .unwrap_or_default();
            v.push(input);
            self.observability_configuration_summary_list = Some(v);
            self
        }
        /// <p>A list of summary information records for observability configurations. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn set_observability_configuration_summary_list(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ObservabilityConfigurationSummary>,
            >,
        ) -> Self {
            self.observability_configuration_summary_list = input;
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListObservabilityConfigurationsOutput`](crate::output::ListObservabilityConfigurationsOutput).
        pub fn build(self) -> crate::output::ListObservabilityConfigurationsOutput {
            crate::output::ListObservabilityConfigurationsOutput {
                observability_configuration_summary_list: self
                    .observability_configuration_summary_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListConnectionsOutput {
    /// <p>A list of summary information records for connections. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    #[doc(hidden)]
    pub connection_summary_list:
        std::option::Option<std::vec::Vec<crate::model::ConnectionSummary>>,
    /// <p>The token that you can pass in a subsequent request to get the next result page. Returned in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListConnectionsOutput {
    /// <p>A list of summary information records for connections. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    pub fn connection_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::ConnectionSummary]> {
        self.connection_summary_list.as_deref()
    }
    /// <p>The token that you can pass in a subsequent request to get the next result page. Returned in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListConnectionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListConnectionsOutput {
    /// Creates a new builder-style object to manufacture [`ListConnectionsOutput`](crate::output::ListConnectionsOutput).
    pub fn builder() -> crate::output::list_connections_output::Builder {
        crate::output::list_connections_output::Builder::default()
    }
}

/// See [`ListConnectionsOutput`](crate::output::ListConnectionsOutput).
pub mod list_connections_output {

    /// A builder for [`ListConnectionsOutput`](crate::output::ListConnectionsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ConnectionSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `connection_summary_list`.
        ///
        /// To override the contents of this collection use [`set_connection_summary_list`](Self::set_connection_summary_list).
        ///
        /// <p>A list of summary information records for connections. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn connection_summary_list(mut self, input: crate::model::ConnectionSummary) -> Self {
            let mut v = self.connection_summary_list.unwrap_or_default();
            v.push(input);
            self.connection_summary_list = Some(v);
            self
        }
        /// <p>A list of summary information records for connections. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn set_connection_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ConnectionSummary>>,
        ) -> Self {
            self.connection_summary_list = input;
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. Returned in a paginated request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. Returned in a paginated request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListConnectionsOutput`](crate::output::ListConnectionsOutput).
        pub fn build(self) -> crate::output::ListConnectionsOutput {
            crate::output::ListConnectionsOutput {
                connection_summary_list: self.connection_summary_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListAutoScalingConfigurationsOutput {
    /// <p>A list of summary information records for auto scaling configurations. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    #[doc(hidden)]
    pub auto_scaling_configuration_summary_list:
        std::option::Option<std::vec::Vec<crate::model::AutoScalingConfigurationSummary>>,
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListAutoScalingConfigurationsOutput {
    /// <p>A list of summary information records for auto scaling configurations. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
    pub fn auto_scaling_configuration_summary_list(
        &self,
    ) -> std::option::Option<&[crate::model::AutoScalingConfigurationSummary]> {
        self.auto_scaling_configuration_summary_list.as_deref()
    }
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListAutoScalingConfigurationsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListAutoScalingConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListAutoScalingConfigurationsOutput`](crate::output::ListAutoScalingConfigurationsOutput).
    pub fn builder() -> crate::output::list_auto_scaling_configurations_output::Builder {
        crate::output::list_auto_scaling_configurations_output::Builder::default()
    }
}

/// See [`ListAutoScalingConfigurationsOutput`](crate::output::ListAutoScalingConfigurationsOutput).
pub mod list_auto_scaling_configurations_output {

    /// A builder for [`ListAutoScalingConfigurationsOutput`](crate::output::ListAutoScalingConfigurationsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_scaling_configuration_summary_list:
            std::option::Option<std::vec::Vec<crate::model::AutoScalingConfigurationSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// Appends an item to `auto_scaling_configuration_summary_list`.
        ///
        /// To override the contents of this collection use [`set_auto_scaling_configuration_summary_list`](Self::set_auto_scaling_configuration_summary_list).
        ///
        /// <p>A list of summary information records for auto scaling configurations. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn auto_scaling_configuration_summary_list(
            mut self,
            input: crate::model::AutoScalingConfigurationSummary,
        ) -> Self {
            let mut v = self
                .auto_scaling_configuration_summary_list
                .unwrap_or_default();
            v.push(input);
            self.auto_scaling_configuration_summary_list = Some(v);
            self
        }
        /// <p>A list of summary information records for auto scaling configurations. In a paginated request, the request returns up to <code>MaxResults</code> records for each call.</p>
        pub fn set_auto_scaling_configuration_summary_list(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::AutoScalingConfigurationSummary>,
            >,
        ) -> Self {
            self.auto_scaling_configuration_summary_list = input;
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`ListAutoScalingConfigurationsOutput`](crate::output::ListAutoScalingConfigurationsOutput).
        pub fn build(self) -> crate::output::ListAutoScalingConfigurationsOutput {
            crate::output::ListAutoScalingConfigurationsOutput {
                auto_scaling_configuration_summary_list: self
                    .auto_scaling_configuration_summary_list,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DisassociateCustomDomainOutput {
    /// <p>The App Runner subdomain of the App Runner service. The disassociated custom domain name was mapped to this target name.</p>
    #[doc(hidden)]
    pub dns_target: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the App Runner service that a custom domain name is disassociated from.</p>
    #[doc(hidden)]
    pub service_arn: std::option::Option<std::string::String>,
    /// <p>A description of the domain name that's being disassociated.</p>
    #[doc(hidden)]
    pub custom_domain: std::option::Option<crate::model::CustomDomain>,
    /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
    #[doc(hidden)]
    pub vpc_dns_targets: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
    _request_id: Option<String>,
}
impl DisassociateCustomDomainOutput {
    /// <p>The App Runner subdomain of the App Runner service. The disassociated custom domain name was mapped to this target name.</p>
    pub fn dns_target(&self) -> std::option::Option<&str> {
        self.dns_target.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner service that a custom domain name is disassociated from.</p>
    pub fn service_arn(&self) -> std::option::Option<&str> {
        self.service_arn.as_deref()
    }
    /// <p>A description of the domain name that's being disassociated.</p>
    pub fn custom_domain(&self) -> std::option::Option<&crate::model::CustomDomain> {
        self.custom_domain.as_ref()
    }
    /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
    pub fn vpc_dns_targets(&self) -> std::option::Option<&[crate::model::VpcDnsTarget]> {
        self.vpc_dns_targets.as_deref()
    }
}
impl aws_http::request_id::RequestId for DisassociateCustomDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DisassociateCustomDomainOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateCustomDomainOutput`](crate::output::DisassociateCustomDomainOutput).
    pub fn builder() -> crate::output::disassociate_custom_domain_output::Builder {
        crate::output::disassociate_custom_domain_output::Builder::default()
    }
}

/// See [`DisassociateCustomDomainOutput`](crate::output::DisassociateCustomDomainOutput).
pub mod disassociate_custom_domain_output {

    /// A builder for [`DisassociateCustomDomainOutput`](crate::output::DisassociateCustomDomainOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dns_target: std::option::Option<std::string::String>,
        pub(crate) service_arn: std::option::Option<std::string::String>,
        pub(crate) custom_domain: std::option::Option<crate::model::CustomDomain>,
        pub(crate) vpc_dns_targets: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The App Runner subdomain of the App Runner service. The disassociated custom domain name was mapped to this target name.</p>
        pub fn dns_target(mut self, input: impl Into<std::string::String>) -> Self {
            self.dns_target = Some(input.into());
            self
        }
        /// <p>The App Runner subdomain of the App Runner service. The disassociated custom domain name was mapped to this target name.</p>
        pub fn set_dns_target(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dns_target = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the App Runner service that a custom domain name is disassociated from.</p>
        pub fn service_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the App Runner service that a custom domain name is disassociated from.</p>
        pub fn set_service_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.service_arn = input;
            self
        }
        /// <p>A description of the domain name that's being disassociated.</p>
        pub fn custom_domain(mut self, input: crate::model::CustomDomain) -> Self {
            self.custom_domain = Some(input);
            self
        }
        /// <p>A description of the domain name that's being disassociated.</p>
        pub fn set_custom_domain(
            mut self,
            input: std::option::Option<crate::model::CustomDomain>,
        ) -> Self {
            self.custom_domain = input;
            self
        }
        /// Appends an item to `vpc_dns_targets`.
        ///
        /// To override the contents of this collection use [`set_vpc_dns_targets`](Self::set_vpc_dns_targets).
        ///
        /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
        pub fn vpc_dns_targets(mut self, input: crate::model::VpcDnsTarget) -> Self {
            let mut v = self.vpc_dns_targets.unwrap_or_default();
            v.push(input);
            self.vpc_dns_targets = Some(v);
            self
        }
        /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
        pub fn set_vpc_dns_targets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
        ) -> Self {
            self.vpc_dns_targets = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateCustomDomainOutput`](crate::output::DisassociateCustomDomainOutput).
        pub fn build(self) -> crate::output::DisassociateCustomDomainOutput {
            crate::output::DisassociateCustomDomainOutput {
                dns_target: self.dns_target,
                service_arn: self.service_arn,
                custom_domain: self.custom_domain,
                vpc_dns_targets: self.vpc_dns_targets,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcIngressConnectionOutput {
    /// <p>A description of the App Runner VPC Ingress Connection that you specified in this request.</p>
    #[doc(hidden)]
    pub vpc_ingress_connection: std::option::Option<crate::model::VpcIngressConnection>,
    _request_id: Option<String>,
}
impl DescribeVpcIngressConnectionOutput {
    /// <p>A description of the App Runner VPC Ingress Connection that you specified in this request.</p>
    pub fn vpc_ingress_connection(
        &self,
    ) -> std::option::Option<&crate::model::VpcIngressConnection> {
        self.vpc_ingress_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcIngressConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeVpcIngressConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcIngressConnectionOutput`](crate::output::DescribeVpcIngressConnectionOutput).
    pub fn builder() -> crate::output::describe_vpc_ingress_connection_output::Builder {
        crate::output::describe_vpc_ingress_connection_output::Builder::default()
    }
}

/// See [`DescribeVpcIngressConnectionOutput`](crate::output::DescribeVpcIngressConnectionOutput).
pub mod describe_vpc_ingress_connection_output {

    /// A builder for [`DescribeVpcIngressConnectionOutput`](crate::output::DescribeVpcIngressConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_ingress_connection: std::option::Option<crate::model::VpcIngressConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner VPC Ingress Connection that you specified in this request.</p>
        pub fn vpc_ingress_connection(mut self, input: crate::model::VpcIngressConnection) -> Self {
            self.vpc_ingress_connection = Some(input);
            self
        }
        /// <p>A description of the App Runner VPC Ingress Connection that you specified in this request.</p>
        pub fn set_vpc_ingress_connection(
            mut self,
            input: std::option::Option<crate::model::VpcIngressConnection>,
        ) -> Self {
            self.vpc_ingress_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcIngressConnectionOutput`](crate::output::DescribeVpcIngressConnectionOutput).
        pub fn build(self) -> crate::output::DescribeVpcIngressConnectionOutput {
            crate::output::DescribeVpcIngressConnectionOutput {
                vpc_ingress_connection: self.vpc_ingress_connection,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVpcConnectorOutput {
    /// <p>A description of the App Runner VPC connector that you specified in this request.</p>
    #[doc(hidden)]
    pub vpc_connector: std::option::Option<crate::model::VpcConnector>,
    _request_id: Option<String>,
}
impl DescribeVpcConnectorOutput {
    /// <p>A description of the App Runner VPC connector that you specified in this request.</p>
    pub fn vpc_connector(&self) -> std::option::Option<&crate::model::VpcConnector> {
        self.vpc_connector.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeVpcConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeVpcConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVpcConnectorOutput`](crate::output::DescribeVpcConnectorOutput).
    pub fn builder() -> crate::output::describe_vpc_connector_output::Builder {
        crate::output::describe_vpc_connector_output::Builder::default()
    }
}

/// See [`DescribeVpcConnectorOutput`](crate::output::DescribeVpcConnectorOutput).
pub mod describe_vpc_connector_output {

    /// A builder for [`DescribeVpcConnectorOutput`](crate::output::DescribeVpcConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_connector: std::option::Option<crate::model::VpcConnector>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner VPC connector that you specified in this request.</p>
        pub fn vpc_connector(mut self, input: crate::model::VpcConnector) -> Self {
            self.vpc_connector = Some(input);
            self
        }
        /// <p>A description of the App Runner VPC connector that you specified in this request.</p>
        pub fn set_vpc_connector(
            mut self,
            input: std::option::Option<crate::model::VpcConnector>,
        ) -> Self {
            self.vpc_connector = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeVpcConnectorOutput`](crate::output::DescribeVpcConnectorOutput).
        pub fn build(self) -> crate::output::DescribeVpcConnectorOutput {
            crate::output::DescribeVpcConnectorOutput {
                vpc_connector: self.vpc_connector,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeServiceOutput {
    /// <p>A full description of the App Runner service that you specified in this request.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::model::Service>,
    _request_id: Option<String>,
}
impl DescribeServiceOutput {
    /// <p>A full description of the App Runner service that you specified in this request.</p>
    pub fn service(&self) -> std::option::Option<&crate::model::Service> {
        self.service.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeServiceOutput {
    /// Creates a new builder-style object to manufacture [`DescribeServiceOutput`](crate::output::DescribeServiceOutput).
    pub fn builder() -> crate::output::describe_service_output::Builder {
        crate::output::describe_service_output::Builder::default()
    }
}

/// See [`DescribeServiceOutput`](crate::output::DescribeServiceOutput).
pub mod describe_service_output {

    /// A builder for [`DescribeServiceOutput`](crate::output::DescribeServiceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service: std::option::Option<crate::model::Service>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A full description of the App Runner service that you specified in this request.</p>
        pub fn service(mut self, input: crate::model::Service) -> Self {
            self.service = Some(input);
            self
        }
        /// <p>A full description of the App Runner service that you specified in this request.</p>
        pub fn set_service(mut self, input: std::option::Option<crate::model::Service>) -> Self {
            self.service = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeServiceOutput`](crate::output::DescribeServiceOutput).
        pub fn build(self) -> crate::output::DescribeServiceOutput {
            crate::output::DescribeServiceOutput {
                service: self.service,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeObservabilityConfigurationOutput {
    /// <p>A full description of the App Runner observability configuration that you specified in this request.</p>
    #[doc(hidden)]
    pub observability_configuration: std::option::Option<crate::model::ObservabilityConfiguration>,
    _request_id: Option<String>,
}
impl DescribeObservabilityConfigurationOutput {
    /// <p>A full description of the App Runner observability configuration that you specified in this request.</p>
    pub fn observability_configuration(
        &self,
    ) -> std::option::Option<&crate::model::ObservabilityConfiguration> {
        self.observability_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeObservabilityConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeObservabilityConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeObservabilityConfigurationOutput`](crate::output::DescribeObservabilityConfigurationOutput).
    pub fn builder() -> crate::output::describe_observability_configuration_output::Builder {
        crate::output::describe_observability_configuration_output::Builder::default()
    }
}

/// See [`DescribeObservabilityConfigurationOutput`](crate::output::DescribeObservabilityConfigurationOutput).
pub mod describe_observability_configuration_output {

    /// A builder for [`DescribeObservabilityConfigurationOutput`](crate::output::DescribeObservabilityConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) observability_configuration:
            std::option::Option<crate::model::ObservabilityConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A full description of the App Runner observability configuration that you specified in this request.</p>
        pub fn observability_configuration(
            mut self,
            input: crate::model::ObservabilityConfiguration,
        ) -> Self {
            self.observability_configuration = Some(input);
            self
        }
        /// <p>A full description of the App Runner observability configuration that you specified in this request.</p>
        pub fn set_observability_configuration(
            mut self,
            input: std::option::Option<crate::model::ObservabilityConfiguration>,
        ) -> Self {
            self.observability_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeObservabilityConfigurationOutput`](crate::output::DescribeObservabilityConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeObservabilityConfigurationOutput {
            crate::output::DescribeObservabilityConfigurationOutput {
                observability_configuration: self.observability_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCustomDomainsOutput {
    /// <p>The App Runner subdomain of the App Runner service. The associated custom domain names are mapped to this target name.</p>
    #[doc(hidden)]
    pub dns_target: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the App Runner service whose associated custom domain names you want to describe.</p>
    #[doc(hidden)]
    pub service_arn: std::option::Option<std::string::String>,
    /// <p>A list of descriptions of custom domain names that are associated with the service. In a paginated request, the request returns up to <code>MaxResults</code> records per call.</p>
    #[doc(hidden)]
    pub custom_domains: std::option::Option<std::vec::Vec<crate::model::CustomDomain>>,
    /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
    #[doc(hidden)]
    pub vpc_dns_targets: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeCustomDomainsOutput {
    /// <p>The App Runner subdomain of the App Runner service. The associated custom domain names are mapped to this target name.</p>
    pub fn dns_target(&self) -> std::option::Option<&str> {
        self.dns_target.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner service whose associated custom domain names you want to describe.</p>
    pub fn service_arn(&self) -> std::option::Option<&str> {
        self.service_arn.as_deref()
    }
    /// <p>A list of descriptions of custom domain names that are associated with the service. In a paginated request, the request returns up to <code>MaxResults</code> records per call.</p>
    pub fn custom_domains(&self) -> std::option::Option<&[crate::model::CustomDomain]> {
        self.custom_domains.as_deref()
    }
    /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
    pub fn vpc_dns_targets(&self) -> std::option::Option<&[crate::model::VpcDnsTarget]> {
        self.vpc_dns_targets.as_deref()
    }
    /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeCustomDomainsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeCustomDomainsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeCustomDomainsOutput`](crate::output::DescribeCustomDomainsOutput).
    pub fn builder() -> crate::output::describe_custom_domains_output::Builder {
        crate::output::describe_custom_domains_output::Builder::default()
    }
}

/// See [`DescribeCustomDomainsOutput`](crate::output::DescribeCustomDomainsOutput).
pub mod describe_custom_domains_output {

    /// A builder for [`DescribeCustomDomainsOutput`](crate::output::DescribeCustomDomainsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dns_target: std::option::Option<std::string::String>,
        pub(crate) service_arn: std::option::Option<std::string::String>,
        pub(crate) custom_domains: std::option::Option<std::vec::Vec<crate::model::CustomDomain>>,
        pub(crate) vpc_dns_targets: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The App Runner subdomain of the App Runner service. The associated custom domain names are mapped to this target name.</p>
        pub fn dns_target(mut self, input: impl Into<std::string::String>) -> Self {
            self.dns_target = Some(input.into());
            self
        }
        /// <p>The App Runner subdomain of the App Runner service. The associated custom domain names are mapped to this target name.</p>
        pub fn set_dns_target(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dns_target = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the App Runner service whose associated custom domain names you want to describe.</p>
        pub fn service_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the App Runner service whose associated custom domain names you want to describe.</p>
        pub fn set_service_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.service_arn = input;
            self
        }
        /// Appends an item to `custom_domains`.
        ///
        /// To override the contents of this collection use [`set_custom_domains`](Self::set_custom_domains).
        ///
        /// <p>A list of descriptions of custom domain names that are associated with the service. In a paginated request, the request returns up to <code>MaxResults</code> records per call.</p>
        pub fn custom_domains(mut self, input: crate::model::CustomDomain) -> Self {
            let mut v = self.custom_domains.unwrap_or_default();
            v.push(input);
            self.custom_domains = Some(v);
            self
        }
        /// <p>A list of descriptions of custom domain names that are associated with the service. In a paginated request, the request returns up to <code>MaxResults</code> records per call.</p>
        pub fn set_custom_domains(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::CustomDomain>>,
        ) -> Self {
            self.custom_domains = input;
            self
        }
        /// Appends an item to `vpc_dns_targets`.
        ///
        /// To override the contents of this collection use [`set_vpc_dns_targets`](Self::set_vpc_dns_targets).
        ///
        /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
        pub fn vpc_dns_targets(mut self, input: crate::model::VpcDnsTarget) -> Self {
            let mut v = self.vpc_dns_targets.unwrap_or_default();
            v.push(input);
            self.vpc_dns_targets = Some(v);
            self
        }
        /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
        pub fn set_vpc_dns_targets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
        ) -> Self {
            self.vpc_dns_targets = input;
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The token that you can pass in a subsequent request to get the next result page. It's returned in a paginated request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeCustomDomainsOutput`](crate::output::DescribeCustomDomainsOutput).
        pub fn build(self) -> crate::output::DescribeCustomDomainsOutput {
            crate::output::DescribeCustomDomainsOutput {
                dns_target: self.dns_target,
                service_arn: self.service_arn,
                custom_domains: self.custom_domains,
                vpc_dns_targets: self.vpc_dns_targets,
                next_token: self.next_token,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeAutoScalingConfigurationOutput {
    /// <p>A full description of the App Runner auto scaling configuration that you specified in this request.</p>
    #[doc(hidden)]
    pub auto_scaling_configuration: std::option::Option<crate::model::AutoScalingConfiguration>,
    _request_id: Option<String>,
}
impl DescribeAutoScalingConfigurationOutput {
    /// <p>A full description of the App Runner auto scaling configuration that you specified in this request.</p>
    pub fn auto_scaling_configuration(
        &self,
    ) -> std::option::Option<&crate::model::AutoScalingConfiguration> {
        self.auto_scaling_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DescribeAutoScalingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAutoScalingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAutoScalingConfigurationOutput`](crate::output::DescribeAutoScalingConfigurationOutput).
    pub fn builder() -> crate::output::describe_auto_scaling_configuration_output::Builder {
        crate::output::describe_auto_scaling_configuration_output::Builder::default()
    }
}

/// See [`DescribeAutoScalingConfigurationOutput`](crate::output::DescribeAutoScalingConfigurationOutput).
pub mod describe_auto_scaling_configuration_output {

    /// A builder for [`DescribeAutoScalingConfigurationOutput`](crate::output::DescribeAutoScalingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_scaling_configuration:
            std::option::Option<crate::model::AutoScalingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A full description of the App Runner auto scaling configuration that you specified in this request.</p>
        pub fn auto_scaling_configuration(
            mut self,
            input: crate::model::AutoScalingConfiguration,
        ) -> Self {
            self.auto_scaling_configuration = Some(input);
            self
        }
        /// <p>A full description of the App Runner auto scaling configuration that you specified in this request.</p>
        pub fn set_auto_scaling_configuration(
            mut self,
            input: std::option::Option<crate::model::AutoScalingConfiguration>,
        ) -> Self {
            self.auto_scaling_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DescribeAutoScalingConfigurationOutput`](crate::output::DescribeAutoScalingConfigurationOutput).
        pub fn build(self) -> crate::output::DescribeAutoScalingConfigurationOutput {
            crate::output::DescribeAutoScalingConfigurationOutput {
                auto_scaling_configuration: self.auto_scaling_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcIngressConnectionOutput {
    /// <p>A description of the App Runner VPC Ingress Connection that this request just deleted.</p>
    #[doc(hidden)]
    pub vpc_ingress_connection: std::option::Option<crate::model::VpcIngressConnection>,
    _request_id: Option<String>,
}
impl DeleteVpcIngressConnectionOutput {
    /// <p>A description of the App Runner VPC Ingress Connection that this request just deleted.</p>
    pub fn vpc_ingress_connection(
        &self,
    ) -> std::option::Option<&crate::model::VpcIngressConnection> {
        self.vpc_ingress_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteVpcIngressConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVpcIngressConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcIngressConnectionOutput`](crate::output::DeleteVpcIngressConnectionOutput).
    pub fn builder() -> crate::output::delete_vpc_ingress_connection_output::Builder {
        crate::output::delete_vpc_ingress_connection_output::Builder::default()
    }
}

/// See [`DeleteVpcIngressConnectionOutput`](crate::output::DeleteVpcIngressConnectionOutput).
pub mod delete_vpc_ingress_connection_output {

    /// A builder for [`DeleteVpcIngressConnectionOutput`](crate::output::DeleteVpcIngressConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_ingress_connection: std::option::Option<crate::model::VpcIngressConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner VPC Ingress Connection that this request just deleted.</p>
        pub fn vpc_ingress_connection(mut self, input: crate::model::VpcIngressConnection) -> Self {
            self.vpc_ingress_connection = Some(input);
            self
        }
        /// <p>A description of the App Runner VPC Ingress Connection that this request just deleted.</p>
        pub fn set_vpc_ingress_connection(
            mut self,
            input: std::option::Option<crate::model::VpcIngressConnection>,
        ) -> Self {
            self.vpc_ingress_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcIngressConnectionOutput`](crate::output::DeleteVpcIngressConnectionOutput).
        pub fn build(self) -> crate::output::DeleteVpcIngressConnectionOutput {
            crate::output::DeleteVpcIngressConnectionOutput {
                vpc_ingress_connection: self.vpc_ingress_connection,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteVpcConnectorOutput {
    /// <p>A description of the App Runner VPC connector that this request just deleted.</p>
    #[doc(hidden)]
    pub vpc_connector: std::option::Option<crate::model::VpcConnector>,
    _request_id: Option<String>,
}
impl DeleteVpcConnectorOutput {
    /// <p>A description of the App Runner VPC connector that this request just deleted.</p>
    pub fn vpc_connector(&self) -> std::option::Option<&crate::model::VpcConnector> {
        self.vpc_connector.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteVpcConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteVpcConnectorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteVpcConnectorOutput`](crate::output::DeleteVpcConnectorOutput).
    pub fn builder() -> crate::output::delete_vpc_connector_output::Builder {
        crate::output::delete_vpc_connector_output::Builder::default()
    }
}

/// See [`DeleteVpcConnectorOutput`](crate::output::DeleteVpcConnectorOutput).
pub mod delete_vpc_connector_output {

    /// A builder for [`DeleteVpcConnectorOutput`](crate::output::DeleteVpcConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_connector: std::option::Option<crate::model::VpcConnector>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner VPC connector that this request just deleted.</p>
        pub fn vpc_connector(mut self, input: crate::model::VpcConnector) -> Self {
            self.vpc_connector = Some(input);
            self
        }
        /// <p>A description of the App Runner VPC connector that this request just deleted.</p>
        pub fn set_vpc_connector(
            mut self,
            input: std::option::Option<crate::model::VpcConnector>,
        ) -> Self {
            self.vpc_connector = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteVpcConnectorOutput`](crate::output::DeleteVpcConnectorOutput).
        pub fn build(self) -> crate::output::DeleteVpcConnectorOutput {
            crate::output::DeleteVpcConnectorOutput {
                vpc_connector: self.vpc_connector,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteServiceOutput {
    /// <p>A description of the App Runner service that this request just deleted.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::model::Service>,
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteServiceOutput {
    /// <p>A description of the App Runner service that this request just deleted.</p>
    pub fn service(&self) -> std::option::Option<&crate::model::Service> {
        self.service.as_ref()
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteServiceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteServiceOutput`](crate::output::DeleteServiceOutput).
    pub fn builder() -> crate::output::delete_service_output::Builder {
        crate::output::delete_service_output::Builder::default()
    }
}

/// See [`DeleteServiceOutput`](crate::output::DeleteServiceOutput).
pub mod delete_service_output {

    /// A builder for [`DeleteServiceOutput`](crate::output::DeleteServiceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service: std::option::Option<crate::model::Service>,
        pub(crate) operation_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner service that this request just deleted.</p>
        pub fn service(mut self, input: crate::model::Service) -> Self {
            self.service = Some(input);
            self
        }
        /// <p>A description of the App Runner service that this request just deleted.</p>
        pub fn set_service(mut self, input: std::option::Option<crate::model::Service>) -> Self {
            self.service = input;
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.operation_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
        pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.operation_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteServiceOutput`](crate::output::DeleteServiceOutput).
        pub fn build(self) -> crate::output::DeleteServiceOutput {
            crate::output::DeleteServiceOutput {
                service: self.service,
                operation_id: self.operation_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteObservabilityConfigurationOutput {
    /// <p>A description of the App Runner observability configuration that this request just deleted.</p>
    #[doc(hidden)]
    pub observability_configuration: std::option::Option<crate::model::ObservabilityConfiguration>,
    _request_id: Option<String>,
}
impl DeleteObservabilityConfigurationOutput {
    /// <p>A description of the App Runner observability configuration that this request just deleted.</p>
    pub fn observability_configuration(
        &self,
    ) -> std::option::Option<&crate::model::ObservabilityConfiguration> {
        self.observability_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteObservabilityConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteObservabilityConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteObservabilityConfigurationOutput`](crate::output::DeleteObservabilityConfigurationOutput).
    pub fn builder() -> crate::output::delete_observability_configuration_output::Builder {
        crate::output::delete_observability_configuration_output::Builder::default()
    }
}

/// See [`DeleteObservabilityConfigurationOutput`](crate::output::DeleteObservabilityConfigurationOutput).
pub mod delete_observability_configuration_output {

    /// A builder for [`DeleteObservabilityConfigurationOutput`](crate::output::DeleteObservabilityConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) observability_configuration:
            std::option::Option<crate::model::ObservabilityConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner observability configuration that this request just deleted.</p>
        pub fn observability_configuration(
            mut self,
            input: crate::model::ObservabilityConfiguration,
        ) -> Self {
            self.observability_configuration = Some(input);
            self
        }
        /// <p>A description of the App Runner observability configuration that this request just deleted.</p>
        pub fn set_observability_configuration(
            mut self,
            input: std::option::Option<crate::model::ObservabilityConfiguration>,
        ) -> Self {
            self.observability_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteObservabilityConfigurationOutput`](crate::output::DeleteObservabilityConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteObservabilityConfigurationOutput {
            crate::output::DeleteObservabilityConfigurationOutput {
                observability_configuration: self.observability_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteConnectionOutput {
    /// <p>A description of the App Runner connection that this request just deleted.</p>
    #[doc(hidden)]
    pub connection: std::option::Option<crate::model::Connection>,
    _request_id: Option<String>,
}
impl DeleteConnectionOutput {
    /// <p>A description of the App Runner connection that this request just deleted.</p>
    pub fn connection(&self) -> std::option::Option<&crate::model::Connection> {
        self.connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteConnectionOutput {
    /// Creates a new builder-style object to manufacture [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput).
    pub fn builder() -> crate::output::delete_connection_output::Builder {
        crate::output::delete_connection_output::Builder::default()
    }
}

/// See [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput).
pub mod delete_connection_output {

    /// A builder for [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection: std::option::Option<crate::model::Connection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner connection that this request just deleted.</p>
        pub fn connection(mut self, input: crate::model::Connection) -> Self {
            self.connection = Some(input);
            self
        }
        /// <p>A description of the App Runner connection that this request just deleted.</p>
        pub fn set_connection(
            mut self,
            input: std::option::Option<crate::model::Connection>,
        ) -> Self {
            self.connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteConnectionOutput`](crate::output::DeleteConnectionOutput).
        pub fn build(self) -> crate::output::DeleteConnectionOutput {
            crate::output::DeleteConnectionOutput {
                connection: self.connection,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteAutoScalingConfigurationOutput {
    /// <p>A description of the App Runner auto scaling configuration that this request just deleted.</p>
    #[doc(hidden)]
    pub auto_scaling_configuration: std::option::Option<crate::model::AutoScalingConfiguration>,
    _request_id: Option<String>,
}
impl DeleteAutoScalingConfigurationOutput {
    /// <p>A description of the App Runner auto scaling configuration that this request just deleted.</p>
    pub fn auto_scaling_configuration(
        &self,
    ) -> std::option::Option<&crate::model::AutoScalingConfiguration> {
        self.auto_scaling_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeleteAutoScalingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteAutoScalingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAutoScalingConfigurationOutput`](crate::output::DeleteAutoScalingConfigurationOutput).
    pub fn builder() -> crate::output::delete_auto_scaling_configuration_output::Builder {
        crate::output::delete_auto_scaling_configuration_output::Builder::default()
    }
}

/// See [`DeleteAutoScalingConfigurationOutput`](crate::output::DeleteAutoScalingConfigurationOutput).
pub mod delete_auto_scaling_configuration_output {

    /// A builder for [`DeleteAutoScalingConfigurationOutput`](crate::output::DeleteAutoScalingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_scaling_configuration:
            std::option::Option<crate::model::AutoScalingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner auto scaling configuration that this request just deleted.</p>
        pub fn auto_scaling_configuration(
            mut self,
            input: crate::model::AutoScalingConfiguration,
        ) -> Self {
            self.auto_scaling_configuration = Some(input);
            self
        }
        /// <p>A description of the App Runner auto scaling configuration that this request just deleted.</p>
        pub fn set_auto_scaling_configuration(
            mut self,
            input: std::option::Option<crate::model::AutoScalingConfiguration>,
        ) -> Self {
            self.auto_scaling_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`DeleteAutoScalingConfigurationOutput`](crate::output::DeleteAutoScalingConfigurationOutput).
        pub fn build(self) -> crate::output::DeleteAutoScalingConfigurationOutput {
            crate::output::DeleteAutoScalingConfigurationOutput {
                auto_scaling_configuration: self.auto_scaling_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcIngressConnectionOutput {
    /// <p>A description of the App Runner VPC Ingress Connection resource that's created by this request. </p>
    #[doc(hidden)]
    pub vpc_ingress_connection: std::option::Option<crate::model::VpcIngressConnection>,
    _request_id: Option<String>,
}
impl CreateVpcIngressConnectionOutput {
    /// <p>A description of the App Runner VPC Ingress Connection resource that's created by this request. </p>
    pub fn vpc_ingress_connection(
        &self,
    ) -> std::option::Option<&crate::model::VpcIngressConnection> {
        self.vpc_ingress_connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcIngressConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateVpcIngressConnectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcIngressConnectionOutput`](crate::output::CreateVpcIngressConnectionOutput).
    pub fn builder() -> crate::output::create_vpc_ingress_connection_output::Builder {
        crate::output::create_vpc_ingress_connection_output::Builder::default()
    }
}

/// See [`CreateVpcIngressConnectionOutput`](crate::output::CreateVpcIngressConnectionOutput).
pub mod create_vpc_ingress_connection_output {

    /// A builder for [`CreateVpcIngressConnectionOutput`](crate::output::CreateVpcIngressConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_ingress_connection: std::option::Option<crate::model::VpcIngressConnection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner VPC Ingress Connection resource that's created by this request. </p>
        pub fn vpc_ingress_connection(mut self, input: crate::model::VpcIngressConnection) -> Self {
            self.vpc_ingress_connection = Some(input);
            self
        }
        /// <p>A description of the App Runner VPC Ingress Connection resource that's created by this request. </p>
        pub fn set_vpc_ingress_connection(
            mut self,
            input: std::option::Option<crate::model::VpcIngressConnection>,
        ) -> Self {
            self.vpc_ingress_connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcIngressConnectionOutput`](crate::output::CreateVpcIngressConnectionOutput).
        pub fn build(self) -> crate::output::CreateVpcIngressConnectionOutput {
            crate::output::CreateVpcIngressConnectionOutput {
                vpc_ingress_connection: self.vpc_ingress_connection,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateVpcConnectorOutput {
    /// <p>A description of the App Runner VPC connector that's created by this request.</p>
    #[doc(hidden)]
    pub vpc_connector: std::option::Option<crate::model::VpcConnector>,
    _request_id: Option<String>,
}
impl CreateVpcConnectorOutput {
    /// <p>A description of the App Runner VPC connector that's created by this request.</p>
    pub fn vpc_connector(&self) -> std::option::Option<&crate::model::VpcConnector> {
        self.vpc_connector.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateVpcConnectorOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateVpcConnectorOutput {
    /// Creates a new builder-style object to manufacture [`CreateVpcConnectorOutput`](crate::output::CreateVpcConnectorOutput).
    pub fn builder() -> crate::output::create_vpc_connector_output::Builder {
        crate::output::create_vpc_connector_output::Builder::default()
    }
}

/// See [`CreateVpcConnectorOutput`](crate::output::CreateVpcConnectorOutput).
pub mod create_vpc_connector_output {

    /// A builder for [`CreateVpcConnectorOutput`](crate::output::CreateVpcConnectorOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) vpc_connector: std::option::Option<crate::model::VpcConnector>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner VPC connector that's created by this request.</p>
        pub fn vpc_connector(mut self, input: crate::model::VpcConnector) -> Self {
            self.vpc_connector = Some(input);
            self
        }
        /// <p>A description of the App Runner VPC connector that's created by this request.</p>
        pub fn set_vpc_connector(
            mut self,
            input: std::option::Option<crate::model::VpcConnector>,
        ) -> Self {
            self.vpc_connector = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateVpcConnectorOutput`](crate::output::CreateVpcConnectorOutput).
        pub fn build(self) -> crate::output::CreateVpcConnectorOutput {
            crate::output::CreateVpcConnectorOutput {
                vpc_connector: self.vpc_connector,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateServiceOutput {
    /// <p>A description of the App Runner service that's created by this request.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::model::Service>,
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_ListOperations.html">ListOperations</a> call to track the operation's progress.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateServiceOutput {
    /// <p>A description of the App Runner service that's created by this request.</p>
    pub fn service(&self) -> std::option::Option<&crate::model::Service> {
        self.service.as_ref()
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_ListOperations.html">ListOperations</a> call to track the operation's progress.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateServiceOutput {
    /// Creates a new builder-style object to manufacture [`CreateServiceOutput`](crate::output::CreateServiceOutput).
    pub fn builder() -> crate::output::create_service_output::Builder {
        crate::output::create_service_output::Builder::default()
    }
}

/// See [`CreateServiceOutput`](crate::output::CreateServiceOutput).
pub mod create_service_output {

    /// A builder for [`CreateServiceOutput`](crate::output::CreateServiceOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) service: std::option::Option<crate::model::Service>,
        pub(crate) operation_id: std::option::Option<std::string::String>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner service that's created by this request.</p>
        pub fn service(mut self, input: crate::model::Service) -> Self {
            self.service = Some(input);
            self
        }
        /// <p>A description of the App Runner service that's created by this request.</p>
        pub fn set_service(mut self, input: std::option::Option<crate::model::Service>) -> Self {
            self.service = input;
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_ListOperations.html">ListOperations</a> call to track the operation's progress.</p>
        pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.operation_id = Some(input.into());
            self
        }
        /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_ListOperations.html">ListOperations</a> call to track the operation's progress.</p>
        pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.operation_id = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateServiceOutput`](crate::output::CreateServiceOutput).
        pub fn build(self) -> crate::output::CreateServiceOutput {
            crate::output::CreateServiceOutput {
                service: self.service,
                operation_id: self.operation_id,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateObservabilityConfigurationOutput {
    /// <p>A description of the App Runner observability configuration that's created by this request.</p>
    #[doc(hidden)]
    pub observability_configuration: std::option::Option<crate::model::ObservabilityConfiguration>,
    _request_id: Option<String>,
}
impl CreateObservabilityConfigurationOutput {
    /// <p>A description of the App Runner observability configuration that's created by this request.</p>
    pub fn observability_configuration(
        &self,
    ) -> std::option::Option<&crate::model::ObservabilityConfiguration> {
        self.observability_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateObservabilityConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateObservabilityConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateObservabilityConfigurationOutput`](crate::output::CreateObservabilityConfigurationOutput).
    pub fn builder() -> crate::output::create_observability_configuration_output::Builder {
        crate::output::create_observability_configuration_output::Builder::default()
    }
}

/// See [`CreateObservabilityConfigurationOutput`](crate::output::CreateObservabilityConfigurationOutput).
pub mod create_observability_configuration_output {

    /// A builder for [`CreateObservabilityConfigurationOutput`](crate::output::CreateObservabilityConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) observability_configuration:
            std::option::Option<crate::model::ObservabilityConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner observability configuration that's created by this request.</p>
        pub fn observability_configuration(
            mut self,
            input: crate::model::ObservabilityConfiguration,
        ) -> Self {
            self.observability_configuration = Some(input);
            self
        }
        /// <p>A description of the App Runner observability configuration that's created by this request.</p>
        pub fn set_observability_configuration(
            mut self,
            input: std::option::Option<crate::model::ObservabilityConfiguration>,
        ) -> Self {
            self.observability_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateObservabilityConfigurationOutput`](crate::output::CreateObservabilityConfigurationOutput).
        pub fn build(self) -> crate::output::CreateObservabilityConfigurationOutput {
            crate::output::CreateObservabilityConfigurationOutput {
                observability_configuration: self.observability_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateConnectionOutput {
    /// <p>A description of the App Runner connection that's created by this request.</p>
    #[doc(hidden)]
    pub connection: std::option::Option<crate::model::Connection>,
    _request_id: Option<String>,
}
impl CreateConnectionOutput {
    /// <p>A description of the App Runner connection that's created by this request.</p>
    pub fn connection(&self) -> std::option::Option<&crate::model::Connection> {
        self.connection.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateConnectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateConnectionOutput {
    /// Creates a new builder-style object to manufacture [`CreateConnectionOutput`](crate::output::CreateConnectionOutput).
    pub fn builder() -> crate::output::create_connection_output::Builder {
        crate::output::create_connection_output::Builder::default()
    }
}

/// See [`CreateConnectionOutput`](crate::output::CreateConnectionOutput).
pub mod create_connection_output {

    /// A builder for [`CreateConnectionOutput`](crate::output::CreateConnectionOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) connection: std::option::Option<crate::model::Connection>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner connection that's created by this request.</p>
        pub fn connection(mut self, input: crate::model::Connection) -> Self {
            self.connection = Some(input);
            self
        }
        /// <p>A description of the App Runner connection that's created by this request.</p>
        pub fn set_connection(
            mut self,
            input: std::option::Option<crate::model::Connection>,
        ) -> Self {
            self.connection = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateConnectionOutput`](crate::output::CreateConnectionOutput).
        pub fn build(self) -> crate::output::CreateConnectionOutput {
            crate::output::CreateConnectionOutput {
                connection: self.connection,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateAutoScalingConfigurationOutput {
    /// <p>A description of the App Runner auto scaling configuration that's created by this request.</p>
    #[doc(hidden)]
    pub auto_scaling_configuration: std::option::Option<crate::model::AutoScalingConfiguration>,
    _request_id: Option<String>,
}
impl CreateAutoScalingConfigurationOutput {
    /// <p>A description of the App Runner auto scaling configuration that's created by this request.</p>
    pub fn auto_scaling_configuration(
        &self,
    ) -> std::option::Option<&crate::model::AutoScalingConfiguration> {
        self.auto_scaling_configuration.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateAutoScalingConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateAutoScalingConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateAutoScalingConfigurationOutput`](crate::output::CreateAutoScalingConfigurationOutput).
    pub fn builder() -> crate::output::create_auto_scaling_configuration_output::Builder {
        crate::output::create_auto_scaling_configuration_output::Builder::default()
    }
}

/// See [`CreateAutoScalingConfigurationOutput`](crate::output::CreateAutoScalingConfigurationOutput).
pub mod create_auto_scaling_configuration_output {

    /// A builder for [`CreateAutoScalingConfigurationOutput`](crate::output::CreateAutoScalingConfigurationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) auto_scaling_configuration:
            std::option::Option<crate::model::AutoScalingConfiguration>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>A description of the App Runner auto scaling configuration that's created by this request.</p>
        pub fn auto_scaling_configuration(
            mut self,
            input: crate::model::AutoScalingConfiguration,
        ) -> Self {
            self.auto_scaling_configuration = Some(input);
            self
        }
        /// <p>A description of the App Runner auto scaling configuration that's created by this request.</p>
        pub fn set_auto_scaling_configuration(
            mut self,
            input: std::option::Option<crate::model::AutoScalingConfiguration>,
        ) -> Self {
            self.auto_scaling_configuration = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`CreateAutoScalingConfigurationOutput`](crate::output::CreateAutoScalingConfigurationOutput).
        pub fn build(self) -> crate::output::CreateAutoScalingConfigurationOutput {
            crate::output::CreateAutoScalingConfigurationOutput {
                auto_scaling_configuration: self.auto_scaling_configuration,
                _request_id: self._request_id,
            }
        }
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateCustomDomainOutput {
    /// <p>The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name.</p>
    #[doc(hidden)]
    pub dns_target: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the App Runner service with which a custom domain name is associated.</p>
    #[doc(hidden)]
    pub service_arn: std::option::Option<std::string::String>,
    /// <p>A description of the domain name that's being associated.</p>
    #[doc(hidden)]
    pub custom_domain: std::option::Option<crate::model::CustomDomain>,
    /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
    #[doc(hidden)]
    pub vpc_dns_targets: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
    _request_id: Option<String>,
}
impl AssociateCustomDomainOutput {
    /// <p>The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name.</p>
    pub fn dns_target(&self) -> std::option::Option<&str> {
        self.dns_target.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner service with which a custom domain name is associated.</p>
    pub fn service_arn(&self) -> std::option::Option<&str> {
        self.service_arn.as_deref()
    }
    /// <p>A description of the domain name that's being associated.</p>
    pub fn custom_domain(&self) -> std::option::Option<&crate::model::CustomDomain> {
        self.custom_domain.as_ref()
    }
    /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
    pub fn vpc_dns_targets(&self) -> std::option::Option<&[crate::model::VpcDnsTarget]> {
        self.vpc_dns_targets.as_deref()
    }
}
impl aws_http::request_id::RequestId for AssociateCustomDomainOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AssociateCustomDomainOutput {
    /// Creates a new builder-style object to manufacture [`AssociateCustomDomainOutput`](crate::output::AssociateCustomDomainOutput).
    pub fn builder() -> crate::output::associate_custom_domain_output::Builder {
        crate::output::associate_custom_domain_output::Builder::default()
    }
}

/// See [`AssociateCustomDomainOutput`](crate::output::AssociateCustomDomainOutput).
pub mod associate_custom_domain_output {

    /// A builder for [`AssociateCustomDomainOutput`](crate::output::AssociateCustomDomainOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) dns_target: std::option::Option<std::string::String>,
        pub(crate) service_arn: std::option::Option<std::string::String>,
        pub(crate) custom_domain: std::option::Option<crate::model::CustomDomain>,
        pub(crate) vpc_dns_targets: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
        _request_id: Option<String>,
    }
    impl Builder {
        /// <p>The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name.</p>
        pub fn dns_target(mut self, input: impl Into<std::string::String>) -> Self {
            self.dns_target = Some(input.into());
            self
        }
        /// <p>The App Runner subdomain of the App Runner service. The custom domain name is mapped to this target name.</p>
        pub fn set_dns_target(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.dns_target = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the App Runner service with which a custom domain name is associated.</p>
        pub fn service_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.service_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the App Runner service with which a custom domain name is associated.</p>
        pub fn set_service_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.service_arn = input;
            self
        }
        /// <p>A description of the domain name that's being associated.</p>
        pub fn custom_domain(mut self, input: crate::model::CustomDomain) -> Self {
            self.custom_domain = Some(input);
            self
        }
        /// <p>A description of the domain name that's being associated.</p>
        pub fn set_custom_domain(
            mut self,
            input: std::option::Option<crate::model::CustomDomain>,
        ) -> Self {
            self.custom_domain = input;
            self
        }
        /// Appends an item to `vpc_dns_targets`.
        ///
        /// To override the contents of this collection use [`set_vpc_dns_targets`](Self::set_vpc_dns_targets).
        ///
        /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
        pub fn vpc_dns_targets(mut self, input: crate::model::VpcDnsTarget) -> Self {
            let mut v = self.vpc_dns_targets.unwrap_or_default();
            v.push(input);
            self.vpc_dns_targets = Some(v);
            self
        }
        /// <p>DNS Target records for the custom domains of this Amazon VPC. </p>
        pub fn set_vpc_dns_targets(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VpcDnsTarget>>,
        ) -> Self {
            self.vpc_dns_targets = input;
            self
        }
        pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
            self._request_id = Some(request_id.into());
            self
        }

        pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
            self._request_id = request_id;
            self
        }
        /// Consumes the builder and constructs a [`AssociateCustomDomainOutput`](crate::output::AssociateCustomDomainOutput).
        pub fn build(self) -> crate::output::AssociateCustomDomainOutput {
            crate::output::AssociateCustomDomainOutput {
                dns_target: self.dns_target,
                service_arn: self.service_arn,
                custom_domain: self.custom_domain,
                vpc_dns_targets: self.vpc_dns_targets,
                _request_id: self._request_id,
            }
        }
    }
}
