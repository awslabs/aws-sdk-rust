// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn associate_custom_domain_output_correct_errors(
    mut builder: crate::operation::associate_custom_domain::builders::AssociateCustomDomainOutputBuilder,
) -> crate::operation::associate_custom_domain::builders::AssociateCustomDomainOutputBuilder {
    if builder.dns_target.is_none() {
        builder.dns_target = Some(Default::default())
    }
    if builder.service_arn.is_none() {
        builder.service_arn = Some(Default::default())
    }
    if builder.custom_domain.is_none() {
        builder.custom_domain = {
            let builder = crate::types::builders::CustomDomainBuilder::default();
            crate::serde_util::custom_domain_correct_errors(builder).build().ok()
        }
    }
    if builder.vpc_dns_targets.is_none() {
        builder.vpc_dns_targets = Some(Default::default())
    }
    builder
}

pub(crate) fn create_auto_scaling_configuration_output_correct_errors(
    mut builder: crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationOutputBuilder,
) -> crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationOutputBuilder {
    if builder.auto_scaling_configuration.is_none() {
        builder.auto_scaling_configuration = {
            let builder = crate::types::builders::AutoScalingConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_connection_output_correct_errors(
    mut builder: crate::operation::create_connection::builders::CreateConnectionOutputBuilder,
) -> crate::operation::create_connection::builders::CreateConnectionOutputBuilder {
    if builder.connection.is_none() {
        builder.connection = {
            let builder = crate::types::builders::ConnectionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_observability_configuration_output_correct_errors(
    mut builder: crate::operation::create_observability_configuration::builders::CreateObservabilityConfigurationOutputBuilder,
) -> crate::operation::create_observability_configuration::builders::CreateObservabilityConfigurationOutputBuilder {
    if builder.observability_configuration.is_none() {
        builder.observability_configuration = {
            let builder = crate::types::builders::ObservabilityConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_service_output_correct_errors(
    mut builder: crate::operation::create_service::builders::CreateServiceOutputBuilder,
) -> crate::operation::create_service::builders::CreateServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    if builder.operation_id.is_none() {
        builder.operation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn create_vpc_connector_output_correct_errors(
    mut builder: crate::operation::create_vpc_connector::builders::CreateVpcConnectorOutputBuilder,
) -> crate::operation::create_vpc_connector::builders::CreateVpcConnectorOutputBuilder {
    if builder.vpc_connector.is_none() {
        builder.vpc_connector = {
            let builder = crate::types::builders::VpcConnectorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_vpc_ingress_connection_output_correct_errors(
    mut builder: crate::operation::create_vpc_ingress_connection::builders::CreateVpcIngressConnectionOutputBuilder,
) -> crate::operation::create_vpc_ingress_connection::builders::CreateVpcIngressConnectionOutputBuilder {
    if builder.vpc_ingress_connection.is_none() {
        builder.vpc_ingress_connection = {
            let builder = crate::types::builders::VpcIngressConnectionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_auto_scaling_configuration_output_correct_errors(
    mut builder: crate::operation::delete_auto_scaling_configuration::builders::DeleteAutoScalingConfigurationOutputBuilder,
) -> crate::operation::delete_auto_scaling_configuration::builders::DeleteAutoScalingConfigurationOutputBuilder {
    if builder.auto_scaling_configuration.is_none() {
        builder.auto_scaling_configuration = {
            let builder = crate::types::builders::AutoScalingConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_observability_configuration_output_correct_errors(
    mut builder: crate::operation::delete_observability_configuration::builders::DeleteObservabilityConfigurationOutputBuilder,
) -> crate::operation::delete_observability_configuration::builders::DeleteObservabilityConfigurationOutputBuilder {
    if builder.observability_configuration.is_none() {
        builder.observability_configuration = {
            let builder = crate::types::builders::ObservabilityConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_service_output_correct_errors(
    mut builder: crate::operation::delete_service::builders::DeleteServiceOutputBuilder,
) -> crate::operation::delete_service::builders::DeleteServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    if builder.operation_id.is_none() {
        builder.operation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_vpc_connector_output_correct_errors(
    mut builder: crate::operation::delete_vpc_connector::builders::DeleteVpcConnectorOutputBuilder,
) -> crate::operation::delete_vpc_connector::builders::DeleteVpcConnectorOutputBuilder {
    if builder.vpc_connector.is_none() {
        builder.vpc_connector = {
            let builder = crate::types::builders::VpcConnectorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn delete_vpc_ingress_connection_output_correct_errors(
    mut builder: crate::operation::delete_vpc_ingress_connection::builders::DeleteVpcIngressConnectionOutputBuilder,
) -> crate::operation::delete_vpc_ingress_connection::builders::DeleteVpcIngressConnectionOutputBuilder {
    if builder.vpc_ingress_connection.is_none() {
        builder.vpc_ingress_connection = {
            let builder = crate::types::builders::VpcIngressConnectionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_auto_scaling_configuration_output_correct_errors(
    mut builder: crate::operation::describe_auto_scaling_configuration::builders::DescribeAutoScalingConfigurationOutputBuilder,
) -> crate::operation::describe_auto_scaling_configuration::builders::DescribeAutoScalingConfigurationOutputBuilder {
    if builder.auto_scaling_configuration.is_none() {
        builder.auto_scaling_configuration = {
            let builder = crate::types::builders::AutoScalingConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_custom_domains_output_correct_errors(
    mut builder: crate::operation::describe_custom_domains::builders::DescribeCustomDomainsOutputBuilder,
) -> crate::operation::describe_custom_domains::builders::DescribeCustomDomainsOutputBuilder {
    if builder.dns_target.is_none() {
        builder.dns_target = Some(Default::default())
    }
    if builder.service_arn.is_none() {
        builder.service_arn = Some(Default::default())
    }
    if builder.custom_domains.is_none() {
        builder.custom_domains = Some(Default::default())
    }
    if builder.vpc_dns_targets.is_none() {
        builder.vpc_dns_targets = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_observability_configuration_output_correct_errors(
    mut builder: crate::operation::describe_observability_configuration::builders::DescribeObservabilityConfigurationOutputBuilder,
) -> crate::operation::describe_observability_configuration::builders::DescribeObservabilityConfigurationOutputBuilder {
    if builder.observability_configuration.is_none() {
        builder.observability_configuration = {
            let builder = crate::types::builders::ObservabilityConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_service_output_correct_errors(
    mut builder: crate::operation::describe_service::builders::DescribeServiceOutputBuilder,
) -> crate::operation::describe_service::builders::DescribeServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_vpc_connector_output_correct_errors(
    mut builder: crate::operation::describe_vpc_connector::builders::DescribeVpcConnectorOutputBuilder,
) -> crate::operation::describe_vpc_connector::builders::DescribeVpcConnectorOutputBuilder {
    if builder.vpc_connector.is_none() {
        builder.vpc_connector = {
            let builder = crate::types::builders::VpcConnectorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_vpc_ingress_connection_output_correct_errors(
    mut builder: crate::operation::describe_vpc_ingress_connection::builders::DescribeVpcIngressConnectionOutputBuilder,
) -> crate::operation::describe_vpc_ingress_connection::builders::DescribeVpcIngressConnectionOutputBuilder {
    if builder.vpc_ingress_connection.is_none() {
        builder.vpc_ingress_connection = {
            let builder = crate::types::builders::VpcIngressConnectionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn disassociate_custom_domain_output_correct_errors(
    mut builder: crate::operation::disassociate_custom_domain::builders::DisassociateCustomDomainOutputBuilder,
) -> crate::operation::disassociate_custom_domain::builders::DisassociateCustomDomainOutputBuilder {
    if builder.dns_target.is_none() {
        builder.dns_target = Some(Default::default())
    }
    if builder.service_arn.is_none() {
        builder.service_arn = Some(Default::default())
    }
    if builder.custom_domain.is_none() {
        builder.custom_domain = {
            let builder = crate::types::builders::CustomDomainBuilder::default();
            crate::serde_util::custom_domain_correct_errors(builder).build().ok()
        }
    }
    if builder.vpc_dns_targets.is_none() {
        builder.vpc_dns_targets = Some(Default::default())
    }
    builder
}

pub(crate) fn list_auto_scaling_configurations_output_correct_errors(
    mut builder: crate::operation::list_auto_scaling_configurations::builders::ListAutoScalingConfigurationsOutputBuilder,
) -> crate::operation::list_auto_scaling_configurations::builders::ListAutoScalingConfigurationsOutputBuilder {
    if builder.auto_scaling_configuration_summary_list.is_none() {
        builder.auto_scaling_configuration_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_connections_output_correct_errors(
    mut builder: crate::operation::list_connections::builders::ListConnectionsOutputBuilder,
) -> crate::operation::list_connections::builders::ListConnectionsOutputBuilder {
    if builder.connection_summary_list.is_none() {
        builder.connection_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_observability_configurations_output_correct_errors(
    mut builder: crate::operation::list_observability_configurations::builders::ListObservabilityConfigurationsOutputBuilder,
) -> crate::operation::list_observability_configurations::builders::ListObservabilityConfigurationsOutputBuilder {
    if builder.observability_configuration_summary_list.is_none() {
        builder.observability_configuration_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_services_output_correct_errors(
    mut builder: crate::operation::list_services::builders::ListServicesOutputBuilder,
) -> crate::operation::list_services::builders::ListServicesOutputBuilder {
    if builder.service_summary_list.is_none() {
        builder.service_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_services_for_auto_scaling_configuration_output_correct_errors(
    mut builder: crate::operation::list_services_for_auto_scaling_configuration::builders::ListServicesForAutoScalingConfigurationOutputBuilder,
) -> crate::operation::list_services_for_auto_scaling_configuration::builders::ListServicesForAutoScalingConfigurationOutputBuilder {
    if builder.service_arn_list.is_none() {
        builder.service_arn_list = Some(Default::default())
    }
    builder
}

pub(crate) fn list_vpc_connectors_output_correct_errors(
    mut builder: crate::operation::list_vpc_connectors::builders::ListVpcConnectorsOutputBuilder,
) -> crate::operation::list_vpc_connectors::builders::ListVpcConnectorsOutputBuilder {
    if builder.vpc_connectors.is_none() {
        builder.vpc_connectors = Some(Default::default())
    }
    builder
}

pub(crate) fn list_vpc_ingress_connections_output_correct_errors(
    mut builder: crate::operation::list_vpc_ingress_connections::builders::ListVpcIngressConnectionsOutputBuilder,
) -> crate::operation::list_vpc_ingress_connections::builders::ListVpcIngressConnectionsOutputBuilder {
    if builder.vpc_ingress_connection_summary_list.is_none() {
        builder.vpc_ingress_connection_summary_list = Some(Default::default())
    }
    builder
}

pub(crate) fn pause_service_output_correct_errors(
    mut builder: crate::operation::pause_service::builders::PauseServiceOutputBuilder,
) -> crate::operation::pause_service::builders::PauseServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn resume_service_output_correct_errors(
    mut builder: crate::operation::resume_service::builders::ResumeServiceOutputBuilder,
) -> crate::operation::resume_service::builders::ResumeServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn start_deployment_output_correct_errors(
    mut builder: crate::operation::start_deployment::builders::StartDeploymentOutputBuilder,
) -> crate::operation::start_deployment::builders::StartDeploymentOutputBuilder {
    if builder.operation_id.is_none() {
        builder.operation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_default_auto_scaling_configuration_output_correct_errors(
    mut builder: crate::operation::update_default_auto_scaling_configuration::builders::UpdateDefaultAutoScalingConfigurationOutputBuilder,
) -> crate::operation::update_default_auto_scaling_configuration::builders::UpdateDefaultAutoScalingConfigurationOutputBuilder {
    if builder.auto_scaling_configuration.is_none() {
        builder.auto_scaling_configuration = {
            let builder = crate::types::builders::AutoScalingConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_service_output_correct_errors(
    mut builder: crate::operation::update_service::builders::UpdateServiceOutputBuilder,
) -> crate::operation::update_service::builders::UpdateServiceOutputBuilder {
    if builder.service.is_none() {
        builder.service = {
            let builder = crate::types::builders::ServiceBuilder::default();
            crate::serde_util::service_correct_errors(builder).build().ok()
        }
    }
    if builder.operation_id.is_none() {
        builder.operation_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_vpc_ingress_connection_output_correct_errors(
    mut builder: crate::operation::update_vpc_ingress_connection::builders::UpdateVpcIngressConnectionOutputBuilder,
) -> crate::operation::update_vpc_ingress_connection::builders::UpdateVpcIngressConnectionOutputBuilder {
    if builder.vpc_ingress_connection.is_none() {
        builder.vpc_ingress_connection = {
            let builder = crate::types::builders::VpcIngressConnectionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn custom_domain_correct_errors(mut builder: crate::types::builders::CustomDomainBuilder) -> crate::types::builders::CustomDomainBuilder {
    if builder.domain_name.is_none() {
        builder.domain_name = Some(Default::default())
    }
    if builder.enable_www_subdomain.is_none() {
        builder.enable_www_subdomain = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::CustomDomainAssociationStatus>().ok()
    }
    builder
}

pub(crate) fn service_correct_errors(mut builder: crate::types::builders::ServiceBuilder) -> crate::types::builders::ServiceBuilder {
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.service_id.is_none() {
        builder.service_id = Some(Default::default())
    }
    if builder.service_arn.is_none() {
        builder.service_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ServiceStatus>().ok()
    }
    if builder.source_configuration.is_none() {
        builder.source_configuration = {
            let builder = crate::types::builders::SourceConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.instance_configuration.is_none() {
        builder.instance_configuration = {
            let builder = crate::types::builders::InstanceConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    if builder.auto_scaling_configuration_summary.is_none() {
        builder.auto_scaling_configuration_summary = {
            let builder = crate::types::builders::AutoScalingConfigurationSummaryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.network_configuration.is_none() {
        builder.network_configuration = {
            let builder = crate::types::builders::NetworkConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn encryption_configuration_correct_errors(
    mut builder: crate::types::builders::EncryptionConfigurationBuilder,
) -> crate::types::builders::EncryptionConfigurationBuilder {
    if builder.kms_key.is_none() {
        builder.kms_key = Some(Default::default())
    }
    builder
}

pub(crate) fn service_observability_configuration_correct_errors(
    mut builder: crate::types::builders::ServiceObservabilityConfigurationBuilder,
) -> crate::types::builders::ServiceObservabilityConfigurationBuilder {
    if builder.observability_enabled.is_none() {
        builder.observability_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn trace_configuration_correct_errors(
    mut builder: crate::types::builders::TraceConfigurationBuilder,
) -> crate::types::builders::TraceConfigurationBuilder {
    if builder.vendor.is_none() {
        builder.vendor = "no value was set".parse::<crate::types::TracingVendor>().ok()
    }
    builder
}

pub(crate) fn code_repository_correct_errors(
    mut builder: crate::types::builders::CodeRepositoryBuilder,
) -> crate::types::builders::CodeRepositoryBuilder {
    if builder.repository_url.is_none() {
        builder.repository_url = Some(Default::default())
    }
    if builder.source_code_version.is_none() {
        builder.source_code_version = {
            let builder = crate::types::builders::SourceCodeVersionBuilder::default();
            crate::serde_util::source_code_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn image_repository_correct_errors(
    mut builder: crate::types::builders::ImageRepositoryBuilder,
) -> crate::types::builders::ImageRepositoryBuilder {
    if builder.image_identifier.is_none() {
        builder.image_identifier = Some(Default::default())
    }
    if builder.image_repository_type.is_none() {
        builder.image_repository_type = "no value was set".parse::<crate::types::ImageRepositoryType>().ok()
    }
    builder
}

pub(crate) fn code_configuration_correct_errors(
    mut builder: crate::types::builders::CodeConfigurationBuilder,
) -> crate::types::builders::CodeConfigurationBuilder {
    if builder.configuration_source.is_none() {
        builder.configuration_source = "no value was set".parse::<crate::types::ConfigurationSource>().ok()
    }
    builder
}

pub(crate) fn source_code_version_correct_errors(
    mut builder: crate::types::builders::SourceCodeVersionBuilder,
) -> crate::types::builders::SourceCodeVersionBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SourceCodeVersionType>().ok()
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn code_configuration_values_correct_errors(
    mut builder: crate::types::builders::CodeConfigurationValuesBuilder,
) -> crate::types::builders::CodeConfigurationValuesBuilder {
    if builder.runtime.is_none() {
        builder.runtime = "no value was set".parse::<crate::types::Runtime>().ok()
    }
    builder
}
