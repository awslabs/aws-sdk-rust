// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information for an App Runner service.</p>
/// <p>This type contains limited information about a service. It doesn't include configuration details. It's returned by the <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_ListServices.html">ListServices</a> action. Complete service information is returned by the <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_CreateService.html">CreateService</a>, <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_DescribeService.html">DescribeService</a>, and <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_DeleteService.html">DeleteService</a> actions using the <a href="https://docs.aws.amazon.com/apprunner/latest/api/API_Service.html">Service</a> type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceSummary {
    /// <p>The customer-provided service name.</p>
    #[doc(hidden)]
    pub service_name: std::option::Option<std::string::String>,
    /// <p>An ID that App Runner generated for this service. It's unique within the Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub service_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of this service.</p>
    #[doc(hidden)]
    pub service_arn: std::option::Option<std::string::String>,
    /// <p>A subdomain URL that App Runner generated for this service. You can use this URL to access your service web application.</p>
    #[doc(hidden)]
    pub service_url: std::option::Option<std::string::String>,
    /// <p>The time when the App Runner service was created. It's in the Unix time stamp format.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the App Runner service was last updated. It's in theUnix time stamp format.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The current state of the App Runner service. These particular values mean the following.</p>
    /// <ul>
    /// <li> <p> <code>CREATE_FAILED</code> – The service failed to create. Read the failure events and logs, change any parameters that need to be fixed, and retry the call to create the service.</p> <p>The failed service isn't usable, and still counts towards your service quota. When you're done analyzing the failure, delete the service.</p> </li>
    /// <li> <p> <code>DELETE_FAILED</code> – The service failed to delete and can't be successfully recovered. Retry the service deletion call to ensure that all related resources are removed.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ServiceStatus>,
}
impl ServiceSummary {
    /// <p>The customer-provided service name.</p>
    pub fn service_name(&self) -> std::option::Option<&str> {
        self.service_name.as_deref()
    }
    /// <p>An ID that App Runner generated for this service. It's unique within the Amazon Web Services Region.</p>
    pub fn service_id(&self) -> std::option::Option<&str> {
        self.service_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of this service.</p>
    pub fn service_arn(&self) -> std::option::Option<&str> {
        self.service_arn.as_deref()
    }
    /// <p>A subdomain URL that App Runner generated for this service. You can use this URL to access your service web application.</p>
    pub fn service_url(&self) -> std::option::Option<&str> {
        self.service_url.as_deref()
    }
    /// <p>The time when the App Runner service was created. It's in the Unix time stamp format.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time when the App Runner service was last updated. It's in theUnix time stamp format.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The current state of the App Runner service. These particular values mean the following.</p>
    /// <ul>
    /// <li> <p> <code>CREATE_FAILED</code> – The service failed to create. Read the failure events and logs, change any parameters that need to be fixed, and retry the call to create the service.</p> <p>The failed service isn't usable, and still counts towards your service quota. When you're done analyzing the failure, delete the service.</p> </li>
    /// <li> <p> <code>DELETE_FAILED</code> – The service failed to delete and can't be successfully recovered. Retry the service deletion call to ensure that all related resources are removed.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::ServiceStatus> {
        self.status.as_ref()
    }
}
impl ServiceSummary {
    /// Creates a new builder-style object to manufacture [`ServiceSummary`](crate::types::ServiceSummary).
    pub fn builder() -> crate::types::builders::ServiceSummaryBuilder {
        crate::types::builders::ServiceSummaryBuilder::default()
    }
}

/// A builder for [`ServiceSummary`](crate::types::ServiceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceSummaryBuilder {
    pub(crate) service_name: std::option::Option<std::string::String>,
    pub(crate) service_id: std::option::Option<std::string::String>,
    pub(crate) service_arn: std::option::Option<std::string::String>,
    pub(crate) service_url: std::option::Option<std::string::String>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::ServiceStatus>,
}
impl ServiceSummaryBuilder {
    /// <p>The customer-provided service name.</p>
    pub fn service_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_name = Some(input.into());
        self
    }
    /// <p>The customer-provided service name.</p>
    pub fn set_service_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_name = input;
        self
    }
    /// <p>An ID that App Runner generated for this service. It's unique within the Amazon Web Services Region.</p>
    pub fn service_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_id = Some(input.into());
        self
    }
    /// <p>An ID that App Runner generated for this service. It's unique within the Amazon Web Services Region.</p>
    pub fn set_service_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this service.</p>
    pub fn service_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this service.</p>
    pub fn set_service_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_arn = input;
        self
    }
    /// <p>A subdomain URL that App Runner generated for this service. You can use this URL to access your service web application.</p>
    pub fn service_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.service_url = Some(input.into());
        self
    }
    /// <p>A subdomain URL that App Runner generated for this service. You can use this URL to access your service web application.</p>
    pub fn set_service_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.service_url = input;
        self
    }
    /// <p>The time when the App Runner service was created. It's in the Unix time stamp format.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time when the App Runner service was created. It's in the Unix time stamp format.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time when the App Runner service was last updated. It's in theUnix time stamp format.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The time when the App Runner service was last updated. It's in theUnix time stamp format.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The current state of the App Runner service. These particular values mean the following.</p>
    /// <ul>
    /// <li> <p> <code>CREATE_FAILED</code> – The service failed to create. Read the failure events and logs, change any parameters that need to be fixed, and retry the call to create the service.</p> <p>The failed service isn't usable, and still counts towards your service quota. When you're done analyzing the failure, delete the service.</p> </li>
    /// <li> <p> <code>DELETE_FAILED</code> – The service failed to delete and can't be successfully recovered. Retry the service deletion call to ensure that all related resources are removed.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ServiceStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current state of the App Runner service. These particular values mean the following.</p>
    /// <ul>
    /// <li> <p> <code>CREATE_FAILED</code> – The service failed to create. Read the failure events and logs, change any parameters that need to be fixed, and retry the call to create the service.</p> <p>The failed service isn't usable, and still counts towards your service quota. When you're done analyzing the failure, delete the service.</p> </li>
    /// <li> <p> <code>DELETE_FAILED</code> – The service failed to delete and can't be successfully recovered. Retry the service deletion call to ensure that all related resources are removed.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ServiceStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceSummary`](crate::types::ServiceSummary).
    pub fn build(self) -> crate::types::ServiceSummary {
        crate::types::ServiceSummary {
            service_name: self.service_name,
            service_id: self.service_id,
            service_arn: self.service_arn,
            service_url: self.service_url,
            created_at: self.created_at,
            updated_at: self.updated_at,
            status: self.status,
        }
    }
}
