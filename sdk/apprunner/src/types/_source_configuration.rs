// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the source deployed to an App Runner service. It can be a code or an image repository.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SourceConfiguration {
    /// <p>The description of a source code repository.</p>
    /// <p>You must provide either this member or <code>ImageRepository</code> (but not both).</p>
    #[doc(hidden)]
    pub code_repository: std::option::Option<crate::types::CodeRepository>,
    /// <p>The description of a source image repository.</p>
    /// <p>You must provide either this member or <code>CodeRepository</code> (but not both).</p>
    #[doc(hidden)]
    pub image_repository: std::option::Option<crate::types::ImageRepository>,
    /// <p>If <code>true</code>, continuous integration from the source repository is enabled for the App Runner service. Each repository change (including any source code commit or new image version) starts a deployment.</p>
    /// <p>Default: App Runner sets to <code>false</code> for a source image that uses an ECR Public repository or an ECR repository that's in an Amazon Web Services account other than the one that the service is in. App Runner sets to <code>true</code> in all other cases (which currently include a source code repository or a source image using a same-account ECR repository).</p>
    #[doc(hidden)]
    pub auto_deployments_enabled: std::option::Option<bool>,
    /// <p>Describes the resources that are needed to authenticate access to some source repositories.</p>
    #[doc(hidden)]
    pub authentication_configuration:
        std::option::Option<crate::types::AuthenticationConfiguration>,
}
impl SourceConfiguration {
    /// <p>The description of a source code repository.</p>
    /// <p>You must provide either this member or <code>ImageRepository</code> (but not both).</p>
    pub fn code_repository(&self) -> std::option::Option<&crate::types::CodeRepository> {
        self.code_repository.as_ref()
    }
    /// <p>The description of a source image repository.</p>
    /// <p>You must provide either this member or <code>CodeRepository</code> (but not both).</p>
    pub fn image_repository(&self) -> std::option::Option<&crate::types::ImageRepository> {
        self.image_repository.as_ref()
    }
    /// <p>If <code>true</code>, continuous integration from the source repository is enabled for the App Runner service. Each repository change (including any source code commit or new image version) starts a deployment.</p>
    /// <p>Default: App Runner sets to <code>false</code> for a source image that uses an ECR Public repository or an ECR repository that's in an Amazon Web Services account other than the one that the service is in. App Runner sets to <code>true</code> in all other cases (which currently include a source code repository or a source image using a same-account ECR repository).</p>
    pub fn auto_deployments_enabled(&self) -> std::option::Option<bool> {
        self.auto_deployments_enabled
    }
    /// <p>Describes the resources that are needed to authenticate access to some source repositories.</p>
    pub fn authentication_configuration(
        &self,
    ) -> std::option::Option<&crate::types::AuthenticationConfiguration> {
        self.authentication_configuration.as_ref()
    }
}
impl SourceConfiguration {
    /// Creates a new builder-style object to manufacture [`SourceConfiguration`](crate::types::SourceConfiguration).
    pub fn builder() -> crate::types::builders::SourceConfigurationBuilder {
        crate::types::builders::SourceConfigurationBuilder::default()
    }
}

/// A builder for [`SourceConfiguration`](crate::types::SourceConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SourceConfigurationBuilder {
    pub(crate) code_repository: std::option::Option<crate::types::CodeRepository>,
    pub(crate) image_repository: std::option::Option<crate::types::ImageRepository>,
    pub(crate) auto_deployments_enabled: std::option::Option<bool>,
    pub(crate) authentication_configuration:
        std::option::Option<crate::types::AuthenticationConfiguration>,
}
impl SourceConfigurationBuilder {
    /// <p>The description of a source code repository.</p>
    /// <p>You must provide either this member or <code>ImageRepository</code> (but not both).</p>
    pub fn code_repository(mut self, input: crate::types::CodeRepository) -> Self {
        self.code_repository = Some(input);
        self
    }
    /// <p>The description of a source code repository.</p>
    /// <p>You must provide either this member or <code>ImageRepository</code> (but not both).</p>
    pub fn set_code_repository(
        mut self,
        input: std::option::Option<crate::types::CodeRepository>,
    ) -> Self {
        self.code_repository = input;
        self
    }
    /// <p>The description of a source image repository.</p>
    /// <p>You must provide either this member or <code>CodeRepository</code> (but not both).</p>
    pub fn image_repository(mut self, input: crate::types::ImageRepository) -> Self {
        self.image_repository = Some(input);
        self
    }
    /// <p>The description of a source image repository.</p>
    /// <p>You must provide either this member or <code>CodeRepository</code> (but not both).</p>
    pub fn set_image_repository(
        mut self,
        input: std::option::Option<crate::types::ImageRepository>,
    ) -> Self {
        self.image_repository = input;
        self
    }
    /// <p>If <code>true</code>, continuous integration from the source repository is enabled for the App Runner service. Each repository change (including any source code commit or new image version) starts a deployment.</p>
    /// <p>Default: App Runner sets to <code>false</code> for a source image that uses an ECR Public repository or an ECR repository that's in an Amazon Web Services account other than the one that the service is in. App Runner sets to <code>true</code> in all other cases (which currently include a source code repository or a source image using a same-account ECR repository).</p>
    pub fn auto_deployments_enabled(mut self, input: bool) -> Self {
        self.auto_deployments_enabled = Some(input);
        self
    }
    /// <p>If <code>true</code>, continuous integration from the source repository is enabled for the App Runner service. Each repository change (including any source code commit or new image version) starts a deployment.</p>
    /// <p>Default: App Runner sets to <code>false</code> for a source image that uses an ECR Public repository or an ECR repository that's in an Amazon Web Services account other than the one that the service is in. App Runner sets to <code>true</code> in all other cases (which currently include a source code repository or a source image using a same-account ECR repository).</p>
    pub fn set_auto_deployments_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.auto_deployments_enabled = input;
        self
    }
    /// <p>Describes the resources that are needed to authenticate access to some source repositories.</p>
    pub fn authentication_configuration(
        mut self,
        input: crate::types::AuthenticationConfiguration,
    ) -> Self {
        self.authentication_configuration = Some(input);
        self
    }
    /// <p>Describes the resources that are needed to authenticate access to some source repositories.</p>
    pub fn set_authentication_configuration(
        mut self,
        input: std::option::Option<crate::types::AuthenticationConfiguration>,
    ) -> Self {
        self.authentication_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`SourceConfiguration`](crate::types::SourceConfiguration).
    pub fn build(self) -> crate::types::SourceConfiguration {
        crate::types::SourceConfiguration {
            code_repository: self.code_repository,
            image_repository: self.image_repository,
            auto_deployments_enabled: self.auto_deployments_enabled,
            authentication_configuration: self.authentication_configuration,
        }
    }
}
