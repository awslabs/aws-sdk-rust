// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an App Runner observability configuration resource. Multiple revisions of a configuration have the same <code>ObservabilityConfigurationName</code> and different <code>ObservabilityConfigurationRevision</code> values.</p>
/// <p>The resource is designed to configure multiple features (currently one feature, tracing). This type contains optional members that describe the configuration of these features (currently one member, <code>TraceConfiguration</code>). If a feature member isn't specified, the feature isn't enabled.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ObservabilityConfiguration {
    /// <p>The Amazon Resource Name (ARN) of this observability configuration.</p>
    #[doc(hidden)]
    pub observability_configuration_arn: std::option::Option<std::string::String>,
    /// <p>The customer-provided observability configuration name. It can be used in multiple revisions of a configuration.</p>
    #[doc(hidden)]
    pub observability_configuration_name: std::option::Option<std::string::String>,
    /// <p>The configuration of the tracing feature within this observability configuration. If not specified, tracing isn't enabled.</p>
    #[doc(hidden)]
    pub trace_configuration: std::option::Option<crate::types::TraceConfiguration>,
    /// <p>The revision of this observability configuration. It's unique among all the active configurations (<code>"Status": "ACTIVE"</code>) that share the same <code>ObservabilityConfigurationName</code>.</p>
    #[doc(hidden)]
    pub observability_configuration_revision: i32,
    /// <p>It's set to <code>true</code> for the configuration with the highest <code>Revision</code> among all configurations that share the same <code>ObservabilityConfigurationName</code>. It's set to <code>false</code> otherwise.</p>
    #[doc(hidden)]
    pub latest: bool,
    /// <p>The current state of the observability configuration. If the status of a configuration revision is <code>INACTIVE</code>, it was deleted and can't be used. Inactive configuration revisions are permanently removed some time after they are deleted.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ObservabilityConfigurationStatus>,
    /// <p>The time when the observability configuration was created. It's in Unix time stamp format.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the observability configuration was deleted. It's in Unix time stamp format.</p>
    #[doc(hidden)]
    pub deleted_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ObservabilityConfiguration {
    /// <p>The Amazon Resource Name (ARN) of this observability configuration.</p>
    pub fn observability_configuration_arn(&self) -> std::option::Option<&str> {
        self.observability_configuration_arn.as_deref()
    }
    /// <p>The customer-provided observability configuration name. It can be used in multiple revisions of a configuration.</p>
    pub fn observability_configuration_name(&self) -> std::option::Option<&str> {
        self.observability_configuration_name.as_deref()
    }
    /// <p>The configuration of the tracing feature within this observability configuration. If not specified, tracing isn't enabled.</p>
    pub fn trace_configuration(&self) -> std::option::Option<&crate::types::TraceConfiguration> {
        self.trace_configuration.as_ref()
    }
    /// <p>The revision of this observability configuration. It's unique among all the active configurations (<code>"Status": "ACTIVE"</code>) that share the same <code>ObservabilityConfigurationName</code>.</p>
    pub fn observability_configuration_revision(&self) -> i32 {
        self.observability_configuration_revision
    }
    /// <p>It's set to <code>true</code> for the configuration with the highest <code>Revision</code> among all configurations that share the same <code>ObservabilityConfigurationName</code>. It's set to <code>false</code> otherwise.</p>
    pub fn latest(&self) -> bool {
        self.latest
    }
    /// <p>The current state of the observability configuration. If the status of a configuration revision is <code>INACTIVE</code>, it was deleted and can't be used. Inactive configuration revisions are permanently removed some time after they are deleted.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ObservabilityConfigurationStatus> {
        self.status.as_ref()
    }
    /// <p>The time when the observability configuration was created. It's in Unix time stamp format.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The time when the observability configuration was deleted. It's in Unix time stamp format.</p>
    pub fn deleted_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.deleted_at.as_ref()
    }
}
impl ObservabilityConfiguration {
    /// Creates a new builder-style object to manufacture [`ObservabilityConfiguration`](crate::types::ObservabilityConfiguration).
    pub fn builder() -> crate::types::builders::ObservabilityConfigurationBuilder {
        crate::types::builders::ObservabilityConfigurationBuilder::default()
    }
}

/// A builder for [`ObservabilityConfiguration`](crate::types::ObservabilityConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ObservabilityConfigurationBuilder {
    pub(crate) observability_configuration_arn: std::option::Option<std::string::String>,
    pub(crate) observability_configuration_name: std::option::Option<std::string::String>,
    pub(crate) trace_configuration: std::option::Option<crate::types::TraceConfiguration>,
    pub(crate) observability_configuration_revision: std::option::Option<i32>,
    pub(crate) latest: std::option::Option<bool>,
    pub(crate) status: std::option::Option<crate::types::ObservabilityConfigurationStatus>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) deleted_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl ObservabilityConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of this observability configuration.</p>
    pub fn observability_configuration_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.observability_configuration_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of this observability configuration.</p>
    pub fn set_observability_configuration_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.observability_configuration_arn = input;
        self
    }
    /// <p>The customer-provided observability configuration name. It can be used in multiple revisions of a configuration.</p>
    pub fn observability_configuration_name(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.observability_configuration_name = Some(input.into());
        self
    }
    /// <p>The customer-provided observability configuration name. It can be used in multiple revisions of a configuration.</p>
    pub fn set_observability_configuration_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.observability_configuration_name = input;
        self
    }
    /// <p>The configuration of the tracing feature within this observability configuration. If not specified, tracing isn't enabled.</p>
    pub fn trace_configuration(mut self, input: crate::types::TraceConfiguration) -> Self {
        self.trace_configuration = Some(input);
        self
    }
    /// <p>The configuration of the tracing feature within this observability configuration. If not specified, tracing isn't enabled.</p>
    pub fn set_trace_configuration(
        mut self,
        input: std::option::Option<crate::types::TraceConfiguration>,
    ) -> Self {
        self.trace_configuration = input;
        self
    }
    /// <p>The revision of this observability configuration. It's unique among all the active configurations (<code>"Status": "ACTIVE"</code>) that share the same <code>ObservabilityConfigurationName</code>.</p>
    pub fn observability_configuration_revision(mut self, input: i32) -> Self {
        self.observability_configuration_revision = Some(input);
        self
    }
    /// <p>The revision of this observability configuration. It's unique among all the active configurations (<code>"Status": "ACTIVE"</code>) that share the same <code>ObservabilityConfigurationName</code>.</p>
    pub fn set_observability_configuration_revision(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.observability_configuration_revision = input;
        self
    }
    /// <p>It's set to <code>true</code> for the configuration with the highest <code>Revision</code> among all configurations that share the same <code>ObservabilityConfigurationName</code>. It's set to <code>false</code> otherwise.</p>
    pub fn latest(mut self, input: bool) -> Self {
        self.latest = Some(input);
        self
    }
    /// <p>It's set to <code>true</code> for the configuration with the highest <code>Revision</code> among all configurations that share the same <code>ObservabilityConfigurationName</code>. It's set to <code>false</code> otherwise.</p>
    pub fn set_latest(mut self, input: std::option::Option<bool>) -> Self {
        self.latest = input;
        self
    }
    /// <p>The current state of the observability configuration. If the status of a configuration revision is <code>INACTIVE</code>, it was deleted and can't be used. Inactive configuration revisions are permanently removed some time after they are deleted.</p>
    pub fn status(mut self, input: crate::types::ObservabilityConfigurationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current state of the observability configuration. If the status of a configuration revision is <code>INACTIVE</code>, it was deleted and can't be used. Inactive configuration revisions are permanently removed some time after they are deleted.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::ObservabilityConfigurationStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The time when the observability configuration was created. It's in Unix time stamp format.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time when the observability configuration was created. It's in Unix time stamp format.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time when the observability configuration was deleted. It's in Unix time stamp format.</p>
    pub fn deleted_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.deleted_at = Some(input);
        self
    }
    /// <p>The time when the observability configuration was deleted. It's in Unix time stamp format.</p>
    pub fn set_deleted_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.deleted_at = input;
        self
    }
    /// Consumes the builder and constructs a [`ObservabilityConfiguration`](crate::types::ObservabilityConfiguration).
    pub fn build(self) -> crate::types::ObservabilityConfiguration {
        crate::types::ObservabilityConfiguration {
            observability_configuration_arn: self.observability_configuration_arn,
            observability_configuration_name: self.observability_configuration_name,
            trace_configuration: self.trace_configuration,
            observability_configuration_revision: self
                .observability_configuration_revision
                .unwrap_or_default(),
            latest: self.latest.unwrap_or_default(),
            status: self.status,
            created_at: self.created_at,
            deleted_at: self.deleted_at,
        }
    }
}
