// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides summary information for an operation that occurred on an App Runner service.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OperationSummary {
    /// <p>A unique ID of this operation. It's unique in the scope of the App Runner service.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The type of operation. It indicates a specific action that occured.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::OperationType>,
    /// <p>The current state of the operation.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::OperationStatus>,
    /// <p>The Amazon Resource Name (ARN) of the resource that the operation acted on (for example, an App Runner service).</p>
    #[doc(hidden)]
    pub target_arn: std::option::Option<std::string::String>,
    /// <p>The time when the operation started. It's in the Unix time stamp format.</p>
    #[doc(hidden)]
    pub started_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the operation ended. It's in the Unix time stamp format.</p>
    #[doc(hidden)]
    pub ended_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the operation was last updated. It's in the Unix time stamp format.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl OperationSummary {
    /// <p>A unique ID of this operation. It's unique in the scope of the App Runner service.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The type of operation. It indicates a specific action that occured.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::OperationType> {
        self.r#type.as_ref()
    }
    /// <p>The current state of the operation.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::OperationStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the resource that the operation acted on (for example, an App Runner service).</p>
    pub fn target_arn(&self) -> std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The time when the operation started. It's in the Unix time stamp format.</p>
    pub fn started_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.started_at.as_ref()
    }
    /// <p>The time when the operation ended. It's in the Unix time stamp format.</p>
    pub fn ended_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.ended_at.as_ref()
    }
    /// <p>The time when the operation was last updated. It's in the Unix time stamp format.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
}
impl OperationSummary {
    /// Creates a new builder-style object to manufacture [`OperationSummary`](crate::types::OperationSummary).
    pub fn builder() -> crate::types::builders::OperationSummaryBuilder {
        crate::types::builders::OperationSummaryBuilder::default()
    }
}

/// A builder for [`OperationSummary`](crate::types::OperationSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OperationSummaryBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::OperationType>,
    pub(crate) status: std::option::Option<crate::types::OperationStatus>,
    pub(crate) target_arn: std::option::Option<std::string::String>,
    pub(crate) started_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) ended_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
}
impl OperationSummaryBuilder {
    /// <p>A unique ID of this operation. It's unique in the scope of the App Runner service.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>A unique ID of this operation. It's unique in the scope of the App Runner service.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The type of operation. It indicates a specific action that occured.</p>
    pub fn r#type(mut self, input: crate::types::OperationType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of operation. It indicates a specific action that occured.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::OperationType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The current state of the operation.</p>
    pub fn status(mut self, input: crate::types::OperationStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The current state of the operation.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::OperationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource that the operation acted on (for example, an App Runner service).</p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the resource that the operation acted on (for example, an App Runner service).</p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The time when the operation started. It's in the Unix time stamp format.</p>
    pub fn started_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.started_at = Some(input);
        self
    }
    /// <p>The time when the operation started. It's in the Unix time stamp format.</p>
    pub fn set_started_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.started_at = input;
        self
    }
    /// <p>The time when the operation ended. It's in the Unix time stamp format.</p>
    pub fn ended_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.ended_at = Some(input);
        self
    }
    /// <p>The time when the operation ended. It's in the Unix time stamp format.</p>
    pub fn set_ended_at(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.ended_at = input;
        self
    }
    /// <p>The time when the operation was last updated. It's in the Unix time stamp format.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The time when the operation was last updated. It's in the Unix time stamp format.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// Consumes the builder and constructs a [`OperationSummary`](crate::types::OperationSummary).
    pub fn build(self) -> crate::types::OperationSummary {
        crate::types::OperationSummary {
            id: self.id,
            r#type: self.r#type,
            status: self.status,
            target_arn: self.target_arn,
            started_at: self.started_at,
            ended_at: self.ended_at,
            updated_at: self.updated_at,
        }
    }
}
