// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a source code repository.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CodeRepository {
    /// <p>The location of the repository that contains the source code.</p>
    #[doc(hidden)]
    pub repository_url: std::option::Option<std::string::String>,
    /// <p>The version that should be used within the source code repository.</p>
    #[doc(hidden)]
    pub source_code_version: std::option::Option<crate::types::SourceCodeVersion>,
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    #[doc(hidden)]
    pub code_configuration: std::option::Option<crate::types::CodeConfiguration>,
}
impl CodeRepository {
    /// <p>The location of the repository that contains the source code.</p>
    pub fn repository_url(&self) -> std::option::Option<&str> {
        self.repository_url.as_deref()
    }
    /// <p>The version that should be used within the source code repository.</p>
    pub fn source_code_version(&self) -> std::option::Option<&crate::types::SourceCodeVersion> {
        self.source_code_version.as_ref()
    }
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    pub fn code_configuration(&self) -> std::option::Option<&crate::types::CodeConfiguration> {
        self.code_configuration.as_ref()
    }
}
impl CodeRepository {
    /// Creates a new builder-style object to manufacture [`CodeRepository`](crate::types::CodeRepository).
    pub fn builder() -> crate::types::builders::CodeRepositoryBuilder {
        crate::types::builders::CodeRepositoryBuilder::default()
    }
}

/// A builder for [`CodeRepository`](crate::types::CodeRepository).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CodeRepositoryBuilder {
    pub(crate) repository_url: std::option::Option<std::string::String>,
    pub(crate) source_code_version: std::option::Option<crate::types::SourceCodeVersion>,
    pub(crate) code_configuration: std::option::Option<crate::types::CodeConfiguration>,
}
impl CodeRepositoryBuilder {
    /// <p>The location of the repository that contains the source code.</p>
    pub fn repository_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_url = Some(input.into());
        self
    }
    /// <p>The location of the repository that contains the source code.</p>
    pub fn set_repository_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_url = input;
        self
    }
    /// <p>The version that should be used within the source code repository.</p>
    pub fn source_code_version(mut self, input: crate::types::SourceCodeVersion) -> Self {
        self.source_code_version = Some(input);
        self
    }
    /// <p>The version that should be used within the source code repository.</p>
    pub fn set_source_code_version(
        mut self,
        input: std::option::Option<crate::types::SourceCodeVersion>,
    ) -> Self {
        self.source_code_version = input;
        self
    }
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    pub fn code_configuration(mut self, input: crate::types::CodeConfiguration) -> Self {
        self.code_configuration = Some(input);
        self
    }
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    pub fn set_code_configuration(
        mut self,
        input: std::option::Option<crate::types::CodeConfiguration>,
    ) -> Self {
        self.code_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`CodeRepository`](crate::types::CodeRepository).
    pub fn build(self) -> crate::types::CodeRepository {
        crate::types::CodeRepository {
            repository_url: self.repository_url,
            source_code_version: self.source_code_version,
            code_configuration: self.code_configuration,
        }
    }
}
