// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a source code repository.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CodeRepository {
    /// <p>The location of the repository that contains the source code.</p>
    pub repository_url: ::std::string::String,
    /// <p>The version that should be used within the source code repository.</p>
    pub source_code_version: ::std::option::Option<crate::types::SourceCodeVersion>,
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    pub code_configuration: ::std::option::Option<crate::types::CodeConfiguration>,
    /// <p>The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.</p>
    pub source_directory: ::std::option::Option<::std::string::String>,
}
impl CodeRepository {
    /// <p>The location of the repository that contains the source code.</p>
    pub fn repository_url(&self) -> &str {
        use std::ops::Deref;
        self.repository_url.deref()
    }
    /// <p>The version that should be used within the source code repository.</p>
    pub fn source_code_version(&self) -> ::std::option::Option<&crate::types::SourceCodeVersion> {
        self.source_code_version.as_ref()
    }
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    pub fn code_configuration(&self) -> ::std::option::Option<&crate::types::CodeConfiguration> {
        self.code_configuration.as_ref()
    }
    /// <p>The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.</p>
    pub fn source_directory(&self) -> ::std::option::Option<&str> {
        self.source_directory.as_deref()
    }
}
impl CodeRepository {
    /// Creates a new builder-style object to manufacture [`CodeRepository`](crate::types::CodeRepository).
    pub fn builder() -> crate::types::builders::CodeRepositoryBuilder {
        crate::types::builders::CodeRepositoryBuilder::default()
    }
}

/// A builder for [`CodeRepository`](crate::types::CodeRepository).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CodeRepositoryBuilder {
    pub(crate) repository_url: ::std::option::Option<::std::string::String>,
    pub(crate) source_code_version: ::std::option::Option<crate::types::SourceCodeVersion>,
    pub(crate) code_configuration: ::std::option::Option<crate::types::CodeConfiguration>,
    pub(crate) source_directory: ::std::option::Option<::std::string::String>,
}
impl CodeRepositoryBuilder {
    /// <p>The location of the repository that contains the source code.</p>
    /// This field is required.
    pub fn repository_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location of the repository that contains the source code.</p>
    pub fn set_repository_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_url = input;
        self
    }
    /// <p>The location of the repository that contains the source code.</p>
    pub fn get_repository_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_url
    }
    /// <p>The version that should be used within the source code repository.</p>
    /// This field is required.
    pub fn source_code_version(mut self, input: crate::types::SourceCodeVersion) -> Self {
        self.source_code_version = ::std::option::Option::Some(input);
        self
    }
    /// <p>The version that should be used within the source code repository.</p>
    pub fn set_source_code_version(mut self, input: ::std::option::Option<crate::types::SourceCodeVersion>) -> Self {
        self.source_code_version = input;
        self
    }
    /// <p>The version that should be used within the source code repository.</p>
    pub fn get_source_code_version(&self) -> &::std::option::Option<crate::types::SourceCodeVersion> {
        &self.source_code_version
    }
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    pub fn code_configuration(mut self, input: crate::types::CodeConfiguration) -> Self {
        self.code_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    pub fn set_code_configuration(mut self, input: ::std::option::Option<crate::types::CodeConfiguration>) -> Self {
        self.code_configuration = input;
        self
    }
    /// <p>Configuration for building and running the service from a source code repository.</p> <note>
    /// <p> <code>CodeConfiguration</code> is required only for <code>CreateService</code> request.</p>
    /// </note>
    pub fn get_code_configuration(&self) -> &::std::option::Option<crate::types::CodeConfiguration> {
        &self.code_configuration
    }
    /// <p>The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.</p>
    pub fn source_directory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_directory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.</p>
    pub fn set_source_directory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_directory = input;
        self
    }
    /// <p>The path of the directory that stores source code and configuration files. The build and start commands also execute from here. The path is absolute from root and, if not specified, defaults to the repository root.</p>
    pub fn get_source_directory(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_directory
    }
    /// Consumes the builder and constructs a [`CodeRepository`](crate::types::CodeRepository).
    /// This method will fail if any of the following fields are not set:
    /// - [`repository_url`](crate::types::builders::CodeRepositoryBuilder::repository_url)
    pub fn build(self) -> ::std::result::Result<crate::types::CodeRepository, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CodeRepository {
            repository_url: self.repository_url.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "repository_url",
                    "repository_url was not specified but it is required when building CodeRepository",
                )
            })?,
            source_code_version: self.source_code_version,
            code_configuration: self.code_configuration,
            source_directory: self.source_directory,
        })
    }
}
