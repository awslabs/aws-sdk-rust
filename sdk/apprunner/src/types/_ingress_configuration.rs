// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Network configuration settings for inbound network traffic.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct IngressConfiguration {
    /// <p>Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to <code>True</code>. To make the service privately accessible, from only within an Amazon VPC set it to <code>False</code>. </p>
    #[doc(hidden)]
    pub is_publicly_accessible: bool,
}
impl IngressConfiguration {
    /// <p>Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to <code>True</code>. To make the service privately accessible, from only within an Amazon VPC set it to <code>False</code>. </p>
    pub fn is_publicly_accessible(&self) -> bool {
        self.is_publicly_accessible
    }
}
impl IngressConfiguration {
    /// Creates a new builder-style object to manufacture [`IngressConfiguration`](crate::types::IngressConfiguration).
    pub fn builder() -> crate::types::builders::IngressConfigurationBuilder {
        crate::types::builders::IngressConfigurationBuilder::default()
    }
}

/// A builder for [`IngressConfiguration`](crate::types::IngressConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IngressConfigurationBuilder {
    pub(crate) is_publicly_accessible: std::option::Option<bool>,
}
impl IngressConfigurationBuilder {
    /// <p>Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to <code>True</code>. To make the service privately accessible, from only within an Amazon VPC set it to <code>False</code>. </p>
    pub fn is_publicly_accessible(mut self, input: bool) -> Self {
        self.is_publicly_accessible = Some(input);
        self
    }
    /// <p>Specifies whether your App Runner service is publicly accessible. To make the service publicly accessible set it to <code>True</code>. To make the service privately accessible, from only within an Amazon VPC set it to <code>False</code>. </p>
    pub fn set_is_publicly_accessible(mut self, input: std::option::Option<bool>) -> Self {
        self.is_publicly_accessible = input;
        self
    }
    /// Consumes the builder and constructs a [`IngressConfiguration`](crate::types::IngressConfiguration).
    pub fn build(self) -> crate::types::IngressConfiguration {
        crate::types::IngressConfiguration {
            is_publicly_accessible: self.is_publicly_accessible.unwrap_or_default(),
        }
    }
}
