// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the configuration that App Runner uses to run an App Runner service using an image pulled from a source image repository.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ImageConfiguration {
    /// <p>Environment variables that are available to your running App Runner service. An array of key-value pairs.</p>
    #[doc(hidden)]
    pub runtime_environment_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>An optional command that App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.</p>
    #[doc(hidden)]
    pub start_command: std::option::Option<std::string::String>,
    /// <p>The port that your application listens to in the container.</p>
    /// <p>Default: <code>8080</code> </p>
    #[doc(hidden)]
    pub port: std::option::Option<std::string::String>,
    /// <p>An array of key-value pairs representing the secrets and parameters that get referenced to your service as an environment variable. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.</p> <note>
    /// <ul>
    /// <li> <p> If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Amazon Web Services Region as the service that you're launching, you can use either the full ARN or name of the secret. If the parameter exists in a different Region, then the full ARN must be specified. </p> </li>
    /// <li> <p> Currently, cross account referencing of Amazon Web Services Systems Manager Parameter Store parameter is not supported. </p> </li>
    /// </ul>
    /// </note>
    #[doc(hidden)]
    pub runtime_environment_secrets:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ImageConfiguration {
    /// <p>Environment variables that are available to your running App Runner service. An array of key-value pairs.</p>
    pub fn runtime_environment_variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.runtime_environment_variables.as_ref()
    }
    /// <p>An optional command that App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.</p>
    pub fn start_command(&self) -> std::option::Option<&str> {
        self.start_command.as_deref()
    }
    /// <p>The port that your application listens to in the container.</p>
    /// <p>Default: <code>8080</code> </p>
    pub fn port(&self) -> std::option::Option<&str> {
        self.port.as_deref()
    }
    /// <p>An array of key-value pairs representing the secrets and parameters that get referenced to your service as an environment variable. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.</p> <note>
    /// <ul>
    /// <li> <p> If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Amazon Web Services Region as the service that you're launching, you can use either the full ARN or name of the secret. If the parameter exists in a different Region, then the full ARN must be specified. </p> </li>
    /// <li> <p> Currently, cross account referencing of Amazon Web Services Systems Manager Parameter Store parameter is not supported. </p> </li>
    /// </ul>
    /// </note>
    pub fn runtime_environment_secrets(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.runtime_environment_secrets.as_ref()
    }
}
impl std::fmt::Debug for ImageConfiguration {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImageConfiguration");
        formatter.field(
            "runtime_environment_variables",
            &self.runtime_environment_variables,
        );
        formatter.field("start_command", &"*** Sensitive Data Redacted ***");
        formatter.field("port", &self.port);
        formatter.field(
            "runtime_environment_secrets",
            &self.runtime_environment_secrets,
        );
        formatter.finish()
    }
}
impl ImageConfiguration {
    /// Creates a new builder-style object to manufacture [`ImageConfiguration`](crate::types::ImageConfiguration).
    pub fn builder() -> crate::types::builders::ImageConfigurationBuilder {
        crate::types::builders::ImageConfigurationBuilder::default()
    }
}

/// A builder for [`ImageConfiguration`](crate::types::ImageConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ImageConfigurationBuilder {
    pub(crate) runtime_environment_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) start_command: std::option::Option<std::string::String>,
    pub(crate) port: std::option::Option<std::string::String>,
    pub(crate) runtime_environment_secrets:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ImageConfigurationBuilder {
    /// Adds a key-value pair to `runtime_environment_variables`.
    ///
    /// To override the contents of this collection use [`set_runtime_environment_variables`](Self::set_runtime_environment_variables).
    ///
    /// <p>Environment variables that are available to your running App Runner service. An array of key-value pairs.</p>
    pub fn runtime_environment_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.runtime_environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.runtime_environment_variables = Some(hash_map);
        self
    }
    /// <p>Environment variables that are available to your running App Runner service. An array of key-value pairs.</p>
    pub fn set_runtime_environment_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.runtime_environment_variables = input;
        self
    }
    /// <p>An optional command that App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.</p>
    pub fn start_command(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_command = Some(input.into());
        self
    }
    /// <p>An optional command that App Runner runs to start the application in the source image. If specified, this command overrides the Docker image’s default start command.</p>
    pub fn set_start_command(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_command = input;
        self
    }
    /// <p>The port that your application listens to in the container.</p>
    /// <p>Default: <code>8080</code> </p>
    pub fn port(mut self, input: impl Into<std::string::String>) -> Self {
        self.port = Some(input.into());
        self
    }
    /// <p>The port that your application listens to in the container.</p>
    /// <p>Default: <code>8080</code> </p>
    pub fn set_port(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.port = input;
        self
    }
    /// Adds a key-value pair to `runtime_environment_secrets`.
    ///
    /// To override the contents of this collection use [`set_runtime_environment_secrets`](Self::set_runtime_environment_secrets).
    ///
    /// <p>An array of key-value pairs representing the secrets and parameters that get referenced to your service as an environment variable. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.</p> <note>
    /// <ul>
    /// <li> <p> If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Amazon Web Services Region as the service that you're launching, you can use either the full ARN or name of the secret. If the parameter exists in a different Region, then the full ARN must be specified. </p> </li>
    /// <li> <p> Currently, cross account referencing of Amazon Web Services Systems Manager Parameter Store parameter is not supported. </p> </li>
    /// </ul>
    /// </note>
    pub fn runtime_environment_secrets(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.runtime_environment_secrets.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.runtime_environment_secrets = Some(hash_map);
        self
    }
    /// <p>An array of key-value pairs representing the secrets and parameters that get referenced to your service as an environment variable. The supported values are either the full Amazon Resource Name (ARN) of the Secrets Manager secret or the full ARN of the parameter in the Amazon Web Services Systems Manager Parameter Store.</p> <note>
    /// <ul>
    /// <li> <p> If the Amazon Web Services Systems Manager Parameter Store parameter exists in the same Amazon Web Services Region as the service that you're launching, you can use either the full ARN or name of the secret. If the parameter exists in a different Region, then the full ARN must be specified. </p> </li>
    /// <li> <p> Currently, cross account referencing of Amazon Web Services Systems Manager Parameter Store parameter is not supported. </p> </li>
    /// </ul>
    /// </note>
    pub fn set_runtime_environment_secrets(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.runtime_environment_secrets = input;
        self
    }
    /// Consumes the builder and constructs a [`ImageConfiguration`](crate::types::ImageConfiguration).
    pub fn build(self) -> crate::types::ImageConfiguration {
        crate::types::ImageConfiguration {
            runtime_environment_variables: self.runtime_environment_variables,
            start_command: self.start_command,
            port: self.port,
            runtime_environment_secrets: self.runtime_environment_secrets,
        }
    }
}
impl std::fmt::Debug for ImageConfigurationBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ImageConfigurationBuilder");
        formatter.field(
            "runtime_environment_variables",
            &self.runtime_environment_variables,
        );
        formatter.field("start_command", &"*** Sensitive Data Redacted ***");
        formatter.field("port", &self.port);
        formatter.field(
            "runtime_environment_secrets",
            &self.runtime_environment_secrets,
        );
        formatter.finish()
    }
}
