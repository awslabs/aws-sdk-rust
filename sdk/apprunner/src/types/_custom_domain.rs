// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a custom domain that's associated with an App Runner service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomDomain {
    /// <p>An associated custom domain endpoint. It can be a root domain (for example, <code>example.com</code>), a subdomain (for example, <code>login.example.com</code> or <code>admin.login.example.com</code>), or a wildcard (for example, <code>*.example.com</code>).</p>
    pub domain_name: ::std::string::String,
    /// <p>When <code>true</code>, the subdomain <code>www.<i>DomainName</i> </code> is associated with the App Runner service in addition to the base domain.</p>
    pub enable_www_subdomain: bool,
    /// <p>A list of certificate CNAME records that's used for this domain name.</p>
    pub certificate_validation_records: ::std::option::Option<::std::vec::Vec<crate::types::CertificateValidationRecord>>,
    /// <p>The current state of the domain name association.</p>
    pub status: crate::types::CustomDomainAssociationStatus,
}
impl CustomDomain {
    /// <p>An associated custom domain endpoint. It can be a root domain (for example, <code>example.com</code>), a subdomain (for example, <code>login.example.com</code> or <code>admin.login.example.com</code>), or a wildcard (for example, <code>*.example.com</code>).</p>
    pub fn domain_name(&self) -> &str {
        use std::ops::Deref;
        self.domain_name.deref()
    }
    /// <p>When <code>true</code>, the subdomain <code>www.<i>DomainName</i> </code> is associated with the App Runner service in addition to the base domain.</p>
    pub fn enable_www_subdomain(&self) -> bool {
        self.enable_www_subdomain
    }
    /// <p>A list of certificate CNAME records that's used for this domain name.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.certificate_validation_records.is_none()`.
    pub fn certificate_validation_records(&self) -> &[crate::types::CertificateValidationRecord] {
        self.certificate_validation_records.as_deref().unwrap_or_default()
    }
    /// <p>The current state of the domain name association.</p>
    pub fn status(&self) -> &crate::types::CustomDomainAssociationStatus {
        &self.status
    }
}
impl CustomDomain {
    /// Creates a new builder-style object to manufacture [`CustomDomain`](crate::types::CustomDomain).
    pub fn builder() -> crate::types::builders::CustomDomainBuilder {
        crate::types::builders::CustomDomainBuilder::default()
    }
}

/// A builder for [`CustomDomain`](crate::types::CustomDomain).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomDomainBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) enable_www_subdomain: ::std::option::Option<bool>,
    pub(crate) certificate_validation_records: ::std::option::Option<::std::vec::Vec<crate::types::CertificateValidationRecord>>,
    pub(crate) status: ::std::option::Option<crate::types::CustomDomainAssociationStatus>,
}
impl CustomDomainBuilder {
    /// <p>An associated custom domain endpoint. It can be a root domain (for example, <code>example.com</code>), a subdomain (for example, <code>login.example.com</code> or <code>admin.login.example.com</code>), or a wildcard (for example, <code>*.example.com</code>).</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An associated custom domain endpoint. It can be a root domain (for example, <code>example.com</code>), a subdomain (for example, <code>login.example.com</code> or <code>admin.login.example.com</code>), or a wildcard (for example, <code>*.example.com</code>).</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>An associated custom domain endpoint. It can be a root domain (for example, <code>example.com</code>), a subdomain (for example, <code>login.example.com</code> or <code>admin.login.example.com</code>), or a wildcard (for example, <code>*.example.com</code>).</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>When <code>true</code>, the subdomain <code>www.<i>DomainName</i> </code> is associated with the App Runner service in addition to the base domain.</p>
    /// This field is required.
    pub fn enable_www_subdomain(mut self, input: bool) -> Self {
        self.enable_www_subdomain = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>true</code>, the subdomain <code>www.<i>DomainName</i> </code> is associated with the App Runner service in addition to the base domain.</p>
    pub fn set_enable_www_subdomain(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enable_www_subdomain = input;
        self
    }
    /// <p>When <code>true</code>, the subdomain <code>www.<i>DomainName</i> </code> is associated with the App Runner service in addition to the base domain.</p>
    pub fn get_enable_www_subdomain(&self) -> &::std::option::Option<bool> {
        &self.enable_www_subdomain
    }
    /// Appends an item to `certificate_validation_records`.
    ///
    /// To override the contents of this collection use [`set_certificate_validation_records`](Self::set_certificate_validation_records).
    ///
    /// <p>A list of certificate CNAME records that's used for this domain name.</p>
    pub fn certificate_validation_records(mut self, input: crate::types::CertificateValidationRecord) -> Self {
        let mut v = self.certificate_validation_records.unwrap_or_default();
        v.push(input);
        self.certificate_validation_records = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of certificate CNAME records that's used for this domain name.</p>
    pub fn set_certificate_validation_records(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::CertificateValidationRecord>>,
    ) -> Self {
        self.certificate_validation_records = input;
        self
    }
    /// <p>A list of certificate CNAME records that's used for this domain name.</p>
    pub fn get_certificate_validation_records(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::CertificateValidationRecord>> {
        &self.certificate_validation_records
    }
    /// <p>The current state of the domain name association.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::CustomDomainAssociationStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current state of the domain name association.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::CustomDomainAssociationStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current state of the domain name association.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::CustomDomainAssociationStatus> {
        &self.status
    }
    /// Consumes the builder and constructs a [`CustomDomain`](crate::types::CustomDomain).
    /// This method will fail if any of the following fields are not set:
    /// - [`domain_name`](crate::types::builders::CustomDomainBuilder::domain_name)
    /// - [`enable_www_subdomain`](crate::types::builders::CustomDomainBuilder::enable_www_subdomain)
    /// - [`status`](crate::types::builders::CustomDomainBuilder::status)
    pub fn build(self) -> ::std::result::Result<crate::types::CustomDomain, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::CustomDomain {
            domain_name: self.domain_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "domain_name",
                    "domain_name was not specified but it is required when building CustomDomain",
                )
            })?,
            enable_www_subdomain: self.enable_www_subdomain.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enable_www_subdomain",
                    "enable_www_subdomain was not specified but it is required when building CustomDomain",
                )
            })?,
            certificate_validation_records: self.certificate_validation_records,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building CustomDomain",
                )
            })?,
        })
    }
}
