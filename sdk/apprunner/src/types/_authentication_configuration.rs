// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes resources needed to authenticate access to some source repositories. The specific resource depends on the repository provider.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AuthenticationConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the App Runner connection that enables the App Runner service to connect to a source repository. It's required for GitHub code repositories.</p>
    #[doc(hidden)]
    pub connection_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants the App Runner service access to a source repository. It's required for ECR image repositories (but not for ECR Public repositories).</p>
    #[doc(hidden)]
    pub access_role_arn: std::option::Option<std::string::String>,
}
impl AuthenticationConfiguration {
    /// <p>The Amazon Resource Name (ARN) of the App Runner connection that enables the App Runner service to connect to a source repository. It's required for GitHub code repositories.</p>
    pub fn connection_arn(&self) -> std::option::Option<&str> {
        self.connection_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants the App Runner service access to a source repository. It's required for ECR image repositories (but not for ECR Public repositories).</p>
    pub fn access_role_arn(&self) -> std::option::Option<&str> {
        self.access_role_arn.as_deref()
    }
}
impl AuthenticationConfiguration {
    /// Creates a new builder-style object to manufacture [`AuthenticationConfiguration`](crate::types::AuthenticationConfiguration).
    pub fn builder() -> crate::types::builders::AuthenticationConfigurationBuilder {
        crate::types::builders::AuthenticationConfigurationBuilder::default()
    }
}

/// A builder for [`AuthenticationConfiguration`](crate::types::AuthenticationConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AuthenticationConfigurationBuilder {
    pub(crate) connection_arn: std::option::Option<std::string::String>,
    pub(crate) access_role_arn: std::option::Option<std::string::String>,
}
impl AuthenticationConfigurationBuilder {
    /// <p>The Amazon Resource Name (ARN) of the App Runner connection that enables the App Runner service to connect to a source repository. It's required for GitHub code repositories.</p>
    pub fn connection_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.connection_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner connection that enables the App Runner service to connect to a source repository. It's required for GitHub code repositories.</p>
    pub fn set_connection_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.connection_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants the App Runner service access to a source repository. It's required for ECR image repositories (but not for ECR Public repositories).</p>
    pub fn access_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that grants the App Runner service access to a source repository. It's required for ECR image repositories (but not for ECR Public repositories).</p>
    pub fn set_access_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_role_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`AuthenticationConfiguration`](crate::types::AuthenticationConfiguration).
    pub fn build(self) -> crate::types::AuthenticationConfiguration {
        crate::types::AuthenticationConfiguration {
            connection_arn: self.connection_arn,
            access_role_arn: self.access_role_arn,
        }
    }
}
