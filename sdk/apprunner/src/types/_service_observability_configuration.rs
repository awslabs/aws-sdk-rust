// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the observability configuration of an App Runner service. These are additional observability features, like tracing, that you choose to enable. They're configured in a separate resource that you associate with your service.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ServiceObservabilityConfiguration {
    /// <p>When <code>true</code>, an observability configuration resource is associated with the service, and an <code>ObservabilityConfigurationArn</code> is specified.</p>
    pub observability_enabled: bool,
    /// <p>The Amazon Resource Name (ARN) of the observability configuration that is associated with the service. Specified only when <code>ObservabilityEnabled</code> is <code>true</code>.</p>
    /// <p>Specify an ARN with a name and a revision number to associate that revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing/3</code> </p>
    /// <p>Specify just the name to associate the latest revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing</code> </p>
    pub observability_configuration_arn: ::std::option::Option<::std::string::String>,
}
impl ServiceObservabilityConfiguration {
    /// <p>When <code>true</code>, an observability configuration resource is associated with the service, and an <code>ObservabilityConfigurationArn</code> is specified.</p>
    pub fn observability_enabled(&self) -> bool {
        self.observability_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the observability configuration that is associated with the service. Specified only when <code>ObservabilityEnabled</code> is <code>true</code>.</p>
    /// <p>Specify an ARN with a name and a revision number to associate that revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing/3</code> </p>
    /// <p>Specify just the name to associate the latest revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing</code> </p>
    pub fn observability_configuration_arn(&self) -> ::std::option::Option<&str> {
        self.observability_configuration_arn.as_deref()
    }
}
impl ServiceObservabilityConfiguration {
    /// Creates a new builder-style object to manufacture [`ServiceObservabilityConfiguration`](crate::types::ServiceObservabilityConfiguration).
    pub fn builder() -> crate::types::builders::ServiceObservabilityConfigurationBuilder {
        crate::types::builders::ServiceObservabilityConfigurationBuilder::default()
    }
}

/// A builder for [`ServiceObservabilityConfiguration`](crate::types::ServiceObservabilityConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ServiceObservabilityConfigurationBuilder {
    pub(crate) observability_enabled: ::std::option::Option<bool>,
    pub(crate) observability_configuration_arn: ::std::option::Option<::std::string::String>,
}
impl ServiceObservabilityConfigurationBuilder {
    /// <p>When <code>true</code>, an observability configuration resource is associated with the service, and an <code>ObservabilityConfigurationArn</code> is specified.</p>
    /// This field is required.
    pub fn observability_enabled(mut self, input: bool) -> Self {
        self.observability_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>When <code>true</code>, an observability configuration resource is associated with the service, and an <code>ObservabilityConfigurationArn</code> is specified.</p>
    pub fn set_observability_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.observability_enabled = input;
        self
    }
    /// <p>When <code>true</code>, an observability configuration resource is associated with the service, and an <code>ObservabilityConfigurationArn</code> is specified.</p>
    pub fn get_observability_enabled(&self) -> &::std::option::Option<bool> {
        &self.observability_enabled
    }
    /// <p>The Amazon Resource Name (ARN) of the observability configuration that is associated with the service. Specified only when <code>ObservabilityEnabled</code> is <code>true</code>.</p>
    /// <p>Specify an ARN with a name and a revision number to associate that revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing/3</code> </p>
    /// <p>Specify just the name to associate the latest revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing</code> </p>
    pub fn observability_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.observability_configuration_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the observability configuration that is associated with the service. Specified only when <code>ObservabilityEnabled</code> is <code>true</code>.</p>
    /// <p>Specify an ARN with a name and a revision number to associate that revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing/3</code> </p>
    /// <p>Specify just the name to associate the latest revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing</code> </p>
    pub fn set_observability_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.observability_configuration_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the observability configuration that is associated with the service. Specified only when <code>ObservabilityEnabled</code> is <code>true</code>.</p>
    /// <p>Specify an ARN with a name and a revision number to associate that revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing/3</code> </p>
    /// <p>Specify just the name to associate the latest revision. For example: <code>arn:aws:apprunner:us-east-1:123456789012:observabilityconfiguration/xray-tracing</code> </p>
    pub fn get_observability_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.observability_configuration_arn
    }
    /// Consumes the builder and constructs a [`ServiceObservabilityConfiguration`](crate::types::ServiceObservabilityConfiguration).
    pub fn build(self) -> crate::types::ServiceObservabilityConfiguration {
        crate::types::ServiceObservabilityConfiguration {
            observability_enabled: self.observability_enabled.unwrap_or_default(),
            observability_configuration_arn: self.observability_configuration_arn,
        }
    }
}
