// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DNS Target record for a custom domain of this Amazon VPC.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VpcDnsTarget {
    /// <p>The Amazon Resource Name (ARN) of the VPC Ingress Connection that is associated with your service.</p>
    #[doc(hidden)]
    pub vpc_ingress_connection_arn: std::option::Option<std::string::String>,
    /// <p>The ID of the Amazon VPC that is associated with the custom domain name of the target DNS.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The domain name of your target DNS that is associated with the Amazon VPC.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
}
impl VpcDnsTarget {
    /// <p>The Amazon Resource Name (ARN) of the VPC Ingress Connection that is associated with your service.</p>
    pub fn vpc_ingress_connection_arn(&self) -> std::option::Option<&str> {
        self.vpc_ingress_connection_arn.as_deref()
    }
    /// <p>The ID of the Amazon VPC that is associated with the custom domain name of the target DNS.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The domain name of your target DNS that is associated with the Amazon VPC.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
}
impl VpcDnsTarget {
    /// Creates a new builder-style object to manufacture [`VpcDnsTarget`](crate::types::VpcDnsTarget).
    pub fn builder() -> crate::types::builders::VpcDnsTargetBuilder {
        crate::types::builders::VpcDnsTargetBuilder::default()
    }
}

/// A builder for [`VpcDnsTarget`](crate::types::VpcDnsTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VpcDnsTargetBuilder {
    pub(crate) vpc_ingress_connection_arn: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
}
impl VpcDnsTargetBuilder {
    /// <p>The Amazon Resource Name (ARN) of the VPC Ingress Connection that is associated with your service.</p>
    pub fn vpc_ingress_connection_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_ingress_connection_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the VPC Ingress Connection that is associated with your service.</p>
    pub fn set_vpc_ingress_connection_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.vpc_ingress_connection_arn = input;
        self
    }
    /// <p>The ID of the Amazon VPC that is associated with the custom domain name of the target DNS.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The ID of the Amazon VPC that is associated with the custom domain name of the target DNS.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>The domain name of your target DNS that is associated with the Amazon VPC.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The domain name of your target DNS that is associated with the Amazon VPC.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// Consumes the builder and constructs a [`VpcDnsTarget`](crate::types::VpcDnsTarget).
    pub fn build(self) -> crate::types::VpcDnsTarget {
        crate::types::VpcDnsTarget {
            vpc_ingress_connection_arn: self.vpc_ingress_connection_arn,
            vpc_id: self.vpc_id,
            domain_name: self.domain_name,
        }
    }
}
