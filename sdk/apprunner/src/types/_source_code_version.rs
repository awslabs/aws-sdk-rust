// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Identifies a version of code that App Runner refers to within a source code repository.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SourceCodeVersion {
    /// <p>The type of version identifier.</p>
    /// <p>For a git-based repository, branches represent versions.</p>
    pub r#type: crate::types::SourceCodeVersionType,
    /// <p>A source code version.</p>
    /// <p>For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.</p>
    pub value: ::std::string::String,
}
impl SourceCodeVersion {
    /// <p>The type of version identifier.</p>
    /// <p>For a git-based repository, branches represent versions.</p>
    pub fn r#type(&self) -> &crate::types::SourceCodeVersionType {
        &self.r#type
    }
    /// <p>A source code version.</p>
    /// <p>For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.</p>
    pub fn value(&self) -> &str {
        use std::ops::Deref;
        self.value.deref()
    }
}
impl SourceCodeVersion {
    /// Creates a new builder-style object to manufacture [`SourceCodeVersion`](crate::types::SourceCodeVersion).
    pub fn builder() -> crate::types::builders::SourceCodeVersionBuilder {
        crate::types::builders::SourceCodeVersionBuilder::default()
    }
}

/// A builder for [`SourceCodeVersion`](crate::types::SourceCodeVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SourceCodeVersionBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::SourceCodeVersionType>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl SourceCodeVersionBuilder {
    /// <p>The type of version identifier.</p>
    /// <p>For a git-based repository, branches represent versions.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SourceCodeVersionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of version identifier.</p>
    /// <p>For a git-based repository, branches represent versions.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SourceCodeVersionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of version identifier.</p>
    /// <p>For a git-based repository, branches represent versions.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SourceCodeVersionType> {
        &self.r#type
    }
    /// <p>A source code version.</p>
    /// <p>For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.</p>
    /// This field is required.
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A source code version.</p>
    /// <p>For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>A source code version.</p>
    /// <p>For a git-based repository, a branch name maps to a specific version. App Runner uses the most recent commit to the branch.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`SourceCodeVersion`](crate::types::SourceCodeVersion).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::SourceCodeVersionBuilder::r#type)
    /// - [`value`](crate::types::builders::SourceCodeVersionBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::SourceCodeVersion, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SourceCodeVersion {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SourceCodeVersion",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building SourceCodeVersion",
                )
            })?,
        })
    }
}
