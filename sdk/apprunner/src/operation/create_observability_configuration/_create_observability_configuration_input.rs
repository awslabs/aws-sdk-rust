// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateObservabilityConfigurationInput {
    /// <p>A name for the observability configuration. When you use it for the first time in an Amazon Web Services Region, App Runner creates revision number <code>1</code> of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.</p> <note>
    /// <p>The name <code>DefaultConfiguration</code> is reserved. You can't use it to create a new observability configuration, and you can't create a revision of it.</p>
    /// <p>When you want to use your own observability configuration for your App Runner service, <i>create a configuration with a different name</i>, and then provide it when you create or update your service.</p>
    /// </note>
    pub observability_configuration_name: ::std::option::Option<::std::string::String>,
    /// <p>The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.</p>
    pub trace_configuration: ::std::option::Option<crate::types::TraceConfiguration>,
    /// <p>A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateObservabilityConfigurationInput {
    /// <p>A name for the observability configuration. When you use it for the first time in an Amazon Web Services Region, App Runner creates revision number <code>1</code> of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.</p> <note>
    /// <p>The name <code>DefaultConfiguration</code> is reserved. You can't use it to create a new observability configuration, and you can't create a revision of it.</p>
    /// <p>When you want to use your own observability configuration for your App Runner service, <i>create a configuration with a different name</i>, and then provide it when you create or update your service.</p>
    /// </note>
    pub fn observability_configuration_name(&self) -> ::std::option::Option<&str> {
        self.observability_configuration_name.as_deref()
    }
    /// <p>The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.</p>
    pub fn trace_configuration(&self) -> ::std::option::Option<&crate::types::TraceConfiguration> {
        self.trace_configuration.as_ref()
    }
    /// <p>A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateObservabilityConfigurationInput {
    /// Creates a new builder-style object to manufacture [`CreateObservabilityConfigurationInput`](crate::operation::create_observability_configuration::CreateObservabilityConfigurationInput).
    pub fn builder() -> crate::operation::create_observability_configuration::builders::CreateObservabilityConfigurationInputBuilder {
        crate::operation::create_observability_configuration::builders::CreateObservabilityConfigurationInputBuilder::default()
    }
}

/// A builder for [`CreateObservabilityConfigurationInput`](crate::operation::create_observability_configuration::CreateObservabilityConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateObservabilityConfigurationInputBuilder {
    pub(crate) observability_configuration_name: ::std::option::Option<::std::string::String>,
    pub(crate) trace_configuration: ::std::option::Option<crate::types::TraceConfiguration>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateObservabilityConfigurationInputBuilder {
    /// <p>A name for the observability configuration. When you use it for the first time in an Amazon Web Services Region, App Runner creates revision number <code>1</code> of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.</p> <note>
    /// <p>The name <code>DefaultConfiguration</code> is reserved. You can't use it to create a new observability configuration, and you can't create a revision of it.</p>
    /// <p>When you want to use your own observability configuration for your App Runner service, <i>create a configuration with a different name</i>, and then provide it when you create or update your service.</p>
    /// </note>
    /// This field is required.
    pub fn observability_configuration_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.observability_configuration_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the observability configuration. When you use it for the first time in an Amazon Web Services Region, App Runner creates revision number <code>1</code> of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.</p> <note>
    /// <p>The name <code>DefaultConfiguration</code> is reserved. You can't use it to create a new observability configuration, and you can't create a revision of it.</p>
    /// <p>When you want to use your own observability configuration for your App Runner service, <i>create a configuration with a different name</i>, and then provide it when you create or update your service.</p>
    /// </note>
    pub fn set_observability_configuration_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.observability_configuration_name = input;
        self
    }
    /// <p>A name for the observability configuration. When you use it for the first time in an Amazon Web Services Region, App Runner creates revision number <code>1</code> of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.</p> <note>
    /// <p>The name <code>DefaultConfiguration</code> is reserved. You can't use it to create a new observability configuration, and you can't create a revision of it.</p>
    /// <p>When you want to use your own observability configuration for your App Runner service, <i>create a configuration with a different name</i>, and then provide it when you create or update your service.</p>
    /// </note>
    pub fn get_observability_configuration_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.observability_configuration_name
    }
    /// <p>The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.</p>
    pub fn trace_configuration(mut self, input: crate::types::TraceConfiguration) -> Self {
        self.trace_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.</p>
    pub fn set_trace_configuration(mut self, input: ::std::option::Option<crate::types::TraceConfiguration>) -> Self {
        self.trace_configuration = input;
        self
    }
    /// <p>The configuration of the tracing feature within this observability configuration. If you don't specify it, App Runner doesn't enable tracing.</p>
    pub fn get_trace_configuration(&self) -> &::std::option::Option<crate::types::TraceConfiguration> {
        &self.trace_configuration
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of metadata items that you can associate with your observability configuration resource. A tag is a key-value pair.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateObservabilityConfigurationInput`](crate::operation::create_observability_configuration::CreateObservabilityConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_observability_configuration::CreateObservabilityConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::create_observability_configuration::CreateObservabilityConfigurationInput {
                observability_configuration_name: self.observability_configuration_name,
                trace_configuration: self.trace_configuration,
                tags: self.tags,
            },
        )
    }
}
