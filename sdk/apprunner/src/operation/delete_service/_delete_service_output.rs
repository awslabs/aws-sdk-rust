// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteServiceOutput {
    /// <p>A description of the App Runner service that this request just deleted.</p>
    #[doc(hidden)]
    pub service: std::option::Option<crate::types::Service>,
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    #[doc(hidden)]
    pub operation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteServiceOutput {
    /// <p>A description of the App Runner service that this request just deleted.</p>
    pub fn service(&self) -> std::option::Option<&crate::types::Service> {
        self.service.as_ref()
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn operation_id(&self) -> std::option::Option<&str> {
        self.operation_id.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteServiceOutput {
    /// Creates a new builder-style object to manufacture [`DeleteServiceOutput`](crate::operation::delete_service::DeleteServiceOutput).
    pub fn builder() -> crate::operation::delete_service::builders::DeleteServiceOutputBuilder {
        crate::operation::delete_service::builders::DeleteServiceOutputBuilder::default()
    }
}

/// A builder for [`DeleteServiceOutput`](crate::operation::delete_service::DeleteServiceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteServiceOutputBuilder {
    pub(crate) service: std::option::Option<crate::types::Service>,
    pub(crate) operation_id: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteServiceOutputBuilder {
    /// <p>A description of the App Runner service that this request just deleted.</p>
    pub fn service(mut self, input: crate::types::Service) -> Self {
        self.service = Some(input);
        self
    }
    /// <p>A description of the App Runner service that this request just deleted.</p>
    pub fn set_service(mut self, input: std::option::Option<crate::types::Service>) -> Self {
        self.service = input;
        self
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn operation_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.operation_id = Some(input.into());
        self
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn set_operation_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.operation_id = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteServiceOutput`](crate::operation::delete_service::DeleteServiceOutput).
    pub fn build(self) -> crate::operation::delete_service::DeleteServiceOutput {
        crate::operation::delete_service::DeleteServiceOutput {
            service: self.service,
            operation_id: self.operation_id,
            _request_id: self._request_id,
        }
    }
}
