// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_custom_domain::_associate_custom_domain_output::AssociateCustomDomainOutputBuilder;

pub use crate::operation::associate_custom_domain::_associate_custom_domain_input::AssociateCustomDomainInputBuilder;

/// Fluent builder constructing a request to `AssociateCustomDomain`.
///
/// <p>Associate your own domain name with the App Runner subdomain URL of your App Runner service.</p>
/// <p>After you call <code>AssociateCustomDomain</code> and receive a successful response, use the information in the <code>CustomDomain</code> record that's returned to add CNAME records to your Domain Name System (DNS). For each mapped domain name, add a mapping to the target App Runner subdomain and one or more certificate validation records. App Runner then performs DNS validation to verify that you own or control the domain name that you associated. App Runner tracks domain validity in a certificate stored in <a href="https://docs.aws.amazon.com/acm/latest/userguide">AWS Certificate Manager (ACM)</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateCustomDomainFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::associate_custom_domain::builders::AssociateCustomDomainInputBuilder,
}
impl AssociateCustomDomainFluentBuilder {
    /// Creates a new `AssociateCustomDomain`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::associate_custom_domain::AssociateCustomDomain,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::associate_custom_domain::AssociateCustomDomainError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::associate_custom_domain::AssociateCustomDomainOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::associate_custom_domain::AssociateCustomDomainError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner service that you want to associate a custom domain name with.</p>
    pub fn service_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.service_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner service that you want to associate a custom domain name with.</p>
    pub fn set_service_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_service_arn(input);
        self
    }
    /// <p>A custom domain endpoint to associate. Specify a root domain (for example, <code>example.com</code>), a subdomain (for example, <code>login.example.com</code> or <code>admin.login.example.com</code>), or a wildcard (for example, <code>*.example.com</code>).</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>A custom domain endpoint to associate. Specify a root domain (for example, <code>example.com</code>), a subdomain (for example, <code>login.example.com</code> or <code>admin.login.example.com</code>), or a wildcard (for example, <code>*.example.com</code>).</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>Set to <code>true</code> to associate the subdomain <code>www.<i>DomainName</i> </code> with the App Runner service in addition to the base domain.</p>
    /// <p>Default: <code>true</code> </p>
    pub fn enable_www_subdomain(mut self, input: bool) -> Self {
        self.inner = self.inner.enable_www_subdomain(input);
        self
    }
    /// <p>Set to <code>true</code> to associate the subdomain <code>www.<i>DomainName</i> </code> with the App Runner service in addition to the base domain.</p>
    /// <p>Default: <code>true</code> </p>
    pub fn set_enable_www_subdomain(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_enable_www_subdomain(input);
        self
    }
}
