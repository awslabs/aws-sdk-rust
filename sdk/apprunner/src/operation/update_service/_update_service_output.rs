// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateServiceOutput {
    /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
    pub service: ::std::option::Option<crate::types::Service>,
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub operation_id: ::std::string::String,
    _request_id: Option<String>,
}
impl UpdateServiceOutput {
    /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
    pub fn service(&self) -> ::std::option::Option<&crate::types::Service> {
        self.service.as_ref()
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn operation_id(&self) -> &str {
        use std::ops::Deref;
        self.operation_id.deref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateServiceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateServiceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateServiceOutput`](crate::operation::update_service::UpdateServiceOutput).
    pub fn builder() -> crate::operation::update_service::builders::UpdateServiceOutputBuilder {
        crate::operation::update_service::builders::UpdateServiceOutputBuilder::default()
    }
}

/// A builder for [`UpdateServiceOutput`](crate::operation::update_service::UpdateServiceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateServiceOutputBuilder {
    pub(crate) service: ::std::option::Option<crate::types::Service>,
    pub(crate) operation_id: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl UpdateServiceOutputBuilder {
    /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
    /// This field is required.
    pub fn service(mut self, input: crate::types::Service) -> Self {
        self.service = ::std::option::Option::Some(input);
        self
    }
    /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
    pub fn set_service(mut self, input: ::std::option::Option<crate::types::Service>) -> Self {
        self.service = input;
        self
    }
    /// <p>A description of the App Runner service updated by this request. All configuration values in the returned <code>Service</code> structure reflect configuration changes that are being applied by this request.</p>
    pub fn get_service(&self) -> &::std::option::Option<crate::types::Service> {
        &self.service
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    /// This field is required.
    pub fn operation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn set_operation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_id = input;
        self
    }
    /// <p>The unique ID of the asynchronous operation that this request started. You can use it combined with the <code>ListOperations</code> call to track the operation's progress.</p>
    pub fn get_operation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_id
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateServiceOutput`](crate::operation::update_service::UpdateServiceOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`operation_id`](crate::operation::update_service::builders::UpdateServiceOutputBuilder::operation_id)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_service::UpdateServiceOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_service::UpdateServiceOutput {
            service: self.service,
            operation_id: self.operation_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "operation_id",
                    "operation_id was not specified but it is required when building UpdateServiceOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
