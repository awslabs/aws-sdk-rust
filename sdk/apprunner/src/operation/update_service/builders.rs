// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_service::_update_service_output::UpdateServiceOutputBuilder;

pub use crate::operation::update_service::_update_service_input::UpdateServiceInputBuilder;

impl UpdateServiceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_service::UpdateServiceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_service::UpdateServiceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_service();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateService`.
///
/// <p>Update an App Runner service. You can update the source configuration and instance configuration of the service. You can also update the ARN of the auto scaling configuration resource that's associated with the service. However, you can't change the name or the encryption configuration of the service. These can be set only when you create the service.</p>
/// <p>To update the tags applied to your service, use the separate actions <code>TagResource</code> and <code>UntagResource</code>.</p>
/// <p>This is an asynchronous operation. On a successful call, you can use the returned <code>OperationId</code> and the <code>ListOperations</code> call to track the operation's progress.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateServiceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_service::builders::UpdateServiceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_service::UpdateServiceOutput,
        crate::operation::update_service::UpdateServiceError,
    > for UpdateServiceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_service::UpdateServiceOutput,
            crate::operation::update_service::UpdateServiceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateServiceFluentBuilder {
    /// Creates a new `UpdateService`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateService as a reference.
    pub fn as_input(&self) -> &crate::operation::update_service::builders::UpdateServiceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_service::UpdateServiceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_service::UpdateServiceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_service::UpdateService::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_service::UpdateService::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_service::UpdateServiceOutput,
        crate::operation::update_service::UpdateServiceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner service that you want to update.</p>
    pub fn service_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.service_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner service that you want to update.</p>
    pub fn set_service_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_service_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the App Runner service that you want to update.</p>
    pub fn get_service_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_service_arn()
    }
    /// <p>The source configuration to apply to the App Runner service.</p>
    /// <p>You can change the configuration of the code or image repository that the service uses. However, you can't switch from code to image or the other way around. This means that you must provide the same structure member of <code>SourceConfiguration</code> that you originally included when you created the service. Specifically, you can include either <code>CodeRepository</code> or <code>ImageRepository</code>. To update the source configuration, set the values to members of the structure that you include.</p>
    pub fn source_configuration(mut self, input: crate::types::SourceConfiguration) -> Self {
        self.inner = self.inner.source_configuration(input);
        self
    }
    /// <p>The source configuration to apply to the App Runner service.</p>
    /// <p>You can change the configuration of the code or image repository that the service uses. However, you can't switch from code to image or the other way around. This means that you must provide the same structure member of <code>SourceConfiguration</code> that you originally included when you created the service. Specifically, you can include either <code>CodeRepository</code> or <code>ImageRepository</code>. To update the source configuration, set the values to members of the structure that you include.</p>
    pub fn set_source_configuration(mut self, input: ::std::option::Option<crate::types::SourceConfiguration>) -> Self {
        self.inner = self.inner.set_source_configuration(input);
        self
    }
    /// <p>The source configuration to apply to the App Runner service.</p>
    /// <p>You can change the configuration of the code or image repository that the service uses. However, you can't switch from code to image or the other way around. This means that you must provide the same structure member of <code>SourceConfiguration</code> that you originally included when you created the service. Specifically, you can include either <code>CodeRepository</code> or <code>ImageRepository</code>. To update the source configuration, set the values to members of the structure that you include.</p>
    pub fn get_source_configuration(&self) -> &::std::option::Option<crate::types::SourceConfiguration> {
        self.inner.get_source_configuration()
    }
    /// <p>The runtime configuration to apply to instances (scaling units) of your service.</p>
    pub fn instance_configuration(mut self, input: crate::types::InstanceConfiguration) -> Self {
        self.inner = self.inner.instance_configuration(input);
        self
    }
    /// <p>The runtime configuration to apply to instances (scaling units) of your service.</p>
    pub fn set_instance_configuration(mut self, input: ::std::option::Option<crate::types::InstanceConfiguration>) -> Self {
        self.inner = self.inner.set_instance_configuration(input);
        self
    }
    /// <p>The runtime configuration to apply to instances (scaling units) of your service.</p>
    pub fn get_instance_configuration(&self) -> &::std::option::Option<crate::types::InstanceConfiguration> {
        self.inner.get_instance_configuration()
    }
    /// <p>The Amazon Resource Name (ARN) of an App Runner automatic scaling configuration resource that you want to associate with the App Runner service.</p>
    pub fn auto_scaling_configuration_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.auto_scaling_configuration_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an App Runner automatic scaling configuration resource that you want to associate with the App Runner service.</p>
    pub fn set_auto_scaling_configuration_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_auto_scaling_configuration_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an App Runner automatic scaling configuration resource that you want to associate with the App Runner service.</p>
    pub fn get_auto_scaling_configuration_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_auto_scaling_configuration_arn()
    }
    /// <p>The settings for the health check that App Runner performs to monitor the health of the App Runner service.</p>
    pub fn health_check_configuration(mut self, input: crate::types::HealthCheckConfiguration) -> Self {
        self.inner = self.inner.health_check_configuration(input);
        self
    }
    /// <p>The settings for the health check that App Runner performs to monitor the health of the App Runner service.</p>
    pub fn set_health_check_configuration(mut self, input: ::std::option::Option<crate::types::HealthCheckConfiguration>) -> Self {
        self.inner = self.inner.set_health_check_configuration(input);
        self
    }
    /// <p>The settings for the health check that App Runner performs to monitor the health of the App Runner service.</p>
    pub fn get_health_check_configuration(&self) -> &::std::option::Option<crate::types::HealthCheckConfiguration> {
        self.inner.get_health_check_configuration()
    }
    /// <p>Configuration settings related to network traffic of the web application that the App Runner service runs.</p>
    pub fn network_configuration(mut self, input: crate::types::NetworkConfiguration) -> Self {
        self.inner = self.inner.network_configuration(input);
        self
    }
    /// <p>Configuration settings related to network traffic of the web application that the App Runner service runs.</p>
    pub fn set_network_configuration(mut self, input: ::std::option::Option<crate::types::NetworkConfiguration>) -> Self {
        self.inner = self.inner.set_network_configuration(input);
        self
    }
    /// <p>Configuration settings related to network traffic of the web application that the App Runner service runs.</p>
    pub fn get_network_configuration(&self) -> &::std::option::Option<crate::types::NetworkConfiguration> {
        self.inner.get_network_configuration()
    }
    /// <p>The observability configuration of your service.</p>
    pub fn observability_configuration(mut self, input: crate::types::ServiceObservabilityConfiguration) -> Self {
        self.inner = self.inner.observability_configuration(input);
        self
    }
    /// <p>The observability configuration of your service.</p>
    pub fn set_observability_configuration(mut self, input: ::std::option::Option<crate::types::ServiceObservabilityConfiguration>) -> Self {
        self.inner = self.inner.set_observability_configuration(input);
        self
    }
    /// <p>The observability configuration of your service.</p>
    pub fn get_observability_configuration(&self) -> &::std::option::Option<crate::types::ServiceObservabilityConfiguration> {
        self.inner.get_observability_configuration()
    }
}
