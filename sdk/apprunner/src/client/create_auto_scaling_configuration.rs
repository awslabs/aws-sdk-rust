// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateAutoScalingConfiguration`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`auto_scaling_configuration_name(impl Into<String>)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::auto_scaling_configuration_name) / [`set_auto_scaling_configuration_name(Option<String>)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::set_auto_scaling_configuration_name):<br>required: **true**<br><p>A name for the auto scaling configuration. When you use it for the first time in an Amazon Web Services Region, App Runner creates revision number <code>1</code> of this name. When you use the same name in subsequent calls, App Runner creates incremental revisions of the configuration.</p> <note>   <p>Prior to the release of <a href="https://docs.aws.amazon.com/apprunner/latest/relnotes/release-2023-09-22-auto-scale-config.html">Auto scale configuration enhancements</a>, the name <code>DefaultConfiguration</code> was reserved. </p>   <p>This restriction is no longer in place. You can now manage <code>DefaultConfiguration</code> the same way you manage your custom auto scaling configurations. This means you can do the following with the <code>DefaultConfiguration</code> that App Runner provides:</p>   <ul>    <li> <p>Create new revisions of the <code>DefaultConfiguration</code>.</p> </li>    <li> <p>Delete the revisions of the <code>DefaultConfiguration</code>.</p> </li>    <li> <p>Delete the auto scaling configuration for which the App Runner <code>DefaultConfiguration</code> was created.</p> </li>    <li> <p>If you delete the auto scaling configuration you can create another custom auto scaling configuration with the same <code>DefaultConfiguration</code> name. The original <code>DefaultConfiguration</code> resource provided by App Runner remains in your account unless you make changes to it.</p> </li>   </ul>  </note><br>
    ///   - [`max_concurrency(i32)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::max_concurrency) / [`set_max_concurrency(Option<i32>)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::set_max_concurrency):<br>required: **false**<br><p>The maximum number of concurrent requests that you want an instance to process. If the number of concurrent requests exceeds this limit, App Runner scales up your service.</p>  <p>Default: <code>100</code> </p><br>
    ///   - [`min_size(i32)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::min_size) / [`set_min_size(Option<i32>)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::set_min_size):<br>required: **false**<br><p>The minimum number of instances that App Runner provisions for your service. The service always has at least <code>MinSize</code> provisioned instances. Some of them actively serve traffic. The rest of them (provisioned and inactive instances) are a cost-effective compute capacity reserve and are ready to be quickly activated. You pay for memory usage of all the provisioned instances. You pay for CPU usage of only the active subset.</p>  <p>App Runner temporarily doubles the number of provisioned instances during deployments, to maintain the same capacity for both old and new code.</p>  <p>Default: <code>1</code> </p><br>
    ///   - [`max_size(i32)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::max_size) / [`set_max_size(Option<i32>)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::set_max_size):<br>required: **false**<br><p>The maximum number of instances that your service scales up to. At most <code>MaxSize</code> instances actively serve traffic for your service.</p>  <p>Default: <code>25</code> </p><br>
    ///   - [`tags(Tag)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::set_tags):<br>required: **false**<br><p>A list of metadata items that you can associate with your auto scaling configuration resource. A tag is a key-value pair.</p><br>
    /// - On success, responds with [`CreateAutoScalingConfigurationOutput`](crate::operation::create_auto_scaling_configuration::CreateAutoScalingConfigurationOutput) with field(s):
    ///   - [`auto_scaling_configuration(Option<AutoScalingConfiguration>)`](crate::operation::create_auto_scaling_configuration::CreateAutoScalingConfigurationOutput::auto_scaling_configuration): <p>A description of the App Runner auto scaling configuration that's created by this request.</p>
    /// - On failure, responds with [`SdkError<CreateAutoScalingConfigurationError>`](crate::operation::create_auto_scaling_configuration::CreateAutoScalingConfigurationError)
    pub fn create_auto_scaling_configuration(
        &self,
    ) -> crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder {
        crate::operation::create_auto_scaling_configuration::builders::CreateAutoScalingConfigurationFluentBuilder::new(self.handle.clone())
    }
}
