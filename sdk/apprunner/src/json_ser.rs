// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_custom_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateCustomDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.service_arn {
        object.key("ServiceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.domain_name {
        object.key("DomainName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.enable_www_subdomain {
        object.key("EnableWWWSubdomain").boolean(*var_3);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_auto_scaling_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAutoScalingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_4) = &input.auto_scaling_configuration_name {
        object
            .key("AutoScalingConfigurationName")
            .string(var_4.as_str());
    }
    if let Some(var_5) = &input.max_concurrency {
        object.key("MaxConcurrency").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.min_size {
        object.key("MinSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.max_size {
        object.key("MaxSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_12) = &input.connection_name {
        object.key("ConnectionName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.provider_type {
        object.key("ProviderType").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("Tags").start_array();
        for item_16 in var_14 {
            {
                let mut object_17 = array_15.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.service_name {
        object.key("ServiceName").string(var_18.as_str());
    }
    if let Some(var_19) = &input.source_configuration {
        let mut object_20 = object.key("SourceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_source_configuration(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.instance_configuration {
        let mut object_22 = object.key("InstanceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_configuration(
            &mut object_22,
            var_21,
        )?;
        object_22.finish();
    }
    if let Some(var_23) = &input.tags {
        let mut array_24 = object.key("Tags").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_26, item_25)?;
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.encryption_configuration {
        let mut object_28 = object.key("EncryptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_encryption_configuration(
            &mut object_28,
            var_27,
        )?;
        object_28.finish();
    }
    if let Some(var_29) = &input.health_check_configuration {
        let mut object_30 = object.key("HealthCheckConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_health_check_configuration(
            &mut object_30,
            var_29,
        )?;
        object_30.finish();
    }
    if let Some(var_31) = &input.auto_scaling_configuration_arn {
        object
            .key("AutoScalingConfigurationArn")
            .string(var_31.as_str());
    }
    if let Some(var_32) = &input.network_configuration {
        let mut object_33 = object.key("NetworkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_33,
            var_32,
        )?;
        object_33.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_vpc_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateVpcConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.vpc_connector_name {
        object.key("VpcConnectorName").string(var_34.as_str());
    }
    if let Some(var_35) = &input.subnets {
        let mut array_36 = object.key("Subnets").start_array();
        for item_37 in var_35 {
            {
                array_36.value().string(item_37.as_str());
            }
        }
        array_36.finish();
    }
    if let Some(var_38) = &input.security_groups {
        let mut array_39 = object.key("SecurityGroups").start_array();
        for item_40 in var_38 {
            {
                array_39.value().string(item_40.as_str());
            }
        }
        array_39.finish();
    }
    if let Some(var_41) = &input.tags {
        let mut array_42 = object.key("Tags").start_array();
        for item_43 in var_41 {
            {
                let mut object_44 = array_42.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_44, item_43)?;
                object_44.finish();
            }
        }
        array_42.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_auto_scaling_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAutoScalingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_45) = &input.auto_scaling_configuration_arn {
        object
            .key("AutoScalingConfigurationArn")
            .string(var_45.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_connection_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteConnectionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_46) = &input.connection_arn {
        object.key("ConnectionArn").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.service_arn {
        object.key("ServiceArn").string(var_47.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_vpc_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVpcConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_48) = &input.vpc_connector_arn {
        object.key("VpcConnectorArn").string(var_48.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_auto_scaling_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAutoScalingConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_49) = &input.auto_scaling_configuration_arn {
        object
            .key("AutoScalingConfigurationArn")
            .string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_custom_domains_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCustomDomainsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.service_arn {
        object.key("ServiceArn").string(var_50.as_str());
    }
    if let Some(var_51) = &input.next_token {
        object.key("NextToken").string(var_51.as_str());
    }
    if let Some(var_52) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_52).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_53) = &input.service_arn {
        object.key("ServiceArn").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_vpc_connector_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeVpcConnectorInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.vpc_connector_arn {
        object.key("VpcConnectorArn").string(var_54.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_custom_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateCustomDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_55) = &input.service_arn {
        object.key("ServiceArn").string(var_55.as_str());
    }
    if let Some(var_56) = &input.domain_name {
        object.key("DomainName").string(var_56.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_auto_scaling_configurations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutoScalingConfigurationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_57) = &input.auto_scaling_configuration_name {
        object
            .key("AutoScalingConfigurationName")
            .string(var_57.as_str());
    }
    if input.latest_only {
        object.key("LatestOnly").boolean(input.latest_only);
    }
    if let Some(var_58) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_58).into()),
        );
    }
    if let Some(var_59) = &input.next_token {
        object.key("NextToken").string(var_59.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_connections_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListConnectionsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.connection_name {
        object.key("ConnectionName").string(var_60.as_str());
    }
    if let Some(var_61) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_61).into()),
        );
    }
    if let Some(var_62) = &input.next_token {
        object.key("NextToken").string(var_62.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_operations_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListOperationsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_63) = &input.service_arn {
        object.key("ServiceArn").string(var_63.as_str());
    }
    if let Some(var_64) = &input.next_token {
        object.key("NextToken").string(var_64.as_str());
    }
    if let Some(var_65) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_65).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_services_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListServicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_66) = &input.next_token {
        object.key("NextToken").string(var_66.as_str());
    }
    if let Some(var_67) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_67).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_68) = &input.resource_arn {
        object.key("ResourceArn").string(var_68.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_vpc_connectors_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVpcConnectorsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_69) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_69).into()),
        );
    }
    if let Some(var_70) = &input.next_token {
        object.key("NextToken").string(var_70.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_pause_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::PauseServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_71) = &input.service_arn {
        object.key("ServiceArn").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_resume_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResumeServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.service_arn {
        object.key("ServiceArn").string(var_72.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_start_deployment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartDeploymentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_73) = &input.service_arn {
        object.key("ServiceArn").string(var_73.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_74) = &input.resource_arn {
        object.key("ResourceArn").string(var_74.as_str());
    }
    if let Some(var_75) = &input.tags {
        let mut array_76 = object.key("Tags").start_array();
        for item_77 in var_75 {
            {
                let mut object_78 = array_76.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_78, item_77)?;
                object_78.finish();
            }
        }
        array_76.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_79) = &input.resource_arn {
        object.key("ResourceArn").string(var_79.as_str());
    }
    if let Some(var_80) = &input.tag_keys {
        let mut array_81 = object.key("TagKeys").start_array();
        for item_82 in var_80 {
            {
                array_81.value().string(item_82.as_str());
            }
        }
        array_81.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_83) = &input.service_arn {
        object.key("ServiceArn").string(var_83.as_str());
    }
    if let Some(var_84) = &input.source_configuration {
        let mut object_85 = object.key("SourceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_source_configuration(
            &mut object_85,
            var_84,
        )?;
        object_85.finish();
    }
    if let Some(var_86) = &input.instance_configuration {
        let mut object_87 = object.key("InstanceConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_instance_configuration(
            &mut object_87,
            var_86,
        )?;
        object_87.finish();
    }
    if let Some(var_88) = &input.auto_scaling_configuration_arn {
        object
            .key("AutoScalingConfigurationArn")
            .string(var_88.as_str());
    }
    if let Some(var_89) = &input.health_check_configuration {
        let mut object_90 = object.key("HealthCheckConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_health_check_configuration(
            &mut object_90,
            var_89,
        )?;
        object_90.finish();
    }
    if let Some(var_91) = &input.network_configuration {
        let mut object_92 = object.key("NetworkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_network_configuration(
            &mut object_92,
            var_91,
        )?;
        object_92.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_tag(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_93) = &input.key {
        object.key("Key").string(var_93.as_str());
    }
    if let Some(var_94) = &input.value {
        object.key("Value").string(var_94.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_95) = &input.code_repository {
        let mut object_96 = object.key("CodeRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_code_repository(&mut object_96, var_95)?;
        object_96.finish();
    }
    if let Some(var_97) = &input.image_repository {
        let mut object_98 = object.key("ImageRepository").start_object();
        crate::json_ser::serialize_structure_crate_model_image_repository(&mut object_98, var_97)?;
        object_98.finish();
    }
    if let Some(var_99) = &input.auto_deployments_enabled {
        object.key("AutoDeploymentsEnabled").boolean(*var_99);
    }
    if let Some(var_100) = &input.authentication_configuration {
        let mut object_101 = object.key("AuthenticationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_authentication_configuration(
            &mut object_101,
            var_100,
        )?;
        object_101.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_instance_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InstanceConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_102) = &input.cpu {
        object.key("Cpu").string(var_102.as_str());
    }
    if let Some(var_103) = &input.memory {
        object.key("Memory").string(var_103.as_str());
    }
    if let Some(var_104) = &input.instance_role_arn {
        object.key("InstanceRoleArn").string(var_104.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_encryption_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_105) = &input.kms_key {
        object.key("KmsKey").string(var_105.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_health_check_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::HealthCheckConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_106) = &input.protocol {
        object.key("Protocol").string(var_106.as_str());
    }
    if let Some(var_107) = &input.path {
        object.key("Path").string(var_107.as_str());
    }
    if let Some(var_108) = &input.interval {
        object.key("Interval").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_108).into()),
        );
    }
    if let Some(var_109) = &input.timeout {
        object.key("Timeout").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_109).into()),
        );
    }
    if let Some(var_110) = &input.healthy_threshold {
        object.key("HealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_110).into()),
        );
    }
    if let Some(var_111) = &input.unhealthy_threshold {
        object.key("UnhealthyThreshold").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_111).into()),
        );
    }
    Ok(())
}

pub fn serialize_structure_crate_model_network_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NetworkConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_112) = &input.egress_configuration {
        let mut object_113 = object.key("EgressConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_egress_configuration(
            &mut object_113,
            var_112,
        )?;
        object_113.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_repository(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeRepository,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_114) = &input.repository_url {
        object.key("RepositoryUrl").string(var_114.as_str());
    }
    if let Some(var_115) = &input.source_code_version {
        let mut object_116 = object.key("SourceCodeVersion").start_object();
        crate::json_ser::serialize_structure_crate_model_source_code_version(
            &mut object_116,
            var_115,
        )?;
        object_116.finish();
    }
    if let Some(var_117) = &input.code_configuration {
        let mut object_118 = object.key("CodeConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_code_configuration(
            &mut object_118,
            var_117,
        )?;
        object_118.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_repository(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageRepository,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_119) = &input.image_identifier {
        object.key("ImageIdentifier").string(var_119.as_str());
    }
    if let Some(var_120) = &input.image_configuration {
        let mut object_121 = object.key("ImageConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_image_configuration(
            &mut object_121,
            var_120,
        )?;
        object_121.finish();
    }
    if let Some(var_122) = &input.image_repository_type {
        object.key("ImageRepositoryType").string(var_122.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_authentication_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AuthenticationConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_123) = &input.connection_arn {
        object.key("ConnectionArn").string(var_123.as_str());
    }
    if let Some(var_124) = &input.access_role_arn {
        object.key("AccessRoleArn").string(var_124.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_egress_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EgressConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_125) = &input.egress_type {
        object.key("EgressType").string(var_125.as_str());
    }
    if let Some(var_126) = &input.vpc_connector_arn {
        object.key("VpcConnectorArn").string(var_126.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_source_code_version(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceCodeVersion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_127) = &input.r#type {
        object.key("Type").string(var_127.as_str());
    }
    if let Some(var_128) = &input.value {
        object.key("Value").string(var_128.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_129) = &input.configuration_source {
        object.key("ConfigurationSource").string(var_129.as_str());
    }
    if let Some(var_130) = &input.code_configuration_values {
        let mut object_131 = object.key("CodeConfigurationValues").start_object();
        crate::json_ser::serialize_structure_crate_model_code_configuration_values(
            &mut object_131,
            var_130,
        )?;
        object_131.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_model_image_configuration(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ImageConfiguration,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_132) = &input.runtime_environment_variables {
        let mut object_133 = object.key("RuntimeEnvironmentVariables").start_object();
        for (key_134, value_135) in var_132 {
            {
                object_133.key(key_134).string(value_135.as_str());
            }
        }
        object_133.finish();
    }
    if let Some(var_136) = &input.start_command {
        object.key("StartCommand").string(var_136.as_str());
    }
    if let Some(var_137) = &input.port {
        object.key("Port").string(var_137.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_model_code_configuration_values(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CodeConfigurationValues,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_138) = &input.runtime {
        object.key("Runtime").string(var_138.as_str());
    }
    if let Some(var_139) = &input.build_command {
        object.key("BuildCommand").string(var_139.as_str());
    }
    if let Some(var_140) = &input.start_command {
        object.key("StartCommand").string(var_140.as_str());
    }
    if let Some(var_141) = &input.port {
        object.key("Port").string(var_141.as_str());
    }
    if let Some(var_142) = &input.runtime_environment_variables {
        let mut object_143 = object.key("RuntimeEnvironmentVariables").start_object();
        for (key_144, value_145) in var_142 {
            {
                object_143.key(key_144).string(value_145.as_str());
            }
        }
        object_143.finish();
    }
    Ok(())
}
