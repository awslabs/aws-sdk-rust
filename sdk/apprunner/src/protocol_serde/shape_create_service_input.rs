// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_service::CreateServiceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.service_name {
        object.key("ServiceName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("SourceConfiguration").start_object();
        crate::protocol_serde::shape_source_configuration::ser_source_configuration(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.instance_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("InstanceConfiguration").start_object();
        crate::protocol_serde::shape_instance_configuration::ser_instance_configuration(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.tags {
        let mut array_7 = object.key("Tags").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.encryption_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("EncryptionConfiguration").start_object();
        crate::protocol_serde::shape_encryption_configuration::ser_encryption_configuration(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.health_check_configuration {
        #[allow(unused_mut)]
        let mut object_13 = object.key("HealthCheckConfiguration").start_object();
        crate::protocol_serde::shape_health_check_configuration::ser_health_check_configuration(
            &mut object_13,
            var_12,
        )?;
        object_13.finish();
    }
    if let Some(var_14) = &input.auto_scaling_configuration_arn {
        object
            .key("AutoScalingConfigurationArn")
            .string(var_14.as_str());
    }
    if let Some(var_15) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_16 = object.key("NetworkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.observability_configuration {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ObservabilityConfiguration").start_object();
        crate::protocol_serde::shape_service_observability_configuration::ser_service_observability_configuration(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
