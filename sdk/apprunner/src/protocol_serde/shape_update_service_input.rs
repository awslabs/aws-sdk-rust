// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_service_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_service::UpdateServiceInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.service_arn {
        object.key("ServiceArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.source_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("SourceConfiguration").start_object();
        crate::protocol_serde::shape_source_configuration::ser_source_configuration(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.instance_configuration {
        #[allow(unused_mut)]
        let mut object_5 = object.key("InstanceConfiguration").start_object();
        crate::protocol_serde::shape_instance_configuration::ser_instance_configuration(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.auto_scaling_configuration_arn {
        object
            .key("AutoScalingConfigurationArn")
            .string(var_6.as_str());
    }
    if let Some(var_7) = &input.health_check_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("HealthCheckConfiguration").start_object();
        crate::protocol_serde::shape_health_check_configuration::ser_health_check_configuration(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.network_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("NetworkConfiguration").start_object();
        crate::protocol_serde::shape_network_configuration::ser_network_configuration(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.observability_configuration {
        #[allow(unused_mut)]
        let mut object_12 = object.key("ObservabilityConfiguration").start_object();
        crate::protocol_serde::shape_service_observability_configuration::ser_service_observability_configuration(&mut object_12, var_11)?;
        object_12.finish();
    }
    Ok(())
}
