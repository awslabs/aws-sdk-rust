// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteNotification`](crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder::account_id) / [`set_account_id(Option<String>)`](crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder::set_account_id):<br>required: **true**<br><p>The <code>accountId</code> that is associated with the budget whose notification you want to delete.</p><br>
    ///   - [`budget_name(impl Into<String>)`](crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder::budget_name) / [`set_budget_name(Option<String>)`](crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder::set_budget_name):<br>required: **true**<br><p>The name of the budget whose notification you want to delete.</p><br>
    ///   - [`notification(Notification)`](crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder::notification) / [`set_notification(Option<Notification>)`](crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder::set_notification):<br>required: **true**<br><p>The notification that you want to delete.</p><br>
    /// - On success, responds with [`DeleteNotificationOutput`](crate::operation::delete_notification::DeleteNotificationOutput)
    /// - On failure, responds with [`SdkError<DeleteNotificationError>`](crate::operation::delete_notification::DeleteNotificationError)
    pub fn delete_notification(&self) -> crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder {
        crate::operation::delete_notification::builders::DeleteNotificationFluentBuilder::new(self.handle.clone())
    }
}
