// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// Fluent builder constructing a request to `CreateBudget`.
///
/// <p>Creates a budget and, if included, notifications and subscribers. </p> <important>
/// <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_CreateBudget.html#API_CreateBudget_Examples">Examples</a> section. </p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBudget {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_budget_input::Builder,
}
impl CreateBudget {
    /// Creates a new `CreateBudget`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateBudget,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateBudgetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateBudgetOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateBudgetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The budget object that you want to create.</p>
    pub fn budget(mut self, input: crate::model::Budget) -> Self {
        self.inner = self.inner.budget(input);
        self
    }
    /// <p>The budget object that you want to create.</p>
    pub fn set_budget(mut self, input: std::option::Option<crate::model::Budget>) -> Self {
        self.inner = self.inner.set_budget(input);
        self
    }
    /// Appends an item to `NotificationsWithSubscribers`.
    ///
    /// To override the contents of this collection use [`set_notifications_with_subscribers`](Self::set_notifications_with_subscribers).
    ///
    /// <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
    pub fn notifications_with_subscribers(
        mut self,
        input: crate::model::NotificationWithSubscribers,
    ) -> Self {
        self.inner = self.inner.notifications_with_subscribers(input);
        self
    }
    /// <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
    pub fn set_notifications_with_subscribers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::NotificationWithSubscribers>>,
    ) -> Self {
        self.inner = self.inner.set_notifications_with_subscribers(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateBudgetAction`.
///
/// <p> Creates a budget action. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBudgetAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_budget_action_input::Builder,
}
impl CreateBudgetAction {
    /// Creates a new `CreateBudgetAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateBudgetAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateBudgetActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateBudgetActionOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateBudgetActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    pub fn notification_type(mut self, input: crate::model::NotificationType) -> Self {
        self.inner = self.inner.notification_type(input);
        self
    }
    /// <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    pub fn set_notification_type(
        mut self,
        input: std::option::Option<crate::model::NotificationType>,
    ) -> Self {
        self.inner = self.inner.set_notification_type(input);
        self
    }
    /// <p> The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. </p>
    pub fn action_type(mut self, input: crate::model::ActionType) -> Self {
        self.inner = self.inner.action_type(input);
        self
    }
    /// <p> The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. </p>
    pub fn set_action_type(mut self, input: std::option::Option<crate::model::ActionType>) -> Self {
        self.inner = self.inner.set_action_type(input);
        self
    }
    /// <p>The trigger threshold of the action. </p>
    pub fn action_threshold(mut self, input: crate::model::ActionThreshold) -> Self {
        self.inner = self.inner.action_threshold(input);
        self
    }
    /// <p>The trigger threshold of the action. </p>
    pub fn set_action_threshold(
        mut self,
        input: std::option::Option<crate::model::ActionThreshold>,
    ) -> Self {
        self.inner = self.inner.set_action_threshold(input);
        self
    }
    /// <p>Specifies all of the type-specific parameters. </p>
    pub fn definition(mut self, input: crate::model::Definition) -> Self {
        self.inner = self.inner.definition(input);
        self
    }
    /// <p>Specifies all of the type-specific parameters. </p>
    pub fn set_definition(mut self, input: std::option::Option<crate::model::Definition>) -> Self {
        self.inner = self.inner.set_definition(input);
        self
    }
    /// <p> The role passed for action execution and reversion. Roles and actions must be in the same account. </p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p> The role passed for action execution and reversion. Roles and actions must be in the same account. </p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// <p> This specifies if the action needs manual or automatic approval. </p>
    pub fn approval_model(mut self, input: crate::model::ApprovalModel) -> Self {
        self.inner = self.inner.approval_model(input);
        self
    }
    /// <p> This specifies if the action needs manual or automatic approval. </p>
    pub fn set_approval_model(
        mut self,
        input: std::option::Option<crate::model::ApprovalModel>,
    ) -> Self {
        self.inner = self.inner.set_approval_model(input);
        self
    }
    /// Appends an item to `Subscribers`.
    ///
    /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
    ///
    /// <p> A list of subscribers.</p>
    pub fn subscribers(mut self, input: crate::model::Subscriber) -> Self {
        self.inner = self.inner.subscribers(input);
        self
    }
    /// <p> A list of subscribers.</p>
    pub fn set_subscribers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Subscriber>>,
    ) -> Self {
        self.inner = self.inner.set_subscribers(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateNotification`.
///
/// <p>Creates a notification. You must create the budget before you create the associated notification.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateNotification {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_notification_input::Builder,
}
impl CreateNotification {
    /// Creates a new `CreateNotification`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateNotification,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateNotificationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateNotificationOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateNotificationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want to create a notification for.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want to create a notification for.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget that you want Amazon Web Services to notify you about. Budget names must be unique within an account.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget that you want Amazon Web Services to notify you about. Budget names must be unique within an account.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>The notification that you want to create.</p>
    pub fn notification(mut self, input: crate::model::Notification) -> Self {
        self.inner = self.inner.notification(input);
        self
    }
    /// <p>The notification that you want to create.</p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::model::Notification>,
    ) -> Self {
        self.inner = self.inner.set_notification(input);
        self
    }
    /// Appends an item to `Subscribers`.
    ///
    /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
    ///
    /// <p>A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to 10 email subscribers.</p>
    pub fn subscribers(mut self, input: crate::model::Subscriber) -> Self {
        self.inner = self.inner.subscribers(input);
        self
    }
    /// <p>A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to 10 email subscribers.</p>
    pub fn set_subscribers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Subscriber>>,
    ) -> Self {
        self.inner = self.inner.set_subscribers(input);
        self
    }
}

/// Fluent builder constructing a request to `CreateSubscriber`.
///
/// <p>Creates a subscriber. You must create the associated budget and notification before you create the subscriber.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateSubscriber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::create_subscriber_input::Builder,
}
impl CreateSubscriber {
    /// Creates a new `CreateSubscriber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::CreateSubscriber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::CreateSubscriberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::CreateSubscriberOutput,
        aws_smithy_http::result::SdkError<crate::error::CreateSubscriberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want to create a subscriber for.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want to create a subscriber for.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget that you want to subscribe to. Budget names must be unique within an account.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget that you want to subscribe to. Budget names must be unique within an account.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>The notification that you want to create a subscriber for.</p>
    pub fn notification(mut self, input: crate::model::Notification) -> Self {
        self.inner = self.inner.notification(input);
        self
    }
    /// <p>The notification that you want to create a subscriber for.</p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::model::Notification>,
    ) -> Self {
        self.inner = self.inner.set_notification(input);
        self
    }
    /// <p>The subscriber that you want to associate with a budget notification.</p>
    pub fn subscriber(mut self, input: crate::model::Subscriber) -> Self {
        self.inner = self.inner.subscriber(input);
        self
    }
    /// <p>The subscriber that you want to associate with a budget notification.</p>
    pub fn set_subscriber(mut self, input: std::option::Option<crate::model::Subscriber>) -> Self {
        self.inner = self.inner.set_subscriber(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteBudget`.
///
/// <p>Deletes a budget. You can delete your budget at any time.</p> <important>
/// <p>Deleting a budget also deletes the notifications and subscribers that are associated with that budget.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBudget {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_budget_input::Builder,
}
impl DeleteBudget {
    /// Creates a new `DeleteBudget`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteBudget,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteBudgetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteBudgetOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteBudgetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want to delete.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want to delete.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget that you want to delete.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget that you want to delete.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteBudgetAction`.
///
/// <p> Deletes a budget action. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBudgetAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_budget_action_input::Builder,
}
impl DeleteBudgetAction {
    /// Creates a new `DeleteBudgetAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteBudgetAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteBudgetActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteBudgetActionOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteBudgetActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn action_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_id(input.into());
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteNotification`.
///
/// <p>Deletes a notification.</p> <important>
/// <p>Deleting a notification also deletes the subscribers that are associated with the notification.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteNotification {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_notification_input::Builder,
}
impl DeleteNotification {
    /// Creates a new `DeleteNotification`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteNotification,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteNotificationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteNotificationOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteNotificationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose notification you want to delete.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose notification you want to delete.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget whose notification you want to delete.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget whose notification you want to delete.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>The notification that you want to delete.</p>
    pub fn notification(mut self, input: crate::model::Notification) -> Self {
        self.inner = self.inner.notification(input);
        self
    }
    /// <p>The notification that you want to delete.</p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::model::Notification>,
    ) -> Self {
        self.inner = self.inner.set_notification(input);
        self
    }
}

/// Fluent builder constructing a request to `DeleteSubscriber`.
///
/// <p>Deletes a subscriber.</p> <important>
/// <p>Deleting the last subscriber to a notification also deletes the notification.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteSubscriber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::delete_subscriber_input::Builder,
}
impl DeleteSubscriber {
    /// Creates a new `DeleteSubscriber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DeleteSubscriber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DeleteSubscriberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DeleteSubscriberOutput,
        aws_smithy_http::result::SdkError<crate::error::DeleteSubscriberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to delete.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to delete.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget whose subscriber you want to delete.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget whose subscriber you want to delete.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>The notification whose subscriber you want to delete.</p>
    pub fn notification(mut self, input: crate::model::Notification) -> Self {
        self.inner = self.inner.notification(input);
        self
    }
    /// <p>The notification whose subscriber you want to delete.</p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::model::Notification>,
    ) -> Self {
        self.inner = self.inner.set_notification(input);
        self
    }
    /// <p>The subscriber that you want to delete.</p>
    pub fn subscriber(mut self, input: crate::model::Subscriber) -> Self {
        self.inner = self.inner.subscriber(input);
        self
    }
    /// <p>The subscriber that you want to delete.</p>
    pub fn set_subscriber(mut self, input: std::option::Option<crate::model::Subscriber>) -> Self {
        self.inner = self.inner.set_subscriber(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeBudget`.
///
/// <p>Describes a budget.</p> <important>
/// <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudget.html#API_DescribeBudget_Examples">Examples</a> section. </p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBudget {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_budget_input::Builder,
}
impl DescribeBudget {
    /// Creates a new `DescribeBudget`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeBudget,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeBudgetOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget that you want a description of.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget that you want a description of.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeBudgetAction`.
///
/// <p> Describes a budget action detail. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBudgetAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_budget_action_input::Builder,
}
impl DescribeBudgetAction {
    /// Creates a new `DescribeBudgetAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeBudgetAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeBudgetActionOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn action_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_id(input.into());
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_id(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeBudgetActionHistories`.
///
/// <p> Describes a budget action history detail. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBudgetActionHistories {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_budget_action_histories_input::Builder,
}
impl DescribeBudgetActionHistories {
    /// Creates a new `DescribeBudgetActionHistories`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeBudgetActionHistories,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionHistoriesError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeBudgetActionHistoriesOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionHistoriesError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeBudgetActionHistoriesPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeBudgetActionHistoriesPaginator {
        crate::paginator::DescribeBudgetActionHistoriesPaginator::new(self.handle, self.inner)
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn action_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_id(input.into());
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_id(input);
        self
    }
    /// <p>The period of time that's covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. </p>
    pub fn time_period(mut self, input: crate::model::TimePeriod) -> Self {
        self.inner = self.inner.time_period(input);
        self
    }
    /// <p>The period of time that's covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. </p>
    pub fn set_time_period(mut self, input: std::option::Option<crate::model::TimePeriod>) -> Self {
        self.inner = self.inner.set_time_period(input);
        self
    }
    /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> A generic string.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A generic string.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeBudgetActionsForAccount`.
///
/// <p> Describes all of the budget actions for an account. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBudgetActionsForAccount {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_budget_actions_for_account_input::Builder,
}
impl DescribeBudgetActionsForAccount {
    /// Creates a new `DescribeBudgetActionsForAccount`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeBudgetActionsForAccount,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionsForAccountError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeBudgetActionsForAccountOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionsForAccountError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeBudgetActionsForAccountPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeBudgetActionsForAccountPaginator {
        crate::paginator::DescribeBudgetActionsForAccountPaginator::new(self.handle, self.inner)
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> A generic string.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A generic string.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeBudgetActionsForBudget`.
///
/// <p> Describes all of the budget actions for a budget. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBudgetActionsForBudget {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_budget_actions_for_budget_input::Builder,
}
impl DescribeBudgetActionsForBudget {
    /// Creates a new `DescribeBudgetActionsForBudget`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeBudgetActionsForBudget,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionsForBudgetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeBudgetActionsForBudgetOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionsForBudgetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeBudgetActionsForBudgetPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeBudgetActionsForBudgetPaginator {
        crate::paginator::DescribeBudgetActionsForBudgetPaginator::new(self.handle, self.inner)
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> A generic string.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A generic string.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeBudgetNotificationsForAccount`.
///
/// <p> Lists the budget names and notifications that are associated with an account. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBudgetNotificationsForAccount {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_budget_notifications_for_account_input::Builder,
}
impl DescribeBudgetNotificationsForAccount {
    /// Creates a new `DescribeBudgetNotificationsForAccount`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeBudgetNotificationsForAccount,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetNotificationsForAccountError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeBudgetNotificationsForAccountOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetNotificationsForAccountError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeBudgetNotificationsForAccountPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::paginator::DescribeBudgetNotificationsForAccountPaginator {
        crate::paginator::DescribeBudgetNotificationsForAccountPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> An integer that shows how many budget name entries a paginated response contains. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> An integer that shows how many budget name entries a paginated response contains. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> A generic string.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A generic string.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeBudgetPerformanceHistory`.
///
/// <p>Describes the history for <code>DAILY</code>, <code>MONTHLY</code>, and <code>QUARTERLY</code> budgets. Budget history isn't available for <code>ANNUAL</code> budgets.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBudgetPerformanceHistory {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_budget_performance_history_input::Builder,
}
impl DescribeBudgetPerformanceHistory {
    /// Creates a new `DescribeBudgetPerformanceHistory`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeBudgetPerformanceHistory,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetPerformanceHistoryError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeBudgetPerformanceHistoryOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetPerformanceHistoryError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeBudgetPerformanceHistoryPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeBudgetPerformanceHistoryPaginator {
        crate::paginator::DescribeBudgetPerformanceHistoryPaginator::new(self.handle, self.inner)
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>Retrieves how often the budget went into an <code>ALARM</code> state for the specified time period.</p>
    pub fn time_period(mut self, input: crate::model::TimePeriod) -> Self {
        self.inner = self.inner.time_period(input);
        self
    }
    /// <p>Retrieves how often the budget went into an <code>ALARM</code> state for the specified time period.</p>
    pub fn set_time_period(mut self, input: std::option::Option<crate::model::TimePeriod>) -> Self {
        self.inner = self.inner.set_time_period(input);
        self
    }
    /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> A generic string.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> A generic string.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeBudgets`.
///
/// <p>Lists the budgets that are associated with an account.</p> <important>
/// <p>The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_DescribeBudgets.html#API_DescribeBudgets_Examples">Examples</a> section. </p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeBudgets {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_budgets_input::Builder,
}
impl DescribeBudgets {
    /// Creates a new `DescribeBudgets`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeBudgets,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeBudgetsOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeBudgetsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeBudgetsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeBudgetsPaginator {
        crate::paginator::DescribeBudgetsPaginator::new(self.handle, self.inner)
    }
    /// <p>The <code>accountId</code> that is associated with the budgets that you want descriptions of.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budgets that you want descriptions of.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeNotificationsForBudget`.
///
/// <p>Lists the notifications that are associated with a budget.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeNotificationsForBudget {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_notifications_for_budget_input::Builder,
}
impl DescribeNotificationsForBudget {
    /// Creates a new `DescribeNotificationsForBudget`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeNotificationsForBudget,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeNotificationsForBudgetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeNotificationsForBudgetOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeNotificationsForBudgetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeNotificationsForBudgetPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeNotificationsForBudgetPaginator {
        crate::paginator::DescribeNotificationsForBudgetPaginator::new(self.handle, self.inner)
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose notifications you want descriptions of.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose notifications you want descriptions of.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget whose notifications you want descriptions of.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget whose notifications you want descriptions of.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `DescribeSubscribersForNotification`.
///
/// <p>Lists the subscribers that are associated with a notification.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeSubscribersForNotification {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::describe_subscribers_for_notification_input::Builder,
}
impl DescribeSubscribersForNotification {
    /// Creates a new `DescribeSubscribersForNotification`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::DescribeSubscribersForNotification,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::DescribeSubscribersForNotificationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::DescribeSubscribersForNotificationOutput,
        aws_smithy_http::result::SdkError<crate::error::DescribeSubscribersForNotificationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::paginator::DescribeSubscribersForNotificationPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::paginator::DescribeSubscribersForNotificationPaginator {
        crate::paginator::DescribeSubscribersForNotificationPaginator::new(self.handle, self.inner)
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose subscribers you want descriptions of.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose subscribers you want descriptions of.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget whose subscribers you want descriptions of.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget whose subscribers you want descriptions of.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>The notification whose subscribers you want to list.</p>
    pub fn notification(mut self, input: crate::model::Notification) -> Self {
        self.inner = self.inner.notification(input);
        self
    }
    /// <p>The notification whose subscribers you want to list.</p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::model::Notification>,
    ) -> Self {
        self.inner = self.inner.set_notification(input);
        self
    }
    /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}

/// Fluent builder constructing a request to `ExecuteBudgetAction`.
///
/// <p> Executes a budget action. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ExecuteBudgetAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::execute_budget_action_input::Builder,
}
impl ExecuteBudgetAction {
    /// Creates a new `ExecuteBudgetAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::ExecuteBudgetAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::ExecuteBudgetActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::ExecuteBudgetActionOutput,
        aws_smithy_http::result::SdkError<crate::error::ExecuteBudgetActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn action_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_id(input.into());
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_id(input);
        self
    }
    /// <p> The type of execution. </p>
    pub fn execution_type(mut self, input: crate::model::ExecutionType) -> Self {
        self.inner = self.inner.execution_type(input);
        self
    }
    /// <p> The type of execution. </p>
    pub fn set_execution_type(
        mut self,
        input: std::option::Option<crate::model::ExecutionType>,
    ) -> Self {
        self.inner = self.inner.set_execution_type(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateBudget`.
///
/// <p>Updates a budget. You can change every part of a budget except for the <code>budgetName</code> and the <code>calculatedSpend</code>. When you modify a budget, the <code>calculatedSpend</code> drops to zero until Amazon Web Services has new usage data to use for forecasting.</p> <important>
/// <p>Only one of <code>BudgetLimit</code> or <code>PlannedBudgetLimits</code> can be present in the syntax at one time. Use the syntax that matches your case. The Request Syntax section shows the <code>BudgetLimit</code> syntax. For <code>PlannedBudgetLimits</code>, see the <a href="https://docs.aws.amazon.com/aws-cost-management/latest/APIReference/API_budgets_UpdateBudget.html#API_UpdateBudget_Examples">Examples</a> section. </p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBudget {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_budget_input::Builder,
}
impl UpdateBudget {
    /// Creates a new `UpdateBudget`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateBudget,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateBudgetError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateBudgetOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateBudgetError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want to update.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget that you want to update.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The budget that you want to update your budget to.</p>
    pub fn new_budget(mut self, input: crate::model::Budget) -> Self {
        self.inner = self.inner.new_budget(input);
        self
    }
    /// <p>The budget that you want to update your budget to.</p>
    pub fn set_new_budget(mut self, input: std::option::Option<crate::model::Budget>) -> Self {
        self.inner = self.inner.set_new_budget(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateBudgetAction`.
///
/// <p> Updates a budget action. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBudgetAction {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_budget_action_input::Builder,
}
impl UpdateBudgetAction {
    /// Creates a new `UpdateBudgetAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateBudgetAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateBudgetActionError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateBudgetActionOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateBudgetActionError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn action_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.action_id(input.into());
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_action_id(input);
        self
    }
    /// <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    pub fn notification_type(mut self, input: crate::model::NotificationType) -> Self {
        self.inner = self.inner.notification_type(input);
        self
    }
    /// <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    pub fn set_notification_type(
        mut self,
        input: std::option::Option<crate::model::NotificationType>,
    ) -> Self {
        self.inner = self.inner.set_notification_type(input);
        self
    }
    /// <p>The trigger threshold of the action. </p>
    pub fn action_threshold(mut self, input: crate::model::ActionThreshold) -> Self {
        self.inner = self.inner.action_threshold(input);
        self
    }
    /// <p>The trigger threshold of the action. </p>
    pub fn set_action_threshold(
        mut self,
        input: std::option::Option<crate::model::ActionThreshold>,
    ) -> Self {
        self.inner = self.inner.set_action_threshold(input);
        self
    }
    /// <p>Specifies all of the type-specific parameters. </p>
    pub fn definition(mut self, input: crate::model::Definition) -> Self {
        self.inner = self.inner.definition(input);
        self
    }
    /// <p>Specifies all of the type-specific parameters. </p>
    pub fn set_definition(mut self, input: std::option::Option<crate::model::Definition>) -> Self {
        self.inner = self.inner.set_definition(input);
        self
    }
    /// <p> The role passed for action execution and reversion. Roles and actions must be in the same account. </p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p> The role passed for action execution and reversion. Roles and actions must be in the same account. </p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// <p> This specifies if the action needs manual or automatic approval. </p>
    pub fn approval_model(mut self, input: crate::model::ApprovalModel) -> Self {
        self.inner = self.inner.approval_model(input);
        self
    }
    /// <p> This specifies if the action needs manual or automatic approval. </p>
    pub fn set_approval_model(
        mut self,
        input: std::option::Option<crate::model::ApprovalModel>,
    ) -> Self {
        self.inner = self.inner.set_approval_model(input);
        self
    }
    /// Appends an item to `Subscribers`.
    ///
    /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
    ///
    /// <p> A list of subscribers.</p>
    pub fn subscribers(mut self, input: crate::model::Subscriber) -> Self {
        self.inner = self.inner.subscribers(input);
        self
    }
    /// <p> A list of subscribers.</p>
    pub fn set_subscribers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::model::Subscriber>>,
    ) -> Self {
        self.inner = self.inner.set_subscribers(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateNotification`.
///
/// <p>Updates a notification.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNotification {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_notification_input::Builder,
}
impl UpdateNotification {
    /// Creates a new `UpdateNotification`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateNotification,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateNotificationError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateNotificationOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateNotificationError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose notification you want to update.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose notification you want to update.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget whose notification you want to update.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget whose notification you want to update.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>The previous notification that is associated with a budget.</p>
    pub fn old_notification(mut self, input: crate::model::Notification) -> Self {
        self.inner = self.inner.old_notification(input);
        self
    }
    /// <p>The previous notification that is associated with a budget.</p>
    pub fn set_old_notification(
        mut self,
        input: std::option::Option<crate::model::Notification>,
    ) -> Self {
        self.inner = self.inner.set_old_notification(input);
        self
    }
    /// <p>The updated notification to be associated with a budget.</p>
    pub fn new_notification(mut self, input: crate::model::Notification) -> Self {
        self.inner = self.inner.new_notification(input);
        self
    }
    /// <p>The updated notification to be associated with a budget.</p>
    pub fn set_new_notification(
        mut self,
        input: std::option::Option<crate::model::Notification>,
    ) -> Self {
        self.inner = self.inner.set_new_notification(input);
        self
    }
}

/// Fluent builder constructing a request to `UpdateSubscriber`.
///
/// <p>Updates a subscriber.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateSubscriber {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::input::update_subscriber_input::Builder,
}
impl UpdateSubscriber {
    /// Creates a new `UpdateSubscriber`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::operation::customize::CustomizableOperation<
            crate::operation::UpdateSubscriber,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::error::UpdateSubscriberError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::operation::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::output::UpdateSubscriberOutput,
        aws_smithy_http::result::SdkError<crate::error::UpdateSubscriberError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to update.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to update.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p>The name of the budget whose subscriber you want to update.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p>The name of the budget whose subscriber you want to update.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p>The notification whose subscriber you want to update.</p>
    pub fn notification(mut self, input: crate::model::Notification) -> Self {
        self.inner = self.inner.notification(input);
        self
    }
    /// <p>The notification whose subscriber you want to update.</p>
    pub fn set_notification(
        mut self,
        input: std::option::Option<crate::model::Notification>,
    ) -> Self {
        self.inner = self.inner.set_notification(input);
        self
    }
    /// <p>The previous subscriber that is associated with a budget notification.</p>
    pub fn old_subscriber(mut self, input: crate::model::Subscriber) -> Self {
        self.inner = self.inner.old_subscriber(input);
        self
    }
    /// <p>The previous subscriber that is associated with a budget notification.</p>
    pub fn set_old_subscriber(
        mut self,
        input: std::option::Option<crate::model::Subscriber>,
    ) -> Self {
        self.inner = self.inner.set_old_subscriber(input);
        self
    }
    /// <p>The updated subscriber that is associated with a budget notification.</p>
    pub fn new_subscriber(mut self, input: crate::model::Subscriber) -> Self {
        self.inner = self.inner.new_subscriber(input);
        self
    }
    /// <p>The updated subscriber that is associated with a budget notification.</p>
    pub fn set_new_subscriber(
        mut self,
        input: std::option::Option<crate::model::Subscriber>,
    ) -> Self {
        self.inner = self.inner.set_new_subscriber(input);
        self
    }
}
