// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeBudgets`](crate::client::fluent_builders::DescribeBudgets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeBudgets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgets::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgets::set_account_id): <p>The <code>accountId</code> that is associated with the budgets that you want descriptions of.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeBudgets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeBudgets::set_max_results): <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeBudgets::set_next_token): <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    /// - On success, responds with [`DescribeBudgetsOutput`](crate::output::DescribeBudgetsOutput) with field(s):
    ///   - [`budgets(Option<Vec<Budget>>)`](crate::output::DescribeBudgetsOutput::budgets): <p>A list of budgets.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeBudgetsOutput::next_token): <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
    /// - On failure, responds with [`SdkError<DescribeBudgetsError>`](crate::error::DescribeBudgetsError)
    pub fn describe_budgets(&self) -> crate::client::fluent_builders::DescribeBudgets {
        crate::client::fluent_builders::DescribeBudgets::new(self.handle.clone())
    }
}
