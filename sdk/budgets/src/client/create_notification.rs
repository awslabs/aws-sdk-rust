// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateNotification`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder::account_id) / [`set_account_id(Option<String>)`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder::set_account_id):<br>required: **true**<br><p>The <code>accountId</code> that is associated with the budget that you want to create a notification for.</p><br>
    ///   - [`budget_name(impl Into<String>)`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder::budget_name) / [`set_budget_name(Option<String>)`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder::set_budget_name):<br>required: **true**<br><p>The name of the budget that you want Amazon Web Services to notify you about. Budget names must be unique within an account.</p><br>
    ///   - [`notification(Notification)`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder::notification) / [`set_notification(Option<Notification>)`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder::set_notification):<br>required: **true**<br><p>The notification that you want to create.</p><br>
    ///   - [`subscribers(Subscriber)`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder::subscribers) / [`set_subscribers(Option<Vec::<Subscriber>>)`](crate::operation::create_notification::builders::CreateNotificationFluentBuilder::set_subscribers):<br>required: **true**<br><p>A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to 10 email subscribers.</p><br>
    /// - On success, responds with [`CreateNotificationOutput`](crate::operation::create_notification::CreateNotificationOutput)
    /// - On failure, responds with [`SdkError<CreateNotificationError>`](crate::operation::create_notification::CreateNotificationError)
    pub fn create_notification(&self) -> crate::operation::create_notification::builders::CreateNotificationFluentBuilder {
        crate::operation::create_notification::builders::CreateNotificationFluentBuilder::new(self.handle.clone())
    }
}
