// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExecuteBudgetActionInput {
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p> A string that represents the budget name. The ":" and "\" characters, and the "/action/" substring, aren't allowed.</p>
    pub budget_name: ::std::option::Option<::std::string::String>,
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub action_id: ::std::option::Option<::std::string::String>,
    /// <p> The type of execution. </p>
    pub execution_type: ::std::option::Option<crate::types::ExecutionType>,
}
impl ExecuteBudgetActionInput {
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters, and the "/action/" substring, aren't allowed.</p>
    pub fn budget_name(&self) -> ::std::option::Option<&str> {
        self.budget_name.as_deref()
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn action_id(&self) -> ::std::option::Option<&str> {
        self.action_id.as_deref()
    }
    /// <p> The type of execution. </p>
    pub fn execution_type(&self) -> ::std::option::Option<&crate::types::ExecutionType> {
        self.execution_type.as_ref()
    }
}
impl ExecuteBudgetActionInput {
    /// Creates a new builder-style object to manufacture [`ExecuteBudgetActionInput`](crate::operation::execute_budget_action::ExecuteBudgetActionInput).
    pub fn builder() -> crate::operation::execute_budget_action::builders::ExecuteBudgetActionInputBuilder {
        crate::operation::execute_budget_action::builders::ExecuteBudgetActionInputBuilder::default()
    }
}

/// A builder for [`ExecuteBudgetActionInput`](crate::operation::execute_budget_action::ExecuteBudgetActionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExecuteBudgetActionInputBuilder {
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) budget_name: ::std::option::Option<::std::string::String>,
    pub(crate) action_id: ::std::option::Option<::std::string::String>,
    pub(crate) execution_type: ::std::option::Option<crate::types::ExecutionType>,
}
impl ExecuteBudgetActionInputBuilder {
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    /// This field is required.
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters, and the "/action/" substring, aren't allowed.</p>
    /// This field is required.
    pub fn budget_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.budget_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters, and the "/action/" substring, aren't allowed.</p>
    pub fn set_budget_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.budget_name = input;
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters, and the "/action/" substring, aren't allowed.</p>
    pub fn get_budget_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.budget_name
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    /// This field is required.
    pub fn action_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.action_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn set_action_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.action_id = input;
        self
    }
    /// <p> A system-generated universally unique identifier (UUID) for the action. </p>
    pub fn get_action_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.action_id
    }
    /// <p> The type of execution. </p>
    /// This field is required.
    pub fn execution_type(mut self, input: crate::types::ExecutionType) -> Self {
        self.execution_type = ::std::option::Option::Some(input);
        self
    }
    /// <p> The type of execution. </p>
    pub fn set_execution_type(mut self, input: ::std::option::Option<crate::types::ExecutionType>) -> Self {
        self.execution_type = input;
        self
    }
    /// <p> The type of execution. </p>
    pub fn get_execution_type(&self) -> &::std::option::Option<crate::types::ExecutionType> {
        &self.execution_type
    }
    /// Consumes the builder and constructs a [`ExecuteBudgetActionInput`](crate::operation::execute_budget_action::ExecuteBudgetActionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::execute_budget_action::ExecuteBudgetActionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::execute_budget_action::ExecuteBudgetActionInput {
            account_id: self.account_id,
            budget_name: self.budget_name,
            action_id: self.action_id,
            execution_type: self.execution_type,
        })
    }
}
