// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_budget_action::_create_budget_action_output::CreateBudgetActionOutputBuilder;

pub use crate::operation::create_budget_action::_create_budget_action_input::CreateBudgetActionInputBuilder;

/// Fluent builder constructing a request to `CreateBudgetAction`.
///
/// <p> Creates a budget action. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBudgetActionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_budget_action::builders::CreateBudgetActionInputBuilder,
}
impl CreateBudgetActionFluentBuilder {
    /// Creates a new `CreateBudgetAction`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_budget_action::CreateBudgetAction,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_budget_action::CreateBudgetActionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_budget_action::CreateBudgetActionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_budget_action::CreateBudgetActionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.account_id(input.into());
        self
    }
    /// <p>The account ID of the user. It's a 12-digit number.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_account_id(input);
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.budget_name(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_budget_name(input);
        self
    }
    /// <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    pub fn notification_type(mut self, input: crate::types::NotificationType) -> Self {
        self.inner = self.inner.notification_type(input);
        self
    }
    /// <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    pub fn set_notification_type(
        mut self,
        input: std::option::Option<crate::types::NotificationType>,
    ) -> Self {
        self.inner = self.inner.set_notification_type(input);
        self
    }
    /// <p> The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. </p>
    pub fn action_type(mut self, input: crate::types::ActionType) -> Self {
        self.inner = self.inner.action_type(input);
        self
    }
    /// <p> The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. </p>
    pub fn set_action_type(mut self, input: std::option::Option<crate::types::ActionType>) -> Self {
        self.inner = self.inner.set_action_type(input);
        self
    }
    /// <p>The trigger threshold of the action. </p>
    pub fn action_threshold(mut self, input: crate::types::ActionThreshold) -> Self {
        self.inner = self.inner.action_threshold(input);
        self
    }
    /// <p>The trigger threshold of the action. </p>
    pub fn set_action_threshold(
        mut self,
        input: std::option::Option<crate::types::ActionThreshold>,
    ) -> Self {
        self.inner = self.inner.set_action_threshold(input);
        self
    }
    /// <p>Specifies all of the type-specific parameters. </p>
    pub fn definition(mut self, input: crate::types::Definition) -> Self {
        self.inner = self.inner.definition(input);
        self
    }
    /// <p>Specifies all of the type-specific parameters. </p>
    pub fn set_definition(mut self, input: std::option::Option<crate::types::Definition>) -> Self {
        self.inner = self.inner.set_definition(input);
        self
    }
    /// <p> The role passed for action execution and reversion. Roles and actions must be in the same account. </p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p> The role passed for action execution and reversion. Roles and actions must be in the same account. </p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// <p> This specifies if the action needs manual or automatic approval. </p>
    pub fn approval_model(mut self, input: crate::types::ApprovalModel) -> Self {
        self.inner = self.inner.approval_model(input);
        self
    }
    /// <p> This specifies if the action needs manual or automatic approval. </p>
    pub fn set_approval_model(
        mut self,
        input: std::option::Option<crate::types::ApprovalModel>,
    ) -> Self {
        self.inner = self.inner.set_approval_model(input);
        self
    }
    /// Appends an item to `Subscribers`.
    ///
    /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
    ///
    /// <p> A list of subscribers.</p>
    pub fn subscribers(mut self, input: crate::types::Subscriber) -> Self {
        self.inner = self.inner.subscribers(input);
        self
    }
    /// <p> A list of subscribers.</p>
    pub fn set_subscribers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Subscriber>>,
    ) -> Self {
        self.inner = self.inner.set_subscribers(input);
        self
    }
}
