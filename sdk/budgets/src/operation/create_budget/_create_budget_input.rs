// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Request of CreateBudget </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBudgetInput {
    /// <p>The <code>accountId</code> that is associated with the budget.</p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p>The budget object that you want to create.</p>
    #[doc(hidden)]
    pub budget: std::option::Option<crate::types::Budget>,
    /// <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
    #[doc(hidden)]
    pub notifications_with_subscribers:
        std::option::Option<std::vec::Vec<crate::types::NotificationWithSubscribers>>,
}
impl CreateBudgetInput {
    /// <p>The <code>accountId</code> that is associated with the budget.</p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The budget object that you want to create.</p>
    pub fn budget(&self) -> std::option::Option<&crate::types::Budget> {
        self.budget.as_ref()
    }
    /// <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
    pub fn notifications_with_subscribers(
        &self,
    ) -> std::option::Option<&[crate::types::NotificationWithSubscribers]> {
        self.notifications_with_subscribers.as_deref()
    }
}
impl CreateBudgetInput {
    /// Creates a new builder-style object to manufacture [`CreateBudgetInput`](crate::operation::create_budget::CreateBudgetInput).
    pub fn builder() -> crate::operation::create_budget::builders::CreateBudgetInputBuilder {
        crate::operation::create_budget::builders::CreateBudgetInputBuilder::default()
    }
}

/// A builder for [`CreateBudgetInput`](crate::operation::create_budget::CreateBudgetInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBudgetInputBuilder {
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) budget: std::option::Option<crate::types::Budget>,
    pub(crate) notifications_with_subscribers:
        std::option::Option<std::vec::Vec<crate::types::NotificationWithSubscribers>>,
}
impl CreateBudgetInputBuilder {
    /// <p>The <code>accountId</code> that is associated with the budget.</p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p>The <code>accountId</code> that is associated with the budget.</p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The budget object that you want to create.</p>
    pub fn budget(mut self, input: crate::types::Budget) -> Self {
        self.budget = Some(input);
        self
    }
    /// <p>The budget object that you want to create.</p>
    pub fn set_budget(mut self, input: std::option::Option<crate::types::Budget>) -> Self {
        self.budget = input;
        self
    }
    /// Appends an item to `notifications_with_subscribers`.
    ///
    /// To override the contents of this collection use [`set_notifications_with_subscribers`](Self::set_notifications_with_subscribers).
    ///
    /// <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
    pub fn notifications_with_subscribers(
        mut self,
        input: crate::types::NotificationWithSubscribers,
    ) -> Self {
        let mut v = self.notifications_with_subscribers.unwrap_or_default();
        v.push(input);
        self.notifications_with_subscribers = Some(v);
        self
    }
    /// <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
    pub fn set_notifications_with_subscribers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NotificationWithSubscribers>>,
    ) -> Self {
        self.notifications_with_subscribers = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateBudgetInput`](crate::operation::create_budget::CreateBudgetInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_budget::CreateBudgetInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_budget::CreateBudgetInput {
            account_id: self.account_id,
            budget: self.budget,
            notifications_with_subscribers: self.notifications_with_subscribers,
        })
    }
}
