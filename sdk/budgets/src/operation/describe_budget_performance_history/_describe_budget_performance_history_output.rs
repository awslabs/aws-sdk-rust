// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeBudgetPerformanceHistoryOutput {
    /// <p>The history of how often the budget has gone into an <code>ALARM</code> state.</p>
    /// <p>For <code>DAILY</code> budgets, the history saves the state of the budget for the last 60 days. For <code>MONTHLY</code> budgets, the history saves the state of the budget for the current month plus the last 12 months. For <code>QUARTERLY</code> budgets, the history saves the state of the budget for the last four quarters.</p>
    #[doc(hidden)]
    pub budget_performance_history: std::option::Option<crate::types::BudgetPerformanceHistory>,
    /// <p> A generic string.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeBudgetPerformanceHistoryOutput {
    /// <p>The history of how often the budget has gone into an <code>ALARM</code> state.</p>
    /// <p>For <code>DAILY</code> budgets, the history saves the state of the budget for the last 60 days. For <code>MONTHLY</code> budgets, the history saves the state of the budget for the current month plus the last 12 months. For <code>QUARTERLY</code> budgets, the history saves the state of the budget for the last four quarters.</p>
    pub fn budget_performance_history(
        &self,
    ) -> std::option::Option<&crate::types::BudgetPerformanceHistory> {
        self.budget_performance_history.as_ref()
    }
    /// <p> A generic string.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeBudgetPerformanceHistoryOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeBudgetPerformanceHistoryOutput {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetPerformanceHistoryOutput`](crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryOutput).
    pub fn builder() -> crate::operation::describe_budget_performance_history::builders::DescribeBudgetPerformanceHistoryOutputBuilder{
        crate::operation::describe_budget_performance_history::builders::DescribeBudgetPerformanceHistoryOutputBuilder::default()
    }
}

/// A builder for [`DescribeBudgetPerformanceHistoryOutput`](crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudgetPerformanceHistoryOutputBuilder {
    pub(crate) budget_performance_history:
        std::option::Option<crate::types::BudgetPerformanceHistory>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeBudgetPerformanceHistoryOutputBuilder {
    /// <p>The history of how often the budget has gone into an <code>ALARM</code> state.</p>
    /// <p>For <code>DAILY</code> budgets, the history saves the state of the budget for the last 60 days. For <code>MONTHLY</code> budgets, the history saves the state of the budget for the current month plus the last 12 months. For <code>QUARTERLY</code> budgets, the history saves the state of the budget for the last four quarters.</p>
    pub fn budget_performance_history(
        mut self,
        input: crate::types::BudgetPerformanceHistory,
    ) -> Self {
        self.budget_performance_history = Some(input);
        self
    }
    /// <p>The history of how often the budget has gone into an <code>ALARM</code> state.</p>
    /// <p>For <code>DAILY</code> budgets, the history saves the state of the budget for the last 60 days. For <code>MONTHLY</code> budgets, the history saves the state of the budget for the current month plus the last 12 months. For <code>QUARTERLY</code> budgets, the history saves the state of the budget for the last four quarters.</p>
    pub fn set_budget_performance_history(
        mut self,
        input: std::option::Option<crate::types::BudgetPerformanceHistory>,
    ) -> Self {
        self.budget_performance_history = input;
        self
    }
    /// <p> A generic string.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> A generic string.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeBudgetPerformanceHistoryOutput`](crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryOutput
    {
        crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryOutput {
            budget_performance_history: self.budget_performance_history
            ,
            next_token: self.next_token
            ,
            _request_id: self._request_id,
        }
    }
}
