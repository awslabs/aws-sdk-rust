// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_describe_budget_action_histories_output_next_token(
    input: &crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_budget_actions_for_account_output_next_token(
    input: &crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_budget_actions_for_budget_output_next_token(
    input: &crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_budget_notifications_for_account_output_next_token(
    input: &crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_budget_performance_history_output_next_token(
    input: &crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_budgets_output_next_token(
    input: &crate::operation::describe_budgets::DescribeBudgetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_notifications_for_budget_output_next_token(
    input: &crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_describe_subscribers_for_notification_output_next_token(
    input: &crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_budget_action_histories_output_action_histories(
    input: crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ActionHistory>> {
    let input = input.action_histories;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_budget_actions_for_account_output_actions(
    input: crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Action>> {
    let input = input.actions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_budget_actions_for_budget_output_actions(
    input: crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Action>> {
    let input = input.actions;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_budget_notifications_for_account_output_budget_notifications_for_account(
    input: crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::BudgetNotificationsForAccount>> {
    let input = match input.budget_notifications_for_account {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_budgets_output_budgets(
    input: crate::operation::describe_budgets::DescribeBudgetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Budget>> {
    let input = match input.budgets {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_notifications_for_budget_output_notifications(
    input: crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Notification>> {
    let input = match input.notifications {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_describe_subscribers_for_notification_output_subscribers(
    input: crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Subscriber>> {
    let input = match input.subscribers {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
