// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_budget_action_histories_output_next_token(
    input: &crate::output::DescribeBudgetActionHistoriesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_budget_actions_for_account_output_next_token(
    input: &crate::output::DescribeBudgetActionsForAccountOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_budget_actions_for_budget_output_next_token(
    input: &crate::output::DescribeBudgetActionsForBudgetOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_budget_notifications_for_account_output_next_token(
    input: &crate::output::DescribeBudgetNotificationsForAccountOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_budget_performance_history_output_next_token(
    input: &crate::output::DescribeBudgetPerformanceHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_budgets_output_next_token(
    input: &crate::output::DescribeBudgetsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_notifications_for_budget_output_next_token(
    input: &crate::output::DescribeNotificationsForBudgetOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_subscribers_for_notification_output_next_token(
    input: &crate::output::DescribeSubscribersForNotificationOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_budget_action_histories_output_action_histories(
    input: crate::output::DescribeBudgetActionHistoriesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ActionHistory>> {
    let input = match input.action_histories {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_budget_actions_for_account_output_actions(
    input: crate::output::DescribeBudgetActionsForAccountOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Action>> {
    let input = match input.actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_budget_actions_for_budget_output_actions(
    input: crate::output::DescribeBudgetActionsForBudgetOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Action>> {
    let input = match input.actions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_budget_notifications_for_account_output_budget_notifications_for_account(
    input: crate::output::DescribeBudgetNotificationsForAccountOutput,
) -> std::option::Option<std::vec::Vec<crate::model::BudgetNotificationsForAccount>> {
    let input = match input.budget_notifications_for_account {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_budgets_output_budgets(
    input: crate::output::DescribeBudgetsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Budget>> {
    let input = match input.budgets {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_notifications_for_budget_output_notifications(
    input: crate::output::DescribeNotificationsForBudgetOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Notification>> {
    let input = match input.notifications {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_subscribers_for_notification_output_subscribers(
    input: crate::output::DescribeSubscribersForNotificationOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Subscriber>> {
    let input = match input.subscribers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
