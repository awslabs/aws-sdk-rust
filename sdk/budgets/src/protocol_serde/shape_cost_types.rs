// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_cost_types(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CostTypes,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.include_tax {
        object.key("IncludeTax").boolean(*var_1);
    }
    if let Some(var_2) = &input.include_subscription {
        object.key("IncludeSubscription").boolean(*var_2);
    }
    if let Some(var_3) = &input.use_blended {
        object.key("UseBlended").boolean(*var_3);
    }
    if let Some(var_4) = &input.include_refund {
        object.key("IncludeRefund").boolean(*var_4);
    }
    if let Some(var_5) = &input.include_credit {
        object.key("IncludeCredit").boolean(*var_5);
    }
    if let Some(var_6) = &input.include_upfront {
        object.key("IncludeUpfront").boolean(*var_6);
    }
    if let Some(var_7) = &input.include_recurring {
        object.key("IncludeRecurring").boolean(*var_7);
    }
    if let Some(var_8) = &input.include_other_subscription {
        object.key("IncludeOtherSubscription").boolean(*var_8);
    }
    if let Some(var_9) = &input.include_support {
        object.key("IncludeSupport").boolean(*var_9);
    }
    if let Some(var_10) = &input.include_discount {
        object.key("IncludeDiscount").boolean(*var_10);
    }
    if let Some(var_11) = &input.use_amortized {
        object.key("UseAmortized").boolean(*var_11);
    }
    Ok(())
}

pub(crate) fn de_cost_types<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::CostTypes>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::CostTypesBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "IncludeTax" => {
                            builder = builder.set_include_tax(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeSubscription" => {
                            builder = builder.set_include_subscription(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "UseBlended" => {
                            builder = builder.set_use_blended(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeRefund" => {
                            builder = builder.set_include_refund(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeCredit" => {
                            builder = builder.set_include_credit(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeUpfront" => {
                            builder = builder.set_include_upfront(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeRecurring" => {
                            builder = builder.set_include_recurring(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeOtherSubscription" => {
                            builder =
                                builder.set_include_other_subscription(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeSupport" => {
                            builder = builder.set_include_support(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeDiscount" => {
                            builder = builder.set_include_discount(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "UseAmortized" => {
                            builder = builder.set_use_amortized(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
