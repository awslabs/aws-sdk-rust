// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AWSBudgetServiceGateway`.
///
/// This client allows ergonomic access to a `AWSBudgetServiceGateway`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn create_budget(&self) -> fluent_builders::CreateBudget<C, M, R> {
        fluent_builders::CreateBudget::new(self.handle.clone())
    }
    pub fn create_budget_action(&self) -> fluent_builders::CreateBudgetAction<C, M, R> {
        fluent_builders::CreateBudgetAction::new(self.handle.clone())
    }
    pub fn create_notification(&self) -> fluent_builders::CreateNotification<C, M, R> {
        fluent_builders::CreateNotification::new(self.handle.clone())
    }
    pub fn create_subscriber(&self) -> fluent_builders::CreateSubscriber<C, M, R> {
        fluent_builders::CreateSubscriber::new(self.handle.clone())
    }
    pub fn delete_budget(&self) -> fluent_builders::DeleteBudget<C, M, R> {
        fluent_builders::DeleteBudget::new(self.handle.clone())
    }
    pub fn delete_budget_action(&self) -> fluent_builders::DeleteBudgetAction<C, M, R> {
        fluent_builders::DeleteBudgetAction::new(self.handle.clone())
    }
    pub fn delete_notification(&self) -> fluent_builders::DeleteNotification<C, M, R> {
        fluent_builders::DeleteNotification::new(self.handle.clone())
    }
    pub fn delete_subscriber(&self) -> fluent_builders::DeleteSubscriber<C, M, R> {
        fluent_builders::DeleteSubscriber::new(self.handle.clone())
    }
    pub fn describe_budget(&self) -> fluent_builders::DescribeBudget<C, M, R> {
        fluent_builders::DescribeBudget::new(self.handle.clone())
    }
    pub fn describe_budget_action(&self) -> fluent_builders::DescribeBudgetAction<C, M, R> {
        fluent_builders::DescribeBudgetAction::new(self.handle.clone())
    }
    pub fn describe_budget_action_histories(
        &self,
    ) -> fluent_builders::DescribeBudgetActionHistories<C, M, R> {
        fluent_builders::DescribeBudgetActionHistories::new(self.handle.clone())
    }
    pub fn describe_budget_actions_for_account(
        &self,
    ) -> fluent_builders::DescribeBudgetActionsForAccount<C, M, R> {
        fluent_builders::DescribeBudgetActionsForAccount::new(self.handle.clone())
    }
    pub fn describe_budget_actions_for_budget(
        &self,
    ) -> fluent_builders::DescribeBudgetActionsForBudget<C, M, R> {
        fluent_builders::DescribeBudgetActionsForBudget::new(self.handle.clone())
    }
    pub fn describe_budget_performance_history(
        &self,
    ) -> fluent_builders::DescribeBudgetPerformanceHistory<C, M, R> {
        fluent_builders::DescribeBudgetPerformanceHistory::new(self.handle.clone())
    }
    pub fn describe_budgets(&self) -> fluent_builders::DescribeBudgets<C, M, R> {
        fluent_builders::DescribeBudgets::new(self.handle.clone())
    }
    pub fn describe_notifications_for_budget(
        &self,
    ) -> fluent_builders::DescribeNotificationsForBudget<C, M, R> {
        fluent_builders::DescribeNotificationsForBudget::new(self.handle.clone())
    }
    pub fn describe_subscribers_for_notification(
        &self,
    ) -> fluent_builders::DescribeSubscribersForNotification<C, M, R> {
        fluent_builders::DescribeSubscribersForNotification::new(self.handle.clone())
    }
    pub fn execute_budget_action(&self) -> fluent_builders::ExecuteBudgetAction<C, M, R> {
        fluent_builders::ExecuteBudgetAction::new(self.handle.clone())
    }
    pub fn update_budget(&self) -> fluent_builders::UpdateBudget<C, M, R> {
        fluent_builders::UpdateBudget::new(self.handle.clone())
    }
    pub fn update_budget_action(&self) -> fluent_builders::UpdateBudgetAction<C, M, R> {
        fluent_builders::UpdateBudgetAction::new(self.handle.clone())
    }
    pub fn update_notification(&self) -> fluent_builders::UpdateNotification<C, M, R> {
        fluent_builders::UpdateNotification::new(self.handle.clone())
    }
    pub fn update_subscriber(&self) -> fluent_builders::UpdateSubscriber<C, M, R> {
        fluent_builders::UpdateSubscriber::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct CreateBudget<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_budget_input::Builder,
    }
    impl<C, M, R> CreateBudget<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateBudgetOutput,
            smithy_http::result::SdkError<crate::error::CreateBudgetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateBudgetInputOperationOutputAlias,
                crate::output::CreateBudgetOutput,
                crate::error::CreateBudgetError,
                crate::input::CreateBudgetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The budget object that you want to create.</p>
        pub fn budget(mut self, inp: crate::model::Budget) -> Self {
            self.inner = self.inner.budget(inp);
            self
        }
        pub fn set_budget(mut self, input: std::option::Option<crate::model::Budget>) -> Self {
            self.inner = self.inner.set_budget(input);
            self
        }
        /// Appends an item to `NotificationsWithSubscribers`.
        ///
        /// To override the contents of this collection use [`set_notifications_with_subscribers`](Self::set_notifications_with_subscribers).
        /// <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, AWS creates the notifications and subscribers for you.</p>
        pub fn notifications_with_subscribers(
            mut self,
            inp: impl Into<crate::model::NotificationWithSubscribers>,
        ) -> Self {
            self.inner = self.inner.notifications_with_subscribers(inp);
            self
        }
        pub fn set_notifications_with_subscribers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::NotificationWithSubscribers>>,
        ) -> Self {
            self.inner = self.inner.set_notifications_with_subscribers(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateBudgetAction<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_budget_action_input::Builder,
    }
    impl<C, M, R> CreateBudgetAction<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateBudgetActionOutput,
            smithy_http::result::SdkError<crate::error::CreateBudgetActionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateBudgetActionInputOperationOutputAlias,
                crate::output::CreateBudgetActionOutput,
                crate::error::CreateBudgetActionError,
                crate::input::CreateBudgetActionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
        pub fn notification_type(mut self, inp: crate::model::NotificationType) -> Self {
            self.inner = self.inner.notification_type(inp);
            self
        }
        pub fn set_notification_type(
            mut self,
            input: std::option::Option<crate::model::NotificationType>,
        ) -> Self {
            self.inner = self.inner.set_notification_type(input);
            self
        }
        /// <p>
        /// The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition.
        /// </p>
        pub fn action_type(mut self, inp: crate::model::ActionType) -> Self {
            self.inner = self.inner.action_type(inp);
            self
        }
        pub fn set_action_type(
            mut self,
            input: std::option::Option<crate::model::ActionType>,
        ) -> Self {
            self.inner = self.inner.set_action_type(input);
            self
        }
        /// <p>
        /// The trigger threshold of the action.
        /// </p>
        pub fn action_threshold(mut self, inp: crate::model::ActionThreshold) -> Self {
            self.inner = self.inner.action_threshold(inp);
            self
        }
        pub fn set_action_threshold(
            mut self,
            input: std::option::Option<crate::model::ActionThreshold>,
        ) -> Self {
            self.inner = self.inner.set_action_threshold(input);
            self
        }
        /// <p>
        /// Specifies all of the type-specific parameters.
        /// </p>
        pub fn definition(mut self, inp: crate::model::Definition) -> Self {
            self.inner = self.inner.definition(inp);
            self
        }
        pub fn set_definition(
            mut self,
            input: std::option::Option<crate::model::Definition>,
        ) -> Self {
            self.inner = self.inner.set_definition(input);
            self
        }
        /// <p>
        /// The role passed for action execution and reversion. Roles and actions must be in the same account.
        /// </p>
        pub fn execution_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.execution_role_arn(inp);
            self
        }
        pub fn set_execution_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_execution_role_arn(input);
            self
        }
        /// <p>
        /// This specifies if the action needs manual or automatic approval.
        /// </p>
        pub fn approval_model(mut self, inp: crate::model::ApprovalModel) -> Self {
            self.inner = self.inner.approval_model(inp);
            self
        }
        pub fn set_approval_model(
            mut self,
            input: std::option::Option<crate::model::ApprovalModel>,
        ) -> Self {
            self.inner = self.inner.set_approval_model(input);
            self
        }
        /// Appends an item to `Subscribers`.
        ///
        /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
        /// <p> A list of subscribers.</p>
        pub fn subscribers(mut self, inp: impl Into<crate::model::Subscriber>) -> Self {
            self.inner = self.inner.subscribers(inp);
            self
        }
        pub fn set_subscribers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subscriber>>,
        ) -> Self {
            self.inner = self.inner.set_subscribers(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateNotification<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_notification_input::Builder,
    }
    impl<C, M, R> CreateNotification<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateNotificationOutput,
            smithy_http::result::SdkError<crate::error::CreateNotificationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateNotificationInputOperationOutputAlias,
                crate::output::CreateNotificationOutput,
                crate::error::CreateNotificationError,
                crate::input::CreateNotificationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget that you want to create a notification for.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget that you want AWS to notify you about. Budget names must be unique within an account.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>The notification that you want to create.</p>
        pub fn notification(mut self, inp: crate::model::Notification) -> Self {
            self.inner = self.inner.notification(inp);
            self
        }
        pub fn set_notification(
            mut self,
            input: std::option::Option<crate::model::Notification>,
        ) -> Self {
            self.inner = self.inner.set_notification(input);
            self
        }
        /// Appends an item to `Subscribers`.
        ///
        /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
        /// <p>A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to 10 email subscribers.</p>
        pub fn subscribers(mut self, inp: impl Into<crate::model::Subscriber>) -> Self {
            self.inner = self.inner.subscribers(inp);
            self
        }
        pub fn set_subscribers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subscriber>>,
        ) -> Self {
            self.inner = self.inner.set_subscribers(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateSubscriber<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::create_subscriber_input::Builder,
    }
    impl<C, M, R> CreateSubscriber<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateSubscriberOutput,
            smithy_http::result::SdkError<crate::error::CreateSubscriberError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::CreateSubscriberInputOperationOutputAlias,
                crate::output::CreateSubscriberOutput,
                crate::error::CreateSubscriberError,
                crate::input::CreateSubscriberInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget that you want to create a subscriber for.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget that you want to subscribe to. Budget names must be unique within an account.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>The notification that you want to create a subscriber for.</p>
        pub fn notification(mut self, inp: crate::model::Notification) -> Self {
            self.inner = self.inner.notification(inp);
            self
        }
        pub fn set_notification(
            mut self,
            input: std::option::Option<crate::model::Notification>,
        ) -> Self {
            self.inner = self.inner.set_notification(input);
            self
        }
        /// <p>The subscriber that you want to associate with a budget notification.</p>
        pub fn subscriber(mut self, inp: crate::model::Subscriber) -> Self {
            self.inner = self.inner.subscriber(inp);
            self
        }
        pub fn set_subscriber(
            mut self,
            input: std::option::Option<crate::model::Subscriber>,
        ) -> Self {
            self.inner = self.inner.set_subscriber(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteBudget<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_budget_input::Builder,
    }
    impl<C, M, R> DeleteBudget<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteBudgetOutput,
            smithy_http::result::SdkError<crate::error::DeleteBudgetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteBudgetInputOperationOutputAlias,
                crate::output::DeleteBudgetOutput,
                crate::error::DeleteBudgetError,
                crate::input::DeleteBudgetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget that you want to delete.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget that you want to delete.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteBudgetAction<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_budget_action_input::Builder,
    }
    impl<C, M, R> DeleteBudgetAction<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteBudgetActionOutput,
            smithy_http::result::SdkError<crate::error::DeleteBudgetActionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteBudgetActionInputOperationOutputAlias,
                crate::output::DeleteBudgetActionOutput,
                crate::error::DeleteBudgetActionError,
                crate::input::DeleteBudgetActionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>
        /// A system-generated universally unique identifier (UUID) for the action.
        /// </p>
        pub fn action_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.action_id(inp);
            self
        }
        pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_action_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteNotification<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_notification_input::Builder,
    }
    impl<C, M, R> DeleteNotification<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteNotificationOutput,
            smithy_http::result::SdkError<crate::error::DeleteNotificationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteNotificationInputOperationOutputAlias,
                crate::output::DeleteNotificationOutput,
                crate::error::DeleteNotificationError,
                crate::input::DeleteNotificationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget whose notification you want to delete.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget whose notification you want to delete.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>The notification that you want to delete.</p>
        pub fn notification(mut self, inp: crate::model::Notification) -> Self {
            self.inner = self.inner.notification(inp);
            self
        }
        pub fn set_notification(
            mut self,
            input: std::option::Option<crate::model::Notification>,
        ) -> Self {
            self.inner = self.inner.set_notification(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteSubscriber<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_subscriber_input::Builder,
    }
    impl<C, M, R> DeleteSubscriber<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteSubscriberOutput,
            smithy_http::result::SdkError<crate::error::DeleteSubscriberError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteSubscriberInputOperationOutputAlias,
                crate::output::DeleteSubscriberOutput,
                crate::error::DeleteSubscriberError,
                crate::input::DeleteSubscriberInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to delete.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget whose subscriber you want to delete.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>The notification whose subscriber you want to delete.</p>
        pub fn notification(mut self, inp: crate::model::Notification) -> Self {
            self.inner = self.inner.notification(inp);
            self
        }
        pub fn set_notification(
            mut self,
            input: std::option::Option<crate::model::Notification>,
        ) -> Self {
            self.inner = self.inner.set_notification(input);
            self
        }
        /// <p>The subscriber that you want to delete.</p>
        pub fn subscriber(mut self, inp: crate::model::Subscriber) -> Self {
            self.inner = self.inner.subscriber(inp);
            self
        }
        pub fn set_subscriber(
            mut self,
            input: std::option::Option<crate::model::Subscriber>,
        ) -> Self {
            self.inner = self.inner.set_subscriber(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBudget<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_budget_input::Builder,
    }
    impl<C, M, R> DescribeBudget<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBudgetOutput,
            smithy_http::result::SdkError<crate::error::DescribeBudgetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBudgetInputOperationOutputAlias,
                crate::output::DescribeBudgetOutput,
                crate::error::DescribeBudgetError,
                crate::input::DescribeBudgetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget that you want a description of.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBudgetAction<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_budget_action_input::Builder,
    }
    impl<C, M, R> DescribeBudgetAction<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBudgetActionOutput,
            smithy_http::result::SdkError<crate::error::DescribeBudgetActionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBudgetActionInputOperationOutputAlias,
                crate::output::DescribeBudgetActionOutput,
                crate::error::DescribeBudgetActionError,
                crate::input::DescribeBudgetActionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>
        /// A system-generated universally unique identifier (UUID) for the action.
        /// </p>
        pub fn action_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.action_id(inp);
            self
        }
        pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_action_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBudgetActionHistories<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_budget_action_histories_input::Builder,
    }
    impl<C, M, R> DescribeBudgetActionHistories<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBudgetActionHistoriesOutput,
            smithy_http::result::SdkError<crate::error::DescribeBudgetActionHistoriesError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBudgetActionHistoriesInputOperationOutputAlias,
                crate::output::DescribeBudgetActionHistoriesOutput,
                crate::error::DescribeBudgetActionHistoriesError,
                crate::input::DescribeBudgetActionHistoriesInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>
        /// A system-generated universally unique identifier (UUID) for the action.
        /// </p>
        pub fn action_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.action_id(inp);
            self
        }
        pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_action_id(input);
            self
        }
        /// <p>The period of time that is covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. </p>
        pub fn time_period(mut self, inp: crate::model::TimePeriod) -> Self {
            self.inner = self.inner.time_period(inp);
            self
        }
        pub fn set_time_period(
            mut self,
            input: std::option::Option<crate::model::TimePeriod>,
        ) -> Self {
            self.inner = self.inner.set_time_period(input);
            self
        }
        /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p> A generic string.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBudgetActionsForAccount<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_budget_actions_for_account_input::Builder,
    }
    impl<C, M, R> DescribeBudgetActionsForAccount<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBudgetActionsForAccountOutput,
            smithy_http::result::SdkError<crate::error::DescribeBudgetActionsForAccountError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBudgetActionsForAccountInputOperationOutputAlias,
                crate::output::DescribeBudgetActionsForAccountOutput,
                crate::error::DescribeBudgetActionsForAccountError,
                crate::input::DescribeBudgetActionsForAccountInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p> A generic string.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBudgetActionsForBudget<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_budget_actions_for_budget_input::Builder,
    }
    impl<C, M, R> DescribeBudgetActionsForBudget<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBudgetActionsForBudgetOutput,
            smithy_http::result::SdkError<crate::error::DescribeBudgetActionsForBudgetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBudgetActionsForBudgetInputOperationOutputAlias,
                crate::output::DescribeBudgetActionsForBudgetOutput,
                crate::error::DescribeBudgetActionsForBudgetError,
                crate::input::DescribeBudgetActionsForBudgetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p> A generic string.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBudgetPerformanceHistory<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_budget_performance_history_input::Builder,
    }
    impl<C, M, R> DescribeBudgetPerformanceHistory<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBudgetPerformanceHistoryOutput,
            smithy_http::result::SdkError<crate::error::DescribeBudgetPerformanceHistoryError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBudgetPerformanceHistoryInputOperationOutputAlias,
                crate::output::DescribeBudgetPerformanceHistoryOutput,
                crate::error::DescribeBudgetPerformanceHistoryError,
                crate::input::DescribeBudgetPerformanceHistoryInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>Retrieves how often the budget went into an <code>ALARM</code> state for the specified time period.</p>
        pub fn time_period(mut self, inp: crate::model::TimePeriod) -> Self {
            self.inner = self.inner.time_period(inp);
            self
        }
        pub fn set_time_period(
            mut self,
            input: std::option::Option<crate::model::TimePeriod>,
        ) -> Self {
            self.inner = self.inner.set_time_period(input);
            self
        }
        /// <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p> A generic string.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeBudgets<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_budgets_input::Builder,
    }
    impl<C, M, R> DescribeBudgets<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeBudgetsOutput,
            smithy_http::result::SdkError<crate::error::DescribeBudgetsError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeBudgetsInputOperationOutputAlias,
                crate::output::DescribeBudgetsOutput,
                crate::error::DescribeBudgetsError,
                crate::input::DescribeBudgetsInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budgets that you want descriptions of.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeNotificationsForBudget<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_notifications_for_budget_input::Builder,
    }
    impl<C, M, R> DescribeNotificationsForBudget<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeNotificationsForBudgetOutput,
            smithy_http::result::SdkError<crate::error::DescribeNotificationsForBudgetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeNotificationsForBudgetInputOperationOutputAlias,
                crate::output::DescribeNotificationsForBudgetOutput,
                crate::error::DescribeNotificationsForBudgetError,
                crate::input::DescribeNotificationsForBudgetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget whose notifications you want descriptions of.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget whose notifications you want descriptions of.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeSubscribersForNotification<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::describe_subscribers_for_notification_input::Builder,
    }
    impl<C, M, R> DescribeSubscribersForNotification<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeSubscribersForNotificationOutput,
            smithy_http::result::SdkError<crate::error::DescribeSubscribersForNotificationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DescribeSubscribersForNotificationInputOperationOutputAlias,
                crate::output::DescribeSubscribersForNotificationOutput,
                crate::error::DescribeSubscribersForNotificationError,
                crate::input::DescribeSubscribersForNotificationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget whose subscribers you want descriptions of.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget whose subscribers you want descriptions of.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>The notification whose subscribers you want to list.</p>
        pub fn notification(mut self, inp: crate::model::Notification) -> Self {
            self.inner = self.inner.notification(inp);
            self
        }
        pub fn set_notification(
            mut self,
            input: std::option::Option<crate::model::Notification>,
        ) -> Self {
            self.inner = self.inner.set_notification(input);
            self
        }
        /// <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
        pub fn max_results(mut self, inp: i32) -> Self {
            self.inner = self.inner.max_results(inp);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
        pub fn next_token(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(inp);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ExecuteBudgetAction<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::execute_budget_action_input::Builder,
    }
    impl<C, M, R> ExecuteBudgetAction<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ExecuteBudgetActionOutput,
            smithy_http::result::SdkError<crate::error::ExecuteBudgetActionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::ExecuteBudgetActionInputOperationOutputAlias,
                crate::output::ExecuteBudgetActionOutput,
                crate::error::ExecuteBudgetActionError,
                crate::input::ExecuteBudgetActionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>
        /// A system-generated universally unique identifier (UUID) for the action.
        /// </p>
        pub fn action_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.action_id(inp);
            self
        }
        pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_action_id(input);
            self
        }
        /// <p>
        /// The type of execution.
        /// </p>
        pub fn execution_type(mut self, inp: crate::model::ExecutionType) -> Self {
            self.inner = self.inner.execution_type(inp);
            self
        }
        pub fn set_execution_type(
            mut self,
            input: std::option::Option<crate::model::ExecutionType>,
        ) -> Self {
            self.inner = self.inner.set_execution_type(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateBudget<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_budget_input::Builder,
    }
    impl<C, M, R> UpdateBudget<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateBudgetOutput,
            smithy_http::result::SdkError<crate::error::UpdateBudgetError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateBudgetInputOperationOutputAlias,
                crate::output::UpdateBudgetOutput,
                crate::error::UpdateBudgetError,
                crate::input::UpdateBudgetInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget that you want to update.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The budget that you want to update your budget to.</p>
        pub fn new_budget(mut self, inp: crate::model::Budget) -> Self {
            self.inner = self.inner.new_budget(inp);
            self
        }
        pub fn set_new_budget(mut self, input: std::option::Option<crate::model::Budget>) -> Self {
            self.inner = self.inner.set_new_budget(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateBudgetAction<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_budget_action_input::Builder,
    }
    impl<C, M, R> UpdateBudgetAction<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateBudgetActionOutput,
            smithy_http::result::SdkError<crate::error::UpdateBudgetActionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateBudgetActionInputOperationOutputAlias,
                crate::output::UpdateBudgetActionOutput,
                crate::error::UpdateBudgetActionError,
                crate::input::UpdateBudgetActionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The account ID of the user. It should be a 12-digit number.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>
        /// A system-generated universally unique identifier (UUID) for the action.
        /// </p>
        pub fn action_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.action_id(inp);
            self
        }
        pub fn set_action_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_action_id(input);
            self
        }
        /// <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
        pub fn notification_type(mut self, inp: crate::model::NotificationType) -> Self {
            self.inner = self.inner.notification_type(inp);
            self
        }
        pub fn set_notification_type(
            mut self,
            input: std::option::Option<crate::model::NotificationType>,
        ) -> Self {
            self.inner = self.inner.set_notification_type(input);
            self
        }
        /// <p>
        /// The trigger threshold of the action.
        /// </p>
        pub fn action_threshold(mut self, inp: crate::model::ActionThreshold) -> Self {
            self.inner = self.inner.action_threshold(inp);
            self
        }
        pub fn set_action_threshold(
            mut self,
            input: std::option::Option<crate::model::ActionThreshold>,
        ) -> Self {
            self.inner = self.inner.set_action_threshold(input);
            self
        }
        /// <p>
        /// Specifies all of the type-specific parameters.
        /// </p>
        pub fn definition(mut self, inp: crate::model::Definition) -> Self {
            self.inner = self.inner.definition(inp);
            self
        }
        pub fn set_definition(
            mut self,
            input: std::option::Option<crate::model::Definition>,
        ) -> Self {
            self.inner = self.inner.set_definition(input);
            self
        }
        /// <p>
        /// The role passed for action execution and reversion. Roles and actions must be in the same account.
        /// </p>
        pub fn execution_role_arn(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.execution_role_arn(inp);
            self
        }
        pub fn set_execution_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_execution_role_arn(input);
            self
        }
        /// <p>
        /// This specifies if the action needs manual or automatic approval.
        /// </p>
        pub fn approval_model(mut self, inp: crate::model::ApprovalModel) -> Self {
            self.inner = self.inner.approval_model(inp);
            self
        }
        pub fn set_approval_model(
            mut self,
            input: std::option::Option<crate::model::ApprovalModel>,
        ) -> Self {
            self.inner = self.inner.set_approval_model(input);
            self
        }
        /// Appends an item to `Subscribers`.
        ///
        /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
        /// <p> A list of subscribers.</p>
        pub fn subscribers(mut self, inp: impl Into<crate::model::Subscriber>) -> Self {
            self.inner = self.inner.subscribers(inp);
            self
        }
        pub fn set_subscribers(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Subscriber>>,
        ) -> Self {
            self.inner = self.inner.set_subscribers(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateNotification<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_notification_input::Builder,
    }
    impl<C, M, R> UpdateNotification<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateNotificationOutput,
            smithy_http::result::SdkError<crate::error::UpdateNotificationError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateNotificationInputOperationOutputAlias,
                crate::output::UpdateNotificationOutput,
                crate::error::UpdateNotificationError,
                crate::input::UpdateNotificationInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget whose notification you want to update.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget whose notification you want to update.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>The previous notification that is associated with a budget.</p>
        pub fn old_notification(mut self, inp: crate::model::Notification) -> Self {
            self.inner = self.inner.old_notification(inp);
            self
        }
        pub fn set_old_notification(
            mut self,
            input: std::option::Option<crate::model::Notification>,
        ) -> Self {
            self.inner = self.inner.set_old_notification(input);
            self
        }
        /// <p>The updated notification to be associated with a budget.</p>
        pub fn new_notification(mut self, inp: crate::model::Notification) -> Self {
            self.inner = self.inner.new_notification(inp);
            self
        }
        pub fn set_new_notification(
            mut self,
            input: std::option::Option<crate::model::Notification>,
        ) -> Self {
            self.inner = self.inner.set_new_notification(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateSubscriber<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::update_subscriber_input::Builder,
    }
    impl<C, M, R> UpdateSubscriber<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateSubscriberOutput,
            smithy_http::result::SdkError<crate::error::UpdateSubscriberError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::UpdateSubscriberInputOperationOutputAlias,
                crate::output::UpdateSubscriberOutput,
                crate::error::UpdateSubscriberError,
                crate::input::UpdateSubscriberInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to update.</p>
        pub fn account_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.account_id(inp);
            self
        }
        pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_account_id(input);
            self
        }
        /// <p>The name of the budget whose subscriber you want to update.</p>
        pub fn budget_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.budget_name(inp);
            self
        }
        pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_budget_name(input);
            self
        }
        /// <p>The notification whose subscriber you want to update.</p>
        pub fn notification(mut self, inp: crate::model::Notification) -> Self {
            self.inner = self.inner.notification(inp);
            self
        }
        pub fn set_notification(
            mut self,
            input: std::option::Option<crate::model::Notification>,
        ) -> Self {
            self.inner = self.inner.set_notification(input);
            self
        }
        /// <p>The previous subscriber that is associated with a budget notification.</p>
        pub fn old_subscriber(mut self, inp: crate::model::Subscriber) -> Self {
            self.inner = self.inner.old_subscriber(inp);
            self
        }
        pub fn set_old_subscriber(
            mut self,
            input: std::option::Option<crate::model::Subscriber>,
        ) -> Self {
            self.inner = self.inner.set_old_subscriber(input);
            self
        }
        /// <p>The updated subscriber that is associated with a budget notification.</p>
        pub fn new_subscriber(mut self, inp: crate::model::Subscriber) -> Self {
            self.inner = self.inner.new_subscriber(inp);
            self
        }
        pub fn set_new_subscriber(
            mut self,
            input: std::option::Option<crate::model::Subscriber>,
        ) -> Self {
            self.inner = self.inner.set_new_subscriber(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
