// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS Budgets
///
/// Client for invoking operations on AWS Budgets. Each operation on AWS Budgets is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_budgets::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_budgets::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_budgets::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateBudget`](crate::client::fluent_builders::CreateBudget) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::CreateBudget::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::CreateBudget::set_account_id): <p>The <code>accountId</code> that is associated with the budget.</p>
    ///   - [`budget(Budget)`](crate::client::fluent_builders::CreateBudget::budget) / [`set_budget(Option<Budget>)`](crate::client::fluent_builders::CreateBudget::set_budget): <p>The budget object that you want to create.</p>
    ///   - [`notifications_with_subscribers(Vec<NotificationWithSubscribers>)`](crate::client::fluent_builders::CreateBudget::notifications_with_subscribers) / [`set_notifications_with_subscribers(Option<Vec<NotificationWithSubscribers>>)`](crate::client::fluent_builders::CreateBudget::set_notifications_with_subscribers): <p>A notification that you want to associate with a budget. A budget can have up to five notifications, and each notification can have one SNS subscriber and up to 10 email subscribers. If you include notifications and subscribers in your <code>CreateBudget</code> call, Amazon Web Services creates the notifications and subscribers for you.</p>
    /// - On success, responds with [`CreateBudgetOutput`](crate::output::CreateBudgetOutput)

    /// - On failure, responds with [`SdkError<CreateBudgetError>`](crate::error::CreateBudgetError)
    pub fn create_budget(&self) -> crate::client::fluent_builders::CreateBudget {
        crate::client::fluent_builders::CreateBudget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateBudgetAction`](crate::client::fluent_builders::CreateBudgetAction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::CreateBudgetAction::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::CreateBudgetAction::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::CreateBudgetAction::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::CreateBudgetAction::set_budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`notification_type(NotificationType)`](crate::client::fluent_builders::CreateBudgetAction::notification_type) / [`set_notification_type(Option<NotificationType>)`](crate::client::fluent_builders::CreateBudgetAction::set_notification_type): <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    ///   - [`action_type(ActionType)`](crate::client::fluent_builders::CreateBudgetAction::action_type) / [`set_action_type(Option<ActionType>)`](crate::client::fluent_builders::CreateBudgetAction::set_action_type): <p> The type of action. This defines the type of tasks that can be carried out by this action. This field also determines the format for definition. </p>
    ///   - [`action_threshold(ActionThreshold)`](crate::client::fluent_builders::CreateBudgetAction::action_threshold) / [`set_action_threshold(Option<ActionThreshold>)`](crate::client::fluent_builders::CreateBudgetAction::set_action_threshold): <p>The trigger threshold of the action. </p>
    ///   - [`definition(Definition)`](crate::client::fluent_builders::CreateBudgetAction::definition) / [`set_definition(Option<Definition>)`](crate::client::fluent_builders::CreateBudgetAction::set_definition): <p>Specifies all of the type-specific parameters. </p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::CreateBudgetAction::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::CreateBudgetAction::set_execution_role_arn): <p> The role passed for action execution and reversion. Roles and actions must be in the same account. </p>
    ///   - [`approval_model(ApprovalModel)`](crate::client::fluent_builders::CreateBudgetAction::approval_model) / [`set_approval_model(Option<ApprovalModel>)`](crate::client::fluent_builders::CreateBudgetAction::set_approval_model): <p> This specifies if the action needs manual or automatic approval. </p>
    ///   - [`subscribers(Vec<Subscriber>)`](crate::client::fluent_builders::CreateBudgetAction::subscribers) / [`set_subscribers(Option<Vec<Subscriber>>)`](crate::client::fluent_builders::CreateBudgetAction::set_subscribers): <p> A list of subscribers.</p>
    /// - On success, responds with [`CreateBudgetActionOutput`](crate::output::CreateBudgetActionOutput) with field(s):
    ///   - [`account_id(Option<String>)`](crate::output::CreateBudgetActionOutput::account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(Option<String>)`](crate::output::CreateBudgetActionOutput::budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action_id(Option<String>)`](crate::output::CreateBudgetActionOutput::action_id): <p> A system-generated universally unique identifier (UUID) for the action. </p>
    /// - On failure, responds with [`SdkError<CreateBudgetActionError>`](crate::error::CreateBudgetActionError)
    pub fn create_budget_action(&self) -> crate::client::fluent_builders::CreateBudgetAction {
        crate::client::fluent_builders::CreateBudgetAction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateNotification`](crate::client::fluent_builders::CreateNotification) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::CreateNotification::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::CreateNotification::set_account_id): <p>The <code>accountId</code> that is associated with the budget that you want to create a notification for.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::CreateNotification::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::CreateNotification::set_budget_name): <p>The name of the budget that you want Amazon Web Services to notify you about. Budget names must be unique within an account.</p>
    ///   - [`notification(Notification)`](crate::client::fluent_builders::CreateNotification::notification) / [`set_notification(Option<Notification>)`](crate::client::fluent_builders::CreateNotification::set_notification): <p>The notification that you want to create.</p>
    ///   - [`subscribers(Vec<Subscriber>)`](crate::client::fluent_builders::CreateNotification::subscribers) / [`set_subscribers(Option<Vec<Subscriber>>)`](crate::client::fluent_builders::CreateNotification::set_subscribers): <p>A list of subscribers that you want to associate with the notification. Each notification can have one SNS subscriber and up to 10 email subscribers.</p>
    /// - On success, responds with [`CreateNotificationOutput`](crate::output::CreateNotificationOutput)

    /// - On failure, responds with [`SdkError<CreateNotificationError>`](crate::error::CreateNotificationError)
    pub fn create_notification(&self) -> crate::client::fluent_builders::CreateNotification {
        crate::client::fluent_builders::CreateNotification::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateSubscriber`](crate::client::fluent_builders::CreateSubscriber) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::CreateSubscriber::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::CreateSubscriber::set_account_id): <p>The <code>accountId</code> that is associated with the budget that you want to create a subscriber for.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::CreateSubscriber::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::CreateSubscriber::set_budget_name): <p>The name of the budget that you want to subscribe to. Budget names must be unique within an account.</p>
    ///   - [`notification(Notification)`](crate::client::fluent_builders::CreateSubscriber::notification) / [`set_notification(Option<Notification>)`](crate::client::fluent_builders::CreateSubscriber::set_notification): <p>The notification that you want to create a subscriber for.</p>
    ///   - [`subscriber(Subscriber)`](crate::client::fluent_builders::CreateSubscriber::subscriber) / [`set_subscriber(Option<Subscriber>)`](crate::client::fluent_builders::CreateSubscriber::set_subscriber): <p>The subscriber that you want to associate with a budget notification.</p>
    /// - On success, responds with [`CreateSubscriberOutput`](crate::output::CreateSubscriberOutput)

    /// - On failure, responds with [`SdkError<CreateSubscriberError>`](crate::error::CreateSubscriberError)
    pub fn create_subscriber(&self) -> crate::client::fluent_builders::CreateSubscriber {
        crate::client::fluent_builders::CreateSubscriber::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteBudget`](crate::client::fluent_builders::DeleteBudget) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DeleteBudget::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DeleteBudget::set_account_id): <p>The <code>accountId</code> that is associated with the budget that you want to delete.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DeleteBudget::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DeleteBudget::set_budget_name): <p>The name of the budget that you want to delete.</p>
    /// - On success, responds with [`DeleteBudgetOutput`](crate::output::DeleteBudgetOutput)

    /// - On failure, responds with [`SdkError<DeleteBudgetError>`](crate::error::DeleteBudgetError)
    pub fn delete_budget(&self) -> crate::client::fluent_builders::DeleteBudget {
        crate::client::fluent_builders::DeleteBudget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteBudgetAction`](crate::client::fluent_builders::DeleteBudgetAction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DeleteBudgetAction::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DeleteBudgetAction::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DeleteBudgetAction::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DeleteBudgetAction::set_budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action_id(impl Into<String>)`](crate::client::fluent_builders::DeleteBudgetAction::action_id) / [`set_action_id(Option<String>)`](crate::client::fluent_builders::DeleteBudgetAction::set_action_id): <p> A system-generated universally unique identifier (UUID) for the action. </p>
    /// - On success, responds with [`DeleteBudgetActionOutput`](crate::output::DeleteBudgetActionOutput) with field(s):
    ///   - [`account_id(Option<String>)`](crate::output::DeleteBudgetActionOutput::account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(Option<String>)`](crate::output::DeleteBudgetActionOutput::budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action(Option<Action>)`](crate::output::DeleteBudgetActionOutput::action): <p>A budget action resource. </p>
    /// - On failure, responds with [`SdkError<DeleteBudgetActionError>`](crate::error::DeleteBudgetActionError)
    pub fn delete_budget_action(&self) -> crate::client::fluent_builders::DeleteBudgetAction {
        crate::client::fluent_builders::DeleteBudgetAction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteNotification`](crate::client::fluent_builders::DeleteNotification) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DeleteNotification::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DeleteNotification::set_account_id): <p>The <code>accountId</code> that is associated with the budget whose notification you want to delete.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DeleteNotification::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DeleteNotification::set_budget_name): <p>The name of the budget whose notification you want to delete.</p>
    ///   - [`notification(Notification)`](crate::client::fluent_builders::DeleteNotification::notification) / [`set_notification(Option<Notification>)`](crate::client::fluent_builders::DeleteNotification::set_notification): <p>The notification that you want to delete.</p>
    /// - On success, responds with [`DeleteNotificationOutput`](crate::output::DeleteNotificationOutput)

    /// - On failure, responds with [`SdkError<DeleteNotificationError>`](crate::error::DeleteNotificationError)
    pub fn delete_notification(&self) -> crate::client::fluent_builders::DeleteNotification {
        crate::client::fluent_builders::DeleteNotification::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteSubscriber`](crate::client::fluent_builders::DeleteSubscriber) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DeleteSubscriber::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DeleteSubscriber::set_account_id): <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to delete.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DeleteSubscriber::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DeleteSubscriber::set_budget_name): <p>The name of the budget whose subscriber you want to delete.</p>
    ///   - [`notification(Notification)`](crate::client::fluent_builders::DeleteSubscriber::notification) / [`set_notification(Option<Notification>)`](crate::client::fluent_builders::DeleteSubscriber::set_notification): <p>The notification whose subscriber you want to delete.</p>
    ///   - [`subscriber(Subscriber)`](crate::client::fluent_builders::DeleteSubscriber::subscriber) / [`set_subscriber(Option<Subscriber>)`](crate::client::fluent_builders::DeleteSubscriber::set_subscriber): <p>The subscriber that you want to delete.</p>
    /// - On success, responds with [`DeleteSubscriberOutput`](crate::output::DeleteSubscriberOutput)

    /// - On failure, responds with [`SdkError<DeleteSubscriberError>`](crate::error::DeleteSubscriberError)
    pub fn delete_subscriber(&self) -> crate::client::fluent_builders::DeleteSubscriber {
        crate::client::fluent_builders::DeleteSubscriber::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBudget`](crate::client::fluent_builders::DescribeBudget) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudget::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudget::set_account_id): <p>The <code>accountId</code> that is associated with the budget that you want a description of.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DescribeBudget::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DescribeBudget::set_budget_name): <p>The name of the budget that you want a description of.</p>
    /// - On success, responds with [`DescribeBudgetOutput`](crate::output::DescribeBudgetOutput) with field(s):
    ///   - [`budget(Option<Budget>)`](crate::output::DescribeBudgetOutput::budget): <p>The description of the budget.</p>
    /// - On failure, responds with [`SdkError<DescribeBudgetError>`](crate::error::DescribeBudgetError)
    pub fn describe_budget(&self) -> crate::client::fluent_builders::DescribeBudget {
        crate::client::fluent_builders::DescribeBudget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBudgetAction`](crate::client::fluent_builders::DescribeBudgetAction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetAction::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgetAction::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetAction::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DescribeBudgetAction::set_budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetAction::action_id) / [`set_action_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgetAction::set_action_id): <p> A system-generated universally unique identifier (UUID) for the action. </p>
    /// - On success, responds with [`DescribeBudgetActionOutput`](crate::output::DescribeBudgetActionOutput) with field(s):
    ///   - [`account_id(Option<String>)`](crate::output::DescribeBudgetActionOutput::account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(Option<String>)`](crate::output::DescribeBudgetActionOutput::budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action(Option<Action>)`](crate::output::DescribeBudgetActionOutput::action): <p> A budget action resource. </p>
    /// - On failure, responds with [`SdkError<DescribeBudgetActionError>`](crate::error::DescribeBudgetActionError)
    pub fn describe_budget_action(&self) -> crate::client::fluent_builders::DescribeBudgetAction {
        crate::client::fluent_builders::DescribeBudgetAction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBudgetActionHistories`](crate::client::fluent_builders::DescribeBudgetActionHistories) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeBudgetActionHistories::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::set_budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::action_id) / [`set_action_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::set_action_id): <p> A system-generated universally unique identifier (UUID) for the action. </p>
    ///   - [`time_period(TimePeriod)`](crate::client::fluent_builders::DescribeBudgetActionHistories::time_period) / [`set_time_period(Option<TimePeriod>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::set_time_period): <p>The period of time that's covered by a budget. The period has a start date and an end date. The start date must come before the end date. There are no restrictions on the end date. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeBudgetActionHistories::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::set_max_results): <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionHistories::set_next_token): <p> A generic string.</p>
    /// - On success, responds with [`DescribeBudgetActionHistoriesOutput`](crate::output::DescribeBudgetActionHistoriesOutput) with field(s):
    ///   - [`action_histories(Option<Vec<ActionHistory>>)`](crate::output::DescribeBudgetActionHistoriesOutput::action_histories): <p> The historical record of the budget action resource. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeBudgetActionHistoriesOutput::next_token): <p> A generic string.</p>
    /// - On failure, responds with [`SdkError<DescribeBudgetActionHistoriesError>`](crate::error::DescribeBudgetActionHistoriesError)
    pub fn describe_budget_action_histories(
        &self,
    ) -> crate::client::fluent_builders::DescribeBudgetActionHistories {
        crate::client::fluent_builders::DescribeBudgetActionHistories::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBudgetActionsForAccount`](crate::client::fluent_builders::DescribeBudgetActionsForAccount) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeBudgetActionsForAccount::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForAccount::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForAccount::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeBudgetActionsForAccount::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeBudgetActionsForAccount::set_max_results): <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForAccount::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForAccount::set_next_token): <p> A generic string.</p>
    /// - On success, responds with [`DescribeBudgetActionsForAccountOutput`](crate::output::DescribeBudgetActionsForAccountOutput) with field(s):
    ///   - [`actions(Option<Vec<Action>>)`](crate::output::DescribeBudgetActionsForAccountOutput::actions): <p> A list of the budget action resources information. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeBudgetActionsForAccountOutput::next_token): <p> A generic string.</p>
    /// - On failure, responds with [`SdkError<DescribeBudgetActionsForAccountError>`](crate::error::DescribeBudgetActionsForAccountError)
    pub fn describe_budget_actions_for_account(
        &self,
    ) -> crate::client::fluent_builders::DescribeBudgetActionsForAccount {
        crate::client::fluent_builders::DescribeBudgetActionsForAccount::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBudgetActionsForBudget`](crate::client::fluent_builders::DescribeBudgetActionsForBudget) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::set_budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::set_max_results): <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeBudgetActionsForBudget::set_next_token): <p> A generic string.</p>
    /// - On success, responds with [`DescribeBudgetActionsForBudgetOutput`](crate::output::DescribeBudgetActionsForBudgetOutput) with field(s):
    ///   - [`actions(Option<Vec<Action>>)`](crate::output::DescribeBudgetActionsForBudgetOutput::actions): <p> A list of the budget action resources information. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeBudgetActionsForBudgetOutput::next_token): <p> A generic string.</p>
    /// - On failure, responds with [`SdkError<DescribeBudgetActionsForBudgetError>`](crate::error::DescribeBudgetActionsForBudgetError)
    pub fn describe_budget_actions_for_budget(
        &self,
    ) -> crate::client::fluent_builders::DescribeBudgetActionsForBudget {
        crate::client::fluent_builders::DescribeBudgetActionsForBudget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBudgetNotificationsForAccount`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount::set_max_results): <p> An integer that shows how many budget name entries a paginated response contains. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount::set_next_token): <p> A generic string.</p>
    /// - On success, responds with [`DescribeBudgetNotificationsForAccountOutput`](crate::output::DescribeBudgetNotificationsForAccountOutput) with field(s):
    ///   - [`budget_notifications_for_account(Option<Vec<BudgetNotificationsForAccount>>)`](crate::output::DescribeBudgetNotificationsForAccountOutput::budget_notifications_for_account): <p> A list of budget names and associated notifications for an account. </p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeBudgetNotificationsForAccountOutput::next_token): <p> A generic string.</p>
    /// - On failure, responds with [`SdkError<DescribeBudgetNotificationsForAccountError>`](crate::error::DescribeBudgetNotificationsForAccountError)
    pub fn describe_budget_notifications_for_account(
        &self,
    ) -> crate::client::fluent_builders::DescribeBudgetNotificationsForAccount {
        crate::client::fluent_builders::DescribeBudgetNotificationsForAccount::new(
            self.handle.clone(),
        )
    }
    /// Constructs a fluent builder for the [`DescribeBudgetPerformanceHistory`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::set_budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`time_period(TimePeriod)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::time_period) / [`set_time_period(Option<TimePeriod>)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::set_time_period): <p>Retrieves how often the budget went into an <code>ALARM</code> state for the specified time period.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::set_max_results): <p> An integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory::set_next_token): <p> A generic string.</p>
    /// - On success, responds with [`DescribeBudgetPerformanceHistoryOutput`](crate::output::DescribeBudgetPerformanceHistoryOutput) with field(s):
    ///   - [`budget_performance_history(Option<BudgetPerformanceHistory>)`](crate::output::DescribeBudgetPerformanceHistoryOutput::budget_performance_history): <p>The history of how often the budget has gone into an <code>ALARM</code> state.</p>  <p>For <code>DAILY</code> budgets, the history saves the state of the budget for the last 60 days. For <code>MONTHLY</code> budgets, the history saves the state of the budget for the current month plus the last 12 months. For <code>QUARTERLY</code> budgets, the history saves the state of the budget for the last four quarters.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeBudgetPerformanceHistoryOutput::next_token): <p> A generic string.</p>
    /// - On failure, responds with [`SdkError<DescribeBudgetPerformanceHistoryError>`](crate::error::DescribeBudgetPerformanceHistoryError)
    pub fn describe_budget_performance_history(
        &self,
    ) -> crate::client::fluent_builders::DescribeBudgetPerformanceHistory {
        crate::client::fluent_builders::DescribeBudgetPerformanceHistory::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeBudgets`](crate::client::fluent_builders::DescribeBudgets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeBudgets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgets::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeBudgets::set_account_id): <p>The <code>accountId</code> that is associated with the budgets that you want descriptions of.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeBudgets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeBudgets::set_max_results): <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeBudgets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeBudgets::set_next_token): <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    /// - On success, responds with [`DescribeBudgetsOutput`](crate::output::DescribeBudgetsOutput) with field(s):
    ///   - [`budgets(Option<Vec<Budget>>)`](crate::output::DescribeBudgetsOutput::budgets): <p>A list of budgets.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeBudgetsOutput::next_token): <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
    /// - On failure, responds with [`SdkError<DescribeBudgetsError>`](crate::error::DescribeBudgetsError)
    pub fn describe_budgets(&self) -> crate::client::fluent_builders::DescribeBudgets {
        crate::client::fluent_builders::DescribeBudgets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeNotificationsForBudget`](crate::client::fluent_builders::DescribeNotificationsForBudget) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeNotificationsForBudget::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeNotificationsForBudget::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeNotificationsForBudget::set_account_id): <p>The <code>accountId</code> that is associated with the budget whose notifications you want descriptions of.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DescribeNotificationsForBudget::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DescribeNotificationsForBudget::set_budget_name): <p>The name of the budget whose notifications you want descriptions of.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeNotificationsForBudget::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeNotificationsForBudget::set_max_results): <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeNotificationsForBudget::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeNotificationsForBudget::set_next_token): <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    /// - On success, responds with [`DescribeNotificationsForBudgetOutput`](crate::output::DescribeNotificationsForBudgetOutput) with field(s):
    ///   - [`notifications(Option<Vec<Notification>>)`](crate::output::DescribeNotificationsForBudgetOutput::notifications): <p>A list of notifications that are associated with a budget.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeNotificationsForBudgetOutput::next_token): <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
    /// - On failure, responds with [`SdkError<DescribeNotificationsForBudgetError>`](crate::error::DescribeNotificationsForBudgetError)
    pub fn describe_notifications_for_budget(
        &self,
    ) -> crate::client::fluent_builders::DescribeNotificationsForBudget {
        crate::client::fluent_builders::DescribeNotificationsForBudget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeSubscribersForNotification`](crate::client::fluent_builders::DescribeSubscribersForNotification) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::DescribeSubscribersForNotification::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::DescribeSubscribersForNotification::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::DescribeSubscribersForNotification::set_account_id): <p>The <code>accountId</code> that is associated with the budget whose subscribers you want descriptions of.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::DescribeSubscribersForNotification::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::DescribeSubscribersForNotification::set_budget_name): <p>The name of the budget whose subscribers you want descriptions of.</p>
    ///   - [`notification(Notification)`](crate::client::fluent_builders::DescribeSubscribersForNotification::notification) / [`set_notification(Option<Notification>)`](crate::client::fluent_builders::DescribeSubscribersForNotification::set_notification): <p>The notification whose subscribers you want to list.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::DescribeSubscribersForNotification::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::DescribeSubscribersForNotification::set_max_results): <p>An optional integer that represents how many entries a paginated response contains. The maximum is 100.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::DescribeSubscribersForNotification::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::DescribeSubscribersForNotification::set_next_token): <p>The pagination token that you include in your request to indicate the next set of results that you want to retrieve.</p>
    /// - On success, responds with [`DescribeSubscribersForNotificationOutput`](crate::output::DescribeSubscribersForNotificationOutput) with field(s):
    ///   - [`subscribers(Option<Vec<Subscriber>>)`](crate::output::DescribeSubscribersForNotificationOutput::subscribers): <p>A list of subscribers that are associated with a notification.</p>
    ///   - [`next_token(Option<String>)`](crate::output::DescribeSubscribersForNotificationOutput::next_token): <p>The pagination token in the service response that indicates the next set of results that you can retrieve.</p>
    /// - On failure, responds with [`SdkError<DescribeSubscribersForNotificationError>`](crate::error::DescribeSubscribersForNotificationError)
    pub fn describe_subscribers_for_notification(
        &self,
    ) -> crate::client::fluent_builders::DescribeSubscribersForNotification {
        crate::client::fluent_builders::DescribeSubscribersForNotification::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ExecuteBudgetAction`](crate::client::fluent_builders::ExecuteBudgetAction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::ExecuteBudgetAction::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::ExecuteBudgetAction::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::ExecuteBudgetAction::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::ExecuteBudgetAction::set_budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action_id(impl Into<String>)`](crate::client::fluent_builders::ExecuteBudgetAction::action_id) / [`set_action_id(Option<String>)`](crate::client::fluent_builders::ExecuteBudgetAction::set_action_id): <p> A system-generated universally unique identifier (UUID) for the action. </p>
    ///   - [`execution_type(ExecutionType)`](crate::client::fluent_builders::ExecuteBudgetAction::execution_type) / [`set_execution_type(Option<ExecutionType>)`](crate::client::fluent_builders::ExecuteBudgetAction::set_execution_type): <p> The type of execution. </p>
    /// - On success, responds with [`ExecuteBudgetActionOutput`](crate::output::ExecuteBudgetActionOutput) with field(s):
    ///   - [`account_id(Option<String>)`](crate::output::ExecuteBudgetActionOutput::account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(Option<String>)`](crate::output::ExecuteBudgetActionOutput::budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action_id(Option<String>)`](crate::output::ExecuteBudgetActionOutput::action_id): <p> A system-generated universally unique identifier (UUID) for the action. </p>
    ///   - [`execution_type(Option<ExecutionType>)`](crate::output::ExecuteBudgetActionOutput::execution_type): <p> The type of execution. </p>
    /// - On failure, responds with [`SdkError<ExecuteBudgetActionError>`](crate::error::ExecuteBudgetActionError)
    pub fn execute_budget_action(&self) -> crate::client::fluent_builders::ExecuteBudgetAction {
        crate::client::fluent_builders::ExecuteBudgetAction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateBudget`](crate::client::fluent_builders::UpdateBudget) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::UpdateBudget::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::UpdateBudget::set_account_id): <p>The <code>accountId</code> that is associated with the budget that you want to update.</p>
    ///   - [`new_budget(Budget)`](crate::client::fluent_builders::UpdateBudget::new_budget) / [`set_new_budget(Option<Budget>)`](crate::client::fluent_builders::UpdateBudget::set_new_budget): <p>The budget that you want to update your budget to.</p>
    /// - On success, responds with [`UpdateBudgetOutput`](crate::output::UpdateBudgetOutput)

    /// - On failure, responds with [`SdkError<UpdateBudgetError>`](crate::error::UpdateBudgetError)
    pub fn update_budget(&self) -> crate::client::fluent_builders::UpdateBudget {
        crate::client::fluent_builders::UpdateBudget::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateBudgetAction`](crate::client::fluent_builders::UpdateBudgetAction) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::UpdateBudgetAction::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::UpdateBudgetAction::set_account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::UpdateBudgetAction::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::UpdateBudgetAction::set_budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`action_id(impl Into<String>)`](crate::client::fluent_builders::UpdateBudgetAction::action_id) / [`set_action_id(Option<String>)`](crate::client::fluent_builders::UpdateBudgetAction::set_action_id): <p> A system-generated universally unique identifier (UUID) for the action. </p>
    ///   - [`notification_type(NotificationType)`](crate::client::fluent_builders::UpdateBudgetAction::notification_type) / [`set_notification_type(Option<NotificationType>)`](crate::client::fluent_builders::UpdateBudgetAction::set_notification_type): <p> The type of a notification. It must be ACTUAL or FORECASTED.</p>
    ///   - [`action_threshold(ActionThreshold)`](crate::client::fluent_builders::UpdateBudgetAction::action_threshold) / [`set_action_threshold(Option<ActionThreshold>)`](crate::client::fluent_builders::UpdateBudgetAction::set_action_threshold): <p>The trigger threshold of the action. </p>
    ///   - [`definition(Definition)`](crate::client::fluent_builders::UpdateBudgetAction::definition) / [`set_definition(Option<Definition>)`](crate::client::fluent_builders::UpdateBudgetAction::set_definition): <p>Specifies all of the type-specific parameters. </p>
    ///   - [`execution_role_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateBudgetAction::execution_role_arn) / [`set_execution_role_arn(Option<String>)`](crate::client::fluent_builders::UpdateBudgetAction::set_execution_role_arn): <p> The role passed for action execution and reversion. Roles and actions must be in the same account. </p>
    ///   - [`approval_model(ApprovalModel)`](crate::client::fluent_builders::UpdateBudgetAction::approval_model) / [`set_approval_model(Option<ApprovalModel>)`](crate::client::fluent_builders::UpdateBudgetAction::set_approval_model): <p> This specifies if the action needs manual or automatic approval. </p>
    ///   - [`subscribers(Vec<Subscriber>)`](crate::client::fluent_builders::UpdateBudgetAction::subscribers) / [`set_subscribers(Option<Vec<Subscriber>>)`](crate::client::fluent_builders::UpdateBudgetAction::set_subscribers): <p> A list of subscribers.</p>
    /// - On success, responds with [`UpdateBudgetActionOutput`](crate::output::UpdateBudgetActionOutput) with field(s):
    ///   - [`account_id(Option<String>)`](crate::output::UpdateBudgetActionOutput::account_id): <p>The account ID of the user. It's a 12-digit number.</p>
    ///   - [`budget_name(Option<String>)`](crate::output::UpdateBudgetActionOutput::budget_name): <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    ///   - [`old_action(Option<Action>)`](crate::output::UpdateBudgetActionOutput::old_action): <p> The previous action resource information. </p>
    ///   - [`new_action(Option<Action>)`](crate::output::UpdateBudgetActionOutput::new_action): <p> The updated action resource information. </p>
    /// - On failure, responds with [`SdkError<UpdateBudgetActionError>`](crate::error::UpdateBudgetActionError)
    pub fn update_budget_action(&self) -> crate::client::fluent_builders::UpdateBudgetAction {
        crate::client::fluent_builders::UpdateBudgetAction::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateNotification`](crate::client::fluent_builders::UpdateNotification) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::UpdateNotification::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::UpdateNotification::set_account_id): <p>The <code>accountId</code> that is associated with the budget whose notification you want to update.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::UpdateNotification::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::UpdateNotification::set_budget_name): <p>The name of the budget whose notification you want to update.</p>
    ///   - [`old_notification(Notification)`](crate::client::fluent_builders::UpdateNotification::old_notification) / [`set_old_notification(Option<Notification>)`](crate::client::fluent_builders::UpdateNotification::set_old_notification): <p>The previous notification that is associated with a budget.</p>
    ///   - [`new_notification(Notification)`](crate::client::fluent_builders::UpdateNotification::new_notification) / [`set_new_notification(Option<Notification>)`](crate::client::fluent_builders::UpdateNotification::set_new_notification): <p>The updated notification to be associated with a budget.</p>
    /// - On success, responds with [`UpdateNotificationOutput`](crate::output::UpdateNotificationOutput)

    /// - On failure, responds with [`SdkError<UpdateNotificationError>`](crate::error::UpdateNotificationError)
    pub fn update_notification(&self) -> crate::client::fluent_builders::UpdateNotification {
        crate::client::fluent_builders::UpdateNotification::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateSubscriber`](crate::client::fluent_builders::UpdateSubscriber) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`account_id(impl Into<String>)`](crate::client::fluent_builders::UpdateSubscriber::account_id) / [`set_account_id(Option<String>)`](crate::client::fluent_builders::UpdateSubscriber::set_account_id): <p>The <code>accountId</code> that is associated with the budget whose subscriber you want to update.</p>
    ///   - [`budget_name(impl Into<String>)`](crate::client::fluent_builders::UpdateSubscriber::budget_name) / [`set_budget_name(Option<String>)`](crate::client::fluent_builders::UpdateSubscriber::set_budget_name): <p>The name of the budget whose subscriber you want to update.</p>
    ///   - [`notification(Notification)`](crate::client::fluent_builders::UpdateSubscriber::notification) / [`set_notification(Option<Notification>)`](crate::client::fluent_builders::UpdateSubscriber::set_notification): <p>The notification whose subscriber you want to update.</p>
    ///   - [`old_subscriber(Subscriber)`](crate::client::fluent_builders::UpdateSubscriber::old_subscriber) / [`set_old_subscriber(Option<Subscriber>)`](crate::client::fluent_builders::UpdateSubscriber::set_old_subscriber): <p>The previous subscriber that is associated with a budget notification.</p>
    ///   - [`new_subscriber(Subscriber)`](crate::client::fluent_builders::UpdateSubscriber::new_subscriber) / [`set_new_subscriber(Option<Subscriber>)`](crate::client::fluent_builders::UpdateSubscriber::set_new_subscriber): <p>The updated subscriber that is associated with a budget notification.</p>
    /// - On success, responds with [`UpdateSubscriberOutput`](crate::output::UpdateSubscriberOutput)

    /// - On failure, responds with [`SdkError<UpdateSubscriberError>`](crate::error::UpdateSubscriberError)
    pub fn update_subscriber(&self) -> crate::client::fluent_builders::UpdateSubscriber {
        crate::client::fluent_builders::UpdateSubscriber::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
