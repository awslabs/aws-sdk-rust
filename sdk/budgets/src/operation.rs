// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateBudget`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_budget`](crate::client::fluent_builders::CreateBudget).
///
/// `ParseStrictResponse` impl for `CreateBudget`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateBudget {
    _private: (),
}
impl CreateBudget {
    /// Creates a new builder-style object to manufacture [`CreateBudgetInput`](crate::input::CreateBudgetInput).
    pub fn builder() -> crate::input::create_budget_input::Builder {
        crate::input::create_budget_input::Builder::default()
    }
    /// Creates a new `CreateBudget` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateBudget {
    type Output =
        std::result::Result<crate::output::CreateBudgetOutput, crate::error::CreateBudgetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_budget::de_create_budget_http_error(response)
        } else {
            crate::protocol_serde::shape_create_budget::de_create_budget_http_response(response)
        }
    }
}

/// Operation shape for `CreateBudgetAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_budget_action`](crate::client::fluent_builders::CreateBudgetAction).
///
/// `ParseStrictResponse` impl for `CreateBudgetAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateBudgetAction {
    _private: (),
}
impl CreateBudgetAction {
    /// Creates a new builder-style object to manufacture [`CreateBudgetActionInput`](crate::input::CreateBudgetActionInput).
    pub fn builder() -> crate::input::create_budget_action_input::Builder {
        crate::input::create_budget_action_input::Builder::default()
    }
    /// Creates a new `CreateBudgetAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateBudgetAction {
    type Output = std::result::Result<
        crate::output::CreateBudgetActionOutput,
        crate::error::CreateBudgetActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_budget_action::de_create_budget_action_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_budget_action::de_create_budget_action_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateNotification`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_notification`](crate::client::fluent_builders::CreateNotification).
///
/// `ParseStrictResponse` impl for `CreateNotification`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateNotification {
    _private: (),
}
impl CreateNotification {
    /// Creates a new builder-style object to manufacture [`CreateNotificationInput`](crate::input::CreateNotificationInput).
    pub fn builder() -> crate::input::create_notification_input::Builder {
        crate::input::create_notification_input::Builder::default()
    }
    /// Creates a new `CreateNotification` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateNotification {
    type Output = std::result::Result<
        crate::output::CreateNotificationOutput,
        crate::error::CreateNotificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_notification::de_create_notification_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_notification::de_create_notification_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateSubscriber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_subscriber`](crate::client::fluent_builders::CreateSubscriber).
///
/// `ParseStrictResponse` impl for `CreateSubscriber`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateSubscriber {
    _private: (),
}
impl CreateSubscriber {
    /// Creates a new builder-style object to manufacture [`CreateSubscriberInput`](crate::input::CreateSubscriberInput).
    pub fn builder() -> crate::input::create_subscriber_input::Builder {
        crate::input::create_subscriber_input::Builder::default()
    }
    /// Creates a new `CreateSubscriber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateSubscriber {
    type Output = std::result::Result<
        crate::output::CreateSubscriberOutput,
        crate::error::CreateSubscriberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_subscriber::de_create_subscriber_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_subscriber::de_create_subscriber_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteBudget`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_budget`](crate::client::fluent_builders::DeleteBudget).
///
/// `ParseStrictResponse` impl for `DeleteBudget`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteBudget {
    _private: (),
}
impl DeleteBudget {
    /// Creates a new builder-style object to manufacture [`DeleteBudgetInput`](crate::input::DeleteBudgetInput).
    pub fn builder() -> crate::input::delete_budget_input::Builder {
        crate::input::delete_budget_input::Builder::default()
    }
    /// Creates a new `DeleteBudget` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteBudget {
    type Output =
        std::result::Result<crate::output::DeleteBudgetOutput, crate::error::DeleteBudgetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_budget::de_delete_budget_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_budget::de_delete_budget_http_response(response)
        }
    }
}

/// Operation shape for `DeleteBudgetAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_budget_action`](crate::client::fluent_builders::DeleteBudgetAction).
///
/// `ParseStrictResponse` impl for `DeleteBudgetAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteBudgetAction {
    _private: (),
}
impl DeleteBudgetAction {
    /// Creates a new builder-style object to manufacture [`DeleteBudgetActionInput`](crate::input::DeleteBudgetActionInput).
    pub fn builder() -> crate::input::delete_budget_action_input::Builder {
        crate::input::delete_budget_action_input::Builder::default()
    }
    /// Creates a new `DeleteBudgetAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteBudgetAction {
    type Output = std::result::Result<
        crate::output::DeleteBudgetActionOutput,
        crate::error::DeleteBudgetActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_budget_action::de_delete_budget_action_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_budget_action::de_delete_budget_action_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteNotification`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_notification`](crate::client::fluent_builders::DeleteNotification).
///
/// `ParseStrictResponse` impl for `DeleteNotification`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteNotification {
    _private: (),
}
impl DeleteNotification {
    /// Creates a new builder-style object to manufacture [`DeleteNotificationInput`](crate::input::DeleteNotificationInput).
    pub fn builder() -> crate::input::delete_notification_input::Builder {
        crate::input::delete_notification_input::Builder::default()
    }
    /// Creates a new `DeleteNotification` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteNotification {
    type Output = std::result::Result<
        crate::output::DeleteNotificationOutput,
        crate::error::DeleteNotificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_notification::de_delete_notification_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_notification::de_delete_notification_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteSubscriber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_subscriber`](crate::client::fluent_builders::DeleteSubscriber).
///
/// `ParseStrictResponse` impl for `DeleteSubscriber`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSubscriber {
    _private: (),
}
impl DeleteSubscriber {
    /// Creates a new builder-style object to manufacture [`DeleteSubscriberInput`](crate::input::DeleteSubscriberInput).
    pub fn builder() -> crate::input::delete_subscriber_input::Builder {
        crate::input::delete_subscriber_input::Builder::default()
    }
    /// Creates a new `DeleteSubscriber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSubscriber {
    type Output = std::result::Result<
        crate::output::DeleteSubscriberOutput,
        crate::error::DeleteSubscriberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_subscriber::de_delete_subscriber_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_subscriber::de_delete_subscriber_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeBudget`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_budget`](crate::client::fluent_builders::DescribeBudget).
///
/// `ParseStrictResponse` impl for `DescribeBudget`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudget {
    _private: (),
}
impl DescribeBudget {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetInput`](crate::input::DescribeBudgetInput).
    pub fn builder() -> crate::input::describe_budget_input::Builder {
        crate::input::describe_budget_input::Builder::default()
    }
    /// Creates a new `DescribeBudget` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBudget {
    type Output =
        std::result::Result<crate::output::DescribeBudgetOutput, crate::error::DescribeBudgetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_budget::de_describe_budget_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_budget::de_describe_budget_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBudgetAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_budget_action`](crate::client::fluent_builders::DescribeBudgetAction).
///
/// `ParseStrictResponse` impl for `DescribeBudgetAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudgetAction {
    _private: (),
}
impl DescribeBudgetAction {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetActionInput`](crate::input::DescribeBudgetActionInput).
    pub fn builder() -> crate::input::describe_budget_action_input::Builder {
        crate::input::describe_budget_action_input::Builder::default()
    }
    /// Creates a new `DescribeBudgetAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBudgetAction {
    type Output = std::result::Result<
        crate::output::DescribeBudgetActionOutput,
        crate::error::DescribeBudgetActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_budget_action::de_describe_budget_action_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_budget_action::de_describe_budget_action_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBudgetActionHistories`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_budget_action_histories`](crate::client::fluent_builders::DescribeBudgetActionHistories).
///
/// `ParseStrictResponse` impl for `DescribeBudgetActionHistories`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudgetActionHistories {
    _private: (),
}
impl DescribeBudgetActionHistories {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetActionHistoriesInput`](crate::input::DescribeBudgetActionHistoriesInput).
    pub fn builder() -> crate::input::describe_budget_action_histories_input::Builder {
        crate::input::describe_budget_action_histories_input::Builder::default()
    }
    /// Creates a new `DescribeBudgetActionHistories` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBudgetActionHistories {
    type Output = std::result::Result<
        crate::output::DescribeBudgetActionHistoriesOutput,
        crate::error::DescribeBudgetActionHistoriesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_budget_action_histories::de_describe_budget_action_histories_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_budget_action_histories::de_describe_budget_action_histories_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBudgetActionsForAccount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_budget_actions_for_account`](crate::client::fluent_builders::DescribeBudgetActionsForAccount).
///
/// `ParseStrictResponse` impl for `DescribeBudgetActionsForAccount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudgetActionsForAccount {
    _private: (),
}
impl DescribeBudgetActionsForAccount {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetActionsForAccountInput`](crate::input::DescribeBudgetActionsForAccountInput).
    pub fn builder() -> crate::input::describe_budget_actions_for_account_input::Builder {
        crate::input::describe_budget_actions_for_account_input::Builder::default()
    }
    /// Creates a new `DescribeBudgetActionsForAccount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBudgetActionsForAccount {
    type Output = std::result::Result<
        crate::output::DescribeBudgetActionsForAccountOutput,
        crate::error::DescribeBudgetActionsForAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_budget_actions_for_account::de_describe_budget_actions_for_account_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_budget_actions_for_account::de_describe_budget_actions_for_account_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBudgetActionsForBudget`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_budget_actions_for_budget`](crate::client::fluent_builders::DescribeBudgetActionsForBudget).
///
/// `ParseStrictResponse` impl for `DescribeBudgetActionsForBudget`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudgetActionsForBudget {
    _private: (),
}
impl DescribeBudgetActionsForBudget {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetActionsForBudgetInput`](crate::input::DescribeBudgetActionsForBudgetInput).
    pub fn builder() -> crate::input::describe_budget_actions_for_budget_input::Builder {
        crate::input::describe_budget_actions_for_budget_input::Builder::default()
    }
    /// Creates a new `DescribeBudgetActionsForBudget` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBudgetActionsForBudget {
    type Output = std::result::Result<
        crate::output::DescribeBudgetActionsForBudgetOutput,
        crate::error::DescribeBudgetActionsForBudgetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_budget_actions_for_budget::de_describe_budget_actions_for_budget_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_budget_actions_for_budget::de_describe_budget_actions_for_budget_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBudgetNotificationsForAccount`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_budget_notifications_for_account`](crate::client::fluent_builders::DescribeBudgetNotificationsForAccount).
///
/// `ParseStrictResponse` impl for `DescribeBudgetNotificationsForAccount`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudgetNotificationsForAccount {
    _private: (),
}
impl DescribeBudgetNotificationsForAccount {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetNotificationsForAccountInput`](crate::input::DescribeBudgetNotificationsForAccountInput).
    pub fn builder() -> crate::input::describe_budget_notifications_for_account_input::Builder {
        crate::input::describe_budget_notifications_for_account_input::Builder::default()
    }
    /// Creates a new `DescribeBudgetNotificationsForAccount` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBudgetNotificationsForAccount {
    type Output = std::result::Result<
        crate::output::DescribeBudgetNotificationsForAccountOutput,
        crate::error::DescribeBudgetNotificationsForAccountError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_budget_notifications_for_account::de_describe_budget_notifications_for_account_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_budget_notifications_for_account::de_describe_budget_notifications_for_account_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBudgetPerformanceHistory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_budget_performance_history`](crate::client::fluent_builders::DescribeBudgetPerformanceHistory).
///
/// `ParseStrictResponse` impl for `DescribeBudgetPerformanceHistory`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudgetPerformanceHistory {
    _private: (),
}
impl DescribeBudgetPerformanceHistory {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetPerformanceHistoryInput`](crate::input::DescribeBudgetPerformanceHistoryInput).
    pub fn builder() -> crate::input::describe_budget_performance_history_input::Builder {
        crate::input::describe_budget_performance_history_input::Builder::default()
    }
    /// Creates a new `DescribeBudgetPerformanceHistory` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBudgetPerformanceHistory {
    type Output = std::result::Result<
        crate::output::DescribeBudgetPerformanceHistoryOutput,
        crate::error::DescribeBudgetPerformanceHistoryError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_budget_performance_history::de_describe_budget_performance_history_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_budget_performance_history::de_describe_budget_performance_history_http_response(response)
        }
    }
}

/// Operation shape for `DescribeBudgets`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_budgets`](crate::client::fluent_builders::DescribeBudgets).
///
/// `ParseStrictResponse` impl for `DescribeBudgets`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeBudgets {
    _private: (),
}
impl DescribeBudgets {
    /// Creates a new builder-style object to manufacture [`DescribeBudgetsInput`](crate::input::DescribeBudgetsInput).
    pub fn builder() -> crate::input::describe_budgets_input::Builder {
        crate::input::describe_budgets_input::Builder::default()
    }
    /// Creates a new `DescribeBudgets` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeBudgets {
    type Output = std::result::Result<
        crate::output::DescribeBudgetsOutput,
        crate::error::DescribeBudgetsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_budgets::de_describe_budgets_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_budgets::de_describe_budgets_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeNotificationsForBudget`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_notifications_for_budget`](crate::client::fluent_builders::DescribeNotificationsForBudget).
///
/// `ParseStrictResponse` impl for `DescribeNotificationsForBudget`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeNotificationsForBudget {
    _private: (),
}
impl DescribeNotificationsForBudget {
    /// Creates a new builder-style object to manufacture [`DescribeNotificationsForBudgetInput`](crate::input::DescribeNotificationsForBudgetInput).
    pub fn builder() -> crate::input::describe_notifications_for_budget_input::Builder {
        crate::input::describe_notifications_for_budget_input::Builder::default()
    }
    /// Creates a new `DescribeNotificationsForBudget` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeNotificationsForBudget {
    type Output = std::result::Result<
        crate::output::DescribeNotificationsForBudgetOutput,
        crate::error::DescribeNotificationsForBudgetError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_notifications_for_budget::de_describe_notifications_for_budget_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_notifications_for_budget::de_describe_notifications_for_budget_http_response(response)
        }
    }
}

/// Operation shape for `DescribeSubscribersForNotification`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_subscribers_for_notification`](crate::client::fluent_builders::DescribeSubscribersForNotification).
///
/// `ParseStrictResponse` impl for `DescribeSubscribersForNotification`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeSubscribersForNotification {
    _private: (),
}
impl DescribeSubscribersForNotification {
    /// Creates a new builder-style object to manufacture [`DescribeSubscribersForNotificationInput`](crate::input::DescribeSubscribersForNotificationInput).
    pub fn builder() -> crate::input::describe_subscribers_for_notification_input::Builder {
        crate::input::describe_subscribers_for_notification_input::Builder::default()
    }
    /// Creates a new `DescribeSubscribersForNotification` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeSubscribersForNotification {
    type Output = std::result::Result<
        crate::output::DescribeSubscribersForNotificationOutput,
        crate::error::DescribeSubscribersForNotificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_subscribers_for_notification::de_describe_subscribers_for_notification_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_subscribers_for_notification::de_describe_subscribers_for_notification_http_response(response)
        }
    }
}

/// Operation shape for `ExecuteBudgetAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`execute_budget_action`](crate::client::fluent_builders::ExecuteBudgetAction).
///
/// `ParseStrictResponse` impl for `ExecuteBudgetAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ExecuteBudgetAction {
    _private: (),
}
impl ExecuteBudgetAction {
    /// Creates a new builder-style object to manufacture [`ExecuteBudgetActionInput`](crate::input::ExecuteBudgetActionInput).
    pub fn builder() -> crate::input::execute_budget_action_input::Builder {
        crate::input::execute_budget_action_input::Builder::default()
    }
    /// Creates a new `ExecuteBudgetAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ExecuteBudgetAction {
    type Output = std::result::Result<
        crate::output::ExecuteBudgetActionOutput,
        crate::error::ExecuteBudgetActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_execute_budget_action::de_execute_budget_action_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_execute_budget_action::de_execute_budget_action_http_response(response)
        }
    }
}

/// Operation shape for `UpdateBudget`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_budget`](crate::client::fluent_builders::UpdateBudget).
///
/// `ParseStrictResponse` impl for `UpdateBudget`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateBudget {
    _private: (),
}
impl UpdateBudget {
    /// Creates a new builder-style object to manufacture [`UpdateBudgetInput`](crate::input::UpdateBudgetInput).
    pub fn builder() -> crate::input::update_budget_input::Builder {
        crate::input::update_budget_input::Builder::default()
    }
    /// Creates a new `UpdateBudget` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateBudget {
    type Output =
        std::result::Result<crate::output::UpdateBudgetOutput, crate::error::UpdateBudgetError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_budget::de_update_budget_http_error(response)
        } else {
            crate::protocol_serde::shape_update_budget::de_update_budget_http_response(response)
        }
    }
}

/// Operation shape for `UpdateBudgetAction`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_budget_action`](crate::client::fluent_builders::UpdateBudgetAction).
///
/// `ParseStrictResponse` impl for `UpdateBudgetAction`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateBudgetAction {
    _private: (),
}
impl UpdateBudgetAction {
    /// Creates a new builder-style object to manufacture [`UpdateBudgetActionInput`](crate::input::UpdateBudgetActionInput).
    pub fn builder() -> crate::input::update_budget_action_input::Builder {
        crate::input::update_budget_action_input::Builder::default()
    }
    /// Creates a new `UpdateBudgetAction` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateBudgetAction {
    type Output = std::result::Result<
        crate::output::UpdateBudgetActionOutput,
        crate::error::UpdateBudgetActionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_budget_action::de_update_budget_action_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_budget_action::de_update_budget_action_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateNotification`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_notification`](crate::client::fluent_builders::UpdateNotification).
///
/// `ParseStrictResponse` impl for `UpdateNotification`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateNotification {
    _private: (),
}
impl UpdateNotification {
    /// Creates a new builder-style object to manufacture [`UpdateNotificationInput`](crate::input::UpdateNotificationInput).
    pub fn builder() -> crate::input::update_notification_input::Builder {
        crate::input::update_notification_input::Builder::default()
    }
    /// Creates a new `UpdateNotification` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateNotification {
    type Output = std::result::Result<
        crate::output::UpdateNotificationOutput,
        crate::error::UpdateNotificationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_notification::de_update_notification_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_notification::de_update_notification_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateSubscriber`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_subscriber`](crate::client::fluent_builders::UpdateSubscriber).
///
/// `ParseStrictResponse` impl for `UpdateSubscriber`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateSubscriber {
    _private: (),
}
impl UpdateSubscriber {
    /// Creates a new builder-style object to manufacture [`UpdateSubscriberInput`](crate::input::UpdateSubscriberInput).
    pub fn builder() -> crate::input::update_subscriber_input::Builder {
        crate::input::update_subscriber_input::Builder::default()
    }
    /// Creates a new `UpdateSubscriber` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateSubscriber {
    type Output = std::result::Result<
        crate::output::UpdateSubscriberOutput,
        crate::error::UpdateSubscriberError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_subscriber::de_update_subscriber_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_subscriber::de_update_subscriber_http_response(
                response,
            )
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
