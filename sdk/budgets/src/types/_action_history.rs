// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The historical records for a budget action. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ActionHistory {
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The status of action at the time of the event. </p>
    pub status: crate::types::ActionStatus,
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    pub event_type: crate::types::EventType,
    /// <p>The description of the details for the event. </p>
    pub action_history_details: ::std::option::Option<crate::types::ActionHistoryDetails>,
}
impl ActionHistory {
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The status of action at the time of the event. </p>
    pub fn status(&self) -> &crate::types::ActionStatus {
        &self.status
    }
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    pub fn event_type(&self) -> &crate::types::EventType {
        &self.event_type
    }
    /// <p>The description of the details for the event. </p>
    pub fn action_history_details(&self) -> ::std::option::Option<&crate::types::ActionHistoryDetails> {
        self.action_history_details.as_ref()
    }
}
impl ActionHistory {
    /// Creates a new builder-style object to manufacture [`ActionHistory`](crate::types::ActionHistory).
    pub fn builder() -> crate::types::builders::ActionHistoryBuilder {
        crate::types::builders::ActionHistoryBuilder::default()
    }
}

/// A builder for [`ActionHistory`](crate::types::ActionHistory).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ActionHistoryBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::ActionStatus>,
    pub(crate) event_type: ::std::option::Option<crate::types::EventType>,
    pub(crate) action_history_details: ::std::option::Option<crate::types::ActionHistoryDetails>,
}
impl ActionHistoryBuilder {
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The status of action at the time of the event. </p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ActionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of action at the time of the event. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of action at the time of the event. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ActionStatus> {
        &self.status
    }
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    /// This field is required.
    pub fn event_type(mut self, input: crate::types::EventType) -> Self {
        self.event_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    pub fn set_event_type(mut self, input: ::std::option::Option<crate::types::EventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    pub fn get_event_type(&self) -> &::std::option::Option<crate::types::EventType> {
        &self.event_type
    }
    /// <p>The description of the details for the event. </p>
    /// This field is required.
    pub fn action_history_details(mut self, input: crate::types::ActionHistoryDetails) -> Self {
        self.action_history_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>The description of the details for the event. </p>
    pub fn set_action_history_details(mut self, input: ::std::option::Option<crate::types::ActionHistoryDetails>) -> Self {
        self.action_history_details = input;
        self
    }
    /// <p>The description of the details for the event. </p>
    pub fn get_action_history_details(&self) -> &::std::option::Option<crate::types::ActionHistoryDetails> {
        &self.action_history_details
    }
    /// Consumes the builder and constructs a [`ActionHistory`](crate::types::ActionHistory).
    /// This method will fail if any of the following fields are not set:
    /// - [`timestamp`](crate::types::builders::ActionHistoryBuilder::timestamp)
    /// - [`status`](crate::types::builders::ActionHistoryBuilder::status)
    /// - [`event_type`](crate::types::builders::ActionHistoryBuilder::event_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ActionHistory, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ActionHistory {
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building ActionHistory",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ActionHistory",
                )
            })?,
            event_type: self.event_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event_type",
                    "event_type was not specified but it is required when building ActionHistory",
                )
            })?,
            action_history_details: self.action_history_details,
        })
    }
}
