// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The historical records for a budget action. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionHistory {
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of action at the time of the event. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ActionStatus>,
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    #[doc(hidden)]
    pub event_type: std::option::Option<crate::types::EventType>,
    /// <p>The description of the details for the event. </p>
    #[doc(hidden)]
    pub action_history_details: std::option::Option<crate::types::ActionHistoryDetails>,
}
impl ActionHistory {
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>The status of action at the time of the event. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::ActionStatus> {
        self.status.as_ref()
    }
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    pub fn event_type(&self) -> std::option::Option<&crate::types::EventType> {
        self.event_type.as_ref()
    }
    /// <p>The description of the details for the event. </p>
    pub fn action_history_details(
        &self,
    ) -> std::option::Option<&crate::types::ActionHistoryDetails> {
        self.action_history_details.as_ref()
    }
}
impl ActionHistory {
    /// Creates a new builder-style object to manufacture [`ActionHistory`](crate::types::ActionHistory).
    pub fn builder() -> crate::types::builders::ActionHistoryBuilder {
        crate::types::builders::ActionHistoryBuilder::default()
    }
}

/// A builder for [`ActionHistory`](crate::types::ActionHistory).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionHistoryBuilder {
    pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::ActionStatus>,
    pub(crate) event_type: std::option::Option<crate::types::EventType>,
    pub(crate) action_history_details: std::option::Option<crate::types::ActionHistoryDetails>,
}
impl ActionHistoryBuilder {
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p> A generic time stamp. In Java, it's transformed to a <code>Date</code> object.</p>
    pub fn set_timestamp(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The status of action at the time of the event. </p>
    pub fn status(mut self, input: crate::types::ActionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of action at the time of the event. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ActionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    pub fn event_type(mut self, input: crate::types::EventType) -> Self {
        self.event_type = Some(input);
        self
    }
    /// <p>This distinguishes between whether the events are triggered by the user or are generated by the system. </p>
    pub fn set_event_type(mut self, input: std::option::Option<crate::types::EventType>) -> Self {
        self.event_type = input;
        self
    }
    /// <p>The description of the details for the event. </p>
    pub fn action_history_details(mut self, input: crate::types::ActionHistoryDetails) -> Self {
        self.action_history_details = Some(input);
        self
    }
    /// <p>The description of the details for the event. </p>
    pub fn set_action_history_details(
        mut self,
        input: std::option::Option<crate::types::ActionHistoryDetails>,
    ) -> Self {
        self.action_history_details = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionHistory`](crate::types::ActionHistory).
    pub fn build(self) -> crate::types::ActionHistory {
        crate::types::ActionHistory {
            timestamp: self.timestamp,
            status: self.status,
            event_type: self.event_type,
            action_history_details: self.action_history_details,
        }
    }
}
