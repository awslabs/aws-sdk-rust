// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A history of the state of a budget at the end of the budget's specified time period.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BudgetPerformanceHistory {
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    #[doc(hidden)]
    pub budget_name: std::option::Option<std::string::String>,
    /// <p> The type of a budget. It must be one of the following types: </p>
    /// <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>
    #[doc(hidden)]
    pub budget_type: std::option::Option<crate::types::BudgetType>,
    /// <p>The history of the cost filters for a budget during the specified time period.</p>
    #[doc(hidden)]
    pub cost_filters: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The history of the cost types for a budget during the specified time period.</p>
    #[doc(hidden)]
    pub cost_types: std::option::Option<crate::types::CostTypes>,
    /// <p> The time unit of the budget, such as MONTHLY or QUARTERLY.</p>
    #[doc(hidden)]
    pub time_unit: std::option::Option<crate::types::TimeUnit>,
    /// <p>A list of amounts of cost or usage that you created budgets for, which are compared to your actual costs or usage.</p>
    #[doc(hidden)]
    pub budgeted_and_actual_amounts_list:
        std::option::Option<std::vec::Vec<crate::types::BudgetedAndActualAmounts>>,
}
impl BudgetPerformanceHistory {
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(&self) -> std::option::Option<&str> {
        self.budget_name.as_deref()
    }
    /// <p> The type of a budget. It must be one of the following types: </p>
    /// <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>
    pub fn budget_type(&self) -> std::option::Option<&crate::types::BudgetType> {
        self.budget_type.as_ref()
    }
    /// <p>The history of the cost filters for a budget during the specified time period.</p>
    pub fn cost_filters(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.cost_filters.as_ref()
    }
    /// <p>The history of the cost types for a budget during the specified time period.</p>
    pub fn cost_types(&self) -> std::option::Option<&crate::types::CostTypes> {
        self.cost_types.as_ref()
    }
    /// <p> The time unit of the budget, such as MONTHLY or QUARTERLY.</p>
    pub fn time_unit(&self) -> std::option::Option<&crate::types::TimeUnit> {
        self.time_unit.as_ref()
    }
    /// <p>A list of amounts of cost or usage that you created budgets for, which are compared to your actual costs or usage.</p>
    pub fn budgeted_and_actual_amounts_list(
        &self,
    ) -> std::option::Option<&[crate::types::BudgetedAndActualAmounts]> {
        self.budgeted_and_actual_amounts_list.as_deref()
    }
}
impl BudgetPerformanceHistory {
    /// Creates a new builder-style object to manufacture [`BudgetPerformanceHistory`](crate::types::BudgetPerformanceHistory).
    pub fn builder() -> crate::types::builders::BudgetPerformanceHistoryBuilder {
        crate::types::builders::BudgetPerformanceHistoryBuilder::default()
    }
}

/// A builder for [`BudgetPerformanceHistory`](crate::types::BudgetPerformanceHistory).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BudgetPerformanceHistoryBuilder {
    pub(crate) budget_name: std::option::Option<std::string::String>,
    pub(crate) budget_type: std::option::Option<crate::types::BudgetType>,
    pub(crate) cost_filters: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) cost_types: std::option::Option<crate::types::CostTypes>,
    pub(crate) time_unit: std::option::Option<crate::types::TimeUnit>,
    pub(crate) budgeted_and_actual_amounts_list:
        std::option::Option<std::vec::Vec<crate::types::BudgetedAndActualAmounts>>,
}
impl BudgetPerformanceHistoryBuilder {
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn budget_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.budget_name = Some(input.into());
        self
    }
    /// <p> A string that represents the budget name. The ":" and "\" characters aren't allowed.</p>
    pub fn set_budget_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.budget_name = input;
        self
    }
    /// <p> The type of a budget. It must be one of the following types: </p>
    /// <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>
    pub fn budget_type(mut self, input: crate::types::BudgetType) -> Self {
        self.budget_type = Some(input);
        self
    }
    /// <p> The type of a budget. It must be one of the following types: </p>
    /// <p> <code>COST</code>, <code>USAGE</code>, <code>RI_UTILIZATION</code>, <code>RI_COVERAGE</code>, <code>SAVINGS_PLANS_UTILIZATION</code>, or <code>SAVINGS_PLANS_COVERAGE</code>.</p>
    pub fn set_budget_type(mut self, input: std::option::Option<crate::types::BudgetType>) -> Self {
        self.budget_type = input;
        self
    }
    /// Adds a key-value pair to `cost_filters`.
    ///
    /// To override the contents of this collection use [`set_cost_filters`](Self::set_cost_filters).
    ///
    /// <p>The history of the cost filters for a budget during the specified time period.</p>
    pub fn cost_filters(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.cost_filters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.cost_filters = Some(hash_map);
        self
    }
    /// <p>The history of the cost filters for a budget during the specified time period.</p>
    pub fn set_cost_filters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.cost_filters = input;
        self
    }
    /// <p>The history of the cost types for a budget during the specified time period.</p>
    pub fn cost_types(mut self, input: crate::types::CostTypes) -> Self {
        self.cost_types = Some(input);
        self
    }
    /// <p>The history of the cost types for a budget during the specified time period.</p>
    pub fn set_cost_types(mut self, input: std::option::Option<crate::types::CostTypes>) -> Self {
        self.cost_types = input;
        self
    }
    /// <p> The time unit of the budget, such as MONTHLY or QUARTERLY.</p>
    pub fn time_unit(mut self, input: crate::types::TimeUnit) -> Self {
        self.time_unit = Some(input);
        self
    }
    /// <p> The time unit of the budget, such as MONTHLY or QUARTERLY.</p>
    pub fn set_time_unit(mut self, input: std::option::Option<crate::types::TimeUnit>) -> Self {
        self.time_unit = input;
        self
    }
    /// Appends an item to `budgeted_and_actual_amounts_list`.
    ///
    /// To override the contents of this collection use [`set_budgeted_and_actual_amounts_list`](Self::set_budgeted_and_actual_amounts_list).
    ///
    /// <p>A list of amounts of cost or usage that you created budgets for, which are compared to your actual costs or usage.</p>
    pub fn budgeted_and_actual_amounts_list(
        mut self,
        input: crate::types::BudgetedAndActualAmounts,
    ) -> Self {
        let mut v = self.budgeted_and_actual_amounts_list.unwrap_or_default();
        v.push(input);
        self.budgeted_and_actual_amounts_list = Some(v);
        self
    }
    /// <p>A list of amounts of cost or usage that you created budgets for, which are compared to your actual costs or usage.</p>
    pub fn set_budgeted_and_actual_amounts_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BudgetedAndActualAmounts>>,
    ) -> Self {
        self.budgeted_and_actual_amounts_list = input;
        self
    }
    /// Consumes the builder and constructs a [`BudgetPerformanceHistory`](crate::types::BudgetPerformanceHistory).
    pub fn build(self) -> crate::types::BudgetPerformanceHistory {
        crate::types::BudgetPerformanceHistory {
            budget_name: self.budget_name,
            budget_type: self.budget_type,
            cost_filters: self.cost_filters,
            cost_types: self.cost_types,
            time_unit: self.time_unit,
            budgeted_and_actual_amounts_list: self.budgeted_and_actual_amounts_list,
        }
    }
}
