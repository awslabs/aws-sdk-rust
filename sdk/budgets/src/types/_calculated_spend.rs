// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The spend objects that are associated with this budget. The <code>actualSpend</code> tracks how much you've used, cost, usage, RI units, or Savings Plans units and the <code>forecastedSpend</code> tracks how much that you're predicted to spend based on your historical usage profile.</p>
/// <p>For example, if it's the 20th of the month and you have spent <code>50</code> dollars on Amazon EC2, your <code>actualSpend</code> is <code>50 USD</code>, and your <code>forecastedSpend</code> is <code>75 USD</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CalculatedSpend {
    /// <p>The amount of cost, usage, RI units, or Savings Plans units that you used.</p>
    #[doc(hidden)]
    pub actual_spend: std::option::Option<crate::types::Spend>,
    /// <p>The amount of cost, usage, RI units, or Savings Plans units that you're forecasted to use.</p>
    #[doc(hidden)]
    pub forecasted_spend: std::option::Option<crate::types::Spend>,
}
impl CalculatedSpend {
    /// <p>The amount of cost, usage, RI units, or Savings Plans units that you used.</p>
    pub fn actual_spend(&self) -> std::option::Option<&crate::types::Spend> {
        self.actual_spend.as_ref()
    }
    /// <p>The amount of cost, usage, RI units, or Savings Plans units that you're forecasted to use.</p>
    pub fn forecasted_spend(&self) -> std::option::Option<&crate::types::Spend> {
        self.forecasted_spend.as_ref()
    }
}
impl CalculatedSpend {
    /// Creates a new builder-style object to manufacture [`CalculatedSpend`](crate::types::CalculatedSpend).
    pub fn builder() -> crate::types::builders::CalculatedSpendBuilder {
        crate::types::builders::CalculatedSpendBuilder::default()
    }
}

/// A builder for [`CalculatedSpend`](crate::types::CalculatedSpend).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CalculatedSpendBuilder {
    pub(crate) actual_spend: std::option::Option<crate::types::Spend>,
    pub(crate) forecasted_spend: std::option::Option<crate::types::Spend>,
}
impl CalculatedSpendBuilder {
    /// <p>The amount of cost, usage, RI units, or Savings Plans units that you used.</p>
    pub fn actual_spend(mut self, input: crate::types::Spend) -> Self {
        self.actual_spend = Some(input);
        self
    }
    /// <p>The amount of cost, usage, RI units, or Savings Plans units that you used.</p>
    pub fn set_actual_spend(mut self, input: std::option::Option<crate::types::Spend>) -> Self {
        self.actual_spend = input;
        self
    }
    /// <p>The amount of cost, usage, RI units, or Savings Plans units that you're forecasted to use.</p>
    pub fn forecasted_spend(mut self, input: crate::types::Spend) -> Self {
        self.forecasted_spend = Some(input);
        self
    }
    /// <p>The amount of cost, usage, RI units, or Savings Plans units that you're forecasted to use.</p>
    pub fn set_forecasted_spend(mut self, input: std::option::Option<crate::types::Spend>) -> Self {
        self.forecasted_spend = input;
        self
    }
    /// Consumes the builder and constructs a [`CalculatedSpend`](crate::types::CalculatedSpend).
    pub fn build(self) -> crate::types::CalculatedSpend {
        crate::types::CalculatedSpend {
            actual_spend: self.actual_spend,
            forecasted_spend: self.forecasted_spend,
        }
    }
}
