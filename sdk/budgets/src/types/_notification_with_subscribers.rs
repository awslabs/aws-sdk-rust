// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A notification with subscribers. A notification can have one SNS subscriber and up to 10 email subscribers, for a total of 11 subscribers.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotificationWithSubscribers {
    /// <p>The notification that's associated with a budget.</p>
    pub notification: ::std::option::Option<crate::types::Notification>,
    /// <p>A list of subscribers who are subscribed to this notification.</p>
    pub subscribers: ::std::vec::Vec<crate::types::Subscriber>,
}
impl NotificationWithSubscribers {
    /// <p>The notification that's associated with a budget.</p>
    pub fn notification(&self) -> ::std::option::Option<&crate::types::Notification> {
        self.notification.as_ref()
    }
    /// <p>A list of subscribers who are subscribed to this notification.</p>
    pub fn subscribers(&self) -> &[crate::types::Subscriber] {
        use std::ops::Deref;
        self.subscribers.deref()
    }
}
impl NotificationWithSubscribers {
    /// Creates a new builder-style object to manufacture [`NotificationWithSubscribers`](crate::types::NotificationWithSubscribers).
    pub fn builder() -> crate::types::builders::NotificationWithSubscribersBuilder {
        crate::types::builders::NotificationWithSubscribersBuilder::default()
    }
}

/// A builder for [`NotificationWithSubscribers`](crate::types::NotificationWithSubscribers).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NotificationWithSubscribersBuilder {
    pub(crate) notification: ::std::option::Option<crate::types::Notification>,
    pub(crate) subscribers: ::std::option::Option<::std::vec::Vec<crate::types::Subscriber>>,
}
impl NotificationWithSubscribersBuilder {
    /// <p>The notification that's associated with a budget.</p>
    /// This field is required.
    pub fn notification(mut self, input: crate::types::Notification) -> Self {
        self.notification = ::std::option::Option::Some(input);
        self
    }
    /// <p>The notification that's associated with a budget.</p>
    pub fn set_notification(mut self, input: ::std::option::Option<crate::types::Notification>) -> Self {
        self.notification = input;
        self
    }
    /// <p>The notification that's associated with a budget.</p>
    pub fn get_notification(&self) -> &::std::option::Option<crate::types::Notification> {
        &self.notification
    }
    /// Appends an item to `subscribers`.
    ///
    /// To override the contents of this collection use [`set_subscribers`](Self::set_subscribers).
    ///
    /// <p>A list of subscribers who are subscribed to this notification.</p>
    pub fn subscribers(mut self, input: crate::types::Subscriber) -> Self {
        let mut v = self.subscribers.unwrap_or_default();
        v.push(input);
        self.subscribers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of subscribers who are subscribed to this notification.</p>
    pub fn set_subscribers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Subscriber>>) -> Self {
        self.subscribers = input;
        self
    }
    /// <p>A list of subscribers who are subscribed to this notification.</p>
    pub fn get_subscribers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Subscriber>> {
        &self.subscribers
    }
    /// Consumes the builder and constructs a [`NotificationWithSubscribers`](crate::types::NotificationWithSubscribers).
    /// This method will fail if any of the following fields are not set:
    /// - [`subscribers`](crate::types::builders::NotificationWithSubscribersBuilder::subscribers)
    pub fn build(self) -> ::std::result::Result<crate::types::NotificationWithSubscribers, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NotificationWithSubscribers {
            notification: self.notification,
            subscribers: self.subscribers.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "subscribers",
                    "subscribers was not specified but it is required when building NotificationWithSubscribers",
                )
            })?,
        })
    }
}
