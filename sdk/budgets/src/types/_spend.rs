// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The amount of cost or usage that's measured for a budget.</p>
/// <p>For example, a <code>Spend</code> for <code>3 GB</code> of S3 usage has the following parameters:</p>
/// <ul>
/// <li> <p>An <code>Amount</code> of <code>3</code> </p> </li>
/// <li> <p>A <code>unit</code> of <code>GB</code> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Spend {
    /// <p>The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold.</p>
    #[doc(hidden)]
    pub amount: std::option::Option<std::string::String>,
    /// <p>The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP.</p>
    #[doc(hidden)]
    pub unit: std::option::Option<std::string::String>,
}
impl Spend {
    /// <p>The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold.</p>
    pub fn amount(&self) -> std::option::Option<&str> {
        self.amount.as_deref()
    }
    /// <p>The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP.</p>
    pub fn unit(&self) -> std::option::Option<&str> {
        self.unit.as_deref()
    }
}
impl Spend {
    /// Creates a new builder-style object to manufacture [`Spend`](crate::types::Spend).
    pub fn builder() -> crate::types::builders::SpendBuilder {
        crate::types::builders::SpendBuilder::default()
    }
}

/// A builder for [`Spend`](crate::types::Spend).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SpendBuilder {
    pub(crate) amount: std::option::Option<std::string::String>,
    pub(crate) unit: std::option::Option<std::string::String>,
}
impl SpendBuilder {
    /// <p>The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold.</p>
    pub fn amount(mut self, input: impl Into<std::string::String>) -> Self {
        self.amount = Some(input.into());
        self
    }
    /// <p>The cost or usage amount that's associated with a budget forecast, actual spend, or budget threshold.</p>
    pub fn set_amount(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.amount = input;
        self
    }
    /// <p>The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP.</p>
    pub fn unit(mut self, input: impl Into<std::string::String>) -> Self {
        self.unit = Some(input.into());
        self
    }
    /// <p>The unit of measurement that's used for the budget forecast, actual spend, or budget threshold, such as USD or GBP.</p>
    pub fn set_unit(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`Spend`](crate::types::Spend).
    pub fn build(self) -> crate::types::Spend {
        crate::types::Spend {
            amount: self.amount,
            unit: self.unit,
        }
    }
}
