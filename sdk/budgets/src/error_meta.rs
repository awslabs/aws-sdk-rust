// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You are not authorized to use this operation with the given parameters.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>You've exceeded the notification or subscriber limit.</p>
    CreationLimitExceededException(crate::error::CreationLimitExceededException),
    /// <p>The budget name already exists. Budget names must be unique within an account.</p>
    DuplicateRecordException(crate::error::DuplicateRecordException),
    /// <p>The pagination token expired.</p>
    ExpiredNextTokenException(crate::error::ExpiredNextTokenException),
    /// <p>An error on the server occurred during the processing of your request. Try again later.</p>
    InternalErrorException(crate::error::InternalErrorException),
    /// <p>The pagination token is invalid.</p>
    InvalidNextTokenException(crate::error::InvalidNextTokenException),
    /// <p>An error on the client occurred. Typically, the cause is an invalid input value.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>We canâ€™t locate the resource that you specified.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p> The request was received and recognized by the server, but the server rejected that particular method for the requested resource. </p>
    ResourceLockedException(crate::error::ResourceLockedException),
    /// <p> The number of API requests has exceeded the maximum allowed API request throttling limit for the account. </p>
    ThrottlingException(crate::error::ThrottlingException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::CreationLimitExceededException(inner) => inner.fmt(f),
            Error::DuplicateRecordException(inner) => inner.fmt(f),
            Error::ExpiredNextTokenException(inner) => inner.fmt(f),
            Error::InternalErrorException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceLockedException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBudgetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateBudgetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBudgetError> for Error {
    fn from(err: crate::error::CreateBudgetError) -> Self {
        match err {
            crate::error::CreateBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateBudgetError::CreationLimitExceededException(inner) => {
                Error::CreationLimitExceededException(inner)
            }
            crate::error::CreateBudgetError::DuplicateRecordException(inner) => {
                Error::DuplicateRecordException(inner)
            }
            crate::error::CreateBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateBudgetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBudgetActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBudgetActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBudgetActionError> for Error {
    fn from(err: crate::error::CreateBudgetActionError) -> Self {
        match err {
            crate::error::CreateBudgetActionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateBudgetActionError::CreationLimitExceededException(inner) => {
                Error::CreationLimitExceededException(inner)
            }
            crate::error::CreateBudgetActionError::DuplicateRecordException(inner) => {
                Error::DuplicateRecordException(inner)
            }
            crate::error::CreateBudgetActionError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateBudgetActionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateBudgetActionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBudgetActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateNotificationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateNotificationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateNotificationError> for Error {
    fn from(err: crate::error::CreateNotificationError) -> Self {
        match err {
            crate::error::CreateNotificationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateNotificationError::CreationLimitExceededException(inner) => {
                Error::CreationLimitExceededException(inner)
            }
            crate::error::CreateNotificationError::DuplicateRecordException(inner) => {
                Error::DuplicateRecordException(inner)
            }
            crate::error::CreateNotificationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateNotificationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateNotificationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateNotificationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateNotificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSubscriberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSubscriberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSubscriberError> for Error {
    fn from(err: crate::error::CreateSubscriberError) -> Self {
        match err {
            crate::error::CreateSubscriberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateSubscriberError::CreationLimitExceededException(inner) => {
                Error::CreationLimitExceededException(inner)
            }
            crate::error::CreateSubscriberError::DuplicateRecordException(inner) => {
                Error::DuplicateRecordException(inner)
            }
            crate::error::CreateSubscriberError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateSubscriberError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateSubscriberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateSubscriberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSubscriberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBudgetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteBudgetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBudgetError> for Error {
    fn from(err: crate::error::DeleteBudgetError) -> Self {
        match err {
            crate::error::DeleteBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteBudgetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteBudgetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBudgetActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBudgetActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBudgetActionError> for Error {
    fn from(err: crate::error::DeleteBudgetActionError) -> Self {
        match err {
            crate::error::DeleteBudgetActionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteBudgetActionError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteBudgetActionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteBudgetActionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBudgetActionError::ResourceLockedException(inner) => {
                Error::ResourceLockedException(inner)
            }
            crate::error::DeleteBudgetActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteNotificationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteNotificationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteNotificationError> for Error {
    fn from(err: crate::error::DeleteNotificationError) -> Self {
        match err {
            crate::error::DeleteNotificationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteNotificationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteNotificationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteNotificationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteNotificationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteNotificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSubscriberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSubscriberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSubscriberError> for Error {
    fn from(err: crate::error::DeleteSubscriberError) -> Self {
        match err {
            crate::error::DeleteSubscriberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteSubscriberError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteSubscriberError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteSubscriberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSubscriberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSubscriberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBudgetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeBudgetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBudgetError> for Error {
    fn from(err: crate::error::DescribeBudgetError) -> Self {
        match err {
            crate::error::DescribeBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeBudgetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeBudgetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBudgetActionError> for Error {
    fn from(err: crate::error::DescribeBudgetActionError) -> Self {
        match err {
            crate::error::DescribeBudgetActionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeBudgetActionError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeBudgetActionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeBudgetActionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBudgetActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionHistoriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionHistoriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBudgetActionHistoriesError> for Error {
    fn from(err: crate::error::DescribeBudgetActionHistoriesError) -> Self {
        match err {
            crate::error::DescribeBudgetActionHistoriesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeBudgetActionHistoriesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeBudgetActionHistoriesError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeBudgetActionHistoriesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeBudgetActionHistoriesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBudgetActionHistoriesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBudgetActionHistoriesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionsForAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeBudgetActionsForAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBudgetActionsForAccountError> for Error {
    fn from(err: crate::error::DescribeBudgetActionsForAccountError) -> Self {
        match err {
            crate::error::DescribeBudgetActionsForAccountError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeBudgetActionsForAccountError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeBudgetActionsForAccountError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeBudgetActionsForAccountError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DescribeBudgetActionsForAccountError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBudgetActionsForAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeBudgetActionsForBudgetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeBudgetActionsForBudgetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBudgetActionsForBudgetError> for Error {
    fn from(err: crate::error::DescribeBudgetActionsForBudgetError) -> Self {
        match err {
            crate::error::DescribeBudgetActionsForBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeBudgetActionsForBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeBudgetActionsForBudgetError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeBudgetActionsForBudgetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeBudgetActionsForBudgetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBudgetActionsForBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBudgetActionsForBudgetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeBudgetNotificationsForAccountError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeBudgetNotificationsForAccountError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBudgetNotificationsForAccountError> for Error {
    fn from(err: crate::error::DescribeBudgetNotificationsForAccountError) -> Self {
        match err {
            crate::error::DescribeBudgetNotificationsForAccountError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::error::DescribeBudgetNotificationsForAccountError::ExpiredNextTokenException(
                inner,
            ) => Error::ExpiredNextTokenException(inner),
            crate::error::DescribeBudgetNotificationsForAccountError::InternalErrorException(
                inner,
            ) => Error::InternalErrorException(inner),
            crate::error::DescribeBudgetNotificationsForAccountError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeBudgetNotificationsForAccountError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DescribeBudgetNotificationsForAccountError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBudgetNotificationsForAccountError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::error::DescribeBudgetNotificationsForAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeBudgetPerformanceHistoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeBudgetPerformanceHistoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBudgetPerformanceHistoryError> for Error {
    fn from(err: crate::error::DescribeBudgetPerformanceHistoryError) -> Self {
        match err {
            crate::error::DescribeBudgetPerformanceHistoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeBudgetPerformanceHistoryError::ExpiredNextTokenException(
                inner,
            ) => Error::ExpiredNextTokenException(inner),
            crate::error::DescribeBudgetPerformanceHistoryError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeBudgetPerformanceHistoryError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeBudgetPerformanceHistoryError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DescribeBudgetPerformanceHistoryError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBudgetPerformanceHistoryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBudgetPerformanceHistoryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBudgetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeBudgetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBudgetsError> for Error {
    fn from(err: crate::error::DescribeBudgetsError) -> Self {
        match err {
            crate::error::DescribeBudgetsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeBudgetsError::ExpiredNextTokenException(inner) => {
                Error::ExpiredNextTokenException(inner)
            }
            crate::error::DescribeBudgetsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeBudgetsError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeBudgetsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeBudgetsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeBudgetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeBudgetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeNotificationsForBudgetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeNotificationsForBudgetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeNotificationsForBudgetError> for Error {
    fn from(err: crate::error::DescribeNotificationsForBudgetError) -> Self {
        match err {
            crate::error::DescribeNotificationsForBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeNotificationsForBudgetError::ExpiredNextTokenException(inner) => {
                Error::ExpiredNextTokenException(inner)
            }
            crate::error::DescribeNotificationsForBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeNotificationsForBudgetError::InvalidNextTokenException(inner) => {
                Error::InvalidNextTokenException(inner)
            }
            crate::error::DescribeNotificationsForBudgetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeNotificationsForBudgetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeNotificationsForBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeNotificationsForBudgetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeSubscribersForNotificationError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeSubscribersForNotificationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSubscribersForNotificationError> for Error {
    fn from(err: crate::error::DescribeSubscribersForNotificationError) -> Self {
        match err {
            crate::error::DescribeSubscribersForNotificationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeSubscribersForNotificationError::ExpiredNextTokenException(
                inner,
            ) => Error::ExpiredNextTokenException(inner),
            crate::error::DescribeSubscribersForNotificationError::InternalErrorException(
                inner,
            ) => Error::InternalErrorException(inner),
            crate::error::DescribeSubscribersForNotificationError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::error::DescribeSubscribersForNotificationError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::DescribeSubscribersForNotificationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DescribeSubscribersForNotificationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSubscribersForNotificationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExecuteBudgetActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ExecuteBudgetActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExecuteBudgetActionError> for Error {
    fn from(err: crate::error::ExecuteBudgetActionError) -> Self {
        match err {
            crate::error::ExecuteBudgetActionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ExecuteBudgetActionError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ExecuteBudgetActionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ExecuteBudgetActionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ExecuteBudgetActionError::ResourceLockedException(inner) => {
                Error::ResourceLockedException(inner)
            }
            crate::error::ExecuteBudgetActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ExecuteBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBudgetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateBudgetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBudgetError> for Error {
    fn from(err: crate::error::UpdateBudgetError) -> Self {
        match err {
            crate::error::UpdateBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateBudgetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateBudgetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBudgetActionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBudgetActionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBudgetActionError> for Error {
    fn from(err: crate::error::UpdateBudgetActionError) -> Self {
        match err {
            crate::error::UpdateBudgetActionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateBudgetActionError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateBudgetActionError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateBudgetActionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBudgetActionError::ResourceLockedException(inner) => {
                Error::ResourceLockedException(inner)
            }
            crate::error::UpdateBudgetActionError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNotificationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateNotificationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateNotificationError> for Error {
    fn from(err: crate::error::UpdateNotificationError) -> Self {
        match err {
            crate::error::UpdateNotificationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateNotificationError::DuplicateRecordException(inner) => {
                Error::DuplicateRecordException(inner)
            }
            crate::error::UpdateNotificationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateNotificationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateNotificationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateNotificationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateNotificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSubscriberError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSubscriberError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSubscriberError> for Error {
    fn from(err: crate::error::UpdateSubscriberError) -> Self {
        match err {
            crate::error::UpdateSubscriberError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateSubscriberError::DuplicateRecordException(inner) => {
                Error::DuplicateRecordException(inner)
            }
            crate::error::UpdateSubscriberError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateSubscriberError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateSubscriberError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateSubscriberError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateSubscriberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::CreationLimitExceededException(e) => e.request_id(),
            Self::DuplicateRecordException(e) => e.request_id(),
            Self::ExpiredNextTokenException(e) => e.request_id(),
            Self::InternalErrorException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceLockedException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
