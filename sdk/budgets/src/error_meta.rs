// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You are not authorized to use this operation with the given parameters.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>You've exceeded the notification or subscriber limit.</p>
    CreationLimitExceededException(crate::types::error::CreationLimitExceededException),
    /// <p>The budget name already exists. Budget names must be unique within an account.</p>
    DuplicateRecordException(crate::types::error::DuplicateRecordException),
    /// <p>The pagination token expired.</p>
    ExpiredNextTokenException(crate::types::error::ExpiredNextTokenException),
    /// <p>An error on the server occurred during the processing of your request. Try again later.</p>
    InternalErrorException(crate::types::error::InternalErrorException),
    /// <p>The pagination token is invalid.</p>
    InvalidNextTokenException(crate::types::error::InvalidNextTokenException),
    /// <p>An error on the client occurred. Typically, the cause is an invalid input value.</p>
    InvalidParameterException(crate::types::error::InvalidParameterException),
    /// <p>We canâ€™t locate the resource that you specified.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p> The request was received and recognized by the server, but the server rejected that particular method for the requested resource. </p>
    ResourceLockedException(crate::types::error::ResourceLockedException),
    /// <p> The number of API requests has exceeded the maximum allowed API request throttling limit for the account. </p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::CreationLimitExceededException(inner) => inner.fmt(f),
            Error::DuplicateRecordException(inner) => inner.fmt(f),
            Error::ExpiredNextTokenException(inner) => inner.fmt(f),
            Error::InternalErrorException(inner) => inner.fmt(f),
            Error::InvalidNextTokenException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceLockedException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_budget::CreateBudgetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_budget::CreateBudgetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_budget::CreateBudgetError> for Error {
    fn from(err: crate::operation::create_budget::CreateBudgetError) -> Self {
        match err {
            crate::operation::create_budget::CreateBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_budget::CreateBudgetError::CreationLimitExceededException(
                inner,
            ) => Error::CreationLimitExceededException(inner),
            crate::operation::create_budget::CreateBudgetError::DuplicateRecordException(inner) => {
                Error::DuplicateRecordException(inner)
            }
            crate::operation::create_budget::CreateBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::create_budget::CreateBudgetError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::operation::create_budget::CreateBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_budget::CreateBudgetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_budget_action::CreateBudgetActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_budget_action::CreateBudgetActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_budget_action::CreateBudgetActionError> for Error {
    fn from(err: crate::operation::create_budget_action::CreateBudgetActionError) -> Self {
        match err {
            crate::operation::create_budget_action::CreateBudgetActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_budget_action::CreateBudgetActionError::CreationLimitExceededException(inner) => Error::CreationLimitExceededException(inner),
            crate::operation::create_budget_action::CreateBudgetActionError::DuplicateRecordException(inner) => Error::DuplicateRecordException(inner),
            crate::operation::create_budget_action::CreateBudgetActionError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::create_budget_action::CreateBudgetActionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_budget_action::CreateBudgetActionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_budget_action::CreateBudgetActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_budget_action::CreateBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_notification::CreateNotificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_notification::CreateNotificationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_notification::CreateNotificationError> for Error {
    fn from(err: crate::operation::create_notification::CreateNotificationError) -> Self {
        match err {
            crate::operation::create_notification::CreateNotificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_notification::CreateNotificationError::CreationLimitExceededException(inner) => Error::CreationLimitExceededException(inner),
            crate::operation::create_notification::CreateNotificationError::DuplicateRecordException(inner) => Error::DuplicateRecordException(inner),
            crate::operation::create_notification::CreateNotificationError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::create_notification::CreateNotificationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_notification::CreateNotificationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_notification::CreateNotificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_notification::CreateNotificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_subscriber::CreateSubscriberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_subscriber::CreateSubscriberError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_subscriber::CreateSubscriberError> for Error {
    fn from(err: crate::operation::create_subscriber::CreateSubscriberError) -> Self {
        match err {
            crate::operation::create_subscriber::CreateSubscriberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_subscriber::CreateSubscriberError::CreationLimitExceededException(inner) => Error::CreationLimitExceededException(inner),
            crate::operation::create_subscriber::CreateSubscriberError::DuplicateRecordException(inner) => Error::DuplicateRecordException(inner),
            crate::operation::create_subscriber::CreateSubscriberError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::create_subscriber::CreateSubscriberError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::create_subscriber::CreateSubscriberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_subscriber::CreateSubscriberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_subscriber::CreateSubscriberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_budget::DeleteBudgetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_budget::DeleteBudgetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_budget::DeleteBudgetError> for Error {
    fn from(err: crate::operation::delete_budget::DeleteBudgetError) -> Self {
        match err {
            crate::operation::delete_budget::DeleteBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_budget::DeleteBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::delete_budget::DeleteBudgetError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::operation::delete_budget::DeleteBudgetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_budget::DeleteBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_budget::DeleteBudgetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_budget_action::DeleteBudgetActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_budget_action::DeleteBudgetActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_budget_action::DeleteBudgetActionError> for Error {
    fn from(err: crate::operation::delete_budget_action::DeleteBudgetActionError) -> Self {
        match err {
            crate::operation::delete_budget_action::DeleteBudgetActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_budget_action::DeleteBudgetActionError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::delete_budget_action::DeleteBudgetActionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_budget_action::DeleteBudgetActionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_budget_action::DeleteBudgetActionError::ResourceLockedException(inner) => Error::ResourceLockedException(inner),
            crate::operation::delete_budget_action::DeleteBudgetActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_budget_action::DeleteBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_notification::DeleteNotificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_notification::DeleteNotificationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_notification::DeleteNotificationError> for Error {
    fn from(err: crate::operation::delete_notification::DeleteNotificationError) -> Self {
        match err {
            crate::operation::delete_notification::DeleteNotificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_notification::DeleteNotificationError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::delete_notification::DeleteNotificationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_notification::DeleteNotificationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_notification::DeleteNotificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_notification::DeleteNotificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_subscriber::DeleteSubscriberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_subscriber::DeleteSubscriberError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_subscriber::DeleteSubscriberError> for Error {
    fn from(err: crate::operation::delete_subscriber::DeleteSubscriberError) -> Self {
        match err {
            crate::operation::delete_subscriber::DeleteSubscriberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_subscriber::DeleteSubscriberError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::delete_subscriber::DeleteSubscriberError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::delete_subscriber::DeleteSubscriberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_subscriber::DeleteSubscriberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_subscriber::DeleteSubscriberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_budget::DescribeBudgetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_budget::DescribeBudgetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_budget::DescribeBudgetError> for Error {
    fn from(err: crate::operation::describe_budget::DescribeBudgetError) -> Self {
        match err {
            crate::operation::describe_budget::DescribeBudgetError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_budget::DescribeBudgetError::InternalErrorException(
                inner,
            ) => Error::InternalErrorException(inner),
            crate::operation::describe_budget::DescribeBudgetError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::operation::describe_budget::DescribeBudgetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_budget::DescribeBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_budget::DescribeBudgetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_budget_action::DescribeBudgetActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_budget_action::DescribeBudgetActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_budget_action::DescribeBudgetActionError> for Error {
    fn from(err: crate::operation::describe_budget_action::DescribeBudgetActionError) -> Self {
        match err {
            crate::operation::describe_budget_action::DescribeBudgetActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_budget_action::DescribeBudgetActionError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::describe_budget_action::DescribeBudgetActionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_budget_action::DescribeBudgetActionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_budget_action::DescribeBudgetActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_budget_action::DescribeBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError>
    for Error
{
    fn from(
        err: crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError,
    ) -> Self {
        match err {
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_budget_action_histories::DescribeBudgetActionHistoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError,
    > for Error
{
    fn from(
        err: crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError,
    ) -> Self {
        match err {
            crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_budget_actions_for_account::DescribeBudgetActionsForAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError>
    for Error
{
    fn from(
        err: crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError,
    ) -> Self {
        match err {
            crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_budget_actions_for_budget::DescribeBudgetActionsForBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError> for Error {
    fn from(err: crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError) -> Self {
        match err {
            crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError::ExpiredNextTokenException(inner) => Error::ExpiredNextTokenException(inner),
            crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_budget_notifications_for_account::DescribeBudgetNotificationsForAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError> for Error {
    fn from(err: crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError) -> Self {
        match err {
            crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError::ExpiredNextTokenException(inner) => Error::ExpiredNextTokenException(inner),
            crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_budget_performance_history::DescribeBudgetPerformanceHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_budgets::DescribeBudgetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_budgets::DescribeBudgetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_budgets::DescribeBudgetsError> for Error {
    fn from(err: crate::operation::describe_budgets::DescribeBudgetsError) -> Self {
        match err {
            crate::operation::describe_budgets::DescribeBudgetsError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_budgets::DescribeBudgetsError::ExpiredNextTokenException(
                inner,
            ) => Error::ExpiredNextTokenException(inner),
            crate::operation::describe_budgets::DescribeBudgetsError::InternalErrorException(
                inner,
            ) => Error::InternalErrorException(inner),
            crate::operation::describe_budgets::DescribeBudgetsError::InvalidNextTokenException(
                inner,
            ) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_budgets::DescribeBudgetsError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::operation::describe_budgets::DescribeBudgetsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::describe_budgets::DescribeBudgetsError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::describe_budgets::DescribeBudgetsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError>
    for Error
{
    fn from(
        err: crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError,
    ) -> Self {
        match err {
            crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError::ExpiredNextTokenException(inner) => Error::ExpiredNextTokenException(inner),
            crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_notifications_for_budget::DescribeNotificationsForBudgetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError> for Error {
    fn from(err: crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError) -> Self {
        match err {
            crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError::ExpiredNextTokenException(inner) => Error::ExpiredNextTokenException(inner),
            crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError::InvalidNextTokenException(inner) => Error::InvalidNextTokenException(inner),
            crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_subscribers_for_notification::DescribeSubscribersForNotificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::execute_budget_action::ExecuteBudgetActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::execute_budget_action::ExecuteBudgetActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::execute_budget_action::ExecuteBudgetActionError> for Error {
    fn from(err: crate::operation::execute_budget_action::ExecuteBudgetActionError) -> Self {
        match err {
            crate::operation::execute_budget_action::ExecuteBudgetActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::execute_budget_action::ExecuteBudgetActionError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::execute_budget_action::ExecuteBudgetActionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::execute_budget_action::ExecuteBudgetActionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::execute_budget_action::ExecuteBudgetActionError::ResourceLockedException(inner) => Error::ResourceLockedException(inner),
            crate::operation::execute_budget_action::ExecuteBudgetActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::execute_budget_action::ExecuteBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_budget::UpdateBudgetError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_budget::UpdateBudgetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_budget::UpdateBudgetError> for Error {
    fn from(err: crate::operation::update_budget::UpdateBudgetError) -> Self {
        match err {
            crate::operation::update_budget::UpdateBudgetError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_budget::UpdateBudgetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::update_budget::UpdateBudgetError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::operation::update_budget::UpdateBudgetError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_budget::UpdateBudgetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_budget::UpdateBudgetError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_budget_action::UpdateBudgetActionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_budget_action::UpdateBudgetActionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_budget_action::UpdateBudgetActionError> for Error {
    fn from(err: crate::operation::update_budget_action::UpdateBudgetActionError) -> Self {
        match err {
            crate::operation::update_budget_action::UpdateBudgetActionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_budget_action::UpdateBudgetActionError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::update_budget_action::UpdateBudgetActionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::update_budget_action::UpdateBudgetActionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_budget_action::UpdateBudgetActionError::ResourceLockedException(inner) => Error::ResourceLockedException(inner),
            crate::operation::update_budget_action::UpdateBudgetActionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_budget_action::UpdateBudgetActionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_notification::UpdateNotificationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_notification::UpdateNotificationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_notification::UpdateNotificationError> for Error {
    fn from(err: crate::operation::update_notification::UpdateNotificationError) -> Self {
        match err {
            crate::operation::update_notification::UpdateNotificationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_notification::UpdateNotificationError::DuplicateRecordException(inner) => Error::DuplicateRecordException(inner),
            crate::operation::update_notification::UpdateNotificationError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::update_notification::UpdateNotificationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::update_notification::UpdateNotificationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_notification::UpdateNotificationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_notification::UpdateNotificationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_subscriber::UpdateSubscriberError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_subscriber::UpdateSubscriberError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_subscriber::UpdateSubscriberError> for Error {
    fn from(err: crate::operation::update_subscriber::UpdateSubscriberError) -> Self {
        match err {
            crate::operation::update_subscriber::UpdateSubscriberError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_subscriber::UpdateSubscriberError::DuplicateRecordException(inner) => Error::DuplicateRecordException(inner),
            crate::operation::update_subscriber::UpdateSubscriberError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::update_subscriber::UpdateSubscriberError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::operation::update_subscriber::UpdateSubscriberError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_subscriber::UpdateSubscriberError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_subscriber::UpdateSubscriberError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::CreationLimitExceededException(e) => e.request_id(),
            Self::DuplicateRecordException(e) => e.request_id(),
            Self::ExpiredNextTokenException(e) => e.request_id(),
            Self::InternalErrorException(e) => e.request_id(),
            Self::InvalidNextTokenException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceLockedException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
