// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_budget_action_output_correct_errors(
    mut builder: crate::operation::create_budget_action::builders::CreateBudgetActionOutputBuilder,
) -> crate::operation::create_budget_action::builders::CreateBudgetActionOutputBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.budget_name.is_none() {
        builder.budget_name = Some(Default::default())
    }
    if builder.action_id.is_none() {
        builder.action_id = Some(Default::default())
    }
    builder
}

pub(crate) fn delete_budget_action_output_correct_errors(
    mut builder: crate::operation::delete_budget_action::builders::DeleteBudgetActionOutputBuilder,
) -> crate::operation::delete_budget_action::builders::DeleteBudgetActionOutputBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.budget_name.is_none() {
        builder.budget_name = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = {
            let builder = crate::types::builders::ActionBuilder::default();
            crate::serde_util::action_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_budget_action_output_correct_errors(
    mut builder: crate::operation::describe_budget_action::builders::DescribeBudgetActionOutputBuilder,
) -> crate::operation::describe_budget_action::builders::DescribeBudgetActionOutputBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.budget_name.is_none() {
        builder.budget_name = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = {
            let builder = crate::types::builders::ActionBuilder::default();
            crate::serde_util::action_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn describe_budget_action_histories_output_correct_errors(
    mut builder: crate::operation::describe_budget_action_histories::builders::DescribeBudgetActionHistoriesOutputBuilder,
) -> crate::operation::describe_budget_action_histories::builders::DescribeBudgetActionHistoriesOutputBuilder {
    if builder.action_histories.is_none() {
        builder.action_histories = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_budget_actions_for_account_output_correct_errors(
    mut builder: crate::operation::describe_budget_actions_for_account::builders::DescribeBudgetActionsForAccountOutputBuilder,
) -> crate::operation::describe_budget_actions_for_account::builders::DescribeBudgetActionsForAccountOutputBuilder {
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_budget_actions_for_budget_output_correct_errors(
    mut builder: crate::operation::describe_budget_actions_for_budget::builders::DescribeBudgetActionsForBudgetOutputBuilder,
) -> crate::operation::describe_budget_actions_for_budget::builders::DescribeBudgetActionsForBudgetOutputBuilder {
    if builder.actions.is_none() {
        builder.actions = Some(Default::default())
    }
    builder
}

pub(crate) fn execute_budget_action_output_correct_errors(
    mut builder: crate::operation::execute_budget_action::builders::ExecuteBudgetActionOutputBuilder,
) -> crate::operation::execute_budget_action::builders::ExecuteBudgetActionOutputBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.budget_name.is_none() {
        builder.budget_name = Some(Default::default())
    }
    if builder.action_id.is_none() {
        builder.action_id = Some(Default::default())
    }
    if builder.execution_type.is_none() {
        builder.execution_type = "no value was set".parse::<crate::types::ExecutionType>().ok()
    }
    builder
}

pub(crate) fn update_budget_action_output_correct_errors(
    mut builder: crate::operation::update_budget_action::builders::UpdateBudgetActionOutputBuilder,
) -> crate::operation::update_budget_action::builders::UpdateBudgetActionOutputBuilder {
    if builder.account_id.is_none() {
        builder.account_id = Some(Default::default())
    }
    if builder.budget_name.is_none() {
        builder.budget_name = Some(Default::default())
    }
    if builder.old_action.is_none() {
        builder.old_action = {
            let builder = crate::types::builders::ActionBuilder::default();
            crate::serde_util::action_correct_errors(builder).build().ok()
        }
    }
    if builder.new_action.is_none() {
        builder.new_action = {
            let builder = crate::types::builders::ActionBuilder::default();
            crate::serde_util::action_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn action_correct_errors(mut builder: crate::types::builders::ActionBuilder) -> crate::types::builders::ActionBuilder {
    if builder.action_id.is_none() {
        builder.action_id = Some(Default::default())
    }
    if builder.budget_name.is_none() {
        builder.budget_name = Some(Default::default())
    }
    if builder.notification_type.is_none() {
        builder.notification_type = "no value was set".parse::<crate::types::NotificationType>().ok()
    }
    if builder.action_type.is_none() {
        builder.action_type = "no value was set".parse::<crate::types::ActionType>().ok()
    }
    if builder.action_threshold.is_none() {
        builder.action_threshold = {
            let builder = crate::types::builders::ActionThresholdBuilder::default();
            crate::serde_util::action_threshold_correct_errors(builder).build().ok()
        }
    }
    if builder.definition.is_none() {
        builder.definition = {
            let builder = crate::types::builders::DefinitionBuilder::default();
            Some(builder.build())
        }
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.approval_model.is_none() {
        builder.approval_model = "no value was set".parse::<crate::types::ApprovalModel>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ActionStatus>().ok()
    }
    if builder.subscribers.is_none() {
        builder.subscribers = Some(Default::default())
    }
    builder
}

pub(crate) fn budget_correct_errors(mut builder: crate::types::builders::BudgetBuilder) -> crate::types::builders::BudgetBuilder {
    if builder.budget_name.is_none() {
        builder.budget_name = Some(Default::default())
    }
    if builder.time_unit.is_none() {
        builder.time_unit = "no value was set".parse::<crate::types::TimeUnit>().ok()
    }
    if builder.budget_type.is_none() {
        builder.budget_type = "no value was set".parse::<crate::types::BudgetType>().ok()
    }
    builder
}

pub(crate) fn action_threshold_correct_errors(
    mut builder: crate::types::builders::ActionThresholdBuilder,
) -> crate::types::builders::ActionThresholdBuilder {
    if builder.action_threshold_value.is_none() {
        builder.action_threshold_value = Some(Default::default())
    }
    if builder.action_threshold_type.is_none() {
        builder.action_threshold_type = "no value was set".parse::<crate::types::ThresholdType>().ok()
    }
    builder
}

pub(crate) fn action_history_correct_errors(
    mut builder: crate::types::builders::ActionHistoryBuilder,
) -> crate::types::builders::ActionHistoryBuilder {
    if builder.timestamp.is_none() {
        builder.timestamp = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ActionStatus>().ok()
    }
    if builder.event_type.is_none() {
        builder.event_type = "no value was set".parse::<crate::types::EventType>().ok()
    }
    if builder.action_history_details.is_none() {
        builder.action_history_details = {
            let builder = crate::types::builders::ActionHistoryDetailsBuilder::default();
            crate::serde_util::action_history_details_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn auto_adjust_data_correct_errors(
    mut builder: crate::types::builders::AutoAdjustDataBuilder,
) -> crate::types::builders::AutoAdjustDataBuilder {
    if builder.auto_adjust_type.is_none() {
        builder.auto_adjust_type = "no value was set".parse::<crate::types::AutoAdjustType>().ok()
    }
    builder
}

pub(crate) fn calculated_spend_correct_errors(
    mut builder: crate::types::builders::CalculatedSpendBuilder,
) -> crate::types::builders::CalculatedSpendBuilder {
    if builder.actual_spend.is_none() {
        builder.actual_spend = {
            let builder = crate::types::builders::SpendBuilder::default();
            crate::serde_util::spend_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn notification_correct_errors(mut builder: crate::types::builders::NotificationBuilder) -> crate::types::builders::NotificationBuilder {
    if builder.notification_type.is_none() {
        builder.notification_type = "no value was set".parse::<crate::types::NotificationType>().ok()
    }
    if builder.comparison_operator.is_none() {
        builder.comparison_operator = "no value was set".parse::<crate::types::ComparisonOperator>().ok()
    }
    if builder.threshold.is_none() {
        builder.threshold = Some(Default::default())
    }
    builder
}

pub(crate) fn spend_correct_errors(mut builder: crate::types::builders::SpendBuilder) -> crate::types::builders::SpendBuilder {
    if builder.amount.is_none() {
        builder.amount = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = Some(Default::default())
    }
    builder
}

pub(crate) fn subscriber_correct_errors(mut builder: crate::types::builders::SubscriberBuilder) -> crate::types::builders::SubscriberBuilder {
    if builder.subscription_type.is_none() {
        builder.subscription_type = "no value was set".parse::<crate::types::SubscriptionType>().ok()
    }
    if builder.address.is_none() {
        builder.address = Some(Default::default())
    }
    builder
}

pub(crate) fn action_history_details_correct_errors(
    mut builder: crate::types::builders::ActionHistoryDetailsBuilder,
) -> crate::types::builders::ActionHistoryDetailsBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = {
            let builder = crate::types::builders::ActionBuilder::default();
            crate::serde_util::action_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn historical_options_correct_errors(
    mut builder: crate::types::builders::HistoricalOptionsBuilder,
) -> crate::types::builders::HistoricalOptionsBuilder {
    if builder.budget_adjustment_period.is_none() {
        builder.budget_adjustment_period = Some(Default::default())
    }
    builder
}

pub(crate) fn iam_action_definition_correct_errors(
    mut builder: crate::types::builders::IamActionDefinitionBuilder,
) -> crate::types::builders::IamActionDefinitionBuilder {
    if builder.policy_arn.is_none() {
        builder.policy_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn scp_action_definition_correct_errors(
    mut builder: crate::types::builders::ScpActionDefinitionBuilder,
) -> crate::types::builders::ScpActionDefinitionBuilder {
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    if builder.target_ids.is_none() {
        builder.target_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn ssm_action_definition_correct_errors(
    mut builder: crate::types::builders::SsmActionDefinitionBuilder,
) -> crate::types::builders::SsmActionDefinitionBuilder {
    if builder.action_sub_type.is_none() {
        builder.action_sub_type = "no value was set".parse::<crate::types::ActionSubType>().ok()
    }
    if builder.region.is_none() {
        builder.region = Some(Default::default())
    }
    if builder.instance_ids.is_none() {
        builder.instance_ids = Some(Default::default())
    }
    builder
}
