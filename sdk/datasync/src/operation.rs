// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CancelTaskExecution`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`cancel_task_execution`](crate::client::fluent_builders::CancelTaskExecution).
///
/// `ParseStrictResponse` impl for `CancelTaskExecution`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CancelTaskExecution {
    _private: (),
}
impl CancelTaskExecution {
    /// Creates a new builder-style object to manufacture [`CancelTaskExecutionInput`](crate::input::CancelTaskExecutionInput).
    pub fn builder() -> crate::input::cancel_task_execution_input::Builder {
        crate::input::cancel_task_execution_input::Builder::default()
    }
    /// Creates a new `CancelTaskExecution` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CancelTaskExecution {
    type Output = std::result::Result<
        crate::output::CancelTaskExecutionOutput,
        crate::error::CancelTaskExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_cancel_task_execution::de_cancel_task_execution_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_cancel_task_execution::de_cancel_task_execution_http_response(response)
        }
    }
}

/// Operation shape for `CreateAgent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_agent`](crate::client::fluent_builders::CreateAgent).
///
/// `ParseStrictResponse` impl for `CreateAgent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateAgent {
    _private: (),
}
impl CreateAgent {
    /// Creates a new builder-style object to manufacture [`CreateAgentInput`](crate::input::CreateAgentInput).
    pub fn builder() -> crate::input::create_agent_input::Builder {
        crate::input::create_agent_input::Builder::default()
    }
    /// Creates a new `CreateAgent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateAgent {
    type Output =
        std::result::Result<crate::output::CreateAgentOutput, crate::error::CreateAgentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_agent::de_create_agent_http_error(response)
        } else {
            crate::protocol_serde::shape_create_agent::de_create_agent_http_response(response)
        }
    }
}

/// Operation shape for `CreateLocationEfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_efs`](crate::client::fluent_builders::CreateLocationEfs).
///
/// `ParseStrictResponse` impl for `CreateLocationEfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationEfs {
    _private: (),
}
impl CreateLocationEfs {
    /// Creates a new builder-style object to manufacture [`CreateLocationEfsInput`](crate::input::CreateLocationEfsInput).
    pub fn builder() -> crate::input::create_location_efs_input::Builder {
        crate::input::create_location_efs_input::Builder::default()
    }
    /// Creates a new `CreateLocationEfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationEfs {
    type Output = std::result::Result<
        crate::output::CreateLocationEfsOutput,
        crate::error::CreateLocationEfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_efs::de_create_location_efs_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_location_efs::de_create_location_efs_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateLocationFsxLustre`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_fsx_lustre`](crate::client::fluent_builders::CreateLocationFsxLustre).
///
/// `ParseStrictResponse` impl for `CreateLocationFsxLustre`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationFsxLustre {
    _private: (),
}
impl CreateLocationFsxLustre {
    /// Creates a new builder-style object to manufacture [`CreateLocationFsxLustreInput`](crate::input::CreateLocationFsxLustreInput).
    pub fn builder() -> crate::input::create_location_fsx_lustre_input::Builder {
        crate::input::create_location_fsx_lustre_input::Builder::default()
    }
    /// Creates a new `CreateLocationFsxLustre` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationFsxLustre {
    type Output = std::result::Result<
        crate::output::CreateLocationFsxLustreOutput,
        crate::error::CreateLocationFsxLustreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_fsx_lustre::de_create_location_fsx_lustre_http_error(response)
        } else {
            crate::protocol_serde::shape_create_location_fsx_lustre::de_create_location_fsx_lustre_http_response(response)
        }
    }
}

/// Operation shape for `CreateLocationFsxOntap`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_fsx_ontap`](crate::client::fluent_builders::CreateLocationFsxOntap).
///
/// `ParseStrictResponse` impl for `CreateLocationFsxOntap`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationFsxOntap {
    _private: (),
}
impl CreateLocationFsxOntap {
    /// Creates a new builder-style object to manufacture [`CreateLocationFsxOntapInput`](crate::input::CreateLocationFsxOntapInput).
    pub fn builder() -> crate::input::create_location_fsx_ontap_input::Builder {
        crate::input::create_location_fsx_ontap_input::Builder::default()
    }
    /// Creates a new `CreateLocationFsxOntap` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationFsxOntap {
    type Output = std::result::Result<
        crate::output::CreateLocationFsxOntapOutput,
        crate::error::CreateLocationFsxOntapError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_fsx_ontap::de_create_location_fsx_ontap_http_error(response)
        } else {
            crate::protocol_serde::shape_create_location_fsx_ontap::de_create_location_fsx_ontap_http_response(response)
        }
    }
}

/// Operation shape for `CreateLocationFsxOpenZfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_fsx_open_zfs`](crate::client::fluent_builders::CreateLocationFsxOpenZfs).
///
/// `ParseStrictResponse` impl for `CreateLocationFsxOpenZfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationFsxOpenZfs {
    _private: (),
}
impl CreateLocationFsxOpenZfs {
    /// Creates a new builder-style object to manufacture [`CreateLocationFsxOpenZfsInput`](crate::input::CreateLocationFsxOpenZfsInput).
    pub fn builder() -> crate::input::create_location_fsx_open_zfs_input::Builder {
        crate::input::create_location_fsx_open_zfs_input::Builder::default()
    }
    /// Creates a new `CreateLocationFsxOpenZfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationFsxOpenZfs {
    type Output = std::result::Result<
        crate::output::CreateLocationFsxOpenZfsOutput,
        crate::error::CreateLocationFsxOpenZfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_fsx_open_zfs::de_create_location_fsx_open_zfs_http_error(response)
        } else {
            crate::protocol_serde::shape_create_location_fsx_open_zfs::de_create_location_fsx_open_zfs_http_response(response)
        }
    }
}

/// Operation shape for `CreateLocationFsxWindows`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_fsx_windows`](crate::client::fluent_builders::CreateLocationFsxWindows).
///
/// `ParseStrictResponse` impl for `CreateLocationFsxWindows`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationFsxWindows {
    _private: (),
}
impl CreateLocationFsxWindows {
    /// Creates a new builder-style object to manufacture [`CreateLocationFsxWindowsInput`](crate::input::CreateLocationFsxWindowsInput).
    pub fn builder() -> crate::input::create_location_fsx_windows_input::Builder {
        crate::input::create_location_fsx_windows_input::Builder::default()
    }
    /// Creates a new `CreateLocationFsxWindows` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationFsxWindows {
    type Output = std::result::Result<
        crate::output::CreateLocationFsxWindowsOutput,
        crate::error::CreateLocationFsxWindowsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_fsx_windows::de_create_location_fsx_windows_http_error(response)
        } else {
            crate::protocol_serde::shape_create_location_fsx_windows::de_create_location_fsx_windows_http_response(response)
        }
    }
}

/// Operation shape for `CreateLocationHdfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_hdfs`](crate::client::fluent_builders::CreateLocationHdfs).
///
/// `ParseStrictResponse` impl for `CreateLocationHdfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationHdfs {
    _private: (),
}
impl CreateLocationHdfs {
    /// Creates a new builder-style object to manufacture [`CreateLocationHdfsInput`](crate::input::CreateLocationHdfsInput).
    pub fn builder() -> crate::input::create_location_hdfs_input::Builder {
        crate::input::create_location_hdfs_input::Builder::default()
    }
    /// Creates a new `CreateLocationHdfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationHdfs {
    type Output = std::result::Result<
        crate::output::CreateLocationHdfsOutput,
        crate::error::CreateLocationHdfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_hdfs::de_create_location_hdfs_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_location_hdfs::de_create_location_hdfs_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateLocationNfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_nfs`](crate::client::fluent_builders::CreateLocationNfs).
///
/// `ParseStrictResponse` impl for `CreateLocationNfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationNfs {
    _private: (),
}
impl CreateLocationNfs {
    /// Creates a new builder-style object to manufacture [`CreateLocationNfsInput`](crate::input::CreateLocationNfsInput).
    pub fn builder() -> crate::input::create_location_nfs_input::Builder {
        crate::input::create_location_nfs_input::Builder::default()
    }
    /// Creates a new `CreateLocationNfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationNfs {
    type Output = std::result::Result<
        crate::output::CreateLocationNfsOutput,
        crate::error::CreateLocationNfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_nfs::de_create_location_nfs_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_location_nfs::de_create_location_nfs_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateLocationObjectStorage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_object_storage`](crate::client::fluent_builders::CreateLocationObjectStorage).
///
/// `ParseStrictResponse` impl for `CreateLocationObjectStorage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationObjectStorage {
    _private: (),
}
impl CreateLocationObjectStorage {
    /// Creates a new builder-style object to manufacture [`CreateLocationObjectStorageInput`](crate::input::CreateLocationObjectStorageInput).
    pub fn builder() -> crate::input::create_location_object_storage_input::Builder {
        crate::input::create_location_object_storage_input::Builder::default()
    }
    /// Creates a new `CreateLocationObjectStorage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationObjectStorage {
    type Output = std::result::Result<
        crate::output::CreateLocationObjectStorageOutput,
        crate::error::CreateLocationObjectStorageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_object_storage::de_create_location_object_storage_http_error(response)
        } else {
            crate::protocol_serde::shape_create_location_object_storage::de_create_location_object_storage_http_response(response)
        }
    }
}

/// Operation shape for `CreateLocationS3`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_s3`](crate::client::fluent_builders::CreateLocationS3).
///
/// `ParseStrictResponse` impl for `CreateLocationS3`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationS3 {
    _private: (),
}
impl CreateLocationS3 {
    /// Creates a new builder-style object to manufacture [`CreateLocationS3Input`](crate::input::CreateLocationS3Input).
    pub fn builder() -> crate::input::create_location_s3_input::Builder {
        crate::input::create_location_s3_input::Builder::default()
    }
    /// Creates a new `CreateLocationS3` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationS3 {
    type Output = std::result::Result<
        crate::output::CreateLocationS3Output,
        crate::error::CreateLocationS3Error,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_s3::de_create_location_s3_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_location_s3::de_create_location_s3_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateLocationSmb`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_location_smb`](crate::client::fluent_builders::CreateLocationSmb).
///
/// `ParseStrictResponse` impl for `CreateLocationSmb`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateLocationSmb {
    _private: (),
}
impl CreateLocationSmb {
    /// Creates a new builder-style object to manufacture [`CreateLocationSmbInput`](crate::input::CreateLocationSmbInput).
    pub fn builder() -> crate::input::create_location_smb_input::Builder {
        crate::input::create_location_smb_input::Builder::default()
    }
    /// Creates a new `CreateLocationSmb` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateLocationSmb {
    type Output = std::result::Result<
        crate::output::CreateLocationSmbOutput,
        crate::error::CreateLocationSmbError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_location_smb::de_create_location_smb_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_location_smb::de_create_location_smb_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `CreateTask`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_task`](crate::client::fluent_builders::CreateTask).
///
/// `ParseStrictResponse` impl for `CreateTask`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateTask {
    _private: (),
}
impl CreateTask {
    /// Creates a new builder-style object to manufacture [`CreateTaskInput`](crate::input::CreateTaskInput).
    pub fn builder() -> crate::input::create_task_input::Builder {
        crate::input::create_task_input::Builder::default()
    }
    /// Creates a new `CreateTask` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateTask {
    type Output =
        std::result::Result<crate::output::CreateTaskOutput, crate::error::CreateTaskError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_create_task::de_create_task_http_error(response)
        } else {
            crate::protocol_serde::shape_create_task::de_create_task_http_response(response)
        }
    }
}

/// Operation shape for `DeleteAgent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_agent`](crate::client::fluent_builders::DeleteAgent).
///
/// `ParseStrictResponse` impl for `DeleteAgent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteAgent {
    _private: (),
}
impl DeleteAgent {
    /// Creates a new builder-style object to manufacture [`DeleteAgentInput`](crate::input::DeleteAgentInput).
    pub fn builder() -> crate::input::delete_agent_input::Builder {
        crate::input::delete_agent_input::Builder::default()
    }
    /// Creates a new `DeleteAgent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteAgent {
    type Output =
        std::result::Result<crate::output::DeleteAgentOutput, crate::error::DeleteAgentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_agent::de_delete_agent_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_agent::de_delete_agent_http_response(response)
        }
    }
}

/// Operation shape for `DeleteLocation`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_location`](crate::client::fluent_builders::DeleteLocation).
///
/// `ParseStrictResponse` impl for `DeleteLocation`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteLocation {
    _private: (),
}
impl DeleteLocation {
    /// Creates a new builder-style object to manufacture [`DeleteLocationInput`](crate::input::DeleteLocationInput).
    pub fn builder() -> crate::input::delete_location_input::Builder {
        crate::input::delete_location_input::Builder::default()
    }
    /// Creates a new `DeleteLocation` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteLocation {
    type Output =
        std::result::Result<crate::output::DeleteLocationOutput, crate::error::DeleteLocationError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_location::de_delete_location_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_location::de_delete_location_http_response(response)
        }
    }
}

/// Operation shape for `DeleteTask`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_task`](crate::client::fluent_builders::DeleteTask).
///
/// `ParseStrictResponse` impl for `DeleteTask`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteTask {
    _private: (),
}
impl DeleteTask {
    /// Creates a new builder-style object to manufacture [`DeleteTaskInput`](crate::input::DeleteTaskInput).
    pub fn builder() -> crate::input::delete_task_input::Builder {
        crate::input::delete_task_input::Builder::default()
    }
    /// Creates a new `DeleteTask` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteTask {
    type Output =
        std::result::Result<crate::output::DeleteTaskOutput, crate::error::DeleteTaskError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_task::de_delete_task_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_task::de_delete_task_http_response(response)
        }
    }
}

/// Operation shape for `DescribeAgent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_agent`](crate::client::fluent_builders::DescribeAgent).
///
/// `ParseStrictResponse` impl for `DescribeAgent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeAgent {
    _private: (),
}
impl DescribeAgent {
    /// Creates a new builder-style object to manufacture [`DescribeAgentInput`](crate::input::DescribeAgentInput).
    pub fn builder() -> crate::input::describe_agent_input::Builder {
        crate::input::describe_agent_input::Builder::default()
    }
    /// Creates a new `DescribeAgent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeAgent {
    type Output =
        std::result::Result<crate::output::DescribeAgentOutput, crate::error::DescribeAgentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_agent::de_describe_agent_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_agent::de_describe_agent_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationEfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_efs`](crate::client::fluent_builders::DescribeLocationEfs).
///
/// `ParseStrictResponse` impl for `DescribeLocationEfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationEfs {
    _private: (),
}
impl DescribeLocationEfs {
    /// Creates a new builder-style object to manufacture [`DescribeLocationEfsInput`](crate::input::DescribeLocationEfsInput).
    pub fn builder() -> crate::input::describe_location_efs_input::Builder {
        crate::input::describe_location_efs_input::Builder::default()
    }
    /// Creates a new `DescribeLocationEfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationEfs {
    type Output = std::result::Result<
        crate::output::DescribeLocationEfsOutput,
        crate::error::DescribeLocationEfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_efs::de_describe_location_efs_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_location_efs::de_describe_location_efs_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationFsxLustre`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_fsx_lustre`](crate::client::fluent_builders::DescribeLocationFsxLustre).
///
/// `ParseStrictResponse` impl for `DescribeLocationFsxLustre`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationFsxLustre {
    _private: (),
}
impl DescribeLocationFsxLustre {
    /// Creates a new builder-style object to manufacture [`DescribeLocationFsxLustreInput`](crate::input::DescribeLocationFsxLustreInput).
    pub fn builder() -> crate::input::describe_location_fsx_lustre_input::Builder {
        crate::input::describe_location_fsx_lustre_input::Builder::default()
    }
    /// Creates a new `DescribeLocationFsxLustre` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationFsxLustre {
    type Output = std::result::Result<
        crate::output::DescribeLocationFsxLustreOutput,
        crate::error::DescribeLocationFsxLustreError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_fsx_lustre::de_describe_location_fsx_lustre_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_location_fsx_lustre::de_describe_location_fsx_lustre_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationFsxOntap`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_fsx_ontap`](crate::client::fluent_builders::DescribeLocationFsxOntap).
///
/// `ParseStrictResponse` impl for `DescribeLocationFsxOntap`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationFsxOntap {
    _private: (),
}
impl DescribeLocationFsxOntap {
    /// Creates a new builder-style object to manufacture [`DescribeLocationFsxOntapInput`](crate::input::DescribeLocationFsxOntapInput).
    pub fn builder() -> crate::input::describe_location_fsx_ontap_input::Builder {
        crate::input::describe_location_fsx_ontap_input::Builder::default()
    }
    /// Creates a new `DescribeLocationFsxOntap` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationFsxOntap {
    type Output = std::result::Result<
        crate::output::DescribeLocationFsxOntapOutput,
        crate::error::DescribeLocationFsxOntapError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_fsx_ontap::de_describe_location_fsx_ontap_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_location_fsx_ontap::de_describe_location_fsx_ontap_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationFsxOpenZfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_fsx_open_zfs`](crate::client::fluent_builders::DescribeLocationFsxOpenZfs).
///
/// `ParseStrictResponse` impl for `DescribeLocationFsxOpenZfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationFsxOpenZfs {
    _private: (),
}
impl DescribeLocationFsxOpenZfs {
    /// Creates a new builder-style object to manufacture [`DescribeLocationFsxOpenZfsInput`](crate::input::DescribeLocationFsxOpenZfsInput).
    pub fn builder() -> crate::input::describe_location_fsx_open_zfs_input::Builder {
        crate::input::describe_location_fsx_open_zfs_input::Builder::default()
    }
    /// Creates a new `DescribeLocationFsxOpenZfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationFsxOpenZfs {
    type Output = std::result::Result<
        crate::output::DescribeLocationFsxOpenZfsOutput,
        crate::error::DescribeLocationFsxOpenZfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_fsx_open_zfs::de_describe_location_fsx_open_zfs_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_location_fsx_open_zfs::de_describe_location_fsx_open_zfs_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationFsxWindows`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_fsx_windows`](crate::client::fluent_builders::DescribeLocationFsxWindows).
///
/// `ParseStrictResponse` impl for `DescribeLocationFsxWindows`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationFsxWindows {
    _private: (),
}
impl DescribeLocationFsxWindows {
    /// Creates a new builder-style object to manufacture [`DescribeLocationFsxWindowsInput`](crate::input::DescribeLocationFsxWindowsInput).
    pub fn builder() -> crate::input::describe_location_fsx_windows_input::Builder {
        crate::input::describe_location_fsx_windows_input::Builder::default()
    }
    /// Creates a new `DescribeLocationFsxWindows` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationFsxWindows {
    type Output = std::result::Result<
        crate::output::DescribeLocationFsxWindowsOutput,
        crate::error::DescribeLocationFsxWindowsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_fsx_windows::de_describe_location_fsx_windows_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_location_fsx_windows::de_describe_location_fsx_windows_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationHdfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_hdfs`](crate::client::fluent_builders::DescribeLocationHdfs).
///
/// `ParseStrictResponse` impl for `DescribeLocationHdfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationHdfs {
    _private: (),
}
impl DescribeLocationHdfs {
    /// Creates a new builder-style object to manufacture [`DescribeLocationHdfsInput`](crate::input::DescribeLocationHdfsInput).
    pub fn builder() -> crate::input::describe_location_hdfs_input::Builder {
        crate::input::describe_location_hdfs_input::Builder::default()
    }
    /// Creates a new `DescribeLocationHdfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationHdfs {
    type Output = std::result::Result<
        crate::output::DescribeLocationHdfsOutput,
        crate::error::DescribeLocationHdfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_hdfs::de_describe_location_hdfs_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_location_hdfs::de_describe_location_hdfs_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationNfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_nfs`](crate::client::fluent_builders::DescribeLocationNfs).
///
/// `ParseStrictResponse` impl for `DescribeLocationNfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationNfs {
    _private: (),
}
impl DescribeLocationNfs {
    /// Creates a new builder-style object to manufacture [`DescribeLocationNfsInput`](crate::input::DescribeLocationNfsInput).
    pub fn builder() -> crate::input::describe_location_nfs_input::Builder {
        crate::input::describe_location_nfs_input::Builder::default()
    }
    /// Creates a new `DescribeLocationNfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationNfs {
    type Output = std::result::Result<
        crate::output::DescribeLocationNfsOutput,
        crate::error::DescribeLocationNfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_nfs::de_describe_location_nfs_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_location_nfs::de_describe_location_nfs_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationObjectStorage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_object_storage`](crate::client::fluent_builders::DescribeLocationObjectStorage).
///
/// `ParseStrictResponse` impl for `DescribeLocationObjectStorage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationObjectStorage {
    _private: (),
}
impl DescribeLocationObjectStorage {
    /// Creates a new builder-style object to manufacture [`DescribeLocationObjectStorageInput`](crate::input::DescribeLocationObjectStorageInput).
    pub fn builder() -> crate::input::describe_location_object_storage_input::Builder {
        crate::input::describe_location_object_storage_input::Builder::default()
    }
    /// Creates a new `DescribeLocationObjectStorage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationObjectStorage {
    type Output = std::result::Result<
        crate::output::DescribeLocationObjectStorageOutput,
        crate::error::DescribeLocationObjectStorageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_object_storage::de_describe_location_object_storage_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_location_object_storage::de_describe_location_object_storage_http_response(response)
        }
    }
}

/// Operation shape for `DescribeLocationS3`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_s3`](crate::client::fluent_builders::DescribeLocationS3).
///
/// `ParseStrictResponse` impl for `DescribeLocationS3`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationS3 {
    _private: (),
}
impl DescribeLocationS3 {
    /// Creates a new builder-style object to manufacture [`DescribeLocationS3Input`](crate::input::DescribeLocationS3Input).
    pub fn builder() -> crate::input::describe_location_s3_input::Builder {
        crate::input::describe_location_s3_input::Builder::default()
    }
    /// Creates a new `DescribeLocationS3` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationS3 {
    type Output = std::result::Result<
        crate::output::DescribeLocationS3Output,
        crate::error::DescribeLocationS3Error,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_s3::de_describe_location_s3_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_location_s3::de_describe_location_s3_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeLocationSmb`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_location_smb`](crate::client::fluent_builders::DescribeLocationSmb).
///
/// `ParseStrictResponse` impl for `DescribeLocationSmb`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeLocationSmb {
    _private: (),
}
impl DescribeLocationSmb {
    /// Creates a new builder-style object to manufacture [`DescribeLocationSmbInput`](crate::input::DescribeLocationSmbInput).
    pub fn builder() -> crate::input::describe_location_smb_input::Builder {
        crate::input::describe_location_smb_input::Builder::default()
    }
    /// Creates a new `DescribeLocationSmb` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeLocationSmb {
    type Output = std::result::Result<
        crate::output::DescribeLocationSmbOutput,
        crate::error::DescribeLocationSmbError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_location_smb::de_describe_location_smb_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_describe_location_smb::de_describe_location_smb_http_response(response)
        }
    }
}

/// Operation shape for `DescribeTask`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_task`](crate::client::fluent_builders::DescribeTask).
///
/// `ParseStrictResponse` impl for `DescribeTask`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeTask {
    _private: (),
}
impl DescribeTask {
    /// Creates a new builder-style object to manufacture [`DescribeTaskInput`](crate::input::DescribeTaskInput).
    pub fn builder() -> crate::input::describe_task_input::Builder {
        crate::input::describe_task_input::Builder::default()
    }
    /// Creates a new `DescribeTask` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeTask {
    type Output =
        std::result::Result<crate::output::DescribeTaskOutput, crate::error::DescribeTaskError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_task::de_describe_task_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_task::de_describe_task_http_response(response)
        }
    }
}

/// Operation shape for `DescribeTaskExecution`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_task_execution`](crate::client::fluent_builders::DescribeTaskExecution).
///
/// `ParseStrictResponse` impl for `DescribeTaskExecution`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeTaskExecution {
    _private: (),
}
impl DescribeTaskExecution {
    /// Creates a new builder-style object to manufacture [`DescribeTaskExecutionInput`](crate::input::DescribeTaskExecutionInput).
    pub fn builder() -> crate::input::describe_task_execution_input::Builder {
        crate::input::describe_task_execution_input::Builder::default()
    }
    /// Creates a new `DescribeTaskExecution` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeTaskExecution {
    type Output = std::result::Result<
        crate::output::DescribeTaskExecutionOutput,
        crate::error::DescribeTaskExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_task_execution::de_describe_task_execution_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_task_execution::de_describe_task_execution_http_response(response)
        }
    }
}

/// Operation shape for `ListAgents`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_agents`](crate::client::fluent_builders::ListAgents).
///
/// `ParseStrictResponse` impl for `ListAgents`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListAgents {
    _private: (),
}
impl ListAgents {
    /// Creates a new builder-style object to manufacture [`ListAgentsInput`](crate::input::ListAgentsInput).
    pub fn builder() -> crate::input::list_agents_input::Builder {
        crate::input::list_agents_input::Builder::default()
    }
    /// Creates a new `ListAgents` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListAgents {
    type Output =
        std::result::Result<crate::output::ListAgentsOutput, crate::error::ListAgentsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_agents::de_list_agents_http_error(response)
        } else {
            crate::protocol_serde::shape_list_agents::de_list_agents_http_response(response)
        }
    }
}

/// Operation shape for `ListLocations`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_locations`](crate::client::fluent_builders::ListLocations).
///
/// `ParseStrictResponse` impl for `ListLocations`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListLocations {
    _private: (),
}
impl ListLocations {
    /// Creates a new builder-style object to manufacture [`ListLocationsInput`](crate::input::ListLocationsInput).
    pub fn builder() -> crate::input::list_locations_input::Builder {
        crate::input::list_locations_input::Builder::default()
    }
    /// Creates a new `ListLocations` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListLocations {
    type Output =
        std::result::Result<crate::output::ListLocationsOutput, crate::error::ListLocationsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_locations::de_list_locations_http_error(response)
        } else {
            crate::protocol_serde::shape_list_locations::de_list_locations_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListTaskExecutions`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_task_executions`](crate::client::fluent_builders::ListTaskExecutions).
///
/// `ParseStrictResponse` impl for `ListTaskExecutions`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTaskExecutions {
    _private: (),
}
impl ListTaskExecutions {
    /// Creates a new builder-style object to manufacture [`ListTaskExecutionsInput`](crate::input::ListTaskExecutionsInput).
    pub fn builder() -> crate::input::list_task_executions_input::Builder {
        crate::input::list_task_executions_input::Builder::default()
    }
    /// Creates a new `ListTaskExecutions` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTaskExecutions {
    type Output = std::result::Result<
        crate::output::ListTaskExecutionsOutput,
        crate::error::ListTaskExecutionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_task_executions::de_list_task_executions_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_task_executions::de_list_task_executions_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListTasks`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tasks`](crate::client::fluent_builders::ListTasks).
///
/// `ParseStrictResponse` impl for `ListTasks`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTasks {
    _private: (),
}
impl ListTasks {
    /// Creates a new builder-style object to manufacture [`ListTasksInput`](crate::input::ListTasksInput).
    pub fn builder() -> crate::input::list_tasks_input::Builder {
        crate::input::list_tasks_input::Builder::default()
    }
    /// Creates a new `ListTasks` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTasks {
    type Output = std::result::Result<crate::output::ListTasksOutput, crate::error::ListTasksError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tasks::de_list_tasks_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tasks::de_list_tasks_http_response(response)
        }
    }
}

/// Operation shape for `StartTaskExecution`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_task_execution`](crate::client::fluent_builders::StartTaskExecution).
///
/// `ParseStrictResponse` impl for `StartTaskExecution`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartTaskExecution {
    _private: (),
}
impl StartTaskExecution {
    /// Creates a new builder-style object to manufacture [`StartTaskExecutionInput`](crate::input::StartTaskExecutionInput).
    pub fn builder() -> crate::input::start_task_execution_input::Builder {
        crate::input::start_task_execution_input::Builder::default()
    }
    /// Creates a new `StartTaskExecution` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartTaskExecution {
    type Output = std::result::Result<
        crate::output::StartTaskExecutionOutput,
        crate::error::StartTaskExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_task_execution::de_start_task_execution_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_task_execution::de_start_task_execution_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateAgent`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_agent`](crate::client::fluent_builders::UpdateAgent).
///
/// `ParseStrictResponse` impl for `UpdateAgent`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateAgent {
    _private: (),
}
impl UpdateAgent {
    /// Creates a new builder-style object to manufacture [`UpdateAgentInput`](crate::input::UpdateAgentInput).
    pub fn builder() -> crate::input::update_agent_input::Builder {
        crate::input::update_agent_input::Builder::default()
    }
    /// Creates a new `UpdateAgent` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateAgent {
    type Output =
        std::result::Result<crate::output::UpdateAgentOutput, crate::error::UpdateAgentError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_agent::de_update_agent_http_error(response)
        } else {
            crate::protocol_serde::shape_update_agent::de_update_agent_http_response(response)
        }
    }
}

/// Operation shape for `UpdateLocationHdfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_location_hdfs`](crate::client::fluent_builders::UpdateLocationHdfs).
///
/// `ParseStrictResponse` impl for `UpdateLocationHdfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLocationHdfs {
    _private: (),
}
impl UpdateLocationHdfs {
    /// Creates a new builder-style object to manufacture [`UpdateLocationHdfsInput`](crate::input::UpdateLocationHdfsInput).
    pub fn builder() -> crate::input::update_location_hdfs_input::Builder {
        crate::input::update_location_hdfs_input::Builder::default()
    }
    /// Creates a new `UpdateLocationHdfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLocationHdfs {
    type Output = std::result::Result<
        crate::output::UpdateLocationHdfsOutput,
        crate::error::UpdateLocationHdfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_location_hdfs::de_update_location_hdfs_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_location_hdfs::de_update_location_hdfs_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateLocationNfs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_location_nfs`](crate::client::fluent_builders::UpdateLocationNfs).
///
/// `ParseStrictResponse` impl for `UpdateLocationNfs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLocationNfs {
    _private: (),
}
impl UpdateLocationNfs {
    /// Creates a new builder-style object to manufacture [`UpdateLocationNfsInput`](crate::input::UpdateLocationNfsInput).
    pub fn builder() -> crate::input::update_location_nfs_input::Builder {
        crate::input::update_location_nfs_input::Builder::default()
    }
    /// Creates a new `UpdateLocationNfs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLocationNfs {
    type Output = std::result::Result<
        crate::output::UpdateLocationNfsOutput,
        crate::error::UpdateLocationNfsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_location_nfs::de_update_location_nfs_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_location_nfs::de_update_location_nfs_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateLocationObjectStorage`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_location_object_storage`](crate::client::fluent_builders::UpdateLocationObjectStorage).
///
/// `ParseStrictResponse` impl for `UpdateLocationObjectStorage`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLocationObjectStorage {
    _private: (),
}
impl UpdateLocationObjectStorage {
    /// Creates a new builder-style object to manufacture [`UpdateLocationObjectStorageInput`](crate::input::UpdateLocationObjectStorageInput).
    pub fn builder() -> crate::input::update_location_object_storage_input::Builder {
        crate::input::update_location_object_storage_input::Builder::default()
    }
    /// Creates a new `UpdateLocationObjectStorage` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLocationObjectStorage {
    type Output = std::result::Result<
        crate::output::UpdateLocationObjectStorageOutput,
        crate::error::UpdateLocationObjectStorageError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_location_object_storage::de_update_location_object_storage_http_error(response)
        } else {
            crate::protocol_serde::shape_update_location_object_storage::de_update_location_object_storage_http_response(response)
        }
    }
}

/// Operation shape for `UpdateLocationSmb`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_location_smb`](crate::client::fluent_builders::UpdateLocationSmb).
///
/// `ParseStrictResponse` impl for `UpdateLocationSmb`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLocationSmb {
    _private: (),
}
impl UpdateLocationSmb {
    /// Creates a new builder-style object to manufacture [`UpdateLocationSmbInput`](crate::input::UpdateLocationSmbInput).
    pub fn builder() -> crate::input::update_location_smb_input::Builder {
        crate::input::update_location_smb_input::Builder::default()
    }
    /// Creates a new `UpdateLocationSmb` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLocationSmb {
    type Output = std::result::Result<
        crate::output::UpdateLocationSmbOutput,
        crate::error::UpdateLocationSmbError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_location_smb::de_update_location_smb_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_location_smb::de_update_location_smb_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `UpdateTask`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_task`](crate::client::fluent_builders::UpdateTask).
///
/// `ParseStrictResponse` impl for `UpdateTask`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateTask {
    _private: (),
}
impl UpdateTask {
    /// Creates a new builder-style object to manufacture [`UpdateTaskInput`](crate::input::UpdateTaskInput).
    pub fn builder() -> crate::input::update_task_input::Builder {
        crate::input::update_task_input::Builder::default()
    }
    /// Creates a new `UpdateTask` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateTask {
    type Output =
        std::result::Result<crate::output::UpdateTaskOutput, crate::error::UpdateTaskError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_task::de_update_task_http_error(response)
        } else {
            crate::protocol_serde::shape_update_task::de_update_task_http_response(response)
        }
    }
}

/// Operation shape for `UpdateTaskExecution`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_task_execution`](crate::client::fluent_builders::UpdateTaskExecution).
///
/// `ParseStrictResponse` impl for `UpdateTaskExecution`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateTaskExecution {
    _private: (),
}
impl UpdateTaskExecution {
    /// Creates a new builder-style object to manufacture [`UpdateTaskExecutionInput`](crate::input::UpdateTaskExecutionInput).
    pub fn builder() -> crate::input::update_task_execution_input::Builder {
        crate::input::update_task_execution_input::Builder::default()
    }
    /// Creates a new `UpdateTaskExecution` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateTaskExecution {
    type Output = std::result::Result<
        crate::output::UpdateTaskExecutionOutput,
        crate::error::UpdateTaskExecutionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_task_execution::de_update_task_execution_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_task_execution::de_update_task_execution_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
