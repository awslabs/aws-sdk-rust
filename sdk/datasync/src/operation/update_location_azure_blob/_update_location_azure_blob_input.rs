// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLocationAzureBlobInput {
    /// <p>Specifies the ARN of the Azure Blob Storage transfer location that you're updating.</p>
    pub location_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies path segments if you want to limit your transfer to a virtual directory in your container (for example, <code>/my/images</code>).</p>
    pub subdirectory: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the authentication method DataSync uses to access your Azure Blob Storage. DataSync can access blob storage using a shared access signature (SAS).</p>
    pub authentication_type: ::std::option::Option<crate::types::AzureBlobAuthenticationType>,
    /// <p>Specifies the SAS configuration that allows DataSync to access your Azure Blob Storage.</p>
    pub sas_configuration: ::std::option::Option<crate::types::AzureBlobSasConfiguration>,
    /// <p>Specifies the type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Currently, DataSync only supports moving data into Azure Blob Storage as block blobs. For more information on blob types, see the <a href="https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs">Azure Blob Storage documentation</a>.</p>
    pub blob_type: ::std::option::Option<crate::types::AzureBlobType>,
    /// <p>Specifies the access tier that you want your objects or files transferred into. This only applies when using the location as a transfer destination. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers">Access tiers</a>.</p>
    pub access_tier: ::std::option::Option<crate::types::AzureAccessTier>,
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect with your Azure Blob Storage container.</p>
    /// <p>You can specify more than one agent. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/multiple-agents.html">Using multiple agents for your transfer</a>.</p>
    pub agent_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateLocationAzureBlobInput {
    /// <p>Specifies the ARN of the Azure Blob Storage transfer location that you're updating.</p>
    pub fn location_arn(&self) -> ::std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>Specifies path segments if you want to limit your transfer to a virtual directory in your container (for example, <code>/my/images</code>).</p>
    pub fn subdirectory(&self) -> ::std::option::Option<&str> {
        self.subdirectory.as_deref()
    }
    /// <p>Specifies the authentication method DataSync uses to access your Azure Blob Storage. DataSync can access blob storage using a shared access signature (SAS).</p>
    pub fn authentication_type(&self) -> ::std::option::Option<&crate::types::AzureBlobAuthenticationType> {
        self.authentication_type.as_ref()
    }
    /// <p>Specifies the SAS configuration that allows DataSync to access your Azure Blob Storage.</p>
    pub fn sas_configuration(&self) -> ::std::option::Option<&crate::types::AzureBlobSasConfiguration> {
        self.sas_configuration.as_ref()
    }
    /// <p>Specifies the type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Currently, DataSync only supports moving data into Azure Blob Storage as block blobs. For more information on blob types, see the <a href="https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs">Azure Blob Storage documentation</a>.</p>
    pub fn blob_type(&self) -> ::std::option::Option<&crate::types::AzureBlobType> {
        self.blob_type.as_ref()
    }
    /// <p>Specifies the access tier that you want your objects or files transferred into. This only applies when using the location as a transfer destination. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers">Access tiers</a>.</p>
    pub fn access_tier(&self) -> ::std::option::Option<&crate::types::AzureAccessTier> {
        self.access_tier.as_ref()
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect with your Azure Blob Storage container.</p>
    /// <p>You can specify more than one agent. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/multiple-agents.html">Using multiple agents for your transfer</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_arns.is_none()`.
    pub fn agent_arns(&self) -> &[::std::string::String] {
        self.agent_arns.as_deref().unwrap_or_default()
    }
}
impl UpdateLocationAzureBlobInput {
    /// Creates a new builder-style object to manufacture [`UpdateLocationAzureBlobInput`](crate::operation::update_location_azure_blob::UpdateLocationAzureBlobInput).
    pub fn builder() -> crate::operation::update_location_azure_blob::builders::UpdateLocationAzureBlobInputBuilder {
        crate::operation::update_location_azure_blob::builders::UpdateLocationAzureBlobInputBuilder::default()
    }
}

/// A builder for [`UpdateLocationAzureBlobInput`](crate::operation::update_location_azure_blob::UpdateLocationAzureBlobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateLocationAzureBlobInputBuilder {
    pub(crate) location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subdirectory: ::std::option::Option<::std::string::String>,
    pub(crate) authentication_type: ::std::option::Option<crate::types::AzureBlobAuthenticationType>,
    pub(crate) sas_configuration: ::std::option::Option<crate::types::AzureBlobSasConfiguration>,
    pub(crate) blob_type: ::std::option::Option<crate::types::AzureBlobType>,
    pub(crate) access_tier: ::std::option::Option<crate::types::AzureAccessTier>,
    pub(crate) agent_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl UpdateLocationAzureBlobInputBuilder {
    /// <p>Specifies the ARN of the Azure Blob Storage transfer location that you're updating.</p>
    /// This field is required.
    pub fn location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ARN of the Azure Blob Storage transfer location that you're updating.</p>
    pub fn set_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>Specifies the ARN of the Azure Blob Storage transfer location that you're updating.</p>
    pub fn get_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_arn
    }
    /// <p>Specifies path segments if you want to limit your transfer to a virtual directory in your container (for example, <code>/my/images</code>).</p>
    pub fn subdirectory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdirectory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies path segments if you want to limit your transfer to a virtual directory in your container (for example, <code>/my/images</code>).</p>
    pub fn set_subdirectory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdirectory = input;
        self
    }
    /// <p>Specifies path segments if you want to limit your transfer to a virtual directory in your container (for example, <code>/my/images</code>).</p>
    pub fn get_subdirectory(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdirectory
    }
    /// <p>Specifies the authentication method DataSync uses to access your Azure Blob Storage. DataSync can access blob storage using a shared access signature (SAS).</p>
    pub fn authentication_type(mut self, input: crate::types::AzureBlobAuthenticationType) -> Self {
        self.authentication_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the authentication method DataSync uses to access your Azure Blob Storage. DataSync can access blob storage using a shared access signature (SAS).</p>
    pub fn set_authentication_type(mut self, input: ::std::option::Option<crate::types::AzureBlobAuthenticationType>) -> Self {
        self.authentication_type = input;
        self
    }
    /// <p>Specifies the authentication method DataSync uses to access your Azure Blob Storage. DataSync can access blob storage using a shared access signature (SAS).</p>
    pub fn get_authentication_type(&self) -> &::std::option::Option<crate::types::AzureBlobAuthenticationType> {
        &self.authentication_type
    }
    /// <p>Specifies the SAS configuration that allows DataSync to access your Azure Blob Storage.</p>
    pub fn sas_configuration(mut self, input: crate::types::AzureBlobSasConfiguration) -> Self {
        self.sas_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the SAS configuration that allows DataSync to access your Azure Blob Storage.</p>
    pub fn set_sas_configuration(mut self, input: ::std::option::Option<crate::types::AzureBlobSasConfiguration>) -> Self {
        self.sas_configuration = input;
        self
    }
    /// <p>Specifies the SAS configuration that allows DataSync to access your Azure Blob Storage.</p>
    pub fn get_sas_configuration(&self) -> &::std::option::Option<crate::types::AzureBlobSasConfiguration> {
        &self.sas_configuration
    }
    /// <p>Specifies the type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Currently, DataSync only supports moving data into Azure Blob Storage as block blobs. For more information on blob types, see the <a href="https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs">Azure Blob Storage documentation</a>.</p>
    pub fn blob_type(mut self, input: crate::types::AzureBlobType) -> Self {
        self.blob_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Currently, DataSync only supports moving data into Azure Blob Storage as block blobs. For more information on blob types, see the <a href="https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs">Azure Blob Storage documentation</a>.</p>
    pub fn set_blob_type(mut self, input: ::std::option::Option<crate::types::AzureBlobType>) -> Self {
        self.blob_type = input;
        self
    }
    /// <p>Specifies the type of blob that you want your objects or files to be when transferring them into Azure Blob Storage. Currently, DataSync only supports moving data into Azure Blob Storage as block blobs. For more information on blob types, see the <a href="https://learn.microsoft.com/en-us/rest/api/storageservices/understanding-block-blobs--append-blobs--and-page-blobs">Azure Blob Storage documentation</a>.</p>
    pub fn get_blob_type(&self) -> &::std::option::Option<crate::types::AzureBlobType> {
        &self.blob_type
    }
    /// <p>Specifies the access tier that you want your objects or files transferred into. This only applies when using the location as a transfer destination. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers">Access tiers</a>.</p>
    pub fn access_tier(mut self, input: crate::types::AzureAccessTier) -> Self {
        self.access_tier = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the access tier that you want your objects or files transferred into. This only applies when using the location as a transfer destination. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers">Access tiers</a>.</p>
    pub fn set_access_tier(mut self, input: ::std::option::Option<crate::types::AzureAccessTier>) -> Self {
        self.access_tier = input;
        self
    }
    /// <p>Specifies the access tier that you want your objects or files transferred into. This only applies when using the location as a transfer destination. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/creating-azure-blob-location.html#azure-blob-access-tiers">Access tiers</a>.</p>
    pub fn get_access_tier(&self) -> &::std::option::Option<crate::types::AzureAccessTier> {
        &self.access_tier
    }
    /// Appends an item to `agent_arns`.
    ///
    /// To override the contents of this collection use [`set_agent_arns`](Self::set_agent_arns).
    ///
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect with your Azure Blob Storage container.</p>
    /// <p>You can specify more than one agent. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/multiple-agents.html">Using multiple agents for your transfer</a>.</p>
    pub fn agent_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.agent_arns.unwrap_or_default();
        v.push(input.into());
        self.agent_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect with your Azure Blob Storage container.</p>
    /// <p>You can specify more than one agent. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/multiple-agents.html">Using multiple agents for your transfer</a>.</p>
    pub fn set_agent_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.agent_arns = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that can connect with your Azure Blob Storage container.</p>
    /// <p>You can specify more than one agent. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/multiple-agents.html">Using multiple agents for your transfer</a>.</p>
    pub fn get_agent_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.agent_arns
    }
    /// Consumes the builder and constructs a [`UpdateLocationAzureBlobInput`](crate::operation::update_location_azure_blob::UpdateLocationAzureBlobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_location_azure_blob::UpdateLocationAzureBlobInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::update_location_azure_blob::UpdateLocationAzureBlobInput {
            location_arn: self.location_arn,
            subdirectory: self.subdirectory,
            authentication_type: self.authentication_type,
            sas_configuration: self.sas_configuration,
            blob_type: self.blob_type,
            access_tier: self.access_tier,
            agent_arns: self.agent_arns,
        })
    }
}
