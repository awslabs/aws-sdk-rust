// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateLocationObjectStorageInput {
    /// <p>Specifies the ARN of the object storage system location that you're updating.</p>
    #[doc(hidden)]
    pub location_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    #[doc(hidden)]
    pub server_port: std::option::Option<i32>,
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    #[doc(hidden)]
    pub server_protocol: std::option::Option<crate::types::ObjectStorageServerProtocol>,
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.</p>
    #[doc(hidden)]
    pub subdirectory: std::option::Option<std::string::String>,
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    #[doc(hidden)]
    pub access_key: std::option::Option<std::string::String>,
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    #[doc(hidden)]
    pub secret_key: std::option::Option<std::string::String>,
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    #[doc(hidden)]
    pub agent_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies a certificate to authenticate with an object storage system that uses a private or self-signed certificate authority (CA). You must specify a Base64-encoded <code>.pem</code> file (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The certificate can be up to 32768 bytes (before Base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    /// <p>Updating the certificate doesn't interfere with tasks that you have in progress.</p>
    #[doc(hidden)]
    pub server_certificate: std::option::Option<aws_smithy_types::Blob>,
}
impl UpdateLocationObjectStorageInput {
    /// <p>Specifies the ARN of the object storage system location that you're updating.</p>
    pub fn location_arn(&self) -> std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn server_port(&self) -> std::option::Option<i32> {
        self.server_port
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn server_protocol(
        &self,
    ) -> std::option::Option<&crate::types::ObjectStorageServerProtocol> {
        self.server_protocol.as_ref()
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.</p>
    pub fn subdirectory(&self) -> std::option::Option<&str> {
        self.subdirectory.as_deref()
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn access_key(&self) -> std::option::Option<&str> {
        self.access_key.as_deref()
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn secret_key(&self) -> std::option::Option<&str> {
        self.secret_key.as_deref()
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn agent_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.agent_arns.as_deref()
    }
    /// <p>Specifies a certificate to authenticate with an object storage system that uses a private or self-signed certificate authority (CA). You must specify a Base64-encoded <code>.pem</code> file (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The certificate can be up to 32768 bytes (before Base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    /// <p>Updating the certificate doesn't interfere with tasks that you have in progress.</p>
    pub fn server_certificate(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.server_certificate.as_ref()
    }
}
impl std::fmt::Debug for UpdateLocationObjectStorageInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLocationObjectStorageInput");
        formatter.field("location_arn", &self.location_arn);
        formatter.field("server_port", &self.server_port);
        formatter.field("server_protocol", &self.server_protocol);
        formatter.field("subdirectory", &self.subdirectory);
        formatter.field("access_key", &self.access_key);
        formatter.field("secret_key", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_arns", &self.agent_arns);
        formatter.field("server_certificate", &self.server_certificate);
        formatter.finish()
    }
}
impl UpdateLocationObjectStorageInput {
    /// Creates a new builder-style object to manufacture [`UpdateLocationObjectStorageInput`](crate::operation::update_location_object_storage::UpdateLocationObjectStorageInput).
    pub fn builder() -> crate::operation::update_location_object_storage::builders::UpdateLocationObjectStorageInputBuilder{
        crate::operation::update_location_object_storage::builders::UpdateLocationObjectStorageInputBuilder::default()
    }
}

/// A builder for [`UpdateLocationObjectStorageInput`](crate::operation::update_location_object_storage::UpdateLocationObjectStorageInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateLocationObjectStorageInputBuilder {
    pub(crate) location_arn: std::option::Option<std::string::String>,
    pub(crate) server_port: std::option::Option<i32>,
    pub(crate) server_protocol: std::option::Option<crate::types::ObjectStorageServerProtocol>,
    pub(crate) subdirectory: std::option::Option<std::string::String>,
    pub(crate) access_key: std::option::Option<std::string::String>,
    pub(crate) secret_key: std::option::Option<std::string::String>,
    pub(crate) agent_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) server_certificate: std::option::Option<aws_smithy_types::Blob>,
}
impl UpdateLocationObjectStorageInputBuilder {
    /// <p>Specifies the ARN of the object storage system location that you're updating.</p>
    pub fn location_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.location_arn = Some(input.into());
        self
    }
    /// <p>Specifies the ARN of the object storage system location that you're updating.</p>
    pub fn set_location_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn server_port(mut self, input: i32) -> Self {
        self.server_port = Some(input);
        self
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn set_server_port(mut self, input: std::option::Option<i32>) -> Self {
        self.server_port = input;
        self
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn server_protocol(mut self, input: crate::types::ObjectStorageServerProtocol) -> Self {
        self.server_protocol = Some(input);
        self
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn set_server_protocol(
        mut self,
        input: std::option::Option<crate::types::ObjectStorageServerProtocol>,
    ) -> Self {
        self.server_protocol = input;
        self
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.</p>
    pub fn subdirectory(mut self, input: impl Into<std::string::String>) -> Self {
        self.subdirectory = Some(input.into());
        self
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.</p>
    pub fn set_subdirectory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subdirectory = input;
        self
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn access_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_key = Some(input.into());
        self
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn set_access_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_key = input;
        self
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn secret_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_key = Some(input.into());
        self
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn set_secret_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_key = input;
        self
    }
    /// Appends an item to `agent_arns`.
    ///
    /// To override the contents of this collection use [`set_agent_arns`](Self::set_agent_arns).
    ///
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn agent_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.agent_arns.unwrap_or_default();
        v.push(input.into());
        self.agent_arns = Some(v);
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn set_agent_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.agent_arns = input;
        self
    }
    /// <p>Specifies a certificate to authenticate with an object storage system that uses a private or self-signed certificate authority (CA). You must specify a Base64-encoded <code>.pem</code> file (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The certificate can be up to 32768 bytes (before Base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    /// <p>Updating the certificate doesn't interfere with tasks that you have in progress.</p>
    pub fn server_certificate(mut self, input: aws_smithy_types::Blob) -> Self {
        self.server_certificate = Some(input);
        self
    }
    /// <p>Specifies a certificate to authenticate with an object storage system that uses a private or self-signed certificate authority (CA). You must specify a Base64-encoded <code>.pem</code> file (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The certificate can be up to 32768 bytes (before Base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    /// <p>Updating the certificate doesn't interfere with tasks that you have in progress.</p>
    pub fn set_server_certificate(
        mut self,
        input: std::option::Option<aws_smithy_types::Blob>,
    ) -> Self {
        self.server_certificate = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLocationObjectStorageInput`](crate::operation::update_location_object_storage::UpdateLocationObjectStorageInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_location_object_storage::UpdateLocationObjectStorageInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_location_object_storage::UpdateLocationObjectStorageInput {
                location_arn: self.location_arn,
                server_port: self.server_port,
                server_protocol: self.server_protocol,
                subdirectory: self.subdirectory,
                access_key: self.access_key,
                secret_key: self.secret_key,
                agent_arns: self.agent_arns,
                server_certificate: self.server_certificate,
            },
        )
    }
}
impl std::fmt::Debug for UpdateLocationObjectStorageInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLocationObjectStorageInputBuilder");
        formatter.field("location_arn", &self.location_arn);
        formatter.field("server_port", &self.server_port);
        formatter.field("server_protocol", &self.server_protocol);
        formatter.field("subdirectory", &self.subdirectory);
        formatter.field("access_key", &self.access_key);
        formatter.field("secret_key", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_arns", &self.agent_arns);
        formatter.field("server_certificate", &self.server_certificate);
        formatter.finish()
    }
}
