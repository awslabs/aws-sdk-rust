// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_location_fsx_windows::_create_location_fsx_windows_output::CreateLocationFsxWindowsOutputBuilder;

pub use crate::operation::create_location_fsx_windows::_create_location_fsx_windows_input::CreateLocationFsxWindowsInputBuilder;

/// Fluent builder constructing a request to `CreateLocationFsxWindows`.
///
/// <p>Creates an endpoint for an Amazon FSx for Windows File Server file system.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateLocationFsxWindowsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_location_fsx_windows::builders::CreateLocationFsxWindowsInputBuilder
            }
impl CreateLocationFsxWindowsFluentBuilder {
    /// Creates a new `CreateLocationFsxWindows`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_location_fsx_windows::CreateLocationFsxWindows,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_location_fsx_windows::CreateLocationFsxWindowsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_location_fsx_windows::CreateLocationFsxWindowsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_location_fsx_windows::CreateLocationFsxWindowsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Specifies a mount path for your file system using forward slashes. This is where DataSync reads or writes data (depending on if this is a source or destination location).</p>
    pub fn subdirectory(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subdirectory(input.into());
        self
    }
    /// <p>Specifies a mount path for your file system using forward slashes. This is where DataSync reads or writes data (depending on if this is a source or destination location).</p>
    pub fn set_subdirectory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_subdirectory(input);
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) for the FSx for Windows File Server file system.</p>
    pub fn fsx_filesystem_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.fsx_filesystem_arn(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) for the FSx for Windows File Server file system.</p>
    pub fn set_fsx_filesystem_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_fsx_filesystem_arn(input);
        self
    }
    /// Appends an item to `SecurityGroupArns`.
    ///
    /// To override the contents of this collection use [`set_security_group_arns`](Self::set_security_group_arns).
    ///
    /// <p>Specifies the ARNs of the security groups that provide access to your file system's preferred subnet.</p> <note>
    /// <p>If you choose a security group that doesn't allow connections from within itself, do one of the following:</p>
    /// <ul>
    /// <li> <p>Configure the security group to allow it to communicate within itself.</p> </li>
    /// <li> <p>Choose a different security group that can communicate with the mount target's security group.</p> </li>
    /// </ul>
    /// </note>
    pub fn security_group_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.security_group_arns(input.into());
        self
    }
    /// <p>Specifies the ARNs of the security groups that provide access to your file system's preferred subnet.</p> <note>
    /// <p>If you choose a security group that doesn't allow connections from within itself, do one of the following:</p>
    /// <ul>
    /// <li> <p>Configure the security group to allow it to communicate within itself.</p> </li>
    /// <li> <p>Choose a different security group that can communicate with the mount target's security group.</p> </li>
    /// </ul>
    /// </note>
    pub fn set_security_group_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_security_group_arns(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagListEntry>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Specifies the user who has the permissions to access files and folders in the file system.</p>
    /// <p>For information about choosing a user name that ensures sufficient permissions to files, folders, and metadata, see <a href="create-fsx-location.html#FSxWuser">user</a>.</p>
    pub fn user(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user(input.into());
        self
    }
    /// <p>Specifies the user who has the permissions to access files and folders in the file system.</p>
    /// <p>For information about choosing a user name that ensures sufficient permissions to files, folders, and metadata, see <a href="create-fsx-location.html#FSxWuser">user</a>.</p>
    pub fn set_user(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user(input);
        self
    }
    /// <p>Specifies the name of the Windows domain that the FSx for Windows File Server belongs to.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>Specifies the name of the Windows domain that the FSx for Windows File Server belongs to.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>Specifies the password of the user who has the permissions to access files and folders in the file system.</p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.password(input.into());
        self
    }
    /// <p>Specifies the password of the user who has the permissions to access files and folders in the file system.</p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_password(input);
        self
    }
}
