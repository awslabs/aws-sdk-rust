// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DeleteTask</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTaskInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to delete.</p>
    #[doc(hidden)]
    pub task_arn: std::option::Option<std::string::String>,
}
impl DeleteTaskInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to delete.</p>
    pub fn task_arn(&self) -> std::option::Option<&str> {
        self.task_arn.as_deref()
    }
}
impl DeleteTaskInput {
    /// Creates a new builder-style object to manufacture [`DeleteTaskInput`](crate::operation::delete_task::DeleteTaskInput).
    pub fn builder() -> crate::operation::delete_task::builders::DeleteTaskInputBuilder {
        crate::operation::delete_task::builders::DeleteTaskInputBuilder::default()
    }
}

/// A builder for [`DeleteTaskInput`](crate::operation::delete_task::DeleteTaskInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteTaskInputBuilder {
    pub(crate) task_arn: std::option::Option<std::string::String>,
}
impl DeleteTaskInputBuilder {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to delete.</p>
    pub fn task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_arn = Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to delete.</p>
    pub fn set_task_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteTaskInput`](crate::operation::delete_task::DeleteTaskInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_task::DeleteTaskInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_task::DeleteTaskInput {
            task_arn: self.task_arn,
        })
    }
}
