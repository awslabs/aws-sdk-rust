// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>StartTaskExecutionRequest</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartTaskExecutionInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    pub task_arn: ::std::option::Option<::std::string::String>,
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub override_options: ::std::option::Option<crate::types::Options>,
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub includes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub excludes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>,
    /// <p>Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer.</p>
    pub task_report_config: ::std::option::Option<crate::types::TaskReportConfig>,
}
impl StartTaskExecutionInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    pub fn task_arn(&self) -> ::std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub fn override_options(&self) -> ::std::option::Option<&crate::types::Options> {
        self.override_options.as_ref()
    }
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.includes.is_none()`.
    pub fn includes(&self) -> &[crate::types::FilterRule] {
        self.includes.as_deref().unwrap_or_default()
    }
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.excludes.is_none()`.
    pub fn excludes(&self) -> &[crate::types::FilterRule] {
        self.excludes.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::TagListEntry] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer.</p>
    pub fn task_report_config(&self) -> ::std::option::Option<&crate::types::TaskReportConfig> {
        self.task_report_config.as_ref()
    }
}
impl StartTaskExecutionInput {
    /// Creates a new builder-style object to manufacture [`StartTaskExecutionInput`](crate::operation::start_task_execution::StartTaskExecutionInput).
    pub fn builder() -> crate::operation::start_task_execution::builders::StartTaskExecutionInputBuilder {
        crate::operation::start_task_execution::builders::StartTaskExecutionInputBuilder::default()
    }
}

/// A builder for [`StartTaskExecutionInput`](crate::operation::start_task_execution::StartTaskExecutionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartTaskExecutionInputBuilder {
    pub(crate) task_arn: ::std::option::Option<::std::string::String>,
    pub(crate) override_options: ::std::option::Option<crate::types::Options>,
    pub(crate) includes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) excludes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>,
    pub(crate) task_report_config: ::std::option::Option<crate::types::TaskReportConfig>,
}
impl StartTaskExecutionInputBuilder {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    /// This field is required.
    pub fn task_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    pub fn set_task_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    pub fn get_task_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_arn
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub fn override_options(mut self, input: crate::types::Options) -> Self {
        self.override_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub fn set_override_options(mut self, input: ::std::option::Option<crate::types::Options>) -> Self {
        self.override_options = input;
        self
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub fn get_override_options(&self) -> &::std::option::Option<crate::types::Options> {
        &self.override_options
    }
    /// Appends an item to `includes`.
    ///
    /// To override the contents of this collection use [`set_includes`](Self::set_includes).
    ///
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn includes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.includes.unwrap_or_default();
        v.push(input);
        self.includes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn set_includes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>) -> Self {
        self.includes = input;
        self
    }
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn get_includes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterRule>> {
        &self.includes
    }
    /// Appends an item to `excludes`.
    ///
    /// To override the contents of this collection use [`set_excludes`](Self::set_excludes).
    ///
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn excludes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.excludes.unwrap_or_default();
        v.push(input);
        self.excludes = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn set_excludes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>) -> Self {
        self.excludes = input;
        self
    }
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn get_excludes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterRule>> {
        &self.excludes
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>> {
        &self.tags
    }
    /// <p>Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer.</p>
    pub fn task_report_config(mut self, input: crate::types::TaskReportConfig) -> Self {
        self.task_report_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer.</p>
    pub fn set_task_report_config(mut self, input: ::std::option::Option<crate::types::TaskReportConfig>) -> Self {
        self.task_report_config = input;
        self
    }
    /// <p>Specifies how you want to configure a task report, which provides detailed information about for your DataSync transfer.</p>
    pub fn get_task_report_config(&self) -> &::std::option::Option<crate::types::TaskReportConfig> {
        &self.task_report_config
    }
    /// Consumes the builder and constructs a [`StartTaskExecutionInput`](crate::operation::start_task_execution::StartTaskExecutionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_task_execution::StartTaskExecutionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::start_task_execution::StartTaskExecutionInput {
            task_arn: self.task_arn,
            override_options: self.override_options,
            includes: self.includes,
            excludes: self.excludes,
            tags: self.tags,
            task_report_config: self.task_report_config,
        })
    }
}
