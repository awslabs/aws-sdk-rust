// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>StartTaskExecutionRequest</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartTaskExecutionInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    #[doc(hidden)]
    pub task_arn: std::option::Option<std::string::String>,
    /// <p>Configures your DataSync task settings. These options include how DataSync handles files, objects, and their associated metadata. You also can specify how DataSync verifies data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each task setting has a default value. Unless you need to, you don't have to configure any of these <code>Options</code> before starting your task.</p>
    #[doc(hidden)]
    pub override_options: std::option::Option<crate::types::Options>,
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    #[doc(hidden)]
    pub includes: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    #[doc(hidden)]
    pub excludes: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::TagListEntry>>,
}
impl StartTaskExecutionInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    pub fn task_arn(&self) -> std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>Configures your DataSync task settings. These options include how DataSync handles files, objects, and their associated metadata. You also can specify how DataSync verifies data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each task setting has a default value. Unless you need to, you don't have to configure any of these <code>Options</code> before starting your task.</p>
    pub fn override_options(&self) -> std::option::Option<&crate::types::Options> {
        self.override_options.as_ref()
    }
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn includes(&self) -> std::option::Option<&[crate::types::FilterRule]> {
        self.includes.as_deref()
    }
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn excludes(&self) -> std::option::Option<&[crate::types::FilterRule]> {
        self.excludes.as_deref()
    }
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::TagListEntry]> {
        self.tags.as_deref()
    }
}
impl StartTaskExecutionInput {
    /// Creates a new builder-style object to manufacture [`StartTaskExecutionInput`](crate::operation::start_task_execution::StartTaskExecutionInput).
    pub fn builder(
    ) -> crate::operation::start_task_execution::builders::StartTaskExecutionInputBuilder {
        crate::operation::start_task_execution::builders::StartTaskExecutionInputBuilder::default()
    }
}

/// A builder for [`StartTaskExecutionInput`](crate::operation::start_task_execution::StartTaskExecutionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartTaskExecutionInputBuilder {
    pub(crate) task_arn: std::option::Option<std::string::String>,
    pub(crate) override_options: std::option::Option<crate::types::Options>,
    pub(crate) includes: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) excludes: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::TagListEntry>>,
}
impl StartTaskExecutionInputBuilder {
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    pub fn task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_arn = Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the task that you want to start.</p>
    pub fn set_task_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>Configures your DataSync task settings. These options include how DataSync handles files, objects, and their associated metadata. You also can specify how DataSync verifies data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each task setting has a default value. Unless you need to, you don't have to configure any of these <code>Options</code> before starting your task.</p>
    pub fn override_options(mut self, input: crate::types::Options) -> Self {
        self.override_options = Some(input);
        self
    }
    /// <p>Configures your DataSync task settings. These options include how DataSync handles files, objects, and their associated metadata. You also can specify how DataSync verifies data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each task setting has a default value. Unless you need to, you don't have to configure any of these <code>Options</code> before starting your task.</p>
    pub fn set_override_options(
        mut self,
        input: std::option::Option<crate::types::Options>,
    ) -> Self {
        self.override_options = input;
        self
    }
    /// Appends an item to `includes`.
    ///
    /// To override the contents of this collection use [`set_includes`](Self::set_includes).
    ///
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn includes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.includes.unwrap_or_default();
        v.push(input);
        self.includes = Some(v);
        self
    }
    /// <p>Specifies a list of filter rules that determines which files to include when running a task. The pattern should contain a single filter string that consists of the patterns to include. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn set_includes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    ) -> Self {
        self.includes = input;
        self
    }
    /// Appends an item to `excludes`.
    ///
    /// To override the contents of this collection use [`set_excludes`](Self::set_excludes).
    ///
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn excludes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.excludes.unwrap_or_default();
        v.push(input);
        self.excludes = Some(v);
        self
    }
    /// <p>Specifies a list of filter rules that determines which files to exclude from a task. The list contains a single filter string that consists of the patterns to exclude. The patterns are delimited by "|" (that is, a pipe), for example, <code>"/folder1|/folder2"</code>. </p>
    pub fn set_excludes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    ) -> Self {
        self.excludes = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Specifies the tags that you want to apply to the Amazon Resource Name (ARN) representing the task execution.</p>
    /// <p> <i>Tags</i> are key-value pairs that help you manage, filter, and search for your DataSync resources.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagListEntry>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`StartTaskExecutionInput`](crate::operation::start_task_execution::StartTaskExecutionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_task_execution::StartTaskExecutionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::start_task_execution::StartTaskExecutionInput {
                task_arn: self.task_arn,
                override_options: self.override_options,
                includes: self.includes,
                excludes: self.excludes,
                tags: self.tags,
            },
        )
    }
}
