// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::cancel_task_execution::_cancel_task_execution_output::CancelTaskExecutionOutputBuilder;

pub use crate::operation::cancel_task_execution::_cancel_task_execution_input::CancelTaskExecutionInputBuilder;

/// Fluent builder constructing a request to `CancelTaskExecution`.
///
/// <p>Stops an DataSync task execution that's in progress. The transfer of some files are abruptly interrupted. File contents that're transferred to the destination might be incomplete or inconsistent with the source files.</p>
/// <p>However, if you start a new task execution using the same task and allow it to finish, file content on the destination will be complete and consistent. This applies to other unexpected failures that interrupt a task execution. In all of these cases, DataSync successfully completes the transfer when you start the next task execution.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CancelTaskExecutionFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::cancel_task_execution::builders::CancelTaskExecutionInputBuilder,
}
impl CancelTaskExecutionFluentBuilder {
    /// Creates a new `CancelTaskExecution`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::cancel_task_execution::CancelTaskExecution,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_task_execution::CancelTaskExecutionError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::cancel_task_execution::CancelTaskExecutionOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::cancel_task_execution::CancelTaskExecutionError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the task execution to stop.</p>
    pub fn task_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.task_execution_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the task execution to stop.</p>
    pub fn set_task_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_task_execution_arn(input);
        self
    }
}
