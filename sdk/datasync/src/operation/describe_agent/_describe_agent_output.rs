// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeAgentResponse</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeAgentOutput {
    /// <p>The ARN of the agent.</p>
    pub agent_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the agent.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the agent.</p>
    /// <ul>
    /// <li> <p>If the status is <code>ONLINE</code>, the agent is configured properly and ready to use.</p> </li>
    /// <li> <p>If the status is <code>OFFLINE</code>, the agent has been out of contact with DataSync for five minutes or longer. This can happen for a few reasons. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/troubleshooting-datasync-agents.html#troubleshoot-agent-offline">What do I do if my agent is offline?</a> </p> </li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::AgentStatus>,
    /// <p>The last time that the agent was communicating with the DataSync service.</p>
    pub last_connection_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the agent was <a href="https://docs.aws.amazon.com/datasync/latest/userguide/activate-agent.html">activated</a>.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html">service endpoint</a> that your agent is connected to.</p>
    pub endpoint_type: ::std::option::Option<crate::types::EndpointType>,
    /// <p>The network configuration that the agent uses when connecting to a <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html#choose-service-endpoint-vpc">VPC service endpoint</a>.</p>
    pub private_link_config: ::std::option::Option<crate::types::PrivateLinkConfig>,
    /// <p>The platform-related details about the agent, such as the version number.</p>
    pub platform: ::std::option::Option<crate::types::Platform>,
    _request_id: Option<String>,
}
impl DescribeAgentOutput {
    /// <p>The ARN of the agent.</p>
    pub fn agent_arn(&self) -> ::std::option::Option<&str> {
        self.agent_arn.as_deref()
    }
    /// <p>The name of the agent.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the agent.</p>
    /// <ul>
    /// <li> <p>If the status is <code>ONLINE</code>, the agent is configured properly and ready to use.</p> </li>
    /// <li> <p>If the status is <code>OFFLINE</code>, the agent has been out of contact with DataSync for five minutes or longer. This can happen for a few reasons. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/troubleshooting-datasync-agents.html#troubleshoot-agent-offline">What do I do if my agent is offline?</a> </p> </li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AgentStatus> {
        self.status.as_ref()
    }
    /// <p>The last time that the agent was communicating with the DataSync service.</p>
    pub fn last_connection_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_connection_time.as_ref()
    }
    /// <p>The time that the agent was <a href="https://docs.aws.amazon.com/datasync/latest/userguide/activate-agent.html">activated</a>.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The type of <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html">service endpoint</a> that your agent is connected to.</p>
    pub fn endpoint_type(&self) -> ::std::option::Option<&crate::types::EndpointType> {
        self.endpoint_type.as_ref()
    }
    /// <p>The network configuration that the agent uses when connecting to a <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html#choose-service-endpoint-vpc">VPC service endpoint</a>.</p>
    pub fn private_link_config(&self) -> ::std::option::Option<&crate::types::PrivateLinkConfig> {
        self.private_link_config.as_ref()
    }
    /// <p>The platform-related details about the agent, such as the version number.</p>
    pub fn platform(&self) -> ::std::option::Option<&crate::types::Platform> {
        self.platform.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeAgentOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeAgentOutput {
    /// Creates a new builder-style object to manufacture [`DescribeAgentOutput`](crate::operation::describe_agent::DescribeAgentOutput).
    pub fn builder() -> crate::operation::describe_agent::builders::DescribeAgentOutputBuilder {
        crate::operation::describe_agent::builders::DescribeAgentOutputBuilder::default()
    }
}

/// A builder for [`DescribeAgentOutput`](crate::operation::describe_agent::DescribeAgentOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeAgentOutputBuilder {
    pub(crate) agent_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::AgentStatus>,
    pub(crate) last_connection_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) endpoint_type: ::std::option::Option<crate::types::EndpointType>,
    pub(crate) private_link_config: ::std::option::Option<crate::types::PrivateLinkConfig>,
    pub(crate) platform: ::std::option::Option<crate::types::Platform>,
    _request_id: Option<String>,
}
impl DescribeAgentOutputBuilder {
    /// <p>The ARN of the agent.</p>
    pub fn agent_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the agent.</p>
    pub fn set_agent_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_arn = input;
        self
    }
    /// <p>The ARN of the agent.</p>
    pub fn get_agent_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_arn
    }
    /// <p>The name of the agent.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the agent.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the agent.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The status of the agent.</p>
    /// <ul>
    /// <li> <p>If the status is <code>ONLINE</code>, the agent is configured properly and ready to use.</p> </li>
    /// <li> <p>If the status is <code>OFFLINE</code>, the agent has been out of contact with DataSync for five minutes or longer. This can happen for a few reasons. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/troubleshooting-datasync-agents.html#troubleshoot-agent-offline">What do I do if my agent is offline?</a> </p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::AgentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the agent.</p>
    /// <ul>
    /// <li> <p>If the status is <code>ONLINE</code>, the agent is configured properly and ready to use.</p> </li>
    /// <li> <p>If the status is <code>OFFLINE</code>, the agent has been out of contact with DataSync for five minutes or longer. This can happen for a few reasons. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/troubleshooting-datasync-agents.html#troubleshoot-agent-offline">What do I do if my agent is offline?</a> </p> </li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AgentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the agent.</p>
    /// <ul>
    /// <li> <p>If the status is <code>ONLINE</code>, the agent is configured properly and ready to use.</p> </li>
    /// <li> <p>If the status is <code>OFFLINE</code>, the agent has been out of contact with DataSync for five minutes or longer. This can happen for a few reasons. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/troubleshooting-datasync-agents.html#troubleshoot-agent-offline">What do I do if my agent is offline?</a> </p> </li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AgentStatus> {
        &self.status
    }
    /// <p>The last time that the agent was communicating with the DataSync service.</p>
    pub fn last_connection_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_connection_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last time that the agent was communicating with the DataSync service.</p>
    pub fn set_last_connection_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_connection_time = input;
        self
    }
    /// <p>The last time that the agent was communicating with the DataSync service.</p>
    pub fn get_last_connection_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_connection_time
    }
    /// <p>The time that the agent was <a href="https://docs.aws.amazon.com/datasync/latest/userguide/activate-agent.html">activated</a>.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the agent was <a href="https://docs.aws.amazon.com/datasync/latest/userguide/activate-agent.html">activated</a>.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the agent was <a href="https://docs.aws.amazon.com/datasync/latest/userguide/activate-agent.html">activated</a>.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The type of <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html">service endpoint</a> that your agent is connected to.</p>
    pub fn endpoint_type(mut self, input: crate::types::EndpointType) -> Self {
        self.endpoint_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html">service endpoint</a> that your agent is connected to.</p>
    pub fn set_endpoint_type(mut self, input: ::std::option::Option<crate::types::EndpointType>) -> Self {
        self.endpoint_type = input;
        self
    }
    /// <p>The type of <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html">service endpoint</a> that your agent is connected to.</p>
    pub fn get_endpoint_type(&self) -> &::std::option::Option<crate::types::EndpointType> {
        &self.endpoint_type
    }
    /// <p>The network configuration that the agent uses when connecting to a <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html#choose-service-endpoint-vpc">VPC service endpoint</a>.</p>
    pub fn private_link_config(mut self, input: crate::types::PrivateLinkConfig) -> Self {
        self.private_link_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network configuration that the agent uses when connecting to a <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html#choose-service-endpoint-vpc">VPC service endpoint</a>.</p>
    pub fn set_private_link_config(mut self, input: ::std::option::Option<crate::types::PrivateLinkConfig>) -> Self {
        self.private_link_config = input;
        self
    }
    /// <p>The network configuration that the agent uses when connecting to a <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html#choose-service-endpoint-vpc">VPC service endpoint</a>.</p>
    pub fn get_private_link_config(&self) -> &::std::option::Option<crate::types::PrivateLinkConfig> {
        &self.private_link_config
    }
    /// <p>The platform-related details about the agent, such as the version number.</p>
    pub fn platform(mut self, input: crate::types::Platform) -> Self {
        self.platform = ::std::option::Option::Some(input);
        self
    }
    /// <p>The platform-related details about the agent, such as the version number.</p>
    pub fn set_platform(mut self, input: ::std::option::Option<crate::types::Platform>) -> Self {
        self.platform = input;
        self
    }
    /// <p>The platform-related details about the agent, such as the version number.</p>
    pub fn get_platform(&self) -> &::std::option::Option<crate::types::Platform> {
        &self.platform
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeAgentOutput`](crate::operation::describe_agent::DescribeAgentOutput).
    pub fn build(self) -> crate::operation::describe_agent::DescribeAgentOutput {
        crate::operation::describe_agent::DescribeAgentOutput {
            agent_arn: self.agent_arn,
            name: self.name,
            status: self.status,
            last_connection_time: self.last_connection_time,
            creation_time: self.creation_time,
            endpoint_type: self.endpoint_type,
            private_link_config: self.private_link_config,
            platform: self.platform,
            _request_id: self._request_id,
        }
    }
}
