// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeTaskResponse</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTaskOutput {
    /// <p>The Amazon Resource Name (ARN) of the task that was described.</p>
    #[doc(hidden)]
    pub task_arn: std::option::Option<std::string::String>,
    /// <p>The status of the task that was described.</p>
    /// <p>For detailed information about task execution statuses, see Understanding Task Statuses in the <i>DataSync User Guide</i>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::TaskStatus>,
    /// <p>The name of the task that was described.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the task execution that is transferring files.</p>
    #[doc(hidden)]
    pub current_task_execution_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the source file system's location.</p>
    #[doc(hidden)]
    pub source_location_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services storage resource's location.</p>
    #[doc(hidden)]
    pub destination_location_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that was used to monitor and log events in the task.</p>
    /// <p>For more information on these groups, see Working with Log Groups and Log Streams in the <i>Amazon CloudWatch User Guide</i>.</p>
    #[doc(hidden)]
    pub cloud_watch_log_group_arn: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Names (ARNs) of the network interfaces created for your source location. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">Network interface requirements</a>.</p>
    #[doc(hidden)]
    pub source_network_interface_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The Amazon Resource Names (ARNs) of the network interfaces created for your destination location. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">Network interface requirements</a>.</p>
    #[doc(hidden)]
    pub destination_network_interface_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The configuration options that control the behavior of the <code>StartTaskExecution</code> operation. Some options include preserving file or object metadata and verifying data integrity.</p>
    /// <p>You can override these options for each task execution. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    #[doc(hidden)]
    pub options: std::option::Option<crate::types::Options>,
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    #[doc(hidden)]
    pub excludes: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    /// <p>The schedule used to periodically transfer files from a source to a destination location.</p>
    #[doc(hidden)]
    pub schedule: std::option::Option<crate::types::TaskSchedule>,
    /// <p>Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues. </p>
    #[doc(hidden)]
    pub error_detail: std::option::Option<std::string::String>,
    /// <p>The time that the task was created.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    #[doc(hidden)]
    pub includes: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    _request_id: Option<String>,
}
impl DescribeTaskOutput {
    /// <p>The Amazon Resource Name (ARN) of the task that was described.</p>
    pub fn task_arn(&self) -> std::option::Option<&str> {
        self.task_arn.as_deref()
    }
    /// <p>The status of the task that was described.</p>
    /// <p>For detailed information about task execution statuses, see Understanding Task Statuses in the <i>DataSync User Guide</i>.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::TaskStatus> {
        self.status.as_ref()
    }
    /// <p>The name of the task that was described.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the task execution that is transferring files.</p>
    pub fn current_task_execution_arn(&self) -> std::option::Option<&str> {
        self.current_task_execution_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the source file system's location.</p>
    pub fn source_location_arn(&self) -> std::option::Option<&str> {
        self.source_location_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services storage resource's location.</p>
    pub fn destination_location_arn(&self) -> std::option::Option<&str> {
        self.destination_location_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that was used to monitor and log events in the task.</p>
    /// <p>For more information on these groups, see Working with Log Groups and Log Streams in the <i>Amazon CloudWatch User Guide</i>.</p>
    pub fn cloud_watch_log_group_arn(&self) -> std::option::Option<&str> {
        self.cloud_watch_log_group_arn.as_deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the network interfaces created for your source location. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">Network interface requirements</a>.</p>
    pub fn source_network_interface_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.source_network_interface_arns.as_deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of the network interfaces created for your destination location. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">Network interface requirements</a>.</p>
    pub fn destination_network_interface_arns(
        &self,
    ) -> std::option::Option<&[std::string::String]> {
        self.destination_network_interface_arns.as_deref()
    }
    /// <p>The configuration options that control the behavior of the <code>StartTaskExecution</code> operation. Some options include preserving file or object metadata and verifying data integrity.</p>
    /// <p>You can override these options for each task execution. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    pub fn options(&self) -> std::option::Option<&crate::types::Options> {
        self.options.as_ref()
    }
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn excludes(&self) -> std::option::Option<&[crate::types::FilterRule]> {
        self.excludes.as_deref()
    }
    /// <p>The schedule used to periodically transfer files from a source to a destination location.</p>
    pub fn schedule(&self) -> std::option::Option<&crate::types::TaskSchedule> {
        self.schedule.as_ref()
    }
    /// <p>Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues. </p>
    pub fn error_detail(&self) -> std::option::Option<&str> {
        self.error_detail.as_deref()
    }
    /// <p>The time that the task was created.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn includes(&self) -> std::option::Option<&[crate::types::FilterRule]> {
        self.includes.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeTaskOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeTaskOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTaskOutput`](crate::operation::describe_task::DescribeTaskOutput).
    pub fn builder() -> crate::operation::describe_task::builders::DescribeTaskOutputBuilder {
        crate::operation::describe_task::builders::DescribeTaskOutputBuilder::default()
    }
}

/// A builder for [`DescribeTaskOutput`](crate::operation::describe_task::DescribeTaskOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeTaskOutputBuilder {
    pub(crate) task_arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::TaskStatus>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) current_task_execution_arn: std::option::Option<std::string::String>,
    pub(crate) source_location_arn: std::option::Option<std::string::String>,
    pub(crate) destination_location_arn: std::option::Option<std::string::String>,
    pub(crate) cloud_watch_log_group_arn: std::option::Option<std::string::String>,
    pub(crate) source_network_interface_arns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) destination_network_interface_arns:
        std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) options: std::option::Option<crate::types::Options>,
    pub(crate) excludes: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) schedule: std::option::Option<crate::types::TaskSchedule>,
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) error_detail: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) includes: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    _request_id: Option<String>,
}
impl DescribeTaskOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the task that was described.</p>
    pub fn task_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.task_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the task that was described.</p>
    pub fn set_task_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.task_arn = input;
        self
    }
    /// <p>The status of the task that was described.</p>
    /// <p>For detailed information about task execution statuses, see Understanding Task Statuses in the <i>DataSync User Guide</i>.</p>
    pub fn status(mut self, input: crate::types::TaskStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the task that was described.</p>
    /// <p>For detailed information about task execution statuses, see Understanding Task Statuses in the <i>DataSync User Guide</i>.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::TaskStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The name of the task that was described.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the task that was described.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the task execution that is transferring files.</p>
    pub fn current_task_execution_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_task_execution_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the task execution that is transferring files.</p>
    pub fn set_current_task_execution_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.current_task_execution_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source file system's location.</p>
    pub fn source_location_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_location_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the source file system's location.</p>
    pub fn set_source_location_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_location_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services storage resource's location.</p>
    pub fn destination_location_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.destination_location_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon Web Services storage resource's location.</p>
    pub fn set_destination_location_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.destination_location_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that was used to monitor and log events in the task.</p>
    /// <p>For more information on these groups, see Working with Log Groups and Log Streams in the <i>Amazon CloudWatch User Guide</i>.</p>
    pub fn cloud_watch_log_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cloud_watch_log_group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon CloudWatch log group that was used to monitor and log events in the task.</p>
    /// <p>For more information on these groups, see Working with Log Groups and Log Streams in the <i>Amazon CloudWatch User Guide</i>.</p>
    pub fn set_cloud_watch_log_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cloud_watch_log_group_arn = input;
        self
    }
    /// Appends an item to `source_network_interface_arns`.
    ///
    /// To override the contents of this collection use [`set_source_network_interface_arns`](Self::set_source_network_interface_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the network interfaces created for your source location. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">Network interface requirements</a>.</p>
    pub fn source_network_interface_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.source_network_interface_arns.unwrap_or_default();
        v.push(input.into());
        self.source_network_interface_arns = Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the network interfaces created for your source location. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">Network interface requirements</a>.</p>
    pub fn set_source_network_interface_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.source_network_interface_arns = input;
        self
    }
    /// Appends an item to `destination_network_interface_arns`.
    ///
    /// To override the contents of this collection use [`set_destination_network_interface_arns`](Self::set_destination_network_interface_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of the network interfaces created for your destination location. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">Network interface requirements</a>.</p>
    pub fn destination_network_interface_arns(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        let mut v = self.destination_network_interface_arns.unwrap_or_default();
        v.push(input.into());
        self.destination_network_interface_arns = Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of the network interfaces created for your destination location. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">Network interface requirements</a>.</p>
    pub fn set_destination_network_interface_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.destination_network_interface_arns = input;
        self
    }
    /// <p>The configuration options that control the behavior of the <code>StartTaskExecution</code> operation. Some options include preserving file or object metadata and verifying data integrity.</p>
    /// <p>You can override these options for each task execution. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    pub fn options(mut self, input: crate::types::Options) -> Self {
        self.options = Some(input);
        self
    }
    /// <p>The configuration options that control the behavior of the <code>StartTaskExecution</code> operation. Some options include preserving file or object metadata and verifying data integrity.</p>
    /// <p>You can override these options for each task execution. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_StartTaskExecution.html">StartTaskExecution</a>.</p>
    pub fn set_options(mut self, input: std::option::Option<crate::types::Options>) -> Self {
        self.options = input;
        self
    }
    /// Appends an item to `excludes`.
    ///
    /// To override the contents of this collection use [`set_excludes`](Self::set_excludes).
    ///
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn excludes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.excludes.unwrap_or_default();
        v.push(input);
        self.excludes = Some(v);
        self
    }
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn set_excludes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    ) -> Self {
        self.excludes = input;
        self
    }
    /// <p>The schedule used to periodically transfer files from a source to a destination location.</p>
    pub fn schedule(mut self, input: crate::types::TaskSchedule) -> Self {
        self.schedule = Some(input);
        self
    }
    /// <p>The schedule used to periodically transfer files from a source to a destination location.</p>
    pub fn set_schedule(mut self, input: std::option::Option<crate::types::TaskSchedule>) -> Self {
        self.schedule = input;
        self
    }
    /// <p>Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues. </p>
    pub fn error_detail(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_detail = Some(input.into());
        self
    }
    /// <p>Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues. </p>
    pub fn set_error_detail(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_detail = input;
        self
    }
    /// <p>The time that the task was created.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The time that the task was created.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// Appends an item to `includes`.
    ///
    /// To override the contents of this collection use [`set_includes`](Self::set_includes).
    ///
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn includes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.includes.unwrap_or_default();
        v.push(input);
        self.includes = Some(v);
        self
    }
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn set_includes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FilterRule>>,
    ) -> Self {
        self.includes = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTaskOutput`](crate::operation::describe_task::DescribeTaskOutput).
    pub fn build(self) -> crate::operation::describe_task::DescribeTaskOutput {
        crate::operation::describe_task::DescribeTaskOutput {
            task_arn: self.task_arn,
            status: self.status,
            name: self.name,
            current_task_execution_arn: self.current_task_execution_arn,
            source_location_arn: self.source_location_arn,
            destination_location_arn: self.destination_location_arn,
            cloud_watch_log_group_arn: self.cloud_watch_log_group_arn,
            source_network_interface_arns: self.source_network_interface_arns,
            destination_network_interface_arns: self.destination_network_interface_arns,
            options: self.options,
            excludes: self.excludes,
            schedule: self.schedule,
            error_code: self.error_code,
            error_detail: self.error_detail,
            creation_time: self.creation_time,
            includes: self.includes,
            _request_id: self._request_id,
        }
    }
}
