// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_location_fsx_ontap::_create_location_fsx_ontap_output::CreateLocationFsxOntapOutputBuilder;

pub use crate::operation::create_location_fsx_ontap::_create_location_fsx_ontap_input::CreateLocationFsxOntapInputBuilder;

impl crate::operation::create_location_fsx_ontap::builders::CreateLocationFsxOntapInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_location_fsx_ontap();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateLocationFsxOntap`.
///
/// <p>Creates a transfer <i>location</i> for an Amazon FSx for NetApp ONTAP file system. DataSync can use this location as a source or destination for transferring data.</p>
/// <p>Before you begin, make sure that you understand how DataSync <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-ontap-location.html#create-ontap-location-access">accesses FSx for ONTAP file systems</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateLocationFsxOntapFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_location_fsx_ontap::builders::CreateLocationFsxOntapInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapOutput,
        crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapError,
    > for CreateLocationFsxOntapFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapOutput,
            crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateLocationFsxOntapFluentBuilder {
    /// Creates a new `CreateLocationFsxOntap`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateLocationFsxOntap as a reference.
    pub fn as_input(&self) -> &crate::operation::create_location_fsx_ontap::builders::CreateLocationFsxOntapInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_location_fsx_ontap::CreateLocationFsxOntap::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_location_fsx_ontap::CreateLocationFsxOntap::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapOutput,
        crate::operation::create_location_fsx_ontap::CreateLocationFsxOntapError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
    pub fn protocol(mut self, input: crate::types::FsxProtocol) -> Self {
        self.inner = self.inner.protocol(input);
        self
    }
    /// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::FsxProtocol>) -> Self {
        self.inner = self.inner.set_protocol(input);
        self
    }
    /// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::FsxProtocol> {
        self.inner.get_protocol()
    }
    ///
    /// Appends an item to `SecurityGroupArns`.
    ///
    /// To override the contents of this collection use [`set_security_group_arns`](Self::set_security_group_arns).
    ///
    /// <p>Specifies the Amazon EC2 security groups that provide access to your file system's preferred subnet.</p>
    /// <p>The security groups must allow outbound traffic on the following ports (depending on the protocol you use):</p>
    /// <ul>
    /// <li>
    /// <p><b>Network File System (NFS)</b>: TCP ports 111, 635, and 2049</p></li>
    /// <li>
    /// <p><b>Server Message Block (SMB)</b>: TCP port 445</p></li>
    /// </ul>
    /// <p>Your file system's security groups must also allow inbound traffic on the same ports.</p>
    pub fn security_group_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.security_group_arns(input.into());
        self
    }
    /// <p>Specifies the Amazon EC2 security groups that provide access to your file system's preferred subnet.</p>
    /// <p>The security groups must allow outbound traffic on the following ports (depending on the protocol you use):</p>
    /// <ul>
    /// <li>
    /// <p><b>Network File System (NFS)</b>: TCP ports 111, 635, and 2049</p></li>
    /// <li>
    /// <p><b>Server Message Block (SMB)</b>: TCP port 445</p></li>
    /// </ul>
    /// <p>Your file system's security groups must also allow inbound traffic on the same ports.</p>
    pub fn set_security_group_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_security_group_arns(input);
        self
    }
    /// <p>Specifies the Amazon EC2 security groups that provide access to your file system's preferred subnet.</p>
    /// <p>The security groups must allow outbound traffic on the following ports (depending on the protocol you use):</p>
    /// <ul>
    /// <li>
    /// <p><b>Network File System (NFS)</b>: TCP ports 111, 635, and 2049</p></li>
    /// <li>
    /// <p><b>Server Message Block (SMB)</b>: TCP port 445</p></li>
    /// </ul>
    /// <p>Your file system's security groups must also allow inbound traffic on the same ports.</p>
    pub fn get_security_group_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_security_group_arns()
    }
    /// <p>Specifies the ARN of the storage virtual machine (SVM) in your file system where you want to copy data to or from.</p>
    pub fn storage_virtual_machine_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.storage_virtual_machine_arn(input.into());
        self
    }
    /// <p>Specifies the ARN of the storage virtual machine (SVM) in your file system where you want to copy data to or from.</p>
    pub fn set_storage_virtual_machine_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_storage_virtual_machine_arn(input);
        self
    }
    /// <p>Specifies the ARN of the storage virtual machine (SVM) in your file system where you want to copy data to or from.</p>
    pub fn get_storage_virtual_machine_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_storage_virtual_machine_arn()
    }
    /// <p>Specifies a path to the file share in the SVM where you'll copy your data.</p>
    /// <p>You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares). For example, your mount path might be <code>/vol1</code>, <code>/vol1/tree1</code>, or <code>/share1</code>.</p><note>
    /// <p>Don't specify a junction path in the SVM's root volume. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html">Managing FSx for ONTAP storage virtual machines</a> in the <i>Amazon FSx for NetApp ONTAP User Guide</i>.</p>
    /// </note>
    pub fn subdirectory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.subdirectory(input.into());
        self
    }
    /// <p>Specifies a path to the file share in the SVM where you'll copy your data.</p>
    /// <p>You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares). For example, your mount path might be <code>/vol1</code>, <code>/vol1/tree1</code>, or <code>/share1</code>.</p><note>
    /// <p>Don't specify a junction path in the SVM's root volume. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html">Managing FSx for ONTAP storage virtual machines</a> in the <i>Amazon FSx for NetApp ONTAP User Guide</i>.</p>
    /// </note>
    pub fn set_subdirectory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_subdirectory(input);
        self
    }
    /// <p>Specifies a path to the file share in the SVM where you'll copy your data.</p>
    /// <p>You can specify a junction path (also known as a mount point), qtree path (for NFS file shares), or share name (for SMB file shares). For example, your mount path might be <code>/vol1</code>, <code>/vol1/tree1</code>, or <code>/share1</code>.</p><note>
    /// <p>Don't specify a junction path in the SVM's root volume. For more information, see <a href="https://docs.aws.amazon.com/fsx/latest/ONTAPGuide/managing-svms.html">Managing FSx for ONTAP storage virtual machines</a> in the <i>Amazon FSx for NetApp ONTAP User Guide</i>.</p>
    /// </note>
    pub fn get_subdirectory(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_subdirectory()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your location.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>> {
        self.inner.get_tags()
    }
}
