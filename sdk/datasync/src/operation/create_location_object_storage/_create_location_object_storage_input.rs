// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>CreateLocationObjectStorageRequest</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateLocationObjectStorageInput {
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub server_hostname: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub server_port: ::std::option::Option<i32>,
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub server_protocol: ::std::option::Option<crate::types::ObjectStorageServerProtocol>,
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix. </p>
    pub subdirectory: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub bucket_name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub access_key: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub secret_key: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub agent_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>,
    /// <p>Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The file you specify must include the following:</p>
    /// <ul>
    /// <li> <p>The certificate of the signing certificate authority (CA)</p> </li>
    /// <li> <p>Any intermediate certificates</p> </li>
    /// <li> <p>base64 encoding</p> </li>
    /// <li> <p>A <code>.pem</code> extension</p> </li>
    /// </ul>
    /// <p>The file can be up to 32768 bytes (before base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub server_certificate: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl CreateLocationObjectStorageInput {
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub fn server_hostname(&self) -> ::std::option::Option<&str> {
        self.server_hostname.as_deref()
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn server_port(&self) -> ::std::option::Option<i32> {
        self.server_port
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn server_protocol(&self) -> ::std::option::Option<&crate::types::ObjectStorageServerProtocol> {
        self.server_protocol.as_ref()
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix. </p>
    pub fn subdirectory(&self) -> ::std::option::Option<&str> {
        self.subdirectory.as_deref()
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub fn bucket_name(&self) -> ::std::option::Option<&str> {
        self.bucket_name.as_deref()
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn access_key(&self) -> ::std::option::Option<&str> {
        self.access_key.as_deref()
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn secret_key(&self) -> ::std::option::Option<&str> {
        self.secret_key.as_deref()
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_arns.is_none()`.
    pub fn agent_arns(&self) -> &[::std::string::String] {
        self.agent_arns.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::TagListEntry] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The file you specify must include the following:</p>
    /// <ul>
    /// <li> <p>The certificate of the signing certificate authority (CA)</p> </li>
    /// <li> <p>Any intermediate certificates</p> </li>
    /// <li> <p>base64 encoding</p> </li>
    /// <li> <p>A <code>.pem</code> extension</p> </li>
    /// </ul>
    /// <p>The file can be up to 32768 bytes (before base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn server_certificate(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.server_certificate.as_ref()
    }
}
impl ::std::fmt::Debug for CreateLocationObjectStorageInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLocationObjectStorageInput");
        formatter.field("server_hostname", &self.server_hostname);
        formatter.field("server_port", &self.server_port);
        formatter.field("server_protocol", &self.server_protocol);
        formatter.field("subdirectory", &self.subdirectory);
        formatter.field("bucket_name", &self.bucket_name);
        formatter.field("access_key", &self.access_key);
        formatter.field("secret_key", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_arns", &self.agent_arns);
        formatter.field("tags", &self.tags);
        formatter.field("server_certificate", &self.server_certificate);
        formatter.finish()
    }
}
impl CreateLocationObjectStorageInput {
    /// Creates a new builder-style object to manufacture [`CreateLocationObjectStorageInput`](crate::operation::create_location_object_storage::CreateLocationObjectStorageInput).
    pub fn builder() -> crate::operation::create_location_object_storage::builders::CreateLocationObjectStorageInputBuilder {
        crate::operation::create_location_object_storage::builders::CreateLocationObjectStorageInputBuilder::default()
    }
}

/// A builder for [`CreateLocationObjectStorageInput`](crate::operation::create_location_object_storage::CreateLocationObjectStorageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateLocationObjectStorageInputBuilder {
    pub(crate) server_hostname: ::std::option::Option<::std::string::String>,
    pub(crate) server_port: ::std::option::Option<i32>,
    pub(crate) server_protocol: ::std::option::Option<crate::types::ObjectStorageServerProtocol>,
    pub(crate) subdirectory: ::std::option::Option<::std::string::String>,
    pub(crate) bucket_name: ::std::option::Option<::std::string::String>,
    pub(crate) access_key: ::std::option::Option<::std::string::String>,
    pub(crate) secret_key: ::std::option::Option<::std::string::String>,
    pub(crate) agent_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>,
    pub(crate) server_certificate: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl CreateLocationObjectStorageInputBuilder {
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    /// This field is required.
    pub fn server_hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.server_hostname = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub fn set_server_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.server_hostname = input;
        self
    }
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub fn get_server_hostname(&self) -> &::std::option::Option<::std::string::String> {
        &self.server_hostname
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn server_port(mut self, input: i32) -> Self {
        self.server_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn set_server_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.server_port = input;
        self
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn get_server_port(&self) -> &::std::option::Option<i32> {
        &self.server_port
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn server_protocol(mut self, input: crate::types::ObjectStorageServerProtocol) -> Self {
        self.server_protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn set_server_protocol(mut self, input: ::std::option::Option<crate::types::ObjectStorageServerProtocol>) -> Self {
        self.server_protocol = input;
        self
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn get_server_protocol(&self) -> &::std::option::Option<crate::types::ObjectStorageServerProtocol> {
        &self.server_protocol
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix. </p>
    pub fn subdirectory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdirectory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix. </p>
    pub fn set_subdirectory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdirectory = input;
        self
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix. </p>
    pub fn get_subdirectory(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdirectory
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    /// This field is required.
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bucket_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bucket_name = input;
        self
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bucket_name
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn access_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn set_access_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_key = input;
        self
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn get_access_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_key
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn secret_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn set_secret_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_key = input;
        self
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn get_secret_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_key
    }
    /// Appends an item to `agent_arns`.
    ///
    /// To override the contents of this collection use [`set_agent_arns`](Self::set_agent_arns).
    ///
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn agent_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.agent_arns.unwrap_or_default();
        v.push(input.into());
        self.agent_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn set_agent_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.agent_arns = input;
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn get_agent_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.agent_arns
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>> {
        &self.tags
    }
    /// <p>Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The file you specify must include the following:</p>
    /// <ul>
    /// <li> <p>The certificate of the signing certificate authority (CA)</p> </li>
    /// <li> <p>Any intermediate certificates</p> </li>
    /// <li> <p>base64 encoding</p> </li>
    /// <li> <p>A <code>.pem</code> extension</p> </li>
    /// </ul>
    /// <p>The file can be up to 32768 bytes (before base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn server_certificate(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.server_certificate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The file you specify must include the following:</p>
    /// <ul>
    /// <li> <p>The certificate of the signing certificate authority (CA)</p> </li>
    /// <li> <p>Any intermediate certificates</p> </li>
    /// <li> <p>base64 encoding</p> </li>
    /// <li> <p>A <code>.pem</code> extension</p> </li>
    /// </ul>
    /// <p>The file can be up to 32768 bytes (before base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn set_server_certificate(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.server_certificate = input;
        self
    }
    /// <p>Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The file you specify must include the following:</p>
    /// <ul>
    /// <li> <p>The certificate of the signing certificate authority (CA)</p> </li>
    /// <li> <p>Any intermediate certificates</p> </li>
    /// <li> <p>base64 encoding</p> </li>
    /// <li> <p>A <code>.pem</code> extension</p> </li>
    /// </ul>
    /// <p>The file can be up to 32768 bytes (before base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn get_server_certificate(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.server_certificate
    }
    /// Consumes the builder and constructs a [`CreateLocationObjectStorageInput`](crate::operation::create_location_object_storage::CreateLocationObjectStorageInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_location_object_storage::CreateLocationObjectStorageInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_location_object_storage::CreateLocationObjectStorageInput {
            server_hostname: self.server_hostname,
            server_port: self.server_port,
            server_protocol: self.server_protocol,
            subdirectory: self.subdirectory,
            bucket_name: self.bucket_name,
            access_key: self.access_key,
            secret_key: self.secret_key,
            agent_arns: self.agent_arns,
            tags: self.tags,
            server_certificate: self.server_certificate,
        })
    }
}
impl ::std::fmt::Debug for CreateLocationObjectStorageInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLocationObjectStorageInputBuilder");
        formatter.field("server_hostname", &self.server_hostname);
        formatter.field("server_port", &self.server_port);
        formatter.field("server_protocol", &self.server_protocol);
        formatter.field("subdirectory", &self.subdirectory);
        formatter.field("bucket_name", &self.bucket_name);
        formatter.field("access_key", &self.access_key);
        formatter.field("secret_key", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_arns", &self.agent_arns);
        formatter.field("tags", &self.tags);
        formatter.field("server_certificate", &self.server_certificate);
        formatter.finish()
    }
}
