// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_location_object_storage::_create_location_object_storage_output::CreateLocationObjectStorageOutputBuilder;

pub use crate::operation::create_location_object_storage::_create_location_object_storage_input::CreateLocationObjectStorageInputBuilder;

impl crate::operation::create_location_object_storage::builders::CreateLocationObjectStorageInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_location_object_storage::CreateLocationObjectStorageOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_location_object_storage::CreateLocationObjectStorageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_location_object_storage();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateLocationObjectStorage`.
///
/// <p>Creates a transfer <i>location</i> for an object storage system. DataSync can use this location as a source or destination for transferring data.</p>
/// <p>Before you begin, make sure that you understand the <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-object-location.html#create-object-location-prerequisites">prerequisites</a> for DataSync to work with object storage systems.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateLocationObjectStorageFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_location_object_storage::builders::CreateLocationObjectStorageInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_location_object_storage::CreateLocationObjectStorageOutput,
        crate::operation::create_location_object_storage::CreateLocationObjectStorageError,
    > for CreateLocationObjectStorageFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_location_object_storage::CreateLocationObjectStorageOutput,
            crate::operation::create_location_object_storage::CreateLocationObjectStorageError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateLocationObjectStorageFluentBuilder {
    /// Creates a new `CreateLocationObjectStorage`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateLocationObjectStorage as a reference.
    pub fn as_input(&self) -> &crate::operation::create_location_object_storage::builders::CreateLocationObjectStorageInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_location_object_storage::CreateLocationObjectStorageOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_location_object_storage::CreateLocationObjectStorageError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_location_object_storage::CreateLocationObjectStorage::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_location_object_storage::CreateLocationObjectStorage::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_location_object_storage::CreateLocationObjectStorageOutput,
        crate::operation::create_location_object_storage::CreateLocationObjectStorageError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub fn server_hostname(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.server_hostname(input.into());
        self
    }
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub fn set_server_hostname(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_server_hostname(input);
        self
    }
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub fn get_server_hostname(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_server_hostname()
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn server_port(mut self, input: i32) -> Self {
        self.inner = self.inner.server_port(input);
        self
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn set_server_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_server_port(input);
        self
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn get_server_port(&self) -> &::std::option::Option<i32> {
        self.inner.get_server_port()
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn server_protocol(mut self, input: crate::types::ObjectStorageServerProtocol) -> Self {
        self.inner = self.inner.server_protocol(input);
        self
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn set_server_protocol(mut self, input: ::std::option::Option<crate::types::ObjectStorageServerProtocol>) -> Self {
        self.inner = self.inner.set_server_protocol(input);
        self
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn get_server_protocol(&self) -> &::std::option::Option<crate::types::ObjectStorageServerProtocol> {
        self.inner.get_server_protocol()
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.</p>
    pub fn subdirectory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.subdirectory(input.into());
        self
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.</p>
    pub fn set_subdirectory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_subdirectory(input);
        self
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix.</p>
    pub fn get_subdirectory(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_subdirectory()
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub fn bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.bucket_name(input.into());
        self
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub fn set_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_bucket_name(input);
        self
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub fn get_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_bucket_name()
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn access_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.access_key(input.into());
        self
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn set_access_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_access_key(input);
        self
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn get_access_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_access_key()
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn secret_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.secret_key(input.into());
        self
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn set_secret_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_secret_key(input);
        self
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn get_secret_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_secret_key()
    }
    ///
    /// Appends an item to `AgentArns`.
    ///
    /// To override the contents of this collection use [`set_agent_arns`](Self::set_agent_arns).
    ///
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn agent_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.agent_arns(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn set_agent_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_agent_arns(input);
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn get_agent_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_agent_arns()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>> {
        self.inner.get_tags()
    }
    /// <p>Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The file you specify must include the following:</p>
    /// <ul>
    /// <li>
    /// <p>The certificate of the signing certificate authority (CA)</p></li>
    /// <li>
    /// <p>Any intermediate certificates</p></li>
    /// <li>
    /// <p>base64 encoding</p></li>
    /// <li>
    /// <p>A <code>.pem</code> extension</p></li>
    /// </ul>
    /// <p>The file can be up to 32768 bytes (before base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn server_certificate(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.server_certificate(input);
        self
    }
    /// <p>Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The file you specify must include the following:</p>
    /// <ul>
    /// <li>
    /// <p>The certificate of the signing certificate authority (CA)</p></li>
    /// <li>
    /// <p>Any intermediate certificates</p></li>
    /// <li>
    /// <p>base64 encoding</p></li>
    /// <li>
    /// <p>A <code>.pem</code> extension</p></li>
    /// </ul>
    /// <p>The file can be up to 32768 bytes (before base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn set_server_certificate(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.inner = self.inner.set_server_certificate(input);
        self
    }
    /// <p>Specifies a file with the certificates that are used to sign the object storage server's certificate (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The file you specify must include the following:</p>
    /// <ul>
    /// <li>
    /// <p>The certificate of the signing certificate authority (CA)</p></li>
    /// <li>
    /// <p>Any intermediate certificates</p></li>
    /// <li>
    /// <p>base64 encoding</p></li>
    /// <li>
    /// <p>A <code>.pem</code> extension</p></li>
    /// </ul>
    /// <p>The file can be up to 32768 bytes (before base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn get_server_certificate(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        self.inner.get_server_certificate()
    }
}
