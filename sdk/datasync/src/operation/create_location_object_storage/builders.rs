// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_location_object_storage::_create_location_object_storage_output::CreateLocationObjectStorageOutputBuilder;

pub use crate::operation::create_location_object_storage::_create_location_object_storage_input::CreateLocationObjectStorageInputBuilder;

/// Fluent builder constructing a request to `CreateLocationObjectStorage`.
///
/// <p>Creates an endpoint for an object storage system that DataSync can access for a transfer. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-object-location.html">Creating a location for object storage</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateLocationObjectStorageFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_location_object_storage::builders::CreateLocationObjectStorageInputBuilder
            }
impl CreateLocationObjectStorageFluentBuilder {
    /// Creates a new `CreateLocationObjectStorage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_location_object_storage::CreateLocationObjectStorage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_location_object_storage::CreateLocationObjectStorageError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_location_object_storage::CreateLocationObjectStorageOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_location_object_storage::CreateLocationObjectStorageError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub fn server_hostname(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.server_hostname(input.into());
        self
    }
    /// <p>Specifies the domain name or IP address of the object storage server. A DataSync agent uses this hostname to mount the object storage server in a network.</p>
    pub fn set_server_hostname(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_server_hostname(input);
        self
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn server_port(mut self, input: i32) -> Self {
        self.inner = self.inner.server_port(input);
        self
    }
    /// <p>Specifies the port that your object storage server accepts inbound network traffic on (for example, port 443).</p>
    pub fn set_server_port(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_server_port(input);
        self
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn server_protocol(mut self, input: crate::types::ObjectStorageServerProtocol) -> Self {
        self.inner = self.inner.server_protocol(input);
        self
    }
    /// <p>Specifies the protocol that your object storage server uses to communicate.</p>
    pub fn set_server_protocol(
        mut self,
        input: std::option::Option<crate::types::ObjectStorageServerProtocol>,
    ) -> Self {
        self.inner = self.inner.set_server_protocol(input);
        self
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix. </p>
    pub fn subdirectory(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.subdirectory(input.into());
        self
    }
    /// <p>Specifies the object prefix for your object storage server. If this is a source location, DataSync only copies objects with this prefix. If this is a destination location, DataSync writes all objects with this prefix. </p>
    pub fn set_subdirectory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_subdirectory(input);
        self
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub fn bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bucket_name(input.into());
        self
    }
    /// <p>Specifies the name of the object storage bucket involved in the transfer.</p>
    pub fn set_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bucket_name(input);
        self
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn access_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.access_key(input.into());
        self
    }
    /// <p>Specifies the access key (for example, a user name) if credentials are required to authenticate with the object storage server.</p>
    pub fn set_access_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_access_key(input);
        self
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn secret_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.secret_key(input.into());
        self
    }
    /// <p>Specifies the secret key (for example, a password) if credentials are required to authenticate with the object storage server.</p>
    pub fn set_secret_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_secret_key(input);
        self
    }
    /// Appends an item to `AgentArns`.
    ///
    /// To override the contents of this collection use [`set_agent_arns`](Self::set_agent_arns).
    ///
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn agent_arns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.agent_arns(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the DataSync agents that can securely connect with your location.</p>
    pub fn set_agent_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_agent_arns(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>Specifies the key-value pair that represents a tag that you want to add to the resource. Tags can help you manage, filter, and search for your resources. We recommend creating a name tag for your location.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TagListEntry>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>Specifies a certificate to authenticate with an object storage system that uses a private or self-signed certificate authority (CA). You must specify a Base64-encoded <code>.pem</code> file (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The certificate can be up to 32768 bytes (before Base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn server_certificate(mut self, input: aws_smithy_types::Blob) -> Self {
        self.inner = self.inner.server_certificate(input);
        self
    }
    /// <p>Specifies a certificate to authenticate with an object storage system that uses a private or self-signed certificate authority (CA). You must specify a Base64-encoded <code>.pem</code> file (for example, <code>file:///home/user/.ssh/storage_sys_certificate.pem</code>). The certificate can be up to 32768 bytes (before Base64 encoding).</p>
    /// <p>To use this parameter, configure <code>ServerProtocol</code> to <code>HTTPS</code>.</p>
    pub fn set_server_certificate(
        mut self,
        input: std::option::Option<aws_smithy_types::Blob>,
    ) -> Self {
        self.inner = self.inner.set_server_certificate(input);
        self
    }
}
