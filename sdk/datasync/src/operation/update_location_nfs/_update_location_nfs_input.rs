// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateLocationNfsInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the NFS transfer location that you want to update.</p>
    pub location_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the export path in your NFS file server that you want DataSync to mount.</p>
    /// <p>This path (or a subdirectory of the path) is where DataSync transfers data to or from. For information on configuring an export for DataSync, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#accessing-nfs">Accessing NFS file servers</a>.</p>
    pub subdirectory: ::std::option::Option<::std::string::String>,
    /// <p>The DataSync agents that are connecting to a Network File System (NFS) location.</p>
    pub on_prem_config: ::std::option::Option<crate::types::OnPremConfig>,
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    pub mount_options: ::std::option::Option<crate::types::NfsMountOptions>,
}
impl UpdateLocationNfsInput {
    /// <p>Specifies the Amazon Resource Name (ARN) of the NFS transfer location that you want to update.</p>
    pub fn location_arn(&self) -> ::std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>Specifies the export path in your NFS file server that you want DataSync to mount.</p>
    /// <p>This path (or a subdirectory of the path) is where DataSync transfers data to or from. For information on configuring an export for DataSync, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#accessing-nfs">Accessing NFS file servers</a>.</p>
    pub fn subdirectory(&self) -> ::std::option::Option<&str> {
        self.subdirectory.as_deref()
    }
    /// <p>The DataSync agents that are connecting to a Network File System (NFS) location.</p>
    pub fn on_prem_config(&self) -> ::std::option::Option<&crate::types::OnPremConfig> {
        self.on_prem_config.as_ref()
    }
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    pub fn mount_options(&self) -> ::std::option::Option<&crate::types::NfsMountOptions> {
        self.mount_options.as_ref()
    }
}
impl UpdateLocationNfsInput {
    /// Creates a new builder-style object to manufacture [`UpdateLocationNfsInput`](crate::operation::update_location_nfs::UpdateLocationNfsInput).
    pub fn builder() -> crate::operation::update_location_nfs::builders::UpdateLocationNfsInputBuilder {
        crate::operation::update_location_nfs::builders::UpdateLocationNfsInputBuilder::default()
    }
}

/// A builder for [`UpdateLocationNfsInput`](crate::operation::update_location_nfs::UpdateLocationNfsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateLocationNfsInputBuilder {
    pub(crate) location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) subdirectory: ::std::option::Option<::std::string::String>,
    pub(crate) on_prem_config: ::std::option::Option<crate::types::OnPremConfig>,
    pub(crate) mount_options: ::std::option::Option<crate::types::NfsMountOptions>,
}
impl UpdateLocationNfsInputBuilder {
    /// <p>Specifies the Amazon Resource Name (ARN) of the NFS transfer location that you want to update.</p>
    /// This field is required.
    pub fn location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the NFS transfer location that you want to update.</p>
    pub fn set_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the NFS transfer location that you want to update.</p>
    pub fn get_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_arn
    }
    /// <p>Specifies the export path in your NFS file server that you want DataSync to mount.</p>
    /// <p>This path (or a subdirectory of the path) is where DataSync transfers data to or from. For information on configuring an export for DataSync, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#accessing-nfs">Accessing NFS file servers</a>.</p>
    pub fn subdirectory(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subdirectory = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the export path in your NFS file server that you want DataSync to mount.</p>
    /// <p>This path (or a subdirectory of the path) is where DataSync transfers data to or from. For information on configuring an export for DataSync, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#accessing-nfs">Accessing NFS file servers</a>.</p>
    pub fn set_subdirectory(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subdirectory = input;
        self
    }
    /// <p>Specifies the export path in your NFS file server that you want DataSync to mount.</p>
    /// <p>This path (or a subdirectory of the path) is where DataSync transfers data to or from. For information on configuring an export for DataSync, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-nfs-location.html#accessing-nfs">Accessing NFS file servers</a>.</p>
    pub fn get_subdirectory(&self) -> &::std::option::Option<::std::string::String> {
        &self.subdirectory
    }
    /// <p>The DataSync agents that are connecting to a Network File System (NFS) location.</p>
    pub fn on_prem_config(mut self, input: crate::types::OnPremConfig) -> Self {
        self.on_prem_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The DataSync agents that are connecting to a Network File System (NFS) location.</p>
    pub fn set_on_prem_config(mut self, input: ::std::option::Option<crate::types::OnPremConfig>) -> Self {
        self.on_prem_config = input;
        self
    }
    /// <p>The DataSync agents that are connecting to a Network File System (NFS) location.</p>
    pub fn get_on_prem_config(&self) -> &::std::option::Option<crate::types::OnPremConfig> {
        &self.on_prem_config
    }
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    pub fn mount_options(mut self, input: crate::types::NfsMountOptions) -> Self {
        self.mount_options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    pub fn set_mount_options(mut self, input: ::std::option::Option<crate::types::NfsMountOptions>) -> Self {
        self.mount_options = input;
        self
    }
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    pub fn get_mount_options(&self) -> &::std::option::Option<crate::types::NfsMountOptions> {
        &self.mount_options
    }
    /// Consumes the builder and constructs a [`UpdateLocationNfsInput`](crate::operation::update_location_nfs::UpdateLocationNfsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_location_nfs::UpdateLocationNfsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_location_nfs::UpdateLocationNfsInput {
            location_arn: self.location_arn,
            subdirectory: self.subdirectory,
            on_prem_config: self.on_prem_config,
            mount_options: self.mount_options,
        })
    }
}
