// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateLocationSmbInput {
    /// <p>The Amazon Resource Name (ARN) of the SMB location to update.</p>
    #[doc(hidden)]
    pub location_arn: std::option::Option<std::string::String>,
    /// <p>The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination. The SMB path should be a path that's exported by the SMB server, or a subdirectory of that path. The path should be such that it can be mounted by other SMB clients in your network.</p> <note>
    /// <p> <code>Subdirectory</code> must be specified with forward slashes. For example, <code>/path/to/folder</code>.</p>
    /// </note>
    /// <p>To transfer all the data in the folder that you specified, DataSync must have permissions to mount the SMB share and to access all the data in that share. To ensure this, do either of the following:</p>
    /// <ul>
    /// <li> <p>Ensure that the user/password specified belongs to the user who can mount the share and who has the appropriate permissions for all of the files and directories that you want DataSync to access.</p> </li>
    /// <li> <p>Use credentials of a member of the Backup Operators group to mount the share. </p> </li>
    /// </ul>
    /// <p>Doing either of these options enables the agent to access the data. For the agent to access directories, you must also enable all execute access.</p>
    #[doc(hidden)]
    pub subdirectory: std::option::Option<std::string::String>,
    /// <p>The user who can mount the share has the permissions to access files and folders in the SMB share.</p>
    #[doc(hidden)]
    pub user: std::option::Option<std::string::String>,
    /// <p>The name of the Windows domain that the SMB server belongs to.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>The password of the user who can mount the share has the permissions to access files and folders in the SMB share.</p>
    #[doc(hidden)]
    pub password: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.</p>
    #[doc(hidden)]
    pub agent_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Specifies how DataSync can access a location using the SMB protocol.</p>
    #[doc(hidden)]
    pub mount_options: std::option::Option<crate::types::SmbMountOptions>,
}
impl UpdateLocationSmbInput {
    /// <p>The Amazon Resource Name (ARN) of the SMB location to update.</p>
    pub fn location_arn(&self) -> std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination. The SMB path should be a path that's exported by the SMB server, or a subdirectory of that path. The path should be such that it can be mounted by other SMB clients in your network.</p> <note>
    /// <p> <code>Subdirectory</code> must be specified with forward slashes. For example, <code>/path/to/folder</code>.</p>
    /// </note>
    /// <p>To transfer all the data in the folder that you specified, DataSync must have permissions to mount the SMB share and to access all the data in that share. To ensure this, do either of the following:</p>
    /// <ul>
    /// <li> <p>Ensure that the user/password specified belongs to the user who can mount the share and who has the appropriate permissions for all of the files and directories that you want DataSync to access.</p> </li>
    /// <li> <p>Use credentials of a member of the Backup Operators group to mount the share. </p> </li>
    /// </ul>
    /// <p>Doing either of these options enables the agent to access the data. For the agent to access directories, you must also enable all execute access.</p>
    pub fn subdirectory(&self) -> std::option::Option<&str> {
        self.subdirectory.as_deref()
    }
    /// <p>The user who can mount the share has the permissions to access files and folders in the SMB share.</p>
    pub fn user(&self) -> std::option::Option<&str> {
        self.user.as_deref()
    }
    /// <p>The name of the Windows domain that the SMB server belongs to.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>The password of the user who can mount the share has the permissions to access files and folders in the SMB share.</p>
    pub fn password(&self) -> std::option::Option<&str> {
        self.password.as_deref()
    }
    /// <p>The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.</p>
    pub fn agent_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.agent_arns.as_deref()
    }
    /// <p>Specifies how DataSync can access a location using the SMB protocol.</p>
    pub fn mount_options(&self) -> std::option::Option<&crate::types::SmbMountOptions> {
        self.mount_options.as_ref()
    }
}
impl std::fmt::Debug for UpdateLocationSmbInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLocationSmbInput");
        formatter.field("location_arn", &self.location_arn);
        formatter.field("subdirectory", &self.subdirectory);
        formatter.field("user", &self.user);
        formatter.field("domain", &self.domain);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_arns", &self.agent_arns);
        formatter.field("mount_options", &self.mount_options);
        formatter.finish()
    }
}
impl UpdateLocationSmbInput {
    /// Creates a new builder-style object to manufacture [`UpdateLocationSmbInput`](crate::operation::update_location_smb::UpdateLocationSmbInput).
    pub fn builder(
    ) -> crate::operation::update_location_smb::builders::UpdateLocationSmbInputBuilder {
        crate::operation::update_location_smb::builders::UpdateLocationSmbInputBuilder::default()
    }
}

/// A builder for [`UpdateLocationSmbInput`](crate::operation::update_location_smb::UpdateLocationSmbInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateLocationSmbInputBuilder {
    pub(crate) location_arn: std::option::Option<std::string::String>,
    pub(crate) subdirectory: std::option::Option<std::string::String>,
    pub(crate) user: std::option::Option<std::string::String>,
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) password: std::option::Option<std::string::String>,
    pub(crate) agent_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) mount_options: std::option::Option<crate::types::SmbMountOptions>,
}
impl UpdateLocationSmbInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the SMB location to update.</p>
    pub fn location_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.location_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SMB location to update.</p>
    pub fn set_location_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination. The SMB path should be a path that's exported by the SMB server, or a subdirectory of that path. The path should be such that it can be mounted by other SMB clients in your network.</p> <note>
    /// <p> <code>Subdirectory</code> must be specified with forward slashes. For example, <code>/path/to/folder</code>.</p>
    /// </note>
    /// <p>To transfer all the data in the folder that you specified, DataSync must have permissions to mount the SMB share and to access all the data in that share. To ensure this, do either of the following:</p>
    /// <ul>
    /// <li> <p>Ensure that the user/password specified belongs to the user who can mount the share and who has the appropriate permissions for all of the files and directories that you want DataSync to access.</p> </li>
    /// <li> <p>Use credentials of a member of the Backup Operators group to mount the share. </p> </li>
    /// </ul>
    /// <p>Doing either of these options enables the agent to access the data. For the agent to access directories, you must also enable all execute access.</p>
    pub fn subdirectory(mut self, input: impl Into<std::string::String>) -> Self {
        self.subdirectory = Some(input.into());
        self
    }
    /// <p>The subdirectory in the SMB file system that is used to read data from the SMB source location or write data to the SMB destination. The SMB path should be a path that's exported by the SMB server, or a subdirectory of that path. The path should be such that it can be mounted by other SMB clients in your network.</p> <note>
    /// <p> <code>Subdirectory</code> must be specified with forward slashes. For example, <code>/path/to/folder</code>.</p>
    /// </note>
    /// <p>To transfer all the data in the folder that you specified, DataSync must have permissions to mount the SMB share and to access all the data in that share. To ensure this, do either of the following:</p>
    /// <ul>
    /// <li> <p>Ensure that the user/password specified belongs to the user who can mount the share and who has the appropriate permissions for all of the files and directories that you want DataSync to access.</p> </li>
    /// <li> <p>Use credentials of a member of the Backup Operators group to mount the share. </p> </li>
    /// </ul>
    /// <p>Doing either of these options enables the agent to access the data. For the agent to access directories, you must also enable all execute access.</p>
    pub fn set_subdirectory(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subdirectory = input;
        self
    }
    /// <p>The user who can mount the share has the permissions to access files and folders in the SMB share.</p>
    pub fn user(mut self, input: impl Into<std::string::String>) -> Self {
        self.user = Some(input.into());
        self
    }
    /// <p>The user who can mount the share has the permissions to access files and folders in the SMB share.</p>
    pub fn set_user(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user = input;
        self
    }
    /// <p>The name of the Windows domain that the SMB server belongs to.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The name of the Windows domain that the SMB server belongs to.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>The password of the user who can mount the share has the permissions to access files and folders in the SMB share.</p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.password = Some(input.into());
        self
    }
    /// <p>The password of the user who can mount the share has the permissions to access files and folders in the SMB share.</p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// Appends an item to `agent_arns`.
    ///
    /// To override the contents of this collection use [`set_agent_arns`](Self::set_agent_arns).
    ///
    /// <p>The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.</p>
    pub fn agent_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.agent_arns.unwrap_or_default();
        v.push(input.into());
        self.agent_arns = Some(v);
        self
    }
    /// <p>The Amazon Resource Names (ARNs) of agents to use for a Simple Message Block (SMB) location.</p>
    pub fn set_agent_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.agent_arns = input;
        self
    }
    /// <p>Specifies how DataSync can access a location using the SMB protocol.</p>
    pub fn mount_options(mut self, input: crate::types::SmbMountOptions) -> Self {
        self.mount_options = Some(input);
        self
    }
    /// <p>Specifies how DataSync can access a location using the SMB protocol.</p>
    pub fn set_mount_options(
        mut self,
        input: std::option::Option<crate::types::SmbMountOptions>,
    ) -> Self {
        self.mount_options = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLocationSmbInput`](crate::operation::update_location_smb::UpdateLocationSmbInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_location_smb::UpdateLocationSmbInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_location_smb::UpdateLocationSmbInput {
                location_arn: self.location_arn,
                subdirectory: self.subdirectory,
                user: self.user,
                domain: self.domain,
                password: self.password,
                agent_arns: self.agent_arns,
                mount_options: self.mount_options,
            },
        )
    }
}
impl std::fmt::Debug for UpdateLocationSmbInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLocationSmbInputBuilder");
        formatter.field("location_arn", &self.location_arn);
        formatter.field("subdirectory", &self.subdirectory);
        formatter.field("user", &self.user);
        formatter.field("domain", &self.domain);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_arns", &self.agent_arns);
        formatter.field("mount_options", &self.mount_options);
        formatter.finish()
    }
}
