// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AddStorageSystemInput {
    /// <p>Specifies the server name and network port required to connect with the management interface of your on-premises storage system.</p>
    pub server_configuration: ::std::option::Option<crate::types::DiscoveryServerConfiguration>,
    /// <p>Specifies the type of on-premises storage system that you want DataSync Discovery to collect information about.</p> <note>
    /// <p>DataSync Discovery currently supports NetApp Fabric-Attached Storage (FAS) and All Flash FAS (AFF) systems running ONTAP 9.7 or later.</p>
    /// </note>
    pub system_type: ::std::option::Option<crate::types::DiscoverySystemType>,
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that connects to and reads from your on-premises storage system's management interface. You can only specify one ARN.</p>
    pub agent_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the ARN of the Amazon CloudWatch log group for monitoring and logging discovery job events.</p>
    pub cloud_watch_log_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your on-premises storage system.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>,
    /// <p>Specifies a familiar name for your on-premises storage system.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies a client token to make sure requests with this API operation are idempotent. If you don't specify a client token, DataSync generates one for you automatically.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the user name and password for accessing your on-premises storage system's management interface.</p>
    pub credentials: ::std::option::Option<crate::types::Credentials>,
}
impl AddStorageSystemInput {
    /// <p>Specifies the server name and network port required to connect with the management interface of your on-premises storage system.</p>
    pub fn server_configuration(&self) -> ::std::option::Option<&crate::types::DiscoveryServerConfiguration> {
        self.server_configuration.as_ref()
    }
    /// <p>Specifies the type of on-premises storage system that you want DataSync Discovery to collect information about.</p> <note>
    /// <p>DataSync Discovery currently supports NetApp Fabric-Attached Storage (FAS) and All Flash FAS (AFF) systems running ONTAP 9.7 or later.</p>
    /// </note>
    pub fn system_type(&self) -> ::std::option::Option<&crate::types::DiscoverySystemType> {
        self.system_type.as_ref()
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that connects to and reads from your on-premises storage system's management interface. You can only specify one ARN.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_arns.is_none()`.
    pub fn agent_arns(&self) -> &[::std::string::String] {
        self.agent_arns.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the ARN of the Amazon CloudWatch log group for monitoring and logging discovery job events.</p>
    pub fn cloud_watch_log_group_arn(&self) -> ::std::option::Option<&str> {
        self.cloud_watch_log_group_arn.as_deref()
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your on-premises storage system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::TagListEntry] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>Specifies a familiar name for your on-premises storage system.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies a client token to make sure requests with this API operation are idempotent. If you don't specify a client token, DataSync generates one for you automatically.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Specifies the user name and password for accessing your on-premises storage system's management interface.</p>
    pub fn credentials(&self) -> ::std::option::Option<&crate::types::Credentials> {
        self.credentials.as_ref()
    }
}
impl AddStorageSystemInput {
    /// Creates a new builder-style object to manufacture [`AddStorageSystemInput`](crate::operation::add_storage_system::AddStorageSystemInput).
    pub fn builder() -> crate::operation::add_storage_system::builders::AddStorageSystemInputBuilder {
        crate::operation::add_storage_system::builders::AddStorageSystemInputBuilder::default()
    }
}

/// A builder for [`AddStorageSystemInput`](crate::operation::add_storage_system::AddStorageSystemInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AddStorageSystemInputBuilder {
    pub(crate) server_configuration: ::std::option::Option<crate::types::DiscoveryServerConfiguration>,
    pub(crate) system_type: ::std::option::Option<crate::types::DiscoverySystemType>,
    pub(crate) agent_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) cloud_watch_log_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) credentials: ::std::option::Option<crate::types::Credentials>,
}
impl AddStorageSystemInputBuilder {
    /// <p>Specifies the server name and network port required to connect with the management interface of your on-premises storage system.</p>
    /// This field is required.
    pub fn server_configuration(mut self, input: crate::types::DiscoveryServerConfiguration) -> Self {
        self.server_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the server name and network port required to connect with the management interface of your on-premises storage system.</p>
    pub fn set_server_configuration(mut self, input: ::std::option::Option<crate::types::DiscoveryServerConfiguration>) -> Self {
        self.server_configuration = input;
        self
    }
    /// <p>Specifies the server name and network port required to connect with the management interface of your on-premises storage system.</p>
    pub fn get_server_configuration(&self) -> &::std::option::Option<crate::types::DiscoveryServerConfiguration> {
        &self.server_configuration
    }
    /// <p>Specifies the type of on-premises storage system that you want DataSync Discovery to collect information about.</p> <note>
    /// <p>DataSync Discovery currently supports NetApp Fabric-Attached Storage (FAS) and All Flash FAS (AFF) systems running ONTAP 9.7 or later.</p>
    /// </note>
    /// This field is required.
    pub fn system_type(mut self, input: crate::types::DiscoverySystemType) -> Self {
        self.system_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the type of on-premises storage system that you want DataSync Discovery to collect information about.</p> <note>
    /// <p>DataSync Discovery currently supports NetApp Fabric-Attached Storage (FAS) and All Flash FAS (AFF) systems running ONTAP 9.7 or later.</p>
    /// </note>
    pub fn set_system_type(mut self, input: ::std::option::Option<crate::types::DiscoverySystemType>) -> Self {
        self.system_type = input;
        self
    }
    /// <p>Specifies the type of on-premises storage system that you want DataSync Discovery to collect information about.</p> <note>
    /// <p>DataSync Discovery currently supports NetApp Fabric-Attached Storage (FAS) and All Flash FAS (AFF) systems running ONTAP 9.7 or later.</p>
    /// </note>
    pub fn get_system_type(&self) -> &::std::option::Option<crate::types::DiscoverySystemType> {
        &self.system_type
    }
    /// Appends an item to `agent_arns`.
    ///
    /// To override the contents of this collection use [`set_agent_arns`](Self::set_agent_arns).
    ///
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that connects to and reads from your on-premises storage system's management interface. You can only specify one ARN.</p>
    pub fn agent_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.agent_arns.unwrap_or_default();
        v.push(input.into());
        self.agent_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that connects to and reads from your on-premises storage system's management interface. You can only specify one ARN.</p>
    pub fn set_agent_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.agent_arns = input;
        self
    }
    /// <p>Specifies the Amazon Resource Name (ARN) of the DataSync agent that connects to and reads from your on-premises storage system's management interface. You can only specify one ARN.</p>
    pub fn get_agent_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.agent_arns
    }
    /// <p>Specifies the ARN of the Amazon CloudWatch log group for monitoring and logging discovery job events.</p>
    pub fn cloud_watch_log_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.cloud_watch_log_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ARN of the Amazon CloudWatch log group for monitoring and logging discovery job events.</p>
    pub fn set_cloud_watch_log_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.cloud_watch_log_group_arn = input;
        self
    }
    /// <p>Specifies the ARN of the Amazon CloudWatch log group for monitoring and logging discovery job events.</p>
    pub fn get_cloud_watch_log_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.cloud_watch_log_group_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your on-premises storage system.</p>
    pub fn tags(mut self, input: crate::types::TagListEntry) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your on-premises storage system.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Specifies labels that help you categorize, filter, and search for your Amazon Web Services resources. We recommend creating at least a name tag for your on-premises storage system.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TagListEntry>> {
        &self.tags
    }
    /// <p>Specifies a familiar name for your on-premises storage system.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a familiar name for your on-premises storage system.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Specifies a familiar name for your on-premises storage system.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies a client token to make sure requests with this API operation are idempotent. If you don't specify a client token, DataSync generates one for you automatically.</p>
    /// This field is required.
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies a client token to make sure requests with this API operation are idempotent. If you don't specify a client token, DataSync generates one for you automatically.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Specifies a client token to make sure requests with this API operation are idempotent. If you don't specify a client token, DataSync generates one for you automatically.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>Specifies the user name and password for accessing your on-premises storage system's management interface.</p>
    /// This field is required.
    pub fn credentials(mut self, input: crate::types::Credentials) -> Self {
        self.credentials = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the user name and password for accessing your on-premises storage system's management interface.</p>
    pub fn set_credentials(mut self, input: ::std::option::Option<crate::types::Credentials>) -> Self {
        self.credentials = input;
        self
    }
    /// <p>Specifies the user name and password for accessing your on-premises storage system's management interface.</p>
    pub fn get_credentials(&self) -> &::std::option::Option<crate::types::Credentials> {
        &self.credentials
    }
    /// Consumes the builder and constructs a [`AddStorageSystemInput`](crate::operation::add_storage_system::AddStorageSystemInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::add_storage_system::AddStorageSystemInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::add_storage_system::AddStorageSystemInput {
            server_configuration: self.server_configuration,
            system_type: self.system_type,
            agent_arns: self.agent_arns,
            cloud_watch_log_group_arn: self.cloud_watch_log_group_arn,
            tags: self.tags,
            name: self.name,
            client_token: self.client_token,
            credentials: self.credentials,
        })
    }
}
