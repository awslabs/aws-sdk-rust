// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeLocationFsxOntapOutput {
    /// <p>The time that the location was created.</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ARN of the FSx for ONTAP file system location.</p>
    pub location_arn: ::std::option::Option<::std::string::String>,
    /// <p>The uniform resource identifier (URI) of the FSx for ONTAP file system location.</p>
    pub location_uri: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
    pub protocol: ::std::option::Option<crate::types::FsxProtocol>,
    /// <p>The security groups that DataSync uses to access your FSx for ONTAP file system.</p>
    pub security_group_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ARN of the storage virtual machine (SVM) on your FSx for ONTAP file system where you're copying data to or from.</p>
    pub storage_virtual_machine_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the FSx for ONTAP file system.</p>
    pub fsx_filesystem_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLocationFsxOntapOutput {
    /// <p>The time that the location was created.</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The ARN of the FSx for ONTAP file system location.</p>
    pub fn location_arn(&self) -> ::std::option::Option<&str> {
        self.location_arn.as_deref()
    }
    /// <p>The uniform resource identifier (URI) of the FSx for ONTAP file system location.</p>
    pub fn location_uri(&self) -> ::std::option::Option<&str> {
        self.location_uri.as_deref()
    }
    /// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::FsxProtocol> {
        self.protocol.as_ref()
    }
    /// <p>The security groups that DataSync uses to access your FSx for ONTAP file system.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_arns.is_none()`.
    pub fn security_group_arns(&self) -> &[::std::string::String] {
        self.security_group_arns.as_deref().unwrap_or_default()
    }
    /// <p>The ARN of the storage virtual machine (SVM) on your FSx for ONTAP file system where you're copying data to or from.</p>
    pub fn storage_virtual_machine_arn(&self) -> ::std::option::Option<&str> {
        self.storage_virtual_machine_arn.as_deref()
    }
    /// <p>The ARN of the FSx for ONTAP file system.</p>
    pub fn fsx_filesystem_arn(&self) -> ::std::option::Option<&str> {
        self.fsx_filesystem_arn.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeLocationFsxOntapOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeLocationFsxOntapOutput {
    /// Creates a new builder-style object to manufacture [`DescribeLocationFsxOntapOutput`](crate::operation::describe_location_fsx_ontap::DescribeLocationFsxOntapOutput).
    pub fn builder() -> crate::operation::describe_location_fsx_ontap::builders::DescribeLocationFsxOntapOutputBuilder {
        crate::operation::describe_location_fsx_ontap::builders::DescribeLocationFsxOntapOutputBuilder::default()
    }
}

/// A builder for [`DescribeLocationFsxOntapOutput`](crate::operation::describe_location_fsx_ontap::DescribeLocationFsxOntapOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeLocationFsxOntapOutputBuilder {
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) location_arn: ::std::option::Option<::std::string::String>,
    pub(crate) location_uri: ::std::option::Option<::std::string::String>,
    pub(crate) protocol: ::std::option::Option<crate::types::FsxProtocol>,
    pub(crate) security_group_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) storage_virtual_machine_arn: ::std::option::Option<::std::string::String>,
    pub(crate) fsx_filesystem_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl DescribeLocationFsxOntapOutputBuilder {
    /// <p>The time that the location was created.</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the location was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the location was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The ARN of the FSx for ONTAP file system location.</p>
    pub fn location_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the FSx for ONTAP file system location.</p>
    pub fn set_location_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_arn = input;
        self
    }
    /// <p>The ARN of the FSx for ONTAP file system location.</p>
    pub fn get_location_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_arn
    }
    /// <p>The uniform resource identifier (URI) of the FSx for ONTAP file system location.</p>
    pub fn location_uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location_uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The uniform resource identifier (URI) of the FSx for ONTAP file system location.</p>
    pub fn set_location_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location_uri = input;
        self
    }
    /// <p>The uniform resource identifier (URI) of the FSx for ONTAP file system location.</p>
    pub fn get_location_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.location_uri
    }
    /// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
    pub fn protocol(mut self, input: crate::types::FsxProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::FsxProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::FsxProtocol> {
        &self.protocol
    }
    /// Appends an item to `security_group_arns`.
    ///
    /// To override the contents of this collection use [`set_security_group_arns`](Self::set_security_group_arns).
    ///
    /// <p>The security groups that DataSync uses to access your FSx for ONTAP file system.</p>
    pub fn security_group_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_arns.unwrap_or_default();
        v.push(input.into());
        self.security_group_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security groups that DataSync uses to access your FSx for ONTAP file system.</p>
    pub fn set_security_group_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_arns = input;
        self
    }
    /// <p>The security groups that DataSync uses to access your FSx for ONTAP file system.</p>
    pub fn get_security_group_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_arns
    }
    /// <p>The ARN of the storage virtual machine (SVM) on your FSx for ONTAP file system where you're copying data to or from.</p>
    pub fn storage_virtual_machine_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.storage_virtual_machine_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the storage virtual machine (SVM) on your FSx for ONTAP file system where you're copying data to or from.</p>
    pub fn set_storage_virtual_machine_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.storage_virtual_machine_arn = input;
        self
    }
    /// <p>The ARN of the storage virtual machine (SVM) on your FSx for ONTAP file system where you're copying data to or from.</p>
    pub fn get_storage_virtual_machine_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.storage_virtual_machine_arn
    }
    /// <p>The ARN of the FSx for ONTAP file system.</p>
    pub fn fsx_filesystem_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fsx_filesystem_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the FSx for ONTAP file system.</p>
    pub fn set_fsx_filesystem_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fsx_filesystem_arn = input;
        self
    }
    /// <p>The ARN of the FSx for ONTAP file system.</p>
    pub fn get_fsx_filesystem_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.fsx_filesystem_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeLocationFsxOntapOutput`](crate::operation::describe_location_fsx_ontap::DescribeLocationFsxOntapOutput).
    pub fn build(self) -> crate::operation::describe_location_fsx_ontap::DescribeLocationFsxOntapOutput {
        crate::operation::describe_location_fsx_ontap::DescribeLocationFsxOntapOutput {
            creation_time: self.creation_time,
            location_arn: self.location_arn,
            location_uri: self.location_uri,
            protocol: self.protocol,
            security_group_arns: self.security_group_arns,
            storage_virtual_machine_arn: self.storage_virtual_machine_arn,
            fsx_filesystem_arn: self.fsx_filesystem_arn,
            _request_id: self._request_id,
        }
    }
}
