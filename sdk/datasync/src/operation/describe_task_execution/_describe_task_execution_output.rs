// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeTaskExecutionResponse</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTaskExecutionOutput {
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed. </p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>. </p>
    pub task_execution_arn: ::std::option::Option<::std::string::String>,
    /// <p>The status of the task execution. </p>
    pub status: ::std::option::Option<crate::types::TaskExecutionStatus>,
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub options: ::std::option::Option<crate::types::Options>,
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub excludes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub includes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    /// <p>The time when the task execution started.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The expected number of files, objects, and directories that DataSync will transfer over the network. This value is calculated during the task execution's <code>PREPARING</code> phase before the <code>TRANSFERRING</code> phase. The calculation is based on comparing the content of the source and destination locations and finding the difference that needs to be transferred. </p>
    pub estimated_files_to_transfer: i64,
    /// <p>The estimated physical number of bytes that will transfer over the network.</p>
    pub estimated_bytes_to_transfer: i64,
    /// <p>The actual number of files, objects, and directories that DataSync transferred over the network. This value is updated periodically during the task execution's <code>TRANSFERRING</code> phase when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what transferred or to monitor your task execution.</p>
    pub files_transferred: i64,
    /// <p>The number of logical bytes written to the destination location.</p>
    pub bytes_written: i64,
    /// <p>The total number of bytes that are involved in the transfer. For the number of bytes sent over the network, see <code>BytesCompressed</code>. </p>
    pub bytes_transferred: i64,
    /// <p>The result of the task execution.</p>
    pub result: ::std::option::Option<crate::types::TaskExecutionResultDetail>,
    /// <p>The physical number of bytes transferred over the network after compression was applied. In most cases, this number is less than <code>BytesTransferred</code> unless the data isn't compressible.</p>
    pub bytes_compressed: i64,
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer.</p>
    pub task_report_config: ::std::option::Option<crate::types::TaskReportConfig>,
    /// <p>The number of files, objects, and directories that DataSync deleted in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub files_deleted: i64,
    /// <p>The number of files, objects, and directories that DataSync skipped during your transfer.</p>
    pub files_skipped: i64,
    /// <p>The number of files, objects, and directories that DataSync verified during your transfer.</p> <note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub files_verified: i64,
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub report_result: ::std::option::Option<crate::types::ReportResult>,
    /// <p>The expected number of files, objects, and directories that DataSync will delete in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub estimated_files_to_delete: i64,
    _request_id: Option<String>,
}
impl DescribeTaskExecutionOutput {
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed. </p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>. </p>
    pub fn task_execution_arn(&self) -> ::std::option::Option<&str> {
        self.task_execution_arn.as_deref()
    }
    /// <p>The status of the task execution. </p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::TaskExecutionStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub fn options(&self) -> ::std::option::Option<&crate::types::Options> {
        self.options.as_ref()
    }
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.excludes.is_none()`.
    pub fn excludes(&self) -> &[crate::types::FilterRule] {
        self.excludes.as_deref().unwrap_or_default()
    }
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.includes.is_none()`.
    pub fn includes(&self) -> &[crate::types::FilterRule] {
        self.includes.as_deref().unwrap_or_default()
    }
    /// <p>The time when the task execution started.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The expected number of files, objects, and directories that DataSync will transfer over the network. This value is calculated during the task execution's <code>PREPARING</code> phase before the <code>TRANSFERRING</code> phase. The calculation is based on comparing the content of the source and destination locations and finding the difference that needs to be transferred. </p>
    pub fn estimated_files_to_transfer(&self) -> i64 {
        self.estimated_files_to_transfer
    }
    /// <p>The estimated physical number of bytes that will transfer over the network.</p>
    pub fn estimated_bytes_to_transfer(&self) -> i64 {
        self.estimated_bytes_to_transfer
    }
    /// <p>The actual number of files, objects, and directories that DataSync transferred over the network. This value is updated periodically during the task execution's <code>TRANSFERRING</code> phase when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what transferred or to monitor your task execution.</p>
    pub fn files_transferred(&self) -> i64 {
        self.files_transferred
    }
    /// <p>The number of logical bytes written to the destination location.</p>
    pub fn bytes_written(&self) -> i64 {
        self.bytes_written
    }
    /// <p>The total number of bytes that are involved in the transfer. For the number of bytes sent over the network, see <code>BytesCompressed</code>. </p>
    pub fn bytes_transferred(&self) -> i64 {
        self.bytes_transferred
    }
    /// <p>The result of the task execution.</p>
    pub fn result(&self) -> ::std::option::Option<&crate::types::TaskExecutionResultDetail> {
        self.result.as_ref()
    }
    /// <p>The physical number of bytes transferred over the network after compression was applied. In most cases, this number is less than <code>BytesTransferred</code> unless the data isn't compressible.</p>
    pub fn bytes_compressed(&self) -> i64 {
        self.bytes_compressed
    }
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer.</p>
    pub fn task_report_config(&self) -> ::std::option::Option<&crate::types::TaskReportConfig> {
        self.task_report_config.as_ref()
    }
    /// <p>The number of files, objects, and directories that DataSync deleted in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub fn files_deleted(&self) -> i64 {
        self.files_deleted
    }
    /// <p>The number of files, objects, and directories that DataSync skipped during your transfer.</p>
    pub fn files_skipped(&self) -> i64 {
        self.files_skipped
    }
    /// <p>The number of files, objects, and directories that DataSync verified during your transfer.</p> <note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub fn files_verified(&self) -> i64 {
        self.files_verified
    }
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub fn report_result(&self) -> ::std::option::Option<&crate::types::ReportResult> {
        self.report_result.as_ref()
    }
    /// <p>The expected number of files, objects, and directories that DataSync will delete in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub fn estimated_files_to_delete(&self) -> i64 {
        self.estimated_files_to_delete
    }
}
impl ::aws_http::request_id::RequestId for DescribeTaskExecutionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeTaskExecutionOutput {
    /// Creates a new builder-style object to manufacture [`DescribeTaskExecutionOutput`](crate::operation::describe_task_execution::DescribeTaskExecutionOutput).
    pub fn builder() -> crate::operation::describe_task_execution::builders::DescribeTaskExecutionOutputBuilder {
        crate::operation::describe_task_execution::builders::DescribeTaskExecutionOutputBuilder::default()
    }
}

/// A builder for [`DescribeTaskExecutionOutput`](crate::operation::describe_task_execution::DescribeTaskExecutionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeTaskExecutionOutputBuilder {
    pub(crate) task_execution_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::TaskExecutionStatus>,
    pub(crate) options: ::std::option::Option<crate::types::Options>,
    pub(crate) excludes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) includes: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) estimated_files_to_transfer: ::std::option::Option<i64>,
    pub(crate) estimated_bytes_to_transfer: ::std::option::Option<i64>,
    pub(crate) files_transferred: ::std::option::Option<i64>,
    pub(crate) bytes_written: ::std::option::Option<i64>,
    pub(crate) bytes_transferred: ::std::option::Option<i64>,
    pub(crate) result: ::std::option::Option<crate::types::TaskExecutionResultDetail>,
    pub(crate) bytes_compressed: ::std::option::Option<i64>,
    pub(crate) task_report_config: ::std::option::Option<crate::types::TaskReportConfig>,
    pub(crate) files_deleted: ::std::option::Option<i64>,
    pub(crate) files_skipped: ::std::option::Option<i64>,
    pub(crate) files_verified: ::std::option::Option<i64>,
    pub(crate) report_result: ::std::option::Option<crate::types::ReportResult>,
    pub(crate) estimated_files_to_delete: ::std::option::Option<i64>,
    _request_id: Option<String>,
}
impl DescribeTaskExecutionOutputBuilder {
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed. </p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>. </p>
    pub fn task_execution_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.task_execution_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed. </p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>. </p>
    pub fn set_task_execution_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.task_execution_arn = input;
        self
    }
    /// <p>The ARN of the task execution that you wanted information about. <code>TaskExecutionArn</code> is hierarchical and includes <code>TaskArn</code> for the task that was executed. </p>
    /// <p>For example, a <code>TaskExecution</code> value with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2/execution/exec-08ef1e88ec491019b</code> executed the task with the ARN <code>arn:aws:datasync:us-east-1:111222333444:task/task-0208075f79cedf4a2</code>. </p>
    pub fn get_task_execution_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.task_execution_arn
    }
    /// <p>The status of the task execution. </p>
    pub fn status(mut self, input: crate::types::TaskExecutionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the task execution. </p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::TaskExecutionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the task execution. </p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::TaskExecutionStatus> {
        &self.status
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub fn options(mut self, input: crate::types::Options) -> Self {
        self.options = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub fn set_options(mut self, input: ::std::option::Option<crate::types::Options>) -> Self {
        self.options = input;
        self
    }
    /// <p>Indicates how your transfer task is configured. These options include how DataSync handles files, objects, and their associated metadata during your transfer. You also can specify how to verify data integrity, set bandwidth limits for your task, among other options.</p>
    /// <p>Each option has a default value. Unless you need to, you don't have to configure any of these options before starting your task.</p>
    pub fn get_options(&self) -> &::std::option::Option<crate::types::Options> {
        &self.options
    }
    /// Appends an item to `excludes`.
    ///
    /// To override the contents of this collection use [`set_excludes`](Self::set_excludes).
    ///
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn excludes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.excludes.unwrap_or_default();
        v.push(input);
        self.excludes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn set_excludes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>) -> Self {
        self.excludes = input;
        self
    }
    /// <p>A list of filter rules that exclude specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn get_excludes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterRule>> {
        &self.excludes
    }
    /// Appends an item to `includes`.
    ///
    /// To override the contents of this collection use [`set_includes`](Self::set_includes).
    ///
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn includes(mut self, input: crate::types::FilterRule) -> Self {
        let mut v = self.includes.unwrap_or_default();
        v.push(input);
        self.includes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn set_includes(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FilterRule>>) -> Self {
        self.includes = input;
        self
    }
    /// <p>A list of filter rules that include specific data during your transfer. For more information and examples, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/filtering.html">Filtering data transferred by DataSync</a>.</p>
    pub fn get_includes(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FilterRule>> {
        &self.includes
    }
    /// <p>The time when the task execution started.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time when the task execution started.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The time when the task execution started.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The expected number of files, objects, and directories that DataSync will transfer over the network. This value is calculated during the task execution's <code>PREPARING</code> phase before the <code>TRANSFERRING</code> phase. The calculation is based on comparing the content of the source and destination locations and finding the difference that needs to be transferred. </p>
    pub fn estimated_files_to_transfer(mut self, input: i64) -> Self {
        self.estimated_files_to_transfer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected number of files, objects, and directories that DataSync will transfer over the network. This value is calculated during the task execution's <code>PREPARING</code> phase before the <code>TRANSFERRING</code> phase. The calculation is based on comparing the content of the source and destination locations and finding the difference that needs to be transferred. </p>
    pub fn set_estimated_files_to_transfer(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_files_to_transfer = input;
        self
    }
    /// <p>The expected number of files, objects, and directories that DataSync will transfer over the network. This value is calculated during the task execution's <code>PREPARING</code> phase before the <code>TRANSFERRING</code> phase. The calculation is based on comparing the content of the source and destination locations and finding the difference that needs to be transferred. </p>
    pub fn get_estimated_files_to_transfer(&self) -> &::std::option::Option<i64> {
        &self.estimated_files_to_transfer
    }
    /// <p>The estimated physical number of bytes that will transfer over the network.</p>
    pub fn estimated_bytes_to_transfer(mut self, input: i64) -> Self {
        self.estimated_bytes_to_transfer = ::std::option::Option::Some(input);
        self
    }
    /// <p>The estimated physical number of bytes that will transfer over the network.</p>
    pub fn set_estimated_bytes_to_transfer(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_bytes_to_transfer = input;
        self
    }
    /// <p>The estimated physical number of bytes that will transfer over the network.</p>
    pub fn get_estimated_bytes_to_transfer(&self) -> &::std::option::Option<i64> {
        &self.estimated_bytes_to_transfer
    }
    /// <p>The actual number of files, objects, and directories that DataSync transferred over the network. This value is updated periodically during the task execution's <code>TRANSFERRING</code> phase when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what transferred or to monitor your task execution.</p>
    pub fn files_transferred(mut self, input: i64) -> Self {
        self.files_transferred = ::std::option::Option::Some(input);
        self
    }
    /// <p>The actual number of files, objects, and directories that DataSync transferred over the network. This value is updated periodically during the task execution's <code>TRANSFERRING</code> phase when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what transferred or to monitor your task execution.</p>
    pub fn set_files_transferred(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_transferred = input;
        self
    }
    /// <p>The actual number of files, objects, and directories that DataSync transferred over the network. This value is updated periodically during the task execution's <code>TRANSFERRING</code> phase when something is read from the source and sent over the network.</p>
    /// <p>If DataSync fails to transfer something, this value can be less than <code>EstimatedFilesToTransfer</code>. In some cases, this value can also be greater than <code>EstimatedFilesToTransfer</code>. This element is implementation-specific for some location types, so don't use it as an exact indication of what transferred or to monitor your task execution.</p>
    pub fn get_files_transferred(&self) -> &::std::option::Option<i64> {
        &self.files_transferred
    }
    /// <p>The number of logical bytes written to the destination location.</p>
    pub fn bytes_written(mut self, input: i64) -> Self {
        self.bytes_written = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of logical bytes written to the destination location.</p>
    pub fn set_bytes_written(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_written = input;
        self
    }
    /// <p>The number of logical bytes written to the destination location.</p>
    pub fn get_bytes_written(&self) -> &::std::option::Option<i64> {
        &self.bytes_written
    }
    /// <p>The total number of bytes that are involved in the transfer. For the number of bytes sent over the network, see <code>BytesCompressed</code>. </p>
    pub fn bytes_transferred(mut self, input: i64) -> Self {
        self.bytes_transferred = ::std::option::Option::Some(input);
        self
    }
    /// <p>The total number of bytes that are involved in the transfer. For the number of bytes sent over the network, see <code>BytesCompressed</code>. </p>
    pub fn set_bytes_transferred(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_transferred = input;
        self
    }
    /// <p>The total number of bytes that are involved in the transfer. For the number of bytes sent over the network, see <code>BytesCompressed</code>. </p>
    pub fn get_bytes_transferred(&self) -> &::std::option::Option<i64> {
        &self.bytes_transferred
    }
    /// <p>The result of the task execution.</p>
    pub fn result(mut self, input: crate::types::TaskExecutionResultDetail) -> Self {
        self.result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The result of the task execution.</p>
    pub fn set_result(mut self, input: ::std::option::Option<crate::types::TaskExecutionResultDetail>) -> Self {
        self.result = input;
        self
    }
    /// <p>The result of the task execution.</p>
    pub fn get_result(&self) -> &::std::option::Option<crate::types::TaskExecutionResultDetail> {
        &self.result
    }
    /// <p>The physical number of bytes transferred over the network after compression was applied. In most cases, this number is less than <code>BytesTransferred</code> unless the data isn't compressible.</p>
    pub fn bytes_compressed(mut self, input: i64) -> Self {
        self.bytes_compressed = ::std::option::Option::Some(input);
        self
    }
    /// <p>The physical number of bytes transferred over the network after compression was applied. In most cases, this number is less than <code>BytesTransferred</code> unless the data isn't compressible.</p>
    pub fn set_bytes_compressed(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bytes_compressed = input;
        self
    }
    /// <p>The physical number of bytes transferred over the network after compression was applied. In most cases, this number is less than <code>BytesTransferred</code> unless the data isn't compressible.</p>
    pub fn get_bytes_compressed(&self) -> &::std::option::Option<i64> {
        &self.bytes_compressed
    }
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer.</p>
    pub fn task_report_config(mut self, input: crate::types::TaskReportConfig) -> Self {
        self.task_report_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer.</p>
    pub fn set_task_report_config(mut self, input: ::std::option::Option<crate::types::TaskReportConfig>) -> Self {
        self.task_report_config = input;
        self
    }
    /// <p>The configuration of your task report, which provides detailed information about for your DataSync transfer.</p>
    pub fn get_task_report_config(&self) -> &::std::option::Option<crate::types::TaskReportConfig> {
        &self.task_report_config
    }
    /// <p>The number of files, objects, and directories that DataSync deleted in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub fn files_deleted(mut self, input: i64) -> Self {
        self.files_deleted = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync deleted in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub fn set_files_deleted(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_deleted = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync deleted in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub fn get_files_deleted(&self) -> &::std::option::Option<i64> {
        &self.files_deleted
    }
    /// <p>The number of files, objects, and directories that DataSync skipped during your transfer.</p>
    pub fn files_skipped(mut self, input: i64) -> Self {
        self.files_skipped = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync skipped during your transfer.</p>
    pub fn set_files_skipped(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_skipped = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync skipped during your transfer.</p>
    pub fn get_files_skipped(&self) -> &::std::option::Option<i64> {
        &self.files_skipped
    }
    /// <p>The number of files, objects, and directories that DataSync verified during your transfer.</p> <note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub fn files_verified(mut self, input: i64) -> Self {
        self.files_verified = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of files, objects, and directories that DataSync verified during your transfer.</p> <note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub fn set_files_verified(mut self, input: ::std::option::Option<i64>) -> Self {
        self.files_verified = input;
        self
    }
    /// <p>The number of files, objects, and directories that DataSync verified during your transfer.</p> <note>
    /// <p>When you configure your task to <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-data-verification-options.html">verify only the data that's transferred</a>, DataSync doesn't verify directories in some situations or files that fail to transfer.</p>
    /// </note>
    pub fn get_files_verified(&self) -> &::std::option::Option<i64> {
        &self.files_verified
    }
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub fn report_result(mut self, input: crate::types::ReportResult) -> Self {
        self.report_result = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub fn set_report_result(mut self, input: ::std::option::Option<crate::types::ReportResult>) -> Self {
        self.report_result = input;
        self
    }
    /// <p>Indicates whether DataSync generated a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
    pub fn get_report_result(&self) -> &::std::option::Option<crate::types::ReportResult> {
        &self.report_result
    }
    /// <p>The expected number of files, objects, and directories that DataSync will delete in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub fn estimated_files_to_delete(mut self, input: i64) -> Self {
        self.estimated_files_to_delete = ::std::option::Option::Some(input);
        self
    }
    /// <p>The expected number of files, objects, and directories that DataSync will delete in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub fn set_estimated_files_to_delete(mut self, input: ::std::option::Option<i64>) -> Self {
        self.estimated_files_to_delete = input;
        self
    }
    /// <p>The expected number of files, objects, and directories that DataSync will delete in your destination location. If you don't <a href="https://docs.aws.amazon.com/datasync/latest/userguide/configure-metadata.html">configure your task</a> to delete data in the destination that isn't in the source, the value is always <code>0</code>.</p>
    pub fn get_estimated_files_to_delete(&self) -> &::std::option::Option<i64> {
        &self.estimated_files_to_delete
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTaskExecutionOutput`](crate::operation::describe_task_execution::DescribeTaskExecutionOutput).
    pub fn build(self) -> crate::operation::describe_task_execution::DescribeTaskExecutionOutput {
        crate::operation::describe_task_execution::DescribeTaskExecutionOutput {
            task_execution_arn: self.task_execution_arn,
            status: self.status,
            options: self.options,
            excludes: self.excludes,
            includes: self.includes,
            start_time: self.start_time,
            estimated_files_to_transfer: self.estimated_files_to_transfer.unwrap_or_default(),
            estimated_bytes_to_transfer: self.estimated_bytes_to_transfer.unwrap_or_default(),
            files_transferred: self.files_transferred.unwrap_or_default(),
            bytes_written: self.bytes_written.unwrap_or_default(),
            bytes_transferred: self.bytes_transferred.unwrap_or_default(),
            result: self.result,
            bytes_compressed: self.bytes_compressed.unwrap_or_default(),
            task_report_config: self.task_report_config,
            files_deleted: self.files_deleted.unwrap_or_default(),
            files_skipped: self.files_skipped.unwrap_or_default(),
            files_verified: self.files_verified.unwrap_or_default(),
            report_result: self.report_result,
            estimated_files_to_delete: self.estimated_files_to_delete.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
