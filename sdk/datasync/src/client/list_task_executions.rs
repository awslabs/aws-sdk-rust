// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTaskExecutions`](crate::client::fluent_builders::ListTaskExecutions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTaskExecutions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`task_arn(impl Into<String>)`](crate::client::fluent_builders::ListTaskExecutions::task_arn) / [`set_task_arn(Option<String>)`](crate::client::fluent_builders::ListTaskExecutions::set_task_arn): <p>The Amazon Resource Name (ARN) of the task whose tasks you want to list.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListTaskExecutions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListTaskExecutions::set_max_results): <p>The maximum number of executed tasks to list.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTaskExecutions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTaskExecutions::set_next_token): <p>An opaque string that indicates the position at which to begin the next list of the executed tasks.</p>
    /// - On success, responds with [`ListTaskExecutionsOutput`](crate::output::ListTaskExecutionsOutput) with field(s):
    ///   - [`task_executions(Option<Vec<TaskExecutionListEntry>>)`](crate::output::ListTaskExecutionsOutput::task_executions): <p>A list of executed tasks.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListTaskExecutionsOutput::next_token): <p>An opaque string that indicates the position at which to begin returning the next list of executed tasks.</p>
    /// - On failure, responds with [`SdkError<ListTaskExecutionsError>`](crate::error::ListTaskExecutionsError)
    pub fn list_task_executions(&self) -> crate::client::fluent_builders::ListTaskExecutions {
        crate::client::fluent_builders::ListTaskExecutions::new(self.handle.clone())
    }
}
