// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLocationHdfs`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subdirectory(impl Into<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::subdirectory) / [`set_subdirectory(Option<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_subdirectory): <p>A subdirectory in the HDFS cluster. This subdirectory is used to read data from or write data to the HDFS cluster. If the subdirectory isn't specified, it will default to <code>/</code>.</p>
    ///   - [`name_nodes(Vec<HdfsNameNode>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::name_nodes) / [`set_name_nodes(Option<Vec<HdfsNameNode>>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_name_nodes): <p>The NameNode that manages the HDFS namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes. You can use only one NameNode.</p>
    ///   - [`block_size(i32)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::block_size) / [`set_block_size(Option<i32>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_block_size): <p>The size of data blocks to write into the HDFS cluster. The block size must be a multiple of 512 bytes. The default block size is 128 mebibytes (MiB).</p>
    ///   - [`replication_factor(i32)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::replication_factor) / [`set_replication_factor(Option<i32>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_replication_factor): <p>The number of DataNodes to replicate the data to when writing to the HDFS cluster. By default, data is replicated to three DataNodes.</p>
    ///   - [`kms_key_provider_uri(impl Into<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::kms_key_provider_uri) / [`set_kms_key_provider_uri(Option<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_kms_key_provider_uri): <p>The URI of the HDFS cluster's Key Management Server (KMS). </p>
    ///   - [`qop_configuration(QopConfiguration)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::qop_configuration) / [`set_qop_configuration(Option<QopConfiguration>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_qop_configuration): <p>The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer protection settings configured on the Hadoop Distributed File System (HDFS) cluster. If <code>QopConfiguration</code> isn't specified, <code>RpcProtection</code> and <code>DataTransferProtection</code> default to <code>PRIVACY</code>. If you set <code>RpcProtection</code> or <code>DataTransferProtection</code>, the other parameter assumes the same value. </p>
    ///   - [`authentication_type(HdfsAuthenticationType)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::authentication_type) / [`set_authentication_type(Option<HdfsAuthenticationType>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_authentication_type): <p>The type of authentication used to determine the identity of the user. </p>
    ///   - [`simple_user(impl Into<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::simple_user) / [`set_simple_user(Option<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_simple_user): <p>The user name used to identify the client on the host operating system. </p> <note>   <p>If <code>SIMPLE</code> is specified for <code>AuthenticationType</code>, this parameter is required. </p>  </note>
    ///   - [`kerberos_principal(impl Into<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::kerberos_principal) / [`set_kerberos_principal(Option<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_kerberos_principal): <p>The Kerberos principal with access to the files and folders on the HDFS cluster. </p> <note>   <p>If <code>KERBEROS</code> is specified for <code>AuthenticationType</code>, this parameter is required.</p>  </note>
    ///   - [`kerberos_keytab(Blob)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::kerberos_keytab) / [`set_kerberos_keytab(Option<Blob>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_kerberos_keytab): <p>The Kerberos key table (keytab) that contains mappings between the defined Kerberos principal and the encrypted keys. You can load the keytab from a file by providing the file's address. If you're using the CLI, it performs base64 encoding for you. Otherwise, provide the base64-encoded text. </p> <note>   <p>If <code>KERBEROS</code> is specified for <code>AuthenticationType</code>, this parameter is required. </p>  </note>
    ///   - [`kerberos_krb5_conf(Blob)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::kerberos_krb5_conf) / [`set_kerberos_krb5_conf(Option<Blob>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_kerberos_krb5_conf): <p>The <code>krb5.conf</code> file that contains the Kerberos configuration information. You can load the <code>krb5.conf</code> file by providing the file's address. If you're using the CLI, it performs the base64 encoding for you. Otherwise, provide the base64-encoded text. </p> <note>   <p>If <code>KERBEROS</code> is specified for <code>AuthenticationType</code>, this parameter is required.</p>  </note>
    ///   - [`agent_arns(Vec<String>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::agent_arns) / [`set_agent_arns(Option<Vec<String>>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_agent_arns): <p>The Amazon Resource Names (ARNs) of the agents that are used to connect to the HDFS cluster.</p>
    ///   - [`tags(Vec<TagListEntry>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::tags) / [`set_tags(Option<Vec<TagListEntry>>)`](crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::set_tags): <p>The key-value pair that represents the tag that you want to add to the location. The value can be an empty string. We recommend using tags to name your resources. </p>
    /// - On success, responds with [`CreateLocationHdfsOutput`](crate::operation::create_location_hdfs::CreateLocationHdfsOutput) with field(s):
    ///   - [`location_arn(Option<String>)`](crate::operation::create_location_hdfs::CreateLocationHdfsOutput::location_arn): <p>The ARN of the source HDFS cluster location that's created. </p>
    /// - On failure, responds with [`SdkError<CreateLocationHdfsError>`](crate::operation::create_location_hdfs::CreateLocationHdfsError)
    pub fn create_location_hdfs(
        &self,
    ) -> crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder {
        crate::operation::create_location_hdfs::builders::CreateLocationHdfsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
