// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLocationHdfs`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`location_arn(impl Into<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::location_arn) / [`set_location_arn(Option<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_location_arn): <p>The Amazon Resource Name (ARN) of the source HDFS cluster location.</p>
    ///   - [`subdirectory(impl Into<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::subdirectory) / [`set_subdirectory(Option<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_subdirectory): <p>A subdirectory in the HDFS cluster. This subdirectory is used to read data from or write data to the HDFS cluster.</p>
    ///   - [`name_nodes(Vec<HdfsNameNode>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::name_nodes) / [`set_name_nodes(Option<Vec<HdfsNameNode>>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_name_nodes): <p>The NameNode that manages the HDFS namespace. The NameNode performs operations such as opening, closing, and renaming files and directories. The NameNode contains the information to map blocks of data to the DataNodes. You can use only one NameNode.</p>
    ///   - [`block_size(i32)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::block_size) / [`set_block_size(Option<i32>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_block_size): <p>The size of the data blocks to write into the HDFS cluster. </p>
    ///   - [`replication_factor(i32)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::replication_factor) / [`set_replication_factor(Option<i32>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_replication_factor): <p>The number of DataNodes to replicate the data to when writing to the HDFS cluster. </p>
    ///   - [`kms_key_provider_uri(impl Into<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::kms_key_provider_uri) / [`set_kms_key_provider_uri(Option<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_kms_key_provider_uri): <p>The URI of the HDFS cluster's Key Management Server (KMS). </p>
    ///   - [`qop_configuration(QopConfiguration)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::qop_configuration) / [`set_qop_configuration(Option<QopConfiguration>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_qop_configuration): <p>The Quality of Protection (QOP) configuration specifies the Remote Procedure Call (RPC) and data transfer privacy settings configured on the Hadoop Distributed File System (HDFS) cluster. </p>
    ///   - [`authentication_type(HdfsAuthenticationType)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::authentication_type) / [`set_authentication_type(Option<HdfsAuthenticationType>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_authentication_type): <p>The type of authentication used to determine the identity of the user. </p>
    ///   - [`simple_user(impl Into<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::simple_user) / [`set_simple_user(Option<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_simple_user): <p>The user name used to identify the client on the host operating system.</p>
    ///   - [`kerberos_principal(impl Into<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::kerberos_principal) / [`set_kerberos_principal(Option<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_kerberos_principal): <p>The Kerberos principal with access to the files and folders on the HDFS cluster. </p>
    ///   - [`kerberos_keytab(Blob)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::kerberos_keytab) / [`set_kerberos_keytab(Option<Blob>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_kerberos_keytab): <p>The Kerberos key table (keytab) that contains mappings between the defined Kerberos principal and the encrypted keys. You can load the keytab from a file by providing the file's address. If you use the CLI, it performs base64 encoding for you. Otherwise, provide the base64-encoded text.</p>
    ///   - [`kerberos_krb5_conf(Blob)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::kerberos_krb5_conf) / [`set_kerberos_krb5_conf(Option<Blob>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_kerberos_krb5_conf): <p>The <code>krb5.conf</code> file that contains the Kerberos configuration information. You can load the <code>krb5.conf</code> file by providing the file's address. If you're using the CLI, it performs the base64 encoding for you. Otherwise, provide the base64-encoded text.</p>
    ///   - [`agent_arns(Vec<String>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::agent_arns) / [`set_agent_arns(Option<Vec<String>>)`](crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::set_agent_arns): <p>The ARNs of the agents that are used to connect to the HDFS cluster. </p>
    /// - On success, responds with [`UpdateLocationHdfsOutput`](crate::operation::update_location_hdfs::UpdateLocationHdfsOutput)
    /// - On failure, responds with [`SdkError<UpdateLocationHdfsError>`](crate::operation::update_location_hdfs::UpdateLocationHdfsError)
    pub fn update_location_hdfs(
        &self,
    ) -> crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder {
        crate::operation::update_location_hdfs::builders::UpdateLocationHdfsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
