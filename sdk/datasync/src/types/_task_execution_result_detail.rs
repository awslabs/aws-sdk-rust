// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the detailed result of a <code>TaskExecution</code> operation. This result includes the time in milliseconds spent in each phase, the status of the task execution, and the errors encountered.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TaskExecutionResultDetail {
    /// <p>The total time in milliseconds that DataSync spent in the PREPARING phase. </p>
    #[doc(hidden)]
    pub prepare_duration: std::option::Option<i64>,
    /// <p>The status of the PREPARING phase.</p>
    #[doc(hidden)]
    pub prepare_status: std::option::Option<crate::types::PhaseStatus>,
    /// <p>The total time in milliseconds that DataSync took to transfer the file from the source to the destination location.</p>
    #[doc(hidden)]
    pub total_duration: std::option::Option<i64>,
    /// <p>The total time in milliseconds that DataSync spent in the TRANSFERRING phase.</p>
    #[doc(hidden)]
    pub transfer_duration: std::option::Option<i64>,
    /// <p>The status of the TRANSFERRING phase.</p>
    #[doc(hidden)]
    pub transfer_status: std::option::Option<crate::types::PhaseStatus>,
    /// <p>The total time in milliseconds that DataSync spent in the VERIFYING phase.</p>
    #[doc(hidden)]
    pub verify_duration: std::option::Option<i64>,
    /// <p>The status of the VERIFYING phase.</p>
    #[doc(hidden)]
    pub verify_status: std::option::Option<crate::types::PhaseStatus>,
    /// <p>Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.</p>
    #[doc(hidden)]
    pub error_code: std::option::Option<std::string::String>,
    /// <p>Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues. </p>
    #[doc(hidden)]
    pub error_detail: std::option::Option<std::string::String>,
}
impl TaskExecutionResultDetail {
    /// <p>The total time in milliseconds that DataSync spent in the PREPARING phase. </p>
    pub fn prepare_duration(&self) -> std::option::Option<i64> {
        self.prepare_duration
    }
    /// <p>The status of the PREPARING phase.</p>
    pub fn prepare_status(&self) -> std::option::Option<&crate::types::PhaseStatus> {
        self.prepare_status.as_ref()
    }
    /// <p>The total time in milliseconds that DataSync took to transfer the file from the source to the destination location.</p>
    pub fn total_duration(&self) -> std::option::Option<i64> {
        self.total_duration
    }
    /// <p>The total time in milliseconds that DataSync spent in the TRANSFERRING phase.</p>
    pub fn transfer_duration(&self) -> std::option::Option<i64> {
        self.transfer_duration
    }
    /// <p>The status of the TRANSFERRING phase.</p>
    pub fn transfer_status(&self) -> std::option::Option<&crate::types::PhaseStatus> {
        self.transfer_status.as_ref()
    }
    /// <p>The total time in milliseconds that DataSync spent in the VERIFYING phase.</p>
    pub fn verify_duration(&self) -> std::option::Option<i64> {
        self.verify_duration
    }
    /// <p>The status of the VERIFYING phase.</p>
    pub fn verify_status(&self) -> std::option::Option<&crate::types::PhaseStatus> {
        self.verify_status.as_ref()
    }
    /// <p>Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.</p>
    pub fn error_code(&self) -> std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues. </p>
    pub fn error_detail(&self) -> std::option::Option<&str> {
        self.error_detail.as_deref()
    }
}
impl TaskExecutionResultDetail {
    /// Creates a new builder-style object to manufacture [`TaskExecutionResultDetail`](crate::types::TaskExecutionResultDetail).
    pub fn builder() -> crate::types::builders::TaskExecutionResultDetailBuilder {
        crate::types::builders::TaskExecutionResultDetailBuilder::default()
    }
}

/// A builder for [`TaskExecutionResultDetail`](crate::types::TaskExecutionResultDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TaskExecutionResultDetailBuilder {
    pub(crate) prepare_duration: std::option::Option<i64>,
    pub(crate) prepare_status: std::option::Option<crate::types::PhaseStatus>,
    pub(crate) total_duration: std::option::Option<i64>,
    pub(crate) transfer_duration: std::option::Option<i64>,
    pub(crate) transfer_status: std::option::Option<crate::types::PhaseStatus>,
    pub(crate) verify_duration: std::option::Option<i64>,
    pub(crate) verify_status: std::option::Option<crate::types::PhaseStatus>,
    pub(crate) error_code: std::option::Option<std::string::String>,
    pub(crate) error_detail: std::option::Option<std::string::String>,
}
impl TaskExecutionResultDetailBuilder {
    /// <p>The total time in milliseconds that DataSync spent in the PREPARING phase. </p>
    pub fn prepare_duration(mut self, input: i64) -> Self {
        self.prepare_duration = Some(input);
        self
    }
    /// <p>The total time in milliseconds that DataSync spent in the PREPARING phase. </p>
    pub fn set_prepare_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.prepare_duration = input;
        self
    }
    /// <p>The status of the PREPARING phase.</p>
    pub fn prepare_status(mut self, input: crate::types::PhaseStatus) -> Self {
        self.prepare_status = Some(input);
        self
    }
    /// <p>The status of the PREPARING phase.</p>
    pub fn set_prepare_status(
        mut self,
        input: std::option::Option<crate::types::PhaseStatus>,
    ) -> Self {
        self.prepare_status = input;
        self
    }
    /// <p>The total time in milliseconds that DataSync took to transfer the file from the source to the destination location.</p>
    pub fn total_duration(mut self, input: i64) -> Self {
        self.total_duration = Some(input);
        self
    }
    /// <p>The total time in milliseconds that DataSync took to transfer the file from the source to the destination location.</p>
    pub fn set_total_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.total_duration = input;
        self
    }
    /// <p>The total time in milliseconds that DataSync spent in the TRANSFERRING phase.</p>
    pub fn transfer_duration(mut self, input: i64) -> Self {
        self.transfer_duration = Some(input);
        self
    }
    /// <p>The total time in milliseconds that DataSync spent in the TRANSFERRING phase.</p>
    pub fn set_transfer_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.transfer_duration = input;
        self
    }
    /// <p>The status of the TRANSFERRING phase.</p>
    pub fn transfer_status(mut self, input: crate::types::PhaseStatus) -> Self {
        self.transfer_status = Some(input);
        self
    }
    /// <p>The status of the TRANSFERRING phase.</p>
    pub fn set_transfer_status(
        mut self,
        input: std::option::Option<crate::types::PhaseStatus>,
    ) -> Self {
        self.transfer_status = input;
        self
    }
    /// <p>The total time in milliseconds that DataSync spent in the VERIFYING phase.</p>
    pub fn verify_duration(mut self, input: i64) -> Self {
        self.verify_duration = Some(input);
        self
    }
    /// <p>The total time in milliseconds that DataSync spent in the VERIFYING phase.</p>
    pub fn set_verify_duration(mut self, input: std::option::Option<i64>) -> Self {
        self.verify_duration = input;
        self
    }
    /// <p>The status of the VERIFYING phase.</p>
    pub fn verify_status(mut self, input: crate::types::PhaseStatus) -> Self {
        self.verify_status = Some(input);
        self
    }
    /// <p>The status of the VERIFYING phase.</p>
    pub fn set_verify_status(
        mut self,
        input: std::option::Option<crate::types::PhaseStatus>,
    ) -> Self {
        self.verify_status = input;
        self
    }
    /// <p>Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.</p>
    pub fn error_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_code = Some(input.into());
        self
    }
    /// <p>Errors that DataSync encountered during execution of the task. You can use this error code to help troubleshoot issues.</p>
    pub fn set_error_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues. </p>
    pub fn error_detail(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_detail = Some(input.into());
        self
    }
    /// <p>Detailed description of an error that was encountered during the task execution. You can use this information to help troubleshoot issues. </p>
    pub fn set_error_detail(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_detail = input;
        self
    }
    /// Consumes the builder and constructs a [`TaskExecutionResultDetail`](crate::types::TaskExecutionResultDetail).
    pub fn build(self) -> crate::types::TaskExecutionResultDetail {
        crate::types::TaskExecutionResultDetail {
            prepare_duration: self.prepare_duration,
            prepare_status: self.prepare_status,
            total_duration: self.total_duration,
            transfer_duration: self.transfer_duration,
            transfer_status: self.transfer_status,
            verify_duration: self.verify_duration,
            verify_status: self.verify_status,
            error_code: self.error_code,
            error_detail: self.error_detail,
        }
    }
}
