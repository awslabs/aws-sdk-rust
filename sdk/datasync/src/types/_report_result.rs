// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates whether DataSync created a complete <a href="https://docs.aws.amazon.com/datasync/latest/userguide/task-reports.html">task report</a> for your transfer.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReportResult {
    /// <p>Indicates whether DataSync is still working on your report, created a report, or can't create a complete report.</p>
    pub status: ::std::option::Option<crate::types::PhaseStatus>,
    /// <p>Indicates the code associated with the error if DataSync can't create a complete report.</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>Provides details about issues creating a report.</p>
    pub error_detail: ::std::option::Option<::std::string::String>,
}
impl ReportResult {
    /// <p>Indicates whether DataSync is still working on your report, created a report, or can't create a complete report.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::PhaseStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates the code associated with the error if DataSync can't create a complete report.</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>Provides details about issues creating a report.</p>
    pub fn error_detail(&self) -> ::std::option::Option<&str> {
        self.error_detail.as_deref()
    }
}
impl ReportResult {
    /// Creates a new builder-style object to manufacture [`ReportResult`](crate::types::ReportResult).
    pub fn builder() -> crate::types::builders::ReportResultBuilder {
        crate::types::builders::ReportResultBuilder::default()
    }
}

/// A builder for [`ReportResult`](crate::types::ReportResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReportResultBuilder {
    pub(crate) status: ::std::option::Option<crate::types::PhaseStatus>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_detail: ::std::option::Option<::std::string::String>,
}
impl ReportResultBuilder {
    /// <p>Indicates whether DataSync is still working on your report, created a report, or can't create a complete report.</p>
    pub fn status(mut self, input: crate::types::PhaseStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether DataSync is still working on your report, created a report, or can't create a complete report.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::PhaseStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates whether DataSync is still working on your report, created a report, or can't create a complete report.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::PhaseStatus> {
        &self.status
    }
    /// <p>Indicates the code associated with the error if DataSync can't create a complete report.</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Indicates the code associated with the error if DataSync can't create a complete report.</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>Indicates the code associated with the error if DataSync can't create a complete report.</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>Provides details about issues creating a report.</p>
    pub fn error_detail(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_detail = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Provides details about issues creating a report.</p>
    pub fn set_error_detail(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_detail = input;
        self
    }
    /// <p>Provides details about issues creating a report.</p>
    pub fn get_error_detail(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_detail
    }
    /// Consumes the builder and constructs a [`ReportResult`](crate::types::ReportResult).
    pub fn build(self) -> crate::types::ReportResult {
        crate::types::ReportResult {
            status: self.status,
            error_code: self.error_code,
            error_detail: self.error_detail,
        }
    }
}
