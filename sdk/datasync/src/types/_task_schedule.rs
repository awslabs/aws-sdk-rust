// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the schedule you want your task to use for repeated executions. For more information, see <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html">Schedule Expressions for Rules</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TaskSchedule {
    /// <p>A cron expression that specifies when DataSync initiates a scheduled transfer from a source to a destination location. </p>
    #[doc(hidden)]
    pub schedule_expression: std::option::Option<std::string::String>,
}
impl TaskSchedule {
    /// <p>A cron expression that specifies when DataSync initiates a scheduled transfer from a source to a destination location. </p>
    pub fn schedule_expression(&self) -> std::option::Option<&str> {
        self.schedule_expression.as_deref()
    }
}
impl TaskSchedule {
    /// Creates a new builder-style object to manufacture [`TaskSchedule`](crate::types::TaskSchedule).
    pub fn builder() -> crate::types::builders::TaskScheduleBuilder {
        crate::types::builders::TaskScheduleBuilder::default()
    }
}

/// A builder for [`TaskSchedule`](crate::types::TaskSchedule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TaskScheduleBuilder {
    pub(crate) schedule_expression: std::option::Option<std::string::String>,
}
impl TaskScheduleBuilder {
    /// <p>A cron expression that specifies when DataSync initiates a scheduled transfer from a source to a destination location. </p>
    pub fn schedule_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_expression = Some(input.into());
        self
    }
    /// <p>A cron expression that specifies when DataSync initiates a scheduled transfer from a source to a destination location. </p>
    pub fn set_schedule_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schedule_expression = input;
        self
    }
    /// Consumes the builder and constructs a [`TaskSchedule`](crate::types::TaskSchedule).
    pub fn build(self) -> crate::types::TaskSchedule {
        crate::types::TaskSchedule {
            schedule_expression: self.schedule_expression,
        }
    }
}
