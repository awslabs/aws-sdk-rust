// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configures your DataSync task settings. These options include how DataSync handles files, objects, and their associated metadata. You also can specify how DataSync verifies data integrity, set bandwidth limits for your task, among other options.</p>
/// <p>Each task setting has a default value. Unless you need to, you don't have to configure any of these <code>Options</code> before starting your task.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Options {
    /// <p>Specifies how and when DataSync checks the integrity of your data during a transfer. </p>
    /// <p>Default value: <code>POINT_IN_TIME_CONSISTENT</code> </p>
    /// <p> <code>ONLY_FILES_TRANSFERRED</code> (recommended): DataSync calculates the checksum of transferred files and metadata at the source location. At the end of the transfer, DataSync then compares this checksum to the checksum calculated on those files at the destination.</p>
    /// <p>We recommend this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Storage class considerations with Amazon S3 locations</a>.</p>
    /// <p> <code>POINT_IN_TIME_CONSISTENT</code>: At the end of the transfer, DataSync scans the entire source and destination to verify that both locations are fully synchronized.</p>
    /// <p>You can't use this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Storage class considerations with Amazon S3 locations</a>.</p>
    /// <p> <code>NONE</code>: DataSync doesn't run additional verification at the end of the transfer. All data transmissions are still integrity-checked with checksum verification during the transfer.</p>
    #[doc(hidden)]
    pub verify_mode: std::option::Option<crate::types::VerifyMode>,
    /// <p>Specifies whether data at the destination location should be overwritten or preserved. If set to <code>NEVER</code>, a destination file for example will not be replaced by a source file (even if the destination file differs from the source file). If you modify files in the destination and you sync the files, you can use this value to protect against overwriting those changes. </p>
    /// <p>Some storage classes have specific behaviors that can affect your Amazon S3 storage cost. For detailed information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Considerations when working with Amazon S3 storage classes in DataSync </a>.</p>
    #[doc(hidden)]
    pub overwrite_mode: std::option::Option<crate::types::OverwriteMode>,
    /// <p>Specifies whether to preserve metadata indicating the last time a file was read or written to. If you set <code>Atime</code> to <code>BEST_EFFORT</code>, DataSync attempts to preserve the original <code>Atime</code> attribute on all source files (that is, the version before the <code>PREPARING</code> phase of the task execution).</p> <note>
    /// <p>The behavior of <code>Atime</code> isn't fully standard across platforms, so DataSync can only do this on a best-effort basis.</p>
    /// </note>
    /// <p>Default value: <code>BEST_EFFORT</code> </p>
    /// <p> <code>BEST_EFFORT</code>: Attempt to preserve the per-file <code>Atime</code> value (recommended).</p>
    /// <p> <code>NONE</code>: Ignore <code>Atime</code>.</p> <note>
    /// <p>If <code>Atime</code> is set to <code>BEST_EFFORT</code>, <code>Mtime</code> must be set to <code>PRESERVE</code>. </p>
    /// <p>If <code>Atime</code> is set to <code>NONE</code>, <code>Mtime</code> must also be <code>NONE</code>. </p>
    /// </note>
    #[doc(hidden)]
    pub atime: std::option::Option<crate::types::Atime>,
    /// <p>Specifies whether to preserve metadata indicating the last time that a file was written to before the <code>PREPARING</code> phase of your task execution. This option is required when you need to run the a task more than once.</p>
    /// <p>Default Value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Preserve original <code>Mtime</code> (recommended)</p>
    /// <p> <code>NONE</code>: Ignore <code>Mtime</code>. </p> <note>
    /// <p>If <code>Mtime</code> is set to <code>PRESERVE</code>, <code>Atime</code> must be set to <code>BEST_EFFORT</code>.</p>
    /// <p>If <code>Mtime</code> is set to <code>NONE</code>, <code>Atime</code> must also be set to <code>NONE</code>. </p>
    /// </note>
    #[doc(hidden)]
    pub mtime: std::option::Option<crate::types::Mtime>,
    /// <p>Specifies the POSIX user ID (UID) of the file's owner.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>INT_VALUE</code>. This preserves the integer value of the ID.</p>
    /// <p> <code>INT_VALUE</code>: Preserve the integer value of UID and group ID (GID) (recommended).</p>
    /// <p> <code>NONE</code>: Ignore UID and GID. </p>
    #[doc(hidden)]
    pub uid: std::option::Option<crate::types::Uid>,
    /// <p>Specifies the POSIX group ID (GID) of the file's owners.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>INT_VALUE</code>. This preserves the integer value of the ID.</p>
    /// <p> <code>INT_VALUE</code>: Preserve the integer value of user ID (UID) and GID (recommended).</p>
    /// <p> <code>NONE</code>: Ignore UID and GID.</p>
    #[doc(hidden)]
    pub gid: std::option::Option<crate::types::Gid>,
    /// <p>Specifies whether files in the destination location that don't exist in the source should be preserved. This option can affect your Amazon S3 storage cost. If your task deletes objects, you might incur minimum storage duration charges for certain storage classes. For detailed information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Considerations when working with Amazon S3 storage classes in DataSync </a>.</p>
    /// <p>Default value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Ignore such destination files (recommended). </p>
    /// <p> <code>REMOVE</code>: Delete destination files that arenâ€™t present in the source.</p>
    #[doc(hidden)]
    pub preserve_deleted_files: std::option::Option<crate::types::PreserveDeletedFiles>,
    /// <p>Specifies whether DataSync should preserve the metadata of block and character devices in the source location and recreate the files with that device name and metadata on the destination. DataSync copies only the name and metadata of such devices.</p> <note>
    /// <p>DataSync can't copy the actual contents of these devices because they're nonterminal and don't return an end-of-file (EOF) marker.</p>
    /// </note>
    /// <p>Default value: <code>NONE</code> </p>
    /// <p> <code>NONE</code>: Ignore special devices (recommended). </p>
    /// <p> <code>PRESERVE</code>: Preserve character and block device metadata. This option currently isn't supported for Amazon EFS. </p>
    #[doc(hidden)]
    pub preserve_devices: std::option::Option<crate::types::PreserveDevices>,
    /// <p>Specifies which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Preserve POSIX-style permissions (recommended).</p>
    /// <p> <code>NONE</code>: Ignore permissions. </p> <note>
    /// <p>DataSync can preserve extant permissions of a source location.</p>
    /// </note>
    #[doc(hidden)]
    pub posix_permissions: std::option::Option<crate::types::PosixPermissions>,
    /// <p>Limits the bandwidth used by a DataSync task. For example, if you want DataSync to use a maximum of 1 MB, set this value to <code>1048576</code> (<code>=1024*1024</code>).</p>
    #[doc(hidden)]
    pub bytes_per_second: std::option::Option<i64>,
    /// <p>Specifies whether tasks should be queued before executing the tasks. The default is <code>ENABLED</code>, which means the tasks will be queued.</p>
    /// <p>If you use the same agent to run multiple tasks, you can enable the tasks to run in series. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#queue-task-execution">Queueing task executions</a>.</p>
    #[doc(hidden)]
    pub task_queueing: std::option::Option<crate::types::TaskQueueing>,
    /// <p>Specifies the type of logs that DataSync publishes to a Amazon CloudWatch Logs log group. To specify the log group, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateTask.html#DataSync-CreateTask-request-CloudWatchLogGroupArn">CloudWatchLogGroupArn</a>.</p>
    /// <p>If you set <code>LogLevel</code> to <code>OFF</code>, no logs are published. <code>BASIC</code> publishes logs on errors for individual files transferred. <code>TRANSFER</code> publishes logs for every file or object that is transferred and integrity checked.</p>
    #[doc(hidden)]
    pub log_level: std::option::Option<crate::types::LogLevel>,
    /// <p>Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location or transfers all the content from the source (without comparing what's in the destination).</p>
    /// <p> <code>CHANGED</code>: DataSync copies only data or metadata that is new or different content from the source location to the destination location.</p>
    /// <p> <code>ALL</code>: DataSync copies all source location content to the destination (without comparing what's in the destination).</p>
    #[doc(hidden)]
    pub transfer_mode: std::option::Option<crate::types::TransferMode>,
    /// <p>Specifies which components of the SMB security descriptor are copied from source to destination objects. </p>
    /// <p>This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations or between two FSx for Windows File Server locations. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html">how DataSync handles metadata</a>.</p>
    /// <p>Default value: <code>OWNER_DACL</code> </p>
    /// <p> <code>OWNER_DACL</code>: For each copied object, DataSync copies the following metadata:</p>
    /// <ul>
    /// <li> <p>The object owner.</p> </li>
    /// <li> <p>NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.</p> <p>DataSync won't copy NTFS system access control lists (SACLs) with this option.</p> </li>
    /// </ul>
    /// <p> <code>OWNER_DACL_SACL</code>: For each copied object, DataSync copies the following metadata:</p>
    /// <ul>
    /// <li> <p>The object owner.</p> </li>
    /// <li> <p>NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.</p> </li>
    /// <li> <p>SACLs, which are used by administrators to log attempts to access a secured object.</p> <p>Copying SACLs requires granting additional permissions to the Windows user that DataSync uses to access your SMB location. For information about choosing a user that ensures sufficient permissions to files, folders, and metadata, see <a href="create-smb-location.html#SMBuser">user</a>.</p> </li>
    /// </ul>
    /// <p> <code>NONE</code>: None of the SMB security descriptor components are copied. Destination objects are owned by the user that was provided for accessing the destination location. DACLs and SACLs are set based on the destination serverâ€™s configuration. </p>
    #[doc(hidden)]
    pub security_descriptor_copy_flags:
        std::option::Option<crate::types::SmbSecurityDescriptorCopyFlags>,
    /// <p>Specifies whether object tags are preserved when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the <code>NONE</code> value.</p>
    /// <p>Default Value: <code>PRESERVE</code> </p>
    #[doc(hidden)]
    pub object_tags: std::option::Option<crate::types::ObjectTags>,
}
impl Options {
    /// <p>Specifies how and when DataSync checks the integrity of your data during a transfer. </p>
    /// <p>Default value: <code>POINT_IN_TIME_CONSISTENT</code> </p>
    /// <p> <code>ONLY_FILES_TRANSFERRED</code> (recommended): DataSync calculates the checksum of transferred files and metadata at the source location. At the end of the transfer, DataSync then compares this checksum to the checksum calculated on those files at the destination.</p>
    /// <p>We recommend this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Storage class considerations with Amazon S3 locations</a>.</p>
    /// <p> <code>POINT_IN_TIME_CONSISTENT</code>: At the end of the transfer, DataSync scans the entire source and destination to verify that both locations are fully synchronized.</p>
    /// <p>You can't use this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Storage class considerations with Amazon S3 locations</a>.</p>
    /// <p> <code>NONE</code>: DataSync doesn't run additional verification at the end of the transfer. All data transmissions are still integrity-checked with checksum verification during the transfer.</p>
    pub fn verify_mode(&self) -> std::option::Option<&crate::types::VerifyMode> {
        self.verify_mode.as_ref()
    }
    /// <p>Specifies whether data at the destination location should be overwritten or preserved. If set to <code>NEVER</code>, a destination file for example will not be replaced by a source file (even if the destination file differs from the source file). If you modify files in the destination and you sync the files, you can use this value to protect against overwriting those changes. </p>
    /// <p>Some storage classes have specific behaviors that can affect your Amazon S3 storage cost. For detailed information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Considerations when working with Amazon S3 storage classes in DataSync </a>.</p>
    pub fn overwrite_mode(&self) -> std::option::Option<&crate::types::OverwriteMode> {
        self.overwrite_mode.as_ref()
    }
    /// <p>Specifies whether to preserve metadata indicating the last time a file was read or written to. If you set <code>Atime</code> to <code>BEST_EFFORT</code>, DataSync attempts to preserve the original <code>Atime</code> attribute on all source files (that is, the version before the <code>PREPARING</code> phase of the task execution).</p> <note>
    /// <p>The behavior of <code>Atime</code> isn't fully standard across platforms, so DataSync can only do this on a best-effort basis.</p>
    /// </note>
    /// <p>Default value: <code>BEST_EFFORT</code> </p>
    /// <p> <code>BEST_EFFORT</code>: Attempt to preserve the per-file <code>Atime</code> value (recommended).</p>
    /// <p> <code>NONE</code>: Ignore <code>Atime</code>.</p> <note>
    /// <p>If <code>Atime</code> is set to <code>BEST_EFFORT</code>, <code>Mtime</code> must be set to <code>PRESERVE</code>. </p>
    /// <p>If <code>Atime</code> is set to <code>NONE</code>, <code>Mtime</code> must also be <code>NONE</code>. </p>
    /// </note>
    pub fn atime(&self) -> std::option::Option<&crate::types::Atime> {
        self.atime.as_ref()
    }
    /// <p>Specifies whether to preserve metadata indicating the last time that a file was written to before the <code>PREPARING</code> phase of your task execution. This option is required when you need to run the a task more than once.</p>
    /// <p>Default Value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Preserve original <code>Mtime</code> (recommended)</p>
    /// <p> <code>NONE</code>: Ignore <code>Mtime</code>. </p> <note>
    /// <p>If <code>Mtime</code> is set to <code>PRESERVE</code>, <code>Atime</code> must be set to <code>BEST_EFFORT</code>.</p>
    /// <p>If <code>Mtime</code> is set to <code>NONE</code>, <code>Atime</code> must also be set to <code>NONE</code>. </p>
    /// </note>
    pub fn mtime(&self) -> std::option::Option<&crate::types::Mtime> {
        self.mtime.as_ref()
    }
    /// <p>Specifies the POSIX user ID (UID) of the file's owner.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>INT_VALUE</code>. This preserves the integer value of the ID.</p>
    /// <p> <code>INT_VALUE</code>: Preserve the integer value of UID and group ID (GID) (recommended).</p>
    /// <p> <code>NONE</code>: Ignore UID and GID. </p>
    pub fn uid(&self) -> std::option::Option<&crate::types::Uid> {
        self.uid.as_ref()
    }
    /// <p>Specifies the POSIX group ID (GID) of the file's owners.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>INT_VALUE</code>. This preserves the integer value of the ID.</p>
    /// <p> <code>INT_VALUE</code>: Preserve the integer value of user ID (UID) and GID (recommended).</p>
    /// <p> <code>NONE</code>: Ignore UID and GID.</p>
    pub fn gid(&self) -> std::option::Option<&crate::types::Gid> {
        self.gid.as_ref()
    }
    /// <p>Specifies whether files in the destination location that don't exist in the source should be preserved. This option can affect your Amazon S3 storage cost. If your task deletes objects, you might incur minimum storage duration charges for certain storage classes. For detailed information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Considerations when working with Amazon S3 storage classes in DataSync </a>.</p>
    /// <p>Default value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Ignore such destination files (recommended). </p>
    /// <p> <code>REMOVE</code>: Delete destination files that arenâ€™t present in the source.</p>
    pub fn preserve_deleted_files(
        &self,
    ) -> std::option::Option<&crate::types::PreserveDeletedFiles> {
        self.preserve_deleted_files.as_ref()
    }
    /// <p>Specifies whether DataSync should preserve the metadata of block and character devices in the source location and recreate the files with that device name and metadata on the destination. DataSync copies only the name and metadata of such devices.</p> <note>
    /// <p>DataSync can't copy the actual contents of these devices because they're nonterminal and don't return an end-of-file (EOF) marker.</p>
    /// </note>
    /// <p>Default value: <code>NONE</code> </p>
    /// <p> <code>NONE</code>: Ignore special devices (recommended). </p>
    /// <p> <code>PRESERVE</code>: Preserve character and block device metadata. This option currently isn't supported for Amazon EFS. </p>
    pub fn preserve_devices(&self) -> std::option::Option<&crate::types::PreserveDevices> {
        self.preserve_devices.as_ref()
    }
    /// <p>Specifies which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Preserve POSIX-style permissions (recommended).</p>
    /// <p> <code>NONE</code>: Ignore permissions. </p> <note>
    /// <p>DataSync can preserve extant permissions of a source location.</p>
    /// </note>
    pub fn posix_permissions(&self) -> std::option::Option<&crate::types::PosixPermissions> {
        self.posix_permissions.as_ref()
    }
    /// <p>Limits the bandwidth used by a DataSync task. For example, if you want DataSync to use a maximum of 1 MB, set this value to <code>1048576</code> (<code>=1024*1024</code>).</p>
    pub fn bytes_per_second(&self) -> std::option::Option<i64> {
        self.bytes_per_second
    }
    /// <p>Specifies whether tasks should be queued before executing the tasks. The default is <code>ENABLED</code>, which means the tasks will be queued.</p>
    /// <p>If you use the same agent to run multiple tasks, you can enable the tasks to run in series. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#queue-task-execution">Queueing task executions</a>.</p>
    pub fn task_queueing(&self) -> std::option::Option<&crate::types::TaskQueueing> {
        self.task_queueing.as_ref()
    }
    /// <p>Specifies the type of logs that DataSync publishes to a Amazon CloudWatch Logs log group. To specify the log group, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateTask.html#DataSync-CreateTask-request-CloudWatchLogGroupArn">CloudWatchLogGroupArn</a>.</p>
    /// <p>If you set <code>LogLevel</code> to <code>OFF</code>, no logs are published. <code>BASIC</code> publishes logs on errors for individual files transferred. <code>TRANSFER</code> publishes logs for every file or object that is transferred and integrity checked.</p>
    pub fn log_level(&self) -> std::option::Option<&crate::types::LogLevel> {
        self.log_level.as_ref()
    }
    /// <p>Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location or transfers all the content from the source (without comparing what's in the destination).</p>
    /// <p> <code>CHANGED</code>: DataSync copies only data or metadata that is new or different content from the source location to the destination location.</p>
    /// <p> <code>ALL</code>: DataSync copies all source location content to the destination (without comparing what's in the destination).</p>
    pub fn transfer_mode(&self) -> std::option::Option<&crate::types::TransferMode> {
        self.transfer_mode.as_ref()
    }
    /// <p>Specifies which components of the SMB security descriptor are copied from source to destination objects. </p>
    /// <p>This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations or between two FSx for Windows File Server locations. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html">how DataSync handles metadata</a>.</p>
    /// <p>Default value: <code>OWNER_DACL</code> </p>
    /// <p> <code>OWNER_DACL</code>: For each copied object, DataSync copies the following metadata:</p>
    /// <ul>
    /// <li> <p>The object owner.</p> </li>
    /// <li> <p>NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.</p> <p>DataSync won't copy NTFS system access control lists (SACLs) with this option.</p> </li>
    /// </ul>
    /// <p> <code>OWNER_DACL_SACL</code>: For each copied object, DataSync copies the following metadata:</p>
    /// <ul>
    /// <li> <p>The object owner.</p> </li>
    /// <li> <p>NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.</p> </li>
    /// <li> <p>SACLs, which are used by administrators to log attempts to access a secured object.</p> <p>Copying SACLs requires granting additional permissions to the Windows user that DataSync uses to access your SMB location. For information about choosing a user that ensures sufficient permissions to files, folders, and metadata, see <a href="create-smb-location.html#SMBuser">user</a>.</p> </li>
    /// </ul>
    /// <p> <code>NONE</code>: None of the SMB security descriptor components are copied. Destination objects are owned by the user that was provided for accessing the destination location. DACLs and SACLs are set based on the destination serverâ€™s configuration. </p>
    pub fn security_descriptor_copy_flags(
        &self,
    ) -> std::option::Option<&crate::types::SmbSecurityDescriptorCopyFlags> {
        self.security_descriptor_copy_flags.as_ref()
    }
    /// <p>Specifies whether object tags are preserved when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the <code>NONE</code> value.</p>
    /// <p>Default Value: <code>PRESERVE</code> </p>
    pub fn object_tags(&self) -> std::option::Option<&crate::types::ObjectTags> {
        self.object_tags.as_ref()
    }
}
impl Options {
    /// Creates a new builder-style object to manufacture [`Options`](crate::types::Options).
    pub fn builder() -> crate::types::builders::OptionsBuilder {
        crate::types::builders::OptionsBuilder::default()
    }
}

/// A builder for [`Options`](crate::types::Options).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OptionsBuilder {
    pub(crate) verify_mode: std::option::Option<crate::types::VerifyMode>,
    pub(crate) overwrite_mode: std::option::Option<crate::types::OverwriteMode>,
    pub(crate) atime: std::option::Option<crate::types::Atime>,
    pub(crate) mtime: std::option::Option<crate::types::Mtime>,
    pub(crate) uid: std::option::Option<crate::types::Uid>,
    pub(crate) gid: std::option::Option<crate::types::Gid>,
    pub(crate) preserve_deleted_files: std::option::Option<crate::types::PreserveDeletedFiles>,
    pub(crate) preserve_devices: std::option::Option<crate::types::PreserveDevices>,
    pub(crate) posix_permissions: std::option::Option<crate::types::PosixPermissions>,
    pub(crate) bytes_per_second: std::option::Option<i64>,
    pub(crate) task_queueing: std::option::Option<crate::types::TaskQueueing>,
    pub(crate) log_level: std::option::Option<crate::types::LogLevel>,
    pub(crate) transfer_mode: std::option::Option<crate::types::TransferMode>,
    pub(crate) security_descriptor_copy_flags:
        std::option::Option<crate::types::SmbSecurityDescriptorCopyFlags>,
    pub(crate) object_tags: std::option::Option<crate::types::ObjectTags>,
}
impl OptionsBuilder {
    /// <p>Specifies how and when DataSync checks the integrity of your data during a transfer. </p>
    /// <p>Default value: <code>POINT_IN_TIME_CONSISTENT</code> </p>
    /// <p> <code>ONLY_FILES_TRANSFERRED</code> (recommended): DataSync calculates the checksum of transferred files and metadata at the source location. At the end of the transfer, DataSync then compares this checksum to the checksum calculated on those files at the destination.</p>
    /// <p>We recommend this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Storage class considerations with Amazon S3 locations</a>.</p>
    /// <p> <code>POINT_IN_TIME_CONSISTENT</code>: At the end of the transfer, DataSync scans the entire source and destination to verify that both locations are fully synchronized.</p>
    /// <p>You can't use this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Storage class considerations with Amazon S3 locations</a>.</p>
    /// <p> <code>NONE</code>: DataSync doesn't run additional verification at the end of the transfer. All data transmissions are still integrity-checked with checksum verification during the transfer.</p>
    pub fn verify_mode(mut self, input: crate::types::VerifyMode) -> Self {
        self.verify_mode = Some(input);
        self
    }
    /// <p>Specifies how and when DataSync checks the integrity of your data during a transfer. </p>
    /// <p>Default value: <code>POINT_IN_TIME_CONSISTENT</code> </p>
    /// <p> <code>ONLY_FILES_TRANSFERRED</code> (recommended): DataSync calculates the checksum of transferred files and metadata at the source location. At the end of the transfer, DataSync then compares this checksum to the checksum calculated on those files at the destination.</p>
    /// <p>We recommend this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Storage class considerations with Amazon S3 locations</a>.</p>
    /// <p> <code>POINT_IN_TIME_CONSISTENT</code>: At the end of the transfer, DataSync scans the entire source and destination to verify that both locations are fully synchronized.</p>
    /// <p>You can't use this option when transferring to S3 Glacier Flexible Retrieval or S3 Glacier Deep Archive storage classes. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Storage class considerations with Amazon S3 locations</a>.</p>
    /// <p> <code>NONE</code>: DataSync doesn't run additional verification at the end of the transfer. All data transmissions are still integrity-checked with checksum verification during the transfer.</p>
    pub fn set_verify_mode(mut self, input: std::option::Option<crate::types::VerifyMode>) -> Self {
        self.verify_mode = input;
        self
    }
    /// <p>Specifies whether data at the destination location should be overwritten or preserved. If set to <code>NEVER</code>, a destination file for example will not be replaced by a source file (even if the destination file differs from the source file). If you modify files in the destination and you sync the files, you can use this value to protect against overwriting those changes. </p>
    /// <p>Some storage classes have specific behaviors that can affect your Amazon S3 storage cost. For detailed information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Considerations when working with Amazon S3 storage classes in DataSync </a>.</p>
    pub fn overwrite_mode(mut self, input: crate::types::OverwriteMode) -> Self {
        self.overwrite_mode = Some(input);
        self
    }
    /// <p>Specifies whether data at the destination location should be overwritten or preserved. If set to <code>NEVER</code>, a destination file for example will not be replaced by a source file (even if the destination file differs from the source file). If you modify files in the destination and you sync the files, you can use this value to protect against overwriting those changes. </p>
    /// <p>Some storage classes have specific behaviors that can affect your Amazon S3 storage cost. For detailed information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Considerations when working with Amazon S3 storage classes in DataSync </a>.</p>
    pub fn set_overwrite_mode(
        mut self,
        input: std::option::Option<crate::types::OverwriteMode>,
    ) -> Self {
        self.overwrite_mode = input;
        self
    }
    /// <p>Specifies whether to preserve metadata indicating the last time a file was read or written to. If you set <code>Atime</code> to <code>BEST_EFFORT</code>, DataSync attempts to preserve the original <code>Atime</code> attribute on all source files (that is, the version before the <code>PREPARING</code> phase of the task execution).</p> <note>
    /// <p>The behavior of <code>Atime</code> isn't fully standard across platforms, so DataSync can only do this on a best-effort basis.</p>
    /// </note>
    /// <p>Default value: <code>BEST_EFFORT</code> </p>
    /// <p> <code>BEST_EFFORT</code>: Attempt to preserve the per-file <code>Atime</code> value (recommended).</p>
    /// <p> <code>NONE</code>: Ignore <code>Atime</code>.</p> <note>
    /// <p>If <code>Atime</code> is set to <code>BEST_EFFORT</code>, <code>Mtime</code> must be set to <code>PRESERVE</code>. </p>
    /// <p>If <code>Atime</code> is set to <code>NONE</code>, <code>Mtime</code> must also be <code>NONE</code>. </p>
    /// </note>
    pub fn atime(mut self, input: crate::types::Atime) -> Self {
        self.atime = Some(input);
        self
    }
    /// <p>Specifies whether to preserve metadata indicating the last time a file was read or written to. If you set <code>Atime</code> to <code>BEST_EFFORT</code>, DataSync attempts to preserve the original <code>Atime</code> attribute on all source files (that is, the version before the <code>PREPARING</code> phase of the task execution).</p> <note>
    /// <p>The behavior of <code>Atime</code> isn't fully standard across platforms, so DataSync can only do this on a best-effort basis.</p>
    /// </note>
    /// <p>Default value: <code>BEST_EFFORT</code> </p>
    /// <p> <code>BEST_EFFORT</code>: Attempt to preserve the per-file <code>Atime</code> value (recommended).</p>
    /// <p> <code>NONE</code>: Ignore <code>Atime</code>.</p> <note>
    /// <p>If <code>Atime</code> is set to <code>BEST_EFFORT</code>, <code>Mtime</code> must be set to <code>PRESERVE</code>. </p>
    /// <p>If <code>Atime</code> is set to <code>NONE</code>, <code>Mtime</code> must also be <code>NONE</code>. </p>
    /// </note>
    pub fn set_atime(mut self, input: std::option::Option<crate::types::Atime>) -> Self {
        self.atime = input;
        self
    }
    /// <p>Specifies whether to preserve metadata indicating the last time that a file was written to before the <code>PREPARING</code> phase of your task execution. This option is required when you need to run the a task more than once.</p>
    /// <p>Default Value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Preserve original <code>Mtime</code> (recommended)</p>
    /// <p> <code>NONE</code>: Ignore <code>Mtime</code>. </p> <note>
    /// <p>If <code>Mtime</code> is set to <code>PRESERVE</code>, <code>Atime</code> must be set to <code>BEST_EFFORT</code>.</p>
    /// <p>If <code>Mtime</code> is set to <code>NONE</code>, <code>Atime</code> must also be set to <code>NONE</code>. </p>
    /// </note>
    pub fn mtime(mut self, input: crate::types::Mtime) -> Self {
        self.mtime = Some(input);
        self
    }
    /// <p>Specifies whether to preserve metadata indicating the last time that a file was written to before the <code>PREPARING</code> phase of your task execution. This option is required when you need to run the a task more than once.</p>
    /// <p>Default Value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Preserve original <code>Mtime</code> (recommended)</p>
    /// <p> <code>NONE</code>: Ignore <code>Mtime</code>. </p> <note>
    /// <p>If <code>Mtime</code> is set to <code>PRESERVE</code>, <code>Atime</code> must be set to <code>BEST_EFFORT</code>.</p>
    /// <p>If <code>Mtime</code> is set to <code>NONE</code>, <code>Atime</code> must also be set to <code>NONE</code>. </p>
    /// </note>
    pub fn set_mtime(mut self, input: std::option::Option<crate::types::Mtime>) -> Self {
        self.mtime = input;
        self
    }
    /// <p>Specifies the POSIX user ID (UID) of the file's owner.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>INT_VALUE</code>. This preserves the integer value of the ID.</p>
    /// <p> <code>INT_VALUE</code>: Preserve the integer value of UID and group ID (GID) (recommended).</p>
    /// <p> <code>NONE</code>: Ignore UID and GID. </p>
    pub fn uid(mut self, input: crate::types::Uid) -> Self {
        self.uid = Some(input);
        self
    }
    /// <p>Specifies the POSIX user ID (UID) of the file's owner.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>INT_VALUE</code>. This preserves the integer value of the ID.</p>
    /// <p> <code>INT_VALUE</code>: Preserve the integer value of UID and group ID (GID) (recommended).</p>
    /// <p> <code>NONE</code>: Ignore UID and GID. </p>
    pub fn set_uid(mut self, input: std::option::Option<crate::types::Uid>) -> Self {
        self.uid = input;
        self
    }
    /// <p>Specifies the POSIX group ID (GID) of the file's owners.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>INT_VALUE</code>. This preserves the integer value of the ID.</p>
    /// <p> <code>INT_VALUE</code>: Preserve the integer value of user ID (UID) and GID (recommended).</p>
    /// <p> <code>NONE</code>: Ignore UID and GID.</p>
    pub fn gid(mut self, input: crate::types::Gid) -> Self {
        self.gid = Some(input);
        self
    }
    /// <p>Specifies the POSIX group ID (GID) of the file's owners.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>INT_VALUE</code>. This preserves the integer value of the ID.</p>
    /// <p> <code>INT_VALUE</code>: Preserve the integer value of user ID (UID) and GID (recommended).</p>
    /// <p> <code>NONE</code>: Ignore UID and GID.</p>
    pub fn set_gid(mut self, input: std::option::Option<crate::types::Gid>) -> Self {
        self.gid = input;
        self
    }
    /// <p>Specifies whether files in the destination location that don't exist in the source should be preserved. This option can affect your Amazon S3 storage cost. If your task deletes objects, you might incur minimum storage duration charges for certain storage classes. For detailed information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Considerations when working with Amazon S3 storage classes in DataSync </a>.</p>
    /// <p>Default value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Ignore such destination files (recommended). </p>
    /// <p> <code>REMOVE</code>: Delete destination files that arenâ€™t present in the source.</p>
    pub fn preserve_deleted_files(mut self, input: crate::types::PreserveDeletedFiles) -> Self {
        self.preserve_deleted_files = Some(input);
        self
    }
    /// <p>Specifies whether files in the destination location that don't exist in the source should be preserved. This option can affect your Amazon S3 storage cost. If your task deletes objects, you might incur minimum storage duration charges for certain storage classes. For detailed information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/create-s3-location.html#using-storage-classes">Considerations when working with Amazon S3 storage classes in DataSync </a>.</p>
    /// <p>Default value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Ignore such destination files (recommended). </p>
    /// <p> <code>REMOVE</code>: Delete destination files that arenâ€™t present in the source.</p>
    pub fn set_preserve_deleted_files(
        mut self,
        input: std::option::Option<crate::types::PreserveDeletedFiles>,
    ) -> Self {
        self.preserve_deleted_files = input;
        self
    }
    /// <p>Specifies whether DataSync should preserve the metadata of block and character devices in the source location and recreate the files with that device name and metadata on the destination. DataSync copies only the name and metadata of such devices.</p> <note>
    /// <p>DataSync can't copy the actual contents of these devices because they're nonterminal and don't return an end-of-file (EOF) marker.</p>
    /// </note>
    /// <p>Default value: <code>NONE</code> </p>
    /// <p> <code>NONE</code>: Ignore special devices (recommended). </p>
    /// <p> <code>PRESERVE</code>: Preserve character and block device metadata. This option currently isn't supported for Amazon EFS. </p>
    pub fn preserve_devices(mut self, input: crate::types::PreserveDevices) -> Self {
        self.preserve_devices = Some(input);
        self
    }
    /// <p>Specifies whether DataSync should preserve the metadata of block and character devices in the source location and recreate the files with that device name and metadata on the destination. DataSync copies only the name and metadata of such devices.</p> <note>
    /// <p>DataSync can't copy the actual contents of these devices because they're nonterminal and don't return an end-of-file (EOF) marker.</p>
    /// </note>
    /// <p>Default value: <code>NONE</code> </p>
    /// <p> <code>NONE</code>: Ignore special devices (recommended). </p>
    /// <p> <code>PRESERVE</code>: Preserve character and block device metadata. This option currently isn't supported for Amazon EFS. </p>
    pub fn set_preserve_devices(
        mut self,
        input: std::option::Option<crate::types::PreserveDevices>,
    ) -> Self {
        self.preserve_devices = input;
        self
    }
    /// <p>Specifies which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Preserve POSIX-style permissions (recommended).</p>
    /// <p> <code>NONE</code>: Ignore permissions. </p> <note>
    /// <p>DataSync can preserve extant permissions of a source location.</p>
    /// </note>
    pub fn posix_permissions(mut self, input: crate::types::PosixPermissions) -> Self {
        self.posix_permissions = Some(input);
        self
    }
    /// <p>Specifies which users or groups can access a file for a specific purpose such as reading, writing, or execution of the file.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html#metadata-copied">Metadata copied by DataSync</a>.</p>
    /// <p>Default value: <code>PRESERVE</code> </p>
    /// <p> <code>PRESERVE</code>: Preserve POSIX-style permissions (recommended).</p>
    /// <p> <code>NONE</code>: Ignore permissions. </p> <note>
    /// <p>DataSync can preserve extant permissions of a source location.</p>
    /// </note>
    pub fn set_posix_permissions(
        mut self,
        input: std::option::Option<crate::types::PosixPermissions>,
    ) -> Self {
        self.posix_permissions = input;
        self
    }
    /// <p>Limits the bandwidth used by a DataSync task. For example, if you want DataSync to use a maximum of 1 MB, set this value to <code>1048576</code> (<code>=1024*1024</code>).</p>
    pub fn bytes_per_second(mut self, input: i64) -> Self {
        self.bytes_per_second = Some(input);
        self
    }
    /// <p>Limits the bandwidth used by a DataSync task. For example, if you want DataSync to use a maximum of 1 MB, set this value to <code>1048576</code> (<code>=1024*1024</code>).</p>
    pub fn set_bytes_per_second(mut self, input: std::option::Option<i64>) -> Self {
        self.bytes_per_second = input;
        self
    }
    /// <p>Specifies whether tasks should be queued before executing the tasks. The default is <code>ENABLED</code>, which means the tasks will be queued.</p>
    /// <p>If you use the same agent to run multiple tasks, you can enable the tasks to run in series. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#queue-task-execution">Queueing task executions</a>.</p>
    pub fn task_queueing(mut self, input: crate::types::TaskQueueing) -> Self {
        self.task_queueing = Some(input);
        self
    }
    /// <p>Specifies whether tasks should be queued before executing the tasks. The default is <code>ENABLED</code>, which means the tasks will be queued.</p>
    /// <p>If you use the same agent to run multiple tasks, you can enable the tasks to run in series. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/run-task.html#queue-task-execution">Queueing task executions</a>.</p>
    pub fn set_task_queueing(
        mut self,
        input: std::option::Option<crate::types::TaskQueueing>,
    ) -> Self {
        self.task_queueing = input;
        self
    }
    /// <p>Specifies the type of logs that DataSync publishes to a Amazon CloudWatch Logs log group. To specify the log group, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateTask.html#DataSync-CreateTask-request-CloudWatchLogGroupArn">CloudWatchLogGroupArn</a>.</p>
    /// <p>If you set <code>LogLevel</code> to <code>OFF</code>, no logs are published. <code>BASIC</code> publishes logs on errors for individual files transferred. <code>TRANSFER</code> publishes logs for every file or object that is transferred and integrity checked.</p>
    pub fn log_level(mut self, input: crate::types::LogLevel) -> Self {
        self.log_level = Some(input);
        self
    }
    /// <p>Specifies the type of logs that DataSync publishes to a Amazon CloudWatch Logs log group. To specify the log group, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/API_CreateTask.html#DataSync-CreateTask-request-CloudWatchLogGroupArn">CloudWatchLogGroupArn</a>.</p>
    /// <p>If you set <code>LogLevel</code> to <code>OFF</code>, no logs are published. <code>BASIC</code> publishes logs on errors for individual files transferred. <code>TRANSFER</code> publishes logs for every file or object that is transferred and integrity checked.</p>
    pub fn set_log_level(mut self, input: std::option::Option<crate::types::LogLevel>) -> Self {
        self.log_level = input;
        self
    }
    /// <p>Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location or transfers all the content from the source (without comparing what's in the destination).</p>
    /// <p> <code>CHANGED</code>: DataSync copies only data or metadata that is new or different content from the source location to the destination location.</p>
    /// <p> <code>ALL</code>: DataSync copies all source location content to the destination (without comparing what's in the destination).</p>
    pub fn transfer_mode(mut self, input: crate::types::TransferMode) -> Self {
        self.transfer_mode = Some(input);
        self
    }
    /// <p>Determines whether DataSync transfers only the data and metadata that differ between the source and the destination location or transfers all the content from the source (without comparing what's in the destination).</p>
    /// <p> <code>CHANGED</code>: DataSync copies only data or metadata that is new or different content from the source location to the destination location.</p>
    /// <p> <code>ALL</code>: DataSync copies all source location content to the destination (without comparing what's in the destination).</p>
    pub fn set_transfer_mode(
        mut self,
        input: std::option::Option<crate::types::TransferMode>,
    ) -> Self {
        self.transfer_mode = input;
        self
    }
    /// <p>Specifies which components of the SMB security descriptor are copied from source to destination objects. </p>
    /// <p>This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations or between two FSx for Windows File Server locations. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html">how DataSync handles metadata</a>.</p>
    /// <p>Default value: <code>OWNER_DACL</code> </p>
    /// <p> <code>OWNER_DACL</code>: For each copied object, DataSync copies the following metadata:</p>
    /// <ul>
    /// <li> <p>The object owner.</p> </li>
    /// <li> <p>NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.</p> <p>DataSync won't copy NTFS system access control lists (SACLs) with this option.</p> </li>
    /// </ul>
    /// <p> <code>OWNER_DACL_SACL</code>: For each copied object, DataSync copies the following metadata:</p>
    /// <ul>
    /// <li> <p>The object owner.</p> </li>
    /// <li> <p>NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.</p> </li>
    /// <li> <p>SACLs, which are used by administrators to log attempts to access a secured object.</p> <p>Copying SACLs requires granting additional permissions to the Windows user that DataSync uses to access your SMB location. For information about choosing a user that ensures sufficient permissions to files, folders, and metadata, see <a href="create-smb-location.html#SMBuser">user</a>.</p> </li>
    /// </ul>
    /// <p> <code>NONE</code>: None of the SMB security descriptor components are copied. Destination objects are owned by the user that was provided for accessing the destination location. DACLs and SACLs are set based on the destination serverâ€™s configuration. </p>
    pub fn security_descriptor_copy_flags(
        mut self,
        input: crate::types::SmbSecurityDescriptorCopyFlags,
    ) -> Self {
        self.security_descriptor_copy_flags = Some(input);
        self
    }
    /// <p>Specifies which components of the SMB security descriptor are copied from source to destination objects. </p>
    /// <p>This value is only used for transfers between SMB and Amazon FSx for Windows File Server locations or between two FSx for Windows File Server locations. For more information, see <a href="https://docs.aws.amazon.com/datasync/latest/userguide/special-files.html">how DataSync handles metadata</a>.</p>
    /// <p>Default value: <code>OWNER_DACL</code> </p>
    /// <p> <code>OWNER_DACL</code>: For each copied object, DataSync copies the following metadata:</p>
    /// <ul>
    /// <li> <p>The object owner.</p> </li>
    /// <li> <p>NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.</p> <p>DataSync won't copy NTFS system access control lists (SACLs) with this option.</p> </li>
    /// </ul>
    /// <p> <code>OWNER_DACL_SACL</code>: For each copied object, DataSync copies the following metadata:</p>
    /// <ul>
    /// <li> <p>The object owner.</p> </li>
    /// <li> <p>NTFS discretionary access control lists (DACLs), which determine whether to grant access to an object.</p> </li>
    /// <li> <p>SACLs, which are used by administrators to log attempts to access a secured object.</p> <p>Copying SACLs requires granting additional permissions to the Windows user that DataSync uses to access your SMB location. For information about choosing a user that ensures sufficient permissions to files, folders, and metadata, see <a href="create-smb-location.html#SMBuser">user</a>.</p> </li>
    /// </ul>
    /// <p> <code>NONE</code>: None of the SMB security descriptor components are copied. Destination objects are owned by the user that was provided for accessing the destination location. DACLs and SACLs are set based on the destination serverâ€™s configuration. </p>
    pub fn set_security_descriptor_copy_flags(
        mut self,
        input: std::option::Option<crate::types::SmbSecurityDescriptorCopyFlags>,
    ) -> Self {
        self.security_descriptor_copy_flags = input;
        self
    }
    /// <p>Specifies whether object tags are preserved when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the <code>NONE</code> value.</p>
    /// <p>Default Value: <code>PRESERVE</code> </p>
    pub fn object_tags(mut self, input: crate::types::ObjectTags) -> Self {
        self.object_tags = Some(input);
        self
    }
    /// <p>Specifies whether object tags are preserved when transferring between object storage systems. If you want your DataSync task to ignore object tags, specify the <code>NONE</code> value.</p>
    /// <p>Default Value: <code>PRESERVE</code> </p>
    pub fn set_object_tags(mut self, input: std::option::Option<crate::types::ObjectTags>) -> Self {
        self.object_tags = input;
        self
    }
    /// Consumes the builder and constructs a [`Options`](crate::types::Options).
    pub fn build(self) -> crate::types::Options {
        crate::types::Options {
            verify_mode: self.verify_mode,
            overwrite_mode: self.overwrite_mode,
            atime: self.atime,
            mtime: self.mtime,
            uid: self.uid,
            gid: self.gid,
            preserve_deleted_files: self.preserve_deleted_files,
            preserve_devices: self.preserve_devices,
            posix_permissions: self.posix_permissions,
            bytes_per_second: self.bytes_per_second,
            task_queueing: self.task_queueing,
            log_level: self.log_level,
            transfer_mode: self.transfer_mode,
            security_descriptor_copy_flags: self.security_descriptor_copy_flags,
            object_tags: self.object_tags,
        }
    }
}
