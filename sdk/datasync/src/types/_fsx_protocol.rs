// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the data transfer protocol that DataSync uses to access your Amazon FSx file system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FsxProtocol {
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    #[doc(hidden)]
    pub nfs: std::option::Option<crate::types::FsxProtocolNfs>,
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's SVM.</p>
    #[doc(hidden)]
    pub smb: std::option::Option<crate::types::FsxProtocolSmb>,
}
impl FsxProtocol {
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn nfs(&self) -> std::option::Option<&crate::types::FsxProtocolNfs> {
        self.nfs.as_ref()
    }
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's SVM.</p>
    pub fn smb(&self) -> std::option::Option<&crate::types::FsxProtocolSmb> {
        self.smb.as_ref()
    }
}
impl FsxProtocol {
    /// Creates a new builder-style object to manufacture [`FsxProtocol`](crate::types::FsxProtocol).
    pub fn builder() -> crate::types::builders::FsxProtocolBuilder {
        crate::types::builders::FsxProtocolBuilder::default()
    }
}

/// A builder for [`FsxProtocol`](crate::types::FsxProtocol).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FsxProtocolBuilder {
    pub(crate) nfs: std::option::Option<crate::types::FsxProtocolNfs>,
    pub(crate) smb: std::option::Option<crate::types::FsxProtocolSmb>,
}
impl FsxProtocolBuilder {
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn nfs(mut self, input: crate::types::FsxProtocolNfs) -> Self {
        self.nfs = Some(input);
        self
    }
    /// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your FSx for OpenZFS file system or FSx for ONTAP file system's storage virtual machine (SVM).</p>
    pub fn set_nfs(mut self, input: std::option::Option<crate::types::FsxProtocolNfs>) -> Self {
        self.nfs = input;
        self
    }
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's SVM.</p>
    pub fn smb(mut self, input: crate::types::FsxProtocolSmb) -> Self {
        self.smb = Some(input);
        self
    }
    /// <p>Specifies the Server Message Block (SMB) protocol configuration that DataSync uses to access your FSx for ONTAP file system's SVM.</p>
    pub fn set_smb(mut self, input: std::option::Option<crate::types::FsxProtocolSmb>) -> Self {
        self.smb = input;
        self
    }
    /// Consumes the builder and constructs a [`FsxProtocol`](crate::types::FsxProtocol).
    pub fn build(self) -> crate::types::FsxProtocol {
        crate::types::FsxProtocol {
            nfs: self.nfs,
            smb: self.smb,
        }
    }
}
