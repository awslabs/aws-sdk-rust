// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies how your DataSync agent connects to Amazon Web Services using a <a href="https://docs.aws.amazon.com/datasync/latest/userguide/choose-service-endpoint.html#choose-service-endpoint-vpc">virtual private cloud (VPC) service endpoint</a>. An agent that uses a VPC endpoint isn't accessible over the public internet.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PrivateLinkConfig {
    /// <p>Specifies the ID of the VPC endpoint that your agent connects to.</p>
    pub vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the VPC endpoint provided by <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">Amazon Web Services PrivateLink</a> that your agent connects to.</p>
    pub private_link_endpoint: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the ARN of the subnet where your VPC endpoint is located. You can only specify one ARN.</p>
    pub subnet_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies the Amazon Resource Names (ARN) of the security group that provides DataSync access to your VPC endpoint. You can only specify one ARN.</p>
    pub security_group_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PrivateLinkConfig {
    /// <p>Specifies the ID of the VPC endpoint that your agent connects to.</p>
    pub fn vpc_endpoint_id(&self) -> ::std::option::Option<&str> {
        self.vpc_endpoint_id.as_deref()
    }
    /// <p>Specifies the VPC endpoint provided by <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">Amazon Web Services PrivateLink</a> that your agent connects to.</p>
    pub fn private_link_endpoint(&self) -> ::std::option::Option<&str> {
        self.private_link_endpoint.as_deref()
    }
    /// <p>Specifies the ARN of the subnet where your VPC endpoint is located. You can only specify one ARN.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.subnet_arns.is_none()`.
    pub fn subnet_arns(&self) -> &[::std::string::String] {
        self.subnet_arns.as_deref().unwrap_or_default()
    }
    /// <p>Specifies the Amazon Resource Names (ARN) of the security group that provides DataSync access to your VPC endpoint. You can only specify one ARN.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.security_group_arns.is_none()`.
    pub fn security_group_arns(&self) -> &[::std::string::String] {
        self.security_group_arns.as_deref().unwrap_or_default()
    }
}
impl PrivateLinkConfig {
    /// Creates a new builder-style object to manufacture [`PrivateLinkConfig`](crate::types::PrivateLinkConfig).
    pub fn builder() -> crate::types::builders::PrivateLinkConfigBuilder {
        crate::types::builders::PrivateLinkConfigBuilder::default()
    }
}

/// A builder for [`PrivateLinkConfig`](crate::types::PrivateLinkConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PrivateLinkConfigBuilder {
    pub(crate) vpc_endpoint_id: ::std::option::Option<::std::string::String>,
    pub(crate) private_link_endpoint: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) security_group_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PrivateLinkConfigBuilder {
    /// <p>Specifies the ID of the VPC endpoint that your agent connects to.</p>
    pub fn vpc_endpoint_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_endpoint_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the ID of the VPC endpoint that your agent connects to.</p>
    pub fn set_vpc_endpoint_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_endpoint_id = input;
        self
    }
    /// <p>Specifies the ID of the VPC endpoint that your agent connects to.</p>
    pub fn get_vpc_endpoint_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_endpoint_id
    }
    /// <p>Specifies the VPC endpoint provided by <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">Amazon Web Services PrivateLink</a> that your agent connects to.</p>
    pub fn private_link_endpoint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_link_endpoint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the VPC endpoint provided by <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">Amazon Web Services PrivateLink</a> that your agent connects to.</p>
    pub fn set_private_link_endpoint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_link_endpoint = input;
        self
    }
    /// <p>Specifies the VPC endpoint provided by <a href="https://docs.aws.amazon.com/vpc/latest/userguide/endpoint-service.html">Amazon Web Services PrivateLink</a> that your agent connects to.</p>
    pub fn get_private_link_endpoint(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_link_endpoint
    }
    /// Appends an item to `subnet_arns`.
    ///
    /// To override the contents of this collection use [`set_subnet_arns`](Self::set_subnet_arns).
    ///
    /// <p>Specifies the ARN of the subnet where your VPC endpoint is located. You can only specify one ARN.</p>
    pub fn subnet_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.subnet_arns.unwrap_or_default();
        v.push(input.into());
        self.subnet_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the ARN of the subnet where your VPC endpoint is located. You can only specify one ARN.</p>
    pub fn set_subnet_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.subnet_arns = input;
        self
    }
    /// <p>Specifies the ARN of the subnet where your VPC endpoint is located. You can only specify one ARN.</p>
    pub fn get_subnet_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.subnet_arns
    }
    /// Appends an item to `security_group_arns`.
    ///
    /// To override the contents of this collection use [`set_security_group_arns`](Self::set_security_group_arns).
    ///
    /// <p>Specifies the Amazon Resource Names (ARN) of the security group that provides DataSync access to your VPC endpoint. You can only specify one ARN.</p>
    pub fn security_group_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.security_group_arns.unwrap_or_default();
        v.push(input.into());
        self.security_group_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARN) of the security group that provides DataSync access to your VPC endpoint. You can only specify one ARN.</p>
    pub fn set_security_group_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.security_group_arns = input;
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARN) of the security group that provides DataSync access to your VPC endpoint. You can only specify one ARN.</p>
    pub fn get_security_group_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.security_group_arns
    }
    /// Consumes the builder and constructs a [`PrivateLinkConfig`](crate::types::PrivateLinkConfig).
    pub fn build(self) -> crate::types::PrivateLinkConfig {
        crate::types::PrivateLinkConfig {
            vpc_endpoint_id: self.vpc_endpoint_id,
            private_link_endpoint: self.private_link_endpoint,
            subnet_arns: self.subnet_arns,
            security_group_arns: self.security_group_arns,
        }
    }
}
