// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the Network File System (NFS) protocol configuration that DataSync uses to access your Amazon FSx for OpenZFS or Amazon FSx for NetApp ONTAP file system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FsxProtocolNfs {
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    #[doc(hidden)]
    pub mount_options: std::option::Option<crate::types::NfsMountOptions>,
}
impl FsxProtocolNfs {
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    pub fn mount_options(&self) -> std::option::Option<&crate::types::NfsMountOptions> {
        self.mount_options.as_ref()
    }
}
impl FsxProtocolNfs {
    /// Creates a new builder-style object to manufacture [`FsxProtocolNfs`](crate::types::FsxProtocolNfs).
    pub fn builder() -> crate::types::builders::FsxProtocolNfsBuilder {
        crate::types::builders::FsxProtocolNfsBuilder::default()
    }
}

/// A builder for [`FsxProtocolNfs`](crate::types::FsxProtocolNfs).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FsxProtocolNfsBuilder {
    pub(crate) mount_options: std::option::Option<crate::types::NfsMountOptions>,
}
impl FsxProtocolNfsBuilder {
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    pub fn mount_options(mut self, input: crate::types::NfsMountOptions) -> Self {
        self.mount_options = Some(input);
        self
    }
    /// <p>Specifies how DataSync can access a location using the NFS protocol.</p>
    pub fn set_mount_options(
        mut self,
        input: std::option::Option<crate::types::NfsMountOptions>,
    ) -> Self {
        self.mount_options = input;
        self
    }
    /// Consumes the builder and constructs a [`FsxProtocolNfs`](crate::types::FsxProtocolNfs).
    pub fn build(self) -> crate::types::FsxProtocolNfs {
        crate::types::FsxProtocolNfs {
            mount_options: self.mount_options,
        }
    }
}
