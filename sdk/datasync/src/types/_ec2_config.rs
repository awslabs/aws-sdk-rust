// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The subnet and security groups that DataSync uses to access your Amazon EFS file system.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Ec2Config {
    /// <p>Specifies the ARN of a subnet where DataSync creates the <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">network interfaces</a> for managing traffic during your transfer.</p>
    /// <p>The subnet must be located:</p>
    /// <ul>
    /// <li> <p>In the same virtual private cloud (VPC) as the Amazon EFS file system.</p> </li>
    /// <li> <p>In the same Availability Zone as at least one mount target for the Amazon EFS file system.</p> </li>
    /// </ul> <note>
    /// <p>You don't need to specify a subnet that includes a file system mount target.</p>
    /// </note>
    #[doc(hidden)]
    pub subnet_arn: std::option::Option<std::string::String>,
    /// <p>Specifies the Amazon Resource Names (ARNs) of the security groups associated with an Amazon EFS file system's mount target.</p>
    #[doc(hidden)]
    pub security_group_arns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl Ec2Config {
    /// <p>Specifies the ARN of a subnet where DataSync creates the <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">network interfaces</a> for managing traffic during your transfer.</p>
    /// <p>The subnet must be located:</p>
    /// <ul>
    /// <li> <p>In the same virtual private cloud (VPC) as the Amazon EFS file system.</p> </li>
    /// <li> <p>In the same Availability Zone as at least one mount target for the Amazon EFS file system.</p> </li>
    /// </ul> <note>
    /// <p>You don't need to specify a subnet that includes a file system mount target.</p>
    /// </note>
    pub fn subnet_arn(&self) -> std::option::Option<&str> {
        self.subnet_arn.as_deref()
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the security groups associated with an Amazon EFS file system's mount target.</p>
    pub fn security_group_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_arns.as_deref()
    }
}
impl Ec2Config {
    /// Creates a new builder-style object to manufacture [`Ec2Config`](crate::types::Ec2Config).
    pub fn builder() -> crate::types::builders::Ec2ConfigBuilder {
        crate::types::builders::Ec2ConfigBuilder::default()
    }
}

/// A builder for [`Ec2Config`](crate::types::Ec2Config).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct Ec2ConfigBuilder {
    pub(crate) subnet_arn: std::option::Option<std::string::String>,
    pub(crate) security_group_arns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl Ec2ConfigBuilder {
    /// <p>Specifies the ARN of a subnet where DataSync creates the <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">network interfaces</a> for managing traffic during your transfer.</p>
    /// <p>The subnet must be located:</p>
    /// <ul>
    /// <li> <p>In the same virtual private cloud (VPC) as the Amazon EFS file system.</p> </li>
    /// <li> <p>In the same Availability Zone as at least one mount target for the Amazon EFS file system.</p> </li>
    /// </ul> <note>
    /// <p>You don't need to specify a subnet that includes a file system mount target.</p>
    /// </note>
    pub fn subnet_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.subnet_arn = Some(input.into());
        self
    }
    /// <p>Specifies the ARN of a subnet where DataSync creates the <a href="https://docs.aws.amazon.com/datasync/latest/userguide/datasync-network.html#required-network-interfaces">network interfaces</a> for managing traffic during your transfer.</p>
    /// <p>The subnet must be located:</p>
    /// <ul>
    /// <li> <p>In the same virtual private cloud (VPC) as the Amazon EFS file system.</p> </li>
    /// <li> <p>In the same Availability Zone as at least one mount target for the Amazon EFS file system.</p> </li>
    /// </ul> <note>
    /// <p>You don't need to specify a subnet that includes a file system mount target.</p>
    /// </note>
    pub fn set_subnet_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subnet_arn = input;
        self
    }
    /// Appends an item to `security_group_arns`.
    ///
    /// To override the contents of this collection use [`set_security_group_arns`](Self::set_security_group_arns).
    ///
    /// <p>Specifies the Amazon Resource Names (ARNs) of the security groups associated with an Amazon EFS file system's mount target.</p>
    pub fn security_group_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_arns.unwrap_or_default();
        v.push(input.into());
        self.security_group_arns = Some(v);
        self
    }
    /// <p>Specifies the Amazon Resource Names (ARNs) of the security groups associated with an Amazon EFS file system's mount target.</p>
    pub fn set_security_group_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_arns = input;
        self
    }
    /// Consumes the builder and constructs a [`Ec2Config`](crate::types::Ec2Config).
    pub fn build(self) -> crate::types::Ec2Config {
        crate::types::Ec2Config {
            subnet_arn: self.subnet_arn,
            security_group_arns: self.security_group_arns,
        }
    }
}
