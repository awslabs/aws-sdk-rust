// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_location_efs_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_location_efs::CreateLocationEfsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.subdirectory {
        object.key("Subdirectory").string(var_1.as_str());
    }
    if let Some(var_2) = &input.efs_filesystem_arn {
        object.key("EfsFilesystemArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.ec2_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("Ec2Config").start_object();
        crate::protocol_serde::shape_ec2_config::ser_ec2_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.tags {
        let mut array_6 = object.key("Tags").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_tag_list_entry::ser_tag_list_entry(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.access_point_arn {
        object.key("AccessPointArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.file_system_access_role_arn {
        object.key("FileSystemAccessRoleArn").string(var_10.as_str());
    }
    if let Some(var_11) = &input.in_transit_encryption {
        object.key("InTransitEncryption").string(var_11.as_str());
    }
    Ok(())
}
