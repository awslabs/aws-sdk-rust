// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_location_nfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_location_nfs::CreateLocationNfsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.subdirectory {
        object.key("Subdirectory").string(var_1.as_str());
    }
    if let Some(var_2) = &input.server_hostname {
        object.key("ServerHostname").string(var_2.as_str());
    }
    if let Some(var_3) = &input.on_prem_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("OnPremConfig").start_object();
        crate::protocol_serde::shape_on_prem_config::ser_on_prem_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.mount_options {
        #[allow(unused_mut)]
        let mut object_6 = object.key("MountOptions").start_object();
        crate::protocol_serde::shape_nfs_mount_options::ser_nfs_mount_options(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.tags {
        let mut array_8 = object.key("Tags").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_tag_list_entry::ser_tag_list_entry(
                    &mut object_10,
                    item_9,
                )?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    Ok(())
}
