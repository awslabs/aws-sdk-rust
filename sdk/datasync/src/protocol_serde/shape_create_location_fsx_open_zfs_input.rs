// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_location_fsx_open_zfs_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_location_fsx_open_zfs::CreateLocationFsxOpenZfsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.fsx_filesystem_arn {
        object.key("FsxFilesystemArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.protocol {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Protocol").start_object();
        crate::protocol_serde::shape_fsx_protocol::ser_fsx_protocol(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.security_group_arns {
        let mut array_5 = object.key("SecurityGroupArns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.subdirectory {
        object.key("Subdirectory").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag_list_entry::ser_tag_list_entry(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
