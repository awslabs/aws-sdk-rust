// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_options(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Options,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.verify_mode {
        object.key("VerifyMode").string(var_1.as_str());
    }
    if let Some(var_2) = &input.overwrite_mode {
        object.key("OverwriteMode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.atime {
        object.key("Atime").string(var_3.as_str());
    }
    if let Some(var_4) = &input.mtime {
        object.key("Mtime").string(var_4.as_str());
    }
    if let Some(var_5) = &input.uid {
        object.key("Uid").string(var_5.as_str());
    }
    if let Some(var_6) = &input.gid {
        object.key("Gid").string(var_6.as_str());
    }
    if let Some(var_7) = &input.preserve_deleted_files {
        object.key("PreserveDeletedFiles").string(var_7.as_str());
    }
    if let Some(var_8) = &input.preserve_devices {
        object.key("PreserveDevices").string(var_8.as_str());
    }
    if let Some(var_9) = &input.posix_permissions {
        object.key("PosixPermissions").string(var_9.as_str());
    }
    if let Some(var_10) = &input.bytes_per_second {
        object.key("BytesPerSecond").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.task_queueing {
        object.key("TaskQueueing").string(var_11.as_str());
    }
    if let Some(var_12) = &input.log_level {
        object.key("LogLevel").string(var_12.as_str());
    }
    if let Some(var_13) = &input.transfer_mode {
        object.key("TransferMode").string(var_13.as_str());
    }
    if let Some(var_14) = &input.security_descriptor_copy_flags {
        object.key("SecurityDescriptorCopyFlags").string(var_14.as_str());
    }
    if let Some(var_15) = &input.object_tags {
        object.key("ObjectTags").string(var_15.as_str());
    }
    Ok(())
}

pub(crate) fn de_options<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Options>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::OptionsBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "VerifyMode" => {
                            builder = builder.set_verify_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::VerifyMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "OverwriteMode" => {
                            builder = builder.set_overwrite_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::OverwriteMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Atime" => {
                            builder = builder.set_atime(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Atime::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Mtime" => {
                            builder = builder.set_mtime(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Mtime::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Uid" => {
                            builder = builder.set_uid(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Uid::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "Gid" => {
                            builder = builder.set_gid(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::Gid::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PreserveDeletedFiles" => {
                            builder = builder.set_preserve_deleted_files(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PreserveDeletedFiles::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PreserveDevices" => {
                            builder = builder.set_preserve_devices(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PreserveDevices::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "PosixPermissions" => {
                            builder = builder.set_posix_permissions(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PosixPermissions::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "BytesPerSecond" => {
                            builder = builder.set_bytes_per_second(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "TaskQueueing" => {
                            builder = builder.set_task_queueing(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TaskQueueing::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "LogLevel" => {
                            builder = builder.set_log_level(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::LogLevel::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "TransferMode" => {
                            builder = builder.set_transfer_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::TransferMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "SecurityDescriptorCopyFlags" => {
                            builder = builder.set_security_descriptor_copy_flags(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::SmbSecurityDescriptorCopyFlags::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "ObjectTags" => {
                            builder = builder.set_object_tags(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::ObjectTags::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
