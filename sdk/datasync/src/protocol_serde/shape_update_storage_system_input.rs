// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_storage_system_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_storage_system::UpdateStorageSystemInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.storage_system_arn {
        object.key("StorageSystemArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.server_configuration {
        #[allow(unused_mut)]
        let mut object_3 = object.key("ServerConfiguration").start_object();
        crate::protocol_serde::shape_discovery_server_configuration::ser_discovery_server_configuration(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.agent_arns {
        let mut array_5 = object.key("AgentArns").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.name {
        object.key("Name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.cloud_watch_log_group_arn {
        object.key("CloudWatchLogGroupArn").string(var_8.as_str());
    }
    if let Some(var_9) = &input.credentials {
        #[allow(unused_mut)]
        let mut object_10 = object.key("Credentials").start_object();
        crate::protocol_serde::shape_credentials::ser_credentials(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
