// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_location_smb_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_location_smb::CreateLocationSmbInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.subdirectory {
        object.key("Subdirectory").string(var_1.as_str());
    }
    if let Some(var_2) = &input.server_hostname {
        object.key("ServerHostname").string(var_2.as_str());
    }
    if let Some(var_3) = &input.user {
        object.key("User").string(var_3.as_str());
    }
    if let Some(var_4) = &input.domain {
        object.key("Domain").string(var_4.as_str());
    }
    if let Some(var_5) = &input.password {
        object.key("Password").string(var_5.as_str());
    }
    if let Some(var_6) = &input.agent_arns {
        let mut array_7 = object.key("AgentArns").start_array();
        for item_8 in var_6 {
            {
                array_7.value().string(item_8.as_str());
            }
        }
        array_7.finish();
    }
    if let Some(var_9) = &input.mount_options {
        #[allow(unused_mut)]
        let mut object_10 = object.key("MountOptions").start_object();
        crate::protocol_serde::shape_smb_mount_options::ser_smb_mount_options(
            &mut object_10,
            var_9,
        )?;
        object_10.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag_list_entry::ser_tag_list_entry(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
