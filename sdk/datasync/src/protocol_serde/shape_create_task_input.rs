// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_task_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_task::CreateTaskInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.source_location_arn {
        object.key("SourceLocationArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.destination_location_arn {
        object.key("DestinationLocationArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.cloud_watch_log_group_arn {
        object.key("CloudWatchLogGroupArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.name {
        object.key("Name").string(var_4.as_str());
    }
    if let Some(var_5) = &input.options {
        #[allow(unused_mut)]
        let mut object_6 = object.key("Options").start_object();
        crate::protocol_serde::shape_options::ser_options(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.excludes {
        let mut array_8 = object.key("Excludes").start_array();
        for item_9 in var_7 {
            {
                #[allow(unused_mut)]
                let mut object_10 = array_8.value().start_object();
                crate::protocol_serde::shape_filter_rule::ser_filter_rule(&mut object_10, item_9)?;
                object_10.finish();
            }
        }
        array_8.finish();
    }
    if let Some(var_11) = &input.schedule {
        #[allow(unused_mut)]
        let mut object_12 = object.key("Schedule").start_object();
        crate::protocol_serde::shape_task_schedule::ser_task_schedule(&mut object_12, var_11)?;
        object_12.finish();
    }
    if let Some(var_13) = &input.tags {
        let mut array_14 = object.key("Tags").start_array();
        for item_15 in var_13 {
            {
                #[allow(unused_mut)]
                let mut object_16 = array_14.value().start_object();
                crate::protocol_serde::shape_tag_list_entry::ser_tag_list_entry(
                    &mut object_16,
                    item_15,
                )?;
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.includes {
        let mut array_18 = object.key("Includes").start_array();
        for item_19 in var_17 {
            {
                #[allow(unused_mut)]
                let mut object_20 = array_18.value().start_object();
                crate::protocol_serde::shape_filter_rule::ser_filter_rule(&mut object_20, item_19)?;
                object_20.finish();
            }
        }
        array_18.finish();
    }
    Ok(())
}
