// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_storage_system_resources_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::describe_storage_system_resources::DescribeStorageSystemResourcesInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.discovery_job_arn {
        object.key("DiscoveryJobArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.resource_type {
        object.key("ResourceType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.resource_ids {
        let mut array_4 = object.key("ResourceIds").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.filter {
        #[allow(unused_mut)]
        let mut object_7 = object.key("Filter").start_object();
        for (key_8, value_9) in var_6 {
            {
                let mut array_10 = object_7.key(key_8.as_str()).start_array();
                for item_11 in value_9 {
                    {
                        array_10.value().string(item_11.as_str());
                    }
                }
                array_10.finish();
            }
        }
        object_7.finish();
    }
    if let Some(var_12) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.next_token {
        object.key("NextToken").string(var_13.as_str());
    }
    Ok(())
}
