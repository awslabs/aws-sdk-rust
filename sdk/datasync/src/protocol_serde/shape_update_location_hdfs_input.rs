// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_location_hdfs_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_location_hdfs::UpdateLocationHdfsInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.location_arn {
        object.key("LocationArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.subdirectory {
        object.key("Subdirectory").string(var_2.as_str());
    }
    if let Some(var_3) = &input.name_nodes {
        let mut array_4 = object.key("NameNodes").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_hdfs_name_node::ser_hdfs_name_node(
                    &mut object_6,
                    item_5,
                )?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.block_size {
        object.key("BlockSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_7).into()),
        );
    }
    if let Some(var_8) = &input.replication_factor {
        object.key("ReplicationFactor").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_8).into()),
        );
    }
    if let Some(var_9) = &input.kms_key_provider_uri {
        object.key("KmsKeyProviderUri").string(var_9.as_str());
    }
    if let Some(var_10) = &input.qop_configuration {
        #[allow(unused_mut)]
        let mut object_11 = object.key("QopConfiguration").start_object();
        crate::protocol_serde::shape_qop_configuration::ser_qop_configuration(
            &mut object_11,
            var_10,
        )?;
        object_11.finish();
    }
    if let Some(var_12) = &input.authentication_type {
        object.key("AuthenticationType").string(var_12.as_str());
    }
    if let Some(var_13) = &input.simple_user {
        object.key("SimpleUser").string(var_13.as_str());
    }
    if let Some(var_14) = &input.kerberos_principal {
        object.key("KerberosPrincipal").string(var_14.as_str());
    }
    if let Some(var_15) = &input.kerberos_keytab {
        object
            .key("KerberosKeytab")
            .string_unchecked(&aws_smithy_types::base64::encode(var_15));
    }
    if let Some(var_16) = &input.kerberos_krb5_conf {
        object
            .key("KerberosKrb5Conf")
            .string_unchecked(&aws_smithy_types::base64::encode(var_16));
    }
    if let Some(var_17) = &input.agent_arns {
        let mut array_18 = object.key("AgentArns").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    Ok(())
}
