// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_location_object_storage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_location_object_storage::CreateLocationObjectStorageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.server_hostname {
        object.key("ServerHostname").string(var_1.as_str());
    }
    if let Some(var_2) = &input.server_port {
        object.key("ServerPort").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_2).into()),
        );
    }
    if let Some(var_3) = &input.server_protocol {
        object.key("ServerProtocol").string(var_3.as_str());
    }
    if let Some(var_4) = &input.subdirectory {
        object.key("Subdirectory").string(var_4.as_str());
    }
    if let Some(var_5) = &input.bucket_name {
        object.key("BucketName").string(var_5.as_str());
    }
    if let Some(var_6) = &input.access_key {
        object.key("AccessKey").string(var_6.as_str());
    }
    if let Some(var_7) = &input.secret_key {
        object.key("SecretKey").string(var_7.as_str());
    }
    if let Some(var_8) = &input.agent_arns {
        let mut array_9 = object.key("AgentArns").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag_list_entry::ser_tag_list_entry(
                    &mut object_14,
                    item_13,
                )?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.server_certificate {
        object
            .key("ServerCertificate")
            .string_unchecked(&aws_smithy_types::base64::encode(var_15));
    }
    Ok(())
}
