// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn add_storage_system_output_correct_errors(
    mut builder: crate::operation::add_storage_system::builders::AddStorageSystemOutputBuilder,
) -> crate::operation::add_storage_system::builders::AddStorageSystemOutputBuilder {
    if builder.storage_system_arn.is_none() {
        builder.storage_system_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn discovery_server_configuration_correct_errors(
    mut builder: crate::types::builders::DiscoveryServerConfigurationBuilder,
) -> crate::types::builders::DiscoveryServerConfigurationBuilder {
    if builder.server_hostname.is_none() {
        builder.server_hostname = Some(Default::default())
    }
    builder
}

pub(crate) fn ec2_config_correct_errors(mut builder: crate::types::builders::Ec2ConfigBuilder) -> crate::types::builders::Ec2ConfigBuilder {
    if builder.subnet_arn.is_none() {
        builder.subnet_arn = Some(Default::default())
    }
    if builder.security_group_arns.is_none() {
        builder.security_group_arns = Some(Default::default())
    }
    builder
}

pub(crate) fn on_prem_config_correct_errors(mut builder: crate::types::builders::OnPremConfigBuilder) -> crate::types::builders::OnPremConfigBuilder {
    if builder.agent_arns.is_none() {
        builder.agent_arns = Some(Default::default())
    }
    builder
}

pub(crate) fn s3_config_correct_errors(mut builder: crate::types::builders::S3ConfigBuilder) -> crate::types::builders::S3ConfigBuilder {
    if builder.bucket_access_role_arn.is_none() {
        builder.bucket_access_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn task_schedule_correct_errors(mut builder: crate::types::builders::TaskScheduleBuilder) -> crate::types::builders::TaskScheduleBuilder {
    if builder.schedule_expression.is_none() {
        builder.schedule_expression = Some(Default::default())
    }
    builder
}

pub(crate) fn fsx_protocol_smb_correct_errors(
    mut builder: crate::types::builders::FsxProtocolSmbBuilder,
) -> crate::types::builders::FsxProtocolSmbBuilder {
    if builder.password.is_none() {
        builder.password = Some(Default::default())
    }
    if builder.user.is_none() {
        builder.user = Some(Default::default())
    }
    builder
}

pub(crate) fn hdfs_name_node_correct_errors(mut builder: crate::types::builders::HdfsNameNodeBuilder) -> crate::types::builders::HdfsNameNodeBuilder {
    if builder.hostname.is_none() {
        builder.hostname = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_list_entry_correct_errors(mut builder: crate::types::builders::TagListEntryBuilder) -> crate::types::builders::TagListEntryBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn report_destination_s3_correct_errors(
    mut builder: crate::types::builders::ReportDestinationS3Builder,
) -> crate::types::builders::ReportDestinationS3Builder {
    if builder.s3_bucket_arn.is_none() {
        builder.s3_bucket_arn = Some(Default::default())
    }
    if builder.bucket_access_role_arn.is_none() {
        builder.bucket_access_role_arn = Some(Default::default())
    }
    builder
}
