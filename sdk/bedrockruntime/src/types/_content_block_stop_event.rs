// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A content block stop event.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug, ::serde::Deserialize)]
pub struct ContentBlockStopEvent {
    /// <p>The index for a content block.</p>
    pub content_block_index: i32,
}
impl ContentBlockStopEvent {
    /// <p>The index for a content block.</p>
    pub fn content_block_index(&self) -> i32 {
        self.content_block_index
    }
}
impl ContentBlockStopEvent {
    /// Creates a new builder-style object to manufacture [`ContentBlockStopEvent`](crate::types::ContentBlockStopEvent).
    pub fn builder() -> crate::types::builders::ContentBlockStopEventBuilder {
        crate::types::builders::ContentBlockStopEventBuilder::default()
    }
}

/// A builder for [`ContentBlockStopEvent`](crate::types::ContentBlockStopEvent).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ContentBlockStopEventBuilder {
    pub(crate) content_block_index: ::std::option::Option<i32>,
}
impl ContentBlockStopEventBuilder {
    /// <p>The index for a content block.</p>
    /// This field is required.
    pub fn content_block_index(mut self, input: i32) -> Self {
        self.content_block_index = ::std::option::Option::Some(input);
        self
    }
    /// <p>The index for a content block.</p>
    pub fn set_content_block_index(mut self, input: ::std::option::Option<i32>) -> Self {
        self.content_block_index = input;
        self
    }
    /// <p>The index for a content block.</p>
    pub fn get_content_block_index(&self) -> &::std::option::Option<i32> {
        &self.content_block_index
    }
    /// Consumes the builder and constructs a [`ContentBlockStopEvent`](crate::types::ContentBlockStopEvent).
    /// This method will fail if any of the following fields are not set:
    /// - [`content_block_index`](crate::types::builders::ContentBlockStopEventBuilder::content_block_index)
    pub fn build(self) -> ::std::result::Result<crate::types::ContentBlockStopEvent, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ContentBlockStopEvent {
            content_block_index: self.content_block_index.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_block_index",
                    "content_block_index was not specified but it is required when building ContentBlockStopEvent",
                )
            })?,
        })
    }
}
