// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of the guardrail image coverage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug, ::serde::Deserialize)]
pub struct GuardrailImageCoverage {
    /// <p>The count (integer) of images guardrails guarded.</p>
    pub guarded: ::std::option::Option<i32>,
    /// <p>Represents the total number of images (integer) that were in the request (guarded and unguarded).</p>
    pub total: ::std::option::Option<i32>,
}
impl GuardrailImageCoverage {
    /// <p>The count (integer) of images guardrails guarded.</p>
    pub fn guarded(&self) -> ::std::option::Option<i32> {
        self.guarded
    }
    /// <p>Represents the total number of images (integer) that were in the request (guarded and unguarded).</p>
    pub fn total(&self) -> ::std::option::Option<i32> {
        self.total
    }
}
impl GuardrailImageCoverage {
    /// Creates a new builder-style object to manufacture [`GuardrailImageCoverage`](crate::types::GuardrailImageCoverage).
    pub fn builder() -> crate::types::builders::GuardrailImageCoverageBuilder {
        crate::types::builders::GuardrailImageCoverageBuilder::default()
    }
}

/// A builder for [`GuardrailImageCoverage`](crate::types::GuardrailImageCoverage).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct GuardrailImageCoverageBuilder {
    pub(crate) guarded: ::std::option::Option<i32>,
    pub(crate) total: ::std::option::Option<i32>,
}
impl GuardrailImageCoverageBuilder {
    /// <p>The count (integer) of images guardrails guarded.</p>
    pub fn guarded(mut self, input: i32) -> Self {
        self.guarded = ::std::option::Option::Some(input);
        self
    }
    /// <p>The count (integer) of images guardrails guarded.</p>
    pub fn set_guarded(mut self, input: ::std::option::Option<i32>) -> Self {
        self.guarded = input;
        self
    }
    /// <p>The count (integer) of images guardrails guarded.</p>
    pub fn get_guarded(&self) -> &::std::option::Option<i32> {
        &self.guarded
    }
    /// <p>Represents the total number of images (integer) that were in the request (guarded and unguarded).</p>
    pub fn total(mut self, input: i32) -> Self {
        self.total = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents the total number of images (integer) that were in the request (guarded and unguarded).</p>
    pub fn set_total(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total = input;
        self
    }
    /// <p>Represents the total number of images (integer) that were in the request (guarded and unguarded).</p>
    pub fn get_total(&self) -> &::std::option::Option<i32> {
        &self.total
    }
    /// Consumes the builder and constructs a [`GuardrailImageCoverage`](crate::types::GuardrailImageCoverage).
    pub fn build(self) -> crate::types::GuardrailImageCoverage {
        crate::types::GuardrailImageCoverage {
            guarded: self.guarded,
            total: self.total,
        }
    }
}
