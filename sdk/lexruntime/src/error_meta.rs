// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Either the Amazon Lex bot is still building, or one of the dependent services (Amazon Polly, AWS Lambda) failed with an internal service error.</p>
    BadGatewayException(crate::error::BadGatewayException),
    /// <p> Request validation failed, there is no usable message in the context, or the bot build failed, is still in progress, or contains unbuilt changes. </p>
    BadRequestException(crate::error::BadRequestException),
    /// <p> Two clients are using the same AWS account, Amazon Lex bot, and user ID. </p>
    ConflictException(crate::error::ConflictException),
    /// <p> One of the dependencies, such as AWS Lambda or Amazon Polly, threw an exception. For example, </p>
    /// <ul>
    /// <li> <p>If Amazon Lex does not have sufficient permissions to call a Lambda function.</p> </li>
    /// <li> <p>If a Lambda function takes longer than 30 seconds to execute.</p> </li>
    /// <li> <p>If a fulfillment Lambda function returns a <code>Delegate</code> dialog action without removing any slot values.</p> </li>
    /// </ul>
    DependencyFailedException(crate::error::DependencyFailedException),
    /// <p>Internal service error. Retry the call.</p>
    InternalFailureException(crate::error::InternalFailureException),
    /// <p>Exceeded a limit.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>This exception is not used.</p>
    LoopDetectedException(crate::error::LoopDetectedException),
    /// <p>The accept header in the request does not have a valid value.</p>
    NotAcceptableException(crate::error::NotAcceptableException),
    /// <p>The resource (such as the Amazon Lex bot or an alias) that is referred to is not found.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>The input speech is too long.</p>
    RequestTimeoutException(crate::error::RequestTimeoutException),
    /// <p>The Content-Type header (<code>PostContent</code> API) has an invalid value. </p>
    UnsupportedMediaTypeException(crate::error::UnsupportedMediaTypeException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadGatewayException(inner) => inner.fmt(f),
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::DependencyFailedException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::LoopDetectedException(inner) => inner.fmt(f),
            Error::NotAcceptableException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::RequestTimeoutException(inner) => inner.fmt(f),
            Error::UnsupportedMediaTypeException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSessionError> for Error {
    fn from(err: crate::error::DeleteSessionError) -> Self {
        match err {
            crate::error::DeleteSessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSessionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::DeleteSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSessionError> for Error {
    fn from(err: crate::error::GetSessionError) -> Self {
        match err {
            crate::error::GetSessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSessionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::GetSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PostContentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PostContentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PostContentError> for Error {
    fn from(err: crate::error::PostContentError) -> Self {
        match err {
            crate::error::PostContentError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::error::PostContentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PostContentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PostContentError::DependencyFailedException(inner) => {
                Error::DependencyFailedException(inner)
            }
            crate::error::PostContentError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::PostContentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PostContentError::LoopDetectedException(inner) => {
                Error::LoopDetectedException(inner)
            }
            crate::error::PostContentError::NotAcceptableException(inner) => {
                Error::NotAcceptableException(inner)
            }
            crate::error::PostContentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PostContentError::RequestTimeoutException(inner) => {
                Error::RequestTimeoutException(inner)
            }
            crate::error::PostContentError::UnsupportedMediaTypeException(inner) => {
                Error::UnsupportedMediaTypeException(inner)
            }
            crate::error::PostContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PostTextError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PostTextError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PostTextError> for Error {
    fn from(err: crate::error::PostTextError) -> Self {
        match err {
            crate::error::PostTextError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::error::PostTextError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PostTextError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PostTextError::DependencyFailedException(inner) => {
                Error::DependencyFailedException(inner)
            }
            crate::error::PostTextError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::PostTextError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PostTextError::LoopDetectedException(inner) => {
                Error::LoopDetectedException(inner)
            }
            crate::error::PostTextError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PostTextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutSessionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutSessionError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutSessionError> for Error {
    fn from(err: crate::error::PutSessionError) -> Self {
        match err {
            crate::error::PutSessionError::BadGatewayException(inner) => {
                Error::BadGatewayException(inner)
            }
            crate::error::PutSessionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutSessionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutSessionError::DependencyFailedException(inner) => {
                Error::DependencyFailedException(inner)
            }
            crate::error::PutSessionError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::error::PutSessionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutSessionError::NotAcceptableException(inner) => {
                Error::NotAcceptableException(inner)
            }
            crate::error::PutSessionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutSessionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadGatewayException(e) => e.request_id(),
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::DependencyFailedException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::LoopDetectedException(e) => e.request_id(),
            Self::NotAcceptableException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::RequestTimeoutException(e) => e.request_id(),
            Self::UnsupportedMediaTypeException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
