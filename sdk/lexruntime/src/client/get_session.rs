// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetSession`](crate::operation::get_session::builders::GetSessionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bot_name(impl Into<String>)`](crate::operation::get_session::builders::GetSessionFluentBuilder::bot_name) / [`set_bot_name(Option<String>)`](crate::operation::get_session::builders::GetSessionFluentBuilder::set_bot_name):<br>required: **true**<br><p>The name of the bot that contains the session data.</p><br>
    ///   - [`bot_alias(impl Into<String>)`](crate::operation::get_session::builders::GetSessionFluentBuilder::bot_alias) / [`set_bot_alias(Option<String>)`](crate::operation::get_session::builders::GetSessionFluentBuilder::set_bot_alias):<br>required: **true**<br><p>The alias in use for the bot that contains the session data.</p><br>
    ///   - [`user_id(impl Into<String>)`](crate::operation::get_session::builders::GetSessionFluentBuilder::user_id) / [`set_user_id(Option<String>)`](crate::operation::get_session::builders::GetSessionFluentBuilder::set_user_id):<br>required: **true**<br><p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. </p><br>
    ///   - [`checkpoint_label_filter(impl Into<String>)`](crate::operation::get_session::builders::GetSessionFluentBuilder::checkpoint_label_filter) / [`set_checkpoint_label_filter(Option<String>)`](crate::operation::get_session::builders::GetSessionFluentBuilder::set_checkpoint_label_filter):<br>required: **false**<br><p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code> structure. </p>  <p>When you specify a filter, only intents with their <code>checkpointLabel</code> field set to that string are returned.</p><br>
    /// - On success, responds with [`GetSessionOutput`](crate::operation::get_session::GetSessionOutput) with field(s):
    ///   - [`recent_intent_summary_view(Option<Vec::<IntentSummary>>)`](crate::operation::get_session::GetSessionOutput::recent_intent_summary_view): <p>An array of information about the intents used in the session. The array can contain a maximum of three summaries. If more than three intents are used in the session, the <code>recentIntentSummaryView</code> operation contains information about the last three intents used.</p>  <p>If you set the <code>checkpointLabelFilter</code> parameter in the request, the array contains only the intents with the specified label.</p>
    ///   - [`session_attributes(Option<HashMap::<String, String>>)`](crate::operation::get_session::GetSessionOutput::session_attributes): <p>Map of key/value pairs representing the session-specific context information. It contains application information passed between Amazon Lex and a client application.</p>
    ///   - [`session_id(Option<String>)`](crate::operation::get_session::GetSessionOutput::session_id): <p>A unique identifier for the session.</p>
    ///   - [`dialog_action(Option<DialogAction>)`](crate::operation::get_session::GetSessionOutput::dialog_action): <p>Describes the current state of the bot.</p>
    ///   - [`active_contexts(Option<Vec::<ActiveContext>>)`](crate::operation::get_session::GetSessionOutput::active_contexts): <p>A list of active contexts for the session. A context can be set when an intent is fulfilled or by calling the <code>PostContent</code>, <code>PostText</code>, or <code>PutSession</code> operation.</p>  <p>You can use a context to control the intents that can follow up an intent, or to modify the operation of your application.</p>
    /// - On failure, responds with [`SdkError<GetSessionError>`](crate::operation::get_session::GetSessionError)
    pub fn get_session(&self) -> crate::operation::get_session::builders::GetSessionFluentBuilder {
        crate::operation::get_session::builders::GetSessionFluentBuilder::new(self.handle.clone())
    }
}
