// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PostText`](crate::operation::post_text::builders::PostTextFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`bot_name(impl Into<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::bot_name) / [`set_bot_name(Option<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::set_bot_name):<br>required: **true**<br><p>The name of the Amazon Lex bot.</p><br>
    ///   - [`bot_alias(impl Into<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::bot_alias) / [`set_bot_alias(Option<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::set_bot_alias):<br>required: **true**<br><p>The alias of the Amazon Lex bot.</p><br>
    ///   - [`user_id(impl Into<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::user_id) / [`set_user_id(Option<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::set_user_id):<br>required: **true**<br><p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. At runtime, each request must contain the <code>userID</code> field.</p>  <p>To decide the user ID to use for your application, consider the following factors.</p>  <ul>   <li> <p>The <code>userID</code> field must not contain any personally identifiable information of the user, for example, name, personal identification numbers, or other end user personal information.</p> </li>   <li> <p>If you want a user to start a conversation on one device and continue on another device, use a user-specific identifier.</p> </li>   <li> <p>If you want the same user to be able to have two independent conversations on two different devices, choose a device-specific identifier.</p> </li>   <li> <p>A user can't have two independent conversations with two different versions of the same bot. For example, a user can't have a conversation with the PROD and BETA versions of the same bot. If you anticipate that a user will need to have conversation with two different versions, for example, while testing, include the bot alias in the user ID to separate the two conversations.</p> </li>  </ul><br>
    ///   - [`session_attributes(impl Into<String>, impl Into<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::session_attributes) / [`set_session_attributes(Option<HashMap::<String, String>>)`](crate::operation::post_text::builders::PostTextFluentBuilder::set_session_attributes):<br>required: **false**<br><p>Application-specific information passed between Amazon Lex and a client application.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting Session Attributes</a>.</p><br>
    ///   - [`request_attributes(impl Into<String>, impl Into<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::request_attributes) / [`set_request_attributes(Option<HashMap::<String, String>>)`](crate::operation::post_text::builders::PostTextFluentBuilder::set_request_attributes):<br>required: **false**<br><p>Request-specific information passed between Amazon Lex and a client application.</p>  <p>The namespace <code>x-amz-lex:</code> is reserved for special attributes. Don't create any request attributes with the prefix <code>x-amz-lex:</code>.</p>  <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting Request Attributes</a>.</p><br>
    ///   - [`input_text(impl Into<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::input_text) / [`set_input_text(Option<String>)`](crate::operation::post_text::builders::PostTextFluentBuilder::set_input_text):<br>required: **true**<br><p>The text that the user entered (Amazon Lex interprets this text).</p><br>
    ///   - [`active_contexts(ActiveContext)`](crate::operation::post_text::builders::PostTextFluentBuilder::active_contexts) / [`set_active_contexts(Option<Vec::<ActiveContext>>)`](crate::operation::post_text::builders::PostTextFluentBuilder::set_active_contexts):<br>required: **false**<br><p>A list of contexts active for the request. A context can be activated when a previous intent is fulfilled, or by including the context in the request,</p>  <p>If you don't specify a list of contexts, Amazon Lex will use the current list of contexts for the session. If you specify an empty list, all contexts for the session are cleared.</p><br>
    /// - On success, responds with [`PostTextOutput`](crate::operation::post_text::PostTextOutput) with field(s):
    ///   - [`intent_name(Option<String>)`](crate::operation::post_text::PostTextOutput::intent_name): <p>The current user intent that Amazon Lex is aware of.</p>
    ///   - [`nlu_intent_confidence(Option<IntentConfidence>)`](crate::operation::post_text::PostTextOutput::nlu_intent_confidence): <p>Provides a score that indicates how confident Amazon Lex is that the returned intent is the one that matches the user's intent. The score is between 0.0 and 1.0. For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/confidence-scores.html">Confidence Scores</a>.</p>  <p>The score is a relative score, not an absolute score. The score may change based on improvements to Amazon Lex.</p>
    ///   - [`alternative_intents(Option<Vec::<PredictedIntent>>)`](crate::operation::post_text::PostTextOutput::alternative_intents): <p>One to four alternative intents that may be applicable to the user's intent.</p>  <p>Each alternative includes a score that indicates how confident Amazon Lex is that the intent matches the user's intent. The intents are sorted by the confidence score.</p>
    ///   - [`slots(Option<HashMap::<String, String>>)`](crate::operation::post_text::PostTextOutput::slots): <p> The intent slots that Amazon Lex detected from the user input in the conversation. </p>  <p>Amazon Lex creates a resolution list containing likely values for a slot. The value that it returns is determined by the <code>valueSelectionStrategy</code> selected when the slot type was created or updated. If <code>valueSelectionStrategy</code> is set to <code>ORIGINAL_VALUE</code>, the value provided by the user is returned, if the user value is similar to the slot values. If <code>valueSelectionStrategy</code> is set to <code>TOP_RESOLUTION</code> Amazon Lex returns the first value in the resolution list or, if there is no resolution list, null. If you don't specify a <code>valueSelectionStrategy</code>, the default is <code>ORIGINAL_VALUE</code>.</p>
    ///   - [`session_attributes(Option<HashMap::<String, String>>)`](crate::operation::post_text::PostTextOutput::session_attributes): <p>A map of key-value pairs representing the session-specific context information.</p>
    ///   - [`message(Option<String>)`](crate::operation::post_text::PostTextOutput::message): <p>The message to convey to the user. The message can come from the bot's configuration or from a Lambda function.</p>  <p>If the intent is not configured with a Lambda function, or if the Lambda function returned <code>Delegate</code> as the <code>dialogAction.type</code> its response, Amazon Lex decides on the next course of action and selects an appropriate message from the bot's configuration based on the current interaction context. For example, if Amazon Lex isn't able to understand user input, it uses a clarification prompt message.</p>  <p>When you create an intent you can assign messages to groups. When messages are assigned to groups Amazon Lex returns one message from each group in the response. The message field is an escaped JSON string containing the messages. For more information about the structure of the JSON string returned, see <code>msg-prompts-formats</code>.</p>  <p>If the Lambda function returns a message, Amazon Lex passes it to the client in its response.</p>
    ///   - [`sentiment_response(Option<SentimentResponse>)`](crate::operation::post_text::PostTextOutput::sentiment_response): <p>The sentiment expressed in and utterance.</p>  <p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field contains the result of the analysis.</p>
    ///   - [`message_format(Option<MessageFormatType>)`](crate::operation::post_text::PostTextOutput::message_format): <p>The format of the response message. One of the following values:</p>  <ul>   <li> <p> <code>PlainText</code> - The message contains plain UTF-8 text.</p> </li>   <li> <p> <code>CustomPayload</code> - The message is a custom format defined by the Lambda function.</p> </li>   <li> <p> <code>SSML</code> - The message contains text formatted for voice output.</p> </li>   <li> <p> <code>Composite</code> - The message contains an escaped JSON object containing one or more messages from the groups that messages were assigned to when the intent was created.</p> </li>  </ul>
    ///   - [`dialog_state(Option<DialogState>)`](crate::operation::post_text::PostTextOutput::dialog_state): <p> Identifies the current state of the user interaction. Amazon Lex returns one of the following values as <code>dialogState</code>. The client can optionally use this information to customize the user interface. </p>  <ul>   <li> <p> <code>ElicitIntent</code> - Amazon Lex wants to elicit user intent. </p> <p>For example, a user might utter an intent ("I want to order a pizza"). If Amazon Lex cannot infer the user intent from this utterance, it will return this dialogState.</p> </li>   <li> <p> <code>ConfirmIntent</code> - Amazon Lex is expecting a "yes" or "no" response. </p> <p> For example, Amazon Lex wants user confirmation before fulfilling an intent. </p> <p>Instead of a simple "yes" or "no," a user might respond with additional information. For example, "yes, but make it thick crust pizza" or "no, I want to order a drink". Amazon Lex can process such additional information (in these examples, update the crust type slot value, or change intent from OrderPizza to OrderDrink).</p> </li>   <li> <p> <code>ElicitSlot</code> - Amazon Lex is expecting a slot value for the current intent. </p> <p>For example, suppose that in the response Amazon Lex sends this message: "What size pizza would you like?". A user might reply with the slot value (e.g., "medium"). The user might also provide additional information in the response (e.g., "medium thick crust pizza"). Amazon Lex can process such additional information appropriately. </p> </li>   <li> <p> <code>Fulfilled</code> - Conveys that the Lambda function configured for the intent has successfully fulfilled the intent. </p> </li>   <li> <p> <code>ReadyForFulfillment</code> - Conveys that the client has to fulfill the intent. </p> </li>   <li> <p> <code>Failed</code> - Conveys that the conversation with the user failed. </p> <p> This can happen for various reasons including that the user did not provide an appropriate response to prompts from the service (you can configure how many times Amazon Lex can prompt a user for specific information), or the Lambda function failed to fulfill the intent. </p> </li>  </ul>
    ///   - [`slot_to_elicit(Option<String>)`](crate::operation::post_text::PostTextOutput::slot_to_elicit): <p>If the <code>dialogState</code> value is <code>ElicitSlot</code>, returns the name of the slot for which Amazon Lex is eliciting a value. </p>
    ///   - [`response_card(Option<ResponseCard>)`](crate::operation::post_text::PostTextOutput::response_card): <p>Represents the options that the user has to respond to the current prompt. Response Card can come from the bot configuration (in the Amazon Lex console, choose the settings button next to a slot) or from a code hook (Lambda function). </p>
    ///   - [`session_id(Option<String>)`](crate::operation::post_text::PostTextOutput::session_id): <p>A unique identifier for the session.</p>
    ///   - [`bot_version(Option<String>)`](crate::operation::post_text::PostTextOutput::bot_version): <p>The version of the bot that responded to the conversation. You can use this information to help determine if one version of a bot is performing better than another version.</p>
    ///   - [`active_contexts(Option<Vec::<ActiveContext>>)`](crate::operation::post_text::PostTextOutput::active_contexts): <p>A list of active contexts for the session. A context can be set when an intent is fulfilled or by calling the <code>PostContent</code>, <code>PostText</code>, or <code>PutSession</code> operation.</p>  <p>You can use a context to control the intents that can follow up an intent, or to modify the operation of your application.</p>
    /// - On failure, responds with [`SdkError<PostTextError>`](crate::operation::post_text::PostTextError)
    pub fn post_text(&self) -> crate::operation::post_text::builders::PostTextFluentBuilder {
        crate::operation::post_text::builders::PostTextFluentBuilder::new(self.handle.clone())
    }
}
