#![allow(clippy::module_inception)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::wrong_self_convention)]
#![allow(clippy::should_implement_trait)]
#![allow(clippy::blacklisted_name)]
#![allow(clippy::vec_init_then_push)]
//! <p>Amazon Lex provides both build and runtime endpoints. Each endpoint
//! provides a set of operations (API). Your conversational bot uses the
//! runtime API to understand user utterances (user input text or voice). For
//! example, suppose a user says "I want pizza", your bot sends this input to
//! Amazon Lex using the runtime API. Amazon Lex recognizes that the user
//! request is for the OrderPizza intent (one of the intents defined in the
//! bot). Then Amazon Lex engages in user conversation on behalf of the bot to
//! elicit required information (slot values, such as pizza size and crust
//! type), and then performs fulfillment activity (that you configured when
//! you created the bot). You use the build-time API to create and manage your
//! Amazon Lex bot. For a list of build-time operations, see the build-time
//! API, . </p>

// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use error_meta::Error;

pub use config::Config;

mod aws_endpoint;
#[cfg(feature = "client")]
pub mod client;
pub mod config;
pub mod error;
mod error_meta;
mod http_serde;
pub mod input;
mod json_deser;
mod json_errors;
mod json_ser;
pub mod model;
mod no_credentials;
pub mod operation;
mod operation_deser;
mod operation_ser;
pub mod output;
pub static PKG_VERSION: &str = env!("CARGO_PKG_VERSION");
pub use smithy_http::byte_stream::ByteStream;
pub use smithy_http::result::SdkError;
pub use smithy_types::Blob;
static API_METADATA: aws_http::user_agent::ApiMetadata =
    aws_http::user_agent::ApiMetadata::new("lexruntimeservice", PKG_VERSION);
pub use aws_types::region::Region;
pub use aws_types::Credentials;
#[cfg(feature = "client")]
pub use client::Client;
pub use smithy_http::endpoint::Endpoint;
