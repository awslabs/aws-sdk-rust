// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetSessionInput {
    /// <p>The name of the bot that contains the session data.</p>
    #[doc(hidden)]
    pub bot_name: std::option::Option<std::string::String>,
    /// <p>The alias in use for the bot that contains the session data.</p>
    #[doc(hidden)]
    pub bot_alias: std::option::Option<std::string::String>,
    /// <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. </p>
    #[doc(hidden)]
    pub user_id: std::option::Option<std::string::String>,
    /// <p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code> structure. </p>
    /// <p>When you specify a filter, only intents with their <code>checkpointLabel</code> field set to that string are returned.</p>
    #[doc(hidden)]
    pub checkpoint_label_filter: std::option::Option<std::string::String>,
}
impl GetSessionInput {
    /// <p>The name of the bot that contains the session data.</p>
    pub fn bot_name(&self) -> std::option::Option<&str> {
        self.bot_name.as_deref()
    }
    /// <p>The alias in use for the bot that contains the session data.</p>
    pub fn bot_alias(&self) -> std::option::Option<&str> {
        self.bot_alias.as_deref()
    }
    /// <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. </p>
    pub fn user_id(&self) -> std::option::Option<&str> {
        self.user_id.as_deref()
    }
    /// <p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code> structure. </p>
    /// <p>When you specify a filter, only intents with their <code>checkpointLabel</code> field set to that string are returned.</p>
    pub fn checkpoint_label_filter(&self) -> std::option::Option<&str> {
        self.checkpoint_label_filter.as_deref()
    }
}
impl GetSessionInput {
    /// Creates a new builder-style object to manufacture [`GetSessionInput`](crate::operation::get_session::GetSessionInput).
    pub fn builder() -> crate::operation::get_session::builders::GetSessionInputBuilder {
        crate::operation::get_session::builders::GetSessionInputBuilder::default()
    }
}

/// A builder for [`GetSessionInput`](crate::operation::get_session::GetSessionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetSessionInputBuilder {
    pub(crate) bot_name: std::option::Option<std::string::String>,
    pub(crate) bot_alias: std::option::Option<std::string::String>,
    pub(crate) user_id: std::option::Option<std::string::String>,
    pub(crate) checkpoint_label_filter: std::option::Option<std::string::String>,
}
impl GetSessionInputBuilder {
    /// <p>The name of the bot that contains the session data.</p>
    pub fn bot_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_name = Some(input.into());
        self
    }
    /// <p>The name of the bot that contains the session data.</p>
    pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_name = input;
        self
    }
    /// <p>The alias in use for the bot that contains the session data.</p>
    pub fn bot_alias(mut self, input: impl Into<std::string::String>) -> Self {
        self.bot_alias = Some(input.into());
        self
    }
    /// <p>The alias in use for the bot that contains the session data.</p>
    pub fn set_bot_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bot_alias = input;
        self
    }
    /// <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. </p>
    pub fn user_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_id = Some(input.into());
        self
    }
    /// <p>The ID of the client application user. Amazon Lex uses this to identify a user's conversation with your bot. </p>
    pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code> structure. </p>
    /// <p>When you specify a filter, only intents with their <code>checkpointLabel</code> field set to that string are returned.</p>
    pub fn checkpoint_label_filter(mut self, input: impl Into<std::string::String>) -> Self {
        self.checkpoint_label_filter = Some(input.into());
        self
    }
    /// <p>A string used to filter the intents returned in the <code>recentIntentSummaryView</code> structure. </p>
    /// <p>When you specify a filter, only intents with their <code>checkpointLabel</code> field set to that string are returned.</p>
    pub fn set_checkpoint_label_filter(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.checkpoint_label_filter = input;
        self
    }
    /// Consumes the builder and constructs a [`GetSessionInput`](crate::operation::get_session::GetSessionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_session::GetSessionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_session::GetSessionInput {
            bot_name: self.bot_name,
            bot_alias: self.bot_alias,
            user_id: self.user_id,
            checkpoint_label_filter: self.checkpoint_label_filter,
        })
    }
}
