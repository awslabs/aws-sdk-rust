// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteSessionInput {
    /// <p>The name of the bot that contains the session data.</p>
    pub bot_name: ::std::option::Option<::std::string::String>,
    /// <p>The alias in use for the bot that contains the session data.</p>
    pub bot_alias: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the user associated with the session data.</p>
    pub user_id: ::std::option::Option<::std::string::String>,
}
impl DeleteSessionInput {
    /// <p>The name of the bot that contains the session data.</p>
    pub fn bot_name(&self) -> ::std::option::Option<&str> {
        self.bot_name.as_deref()
    }
    /// <p>The alias in use for the bot that contains the session data.</p>
    pub fn bot_alias(&self) -> ::std::option::Option<&str> {
        self.bot_alias.as_deref()
    }
    /// <p>The identifier of the user associated with the session data.</p>
    pub fn user_id(&self) -> ::std::option::Option<&str> {
        self.user_id.as_deref()
    }
}
impl DeleteSessionInput {
    /// Creates a new builder-style object to manufacture [`DeleteSessionInput`](crate::operation::delete_session::DeleteSessionInput).
    pub fn builder() -> crate::operation::delete_session::builders::DeleteSessionInputBuilder {
        crate::operation::delete_session::builders::DeleteSessionInputBuilder::default()
    }
}

/// A builder for [`DeleteSessionInput`](crate::operation::delete_session::DeleteSessionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteSessionInputBuilder {
    pub(crate) bot_name: ::std::option::Option<::std::string::String>,
    pub(crate) bot_alias: ::std::option::Option<::std::string::String>,
    pub(crate) user_id: ::std::option::Option<::std::string::String>,
}
impl DeleteSessionInputBuilder {
    /// <p>The name of the bot that contains the session data.</p>
    /// This field is required.
    pub fn bot_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the bot that contains the session data.</p>
    pub fn set_bot_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_name = input;
        self
    }
    /// <p>The name of the bot that contains the session data.</p>
    pub fn get_bot_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_name
    }
    /// <p>The alias in use for the bot that contains the session data.</p>
    /// This field is required.
    pub fn bot_alias(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.bot_alias = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The alias in use for the bot that contains the session data.</p>
    pub fn set_bot_alias(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.bot_alias = input;
        self
    }
    /// <p>The alias in use for the bot that contains the session data.</p>
    pub fn get_bot_alias(&self) -> &::std::option::Option<::std::string::String> {
        &self.bot_alias
    }
    /// <p>The identifier of the user associated with the session data.</p>
    /// This field is required.
    pub fn user_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the user associated with the session data.</p>
    pub fn set_user_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_id = input;
        self
    }
    /// <p>The identifier of the user associated with the session data.</p>
    pub fn get_user_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_id
    }
    /// Consumes the builder and constructs a [`DeleteSessionInput`](crate::operation::delete_session::DeleteSessionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_session::DeleteSessionInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::delete_session::DeleteSessionInput {
            bot_name: self.bot_name,
            bot_alias: self.bot_alias,
            user_id: self.user_id,
        })
    }
}
