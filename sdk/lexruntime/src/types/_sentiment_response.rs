// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The sentiment expressed in an utterance.</p>
/// <p>When the bot is configured to send utterances to Amazon Comprehend for sentiment analysis, this field structure contains the result of the analysis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SentimentResponse {
    /// <p>The inferred sentiment that Amazon Comprehend has the highest confidence in.</p>
    #[doc(hidden)]
    pub sentiment_label: std::option::Option<std::string::String>,
    /// <p>The likelihood that the sentiment was correctly inferred.</p>
    #[doc(hidden)]
    pub sentiment_score: std::option::Option<std::string::String>,
}
impl SentimentResponse {
    /// <p>The inferred sentiment that Amazon Comprehend has the highest confidence in.</p>
    pub fn sentiment_label(&self) -> std::option::Option<&str> {
        self.sentiment_label.as_deref()
    }
    /// <p>The likelihood that the sentiment was correctly inferred.</p>
    pub fn sentiment_score(&self) -> std::option::Option<&str> {
        self.sentiment_score.as_deref()
    }
}
impl SentimentResponse {
    /// Creates a new builder-style object to manufacture [`SentimentResponse`](crate::types::SentimentResponse).
    pub fn builder() -> crate::types::builders::SentimentResponseBuilder {
        crate::types::builders::SentimentResponseBuilder::default()
    }
}

/// A builder for [`SentimentResponse`](crate::types::SentimentResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SentimentResponseBuilder {
    pub(crate) sentiment_label: std::option::Option<std::string::String>,
    pub(crate) sentiment_score: std::option::Option<std::string::String>,
}
impl SentimentResponseBuilder {
    /// <p>The inferred sentiment that Amazon Comprehend has the highest confidence in.</p>
    pub fn sentiment_label(mut self, input: impl Into<std::string::String>) -> Self {
        self.sentiment_label = Some(input.into());
        self
    }
    /// <p>The inferred sentiment that Amazon Comprehend has the highest confidence in.</p>
    pub fn set_sentiment_label(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sentiment_label = input;
        self
    }
    /// <p>The likelihood that the sentiment was correctly inferred.</p>
    pub fn sentiment_score(mut self, input: impl Into<std::string::String>) -> Self {
        self.sentiment_score = Some(input.into());
        self
    }
    /// <p>The likelihood that the sentiment was correctly inferred.</p>
    pub fn set_sentiment_score(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sentiment_score = input;
        self
    }
    /// Consumes the builder and constructs a [`SentimentResponse`](crate::types::SentimentResponse).
    pub fn build(self) -> crate::types::SentimentResponse {
        crate::types::SentimentResponse {
            sentiment_label: self.sentiment_label,
            sentiment_score: self.sentiment_score,
        }
    }
}
