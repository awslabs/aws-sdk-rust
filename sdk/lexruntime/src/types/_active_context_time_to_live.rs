// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The length of time or number of turns that a context remains active.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActiveContextTimeToLive {
    /// <p>The number of seconds that the context should be active after it is first sent in a <code>PostContent</code> or <code>PostText</code> response. You can set the value between 5 and 86,400 seconds (24 hours).</p>
    #[doc(hidden)]
    pub time_to_live_in_seconds: std::option::Option<i32>,
    /// <p>The number of conversation turns that the context should be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code> request and the corresponding response from Amazon Lex.</p>
    #[doc(hidden)]
    pub turns_to_live: std::option::Option<i32>,
}
impl ActiveContextTimeToLive {
    /// <p>The number of seconds that the context should be active after it is first sent in a <code>PostContent</code> or <code>PostText</code> response. You can set the value between 5 and 86,400 seconds (24 hours).</p>
    pub fn time_to_live_in_seconds(&self) -> std::option::Option<i32> {
        self.time_to_live_in_seconds
    }
    /// <p>The number of conversation turns that the context should be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code> request and the corresponding response from Amazon Lex.</p>
    pub fn turns_to_live(&self) -> std::option::Option<i32> {
        self.turns_to_live
    }
}
impl ActiveContextTimeToLive {
    /// Creates a new builder-style object to manufacture [`ActiveContextTimeToLive`](crate::types::ActiveContextTimeToLive).
    pub fn builder() -> crate::types::builders::ActiveContextTimeToLiveBuilder {
        crate::types::builders::ActiveContextTimeToLiveBuilder::default()
    }
}

/// A builder for [`ActiveContextTimeToLive`](crate::types::ActiveContextTimeToLive).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActiveContextTimeToLiveBuilder {
    pub(crate) time_to_live_in_seconds: std::option::Option<i32>,
    pub(crate) turns_to_live: std::option::Option<i32>,
}
impl ActiveContextTimeToLiveBuilder {
    /// <p>The number of seconds that the context should be active after it is first sent in a <code>PostContent</code> or <code>PostText</code> response. You can set the value between 5 and 86,400 seconds (24 hours).</p>
    pub fn time_to_live_in_seconds(mut self, input: i32) -> Self {
        self.time_to_live_in_seconds = Some(input);
        self
    }
    /// <p>The number of seconds that the context should be active after it is first sent in a <code>PostContent</code> or <code>PostText</code> response. You can set the value between 5 and 86,400 seconds (24 hours).</p>
    pub fn set_time_to_live_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.time_to_live_in_seconds = input;
        self
    }
    /// <p>The number of conversation turns that the context should be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code> request and the corresponding response from Amazon Lex.</p>
    pub fn turns_to_live(mut self, input: i32) -> Self {
        self.turns_to_live = Some(input);
        self
    }
    /// <p>The number of conversation turns that the context should be active. A conversation turn is one <code>PostContent</code> or <code>PostText</code> request and the corresponding response from Amazon Lex.</p>
    pub fn set_turns_to_live(mut self, input: std::option::Option<i32>) -> Self {
        self.turns_to_live = input;
        self
    }
    /// Consumes the builder and constructs a [`ActiveContextTimeToLive`](crate::types::ActiveContextTimeToLive).
    pub fn build(self) -> crate::types::ActiveContextTimeToLive {
        crate::types::ActiveContextTimeToLive {
            time_to_live_in_seconds: self.time_to_live_in_seconds,
            turns_to_live: self.turns_to_live,
        }
    }
}
