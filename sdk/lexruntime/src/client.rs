// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(Debug)]
pub(crate) struct Handle<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    client: smithy_client::Client<C, M, R>,
    conf: crate::Config,
}

/// An ergonomic service client for `AWSDeepSenseRunTimeService`.
///
/// This client allows ergonomic access to a `AWSDeepSenseRunTimeService`-shaped service.
/// Each method corresponds to an endpoint defined in the service's Smithy model,
/// and the request and response shapes are auto-generated from that same model.
///
/// # Using a Client
///
/// Once you have a client set up, you can access the service's endpoints
/// by calling the appropriate method on [`Client`]. Each such method
/// returns a request builder for that endpoint, with methods for setting
/// the various fields of the request. Once your request is complete, use
/// the `send` method to send the request. `send` returns a future, which
/// you then have to `.await` to get the service's response.
///
/// [builder pattern]: https://rust-lang.github.io/api-guidelines/type-safety.html#c-builder
/// [SigV4-signed requests]: https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html
#[derive(std::fmt::Debug)]
pub struct Client<
    C = smithy_client::erase::DynConnector,
    M = aws_hyper::AwsMiddleware,
    R = smithy_client::retry::Standard,
> {
    handle: std::sync::Arc<Handle<C, M, R>>,
}

impl<C, M, R> std::clone::Clone for Client<C, M, R> {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

#[doc(inline)]
pub use smithy_client::Builder;

impl<C, M, R> From<smithy_client::Client<C, M, R>> for Client<C, M, R> {
    fn from(client: smithy_client::Client<C, M, R>) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl<C, M, R> Client<C, M, R> {
    pub fn with_config(client: smithy_client::Client<C, M, R>, conf: crate::Config) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl<C, M, R> Client<C, M, R>
where
    C: smithy_client::bounds::SmithyConnector,
    M: smithy_client::bounds::SmithyMiddleware<C>,
    R: smithy_client::retry::NewRequestPolicy,
{
    pub fn delete_session(&self) -> fluent_builders::DeleteSession<C, M, R> {
        fluent_builders::DeleteSession::new(self.handle.clone())
    }
    pub fn get_session(&self) -> fluent_builders::GetSession<C, M, R> {
        fluent_builders::GetSession::new(self.handle.clone())
    }
    pub fn post_content(&self) -> fluent_builders::PostContent<C, M, R> {
        fluent_builders::PostContent::new(self.handle.clone())
    }
    pub fn post_text(&self) -> fluent_builders::PostText<C, M, R> {
        fluent_builders::PostText::new(self.handle.clone())
    }
    pub fn put_session(&self) -> fluent_builders::PutSession<C, M, R> {
        fluent_builders::PutSession::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct DeleteSession<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::delete_session_input::Builder,
    }
    impl<C, M, R> DeleteSession<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteSessionOutput,
            smithy_http::result::SdkError<crate::error::DeleteSessionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::DeleteSessionInputOperationOutputAlias,
                crate::output::DeleteSessionOutput,
                crate::error::DeleteSessionError,
                crate::input::DeleteSessionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the bot that contains the session data.</p>
        pub fn bot_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_name(inp);
            self
        }
        pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_name(input);
            self
        }
        /// <p>The alias in use for the bot that contains the session data.</p>
        pub fn bot_alias(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_alias(inp);
            self
        }
        pub fn set_bot_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_alias(input);
            self
        }
        /// <p>The identifier of the user associated with the session data.</p>
        pub fn user_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_id(inp);
            self
        }
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetSession<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::get_session_input::Builder,
    }
    impl<C, M, R> GetSession<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetSessionOutput,
            smithy_http::result::SdkError<crate::error::GetSessionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::GetSessionInputOperationOutputAlias,
                crate::output::GetSessionOutput,
                crate::error::GetSessionError,
                crate::input::GetSessionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the bot that contains the session data.</p>
        pub fn bot_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_name(inp);
            self
        }
        pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_name(input);
            self
        }
        /// <p>The alias in use for the bot that contains the session data.</p>
        pub fn bot_alias(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_alias(inp);
            self
        }
        pub fn set_bot_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_alias(input);
            self
        }
        /// <p>The ID of the client application user. Amazon Lex uses this to identify a
        /// user's conversation with your bot. </p>
        pub fn user_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_id(inp);
            self
        }
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_id(input);
            self
        }
        /// <p>A string used to filter the intents returned in the
        /// <code>recentIntentSummaryView</code> structure. </p>
        /// <p>When you specify a filter, only intents with their
        /// <code>checkpointLabel</code> field set to that string are
        /// returned.</p>
        pub fn checkpoint_label_filter(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.checkpoint_label_filter(inp);
            self
        }
        pub fn set_checkpoint_label_filter(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_checkpoint_label_filter(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PostContent<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::post_content_input::Builder,
    }
    impl<C, M, R> PostContent<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PostContentOutput,
            smithy_http::result::SdkError<crate::error::PostContentError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PostContentInputOperationOutputAlias,
                crate::output::PostContentOutput,
                crate::error::PostContentError,
                crate::input::PostContentInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Name of the Amazon Lex bot.</p>
        pub fn bot_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_name(inp);
            self
        }
        pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_name(input);
            self
        }
        /// <p>Alias of the Amazon Lex bot.</p>
        pub fn bot_alias(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_alias(inp);
            self
        }
        pub fn set_bot_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_alias(input);
            self
        }
        /// <p>The ID of the client application user. Amazon Lex uses this to identify a
        /// user's conversation with your bot. At runtime, each request must contain
        /// the <code>userID</code> field.</p>
        /// <p>To decide the user ID to use for your application, consider the
        /// following factors.</p>
        /// <ul>
        /// <li>
        /// <p>The <code>userID</code> field must not contain any personally
        /// identifiable information of the user, for example, name, personal
        /// identification numbers, or other end user personal information.</p>
        /// </li>
        /// <li>
        /// <p>If you want a user to start a conversation on one device and
        /// continue on another device, use a user-specific identifier.</p>
        /// </li>
        /// <li>
        /// <p>If you want the same user to be able to have two independent
        /// conversations on two different devices, choose a device-specific
        /// identifier.</p>
        /// </li>
        /// <li>
        /// <p>A user can't have two independent conversations with two different
        /// versions of the same bot. For example, a user can't have a
        /// conversation with the PROD and BETA versions of the same bot. If you
        /// anticipate that a user will need to have conversation with two
        /// different versions, for example, while testing, include the bot alias
        /// in the user ID to separate the two conversations.</p>
        /// </li>
        /// </ul>
        pub fn user_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_id(inp);
            self
        }
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_id(input);
            self
        }
        /// <p>You pass this value as the <code>x-amz-lex-session-attributes</code>
        /// HTTP header.</p>
        /// <p>Application-specific information passed between Amazon Lex and a client
        /// application. The value must be a JSON serialized and base64 encoded map
        /// with string keys and values. The total size of the
        /// <code>sessionAttributes</code> and <code>requestAttributes</code>
        /// headers is limited to 12 KB.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting Session Attributes</a>.</p>
        pub fn session_attributes(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session_attributes(inp);
            self
        }
        pub fn set_session_attributes(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_session_attributes(input);
            self
        }
        /// <p>You pass this value as the <code>x-amz-lex-request-attributes</code>
        /// HTTP header.</p>
        /// <p>Request-specific information passed between Amazon Lex and a client
        /// application. The value must be a JSON serialized and base64 encoded map
        /// with string keys and values. The total size of the
        /// <code>requestAttributes</code> and <code>sessionAttributes</code>
        /// headers is limited to 12 KB.</p>
        /// <p>The namespace <code>x-amz-lex:</code> is reserved for special
        /// attributes. Don't create any request attributes with the prefix
        /// <code>x-amz-lex:</code>.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting Request Attributes</a>.</p>
        pub fn request_attributes(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.request_attributes(inp);
            self
        }
        pub fn set_request_attributes(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_request_attributes(input);
            self
        }
        /// <p> You pass this value as the <code>Content-Type</code> HTTP header. </p>
        /// <p> Indicates the audio format or text. The header value must start with
        /// one of the following prefixes: </p>
        /// <ul>
        /// <li>
        /// <p>PCM format, audio data must be in little-endian byte order.</p>
        /// <ul>
        /// <li>
        /// <p>audio/l16; rate=16000; channels=1</p>
        /// </li>
        /// <li>
        /// <p>audio/x-l16; sample-rate=16000; channel-count=1</p>
        /// </li>
        /// <li>
        /// <p>audio/lpcm; sample-rate=8000; sample-size-bits=16;
        /// channel-count=1; is-big-endian=false </p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>Opus format</p>
        /// <ul>
        /// <li>
        /// <p>audio/x-cbr-opus-with-preamble; preamble-size=0;
        /// bit-rate=256000; frame-size-milliseconds=4</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>Text format</p>
        /// <ul>
        /// <li>
        /// <p>text/plain; charset=utf-8</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn content_type(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.content_type(inp);
            self
        }
        pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_content_type(input);
            self
        }
        /// <p> You pass this value as the <code>Accept</code> HTTP header. </p>
        /// <p> The message Amazon Lex returns in the response can be either text or
        /// speech based on the <code>Accept</code> HTTP header value in the request. </p>
        /// <ul>
        /// <li>
        /// <p> If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex
        /// returns text in the response. </p>
        /// </li>
        /// <li>
        /// <p> If the value begins with <code>audio/</code>, Amazon Lex returns
        /// speech in the response. Amazon Lex uses Amazon Polly to generate the speech
        /// (using the configuration you specified in the <code>Accept</code>
        /// header). For example, if you specify <code>audio/mpeg</code> as the
        /// value, Amazon Lex returns speech in the MPEG format.</p>
        /// </li>
        /// <li>
        /// <p>If the value is <code>audio/pcm</code>, the speech returned is
        /// <code>audio/pcm</code> in 16-bit, little endian format.
        /// </p>
        /// </li>
        /// <li>
        /// <p>The following are the accepted values:</p>
        /// <ul>
        /// <li>
        /// <p>audio/mpeg</p>
        /// </li>
        /// <li>
        /// <p>audio/ogg</p>
        /// </li>
        /// <li>
        /// <p>audio/pcm</p>
        /// </li>
        /// <li>
        /// <p>text/plain; charset=utf-8</p>
        /// </li>
        /// <li>
        /// <p>audio/* (defaults to mpeg)</p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn accept(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept(inp);
            self
        }
        pub fn set_accept(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_accept(input);
            self
        }
        /// <p> User input in PCM or Opus audio format or text format as described in
        /// the <code>Content-Type</code> HTTP header. </p>
        /// <p>You can stream audio data to Amazon Lex or you can create a local buffer
        /// that captures all of the audio data before sending. In general, you get
        /// better performance if you stream audio data rather than buffering the data
        /// locally.</p>
        pub fn input_stream(mut self, inp: smithy_http::byte_stream::ByteStream) -> Self {
            self.inner = self.inner.input_stream(inp);
            self
        }
        pub fn set_input_stream(
            mut self,
            input: std::option::Option<smithy_http::byte_stream::ByteStream>,
        ) -> Self {
            self.inner = self.inner.set_input_stream(input);
            self
        }
        /// <p>A list of contexts active for the request. A context can be activated
        /// when a previous intent is fulfilled, or by including the context in the
        /// request,</p>
        /// <p>If you don't specify a list of contexts, Amazon Lex will use the current
        /// list of contexts for the session. If you specify an empty list, all
        /// contexts for the session are cleared.</p>
        pub fn active_contexts(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.active_contexts(inp);
            self
        }
        pub fn set_active_contexts(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_active_contexts(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PostText<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::post_text_input::Builder,
    }
    impl<C, M, R> PostText<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PostTextOutput,
            smithy_http::result::SdkError<crate::error::PostTextError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PostTextInputOperationOutputAlias,
                crate::output::PostTextOutput,
                crate::error::PostTextError,
                crate::input::PostTextInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the Amazon Lex bot.</p>
        pub fn bot_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_name(inp);
            self
        }
        pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_name(input);
            self
        }
        /// <p>The alias of the Amazon Lex bot.</p>
        pub fn bot_alias(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_alias(inp);
            self
        }
        pub fn set_bot_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_alias(input);
            self
        }
        /// <p>The ID of the client application user. Amazon Lex uses this to identify a
        /// user's conversation with your bot. At runtime, each request must contain
        /// the <code>userID</code> field.</p>
        /// <p>To decide the user ID to use for your application, consider the
        /// following factors.</p>
        /// <ul>
        /// <li>
        /// <p>The <code>userID</code> field must not contain any personally
        /// identifiable information of the user, for example, name, personal
        /// identification numbers, or other end user personal information.</p>
        /// </li>
        /// <li>
        /// <p>If you want a user to start a conversation on one device and
        /// continue on another device, use a user-specific identifier.</p>
        /// </li>
        /// <li>
        /// <p>If you want the same user to be able to have two independent
        /// conversations on two different devices, choose a device-specific
        /// identifier.</p>
        /// </li>
        /// <li>
        /// <p>A user can't have two independent conversations with two different
        /// versions of the same bot. For example, a user can't have a
        /// conversation with the PROD and BETA versions of the same bot. If you
        /// anticipate that a user will need to have conversation with two
        /// different versions, for example, while testing, include the bot alias
        /// in the user ID to separate the two conversations.</p>
        /// </li>
        /// </ul>
        pub fn user_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_id(inp);
            self
        }
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_id(input);
            self
        }
        /// Adds a key-value pair to `sessionAttributes`.
        ///
        /// To override the contents of this collection use [`set_session_attributes`](Self::set_session_attributes).
        /// <p>Application-specific information passed between Amazon Lex and a client
        /// application.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-session-attribs">Setting Session Attributes</a>.</p>
        pub fn session_attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.session_attributes(k, v);
            self
        }
        pub fn set_session_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_session_attributes(input);
            self
        }
        /// Adds a key-value pair to `requestAttributes`.
        ///
        /// To override the contents of this collection use [`set_request_attributes`](Self::set_request_attributes).
        /// <p>Request-specific information passed between Amazon Lex and a client
        /// application.</p>
        /// <p>The namespace <code>x-amz-lex:</code> is reserved for special
        /// attributes. Don't create any request attributes with the prefix
        /// <code>x-amz-lex:</code>.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/lex/latest/dg/context-mgmt.html#context-mgmt-request-attribs">Setting Request Attributes</a>.</p>
        pub fn request_attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.request_attributes(k, v);
            self
        }
        pub fn set_request_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_request_attributes(input);
            self
        }
        /// <p>The text that the user entered (Amazon Lex interprets this text).</p>
        pub fn input_text(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.input_text(inp);
            self
        }
        pub fn set_input_text(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_input_text(input);
            self
        }
        /// Appends an item to `activeContexts`.
        ///
        /// To override the contents of this collection use [`set_active_contexts`](Self::set_active_contexts).
        /// <p>A list of contexts active for the request. A context can be activated
        /// when a previous intent is fulfilled, or by including the context in the
        /// request,</p>
        /// <p>If you don't specify a list of contexts, Amazon Lex will use the current
        /// list of contexts for the session. If you specify an empty list, all
        /// contexts for the session are cleared.</p>
        pub fn active_contexts(mut self, inp: impl Into<crate::model::ActiveContext>) -> Self {
            self.inner = self.inner.active_contexts(inp);
            self
        }
        pub fn set_active_contexts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActiveContext>>,
        ) -> Self {
            self.inner = self.inner.set_active_contexts(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutSession<
        C = smithy_client::erase::DynConnector,
        M = aws_hyper::AwsMiddleware,
        R = smithy_client::retry::Standard,
    > {
        handle: std::sync::Arc<super::Handle<C, M, R>>,
        inner: crate::input::put_session_input::Builder,
    }
    impl<C, M, R> PutSession<C, M, R>
    where
        C: smithy_client::bounds::SmithyConnector,
        M: smithy_client::bounds::SmithyMiddleware<C>,
        R: smithy_client::retry::NewRequestPolicy,
    {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C, M, R>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::PutSessionOutput,
            smithy_http::result::SdkError<crate::error::PutSessionError>,
        >
        where
            R::Policy: smithy_client::bounds::SmithyRetryPolicy<
                crate::input::PutSessionInputOperationOutputAlias,
                crate::output::PutSessionOutput,
                crate::error::PutSessionError,
                crate::input::PutSessionInputOperationRetryAlias,
            >,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the bot that contains the session data.</p>
        pub fn bot_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_name(inp);
            self
        }
        pub fn set_bot_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_name(input);
            self
        }
        /// <p>The alias in use for the bot that contains the session data.</p>
        pub fn bot_alias(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.bot_alias(inp);
            self
        }
        pub fn set_bot_alias(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_bot_alias(input);
            self
        }
        /// <p>The ID of the client application user. Amazon Lex uses this to identify a
        /// user's conversation with your bot. </p>
        pub fn user_id(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_id(inp);
            self
        }
        pub fn set_user_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_id(input);
            self
        }
        /// Adds a key-value pair to `sessionAttributes`.
        ///
        /// To override the contents of this collection use [`set_session_attributes`](Self::set_session_attributes).
        /// <p>Map of key/value pairs representing the session-specific context
        /// information. It contains application information passed between Amazon Lex and
        /// a client application.</p>
        pub fn session_attributes(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.session_attributes(k, v);
            self
        }
        pub fn set_session_attributes(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_session_attributes(input);
            self
        }
        /// <p>Sets the next action that the bot should take to fulfill the
        /// conversation.</p>
        pub fn dialog_action(mut self, inp: crate::model::DialogAction) -> Self {
            self.inner = self.inner.dialog_action(inp);
            self
        }
        pub fn set_dialog_action(
            mut self,
            input: std::option::Option<crate::model::DialogAction>,
        ) -> Self {
            self.inner = self.inner.set_dialog_action(input);
            self
        }
        /// Appends an item to `recentIntentSummaryView`.
        ///
        /// To override the contents of this collection use [`set_recent_intent_summary_view`](Self::set_recent_intent_summary_view).
        /// <p>A summary of the recent intents for the bot. You can use the intent
        /// summary view to set a checkpoint label on an intent and modify attributes
        /// of intents. You can also use it to remove or add intent summary objects to
        /// the list.</p>
        /// <p>An intent that you modify or add to the list must make sense for the
        /// bot. For example, the intent name must be valid for the bot. You must
        /// provide valid values for:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>intentName</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>slot names</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>slotToElict</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>If you send the <code>recentIntentSummaryView</code> parameter in a
        /// <code>PutSession</code> request, the contents of the new summary view
        /// replaces the old summary view. For example, if a <code>GetSession</code>
        /// request returns three intents in the summary view and you call
        /// <code>PutSession</code> with one intent in the summary view, the next
        /// call to <code>GetSession</code> will only return one intent.</p>
        pub fn recent_intent_summary_view(
            mut self,
            inp: impl Into<crate::model::IntentSummary>,
        ) -> Self {
            self.inner = self.inner.recent_intent_summary_view(inp);
            self
        }
        pub fn set_recent_intent_summary_view(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::IntentSummary>>,
        ) -> Self {
            self.inner = self.inner.set_recent_intent_summary_view(input);
            self
        }
        /// <p>The message that Amazon Lex returns in the response can be either text or
        /// speech based depending on the value of this field.</p>
        /// <ul>
        /// <li>
        /// <p>If the value is <code>text/plain; charset=utf-8</code>, Amazon Lex
        /// returns text in the response.</p>
        /// </li>
        /// <li>
        /// <p>If the value begins with <code>audio/</code>, Amazon Lex returns speech
        /// in the response. Amazon Lex uses Amazon Polly to generate the speech in the
        /// configuration that you specify. For example, if you specify
        /// <code>audio/mpeg</code> as the value, Amazon Lex returns speech in the
        /// MPEG format.</p>
        /// </li>
        /// <li>
        /// <p>If the value is <code>audio/pcm</code>, the speech is returned as
        /// <code>audio/pcm</code> in 16-bit, little endian format.</p>
        /// </li>
        /// <li>
        /// <p>The following are the accepted values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>audio/mpeg</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>audio/ogg</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>audio/pcm</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>audio/*</code> (defaults to mpeg)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>text/plain; charset=utf-8</code>
        /// </p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn accept(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.accept(inp);
            self
        }
        pub fn set_accept(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_accept(input);
            self
        }
        /// Appends an item to `activeContexts`.
        ///
        /// To override the contents of this collection use [`set_active_contexts`](Self::set_active_contexts).
        /// <p>A list of contexts active for the request. A context can be activated
        /// when a previous intent is fulfilled, or by including the context in the
        /// request,</p>
        /// <p>If you don't specify a list of contexts, Amazon Lex will use the current
        /// list of contexts for the session. If you specify an empty list, all
        /// contexts for the session are cleared.</p>
        pub fn active_contexts(mut self, inp: impl Into<crate::model::ActiveContext>) -> Self {
            self.inner = self.inner.active_contexts(inp);
            self
        }
        pub fn set_active_contexts(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ActiveContext>>,
        ) -> Self {
            self.inner = self.inner.set_active_contexts(input);
            self
        }
    }
}
impl<C> Client<C, aws_hyper::AwsMiddleware, smithy_client::retry::Standard> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::new(conn).with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl
    Client<
        smithy_client::erase::DynConnector,
        aws_hyper::AwsMiddleware,
        smithy_client::retry::Standard,
    >
{
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn new(config: &aws_types::config::Config) -> Self {
        Self::from_conf(config.into())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf.retry_config.as_ref().cloned().unwrap_or_default();
        let client = aws_hyper::Client::https().with_retry_config(retry_config.into());
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
