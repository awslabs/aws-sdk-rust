// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum AreaOfInterestGeometry {
    /// <p></p>
    MultiPolygonGeometry(crate::types::MultiPolygonGeometryInput),
    /// <p></p>
    PolygonGeometry(crate::types::PolygonGeometryInput),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AreaOfInterestGeometry {
    /// Tries to convert the enum instance into [`MultiPolygonGeometry`](crate::types::AreaOfInterestGeometry::MultiPolygonGeometry), extracting the inner [`MultiPolygonGeometryInput`](crate::types::MultiPolygonGeometryInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_multi_polygon_geometry(
        &self,
    ) -> std::result::Result<&crate::types::MultiPolygonGeometryInput, &Self> {
        if let AreaOfInterestGeometry::MultiPolygonGeometry(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`MultiPolygonGeometry`](crate::types::AreaOfInterestGeometry::MultiPolygonGeometry).
    pub fn is_multi_polygon_geometry(&self) -> bool {
        self.as_multi_polygon_geometry().is_ok()
    }
    /// Tries to convert the enum instance into [`PolygonGeometry`](crate::types::AreaOfInterestGeometry::PolygonGeometry), extracting the inner [`PolygonGeometryInput`](crate::types::PolygonGeometryInput).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_polygon_geometry(
        &self,
    ) -> std::result::Result<&crate::types::PolygonGeometryInput, &Self> {
        if let AreaOfInterestGeometry::PolygonGeometry(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`PolygonGeometry`](crate::types::AreaOfInterestGeometry::PolygonGeometry).
    pub fn is_polygon_geometry(&self) -> bool {
        self.as_polygon_geometry().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
