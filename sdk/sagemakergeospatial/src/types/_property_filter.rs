// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure representing a single PropertyFilter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertyFilter {
    /// <p>Represents a single property to match with when searching a raster data collection.</p>
    pub property: ::std::option::Option<crate::types::Property>,
}
impl PropertyFilter {
    /// <p>Represents a single property to match with when searching a raster data collection.</p>
    pub fn property(&self) -> ::std::option::Option<&crate::types::Property> {
        self.property.as_ref()
    }
}
impl PropertyFilter {
    /// Creates a new builder-style object to manufacture [`PropertyFilter`](crate::types::PropertyFilter).
    pub fn builder() -> crate::types::builders::PropertyFilterBuilder {
        crate::types::builders::PropertyFilterBuilder::default()
    }
}

/// A builder for [`PropertyFilter`](crate::types::PropertyFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertyFilterBuilder {
    pub(crate) property: ::std::option::Option<crate::types::Property>,
}
impl PropertyFilterBuilder {
    /// <p>Represents a single property to match with when searching a raster data collection.</p>
    /// This field is required.
    pub fn property(mut self, input: crate::types::Property) -> Self {
        self.property = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents a single property to match with when searching a raster data collection.</p>
    pub fn set_property(mut self, input: ::std::option::Option<crate::types::Property>) -> Self {
        self.property = input;
        self
    }
    /// <p>Represents a single property to match with when searching a raster data collection.</p>
    pub fn get_property(&self) -> &::std::option::Option<crate::types::Property> {
        &self.property
    }
    /// Consumes the builder and constructs a [`PropertyFilter`](crate::types::PropertyFilter).
    pub fn build(self) -> crate::types::PropertyFilter {
        crate::types::PropertyFilter { property: self.property }
    }
}
