// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of PropertyFilter objects.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PropertyFilters {
    /// <p>A list of Property Filters.</p>
    pub properties: ::std::option::Option<::std::vec::Vec<crate::types::PropertyFilter>>,
    /// <p>The Logical Operator used to combine the Property Filters.</p>
    pub logical_operator: ::std::option::Option<crate::types::LogicalOperator>,
}
impl PropertyFilters {
    /// <p>A list of Property Filters.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.properties.is_none()`.
    pub fn properties(&self) -> &[crate::types::PropertyFilter] {
        self.properties.as_deref().unwrap_or_default()
    }
    /// <p>The Logical Operator used to combine the Property Filters.</p>
    pub fn logical_operator(&self) -> ::std::option::Option<&crate::types::LogicalOperator> {
        self.logical_operator.as_ref()
    }
}
impl PropertyFilters {
    /// Creates a new builder-style object to manufacture [`PropertyFilters`](crate::types::PropertyFilters).
    pub fn builder() -> crate::types::builders::PropertyFiltersBuilder {
        crate::types::builders::PropertyFiltersBuilder::default()
    }
}

/// A builder for [`PropertyFilters`](crate::types::PropertyFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PropertyFiltersBuilder {
    pub(crate) properties: ::std::option::Option<::std::vec::Vec<crate::types::PropertyFilter>>,
    pub(crate) logical_operator: ::std::option::Option<crate::types::LogicalOperator>,
}
impl PropertyFiltersBuilder {
    /// Appends an item to `properties`.
    ///
    /// To override the contents of this collection use [`set_properties`](Self::set_properties).
    ///
    /// <p>A list of Property Filters.</p>
    pub fn properties(mut self, input: crate::types::PropertyFilter) -> Self {
        let mut v = self.properties.unwrap_or_default();
        v.push(input);
        self.properties = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Property Filters.</p>
    pub fn set_properties(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PropertyFilter>>) -> Self {
        self.properties = input;
        self
    }
    /// <p>A list of Property Filters.</p>
    pub fn get_properties(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PropertyFilter>> {
        &self.properties
    }
    /// <p>The Logical Operator used to combine the Property Filters.</p>
    pub fn logical_operator(mut self, input: crate::types::LogicalOperator) -> Self {
        self.logical_operator = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Logical Operator used to combine the Property Filters.</p>
    pub fn set_logical_operator(mut self, input: ::std::option::Option<crate::types::LogicalOperator>) -> Self {
        self.logical_operator = input;
        self
    }
    /// <p>The Logical Operator used to combine the Property Filters.</p>
    pub fn get_logical_operator(&self) -> &::std::option::Option<crate::types::LogicalOperator> {
        &self.logical_operator
    }
    /// Consumes the builder and constructs a [`PropertyFilters`](crate::types::PropertyFilters).
    pub fn build(self) -> crate::types::PropertyFilters {
        crate::types::PropertyFilters {
            properties: self.properties,
            logical_operator: self.logical_operator,
        }
    }
}
