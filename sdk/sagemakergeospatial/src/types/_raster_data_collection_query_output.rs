// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RasterDataCollectionQueryOutput {
    /// <p></p>
    #[doc(hidden)]
    pub raster_data_collection_arn: std::option::Option<std::string::String>,
    /// <p>The name of the raster data collection.</p>
    #[doc(hidden)]
    pub raster_data_collection_name: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub time_range_filter: std::option::Option<crate::types::TimeRangeFilterInput>,
    /// <p></p>
    #[doc(hidden)]
    pub area_of_interest: std::option::Option<crate::types::AreaOfInterest>,
    /// <p></p>
    #[doc(hidden)]
    pub property_filters: std::option::Option<crate::types::PropertyFilters>,
}
impl RasterDataCollectionQueryOutput {
    /// <p></p>
    pub fn raster_data_collection_arn(&self) -> std::option::Option<&str> {
        self.raster_data_collection_arn.as_deref()
    }
    /// <p>The name of the raster data collection.</p>
    pub fn raster_data_collection_name(&self) -> std::option::Option<&str> {
        self.raster_data_collection_name.as_deref()
    }
    /// <p></p>
    pub fn time_range_filter(&self) -> std::option::Option<&crate::types::TimeRangeFilterInput> {
        self.time_range_filter.as_ref()
    }
    /// <p></p>
    pub fn area_of_interest(&self) -> std::option::Option<&crate::types::AreaOfInterest> {
        self.area_of_interest.as_ref()
    }
    /// <p></p>
    pub fn property_filters(&self) -> std::option::Option<&crate::types::PropertyFilters> {
        self.property_filters.as_ref()
    }
}
impl std::fmt::Debug for RasterDataCollectionQueryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RasterDataCollectionQueryOutput");
        formatter.field(
            "raster_data_collection_arn",
            &self.raster_data_collection_arn,
        );
        formatter.field(
            "raster_data_collection_name",
            &self.raster_data_collection_name,
        );
        formatter.field("time_range_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("area_of_interest", &self.area_of_interest);
        formatter.field("property_filters", &self.property_filters);
        formatter.finish()
    }
}
impl RasterDataCollectionQueryOutput {
    /// Creates a new builder-style object to manufacture [`RasterDataCollectionQueryOutput`](crate::types::RasterDataCollectionQueryOutput).
    pub fn builder() -> crate::types::builders::RasterDataCollectionQueryOutputBuilder {
        crate::types::builders::RasterDataCollectionQueryOutputBuilder::default()
    }
}

/// A builder for [`RasterDataCollectionQueryOutput`](crate::types::RasterDataCollectionQueryOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct RasterDataCollectionQueryOutputBuilder {
    pub(crate) raster_data_collection_arn: std::option::Option<std::string::String>,
    pub(crate) raster_data_collection_name: std::option::Option<std::string::String>,
    pub(crate) time_range_filter: std::option::Option<crate::types::TimeRangeFilterInput>,
    pub(crate) area_of_interest: std::option::Option<crate::types::AreaOfInterest>,
    pub(crate) property_filters: std::option::Option<crate::types::PropertyFilters>,
}
impl RasterDataCollectionQueryOutputBuilder {
    /// <p></p>
    pub fn raster_data_collection_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.raster_data_collection_arn = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_raster_data_collection_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.raster_data_collection_arn = input;
        self
    }
    /// <p>The name of the raster data collection.</p>
    pub fn raster_data_collection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.raster_data_collection_name = Some(input.into());
        self
    }
    /// <p>The name of the raster data collection.</p>
    pub fn set_raster_data_collection_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.raster_data_collection_name = input;
        self
    }
    /// <p></p>
    pub fn time_range_filter(mut self, input: crate::types::TimeRangeFilterInput) -> Self {
        self.time_range_filter = Some(input);
        self
    }
    /// <p></p>
    pub fn set_time_range_filter(
        mut self,
        input: std::option::Option<crate::types::TimeRangeFilterInput>,
    ) -> Self {
        self.time_range_filter = input;
        self
    }
    /// <p></p>
    pub fn area_of_interest(mut self, input: crate::types::AreaOfInterest) -> Self {
        self.area_of_interest = Some(input);
        self
    }
    /// <p></p>
    pub fn set_area_of_interest(
        mut self,
        input: std::option::Option<crate::types::AreaOfInterest>,
    ) -> Self {
        self.area_of_interest = input;
        self
    }
    /// <p></p>
    pub fn property_filters(mut self, input: crate::types::PropertyFilters) -> Self {
        self.property_filters = Some(input);
        self
    }
    /// <p></p>
    pub fn set_property_filters(
        mut self,
        input: std::option::Option<crate::types::PropertyFilters>,
    ) -> Self {
        self.property_filters = input;
        self
    }
    /// Consumes the builder and constructs a [`RasterDataCollectionQueryOutput`](crate::types::RasterDataCollectionQueryOutput).
    pub fn build(self) -> crate::types::RasterDataCollectionQueryOutput {
        crate::types::RasterDataCollectionQueryOutput {
            raster_data_collection_arn: self.raster_data_collection_arn,
            raster_data_collection_name: self.raster_data_collection_name,
            time_range_filter: self.time_range_filter,
            area_of_interest: self.area_of_interest,
            property_filters: self.property_filters,
        }
    }
}
impl std::fmt::Debug for RasterDataCollectionQueryOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RasterDataCollectionQueryOutputBuilder");
        formatter.field(
            "raster_data_collection_arn",
            &self.raster_data_collection_arn,
        );
        formatter.field(
            "raster_data_collection_name",
            &self.raster_data_collection_name,
        );
        formatter.field("time_range_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("area_of_interest", &self.area_of_interest);
        formatter.field("property_filters", &self.property_filters);
        formatter.finish()
    }
}
