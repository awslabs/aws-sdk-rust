// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AlgorithmNameResampling`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let algorithmnameresampling = unimplemented!();
/// match algorithmnameresampling {
///     AlgorithmNameResampling::Average => { /* ... */ },
///     AlgorithmNameResampling::Bilinear => { /* ... */ },
///     AlgorithmNameResampling::Cubic => { /* ... */ },
///     AlgorithmNameResampling::Cubicspline => { /* ... */ },
///     AlgorithmNameResampling::Lanczos => { /* ... */ },
///     AlgorithmNameResampling::Max => { /* ... */ },
///     AlgorithmNameResampling::Med => { /* ... */ },
///     AlgorithmNameResampling::Min => { /* ... */ },
///     AlgorithmNameResampling::Mode => { /* ... */ },
///     AlgorithmNameResampling::Near => { /* ... */ },
///     AlgorithmNameResampling::Q1 => { /* ... */ },
///     AlgorithmNameResampling::Q3 => { /* ... */ },
///     AlgorithmNameResampling::Rms => { /* ... */ },
///     AlgorithmNameResampling::Sum => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `algorithmnameresampling` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AlgorithmNameResampling::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AlgorithmNameResampling::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AlgorithmNameResampling::NewFeature` is defined.
/// Specifically, when `algorithmnameresampling` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AlgorithmNameResampling::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AlgorithmNameResampling {
    /// AVERAGE
    Average,
    /// BILINEAR
    Bilinear,
    /// CUBIC
    Cubic,
    /// CUBICSPLINE
    Cubicspline,
    /// LANCZOS
    Lanczos,
    /// MAX
    Max,
    /// MED
    Med,
    /// MIN
    Min,
    /// MODE
    Mode,
    /// NEAR
    Near,
    /// Q1
    Q1,
    /// Q3
    Q3,
    /// RMS
    Rms,
    /// SUM
    Sum,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AlgorithmNameResampling {
    fn from(s: &str) -> Self {
        match s {
            "AVERAGE" => AlgorithmNameResampling::Average,
            "BILINEAR" => AlgorithmNameResampling::Bilinear,
            "CUBIC" => AlgorithmNameResampling::Cubic,
            "CUBICSPLINE" => AlgorithmNameResampling::Cubicspline,
            "LANCZOS" => AlgorithmNameResampling::Lanczos,
            "MAX" => AlgorithmNameResampling::Max,
            "MED" => AlgorithmNameResampling::Med,
            "MIN" => AlgorithmNameResampling::Min,
            "MODE" => AlgorithmNameResampling::Mode,
            "NEAR" => AlgorithmNameResampling::Near,
            "Q1" => AlgorithmNameResampling::Q1,
            "Q3" => AlgorithmNameResampling::Q3,
            "RMS" => AlgorithmNameResampling::Rms,
            "SUM" => AlgorithmNameResampling::Sum,
            other => AlgorithmNameResampling::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for AlgorithmNameResampling {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AlgorithmNameResampling::from(s))
    }
}
impl AlgorithmNameResampling {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AlgorithmNameResampling::Average => "AVERAGE",
            AlgorithmNameResampling::Bilinear => "BILINEAR",
            AlgorithmNameResampling::Cubic => "CUBIC",
            AlgorithmNameResampling::Cubicspline => "CUBICSPLINE",
            AlgorithmNameResampling::Lanczos => "LANCZOS",
            AlgorithmNameResampling::Max => "MAX",
            AlgorithmNameResampling::Med => "MED",
            AlgorithmNameResampling::Min => "MIN",
            AlgorithmNameResampling::Mode => "MODE",
            AlgorithmNameResampling::Near => "NEAR",
            AlgorithmNameResampling::Q1 => "Q1",
            AlgorithmNameResampling::Q3 => "Q3",
            AlgorithmNameResampling::Rms => "RMS",
            AlgorithmNameResampling::Sum => "SUM",
            AlgorithmNameResampling::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AVERAGE",
            "BILINEAR",
            "CUBIC",
            "CUBICSPLINE",
            "LANCZOS",
            "MAX",
            "MED",
            "MIN",
            "MODE",
            "NEAR",
            "Q1",
            "Q3",
            "RMS",
            "SUM",
        ]
    }
}
impl AsRef<str> for AlgorithmNameResampling {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
