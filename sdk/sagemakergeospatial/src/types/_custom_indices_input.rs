// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CustomIndicesInput {
    /// <p></p>
    #[doc(hidden)]
    pub operations: std::option::Option<std::vec::Vec<crate::types::Operation>>,
}
impl CustomIndicesInput {
    /// <p></p>
    pub fn operations(&self) -> std::option::Option<&[crate::types::Operation]> {
        self.operations.as_deref()
    }
}
impl CustomIndicesInput {
    /// Creates a new builder-style object to manufacture [`CustomIndicesInput`](crate::types::CustomIndicesInput).
    pub fn builder() -> crate::types::builders::CustomIndicesInputBuilder {
        crate::types::builders::CustomIndicesInputBuilder::default()
    }
}

/// A builder for [`CustomIndicesInput`](crate::types::CustomIndicesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CustomIndicesInputBuilder {
    pub(crate) operations: std::option::Option<std::vec::Vec<crate::types::Operation>>,
}
impl CustomIndicesInputBuilder {
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p></p>
    pub fn operations(mut self, input: crate::types::Operation) -> Self {
        let mut v = self.operations.unwrap_or_default();
        v.push(input);
        self.operations = Some(v);
        self
    }
    /// <p></p>
    pub fn set_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Operation>>,
    ) -> Self {
        self.operations = input;
        self
    }
    /// Consumes the builder and constructs a [`CustomIndicesInput`](crate::types::CustomIndicesInput).
    pub fn build(self) -> crate::types::CustomIndicesInput {
        crate::types::CustomIndicesInput {
            operations: self.operations,
        }
    }
}
