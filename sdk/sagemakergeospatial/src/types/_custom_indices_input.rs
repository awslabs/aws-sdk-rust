// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input object defining the custom BandMath indices to compute.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CustomIndicesInput {
    /// <p>A list of BandMath indices to compute.</p>
    pub operations: ::std::option::Option<::std::vec::Vec<crate::types::Operation>>,
}
impl CustomIndicesInput {
    /// <p>A list of BandMath indices to compute.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.operations.is_none()`.
    pub fn operations(&self) -> &[crate::types::Operation] {
        self.operations.as_deref().unwrap_or_default()
    }
}
impl CustomIndicesInput {
    /// Creates a new builder-style object to manufacture [`CustomIndicesInput`](crate::types::CustomIndicesInput).
    pub fn builder() -> crate::types::builders::CustomIndicesInputBuilder {
        crate::types::builders::CustomIndicesInputBuilder::default()
    }
}

/// A builder for [`CustomIndicesInput`](crate::types::CustomIndicesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CustomIndicesInputBuilder {
    pub(crate) operations: ::std::option::Option<::std::vec::Vec<crate::types::Operation>>,
}
impl CustomIndicesInputBuilder {
    /// Appends an item to `operations`.
    ///
    /// To override the contents of this collection use [`set_operations`](Self::set_operations).
    ///
    /// <p>A list of BandMath indices to compute.</p>
    pub fn operations(mut self, input: crate::types::Operation) -> Self {
        let mut v = self.operations.unwrap_or_default();
        v.push(input);
        self.operations = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of BandMath indices to compute.</p>
    pub fn set_operations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Operation>>) -> Self {
        self.operations = input;
        self
    }
    /// <p>A list of BandMath indices to compute.</p>
    pub fn get_operations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Operation>> {
        &self.operations
    }
    /// Consumes the builder and constructs a [`CustomIndicesInput`](crate::types::CustomIndicesInput).
    pub fn build(self) -> crate::types::CustomIndicesInput {
        crate::types::CustomIndicesInput { operations: self.operations }
    }
}
