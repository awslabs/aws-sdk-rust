// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Response object containing details for a specific RasterDataCollection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RasterDataCollectionMetadata {
    /// <p>The name of the raster data collection.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub arn: ::std::string::String,
    /// <p>The type of raster data collection.</p>
    pub r#type: crate::types::DataCollectionType,
    /// <p>A description of the raster data collection.</p>
    pub description: ::std::string::String,
    /// <p>The description URL of the raster data collection.</p>
    pub description_page_url: ::std::option::Option<::std::string::String>,
    /// <p>The list of filters supported by the raster data collection.</p>
    pub supported_filters: ::std::vec::Vec<crate::types::Filter>,
    /// <p>Each tag consists of a key and a value.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RasterDataCollectionMetadata {
    /// <p>The name of the raster data collection.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The type of raster data collection.</p>
    pub fn r#type(&self) -> &crate::types::DataCollectionType {
        &self.r#type
    }
    /// <p>A description of the raster data collection.</p>
    pub fn description(&self) -> &str {
        use std::ops::Deref;
        self.description.deref()
    }
    /// <p>The description URL of the raster data collection.</p>
    pub fn description_page_url(&self) -> ::std::option::Option<&str> {
        self.description_page_url.as_deref()
    }
    /// <p>The list of filters supported by the raster data collection.</p>
    pub fn supported_filters(&self) -> &[crate::types::Filter] {
        use std::ops::Deref;
        self.supported_filters.deref()
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl RasterDataCollectionMetadata {
    /// Creates a new builder-style object to manufacture [`RasterDataCollectionMetadata`](crate::types::RasterDataCollectionMetadata).
    pub fn builder() -> crate::types::builders::RasterDataCollectionMetadataBuilder {
        crate::types::builders::RasterDataCollectionMetadataBuilder::default()
    }
}

/// A builder for [`RasterDataCollectionMetadata`](crate::types::RasterDataCollectionMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RasterDataCollectionMetadataBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DataCollectionType>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) description_page_url: ::std::option::Option<::std::string::String>,
    pub(crate) supported_filters: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl RasterDataCollectionMetadataBuilder {
    /// <p>The name of the raster data collection.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the raster data collection.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the raster data collection.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The type of raster data collection.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DataCollectionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of raster data collection.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataCollectionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of raster data collection.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataCollectionType> {
        &self.r#type
    }
    /// <p>A description of the raster data collection.</p>
    /// This field is required.
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the raster data collection.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the raster data collection.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The description URL of the raster data collection.</p>
    pub fn description_page_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description_page_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description URL of the raster data collection.</p>
    pub fn set_description_page_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description_page_url = input;
        self
    }
    /// <p>The description URL of the raster data collection.</p>
    pub fn get_description_page_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.description_page_url
    }
    /// Appends an item to `supported_filters`.
    ///
    /// To override the contents of this collection use [`set_supported_filters`](Self::set_supported_filters).
    ///
    /// <p>The list of filters supported by the raster data collection.</p>
    pub fn supported_filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.supported_filters.unwrap_or_default();
        v.push(input);
        self.supported_filters = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of filters supported by the raster data collection.</p>
    pub fn set_supported_filters(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Filter>>) -> Self {
        self.supported_filters = input;
        self
    }
    /// <p>The list of filters supported by the raster data collection.</p>
    pub fn get_supported_filters(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Filter>> {
        &self.supported_filters
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`RasterDataCollectionMetadata`](crate::types::RasterDataCollectionMetadata).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::RasterDataCollectionMetadataBuilder::name)
    /// - [`arn`](crate::types::builders::RasterDataCollectionMetadataBuilder::arn)
    /// - [`r#type`](crate::types::builders::RasterDataCollectionMetadataBuilder::r#type)
    /// - [`description`](crate::types::builders::RasterDataCollectionMetadataBuilder::description)
    /// - [`supported_filters`](crate::types::builders::RasterDataCollectionMetadataBuilder::supported_filters)
    pub fn build(self) -> ::std::result::Result<crate::types::RasterDataCollectionMetadata, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RasterDataCollectionMetadata {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building RasterDataCollectionMetadata",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building RasterDataCollectionMetadata",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building RasterDataCollectionMetadata",
                )
            })?,
            description: self.description.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "description",
                    "description was not specified but it is required when building RasterDataCollectionMetadata",
                )
            })?,
            description_page_url: self.description_page_url,
            supported_filters: self.supported_filters.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "supported_filters",
                    "supported_filters was not specified but it is required when building RasterDataCollectionMetadata",
                )
            })?,
            tags: self.tags,
        })
    }
}
