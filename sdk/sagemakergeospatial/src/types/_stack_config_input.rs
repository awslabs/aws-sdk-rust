// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StackConfigInput {
    /// <p></p>
    #[doc(hidden)]
    pub output_resolution: std::option::Option<crate::types::OutputResolutionStackInput>,
    /// <p></p>
    #[doc(hidden)]
    pub target_bands: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl StackConfigInput {
    /// <p></p>
    pub fn output_resolution(
        &self,
    ) -> std::option::Option<&crate::types::OutputResolutionStackInput> {
        self.output_resolution.as_ref()
    }
    /// <p></p>
    pub fn target_bands(&self) -> std::option::Option<&[std::string::String]> {
        self.target_bands.as_deref()
    }
}
impl StackConfigInput {
    /// Creates a new builder-style object to manufacture [`StackConfigInput`](crate::types::StackConfigInput).
    pub fn builder() -> crate::types::builders::StackConfigInputBuilder {
        crate::types::builders::StackConfigInputBuilder::default()
    }
}

/// A builder for [`StackConfigInput`](crate::types::StackConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StackConfigInputBuilder {
    pub(crate) output_resolution: std::option::Option<crate::types::OutputResolutionStackInput>,
    pub(crate) target_bands: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl StackConfigInputBuilder {
    /// <p></p>
    pub fn output_resolution(mut self, input: crate::types::OutputResolutionStackInput) -> Self {
        self.output_resolution = Some(input);
        self
    }
    /// <p></p>
    pub fn set_output_resolution(
        mut self,
        input: std::option::Option<crate::types::OutputResolutionStackInput>,
    ) -> Self {
        self.output_resolution = input;
        self
    }
    /// Appends an item to `target_bands`.
    ///
    /// To override the contents of this collection use [`set_target_bands`](Self::set_target_bands).
    ///
    /// <p></p>
    pub fn target_bands(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.target_bands.unwrap_or_default();
        v.push(input.into());
        self.target_bands = Some(v);
        self
    }
    /// <p></p>
    pub fn set_target_bands(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.target_bands = input;
        self
    }
    /// Consumes the builder and constructs a [`StackConfigInput`](crate::types::StackConfigInput).
    pub fn build(self) -> crate::types::StackConfigInput {
        crate::types::StackConfigInput {
            output_resolution: self.output_resolution,
            target_bands: self.target_bands,
        }
    }
}
