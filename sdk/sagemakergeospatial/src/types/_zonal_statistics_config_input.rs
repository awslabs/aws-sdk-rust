// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ZonalStatisticsConfigInput {
    /// <p></p>
    #[doc(hidden)]
    pub zone_s3_path: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub statistics: std::option::Option<std::vec::Vec<crate::types::ZonalStatistics>>,
    /// <p></p>
    #[doc(hidden)]
    pub target_bands: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ZonalStatisticsConfigInput {
    /// <p></p>
    pub fn zone_s3_path(&self) -> std::option::Option<&str> {
        self.zone_s3_path.as_deref()
    }
    /// <p></p>
    pub fn statistics(&self) -> std::option::Option<&[crate::types::ZonalStatistics]> {
        self.statistics.as_deref()
    }
    /// <p></p>
    pub fn target_bands(&self) -> std::option::Option<&[std::string::String]> {
        self.target_bands.as_deref()
    }
}
impl ZonalStatisticsConfigInput {
    /// Creates a new builder-style object to manufacture [`ZonalStatisticsConfigInput`](crate::types::ZonalStatisticsConfigInput).
    pub fn builder() -> crate::types::builders::ZonalStatisticsConfigInputBuilder {
        crate::types::builders::ZonalStatisticsConfigInputBuilder::default()
    }
}

/// A builder for [`ZonalStatisticsConfigInput`](crate::types::ZonalStatisticsConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ZonalStatisticsConfigInputBuilder {
    pub(crate) zone_s3_path: std::option::Option<std::string::String>,
    pub(crate) statistics: std::option::Option<std::vec::Vec<crate::types::ZonalStatistics>>,
    pub(crate) target_bands: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ZonalStatisticsConfigInputBuilder {
    /// <p></p>
    pub fn zone_s3_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.zone_s3_path = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_zone_s3_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.zone_s3_path = input;
        self
    }
    /// Appends an item to `statistics`.
    ///
    /// To override the contents of this collection use [`set_statistics`](Self::set_statistics).
    ///
    /// <p></p>
    pub fn statistics(mut self, input: crate::types::ZonalStatistics) -> Self {
        let mut v = self.statistics.unwrap_or_default();
        v.push(input);
        self.statistics = Some(v);
        self
    }
    /// <p></p>
    pub fn set_statistics(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ZonalStatistics>>,
    ) -> Self {
        self.statistics = input;
        self
    }
    /// Appends an item to `target_bands`.
    ///
    /// To override the contents of this collection use [`set_target_bands`](Self::set_target_bands).
    ///
    /// <p></p>
    pub fn target_bands(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.target_bands.unwrap_or_default();
        v.push(input.into());
        self.target_bands = Some(v);
        self
    }
    /// <p></p>
    pub fn set_target_bands(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.target_bands = input;
        self
    }
    /// Consumes the builder and constructs a [`ZonalStatisticsConfigInput`](crate::types::ZonalStatisticsConfigInput).
    pub fn build(self) -> crate::types::ZonalStatisticsConfigInput {
        crate::types::ZonalStatisticsConfigInput {
            zone_s3_path: self.zone_s3_path,
            statistics: self.statistics,
            target_bands: self.target_bands,
        }
    }
}
