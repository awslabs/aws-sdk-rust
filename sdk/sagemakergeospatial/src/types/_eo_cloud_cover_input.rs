// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The structure representing the EoCloudCover filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EoCloudCoverInput {
    /// <p>Lower bound for EoCloudCover.</p>
    pub lower_bound: f32,
    /// <p>Upper bound for EoCloudCover.</p>
    pub upper_bound: f32,
}
impl EoCloudCoverInput {
    /// <p>Lower bound for EoCloudCover.</p>
    pub fn lower_bound(&self) -> f32 {
        self.lower_bound
    }
    /// <p>Upper bound for EoCloudCover.</p>
    pub fn upper_bound(&self) -> f32 {
        self.upper_bound
    }
}
impl EoCloudCoverInput {
    /// Creates a new builder-style object to manufacture [`EoCloudCoverInput`](crate::types::EoCloudCoverInput).
    pub fn builder() -> crate::types::builders::EoCloudCoverInputBuilder {
        crate::types::builders::EoCloudCoverInputBuilder::default()
    }
}

/// A builder for [`EoCloudCoverInput`](crate::types::EoCloudCoverInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EoCloudCoverInputBuilder {
    pub(crate) lower_bound: ::std::option::Option<f32>,
    pub(crate) upper_bound: ::std::option::Option<f32>,
}
impl EoCloudCoverInputBuilder {
    /// <p>Lower bound for EoCloudCover.</p>
    /// This field is required.
    pub fn lower_bound(mut self, input: f32) -> Self {
        self.lower_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lower bound for EoCloudCover.</p>
    pub fn set_lower_bound(mut self, input: ::std::option::Option<f32>) -> Self {
        self.lower_bound = input;
        self
    }
    /// <p>Lower bound for EoCloudCover.</p>
    pub fn get_lower_bound(&self) -> &::std::option::Option<f32> {
        &self.lower_bound
    }
    /// <p>Upper bound for EoCloudCover.</p>
    /// This field is required.
    pub fn upper_bound(mut self, input: f32) -> Self {
        self.upper_bound = ::std::option::Option::Some(input);
        self
    }
    /// <p>Upper bound for EoCloudCover.</p>
    pub fn set_upper_bound(mut self, input: ::std::option::Option<f32>) -> Self {
        self.upper_bound = input;
        self
    }
    /// <p>Upper bound for EoCloudCover.</p>
    pub fn get_upper_bound(&self) -> &::std::option::Option<f32> {
        &self.upper_bound
    }
    /// Consumes the builder and constructs a [`EoCloudCoverInput`](crate::types::EoCloudCoverInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`lower_bound`](crate::types::builders::EoCloudCoverInputBuilder::lower_bound)
    /// - [`upper_bound`](crate::types::builders::EoCloudCoverInputBuilder::upper_bound)
    pub fn build(self) -> ::std::result::Result<crate::types::EoCloudCoverInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EoCloudCoverInput {
            lower_bound: self.lower_bound.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "lower_bound",
                    "lower_bound was not specified but it is required when building EoCloudCoverInput",
                )
            })?,
            upper_bound: self.upper_bound.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "upper_bound",
                    "upper_bound was not specified but it is required when building EoCloudCoverInput",
                )
            })?,
        })
    }
}
