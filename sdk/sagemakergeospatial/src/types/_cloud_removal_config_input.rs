// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input structure for Cloud Removal Operation type</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CloudRemovalConfigInput {
    /// <p>The name of the algorithm used for cloud removal.</p>
    pub algorithm_name: ::std::option::Option<crate::types::AlgorithmNameCloudRemoval>,
    /// <p>The interpolation value you provide for cloud removal.</p>
    pub interpolation_value: ::std::option::Option<::std::string::String>,
    /// <p>TargetBands to be returned in the output of CloudRemoval operation.</p>
    pub target_bands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CloudRemovalConfigInput {
    /// <p>The name of the algorithm used for cloud removal.</p>
    pub fn algorithm_name(&self) -> ::std::option::Option<&crate::types::AlgorithmNameCloudRemoval> {
        self.algorithm_name.as_ref()
    }
    /// <p>The interpolation value you provide for cloud removal.</p>
    pub fn interpolation_value(&self) -> ::std::option::Option<&str> {
        self.interpolation_value.as_deref()
    }
    /// <p>TargetBands to be returned in the output of CloudRemoval operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.target_bands.is_none()`.
    pub fn target_bands(&self) -> &[::std::string::String] {
        self.target_bands.as_deref().unwrap_or_default()
    }
}
impl CloudRemovalConfigInput {
    /// Creates a new builder-style object to manufacture [`CloudRemovalConfigInput`](crate::types::CloudRemovalConfigInput).
    pub fn builder() -> crate::types::builders::CloudRemovalConfigInputBuilder {
        crate::types::builders::CloudRemovalConfigInputBuilder::default()
    }
}

/// A builder for [`CloudRemovalConfigInput`](crate::types::CloudRemovalConfigInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CloudRemovalConfigInputBuilder {
    pub(crate) algorithm_name: ::std::option::Option<crate::types::AlgorithmNameCloudRemoval>,
    pub(crate) interpolation_value: ::std::option::Option<::std::string::String>,
    pub(crate) target_bands: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl CloudRemovalConfigInputBuilder {
    /// <p>The name of the algorithm used for cloud removal.</p>
    pub fn algorithm_name(mut self, input: crate::types::AlgorithmNameCloudRemoval) -> Self {
        self.algorithm_name = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the algorithm used for cloud removal.</p>
    pub fn set_algorithm_name(mut self, input: ::std::option::Option<crate::types::AlgorithmNameCloudRemoval>) -> Self {
        self.algorithm_name = input;
        self
    }
    /// <p>The name of the algorithm used for cloud removal.</p>
    pub fn get_algorithm_name(&self) -> &::std::option::Option<crate::types::AlgorithmNameCloudRemoval> {
        &self.algorithm_name
    }
    /// <p>The interpolation value you provide for cloud removal.</p>
    pub fn interpolation_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.interpolation_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The interpolation value you provide for cloud removal.</p>
    pub fn set_interpolation_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.interpolation_value = input;
        self
    }
    /// <p>The interpolation value you provide for cloud removal.</p>
    pub fn get_interpolation_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.interpolation_value
    }
    /// Appends an item to `target_bands`.
    ///
    /// To override the contents of this collection use [`set_target_bands`](Self::set_target_bands).
    ///
    /// <p>TargetBands to be returned in the output of CloudRemoval operation.</p>
    pub fn target_bands(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.target_bands.unwrap_or_default();
        v.push(input.into());
        self.target_bands = ::std::option::Option::Some(v);
        self
    }
    /// <p>TargetBands to be returned in the output of CloudRemoval operation.</p>
    pub fn set_target_bands(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.target_bands = input;
        self
    }
    /// <p>TargetBands to be returned in the output of CloudRemoval operation.</p>
    pub fn get_target_bands(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.target_bands
    }
    /// Consumes the builder and constructs a [`CloudRemovalConfigInput`](crate::types::CloudRemovalConfigInput).
    pub fn build(self) -> crate::types::CloudRemovalConfigInput {
        crate::types::CloudRemovalConfigInput {
            algorithm_name: self.algorithm_name,
            interpolation_value: self.interpolation_value,
            target_bands: self.target_bands,
        }
    }
}
