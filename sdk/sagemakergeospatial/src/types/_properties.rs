// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Properties {
    /// <p></p>
    #[doc(hidden)]
    pub eo_cloud_cover: std::option::Option<f32>,
    /// <p></p>
    #[doc(hidden)]
    pub view_off_nadir: std::option::Option<f32>,
    /// <p></p>
    #[doc(hidden)]
    pub view_sun_azimuth: std::option::Option<f32>,
    /// <p></p>
    #[doc(hidden)]
    pub view_sun_elevation: std::option::Option<f32>,
    /// <p></p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub landsat_cloud_cover_land: std::option::Option<f32>,
}
impl Properties {
    /// <p></p>
    pub fn eo_cloud_cover(&self) -> std::option::Option<f32> {
        self.eo_cloud_cover
    }
    /// <p></p>
    pub fn view_off_nadir(&self) -> std::option::Option<f32> {
        self.view_off_nadir
    }
    /// <p></p>
    pub fn view_sun_azimuth(&self) -> std::option::Option<f32> {
        self.view_sun_azimuth
    }
    /// <p></p>
    pub fn view_sun_elevation(&self) -> std::option::Option<f32> {
        self.view_sun_elevation
    }
    /// <p></p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p></p>
    pub fn landsat_cloud_cover_land(&self) -> std::option::Option<f32> {
        self.landsat_cloud_cover_land
    }
}
impl Properties {
    /// Creates a new builder-style object to manufacture [`Properties`](crate::types::Properties).
    pub fn builder() -> crate::types::builders::PropertiesBuilder {
        crate::types::builders::PropertiesBuilder::default()
    }
}

/// A builder for [`Properties`](crate::types::Properties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PropertiesBuilder {
    pub(crate) eo_cloud_cover: std::option::Option<f32>,
    pub(crate) view_off_nadir: std::option::Option<f32>,
    pub(crate) view_sun_azimuth: std::option::Option<f32>,
    pub(crate) view_sun_elevation: std::option::Option<f32>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) landsat_cloud_cover_land: std::option::Option<f32>,
}
impl PropertiesBuilder {
    /// <p></p>
    pub fn eo_cloud_cover(mut self, input: f32) -> Self {
        self.eo_cloud_cover = Some(input);
        self
    }
    /// <p></p>
    pub fn set_eo_cloud_cover(mut self, input: std::option::Option<f32>) -> Self {
        self.eo_cloud_cover = input;
        self
    }
    /// <p></p>
    pub fn view_off_nadir(mut self, input: f32) -> Self {
        self.view_off_nadir = Some(input);
        self
    }
    /// <p></p>
    pub fn set_view_off_nadir(mut self, input: std::option::Option<f32>) -> Self {
        self.view_off_nadir = input;
        self
    }
    /// <p></p>
    pub fn view_sun_azimuth(mut self, input: f32) -> Self {
        self.view_sun_azimuth = Some(input);
        self
    }
    /// <p></p>
    pub fn set_view_sun_azimuth(mut self, input: std::option::Option<f32>) -> Self {
        self.view_sun_azimuth = input;
        self
    }
    /// <p></p>
    pub fn view_sun_elevation(mut self, input: f32) -> Self {
        self.view_sun_elevation = Some(input);
        self
    }
    /// <p></p>
    pub fn set_view_sun_elevation(mut self, input: std::option::Option<f32>) -> Self {
        self.view_sun_elevation = input;
        self
    }
    /// <p></p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p></p>
    pub fn landsat_cloud_cover_land(mut self, input: f32) -> Self {
        self.landsat_cloud_cover_land = Some(input);
        self
    }
    /// <p></p>
    pub fn set_landsat_cloud_cover_land(mut self, input: std::option::Option<f32>) -> Self {
        self.landsat_cloud_cover_land = input;
        self
    }
    /// Consumes the builder and constructs a [`Properties`](crate::types::Properties).
    pub fn build(self) -> crate::types::Properties {
        crate::types::Properties {
            eo_cloud_cover: self.eo_cloud_cover,
            view_off_nadir: self.view_off_nadir,
            view_sun_azimuth: self.view_sun_azimuth,
            view_sun_elevation: self.view_sun_elevation,
            platform: self.platform,
            landsat_cloud_cover_land: self.landsat_cloud_cover_land,
        }
    }
}
