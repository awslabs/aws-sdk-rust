// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single EarthObservationJob output band.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutputBand {
    /// <p>The name of the band.</p>
    #[doc(hidden)]
    pub band_name: std::option::Option<std::string::String>,
    /// <p>The datatype of the output band.</p>
    #[doc(hidden)]
    pub output_data_type: std::option::Option<crate::types::OutputType>,
}
impl OutputBand {
    /// <p>The name of the band.</p>
    pub fn band_name(&self) -> std::option::Option<&str> {
        self.band_name.as_deref()
    }
    /// <p>The datatype of the output band.</p>
    pub fn output_data_type(&self) -> std::option::Option<&crate::types::OutputType> {
        self.output_data_type.as_ref()
    }
}
impl OutputBand {
    /// Creates a new builder-style object to manufacture [`OutputBand`](crate::types::OutputBand).
    pub fn builder() -> crate::types::builders::OutputBandBuilder {
        crate::types::builders::OutputBandBuilder::default()
    }
}

/// A builder for [`OutputBand`](crate::types::OutputBand).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OutputBandBuilder {
    pub(crate) band_name: std::option::Option<std::string::String>,
    pub(crate) output_data_type: std::option::Option<crate::types::OutputType>,
}
impl OutputBandBuilder {
    /// <p>The name of the band.</p>
    pub fn band_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.band_name = Some(input.into());
        self
    }
    /// <p>The name of the band.</p>
    pub fn set_band_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.band_name = input;
        self
    }
    /// <p>The datatype of the output band.</p>
    pub fn output_data_type(mut self, input: crate::types::OutputType) -> Self {
        self.output_data_type = Some(input);
        self
    }
    /// <p>The datatype of the output band.</p>
    pub fn set_output_data_type(
        mut self,
        input: std::option::Option<crate::types::OutputType>,
    ) -> Self {
        self.output_data_type = input;
        self
    }
    /// Consumes the builder and constructs a [`OutputBand`](crate::types::OutputBand).
    pub fn build(self) -> crate::types::OutputBand {
        crate::types::OutputBand {
            band_name: self.band_name,
            output_data_type: self.output_data_type,
        }
    }
}
