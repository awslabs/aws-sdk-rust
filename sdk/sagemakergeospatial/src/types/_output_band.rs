// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single EarthObservationJob output band.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OutputBand {
    /// <p>The name of the band.</p>
    pub band_name: ::std::string::String,
    /// <p>The datatype of the output band.</p>
    pub output_data_type: crate::types::OutputType,
}
impl OutputBand {
    /// <p>The name of the band.</p>
    pub fn band_name(&self) -> &str {
        use std::ops::Deref;
        self.band_name.deref()
    }
    /// <p>The datatype of the output band.</p>
    pub fn output_data_type(&self) -> &crate::types::OutputType {
        &self.output_data_type
    }
}
impl OutputBand {
    /// Creates a new builder-style object to manufacture [`OutputBand`](crate::types::OutputBand).
    pub fn builder() -> crate::types::builders::OutputBandBuilder {
        crate::types::builders::OutputBandBuilder::default()
    }
}

/// A builder for [`OutputBand`](crate::types::OutputBand).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OutputBandBuilder {
    pub(crate) band_name: ::std::option::Option<::std::string::String>,
    pub(crate) output_data_type: ::std::option::Option<crate::types::OutputType>,
}
impl OutputBandBuilder {
    /// <p>The name of the band.</p>
    /// This field is required.
    pub fn band_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.band_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the band.</p>
    pub fn set_band_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.band_name = input;
        self
    }
    /// <p>The name of the band.</p>
    pub fn get_band_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.band_name
    }
    /// <p>The datatype of the output band.</p>
    /// This field is required.
    pub fn output_data_type(mut self, input: crate::types::OutputType) -> Self {
        self.output_data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The datatype of the output band.</p>
    pub fn set_output_data_type(mut self, input: ::std::option::Option<crate::types::OutputType>) -> Self {
        self.output_data_type = input;
        self
    }
    /// <p>The datatype of the output band.</p>
    pub fn get_output_data_type(&self) -> &::std::option::Option<crate::types::OutputType> {
        &self.output_data_type
    }
    /// Consumes the builder and constructs a [`OutputBand`](crate::types::OutputBand).
    /// This method will fail if any of the following fields are not set:
    /// - [`band_name`](crate::types::builders::OutputBandBuilder::band_name)
    /// - [`output_data_type`](crate::types::builders::OutputBandBuilder::output_data_type)
    pub fn build(self) -> ::std::result::Result<crate::types::OutputBand, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OutputBand {
            band_name: self.band_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "band_name",
                    "band_name was not specified but it is required when building OutputBand",
                )
            })?,
            output_data_type: self.output_data_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "output_data_type",
                    "output_data_type was not specified but it is required when building OutputBand",
                )
            })?,
        })
    }
}
