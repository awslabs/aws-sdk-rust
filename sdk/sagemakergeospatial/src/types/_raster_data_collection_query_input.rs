// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The input structure for Raster Data Collection Query containing the Area of Interest, TimeRange Filters, and Property Filters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RasterDataCollectionQueryInput {
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub raster_data_collection_arn: ::std::string::String,
    /// <p>The TimeRange Filter used in the RasterDataCollection Query.</p>
    pub time_range_filter: ::std::option::Option<crate::types::TimeRangeFilterInput>,
    /// <p>The area of interest being queried for the raster data collection.</p>
    pub area_of_interest: ::std::option::Option<crate::types::AreaOfInterest>,
    /// <p>The list of Property filters used in the Raster Data Collection Query.</p>
    pub property_filters: ::std::option::Option<crate::types::PropertyFilters>,
}
impl RasterDataCollectionQueryInput {
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn raster_data_collection_arn(&self) -> &str {
        use std::ops::Deref;
        self.raster_data_collection_arn.deref()
    }
    /// <p>The TimeRange Filter used in the RasterDataCollection Query.</p>
    pub fn time_range_filter(&self) -> ::std::option::Option<&crate::types::TimeRangeFilterInput> {
        self.time_range_filter.as_ref()
    }
    /// <p>The area of interest being queried for the raster data collection.</p>
    pub fn area_of_interest(&self) -> ::std::option::Option<&crate::types::AreaOfInterest> {
        self.area_of_interest.as_ref()
    }
    /// <p>The list of Property filters used in the Raster Data Collection Query.</p>
    pub fn property_filters(&self) -> ::std::option::Option<&crate::types::PropertyFilters> {
        self.property_filters.as_ref()
    }
}
impl ::std::fmt::Debug for RasterDataCollectionQueryInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RasterDataCollectionQueryInput");
        formatter.field("raster_data_collection_arn", &self.raster_data_collection_arn);
        formatter.field("time_range_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("area_of_interest", &self.area_of_interest);
        formatter.field("property_filters", &self.property_filters);
        formatter.finish()
    }
}
impl RasterDataCollectionQueryInput {
    /// Creates a new builder-style object to manufacture [`RasterDataCollectionQueryInput`](crate::types::RasterDataCollectionQueryInput).
    pub fn builder() -> crate::types::builders::RasterDataCollectionQueryInputBuilder {
        crate::types::builders::RasterDataCollectionQueryInputBuilder::default()
    }
}

/// A builder for [`RasterDataCollectionQueryInput`](crate::types::RasterDataCollectionQueryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RasterDataCollectionQueryInputBuilder {
    pub(crate) raster_data_collection_arn: ::std::option::Option<::std::string::String>,
    pub(crate) time_range_filter: ::std::option::Option<crate::types::TimeRangeFilterInput>,
    pub(crate) area_of_interest: ::std::option::Option<crate::types::AreaOfInterest>,
    pub(crate) property_filters: ::std::option::Option<crate::types::PropertyFilters>,
}
impl RasterDataCollectionQueryInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    /// This field is required.
    pub fn raster_data_collection_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.raster_data_collection_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn set_raster_data_collection_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.raster_data_collection_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn get_raster_data_collection_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.raster_data_collection_arn
    }
    /// <p>The TimeRange Filter used in the RasterDataCollection Query.</p>
    /// This field is required.
    pub fn time_range_filter(mut self, input: crate::types::TimeRangeFilterInput) -> Self {
        self.time_range_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The TimeRange Filter used in the RasterDataCollection Query.</p>
    pub fn set_time_range_filter(mut self, input: ::std::option::Option<crate::types::TimeRangeFilterInput>) -> Self {
        self.time_range_filter = input;
        self
    }
    /// <p>The TimeRange Filter used in the RasterDataCollection Query.</p>
    pub fn get_time_range_filter(&self) -> &::std::option::Option<crate::types::TimeRangeFilterInput> {
        &self.time_range_filter
    }
    /// <p>The area of interest being queried for the raster data collection.</p>
    pub fn area_of_interest(mut self, input: crate::types::AreaOfInterest) -> Self {
        self.area_of_interest = ::std::option::Option::Some(input);
        self
    }
    /// <p>The area of interest being queried for the raster data collection.</p>
    pub fn set_area_of_interest(mut self, input: ::std::option::Option<crate::types::AreaOfInterest>) -> Self {
        self.area_of_interest = input;
        self
    }
    /// <p>The area of interest being queried for the raster data collection.</p>
    pub fn get_area_of_interest(&self) -> &::std::option::Option<crate::types::AreaOfInterest> {
        &self.area_of_interest
    }
    /// <p>The list of Property filters used in the Raster Data Collection Query.</p>
    pub fn property_filters(mut self, input: crate::types::PropertyFilters) -> Self {
        self.property_filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The list of Property filters used in the Raster Data Collection Query.</p>
    pub fn set_property_filters(mut self, input: ::std::option::Option<crate::types::PropertyFilters>) -> Self {
        self.property_filters = input;
        self
    }
    /// <p>The list of Property filters used in the Raster Data Collection Query.</p>
    pub fn get_property_filters(&self) -> &::std::option::Option<crate::types::PropertyFilters> {
        &self.property_filters
    }
    /// Consumes the builder and constructs a [`RasterDataCollectionQueryInput`](crate::types::RasterDataCollectionQueryInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`raster_data_collection_arn`](crate::types::builders::RasterDataCollectionQueryInputBuilder::raster_data_collection_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::RasterDataCollectionQueryInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RasterDataCollectionQueryInput {
            raster_data_collection_arn: self.raster_data_collection_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "raster_data_collection_arn",
                    "raster_data_collection_arn was not specified but it is required when building RasterDataCollectionQueryInput",
                )
            })?,
            time_range_filter: self.time_range_filter,
            area_of_interest: self.area_of_interest,
            property_filters: self.property_filters,
        })
    }
}
impl ::std::fmt::Debug for RasterDataCollectionQueryInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RasterDataCollectionQueryInputBuilder");
        formatter.field("raster_data_collection_arn", &self.raster_data_collection_arn);
        formatter.field("time_range_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("area_of_interest", &self.area_of_interest);
        formatter.field("property_filters", &self.property_filters);
        formatter.finish()
    }
}
