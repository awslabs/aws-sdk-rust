// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Input configuration information.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InputConfigInput {
    /// <p>The Amazon Resource Name (ARN) of the previous Earth Observation job.</p>
    #[doc(hidden)]
    pub previous_earth_observation_job_arn: std::option::Option<std::string::String>,
    /// <p>The location of the input data.&gt;</p>
    #[doc(hidden)]
    pub data_source_config: std::option::Option<crate::types::EojDataSourceConfigInput>,
    /// <p></p>
    #[doc(hidden)]
    pub raster_data_collection_query:
        std::option::Option<crate::types::RasterDataCollectionQueryInput>,
}
impl InputConfigInput {
    /// <p>The Amazon Resource Name (ARN) of the previous Earth Observation job.</p>
    pub fn previous_earth_observation_job_arn(&self) -> std::option::Option<&str> {
        self.previous_earth_observation_job_arn.as_deref()
    }
    /// <p>The location of the input data.&gt;</p>
    pub fn data_source_config(
        &self,
    ) -> std::option::Option<&crate::types::EojDataSourceConfigInput> {
        self.data_source_config.as_ref()
    }
    /// <p></p>
    pub fn raster_data_collection_query(
        &self,
    ) -> std::option::Option<&crate::types::RasterDataCollectionQueryInput> {
        self.raster_data_collection_query.as_ref()
    }
}
impl InputConfigInput {
    /// Creates a new builder-style object to manufacture [`InputConfigInput`](crate::types::InputConfigInput).
    pub fn builder() -> crate::types::builders::InputConfigInputBuilder {
        crate::types::builders::InputConfigInputBuilder::default()
    }
}

/// A builder for [`InputConfigInput`](crate::types::InputConfigInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InputConfigInputBuilder {
    pub(crate) previous_earth_observation_job_arn: std::option::Option<std::string::String>,
    pub(crate) data_source_config: std::option::Option<crate::types::EojDataSourceConfigInput>,
    pub(crate) raster_data_collection_query:
        std::option::Option<crate::types::RasterDataCollectionQueryInput>,
}
impl InputConfigInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the previous Earth Observation job.</p>
    pub fn previous_earth_observation_job_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.previous_earth_observation_job_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the previous Earth Observation job.</p>
    pub fn set_previous_earth_observation_job_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.previous_earth_observation_job_arn = input;
        self
    }
    /// <p>The location of the input data.&gt;</p>
    pub fn data_source_config(mut self, input: crate::types::EojDataSourceConfigInput) -> Self {
        self.data_source_config = Some(input);
        self
    }
    /// <p>The location of the input data.&gt;</p>
    pub fn set_data_source_config(
        mut self,
        input: std::option::Option<crate::types::EojDataSourceConfigInput>,
    ) -> Self {
        self.data_source_config = input;
        self
    }
    /// <p></p>
    pub fn raster_data_collection_query(
        mut self,
        input: crate::types::RasterDataCollectionQueryInput,
    ) -> Self {
        self.raster_data_collection_query = Some(input);
        self
    }
    /// <p></p>
    pub fn set_raster_data_collection_query(
        mut self,
        input: std::option::Option<crate::types::RasterDataCollectionQueryInput>,
    ) -> Self {
        self.raster_data_collection_query = input;
        self
    }
    /// Consumes the builder and constructs a [`InputConfigInput`](crate::types::InputConfigInput).
    pub fn build(self) -> crate::types::InputConfigInput {
        crate::types::InputConfigInput {
            previous_earth_observation_job_arn: self.previous_earth_observation_job_arn,
            data_source_config: self.data_source_config,
            raster_data_collection_query: self.raster_data_collection_query,
        }
    }
}
