// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Operation {
    /// <p>The name of the operation.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub equation: std::option::Option<std::string::String>,
    /// <p>The type of the operation.</p>
    #[doc(hidden)]
    pub output_type: std::option::Option<crate::types::OutputType>,
}
impl Operation {
    /// <p>The name of the operation.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p></p>
    pub fn equation(&self) -> std::option::Option<&str> {
        self.equation.as_deref()
    }
    /// <p>The type of the operation.</p>
    pub fn output_type(&self) -> std::option::Option<&crate::types::OutputType> {
        self.output_type.as_ref()
    }
}
impl Operation {
    /// Creates a new builder-style object to manufacture [`Operation`](crate::types::Operation).
    pub fn builder() -> crate::types::builders::OperationBuilder {
        crate::types::builders::OperationBuilder::default()
    }
}

/// A builder for [`Operation`](crate::types::Operation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OperationBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) equation: std::option::Option<std::string::String>,
    pub(crate) output_type: std::option::Option<crate::types::OutputType>,
}
impl OperationBuilder {
    /// <p>The name of the operation.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the operation.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p></p>
    pub fn equation(mut self, input: impl Into<std::string::String>) -> Self {
        self.equation = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_equation(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.equation = input;
        self
    }
    /// <p>The type of the operation.</p>
    pub fn output_type(mut self, input: crate::types::OutputType) -> Self {
        self.output_type = Some(input);
        self
    }
    /// <p>The type of the operation.</p>
    pub fn set_output_type(mut self, input: std::option::Option<crate::types::OutputType>) -> Self {
        self.output_type = input;
        self
    }
    /// Consumes the builder and constructs a [`Operation`](crate::types::Operation).
    pub fn build(self) -> crate::types::Operation {
        crate::types::Operation {
            name: self.name,
            equation: self.equation,
            output_type: self.output_type,
        }
    }
}
