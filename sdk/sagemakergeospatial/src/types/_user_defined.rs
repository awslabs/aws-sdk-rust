// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output resolution (in target georeferenced units) of the result of the operation</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UserDefined {
    /// <p>The value for output resolution of the result.</p>
    pub value: f32,
    /// <p>The units for output resolution of the result.</p>
    pub unit: crate::types::Unit,
}
impl UserDefined {
    /// <p>The value for output resolution of the result.</p>
    pub fn value(&self) -> f32 {
        self.value
    }
    /// <p>The units for output resolution of the result.</p>
    pub fn unit(&self) -> &crate::types::Unit {
        &self.unit
    }
}
impl UserDefined {
    /// Creates a new builder-style object to manufacture [`UserDefined`](crate::types::UserDefined).
    pub fn builder() -> crate::types::builders::UserDefinedBuilder {
        crate::types::builders::UserDefinedBuilder::default()
    }
}

/// A builder for [`UserDefined`](crate::types::UserDefined).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UserDefinedBuilder {
    pub(crate) value: ::std::option::Option<f32>,
    pub(crate) unit: ::std::option::Option<crate::types::Unit>,
}
impl UserDefinedBuilder {
    /// <p>The value for output resolution of the result.</p>
    /// This field is required.
    pub fn value(mut self, input: f32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The value for output resolution of the result.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f32>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value for output resolution of the result.</p>
    pub fn get_value(&self) -> &::std::option::Option<f32> {
        &self.value
    }
    /// <p>The units for output resolution of the result.</p>
    /// This field is required.
    pub fn unit(mut self, input: crate::types::Unit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The units for output resolution of the result.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::Unit>) -> Self {
        self.unit = input;
        self
    }
    /// <p>The units for output resolution of the result.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::Unit> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`UserDefined`](crate::types::UserDefined).
    /// This method will fail if any of the following fields are not set:
    /// - [`value`](crate::types::builders::UserDefinedBuilder::value)
    /// - [`unit`](crate::types::builders::UserDefinedBuilder::unit)
    pub fn build(self) -> ::std::result::Result<crate::types::UserDefined, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UserDefined {
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building UserDefined",
                )
            })?,
            unit: self.unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unit",
                    "unit was not specified but it is required when building UserDefined",
                )
            })?,
        })
    }
}
