// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This is a RasterDataCollectionQueryInput containing AreaOfInterest, Time Range filter and Property filters.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RasterDataCollectionQueryWithBandFilterInput {
    /// <p>The TimeRange Filter used in the search query.</p>
    pub time_range_filter: ::std::option::Option<crate::types::TimeRangeFilterInput>,
    /// <p>The Area of interest to be used in the search query.</p>
    pub area_of_interest: ::std::option::Option<crate::types::AreaOfInterest>,
    /// <p>The Property Filters used in the search query.</p>
    pub property_filters: ::std::option::Option<crate::types::PropertyFilters>,
    /// <p>The list of Bands to be displayed in the result for each item.</p>
    pub band_filter: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RasterDataCollectionQueryWithBandFilterInput {
    /// <p>The TimeRange Filter used in the search query.</p>
    pub fn time_range_filter(&self) -> ::std::option::Option<&crate::types::TimeRangeFilterInput> {
        self.time_range_filter.as_ref()
    }
    /// <p>The Area of interest to be used in the search query.</p>
    pub fn area_of_interest(&self) -> ::std::option::Option<&crate::types::AreaOfInterest> {
        self.area_of_interest.as_ref()
    }
    /// <p>The Property Filters used in the search query.</p>
    pub fn property_filters(&self) -> ::std::option::Option<&crate::types::PropertyFilters> {
        self.property_filters.as_ref()
    }
    /// <p>The list of Bands to be displayed in the result for each item.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.band_filter.is_none()`.
    pub fn band_filter(&self) -> &[::std::string::String] {
        self.band_filter.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for RasterDataCollectionQueryWithBandFilterInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RasterDataCollectionQueryWithBandFilterInput");
        formatter.field("time_range_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("area_of_interest", &self.area_of_interest);
        formatter.field("property_filters", &self.property_filters);
        formatter.field("band_filter", &self.band_filter);
        formatter.finish()
    }
}
impl RasterDataCollectionQueryWithBandFilterInput {
    /// Creates a new builder-style object to manufacture [`RasterDataCollectionQueryWithBandFilterInput`](crate::types::RasterDataCollectionQueryWithBandFilterInput).
    pub fn builder() -> crate::types::builders::RasterDataCollectionQueryWithBandFilterInputBuilder {
        crate::types::builders::RasterDataCollectionQueryWithBandFilterInputBuilder::default()
    }
}

/// A builder for [`RasterDataCollectionQueryWithBandFilterInput`](crate::types::RasterDataCollectionQueryWithBandFilterInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RasterDataCollectionQueryWithBandFilterInputBuilder {
    pub(crate) time_range_filter: ::std::option::Option<crate::types::TimeRangeFilterInput>,
    pub(crate) area_of_interest: ::std::option::Option<crate::types::AreaOfInterest>,
    pub(crate) property_filters: ::std::option::Option<crate::types::PropertyFilters>,
    pub(crate) band_filter: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RasterDataCollectionQueryWithBandFilterInputBuilder {
    /// <p>The TimeRange Filter used in the search query.</p>
    /// This field is required.
    pub fn time_range_filter(mut self, input: crate::types::TimeRangeFilterInput) -> Self {
        self.time_range_filter = ::std::option::Option::Some(input);
        self
    }
    /// <p>The TimeRange Filter used in the search query.</p>
    pub fn set_time_range_filter(mut self, input: ::std::option::Option<crate::types::TimeRangeFilterInput>) -> Self {
        self.time_range_filter = input;
        self
    }
    /// <p>The TimeRange Filter used in the search query.</p>
    pub fn get_time_range_filter(&self) -> &::std::option::Option<crate::types::TimeRangeFilterInput> {
        &self.time_range_filter
    }
    /// <p>The Area of interest to be used in the search query.</p>
    pub fn area_of_interest(mut self, input: crate::types::AreaOfInterest) -> Self {
        self.area_of_interest = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Area of interest to be used in the search query.</p>
    pub fn set_area_of_interest(mut self, input: ::std::option::Option<crate::types::AreaOfInterest>) -> Self {
        self.area_of_interest = input;
        self
    }
    /// <p>The Area of interest to be used in the search query.</p>
    pub fn get_area_of_interest(&self) -> &::std::option::Option<crate::types::AreaOfInterest> {
        &self.area_of_interest
    }
    /// <p>The Property Filters used in the search query.</p>
    pub fn property_filters(mut self, input: crate::types::PropertyFilters) -> Self {
        self.property_filters = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Property Filters used in the search query.</p>
    pub fn set_property_filters(mut self, input: ::std::option::Option<crate::types::PropertyFilters>) -> Self {
        self.property_filters = input;
        self
    }
    /// <p>The Property Filters used in the search query.</p>
    pub fn get_property_filters(&self) -> &::std::option::Option<crate::types::PropertyFilters> {
        &self.property_filters
    }
    /// Appends an item to `band_filter`.
    ///
    /// To override the contents of this collection use [`set_band_filter`](Self::set_band_filter).
    ///
    /// <p>The list of Bands to be displayed in the result for each item.</p>
    pub fn band_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.band_filter.unwrap_or_default();
        v.push(input.into());
        self.band_filter = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of Bands to be displayed in the result for each item.</p>
    pub fn set_band_filter(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.band_filter = input;
        self
    }
    /// <p>The list of Bands to be displayed in the result for each item.</p>
    pub fn get_band_filter(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.band_filter
    }
    /// Consumes the builder and constructs a [`RasterDataCollectionQueryWithBandFilterInput`](crate::types::RasterDataCollectionQueryWithBandFilterInput).
    pub fn build(self) -> crate::types::RasterDataCollectionQueryWithBandFilterInput {
        crate::types::RasterDataCollectionQueryWithBandFilterInput {
            time_range_filter: self.time_range_filter,
            area_of_interest: self.area_of_interest,
            property_filters: self.property_filters,
            band_filter: self.band_filter,
        }
    }
}
impl ::std::fmt::Debug for RasterDataCollectionQueryWithBandFilterInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RasterDataCollectionQueryWithBandFilterInputBuilder");
        formatter.field("time_range_filter", &"*** Sensitive Data Redacted ***");
        formatter.field("area_of_interest", &self.area_of_interest);
        formatter.field("property_filters", &self.property_filters);
        formatter.field("band_filter", &self.band_filter);
        formatter.finish()
    }
}
