// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing information about the output file.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListEarthObservationJobOutputConfig {
    /// <p>The Amazon Resource Name (ARN) of the list of the Earth Observation jobs.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The names of the Earth Observation jobs in the list.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The creation time.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The duration of the session, in seconds.</p>
    #[doc(hidden)]
    pub duration_in_seconds: std::option::Option<i32>,
    /// <p>The status of the list of the Earth Observation jobs.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::EarthObservationJobStatus>,
    /// <p></p>
    #[doc(hidden)]
    pub operation_type: std::option::Option<std::string::String>,
    /// <p>Each tag consists of a key and a value.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListEarthObservationJobOutputConfig {
    /// <p>The Amazon Resource Name (ARN) of the list of the Earth Observation jobs.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The names of the Earth Observation jobs in the list.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The duration of the session, in seconds.</p>
    pub fn duration_in_seconds(&self) -> std::option::Option<i32> {
        self.duration_in_seconds
    }
    /// <p>The status of the list of the Earth Observation jobs.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::EarthObservationJobStatus> {
        self.status.as_ref()
    }
    /// <p></p>
    pub fn operation_type(&self) -> std::option::Option<&str> {
        self.operation_type.as_deref()
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl ListEarthObservationJobOutputConfig {
    /// Creates a new builder-style object to manufacture [`ListEarthObservationJobOutputConfig`](crate::types::ListEarthObservationJobOutputConfig).
    pub fn builder() -> crate::types::builders::ListEarthObservationJobOutputConfigBuilder {
        crate::types::builders::ListEarthObservationJobOutputConfigBuilder::default()
    }
}

/// A builder for [`ListEarthObservationJobOutputConfig`](crate::types::ListEarthObservationJobOutputConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListEarthObservationJobOutputConfigBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) duration_in_seconds: std::option::Option<i32>,
    pub(crate) status: std::option::Option<crate::types::EarthObservationJobStatus>,
    pub(crate) operation_type: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ListEarthObservationJobOutputConfigBuilder {
    /// <p>The Amazon Resource Name (ARN) of the list of the Earth Observation jobs.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the list of the Earth Observation jobs.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The names of the Earth Observation jobs in the list.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The names of the Earth Observation jobs in the list.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The duration of the session, in seconds.</p>
    pub fn duration_in_seconds(mut self, input: i32) -> Self {
        self.duration_in_seconds = Some(input);
        self
    }
    /// <p>The duration of the session, in seconds.</p>
    pub fn set_duration_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.duration_in_seconds = input;
        self
    }
    /// <p>The status of the list of the Earth Observation jobs.</p>
    pub fn status(mut self, input: crate::types::EarthObservationJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the list of the Earth Observation jobs.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::EarthObservationJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p></p>
    pub fn operation_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.operation_type = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_operation_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.operation_type = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`ListEarthObservationJobOutputConfig`](crate::types::ListEarthObservationJobOutputConfig).
    pub fn build(self) -> crate::types::ListEarthObservationJobOutputConfig {
        crate::types::ListEarthObservationJobOutputConfig {
            arn: self.arn,
            name: self.name,
            creation_time: self.creation_time,
            duration_in_seconds: self.duration_in_seconds,
            status: self.status,
            operation_type: self.operation_type,
            tags: self.tags,
        }
    }
}
