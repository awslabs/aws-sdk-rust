// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartVectorEnrichmentJobOutput {
    /// <p>The name of the Vector Enrichment job.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    pub arn: ::std::string::String,
    /// <p>The type of the Vector Enrichment job.</p>
    pub r#type: crate::types::VectorEnrichmentJobType,
    /// <p>The creation time.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    pub duration_in_seconds: i32,
    /// <p>The status of the Vector Enrichment job being started.</p>
    pub status: crate::types::VectorEnrichmentJobStatus,
    /// <p>The Key Management Service key ID for server-side encryption.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>Input configuration information for starting the Vector Enrichment job.</p>
    pub input_config: ::std::option::Option<crate::types::VectorEnrichmentJobInputConfig>,
    /// <p>An object containing information about the job configuration.</p>
    pub job_config: ::std::option::Option<crate::types::VectorEnrichmentJobConfig>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub execution_role_arn: ::std::string::String,
    /// <p>Each tag consists of a key and a value.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl StartVectorEnrichmentJobOutput {
    /// <p>The name of the Vector Enrichment job.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The type of the Vector Enrichment job.</p>
    pub fn r#type(&self) -> &crate::types::VectorEnrichmentJobType {
        &self.r#type
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    pub fn duration_in_seconds(&self) -> i32 {
        self.duration_in_seconds
    }
    /// <p>The status of the Vector Enrichment job being started.</p>
    pub fn status(&self) -> &crate::types::VectorEnrichmentJobStatus {
        &self.status
    }
    /// <p>The Key Management Service key ID for server-side encryption.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Input configuration information for starting the Vector Enrichment job.</p>
    pub fn input_config(&self) -> ::std::option::Option<&crate::types::VectorEnrichmentJobInputConfig> {
        self.input_config.as_ref()
    }
    /// <p>An object containing information about the job configuration.</p>
    pub fn job_config(&self) -> ::std::option::Option<&crate::types::VectorEnrichmentJobConfig> {
        self.job_config.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub fn execution_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.execution_role_arn.deref()
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for StartVectorEnrichmentJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl StartVectorEnrichmentJobOutput {
    /// Creates a new builder-style object to manufacture [`StartVectorEnrichmentJobOutput`](crate::operation::start_vector_enrichment_job::StartVectorEnrichmentJobOutput).
    pub fn builder() -> crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder {
        crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder::default()
    }
}

/// A builder for [`StartVectorEnrichmentJobOutput`](crate::operation::start_vector_enrichment_job::StartVectorEnrichmentJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartVectorEnrichmentJobOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::VectorEnrichmentJobType>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) duration_in_seconds: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::VectorEnrichmentJobStatus>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) input_config: ::std::option::Option<crate::types::VectorEnrichmentJobInputConfig>,
    pub(crate) job_config: ::std::option::Option<crate::types::VectorEnrichmentJobConfig>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl StartVectorEnrichmentJobOutputBuilder {
    /// <p>The name of the Vector Enrichment job.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Vector Enrichment job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the Vector Enrichment job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The type of the Vector Enrichment job.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::VectorEnrichmentJobType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the Vector Enrichment job.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::VectorEnrichmentJobType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the Vector Enrichment job.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::VectorEnrichmentJobType> {
        &self.r#type
    }
    /// <p>The creation time.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    /// This field is required.
    pub fn duration_in_seconds(mut self, input: i32) -> Self {
        self.duration_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    pub fn set_duration_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.duration_in_seconds = input;
        self
    }
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    pub fn get_duration_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.duration_in_seconds
    }
    /// <p>The status of the Vector Enrichment job being started.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::VectorEnrichmentJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Vector Enrichment job being started.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::VectorEnrichmentJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Vector Enrichment job being started.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::VectorEnrichmentJobStatus> {
        &self.status
    }
    /// <p>The Key Management Service key ID for server-side encryption.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Key Management Service key ID for server-side encryption.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The Key Management Service key ID for server-side encryption.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// <p>Input configuration information for starting the Vector Enrichment job.</p>
    /// This field is required.
    pub fn input_config(mut self, input: crate::types::VectorEnrichmentJobInputConfig) -> Self {
        self.input_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Input configuration information for starting the Vector Enrichment job.</p>
    pub fn set_input_config(mut self, input: ::std::option::Option<crate::types::VectorEnrichmentJobInputConfig>) -> Self {
        self.input_config = input;
        self
    }
    /// <p>Input configuration information for starting the Vector Enrichment job.</p>
    pub fn get_input_config(&self) -> &::std::option::Option<crate::types::VectorEnrichmentJobInputConfig> {
        &self.input_config
    }
    /// <p>An object containing information about the job configuration.</p>
    /// This field is required.
    pub fn job_config(mut self, input: crate::types::VectorEnrichmentJobConfig) -> Self {
        self.job_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object containing information about the job configuration.</p>
    pub fn set_job_config(mut self, input: ::std::option::Option<crate::types::VectorEnrichmentJobConfig>) -> Self {
        self.job_config = input;
        self
    }
    /// <p>An object containing information about the job configuration.</p>
    pub fn get_job_config(&self) -> &::std::option::Option<crate::types::VectorEnrichmentJobConfig> {
        &self.job_config
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    /// This field is required.
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`StartVectorEnrichmentJobOutput`](crate::operation::start_vector_enrichment_job::StartVectorEnrichmentJobOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder::name)
    /// - [`arn`](crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder::arn)
    /// - [`r#type`](crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder::r#type)
    /// - [`creation_time`](crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder::creation_time)
    /// - [`duration_in_seconds`](crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder::duration_in_seconds)
    /// - [`status`](crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder::status)
    /// - [`execution_role_arn`](crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder::execution_role_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::start_vector_enrichment_job::StartVectorEnrichmentJobOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::start_vector_enrichment_job::StartVectorEnrichmentJobOutput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building StartVectorEnrichmentJobOutput",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building StartVectorEnrichmentJobOutput",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building StartVectorEnrichmentJobOutput",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building StartVectorEnrichmentJobOutput",
                )
            })?,
            duration_in_seconds: self.duration_in_seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "duration_in_seconds",
                    "duration_in_seconds was not specified but it is required when building StartVectorEnrichmentJobOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building StartVectorEnrichmentJobOutput",
                )
            })?,
            kms_key_id: self.kms_key_id,
            input_config: self.input_config,
            job_config: self.job_config,
            execution_role_arn: self.execution_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "execution_role_arn",
                    "execution_role_arn was not specified but it is required when building StartVectorEnrichmentJobOutput",
                )
            })?,
            tags: self.tags,
            _request_id: self._request_id,
        })
    }
}
