// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTileInput {
    /// <p>The x coordinate of the tile input.</p>
    pub x: ::std::option::Option<i32>,
    /// <p>The y coordinate of the tile input.</p>
    pub y: ::std::option::Option<i32>,
    /// <p>The z coordinate of the tile input.</p>
    pub z: ::std::option::Option<i32>,
    /// <p>The particular assets or bands to tile.</p>
    pub image_assets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.</p>
    pub target: ::std::option::Option<crate::types::TargetOptions>,
    /// <p>The Amazon Resource Name (ARN) of the tile operation.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>Determines whether or not to return a valid data mask.</p>
    pub image_mask: ::std::option::Option<bool>,
    /// <p>The data format of the output tile. The formats include .npy, .png and .jpg.</p>
    pub output_format: ::std::option::Option<::std::string::String>,
    /// <p>Time range filter applied to imagery to find the images to tile.</p>
    pub time_range_filter: ::std::option::Option<::std::string::String>,
    /// <p>Property filters for the imagery to tile.</p>
    pub property_filters: ::std::option::Option<::std::string::String>,
    /// <p>The output data type of the tile operation.</p>
    pub output_data_type: ::std::option::Option<crate::types::OutputType>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specify.</p>
    pub execution_role_arn: ::std::option::Option<::std::string::String>,
}
impl GetTileInput {
    /// <p>The x coordinate of the tile input.</p>
    pub fn x(&self) -> ::std::option::Option<i32> {
        self.x
    }
    /// <p>The y coordinate of the tile input.</p>
    pub fn y(&self) -> ::std::option::Option<i32> {
        self.y
    }
    /// <p>The z coordinate of the tile input.</p>
    pub fn z(&self) -> ::std::option::Option<i32> {
        self.z
    }
    /// <p>The particular assets or bands to tile.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_assets.is_none()`.
    pub fn image_assets(&self) -> &[::std::string::String] {
        self.image_assets.as_deref().unwrap_or_default()
    }
    /// <p>Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.</p>
    pub fn target(&self) -> ::std::option::Option<&crate::types::TargetOptions> {
        self.target.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the tile operation.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>Determines whether or not to return a valid data mask.</p>
    pub fn image_mask(&self) -> ::std::option::Option<bool> {
        self.image_mask
    }
    /// <p>The data format of the output tile. The formats include .npy, .png and .jpg.</p>
    pub fn output_format(&self) -> ::std::option::Option<&str> {
        self.output_format.as_deref()
    }
    /// <p>Time range filter applied to imagery to find the images to tile.</p>
    pub fn time_range_filter(&self) -> ::std::option::Option<&str> {
        self.time_range_filter.as_deref()
    }
    /// <p>Property filters for the imagery to tile.</p>
    pub fn property_filters(&self) -> ::std::option::Option<&str> {
        self.property_filters.as_deref()
    }
    /// <p>The output data type of the tile operation.</p>
    pub fn output_data_type(&self) -> ::std::option::Option<&crate::types::OutputType> {
        self.output_data_type.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specify.</p>
    pub fn execution_role_arn(&self) -> ::std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
}
impl GetTileInput {
    /// Creates a new builder-style object to manufacture [`GetTileInput`](crate::operation::get_tile::GetTileInput).
    pub fn builder() -> crate::operation::get_tile::builders::GetTileInputBuilder {
        crate::operation::get_tile::builders::GetTileInputBuilder::default()
    }
}

/// A builder for [`GetTileInput`](crate::operation::get_tile::GetTileInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTileInputBuilder {
    pub(crate) x: ::std::option::Option<i32>,
    pub(crate) y: ::std::option::Option<i32>,
    pub(crate) z: ::std::option::Option<i32>,
    pub(crate) image_assets: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) target: ::std::option::Option<crate::types::TargetOptions>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) image_mask: ::std::option::Option<bool>,
    pub(crate) output_format: ::std::option::Option<::std::string::String>,
    pub(crate) time_range_filter: ::std::option::Option<::std::string::String>,
    pub(crate) property_filters: ::std::option::Option<::std::string::String>,
    pub(crate) output_data_type: ::std::option::Option<crate::types::OutputType>,
    pub(crate) execution_role_arn: ::std::option::Option<::std::string::String>,
}
impl GetTileInputBuilder {
    /// <p>The x coordinate of the tile input.</p>
    /// This field is required.
    pub fn x(mut self, input: i32) -> Self {
        self.x = ::std::option::Option::Some(input);
        self
    }
    /// <p>The x coordinate of the tile input.</p>
    pub fn set_x(mut self, input: ::std::option::Option<i32>) -> Self {
        self.x = input;
        self
    }
    /// <p>The x coordinate of the tile input.</p>
    pub fn get_x(&self) -> &::std::option::Option<i32> {
        &self.x
    }
    /// <p>The y coordinate of the tile input.</p>
    /// This field is required.
    pub fn y(mut self, input: i32) -> Self {
        self.y = ::std::option::Option::Some(input);
        self
    }
    /// <p>The y coordinate of the tile input.</p>
    pub fn set_y(mut self, input: ::std::option::Option<i32>) -> Self {
        self.y = input;
        self
    }
    /// <p>The y coordinate of the tile input.</p>
    pub fn get_y(&self) -> &::std::option::Option<i32> {
        &self.y
    }
    /// <p>The z coordinate of the tile input.</p>
    /// This field is required.
    pub fn z(mut self, input: i32) -> Self {
        self.z = ::std::option::Option::Some(input);
        self
    }
    /// <p>The z coordinate of the tile input.</p>
    pub fn set_z(mut self, input: ::std::option::Option<i32>) -> Self {
        self.z = input;
        self
    }
    /// <p>The z coordinate of the tile input.</p>
    pub fn get_z(&self) -> &::std::option::Option<i32> {
        &self.z
    }
    /// Appends an item to `image_assets`.
    ///
    /// To override the contents of this collection use [`set_image_assets`](Self::set_image_assets).
    ///
    /// <p>The particular assets or bands to tile.</p>
    pub fn image_assets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.image_assets.unwrap_or_default();
        v.push(input.into());
        self.image_assets = ::std::option::Option::Some(v);
        self
    }
    /// <p>The particular assets or bands to tile.</p>
    pub fn set_image_assets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.image_assets = input;
        self
    }
    /// <p>The particular assets or bands to tile.</p>
    pub fn get_image_assets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.image_assets
    }
    /// <p>Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.</p>
    /// This field is required.
    pub fn target(mut self, input: crate::types::TargetOptions) -> Self {
        self.target = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::TargetOptions>) -> Self {
        self.target = input;
        self
    }
    /// <p>Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::TargetOptions> {
        &self.target
    }
    /// <p>The Amazon Resource Name (ARN) of the tile operation.</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tile operation.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tile operation.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>Determines whether or not to return a valid data mask.</p>
    pub fn image_mask(mut self, input: bool) -> Self {
        self.image_mask = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether or not to return a valid data mask.</p>
    pub fn set_image_mask(mut self, input: ::std::option::Option<bool>) -> Self {
        self.image_mask = input;
        self
    }
    /// <p>Determines whether or not to return a valid data mask.</p>
    pub fn get_image_mask(&self) -> &::std::option::Option<bool> {
        &self.image_mask
    }
    /// <p>The data format of the output tile. The formats include .npy, .png and .jpg.</p>
    pub fn output_format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.output_format = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The data format of the output tile. The formats include .npy, .png and .jpg.</p>
    pub fn set_output_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.output_format = input;
        self
    }
    /// <p>The data format of the output tile. The formats include .npy, .png and .jpg.</p>
    pub fn get_output_format(&self) -> &::std::option::Option<::std::string::String> {
        &self.output_format
    }
    /// <p>Time range filter applied to imagery to find the images to tile.</p>
    pub fn time_range_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.time_range_filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Time range filter applied to imagery to find the images to tile.</p>
    pub fn set_time_range_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.time_range_filter = input;
        self
    }
    /// <p>Time range filter applied to imagery to find the images to tile.</p>
    pub fn get_time_range_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.time_range_filter
    }
    /// <p>Property filters for the imagery to tile.</p>
    pub fn property_filters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.property_filters = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Property filters for the imagery to tile.</p>
    pub fn set_property_filters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.property_filters = input;
        self
    }
    /// <p>Property filters for the imagery to tile.</p>
    pub fn get_property_filters(&self) -> &::std::option::Option<::std::string::String> {
        &self.property_filters
    }
    /// <p>The output data type of the tile operation.</p>
    pub fn output_data_type(mut self, input: crate::types::OutputType) -> Self {
        self.output_data_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The output data type of the tile operation.</p>
    pub fn set_output_data_type(mut self, input: ::std::option::Option<crate::types::OutputType>) -> Self {
        self.output_data_type = input;
        self
    }
    /// <p>The output data type of the tile operation.</p>
    pub fn get_output_data_type(&self) -> &::std::option::Option<crate::types::OutputType> {
        &self.output_data_type
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specify.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.execution_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specify.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specify.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.execution_role_arn
    }
    /// Consumes the builder and constructs a [`GetTileInput`](crate::operation::get_tile::GetTileInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_tile::GetTileInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_tile::GetTileInput {
            x: self.x,
            y: self.y,
            z: self.z,
            image_assets: self.image_assets,
            target: self.target,
            arn: self.arn,
            image_mask: self.image_mask,
            output_format: self.output_format,
            time_range_filter: self.time_range_filter,
            property_filters: self.property_filters,
            output_data_type: self.output_data_type,
            execution_role_arn: self.execution_role_arn,
        })
    }
}
