// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_tile::_get_tile_output::GetTileOutputBuilder;

pub use crate::operation::get_tile::_get_tile_input::GetTileInputBuilder;

impl GetTileInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_tile::GetTileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_tile::GetTileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_tile();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetTile`.
///
/// <p>Gets a web mercator tile for the given Earth Observation job.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetTileFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_tile::builders::GetTileInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::get_tile::GetTileOutput, crate::operation::get_tile::GetTileError>
    for GetTileFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::get_tile::GetTileOutput, crate::operation::get_tile::GetTileError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetTileFluentBuilder {
    /// Creates a new `GetTile`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetTile as a reference.
    pub fn as_input(&self) -> &crate::operation::get_tile::builders::GetTileInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_tile::GetTileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_tile::GetTileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_tile::GetTile::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_tile::GetTile::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<crate::operation::get_tile::GetTileOutput, crate::operation::get_tile::GetTileError, Self>
    {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The x coordinate of the tile input.</p>
    pub fn x(mut self, input: i32) -> Self {
        self.inner = self.inner.x(input);
        self
    }
    /// <p>The x coordinate of the tile input.</p>
    pub fn set_x(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_x(input);
        self
    }
    /// <p>The x coordinate of the tile input.</p>
    pub fn get_x(&self) -> &::std::option::Option<i32> {
        self.inner.get_x()
    }
    /// <p>The y coordinate of the tile input.</p>
    pub fn y(mut self, input: i32) -> Self {
        self.inner = self.inner.y(input);
        self
    }
    /// <p>The y coordinate of the tile input.</p>
    pub fn set_y(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_y(input);
        self
    }
    /// <p>The y coordinate of the tile input.</p>
    pub fn get_y(&self) -> &::std::option::Option<i32> {
        self.inner.get_y()
    }
    /// <p>The z coordinate of the tile input.</p>
    pub fn z(mut self, input: i32) -> Self {
        self.inner = self.inner.z(input);
        self
    }
    /// <p>The z coordinate of the tile input.</p>
    pub fn set_z(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_z(input);
        self
    }
    /// <p>The z coordinate of the tile input.</p>
    pub fn get_z(&self) -> &::std::option::Option<i32> {
        self.inner.get_z()
    }
    /// Appends an item to `ImageAssets`.
    ///
    /// To override the contents of this collection use [`set_image_assets`](Self::set_image_assets).
    ///
    /// <p>The particular assets or bands to tile.</p>
    pub fn image_assets(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.image_assets(input.into());
        self
    }
    /// <p>The particular assets or bands to tile.</p>
    pub fn set_image_assets(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_image_assets(input);
        self
    }
    /// <p>The particular assets or bands to tile.</p>
    pub fn get_image_assets(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_image_assets()
    }
    /// <p>Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.</p>
    pub fn target(mut self, input: crate::types::TargetOptions) -> Self {
        self.inner = self.inner.target(input);
        self
    }
    /// <p>Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.</p>
    pub fn set_target(mut self, input: ::std::option::Option<crate::types::TargetOptions>) -> Self {
        self.inner = self.inner.set_target(input);
        self
    }
    /// <p>Determines what part of the Earth Observation job to tile. 'INPUT' or 'OUTPUT' are the valid options.</p>
    pub fn get_target(&self) -> &::std::option::Option<crate::types::TargetOptions> {
        self.inner.get_target()
    }
    /// <p>The Amazon Resource Name (ARN) of the tile operation.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tile operation.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tile operation.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
    /// <p>Determines whether or not to return a valid data mask.</p>
    pub fn image_mask(mut self, input: bool) -> Self {
        self.inner = self.inner.image_mask(input);
        self
    }
    /// <p>Determines whether or not to return a valid data mask.</p>
    pub fn set_image_mask(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_image_mask(input);
        self
    }
    /// <p>Determines whether or not to return a valid data mask.</p>
    pub fn get_image_mask(&self) -> &::std::option::Option<bool> {
        self.inner.get_image_mask()
    }
    /// <p>The data format of the output tile. The formats include .npy, .png and .jpg.</p>
    pub fn output_format(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.output_format(input.into());
        self
    }
    /// <p>The data format of the output tile. The formats include .npy, .png and .jpg.</p>
    pub fn set_output_format(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_output_format(input);
        self
    }
    /// <p>The data format of the output tile. The formats include .npy, .png and .jpg.</p>
    pub fn get_output_format(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_output_format()
    }
    /// <p>Time range filter applied to imagery to find the images to tile.</p>
    pub fn time_range_filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.time_range_filter(input.into());
        self
    }
    /// <p>Time range filter applied to imagery to find the images to tile.</p>
    pub fn set_time_range_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_time_range_filter(input);
        self
    }
    /// <p>Time range filter applied to imagery to find the images to tile.</p>
    pub fn get_time_range_filter(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_time_range_filter()
    }
    /// <p>Property filters for the imagery to tile.</p>
    pub fn property_filters(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.property_filters(input.into());
        self
    }
    /// <p>Property filters for the imagery to tile.</p>
    pub fn set_property_filters(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_property_filters(input);
        self
    }
    /// <p>Property filters for the imagery to tile.</p>
    pub fn get_property_filters(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_property_filters()
    }
    /// <p>The output data type of the tile operation.</p>
    pub fn output_data_type(mut self, input: crate::types::OutputType) -> Self {
        self.inner = self.inner.output_data_type(input);
        self
    }
    /// <p>The output data type of the tile operation.</p>
    pub fn set_output_data_type(mut self, input: ::std::option::Option<crate::types::OutputType>) -> Self {
        self.inner = self.inner.set_output_data_type(input);
        self
    }
    /// <p>The output data type of the tile operation.</p>
    pub fn get_output_data_type(&self) -> &::std::option::Option<crate::types::OutputType> {
        self.inner.get_output_data_type()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specify.</p>
    pub fn execution_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specify.</p>
    pub fn set_execution_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specify.</p>
    pub fn get_execution_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_execution_role_arn()
    }
}
