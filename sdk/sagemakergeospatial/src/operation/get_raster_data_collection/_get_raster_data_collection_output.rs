// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRasterDataCollectionOutput {
    /// <p>The name of the raster data collection.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The raster data collection type.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DataCollectionType>,
    /// <p>A description of the raster data collection.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The URL of the description page.</p>
    #[doc(hidden)]
    pub description_page_url: std::option::Option<std::string::String>,
    /// <p>The filters supported by the raster data collection.</p>
    #[doc(hidden)]
    pub supported_filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p></p>
    #[doc(hidden)]
    pub image_source_bands: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Each tag consists of a key and a value.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetRasterDataCollectionOutput {
    /// <p>The name of the raster data collection.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The raster data collection type.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DataCollectionType> {
        self.r#type.as_ref()
    }
    /// <p>A description of the raster data collection.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The URL of the description page.</p>
    pub fn description_page_url(&self) -> std::option::Option<&str> {
        self.description_page_url.as_deref()
    }
    /// <p>The filters supported by the raster data collection.</p>
    pub fn supported_filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.supported_filters.as_deref()
    }
    /// <p></p>
    pub fn image_source_bands(&self) -> std::option::Option<&[std::string::String]> {
        self.image_source_bands.as_deref()
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetRasterDataCollectionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRasterDataCollectionOutput {
    /// Creates a new builder-style object to manufacture [`GetRasterDataCollectionOutput`](crate::operation::get_raster_data_collection::GetRasterDataCollectionOutput).
    pub fn builder(
    ) -> crate::operation::get_raster_data_collection::builders::GetRasterDataCollectionOutputBuilder
    {
        crate::operation::get_raster_data_collection::builders::GetRasterDataCollectionOutputBuilder::default()
    }
}

/// A builder for [`GetRasterDataCollectionOutput`](crate::operation::get_raster_data_collection::GetRasterDataCollectionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRasterDataCollectionOutputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::DataCollectionType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) description_page_url: std::option::Option<std::string::String>,
    pub(crate) supported_filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) image_source_bands: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetRasterDataCollectionOutputBuilder {
    /// <p>The name of the raster data collection.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the raster data collection.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the raster data collection.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The raster data collection type.</p>
    pub fn r#type(mut self, input: crate::types::DataCollectionType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The raster data collection type.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::DataCollectionType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>A description of the raster data collection.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the raster data collection.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The URL of the description page.</p>
    pub fn description_page_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.description_page_url = Some(input.into());
        self
    }
    /// <p>The URL of the description page.</p>
    pub fn set_description_page_url(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.description_page_url = input;
        self
    }
    /// Appends an item to `supported_filters`.
    ///
    /// To override the contents of this collection use [`set_supported_filters`](Self::set_supported_filters).
    ///
    /// <p>The filters supported by the raster data collection.</p>
    pub fn supported_filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.supported_filters.unwrap_or_default();
        v.push(input);
        self.supported_filters = Some(v);
        self
    }
    /// <p>The filters supported by the raster data collection.</p>
    pub fn set_supported_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.supported_filters = input;
        self
    }
    /// Appends an item to `image_source_bands`.
    ///
    /// To override the contents of this collection use [`set_image_source_bands`](Self::set_image_source_bands).
    ///
    /// <p></p>
    pub fn image_source_bands(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.image_source_bands.unwrap_or_default();
        v.push(input.into());
        self.image_source_bands = Some(v);
        self
    }
    /// <p></p>
    pub fn set_image_source_bands(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.image_source_bands = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRasterDataCollectionOutput`](crate::operation::get_raster_data_collection::GetRasterDataCollectionOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_raster_data_collection::GetRasterDataCollectionOutput {
        crate::operation::get_raster_data_collection::GetRasterDataCollectionOutput {
            name: self.name,
            arn: self.arn,
            r#type: self.r#type,
            description: self.description,
            description_page_url: self.description_page_url,
            supported_filters: self.supported_filters,
            image_source_bands: self.image_source_bands,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
