// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetVectorEnrichmentJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The type of the Vector Enrichment job being initiated.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::VectorEnrichmentJobType>,
    /// <p>The name of the Vector Enrichment job.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The creation time.</p>
    #[doc(hidden)]
    pub creation_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    #[doc(hidden)]
    pub duration_in_seconds: std::option::Option<i32>,
    /// <p>The status of the initiated Vector Enrichment job.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::VectorEnrichmentJobStatus>,
    /// <p>The Amazon Key Management Service (KMS) key ID for server-side encryption.</p>
    #[doc(hidden)]
    pub kms_key_id: std::option::Option<std::string::String>,
    /// <p>Input configuration information for the Vector Enrichment job.</p>
    #[doc(hidden)]
    pub input_config: std::option::Option<crate::types::VectorEnrichmentJobInputConfig>,
    /// <p>An object containing information about the job configuration.</p>
    #[doc(hidden)]
    pub job_config: std::option::Option<crate::types::VectorEnrichmentJobConfig>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    #[doc(hidden)]
    pub execution_role_arn: std::option::Option<std::string::String>,
    /// <p>Details about the errors generated during the Vector Enrichment job.</p>
    #[doc(hidden)]
    pub error_details: std::option::Option<crate::types::VectorEnrichmentJobErrorDetails>,
    /// <p>The export status of the Vector Enrichment job being initiated.</p>
    #[doc(hidden)]
    pub export_status: std::option::Option<crate::types::VectorEnrichmentJobExportStatus>,
    /// <p>Details about the errors generated during the ExportVectorEnrichmentJob.</p>
    #[doc(hidden)]
    pub export_error_details:
        std::option::Option<crate::types::VectorEnrichmentJobExportErrorDetails>,
    /// <p>Each tag consists of a key and a value.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetVectorEnrichmentJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The type of the Vector Enrichment job being initiated.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::VectorEnrichmentJobType> {
        self.r#type.as_ref()
    }
    /// <p>The name of the Vector Enrichment job.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The creation time.</p>
    pub fn creation_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    pub fn duration_in_seconds(&self) -> std::option::Option<i32> {
        self.duration_in_seconds
    }
    /// <p>The status of the initiated Vector Enrichment job.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::VectorEnrichmentJobStatus> {
        self.status.as_ref()
    }
    /// <p>The Amazon Key Management Service (KMS) key ID for server-side encryption.</p>
    pub fn kms_key_id(&self) -> std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>Input configuration information for the Vector Enrichment job.</p>
    pub fn input_config(
        &self,
    ) -> std::option::Option<&crate::types::VectorEnrichmentJobInputConfig> {
        self.input_config.as_ref()
    }
    /// <p>An object containing information about the job configuration.</p>
    pub fn job_config(&self) -> std::option::Option<&crate::types::VectorEnrichmentJobConfig> {
        self.job_config.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub fn execution_role_arn(&self) -> std::option::Option<&str> {
        self.execution_role_arn.as_deref()
    }
    /// <p>Details about the errors generated during the Vector Enrichment job.</p>
    pub fn error_details(
        &self,
    ) -> std::option::Option<&crate::types::VectorEnrichmentJobErrorDetails> {
        self.error_details.as_ref()
    }
    /// <p>The export status of the Vector Enrichment job being initiated.</p>
    pub fn export_status(
        &self,
    ) -> std::option::Option<&crate::types::VectorEnrichmentJobExportStatus> {
        self.export_status.as_ref()
    }
    /// <p>Details about the errors generated during the ExportVectorEnrichmentJob.</p>
    pub fn export_error_details(
        &self,
    ) -> std::option::Option<&crate::types::VectorEnrichmentJobExportErrorDetails> {
        self.export_error_details.as_ref()
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetVectorEnrichmentJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetVectorEnrichmentJobOutput {
    /// Creates a new builder-style object to manufacture [`GetVectorEnrichmentJobOutput`](crate::operation::get_vector_enrichment_job::GetVectorEnrichmentJobOutput).
    pub fn builder(
    ) -> crate::operation::get_vector_enrichment_job::builders::GetVectorEnrichmentJobOutputBuilder
    {
        crate::operation::get_vector_enrichment_job::builders::GetVectorEnrichmentJobOutputBuilder::default()
    }
}

/// A builder for [`GetVectorEnrichmentJobOutput`](crate::operation::get_vector_enrichment_job::GetVectorEnrichmentJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetVectorEnrichmentJobOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::VectorEnrichmentJobType>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) creation_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) duration_in_seconds: std::option::Option<i32>,
    pub(crate) status: std::option::Option<crate::types::VectorEnrichmentJobStatus>,
    pub(crate) kms_key_id: std::option::Option<std::string::String>,
    pub(crate) input_config: std::option::Option<crate::types::VectorEnrichmentJobInputConfig>,
    pub(crate) job_config: std::option::Option<crate::types::VectorEnrichmentJobConfig>,
    pub(crate) execution_role_arn: std::option::Option<std::string::String>,
    pub(crate) error_details: std::option::Option<crate::types::VectorEnrichmentJobErrorDetails>,
    pub(crate) export_status: std::option::Option<crate::types::VectorEnrichmentJobExportStatus>,
    pub(crate) export_error_details:
        std::option::Option<crate::types::VectorEnrichmentJobExportErrorDetails>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl GetVectorEnrichmentJobOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Vector Enrichment job.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The type of the Vector Enrichment job being initiated.</p>
    pub fn r#type(mut self, input: crate::types::VectorEnrichmentJobType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the Vector Enrichment job being initiated.</p>
    pub fn set_type(
        mut self,
        input: std::option::Option<crate::types::VectorEnrichmentJobType>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The name of the Vector Enrichment job.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the Vector Enrichment job.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The creation time.</p>
    pub fn creation_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_time = Some(input);
        self
    }
    /// <p>The creation time.</p>
    pub fn set_creation_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    pub fn duration_in_seconds(mut self, input: i32) -> Self {
        self.duration_in_seconds = Some(input);
        self
    }
    /// <p>The duration of the Vector Enrichment job, in seconds.</p>
    pub fn set_duration_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.duration_in_seconds = input;
        self
    }
    /// <p>The status of the initiated Vector Enrichment job.</p>
    pub fn status(mut self, input: crate::types::VectorEnrichmentJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the initiated Vector Enrichment job.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::VectorEnrichmentJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The Amazon Key Management Service (KMS) key ID for server-side encryption.</p>
    pub fn kms_key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key_id = Some(input.into());
        self
    }
    /// <p>The Amazon Key Management Service (KMS) key ID for server-side encryption.</p>
    pub fn set_kms_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>Input configuration information for the Vector Enrichment job.</p>
    pub fn input_config(mut self, input: crate::types::VectorEnrichmentJobInputConfig) -> Self {
        self.input_config = Some(input);
        self
    }
    /// <p>Input configuration information for the Vector Enrichment job.</p>
    pub fn set_input_config(
        mut self,
        input: std::option::Option<crate::types::VectorEnrichmentJobInputConfig>,
    ) -> Self {
        self.input_config = input;
        self
    }
    /// <p>An object containing information about the job configuration.</p>
    pub fn job_config(mut self, input: crate::types::VectorEnrichmentJobConfig) -> Self {
        self.job_config = Some(input);
        self
    }
    /// <p>An object containing information about the job configuration.</p>
    pub fn set_job_config(
        mut self,
        input: std::option::Option<crate::types::VectorEnrichmentJobConfig>,
    ) -> Self {
        self.job_config = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.execution_role_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.execution_role_arn = input;
        self
    }
    /// <p>Details about the errors generated during the Vector Enrichment job.</p>
    pub fn error_details(mut self, input: crate::types::VectorEnrichmentJobErrorDetails) -> Self {
        self.error_details = Some(input);
        self
    }
    /// <p>Details about the errors generated during the Vector Enrichment job.</p>
    pub fn set_error_details(
        mut self,
        input: std::option::Option<crate::types::VectorEnrichmentJobErrorDetails>,
    ) -> Self {
        self.error_details = input;
        self
    }
    /// <p>The export status of the Vector Enrichment job being initiated.</p>
    pub fn export_status(mut self, input: crate::types::VectorEnrichmentJobExportStatus) -> Self {
        self.export_status = Some(input);
        self
    }
    /// <p>The export status of the Vector Enrichment job being initiated.</p>
    pub fn set_export_status(
        mut self,
        input: std::option::Option<crate::types::VectorEnrichmentJobExportStatus>,
    ) -> Self {
        self.export_status = input;
        self
    }
    /// <p>Details about the errors generated during the ExportVectorEnrichmentJob.</p>
    pub fn export_error_details(
        mut self,
        input: crate::types::VectorEnrichmentJobExportErrorDetails,
    ) -> Self {
        self.export_error_details = Some(input);
        self
    }
    /// <p>Details about the errors generated during the ExportVectorEnrichmentJob.</p>
    pub fn set_export_error_details(
        mut self,
        input: std::option::Option<crate::types::VectorEnrichmentJobExportErrorDetails>,
    ) -> Self {
        self.export_error_details = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Each tag consists of a key and a value.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>Each tag consists of a key and a value.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetVectorEnrichmentJobOutput`](crate::operation::get_vector_enrichment_job::GetVectorEnrichmentJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_vector_enrichment_job::GetVectorEnrichmentJobOutput {
        crate::operation::get_vector_enrichment_job::GetVectorEnrichmentJobOutput {
            arn: self.arn,
            r#type: self.r#type,
            name: self.name,
            creation_time: self.creation_time,
            duration_in_seconds: self.duration_in_seconds,
            status: self.status,
            kms_key_id: self.kms_key_id,
            input_config: self.input_config,
            job_config: self.job_config,
            execution_role_arn: self.execution_role_arn,
            error_details: self.error_details,
            export_status: self.export_status,
            export_error_details: self.export_error_details,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
