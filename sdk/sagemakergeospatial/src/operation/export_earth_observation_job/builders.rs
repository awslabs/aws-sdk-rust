// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::export_earth_observation_job::_export_earth_observation_job_output::ExportEarthObservationJobOutputBuilder;

pub use crate::operation::export_earth_observation_job::_export_earth_observation_job_input::ExportEarthObservationJobInputBuilder;

/// Fluent builder constructing a request to `ExportEarthObservationJob`.
///
/// <p>Use this operation to export results of an Earth Observation job and optionally source images used as input to the EOJ to an S3 location.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ExportEarthObservationJobFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::export_earth_observation_job::builders::ExportEarthObservationJobInputBuilder
            }
impl ExportEarthObservationJobFluentBuilder {
    /// Creates a new `ExportEarthObservationJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::export_earth_observation_job::ExportEarthObservationJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::export_earth_observation_job::ExportEarthObservationJobError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::export_earth_observation_job::ExportEarthObservationJobOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::export_earth_observation_job::ExportEarthObservationJobError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The input Amazon Resource Name (ARN) of the Earth Observation job being exported.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The input Amazon Resource Name (ARN) of the Earth Observation job being exported.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub fn execution_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.execution_role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that you specified for the job.</p>
    pub fn set_execution_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_execution_role_arn(input);
        self
    }
    /// <p>An object containing information about the output file.</p>
    pub fn output_config(mut self, input: crate::types::OutputConfigInput) -> Self {
        self.inner = self.inner.output_config(input);
        self
    }
    /// <p>An object containing information about the output file.</p>
    pub fn set_output_config(
        mut self,
        input: std::option::Option<crate::types::OutputConfigInput>,
    ) -> Self {
        self.inner = self.inner.set_output_config(input);
        self
    }
    /// <p>The source images provided to the Earth Observation job being exported.</p>
    pub fn export_source_images(mut self, input: bool) -> Self {
        self.inner = self.inner.export_source_images(input);
        self
    }
    /// <p>The source images provided to the Earth Observation job being exported.</p>
    pub fn set_export_source_images(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_export_source_images(input);
        self
    }
}
