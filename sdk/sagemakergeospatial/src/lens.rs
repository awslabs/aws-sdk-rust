// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_earth_observation_jobs_output_next_token(
    input: &crate::output::ListEarthObservationJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_raster_data_collections_output_next_token(
    input: &crate::output::ListRasterDataCollectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_vector_enrichment_jobs_output_next_token(
    input: &crate::output::ListVectorEnrichmentJobsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_search_raster_data_collection_output_next_token(
    input: &crate::output::SearchRasterDataCollectionOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_earth_observation_jobs_output_earth_observation_job_summaries(
    input: crate::output::ListEarthObservationJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ListEarthObservationJobOutputConfig>> {
    let input = match input.earth_observation_job_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_raster_data_collections_output_raster_data_collection_summaries(
    input: crate::output::ListRasterDataCollectionsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::RasterDataCollectionMetadata>> {
    let input = match input.raster_data_collection_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_vector_enrichment_jobs_output_vector_enrichment_job_summaries(
    input: crate::output::ListVectorEnrichmentJobsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ListVectorEnrichmentJobOutputConfig>> {
    let input = match input.vector_enrichment_job_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
