// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn export_earth_observation_job_output_correct_errors(
    mut builder: crate::operation::export_earth_observation_job::builders::ExportEarthObservationJobOutputBuilder,
) -> crate::operation::export_earth_observation_job::builders::ExportEarthObservationJobOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.export_status.is_none() {
        builder.export_status = "no value was set".parse::<crate::types::EarthObservationJobExportStatus>().ok()
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::OutputConfigInputBuilder::default();
            Some(crate::serde_util::output_config_input_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn export_vector_enrichment_job_output_correct_errors(
    mut builder: crate::operation::export_vector_enrichment_job::builders::ExportVectorEnrichmentJobOutputBuilder,
) -> crate::operation::export_vector_enrichment_job::builders::ExportVectorEnrichmentJobOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    if builder.export_status.is_none() {
        builder.export_status = "no value was set".parse::<crate::types::VectorEnrichmentJobExportStatus>().ok()
    }
    if builder.output_config.is_none() {
        builder.output_config = {
            let builder = crate::types::builders::ExportVectorEnrichmentJobOutputConfigBuilder::default();
            Some(crate::serde_util::export_vector_enrichment_job_output_config_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn get_earth_observation_job_output_correct_errors(
    mut builder: crate::operation::get_earth_observation_job::builders::GetEarthObservationJobOutputBuilder,
) -> crate::operation::get_earth_observation_job::builders::GetEarthObservationJobOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.duration_in_seconds.is_none() {
        builder.duration_in_seconds = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EarthObservationJobStatus>().ok()
    }
    if builder.input_config.is_none() {
        builder.input_config = {
            let builder = crate::types::builders::InputConfigOutputBuilder::default();
            Some(builder.build())
        }
    }
    if builder.job_config.is_none() {
        builder.job_config = Some(crate::types::JobConfigInput::Unknown)
    }
    builder
}

pub(crate) fn get_raster_data_collection_output_correct_errors(
    mut builder: crate::operation::get_raster_data_collection::builders::GetRasterDataCollectionOutputBuilder,
) -> crate::operation::get_raster_data_collection::builders::GetRasterDataCollectionOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataCollectionType>().ok()
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.description_page_url.is_none() {
        builder.description_page_url = Some(Default::default())
    }
    if builder.supported_filters.is_none() {
        builder.supported_filters = Some(Default::default())
    }
    if builder.image_source_bands.is_none() {
        builder.image_source_bands = Some(Default::default())
    }
    builder
}

pub(crate) fn get_vector_enrichment_job_output_correct_errors(
    mut builder: crate::operation::get_vector_enrichment_job::builders::GetVectorEnrichmentJobOutputBuilder,
) -> crate::operation::get_vector_enrichment_job::builders::GetVectorEnrichmentJobOutputBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::VectorEnrichmentJobType>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.duration_in_seconds.is_none() {
        builder.duration_in_seconds = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VectorEnrichmentJobStatus>().ok()
    }
    if builder.input_config.is_none() {
        builder.input_config = {
            let builder = crate::types::builders::VectorEnrichmentJobInputConfigBuilder::default();
            crate::serde_util::vector_enrichment_job_input_config_correct_errors(builder).build().ok()
        }
    }
    if builder.job_config.is_none() {
        builder.job_config = Some(crate::types::VectorEnrichmentJobConfig::Unknown)
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_earth_observation_jobs_output_correct_errors(
    mut builder: crate::operation::list_earth_observation_jobs::builders::ListEarthObservationJobsOutputBuilder,
) -> crate::operation::list_earth_observation_jobs::builders::ListEarthObservationJobsOutputBuilder {
    if builder.earth_observation_job_summaries.is_none() {
        builder.earth_observation_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_raster_data_collections_output_correct_errors(
    mut builder: crate::operation::list_raster_data_collections::builders::ListRasterDataCollectionsOutputBuilder,
) -> crate::operation::list_raster_data_collections::builders::ListRasterDataCollectionsOutputBuilder {
    if builder.raster_data_collection_summaries.is_none() {
        builder.raster_data_collection_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_vector_enrichment_jobs_output_correct_errors(
    mut builder: crate::operation::list_vector_enrichment_jobs::builders::ListVectorEnrichmentJobsOutputBuilder,
) -> crate::operation::list_vector_enrichment_jobs::builders::ListVectorEnrichmentJobsOutputBuilder {
    if builder.vector_enrichment_job_summaries.is_none() {
        builder.vector_enrichment_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn search_raster_data_collection_output_correct_errors(
    mut builder: crate::operation::search_raster_data_collection::builders::SearchRasterDataCollectionOutputBuilder,
) -> crate::operation::search_raster_data_collection::builders::SearchRasterDataCollectionOutputBuilder {
    if builder.approximate_result_count.is_none() {
        builder.approximate_result_count = Some(Default::default())
    }
    builder
}

pub(crate) fn start_earth_observation_job_output_correct_errors(
    mut builder: crate::operation::start_earth_observation_job::builders::StartEarthObservationJobOutputBuilder,
) -> crate::operation::start_earth_observation_job::builders::StartEarthObservationJobOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.duration_in_seconds.is_none() {
        builder.duration_in_seconds = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EarthObservationJobStatus>().ok()
    }
    if builder.job_config.is_none() {
        builder.job_config = Some(crate::types::JobConfigInput::Unknown)
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn start_vector_enrichment_job_output_correct_errors(
    mut builder: crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder,
) -> crate::operation::start_vector_enrichment_job::builders::StartVectorEnrichmentJobOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::VectorEnrichmentJobType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.duration_in_seconds.is_none() {
        builder.duration_in_seconds = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VectorEnrichmentJobStatus>().ok()
    }
    if builder.input_config.is_none() {
        builder.input_config = {
            let builder = crate::types::builders::VectorEnrichmentJobInputConfigBuilder::default();
            crate::serde_util::vector_enrichment_job_input_config_correct_errors(builder).build().ok()
        }
    }
    if builder.job_config.is_none() {
        builder.job_config = Some(crate::types::VectorEnrichmentJobConfig::Unknown)
    }
    if builder.execution_role_arn.is_none() {
        builder.execution_role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn output_config_input_correct_errors(
    mut builder: crate::types::builders::OutputConfigInputBuilder,
) -> crate::types::builders::OutputConfigInputBuilder {
    if builder.s3_data.is_none() {
        builder.s3_data = {
            let builder = crate::types::builders::ExportS3DataInputBuilder::default();
            crate::serde_util::export_s3_data_input_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn export_vector_enrichment_job_output_config_correct_errors(
    mut builder: crate::types::builders::ExportVectorEnrichmentJobOutputConfigBuilder,
) -> crate::types::builders::ExportVectorEnrichmentJobOutputConfigBuilder {
    if builder.s3_data.is_none() {
        builder.s3_data = {
            let builder = crate::types::builders::VectorEnrichmentJobS3DataBuilder::default();
            crate::serde_util::vector_enrichment_job_s3_data_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn vector_enrichment_job_input_config_correct_errors(
    mut builder: crate::types::builders::VectorEnrichmentJobInputConfigBuilder,
) -> crate::types::builders::VectorEnrichmentJobInputConfigBuilder {
    if builder.document_type.is_none() {
        builder.document_type = "no value was set".parse::<crate::types::VectorEnrichmentJobDocumentType>().ok()
    }
    if builder.data_source_config.is_none() {
        builder.data_source_config = Some(crate::types::VectorEnrichmentJobDataSourceConfigInput::Unknown)
    }
    builder
}

pub(crate) fn export_s3_data_input_correct_errors(
    mut builder: crate::types::builders::ExportS3DataInputBuilder,
) -> crate::types::builders::ExportS3DataInputBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn vector_enrichment_job_s3_data_correct_errors(
    mut builder: crate::types::builders::VectorEnrichmentJobS3DataBuilder,
) -> crate::types::builders::VectorEnrichmentJobS3DataBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn filter_correct_errors(mut builder: crate::types::builders::FilterBuilder) -> crate::types::builders::FilterBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    builder
}

pub(crate) fn item_source_correct_errors(mut builder: crate::types::builders::ItemSourceBuilder) -> crate::types::builders::ItemSourceBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.geometry.is_none() {
        builder.geometry = {
            let builder = crate::types::builders::GeometryBuilder::default();
            crate::serde_util::geometry_correct_errors(builder).build().ok()
        }
    }
    if builder.date_time.is_none() {
        builder.date_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_earth_observation_job_output_config_correct_errors(
    mut builder: crate::types::builders::ListEarthObservationJobOutputConfigBuilder,
) -> crate::types::builders::ListEarthObservationJobOutputConfigBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.duration_in_seconds.is_none() {
        builder.duration_in_seconds = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EarthObservationJobStatus>().ok()
    }
    if builder.operation_type.is_none() {
        builder.operation_type = Some(Default::default())
    }
    builder
}

pub(crate) fn list_vector_enrichment_job_output_config_correct_errors(
    mut builder: crate::types::builders::ListVectorEnrichmentJobOutputConfigBuilder,
) -> crate::types::builders::ListVectorEnrichmentJobOutputConfigBuilder {
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::VectorEnrichmentJobType>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.duration_in_seconds.is_none() {
        builder.duration_in_seconds = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::VectorEnrichmentJobStatus>().ok()
    }
    builder
}

pub(crate) fn map_matching_config_correct_errors(
    mut builder: crate::types::builders::MapMatchingConfigBuilder,
) -> crate::types::builders::MapMatchingConfigBuilder {
    if builder.id_attribute_name.is_none() {
        builder.id_attribute_name = Some(Default::default())
    }
    if builder.y_attribute_name.is_none() {
        builder.y_attribute_name = Some(Default::default())
    }
    if builder.x_attribute_name.is_none() {
        builder.x_attribute_name = Some(Default::default())
    }
    if builder.timestamp_attribute_name.is_none() {
        builder.timestamp_attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn output_band_correct_errors(mut builder: crate::types::builders::OutputBandBuilder) -> crate::types::builders::OutputBandBuilder {
    if builder.band_name.is_none() {
        builder.band_name = Some(Default::default())
    }
    if builder.output_data_type.is_none() {
        builder.output_data_type = "no value was set".parse::<crate::types::OutputType>().ok()
    }
    builder
}

pub(crate) fn raster_data_collection_metadata_correct_errors(
    mut builder: crate::types::builders::RasterDataCollectionMetadataBuilder,
) -> crate::types::builders::RasterDataCollectionMetadataBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataCollectionType>().ok()
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.supported_filters.is_none() {
        builder.supported_filters = Some(Default::default())
    }
    builder
}

pub(crate) fn raster_data_collection_query_output_correct_errors(
    mut builder: crate::types::builders::RasterDataCollectionQueryOutputBuilder,
) -> crate::types::builders::RasterDataCollectionQueryOutputBuilder {
    if builder.raster_data_collection_arn.is_none() {
        builder.raster_data_collection_arn = Some(Default::default())
    }
    if builder.raster_data_collection_name.is_none() {
        builder.raster_data_collection_name = Some(Default::default())
    }
    if builder.time_range_filter.is_none() {
        builder.time_range_filter = {
            let builder = crate::types::builders::TimeRangeFilterOutputBuilder::default();
            crate::serde_util::time_range_filter_output_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn resampling_config_input_correct_errors(
    mut builder: crate::types::builders::ResamplingConfigInputBuilder,
) -> crate::types::builders::ResamplingConfigInputBuilder {
    if builder.output_resolution.is_none() {
        builder.output_resolution = {
            let builder = crate::types::builders::OutputResolutionResamplingInputBuilder::default();
            Some(crate::serde_util::output_resolution_resampling_input_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn reverse_geocoding_config_correct_errors(
    mut builder: crate::types::builders::ReverseGeocodingConfigBuilder,
) -> crate::types::builders::ReverseGeocodingConfigBuilder {
    if builder.y_attribute_name.is_none() {
        builder.y_attribute_name = Some(Default::default())
    }
    if builder.x_attribute_name.is_none() {
        builder.x_attribute_name = Some(Default::default())
    }
    builder
}

pub(crate) fn temporal_statistics_config_input_correct_errors(
    mut builder: crate::types::builders::TemporalStatisticsConfigInputBuilder,
) -> crate::types::builders::TemporalStatisticsConfigInputBuilder {
    if builder.statistics.is_none() {
        builder.statistics = Some(Default::default())
    }
    builder
}

pub(crate) fn zonal_statistics_config_input_correct_errors(
    mut builder: crate::types::builders::ZonalStatisticsConfigInputBuilder,
) -> crate::types::builders::ZonalStatisticsConfigInputBuilder {
    if builder.zone_s3_path.is_none() {
        builder.zone_s3_path = Some(Default::default())
    }
    if builder.statistics.is_none() {
        builder.statistics = Some(Default::default())
    }
    builder
}

pub(crate) fn geometry_correct_errors(mut builder: crate::types::builders::GeometryBuilder) -> crate::types::builders::GeometryBuilder {
    if builder.r#type.is_none() {
        builder.r#type = Some(Default::default())
    }
    if builder.coordinates.is_none() {
        builder.coordinates = Some(Default::default())
    }
    builder
}

pub(crate) fn output_resolution_resampling_input_correct_errors(
    mut builder: crate::types::builders::OutputResolutionResamplingInputBuilder,
) -> crate::types::builders::OutputResolutionResamplingInputBuilder {
    if builder.user_defined.is_none() {
        builder.user_defined = {
            let builder = crate::types::builders::UserDefinedBuilder::default();
            crate::serde_util::user_defined_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn time_range_filter_output_correct_errors(
    mut builder: crate::types::builders::TimeRangeFilterOutputBuilder,
) -> crate::types::builders::TimeRangeFilterOutputBuilder {
    if builder.start_time.is_none() {
        builder.start_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.end_time.is_none() {
        builder.end_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn user_defined_correct_errors(mut builder: crate::types::builders::UserDefinedBuilder) -> crate::types::builders::UserDefinedBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = "no value was set".parse::<crate::types::Unit>().ok()
    }
    builder
}

pub(crate) fn multi_polygon_geometry_input_correct_errors(
    mut builder: crate::types::builders::MultiPolygonGeometryInputBuilder,
) -> crate::types::builders::MultiPolygonGeometryInputBuilder {
    if builder.coordinates.is_none() {
        builder.coordinates = Some(Default::default())
    }
    builder
}

pub(crate) fn operation_correct_errors(mut builder: crate::types::builders::OperationBuilder) -> crate::types::builders::OperationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.equation.is_none() {
        builder.equation = Some(Default::default())
    }
    builder
}

pub(crate) fn polygon_geometry_input_correct_errors(
    mut builder: crate::types::builders::PolygonGeometryInputBuilder,
) -> crate::types::builders::PolygonGeometryInputBuilder {
    if builder.coordinates.is_none() {
        builder.coordinates = Some(Default::default())
    }
    builder
}

pub(crate) fn property_filter_correct_errors(
    mut builder: crate::types::builders::PropertyFilterBuilder,
) -> crate::types::builders::PropertyFilterBuilder {
    if builder.property.is_none() {
        builder.property = Some(crate::types::Property::Unknown)
    }
    builder
}

pub(crate) fn eo_cloud_cover_input_correct_errors(
    mut builder: crate::types::builders::EoCloudCoverInputBuilder,
) -> crate::types::builders::EoCloudCoverInputBuilder {
    if builder.lower_bound.is_none() {
        builder.lower_bound = Some(Default::default())
    }
    if builder.upper_bound.is_none() {
        builder.upper_bound = Some(Default::default())
    }
    builder
}

pub(crate) fn landsat_cloud_cover_land_input_correct_errors(
    mut builder: crate::types::builders::LandsatCloudCoverLandInputBuilder,
) -> crate::types::builders::LandsatCloudCoverLandInputBuilder {
    if builder.lower_bound.is_none() {
        builder.lower_bound = Some(Default::default())
    }
    if builder.upper_bound.is_none() {
        builder.upper_bound = Some(Default::default())
    }
    builder
}

pub(crate) fn platform_input_correct_errors(
    mut builder: crate::types::builders::PlatformInputBuilder,
) -> crate::types::builders::PlatformInputBuilder {
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn view_off_nadir_input_correct_errors(
    mut builder: crate::types::builders::ViewOffNadirInputBuilder,
) -> crate::types::builders::ViewOffNadirInputBuilder {
    if builder.lower_bound.is_none() {
        builder.lower_bound = Some(Default::default())
    }
    if builder.upper_bound.is_none() {
        builder.upper_bound = Some(Default::default())
    }
    builder
}

pub(crate) fn view_sun_azimuth_input_correct_errors(
    mut builder: crate::types::builders::ViewSunAzimuthInputBuilder,
) -> crate::types::builders::ViewSunAzimuthInputBuilder {
    if builder.lower_bound.is_none() {
        builder.lower_bound = Some(Default::default())
    }
    if builder.upper_bound.is_none() {
        builder.upper_bound = Some(Default::default())
    }
    builder
}

pub(crate) fn view_sun_elevation_input_correct_errors(
    mut builder: crate::types::builders::ViewSunElevationInputBuilder,
) -> crate::types::builders::ViewSunElevationInputBuilder {
    if builder.lower_bound.is_none() {
        builder.lower_bound = Some(Default::default())
    }
    if builder.upper_bound.is_none() {
        builder.upper_bound = Some(Default::default())
    }
    builder
}
