// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_raster_data_collection_query_with_band_filter_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RasterDataCollectionQueryWithBandFilterInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.time_range_filter {
        #[allow(unused_mut)]
        let mut object_2 = object.key("TimeRangeFilter").start_object();
        crate::protocol_serde::shape_time_range_filter_input::ser_time_range_filter_input(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.area_of_interest {
        #[allow(unused_mut)]
        let mut object_4 = object.key("AreaOfInterest").start_object();
        crate::protocol_serde::shape_area_of_interest::ser_area_of_interest(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.property_filters {
        #[allow(unused_mut)]
        let mut object_6 = object.key("PropertyFilters").start_object();
        crate::protocol_serde::shape_property_filters::ser_property_filters(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.band_filter {
        let mut array_8 = object.key("BandFilter").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    Ok(())
}
