// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `DeleteEarthObservationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_earth_observation_job`](crate::client::fluent_builders::DeleteEarthObservationJob).
///
/// `ParseStrictResponse` impl for `DeleteEarthObservationJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteEarthObservationJob {
    _private: (),
}
impl DeleteEarthObservationJob {
    /// Creates a new builder-style object to manufacture [`DeleteEarthObservationJobInput`](crate::input::DeleteEarthObservationJobInput).
    pub fn builder() -> crate::input::delete_earth_observation_job_input::Builder {
        crate::input::delete_earth_observation_job_input::Builder::default()
    }
    /// Creates a new `DeleteEarthObservationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteEarthObservationJob {
    type Output = std::result::Result<
        crate::output::DeleteEarthObservationJobOutput,
        crate::error::DeleteEarthObservationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_earth_observation_job_error(response)
        } else {
            crate::operation_deser::parse_delete_earth_observation_job_response(response)
        }
    }
}

/// Operation shape for `DeleteVectorEnrichmentJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_vector_enrichment_job`](crate::client::fluent_builders::DeleteVectorEnrichmentJob).
///
/// `ParseStrictResponse` impl for `DeleteVectorEnrichmentJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteVectorEnrichmentJob {
    _private: (),
}
impl DeleteVectorEnrichmentJob {
    /// Creates a new builder-style object to manufacture [`DeleteVectorEnrichmentJobInput`](crate::input::DeleteVectorEnrichmentJobInput).
    pub fn builder() -> crate::input::delete_vector_enrichment_job_input::Builder {
        crate::input::delete_vector_enrichment_job_input::Builder::default()
    }
    /// Creates a new `DeleteVectorEnrichmentJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteVectorEnrichmentJob {
    type Output = std::result::Result<
        crate::output::DeleteVectorEnrichmentJobOutput,
        crate::error::DeleteVectorEnrichmentJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_vector_enrichment_job_error(response)
        } else {
            crate::operation_deser::parse_delete_vector_enrichment_job_response(response)
        }
    }
}

/// Operation shape for `ExportEarthObservationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`export_earth_observation_job`](crate::client::fluent_builders::ExportEarthObservationJob).
///
/// `ParseStrictResponse` impl for `ExportEarthObservationJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ExportEarthObservationJob {
    _private: (),
}
impl ExportEarthObservationJob {
    /// Creates a new builder-style object to manufacture [`ExportEarthObservationJobInput`](crate::input::ExportEarthObservationJobInput).
    pub fn builder() -> crate::input::export_earth_observation_job_input::Builder {
        crate::input::export_earth_observation_job_input::Builder::default()
    }
    /// Creates a new `ExportEarthObservationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ExportEarthObservationJob {
    type Output = std::result::Result<
        crate::output::ExportEarthObservationJobOutput,
        crate::error::ExportEarthObservationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_earth_observation_job_error(response)
        } else {
            crate::operation_deser::parse_export_earth_observation_job_response(response)
        }
    }
}

/// Operation shape for `ExportVectorEnrichmentJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`export_vector_enrichment_job`](crate::client::fluent_builders::ExportVectorEnrichmentJob).
///
/// `ParseStrictResponse` impl for `ExportVectorEnrichmentJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ExportVectorEnrichmentJob {
    _private: (),
}
impl ExportVectorEnrichmentJob {
    /// Creates a new builder-style object to manufacture [`ExportVectorEnrichmentJobInput`](crate::input::ExportVectorEnrichmentJobInput).
    pub fn builder() -> crate::input::export_vector_enrichment_job_input::Builder {
        crate::input::export_vector_enrichment_job_input::Builder::default()
    }
    /// Creates a new `ExportVectorEnrichmentJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ExportVectorEnrichmentJob {
    type Output = std::result::Result<
        crate::output::ExportVectorEnrichmentJobOutput,
        crate::error::ExportVectorEnrichmentJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_export_vector_enrichment_job_error(response)
        } else {
            crate::operation_deser::parse_export_vector_enrichment_job_response(response)
        }
    }
}

/// Operation shape for `GetEarthObservationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_earth_observation_job`](crate::client::fluent_builders::GetEarthObservationJob).
///
/// `ParseStrictResponse` impl for `GetEarthObservationJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetEarthObservationJob {
    _private: (),
}
impl GetEarthObservationJob {
    /// Creates a new builder-style object to manufacture [`GetEarthObservationJobInput`](crate::input::GetEarthObservationJobInput).
    pub fn builder() -> crate::input::get_earth_observation_job_input::Builder {
        crate::input::get_earth_observation_job_input::Builder::default()
    }
    /// Creates a new `GetEarthObservationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetEarthObservationJob {
    type Output = std::result::Result<
        crate::output::GetEarthObservationJobOutput,
        crate::error::GetEarthObservationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_earth_observation_job_error(response)
        } else {
            crate::operation_deser::parse_get_earth_observation_job_response(response)
        }
    }
}

/// Operation shape for `GetRasterDataCollection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_raster_data_collection`](crate::client::fluent_builders::GetRasterDataCollection).
///
/// `ParseStrictResponse` impl for `GetRasterDataCollection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetRasterDataCollection {
    _private: (),
}
impl GetRasterDataCollection {
    /// Creates a new builder-style object to manufacture [`GetRasterDataCollectionInput`](crate::input::GetRasterDataCollectionInput).
    pub fn builder() -> crate::input::get_raster_data_collection_input::Builder {
        crate::input::get_raster_data_collection_input::Builder::default()
    }
    /// Creates a new `GetRasterDataCollection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetRasterDataCollection {
    type Output = std::result::Result<
        crate::output::GetRasterDataCollectionOutput,
        crate::error::GetRasterDataCollectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_raster_data_collection_error(response)
        } else {
            crate::operation_deser::parse_get_raster_data_collection_response(response)
        }
    }
}

/// Operation shape for `GetTile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_tile`](crate::client::fluent_builders::GetTile).
///
/// `ParseStrictResponse` impl for `GetTile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetTile {
    _private: (),
}
impl GetTile {
    /// Creates a new builder-style object to manufacture [`GetTileInput`](crate::input::GetTileInput).
    pub fn builder() -> crate::input::get_tile_input::Builder {
        crate::input::get_tile_input::Builder::default()
    }
    /// Creates a new `GetTile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseHttpResponse for GetTile {
    type Output = std::result::Result<crate::output::GetTileOutput, crate::error::GetTileError>;
    fn parse_unloaded(
        &self,
        response: &mut aws_smithy_http::operation::Response,
    ) -> Option<Self::Output> {
        // This is an error, defer to the non-streaming parser
        if !response.http().status().is_success() && response.http().status().as_u16() != 200 {
            return None;
        }
        Some(crate::operation_deser::parse_get_tile(response))
    }
    fn parse_loaded(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        // if streaming, we only hit this case if its an error
        crate::operation_deser::parse_get_tile_error(response)
    }
}

/// Operation shape for `GetVectorEnrichmentJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_vector_enrichment_job`](crate::client::fluent_builders::GetVectorEnrichmentJob).
///
/// `ParseStrictResponse` impl for `GetVectorEnrichmentJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetVectorEnrichmentJob {
    _private: (),
}
impl GetVectorEnrichmentJob {
    /// Creates a new builder-style object to manufacture [`GetVectorEnrichmentJobInput`](crate::input::GetVectorEnrichmentJobInput).
    pub fn builder() -> crate::input::get_vector_enrichment_job_input::Builder {
        crate::input::get_vector_enrichment_job_input::Builder::default()
    }
    /// Creates a new `GetVectorEnrichmentJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetVectorEnrichmentJob {
    type Output = std::result::Result<
        crate::output::GetVectorEnrichmentJobOutput,
        crate::error::GetVectorEnrichmentJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_vector_enrichment_job_error(response)
        } else {
            crate::operation_deser::parse_get_vector_enrichment_job_response(response)
        }
    }
}

/// Operation shape for `ListEarthObservationJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_earth_observation_jobs`](crate::client::fluent_builders::ListEarthObservationJobs).
///
/// `ParseStrictResponse` impl for `ListEarthObservationJobs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListEarthObservationJobs {
    _private: (),
}
impl ListEarthObservationJobs {
    /// Creates a new builder-style object to manufacture [`ListEarthObservationJobsInput`](crate::input::ListEarthObservationJobsInput).
    pub fn builder() -> crate::input::list_earth_observation_jobs_input::Builder {
        crate::input::list_earth_observation_jobs_input::Builder::default()
    }
    /// Creates a new `ListEarthObservationJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListEarthObservationJobs {
    type Output = std::result::Result<
        crate::output::ListEarthObservationJobsOutput,
        crate::error::ListEarthObservationJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_earth_observation_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_earth_observation_jobs_response(response)
        }
    }
}

/// Operation shape for `ListRasterDataCollections`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_raster_data_collections`](crate::client::fluent_builders::ListRasterDataCollections).
///
/// `ParseStrictResponse` impl for `ListRasterDataCollections`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListRasterDataCollections {
    _private: (),
}
impl ListRasterDataCollections {
    /// Creates a new builder-style object to manufacture [`ListRasterDataCollectionsInput`](crate::input::ListRasterDataCollectionsInput).
    pub fn builder() -> crate::input::list_raster_data_collections_input::Builder {
        crate::input::list_raster_data_collections_input::Builder::default()
    }
    /// Creates a new `ListRasterDataCollections` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListRasterDataCollections {
    type Output = std::result::Result<
        crate::output::ListRasterDataCollectionsOutput,
        crate::error::ListRasterDataCollectionsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_raster_data_collections_error(response)
        } else {
            crate::operation_deser::parse_list_raster_data_collections_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// Operation shape for `ListVectorEnrichmentJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_vector_enrichment_jobs`](crate::client::fluent_builders::ListVectorEnrichmentJobs).
///
/// `ParseStrictResponse` impl for `ListVectorEnrichmentJobs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListVectorEnrichmentJobs {
    _private: (),
}
impl ListVectorEnrichmentJobs {
    /// Creates a new builder-style object to manufacture [`ListVectorEnrichmentJobsInput`](crate::input::ListVectorEnrichmentJobsInput).
    pub fn builder() -> crate::input::list_vector_enrichment_jobs_input::Builder {
        crate::input::list_vector_enrichment_jobs_input::Builder::default()
    }
    /// Creates a new `ListVectorEnrichmentJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListVectorEnrichmentJobs {
    type Output = std::result::Result<
        crate::output::ListVectorEnrichmentJobsOutput,
        crate::error::ListVectorEnrichmentJobsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_vector_enrichment_jobs_error(response)
        } else {
            crate::operation_deser::parse_list_vector_enrichment_jobs_response(response)
        }
    }
}

/// Operation shape for `SearchRasterDataCollection`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`search_raster_data_collection`](crate::client::fluent_builders::SearchRasterDataCollection).
///
/// `ParseStrictResponse` impl for `SearchRasterDataCollection`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct SearchRasterDataCollection {
    _private: (),
}
impl SearchRasterDataCollection {
    /// Creates a new builder-style object to manufacture [`SearchRasterDataCollectionInput`](crate::input::SearchRasterDataCollectionInput).
    pub fn builder() -> crate::input::search_raster_data_collection_input::Builder {
        crate::input::search_raster_data_collection_input::Builder::default()
    }
    /// Creates a new `SearchRasterDataCollection` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for SearchRasterDataCollection {
    type Output = std::result::Result<
        crate::output::SearchRasterDataCollectionOutput,
        crate::error::SearchRasterDataCollectionError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_search_raster_data_collection_error(response)
        } else {
            crate::operation_deser::parse_search_raster_data_collection_response(response)
        }
    }
}

/// Operation shape for `StartEarthObservationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_earth_observation_job`](crate::client::fluent_builders::StartEarthObservationJob).
///
/// `ParseStrictResponse` impl for `StartEarthObservationJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartEarthObservationJob {
    _private: (),
}
impl StartEarthObservationJob {
    /// Creates a new builder-style object to manufacture [`StartEarthObservationJobInput`](crate::input::StartEarthObservationJobInput).
    pub fn builder() -> crate::input::start_earth_observation_job_input::Builder {
        crate::input::start_earth_observation_job_input::Builder::default()
    }
    /// Creates a new `StartEarthObservationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartEarthObservationJob {
    type Output = std::result::Result<
        crate::output::StartEarthObservationJobOutput,
        crate::error::StartEarthObservationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_earth_observation_job_error(response)
        } else {
            crate::operation_deser::parse_start_earth_observation_job_response(response)
        }
    }
}

/// Operation shape for `StartVectorEnrichmentJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_vector_enrichment_job`](crate::client::fluent_builders::StartVectorEnrichmentJob).
///
/// `ParseStrictResponse` impl for `StartVectorEnrichmentJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartVectorEnrichmentJob {
    _private: (),
}
impl StartVectorEnrichmentJob {
    /// Creates a new builder-style object to manufacture [`StartVectorEnrichmentJobInput`](crate::input::StartVectorEnrichmentJobInput).
    pub fn builder() -> crate::input::start_vector_enrichment_job_input::Builder {
        crate::input::start_vector_enrichment_job_input::Builder::default()
    }
    /// Creates a new `StartVectorEnrichmentJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartVectorEnrichmentJob {
    type Output = std::result::Result<
        crate::output::StartVectorEnrichmentJobOutput,
        crate::error::StartVectorEnrichmentJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_start_vector_enrichment_job_error(response)
        } else {
            crate::operation_deser::parse_start_vector_enrichment_job_response(response)
        }
    }
}

/// Operation shape for `StopEarthObservationJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_earth_observation_job`](crate::client::fluent_builders::StopEarthObservationJob).
///
/// `ParseStrictResponse` impl for `StopEarthObservationJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopEarthObservationJob {
    _private: (),
}
impl StopEarthObservationJob {
    /// Creates a new builder-style object to manufacture [`StopEarthObservationJobInput`](crate::input::StopEarthObservationJobInput).
    pub fn builder() -> crate::input::stop_earth_observation_job_input::Builder {
        crate::input::stop_earth_observation_job_input::Builder::default()
    }
    /// Creates a new `StopEarthObservationJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopEarthObservationJob {
    type Output = std::result::Result<
        crate::output::StopEarthObservationJobOutput,
        crate::error::StopEarthObservationJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_earth_observation_job_error(response)
        } else {
            crate::operation_deser::parse_stop_earth_observation_job_response(response)
        }
    }
}

/// Operation shape for `StopVectorEnrichmentJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_vector_enrichment_job`](crate::client::fluent_builders::StopVectorEnrichmentJob).
///
/// `ParseStrictResponse` impl for `StopVectorEnrichmentJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopVectorEnrichmentJob {
    _private: (),
}
impl StopVectorEnrichmentJob {
    /// Creates a new builder-style object to manufacture [`StopVectorEnrichmentJobInput`](crate::input::StopVectorEnrichmentJobInput).
    pub fn builder() -> crate::input::stop_vector_enrichment_job_input::Builder {
        crate::input::stop_vector_enrichment_job_input::Builder::default()
    }
    /// Creates a new `StopVectorEnrichmentJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopVectorEnrichmentJob {
    type Output = std::result::Result<
        crate::output::StopVectorEnrichmentJobOutput,
        crate::error::StopVectorEnrichmentJobError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_stop_vector_enrichment_job_error(response)
        } else {
            crate::operation_deser::parse_stop_vector_enrichment_job_response(response)
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
