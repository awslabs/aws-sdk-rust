// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DataIntegrationEventType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let dataintegrationeventtype = unimplemented!();
/// match dataintegrationeventtype {
///     DataIntegrationEventType::Dataset => { /* ... */ },
///     DataIntegrationEventType::Forecast => { /* ... */ },
///     DataIntegrationEventType::InboundOrder => { /* ... */ },
///     DataIntegrationEventType::InboundOrderLine => { /* ... */ },
///     DataIntegrationEventType::InboundOrderLineSchedule => { /* ... */ },
///     DataIntegrationEventType::InventoryLevel => { /* ... */ },
///     DataIntegrationEventType::OutboundOrderLine => { /* ... */ },
///     DataIntegrationEventType::OutboundShipment => { /* ... */ },
///     DataIntegrationEventType::ProcessHeader => { /* ... */ },
///     DataIntegrationEventType::ProcessOperation => { /* ... */ },
///     DataIntegrationEventType::ProcessProduct => { /* ... */ },
///     DataIntegrationEventType::Reservation => { /* ... */ },
///     DataIntegrationEventType::Shipment => { /* ... */ },
///     DataIntegrationEventType::ShipmentStop => { /* ... */ },
///     DataIntegrationEventType::ShipmentStopOrder => { /* ... */ },
///     DataIntegrationEventType::SupplyPlan => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `dataintegrationeventtype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DataIntegrationEventType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DataIntegrationEventType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DataIntegrationEventType::NewFeature` is defined.
/// Specifically, when `dataintegrationeventtype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DataIntegrationEventType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum DataIntegrationEventType {
    #[allow(missing_docs)] // documentation missing in model
    Dataset,
    #[allow(missing_docs)] // documentation missing in model
    Forecast,
    #[allow(missing_docs)] // documentation missing in model
    InboundOrder,
    #[allow(missing_docs)] // documentation missing in model
    InboundOrderLine,
    #[allow(missing_docs)] // documentation missing in model
    InboundOrderLineSchedule,
    #[allow(missing_docs)] // documentation missing in model
    InventoryLevel,
    #[allow(missing_docs)] // documentation missing in model
    OutboundOrderLine,
    #[allow(missing_docs)] // documentation missing in model
    OutboundShipment,
    #[allow(missing_docs)] // documentation missing in model
    ProcessHeader,
    #[allow(missing_docs)] // documentation missing in model
    ProcessOperation,
    #[allow(missing_docs)] // documentation missing in model
    ProcessProduct,
    #[allow(missing_docs)] // documentation missing in model
    Reservation,
    #[allow(missing_docs)] // documentation missing in model
    Shipment,
    #[allow(missing_docs)] // documentation missing in model
    ShipmentStop,
    #[allow(missing_docs)] // documentation missing in model
    ShipmentStopOrder,
    #[allow(missing_docs)] // documentation missing in model
    SupplyPlan,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for DataIntegrationEventType {
    fn from(s: &str) -> Self {
        match s {
            "scn.data.dataset" => DataIntegrationEventType::Dataset,
            "scn.data.forecast" => DataIntegrationEventType::Forecast,
            "scn.data.inboundorder" => DataIntegrationEventType::InboundOrder,
            "scn.data.inboundorderline" => DataIntegrationEventType::InboundOrderLine,
            "scn.data.inboundorderlineschedule" => DataIntegrationEventType::InboundOrderLineSchedule,
            "scn.data.inventorylevel" => DataIntegrationEventType::InventoryLevel,
            "scn.data.outboundorderline" => DataIntegrationEventType::OutboundOrderLine,
            "scn.data.outboundshipment" => DataIntegrationEventType::OutboundShipment,
            "scn.data.processheader" => DataIntegrationEventType::ProcessHeader,
            "scn.data.processoperation" => DataIntegrationEventType::ProcessOperation,
            "scn.data.processproduct" => DataIntegrationEventType::ProcessProduct,
            "scn.data.reservation" => DataIntegrationEventType::Reservation,
            "scn.data.shipment" => DataIntegrationEventType::Shipment,
            "scn.data.shipmentstop" => DataIntegrationEventType::ShipmentStop,
            "scn.data.shipmentstoporder" => DataIntegrationEventType::ShipmentStopOrder,
            "scn.data.supplyplan" => DataIntegrationEventType::SupplyPlan,
            other => DataIntegrationEventType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for DataIntegrationEventType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(DataIntegrationEventType::from(s))
    }
}
impl DataIntegrationEventType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DataIntegrationEventType::Dataset => "scn.data.dataset",
            DataIntegrationEventType::Forecast => "scn.data.forecast",
            DataIntegrationEventType::InboundOrder => "scn.data.inboundorder",
            DataIntegrationEventType::InboundOrderLine => "scn.data.inboundorderline",
            DataIntegrationEventType::InboundOrderLineSchedule => "scn.data.inboundorderlineschedule",
            DataIntegrationEventType::InventoryLevel => "scn.data.inventorylevel",
            DataIntegrationEventType::OutboundOrderLine => "scn.data.outboundorderline",
            DataIntegrationEventType::OutboundShipment => "scn.data.outboundshipment",
            DataIntegrationEventType::ProcessHeader => "scn.data.processheader",
            DataIntegrationEventType::ProcessOperation => "scn.data.processoperation",
            DataIntegrationEventType::ProcessProduct => "scn.data.processproduct",
            DataIntegrationEventType::Reservation => "scn.data.reservation",
            DataIntegrationEventType::Shipment => "scn.data.shipment",
            DataIntegrationEventType::ShipmentStop => "scn.data.shipmentstop",
            DataIntegrationEventType::ShipmentStopOrder => "scn.data.shipmentstoporder",
            DataIntegrationEventType::SupplyPlan => "scn.data.supplyplan",
            DataIntegrationEventType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "scn.data.dataset",
            "scn.data.forecast",
            "scn.data.inboundorder",
            "scn.data.inboundorderline",
            "scn.data.inboundorderlineschedule",
            "scn.data.inventorylevel",
            "scn.data.outboundorderline",
            "scn.data.outboundshipment",
            "scn.data.processheader",
            "scn.data.processoperation",
            "scn.data.processproduct",
            "scn.data.reservation",
            "scn.data.shipment",
            "scn.data.shipmentstop",
            "scn.data.shipmentstoporder",
            "scn.data.supplyplan",
        ]
    }
}
impl ::std::convert::AsRef<str> for DataIntegrationEventType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl DataIntegrationEventType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for DataIntegrationEventType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            DataIntegrationEventType::Dataset => write!(f, "scn.data.dataset"),
            DataIntegrationEventType::Forecast => write!(f, "scn.data.forecast"),
            DataIntegrationEventType::InboundOrder => write!(f, "scn.data.inboundorder"),
            DataIntegrationEventType::InboundOrderLine => write!(f, "scn.data.inboundorderline"),
            DataIntegrationEventType::InboundOrderLineSchedule => write!(f, "scn.data.inboundorderlineschedule"),
            DataIntegrationEventType::InventoryLevel => write!(f, "scn.data.inventorylevel"),
            DataIntegrationEventType::OutboundOrderLine => write!(f, "scn.data.outboundorderline"),
            DataIntegrationEventType::OutboundShipment => write!(f, "scn.data.outboundshipment"),
            DataIntegrationEventType::ProcessHeader => write!(f, "scn.data.processheader"),
            DataIntegrationEventType::ProcessOperation => write!(f, "scn.data.processoperation"),
            DataIntegrationEventType::ProcessProduct => write!(f, "scn.data.processproduct"),
            DataIntegrationEventType::Reservation => write!(f, "scn.data.reservation"),
            DataIntegrationEventType::Shipment => write!(f, "scn.data.shipment"),
            DataIntegrationEventType::ShipmentStop => write!(f, "scn.data.shipmentstop"),
            DataIntegrationEventType::ShipmentStopOrder => write!(f, "scn.data.shipmentstoporder"),
            DataIntegrationEventType::SupplyPlan => write!(f, "scn.data.supplyplan"),
            DataIntegrationEventType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
