// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_license_manager_report_generator_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_license_manager_report_generator::UpdateLicenseManagerReportGeneratorInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.license_manager_report_generator_arn {
        object
            .key("LicenseManagerReportGeneratorArn")
            .string(var_1.as_str());
    }
    if let Some(var_2) = &input.report_generator_name {
        object.key("ReportGeneratorName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.r#type {
        let mut array_4 = object.key("Type").start_array();
        for item_5 in var_3 {
            {
                array_4.value().string(item_5.as_str());
            }
        }
        array_4.finish();
    }
    if let Some(var_6) = &input.report_context {
        #[allow(unused_mut)]
        let mut object_7 = object.key("ReportContext").start_object();
        crate::protocol_serde::shape_report_context::ser_report_context(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.report_frequency {
        #[allow(unused_mut)]
        let mut object_9 = object.key("ReportFrequency").start_object();
        crate::protocol_serde::shape_report_frequency::ser_report_frequency(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.client_token {
        object.key("ClientToken").string(var_10.as_str());
    }
    if let Some(var_11) = &input.description {
        object.key("Description").string(var_11.as_str());
    }
    Ok(())
}
