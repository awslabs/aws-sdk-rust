// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_license_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_license::CreateLicenseInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.license_name {
        object.key("LicenseName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.product_name {
        object.key("ProductName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.product_sku {
        object.key("ProductSKU").string(var_3.as_str());
    }
    if let Some(var_4) = &input.issuer {
        #[allow(unused_mut)]
        let mut object_5 = object.key("Issuer").start_object();
        crate::protocol_serde::shape_issuer::ser_issuer(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.home_region {
        object.key("HomeRegion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.validity {
        #[allow(unused_mut)]
        let mut object_8 = object.key("Validity").start_object();
        crate::protocol_serde::shape_datetime_range::ser_datetime_range(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.entitlements {
        let mut array_10 = object.key("Entitlements").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_entitlement::ser_entitlement(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.beneficiary {
        object.key("Beneficiary").string(var_13.as_str());
    }
    if let Some(var_14) = &input.consumption_configuration {
        #[allow(unused_mut)]
        let mut object_15 = object.key("ConsumptionConfiguration").start_object();
        crate::protocol_serde::shape_consumption_configuration::ser_consumption_configuration(
            &mut object_15,
            var_14,
        )?;
        object_15.finish();
    }
    if let Some(var_16) = &input.license_metadata {
        let mut array_17 = object.key("LicenseMetadata").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_metadata::ser_metadata(&mut object_19, item_18)?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.client_token {
        object.key("ClientToken").string(var_20.as_str());
    }
    Ok(())
}
