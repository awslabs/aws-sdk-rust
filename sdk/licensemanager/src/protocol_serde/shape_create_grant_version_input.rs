// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_grant_version_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_grant_version::CreateGrantVersionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.grant_arn {
        object.key("GrantArn").string(var_2.as_str());
    }
    if let Some(var_3) = &input.grant_name {
        object.key("GrantName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.allowed_operations {
        let mut array_5 = object.key("AllowedOperations").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.status {
        object.key("Status").string(var_7.as_str());
    }
    if let Some(var_8) = &input.status_reason {
        object.key("StatusReason").string(var_8.as_str());
    }
    if let Some(var_9) = &input.source_version {
        object.key("SourceVersion").string(var_9.as_str());
    }
    if let Some(var_10) = &input.options {
        #[allow(unused_mut)]
        let mut object_11 = object.key("Options").start_object();
        crate::protocol_serde::shape_options::ser_options(&mut object_11, var_10)?;
        object_11.finish();
    }
    Ok(())
}
