// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_license_manager_report_generator_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_license_manager_report_generator::CreateLicenseManagerReportGeneratorInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.report_generator_name {
        object.key("ReportGeneratorName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.r#type {
        let mut array_3 = object.key("Type").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.report_context {
        #[allow(unused_mut)]
        let mut object_6 = object.key("ReportContext").start_object();
        crate::protocol_serde::shape_report_context::ser_report_context(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.report_frequency {
        #[allow(unused_mut)]
        let mut object_8 = object.key("ReportFrequency").start_object();
        crate::protocol_serde::shape_report_frequency::ser_report_frequency(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.client_token {
        object.key("ClientToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.description {
        object.key("Description").string(var_10.as_str());
    }
    if let Some(var_11) = &input.tags {
        let mut array_12 = object.key("Tags").start_array();
        for item_13 in var_11 {
            {
                #[allow(unused_mut)]
                let mut object_14 = array_12.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_14, item_13)?;
                object_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
