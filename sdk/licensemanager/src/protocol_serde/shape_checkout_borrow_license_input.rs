// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_checkout_borrow_license_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::checkout_borrow_license::CheckoutBorrowLicenseInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.license_arn {
        object.key("LicenseArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.entitlements {
        let mut array_3 = object.key("Entitlements").start_array();
        for item_4 in var_2 {
            {
                #[allow(unused_mut)]
                let mut object_5 = array_3.value().start_object();
                crate::protocol_serde::shape_entitlement_data::ser_entitlement_data(&mut object_5, item_4)?;
                object_5.finish();
            }
        }
        array_3.finish();
    }
    if let Some(var_6) = &input.digital_signature_method {
        object.key("DigitalSignatureMethod").string(var_6.as_str());
    }
    if let Some(var_7) = &input.node_id {
        object.key("NodeId").string(var_7.as_str());
    }
    if let Some(var_8) = &input.checkout_metadata {
        let mut array_9 = object.key("CheckoutMetadata").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_metadata::ser_metadata(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.client_token {
        object.key("ClientToken").string(var_12.as_str());
    }
    Ok(())
}
