// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListUsageForLicenseConfiguration`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_configuration_arn(impl Into<String>)`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::license_configuration_arn) / [`set_license_configuration_arn(Option<String>)`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::set_license_configuration_arn): <p>Amazon Resource Name (ARN) of the license configuration.</p>
    ///   - [`max_results(i32)`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::max_results) / [`set_max_results(Option<i32>)`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::set_max_results): <p>Maximum number of results to return in a single call.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::set_next_token): <p>Token for the next set of results.</p>
    ///   - [`filters(Vec<Filter>)`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::set_filters): <p>Filters to scope the results. The following filters and logical operators are supported:</p>  <ul>   <li> <p> <code>resourceArn</code> - The ARN of the license configuration resource. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li>   <li> <p> <code>resourceType</code> - The resource type (<code>EC2_INSTANCE</code> | <code>EC2_HOST</code> | <code>EC2_AMI</code> | <code>SYSTEMS_MANAGER_MANAGED_INSTANCE</code>). Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li>   <li> <p> <code>resourceAccount</code> - The ID of the account that owns the resource. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li>  </ul>
    /// - On success, responds with [`ListUsageForLicenseConfigurationOutput`](crate::operation::list_usage_for_license_configuration::ListUsageForLicenseConfigurationOutput) with field(s):
    ///   - [`license_configuration_usage_list(Option<Vec<LicenseConfigurationUsage>>)`](crate::operation::list_usage_for_license_configuration::ListUsageForLicenseConfigurationOutput::license_configuration_usage_list): <p>Information about the license configurations.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::list_usage_for_license_configuration::ListUsageForLicenseConfigurationOutput::next_token): <p>Token for the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListUsageForLicenseConfigurationError>`](crate::operation::list_usage_for_license_configuration::ListUsageForLicenseConfigurationError)
    pub fn list_usage_for_license_configuration(&self) -> crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder{
        crate::operation::list_usage_for_license_configuration::builders::ListUsageForLicenseConfigurationFluentBuilder::new(self.handle.clone())
    }
}
