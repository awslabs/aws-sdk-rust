// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLicenseVersion`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_arn(impl Into<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::license_arn) / [`set_license_arn(Option<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_license_arn): <p>Amazon Resource Name (ARN) of the license.</p>
    ///   - [`license_name(impl Into<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::license_name) / [`set_license_name(Option<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_license_name): <p>License name.</p>
    ///   - [`product_name(impl Into<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::product_name) / [`set_product_name(Option<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_product_name): <p>Product name.</p>
    ///   - [`issuer(Issuer)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::issuer) / [`set_issuer(Option<Issuer>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_issuer): <p>License issuer.</p>
    ///   - [`home_region(impl Into<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::home_region) / [`set_home_region(Option<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_home_region): <p>Home Region of the license.</p>
    ///   - [`validity(DatetimeRange)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::validity) / [`set_validity(Option<DatetimeRange>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_validity): <p>Date and time range during which the license is valid, in ISO8601-UTC format.</p>
    ///   - [`license_metadata(Vec<Metadata>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::license_metadata) / [`set_license_metadata(Option<Vec<Metadata>>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_license_metadata): <p>Information about the license.</p>
    ///   - [`entitlements(Vec<Entitlement>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::entitlements) / [`set_entitlements(Option<Vec<Entitlement>>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_entitlements): <p>License entitlements.</p>
    ///   - [`consumption_configuration(ConsumptionConfiguration)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::consumption_configuration) / [`set_consumption_configuration(Option<ConsumptionConfiguration>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_consumption_configuration): <p>Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage.</p>
    ///   - [`status(LicenseStatus)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::status) / [`set_status(Option<LicenseStatus>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_status): <p>License status.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`source_version(impl Into<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::source_version) / [`set_source_version(Option<String>)`](crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::set_source_version): <p>Current version of the license.</p>
    /// - On success, responds with [`CreateLicenseVersionOutput`](crate::operation::create_license_version::CreateLicenseVersionOutput) with field(s):
    ///   - [`license_arn(Option<String>)`](crate::operation::create_license_version::CreateLicenseVersionOutput::license_arn): <p>License ARN.</p>
    ///   - [`version(Option<String>)`](crate::operation::create_license_version::CreateLicenseVersionOutput::version): <p>New version of the license.</p>
    ///   - [`status(Option<LicenseStatus>)`](crate::operation::create_license_version::CreateLicenseVersionOutput::status): <p>License status.</p>
    /// - On failure, responds with [`SdkError<CreateLicenseVersionError>`](crate::operation::create_license_version::CreateLicenseVersionError)
    pub fn create_license_version(
        &self,
    ) -> crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder {
        crate::operation::create_license_version::builders::CreateLicenseVersionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
