// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLicenseConfiguration`](crate::client::fluent_builders::UpdateLicenseConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_configuration_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::license_configuration_arn) / [`set_license_configuration_arn(Option<String>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_license_configuration_arn): <p>Amazon Resource Name (ARN) of the license configuration.</p>
    ///   - [`license_configuration_status(LicenseConfigurationStatus)`](crate::client::fluent_builders::UpdateLicenseConfiguration::license_configuration_status) / [`set_license_configuration_status(Option<LicenseConfigurationStatus>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_license_configuration_status): <p>New status of the license configuration.</p>
    ///   - [`license_rules(Vec<String>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::license_rules) / [`set_license_rules(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_license_rules): <p>New license rule. The only rule that you can add after you create a license configuration is licenseAffinityToHost.</p>
    ///   - [`license_count(i64)`](crate::client::fluent_builders::UpdateLicenseConfiguration::license_count) / [`set_license_count(Option<i64>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_license_count): <p>New number of licenses managed by the license configuration.</p>
    ///   - [`license_count_hard_limit(bool)`](crate::client::fluent_builders::UpdateLicenseConfiguration::license_count_hard_limit) / [`set_license_count_hard_limit(Option<bool>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_license_count_hard_limit): <p>New hard limit of the number of available licenses.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_name): <p>New name of the license configuration.</p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_description): <p>New description of the license configuration.</p>
    ///   - [`product_information_list(Vec<ProductInformation>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::product_information_list) / [`set_product_information_list(Option<Vec<ProductInformation>>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_product_information_list): <p>New product information.</p>
    ///   - [`disassociate_when_not_found(bool)`](crate::client::fluent_builders::UpdateLicenseConfiguration::disassociate_when_not_found) / [`set_disassociate_when_not_found(Option<bool>)`](crate::client::fluent_builders::UpdateLicenseConfiguration::set_disassociate_when_not_found): <p>When true, disassociates a resource when software is uninstalled.</p>
    /// - On success, responds with [`UpdateLicenseConfigurationOutput`](crate::output::UpdateLicenseConfigurationOutput)
    /// - On failure, responds with [`SdkError<UpdateLicenseConfigurationError>`](crate::error::UpdateLicenseConfigurationError)
    pub fn update_license_configuration(
        &self,
    ) -> crate::client::fluent_builders::UpdateLicenseConfiguration {
        crate::client::fluent_builders::UpdateLicenseConfiguration::new(self.handle.clone())
    }
}
