// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLicenseConfiguration`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_configuration_arn(impl Into<String>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::license_configuration_arn) / [`set_license_configuration_arn(Option<String>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_license_configuration_arn):<br>required: **true**<br><p>Amazon Resource Name (ARN) of the license configuration.</p><br>
    ///   - [`license_configuration_status(LicenseConfigurationStatus)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::license_configuration_status) / [`set_license_configuration_status(Option<LicenseConfigurationStatus>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_license_configuration_status):<br>required: **false**<br><p>New status of the license configuration.</p><br>
    ///   - [`license_rules(impl Into<String>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::license_rules) / [`set_license_rules(Option<Vec::<String>>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_license_rules):<br>required: **false**<br><p>New license rule. The only rule that you can add after you create a license configuration is licenseAffinityToHost.</p><br>
    ///   - [`license_count(i64)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::license_count) / [`set_license_count(Option<i64>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_license_count):<br>required: **false**<br><p>New number of licenses managed by the license configuration.</p><br>
    ///   - [`license_count_hard_limit(bool)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::license_count_hard_limit) / [`set_license_count_hard_limit(Option<bool>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_license_count_hard_limit):<br>required: **false**<br><p>New hard limit of the number of available licenses.</p><br>
    ///   - [`name(impl Into<String>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_name):<br>required: **false**<br><p>New name of the license configuration.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_description):<br>required: **false**<br><p>New description of the license configuration.</p><br>
    ///   - [`product_information_list(ProductInformation)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::product_information_list) / [`set_product_information_list(Option<Vec::<ProductInformation>>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_product_information_list):<br>required: **false**<br><p>New product information.</p><br>
    ///   - [`disassociate_when_not_found(bool)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::disassociate_when_not_found) / [`set_disassociate_when_not_found(Option<bool>)`](crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::set_disassociate_when_not_found):<br>required: **false**<br><p>When true, disassociates a resource when software is uninstalled.</p><br>
    /// - On success, responds with [`UpdateLicenseConfigurationOutput`](crate::operation::update_license_configuration::UpdateLicenseConfigurationOutput)
    /// - On failure, responds with [`SdkError<UpdateLicenseConfigurationError>`](crate::operation::update_license_configuration::UpdateLicenseConfigurationError)
    pub fn update_license_configuration(&self) -> crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder {
        crate::operation::update_license_configuration::builders::UpdateLicenseConfigurationFluentBuilder::new(self.handle.clone())
    }
}
