// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CheckoutLicense`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`product_sku(impl Into<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::product_sku) / [`set_product_sku(Option<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::set_product_sku):<br>required: **true**<br><p>Product SKU.</p><br>
    ///   - [`checkout_type(CheckoutType)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::checkout_type) / [`set_checkout_type(Option<CheckoutType>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::set_checkout_type):<br>required: **true**<br><p>Checkout type.</p><br>
    ///   - [`key_fingerprint(impl Into<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::key_fingerprint) / [`set_key_fingerprint(Option<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::set_key_fingerprint):<br>required: **true**<br><p>Key fingerprint identifying the license.</p><br>
    ///   - [`entitlements(EntitlementData)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::entitlements) / [`set_entitlements(Option<Vec::<EntitlementData>>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::set_entitlements):<br>required: **true**<br><p>License entitlements.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::set_client_token):<br>required: **true**<br><p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p><br>
    ///   - [`beneficiary(impl Into<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::beneficiary) / [`set_beneficiary(Option<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::set_beneficiary):<br>required: **false**<br><p>License beneficiary.</p><br>
    ///   - [`node_id(impl Into<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::node_id) / [`set_node_id(Option<String>)`](crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::set_node_id):<br>required: **false**<br><p>Node ID.</p><br>
    /// - On success, responds with [`CheckoutLicenseOutput`](crate::operation::checkout_license::CheckoutLicenseOutput) with field(s):
    ///   - [`checkout_type(Option<CheckoutType>)`](crate::operation::checkout_license::CheckoutLicenseOutput::checkout_type): <p>Checkout type.</p>
    ///   - [`license_consumption_token(Option<String>)`](crate::operation::checkout_license::CheckoutLicenseOutput::license_consumption_token): <p>License consumption token.</p>
    ///   - [`entitlements_allowed(Option<Vec::<EntitlementData>>)`](crate::operation::checkout_license::CheckoutLicenseOutput::entitlements_allowed): <p>Allowed license entitlements.</p>
    ///   - [`signed_token(Option<String>)`](crate::operation::checkout_license::CheckoutLicenseOutput::signed_token): <p>Signed token.</p>
    ///   - [`node_id(Option<String>)`](crate::operation::checkout_license::CheckoutLicenseOutput::node_id): <p>Node ID.</p>
    ///   - [`issued_at(Option<String>)`](crate::operation::checkout_license::CheckoutLicenseOutput::issued_at): <p>Date and time at which the license checkout is issued.</p>
    ///   - [`expiration(Option<String>)`](crate::operation::checkout_license::CheckoutLicenseOutput::expiration): <p>Date and time at which the license checkout expires.</p>
    ///   - [`license_arn(Option<String>)`](crate::operation::checkout_license::CheckoutLicenseOutput::license_arn): <p>Amazon Resource Name (ARN) of the checkout license.</p>
    /// - On failure, responds with [`SdkError<CheckoutLicenseError>`](crate::operation::checkout_license::CheckoutLicenseError)
    pub fn checkout_license(&self) -> crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder {
        crate::operation::checkout_license::builders::CheckoutLicenseFluentBuilder::new(self.handle.clone())
    }
}
