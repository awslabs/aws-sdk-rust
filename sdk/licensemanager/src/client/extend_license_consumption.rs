// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ExtendLicenseConsumption`](crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_consumption_token(impl Into<String>)`](crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionFluentBuilder::license_consumption_token) / [`set_license_consumption_token(Option<String>)`](crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionFluentBuilder::set_license_consumption_token): <p>License consumption token.</p>
    ///   - [`dry_run(bool)`](crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionFluentBuilder::dry_run) / [`set_dry_run(bool)`](crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionFluentBuilder::set_dry_run): <p>Checks whether you have the required permissions for the action, without actually making the request. Provides an error response if you do not have the required permissions.</p>
    /// - On success, responds with [`ExtendLicenseConsumptionOutput`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionOutput) with field(s):
    ///   - [`license_consumption_token(Option<String>)`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionOutput::license_consumption_token): <p>License consumption token.</p>
    ///   - [`expiration(Option<String>)`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionOutput::expiration): <p>Date and time at which the license consumption expires.</p>
    /// - On failure, responds with [`SdkError<ExtendLicenseConsumptionError>`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionError)
    pub fn extend_license_consumption(
        &self,
    ) -> crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionFluentBuilder
    {
        crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionFluentBuilder::new(self.handle.clone())
    }
}
