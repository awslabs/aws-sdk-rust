// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateLicenseManagerReportGenerator`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_manager_report_generator_arn(impl Into<String>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::license_manager_report_generator_arn) / [`set_license_manager_report_generator_arn(Option<String>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::set_license_manager_report_generator_arn): <p>Amazon Resource Name (ARN) of the report generator to update.</p>
    ///   - [`report_generator_name(impl Into<String>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::report_generator_name) / [`set_report_generator_name(Option<String>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::set_report_generator_name): <p>Name of the report generator.</p>
    ///   - [`r#type(Vec<ReportType>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::type) / [`set_type(Option<Vec<ReportType>>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::set_type): <p>Type of reports to generate. The following report types are supported:</p>  <ul>   <li> <p>License configuration report - Reports the number and details of consumed licenses for a license configuration.</p> </li>   <li> <p>Resource report - Reports the tracked licenses and resource consumption for a license configuration.</p> </li>  </ul>
    ///   - [`report_context(ReportContext)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::report_context) / [`set_report_context(Option<ReportContext>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::set_report_context): <p>The report context.</p>
    ///   - [`report_frequency(ReportFrequency)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::report_frequency) / [`set_report_frequency(Option<ReportFrequency>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::set_report_frequency): <p>Frequency by which reports are generated.</p>
    ///   - [`client_token(impl Into<String>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`description(impl Into<String>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::set_description): <p>Description of the report generator.</p>
    /// - On success, responds with [`UpdateLicenseManagerReportGeneratorOutput`](crate::operation::update_license_manager_report_generator::UpdateLicenseManagerReportGeneratorOutput)
    /// - On failure, responds with [`SdkError<UpdateLicenseManagerReportGeneratorError>`](crate::operation::update_license_manager_report_generator::UpdateLicenseManagerReportGeneratorError)
    pub fn update_license_manager_report_generator(&self) -> crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder{
        crate::operation::update_license_manager_report_generator::builders::UpdateLicenseManagerReportGeneratorFluentBuilder::new(self.handle.clone())
    }
}
