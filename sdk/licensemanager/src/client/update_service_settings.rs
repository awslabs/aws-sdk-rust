// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateServiceSettings`](crate::client::fluent_builders::UpdateServiceSettings) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`s3_bucket_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateServiceSettings::s3_bucket_arn) / [`set_s3_bucket_arn(Option<String>)`](crate::client::fluent_builders::UpdateServiceSettings::set_s3_bucket_arn): <p>Amazon Resource Name (ARN) of the Amazon S3 bucket where the License Manager information is stored.</p>
    ///   - [`sns_topic_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateServiceSettings::sns_topic_arn) / [`set_sns_topic_arn(Option<String>)`](crate::client::fluent_builders::UpdateServiceSettings::set_sns_topic_arn): <p>Amazon Resource Name (ARN) of the Amazon SNS topic used for License Manager alerts.</p>
    ///   - [`organization_configuration(OrganizationConfiguration)`](crate::client::fluent_builders::UpdateServiceSettings::organization_configuration) / [`set_organization_configuration(Option<OrganizationConfiguration>)`](crate::client::fluent_builders::UpdateServiceSettings::set_organization_configuration): <p>Enables integration with Organizations for cross-account discovery.</p>
    ///   - [`enable_cross_accounts_discovery(bool)`](crate::client::fluent_builders::UpdateServiceSettings::enable_cross_accounts_discovery) / [`set_enable_cross_accounts_discovery(Option<bool>)`](crate::client::fluent_builders::UpdateServiceSettings::set_enable_cross_accounts_discovery): <p>Activates cross-account discovery.</p>
    /// - On success, responds with [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput)
    /// - On failure, responds with [`SdkError<UpdateServiceSettingsError>`](crate::error::UpdateServiceSettingsError)
    pub fn update_service_settings(&self) -> crate::client::fluent_builders::UpdateServiceSettings {
        crate::client::fluent_builders::UpdateServiceSettings::new(self.handle.clone())
    }
}
