// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CheckoutBorrowLicense`](crate::client::fluent_builders::CheckoutBorrowLicense) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_arn(impl Into<String>)`](crate::client::fluent_builders::CheckoutBorrowLicense::license_arn) / [`set_license_arn(Option<String>)`](crate::client::fluent_builders::CheckoutBorrowLicense::set_license_arn): <p>Amazon Resource Name (ARN) of the license. The license must use the borrow consumption configuration.</p>
    ///   - [`entitlements(Vec<EntitlementData>)`](crate::client::fluent_builders::CheckoutBorrowLicense::entitlements) / [`set_entitlements(Option<Vec<EntitlementData>>)`](crate::client::fluent_builders::CheckoutBorrowLicense::set_entitlements): <p>License entitlements. Partial checkouts are not supported.</p>
    ///   - [`digital_signature_method(DigitalSignatureMethod)`](crate::client::fluent_builders::CheckoutBorrowLicense::digital_signature_method) / [`set_digital_signature_method(Option<DigitalSignatureMethod>)`](crate::client::fluent_builders::CheckoutBorrowLicense::set_digital_signature_method): <p>Digital signature method. The possible value is JSON Web Signature (JWS) algorithm PS384. For more information, see <a href="https://tools.ietf.org/html/rfc7518#section-3.5">RFC 7518 Digital Signature with RSASSA-PSS</a>.</p>
    ///   - [`node_id(impl Into<String>)`](crate::client::fluent_builders::CheckoutBorrowLicense::node_id) / [`set_node_id(Option<String>)`](crate::client::fluent_builders::CheckoutBorrowLicense::set_node_id): <p>Node ID.</p>
    ///   - [`checkout_metadata(Vec<Metadata>)`](crate::client::fluent_builders::CheckoutBorrowLicense::checkout_metadata) / [`set_checkout_metadata(Option<Vec<Metadata>>)`](crate::client::fluent_builders::CheckoutBorrowLicense::set_checkout_metadata): <p>Information about constraints.</p>
    ///   - [`client_token(impl Into<String>)`](crate::client::fluent_builders::CheckoutBorrowLicense::client_token) / [`set_client_token(Option<String>)`](crate::client::fluent_builders::CheckoutBorrowLicense::set_client_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    /// - On success, responds with [`CheckoutBorrowLicenseOutput`](crate::output::CheckoutBorrowLicenseOutput) with field(s):
    ///   - [`license_arn(Option<String>)`](crate::output::CheckoutBorrowLicenseOutput::license_arn): <p>Amazon Resource Name (ARN) of the license.</p>
    ///   - [`license_consumption_token(Option<String>)`](crate::output::CheckoutBorrowLicenseOutput::license_consumption_token): <p>License consumption token.</p>
    ///   - [`entitlements_allowed(Option<Vec<EntitlementData>>)`](crate::output::CheckoutBorrowLicenseOutput::entitlements_allowed): <p>Allowed license entitlements.</p>
    ///   - [`node_id(Option<String>)`](crate::output::CheckoutBorrowLicenseOutput::node_id): <p>Node ID.</p>
    ///   - [`signed_token(Option<String>)`](crate::output::CheckoutBorrowLicenseOutput::signed_token): <p>Signed token.</p>
    ///   - [`issued_at(Option<String>)`](crate::output::CheckoutBorrowLicenseOutput::issued_at): <p>Date and time at which the license checkout is issued.</p>
    ///   - [`expiration(Option<String>)`](crate::output::CheckoutBorrowLicenseOutput::expiration): <p>Date and time at which the license checkout expires.</p>
    ///   - [`checkout_metadata(Option<Vec<Metadata>>)`](crate::output::CheckoutBorrowLicenseOutput::checkout_metadata): <p>Information about constraints.</p>
    /// - On failure, responds with [`SdkError<CheckoutBorrowLicenseError>`](crate::error::CheckoutBorrowLicenseError)
    pub fn checkout_borrow_license(&self) -> crate::client::fluent_builders::CheckoutBorrowLicense {
        crate::client::fluent_builders::CheckoutBorrowLicense::new(self.handle.clone())
    }
}
