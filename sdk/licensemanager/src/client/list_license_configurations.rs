// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLicenseConfigurations`](crate::client::fluent_builders::ListLicenseConfigurations) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_configuration_arns(Vec<String>)`](crate::client::fluent_builders::ListLicenseConfigurations::license_configuration_arns) / [`set_license_configuration_arns(Option<Vec<String>>)`](crate::client::fluent_builders::ListLicenseConfigurations::set_license_configuration_arns): <p>Amazon Resource Names (ARN) of the license configurations.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLicenseConfigurations::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListLicenseConfigurations::set_max_results): <p>Maximum number of results to return in a single call.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLicenseConfigurations::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLicenseConfigurations::set_next_token): <p>Token for the next set of results.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListLicenseConfigurations::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListLicenseConfigurations::set_filters): <p>Filters to scope the results. The following filters and logical operators are supported:</p>  <ul>   <li> <p> <code>licenseCountingType</code> - The dimension for which licenses are counted. Possible values are <code>vCPU</code> | <code>Instance</code> | <code>Core</code> | <code>Socket</code>. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li>   <li> <p> <code>enforceLicenseCount</code> - A Boolean value that indicates whether hard license enforcement is used. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li>   <li> <p> <code>usagelimitExceeded</code> - A Boolean value that indicates whether the available licenses have been exceeded. Logical operators are <code>EQUALS</code> | <code>NOT_EQUALS</code>.</p> </li>  </ul>
    /// - On success, responds with [`ListLicenseConfigurationsOutput`](crate::output::ListLicenseConfigurationsOutput) with field(s):
    ///   - [`license_configurations(Option<Vec<LicenseConfiguration>>)`](crate::output::ListLicenseConfigurationsOutput::license_configurations): <p>Information about the license configurations.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLicenseConfigurationsOutput::next_token): <p>Token for the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListLicenseConfigurationsError>`](crate::error::ListLicenseConfigurationsError)
    pub fn list_license_configurations(
        &self,
    ) -> crate::client::fluent_builders::ListLicenseConfigurations {
        crate::client::fluent_builders::ListLicenseConfigurations::new(self.handle.clone())
    }
}
