// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListLicenses`](crate::client::fluent_builders::ListLicenses) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_arns(Vec<String>)`](crate::client::fluent_builders::ListLicenses::license_arns) / [`set_license_arns(Option<Vec<String>>)`](crate::client::fluent_builders::ListLicenses::set_license_arns): <p>Amazon Resource Names (ARNs) of the licenses.</p>
    ///   - [`filters(Vec<Filter>)`](crate::client::fluent_builders::ListLicenses::filters) / [`set_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::ListLicenses::set_filters): <p>Filters to scope the results. The following filters are supported:</p>  <ul>   <li> <p> <code>Beneficiary</code> </p> </li>   <li> <p> <code>ProductSKU</code> </p> </li>   <li> <p> <code>Fingerprint</code> </p> </li>   <li> <p> <code>Status</code> </p> </li>  </ul>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListLicenses::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListLicenses::set_next_token): <p>Token for the next set of results.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListLicenses::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListLicenses::set_max_results): <p>Maximum number of results to return in a single call.</p>
    /// - On success, responds with [`ListLicensesOutput`](crate::output::ListLicensesOutput) with field(s):
    ///   - [`licenses(Option<Vec<License>>)`](crate::output::ListLicensesOutput::licenses): <p>License details.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListLicensesOutput::next_token): <p>Token for the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListLicensesError>`](crate::error::ListLicensesError)
    pub fn list_licenses(&self) -> crate::client::fluent_builders::ListLicenses {
        crate::client::fluent_builders::ListLicenses::new(self.handle.clone())
    }
}
