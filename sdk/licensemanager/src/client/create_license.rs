// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateLicense`](crate::operation::create_license::builders::CreateLicenseFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`license_name(impl Into<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::license_name) / [`set_license_name(Option<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_license_name):<br>required: **true**<br><p>License name.</p><br>
    ///   - [`product_name(impl Into<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::product_name) / [`set_product_name(Option<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_product_name):<br>required: **true**<br><p>Product name.</p><br>
    ///   - [`product_sku(impl Into<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::product_sku) / [`set_product_sku(Option<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_product_sku):<br>required: **true**<br><p>Product SKU.</p><br>
    ///   - [`issuer(Issuer)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::issuer) / [`set_issuer(Option<Issuer>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_issuer):<br>required: **true**<br><p>License issuer.</p><br>
    ///   - [`home_region(impl Into<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::home_region) / [`set_home_region(Option<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_home_region):<br>required: **true**<br><p>Home Region for the license.</p><br>
    ///   - [`validity(DatetimeRange)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::validity) / [`set_validity(Option<DatetimeRange>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_validity):<br>required: **true**<br><p>Date and time range during which the license is valid, in ISO8601-UTC format.</p><br>
    ///   - [`entitlements(Entitlement)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::entitlements) / [`set_entitlements(Option<Vec::<Entitlement>>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_entitlements):<br>required: **true**<br><p>License entitlements.</p><br>
    ///   - [`beneficiary(impl Into<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::beneficiary) / [`set_beneficiary(Option<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_beneficiary):<br>required: **true**<br><p>License beneficiary.</p><br>
    ///   - [`consumption_configuration(ConsumptionConfiguration)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::consumption_configuration) / [`set_consumption_configuration(Option<ConsumptionConfiguration>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_consumption_configuration):<br>required: **true**<br><p>Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage.</p><br>
    ///   - [`license_metadata(Metadata)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::license_metadata) / [`set_license_metadata(Option<Vec::<Metadata>>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_license_metadata):<br>required: **false**<br><p>Information about the license.</p><br>
    ///   - [`client_token(impl Into<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::client_token) / [`set_client_token(Option<String>)`](crate::operation::create_license::builders::CreateLicenseFluentBuilder::set_client_token):<br>required: **true**<br><p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p><br>
    /// - On success, responds with [`CreateLicenseOutput`](crate::operation::create_license::CreateLicenseOutput) with field(s):
    ///   - [`license_arn(Option<String>)`](crate::operation::create_license::CreateLicenseOutput::license_arn): <p>Amazon Resource Name (ARN) of the license.</p>
    ///   - [`status(Option<LicenseStatus>)`](crate::operation::create_license::CreateLicenseOutput::status): <p>License status.</p>
    ///   - [`version(Option<String>)`](crate::operation::create_license::CreateLicenseOutput::version): <p>License version.</p>
    /// - On failure, responds with [`SdkError<CreateLicenseError>`](crate::operation::create_license::CreateLicenseError)
    pub fn create_license(&self) -> crate::operation::create_license::builders::CreateLicenseFluentBuilder {
        crate::operation::create_license::builders::CreateLicenseFluentBuilder::new(self.handle.clone())
    }
}
