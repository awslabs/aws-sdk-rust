// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateServiceSettingsOutput {}
impl std::fmt::Debug for UpdateServiceSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateServiceSettingsOutput");
        formatter.finish()
    }
}
/// See [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput)
pub mod update_service_settings_output {
    /// A builder for [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput)
        pub fn build(self) -> crate::output::UpdateServiceSettingsOutput {
            crate::output::UpdateServiceSettingsOutput {}
        }
    }
}
impl UpdateServiceSettingsOutput {
    /// Creates a new builder-style object to manufacture [`UpdateServiceSettingsOutput`](crate::output::UpdateServiceSettingsOutput)
    pub fn builder() -> crate::output::update_service_settings_output::Builder {
        crate::output::update_service_settings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateLicenseSpecificationsForResourceOutput {}
impl std::fmt::Debug for UpdateLicenseSpecificationsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLicenseSpecificationsForResourceOutput");
        formatter.finish()
    }
}
/// See [`UpdateLicenseSpecificationsForResourceOutput`](crate::output::UpdateLicenseSpecificationsForResourceOutput)
pub mod update_license_specifications_for_resource_output {
    /// A builder for [`UpdateLicenseSpecificationsForResourceOutput`](crate::output::UpdateLicenseSpecificationsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateLicenseSpecificationsForResourceOutput`](crate::output::UpdateLicenseSpecificationsForResourceOutput)
        pub fn build(self) -> crate::output::UpdateLicenseSpecificationsForResourceOutput {
            crate::output::UpdateLicenseSpecificationsForResourceOutput {}
        }
    }
}
impl UpdateLicenseSpecificationsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLicenseSpecificationsForResourceOutput`](crate::output::UpdateLicenseSpecificationsForResourceOutput)
    pub fn builder() -> crate::output::update_license_specifications_for_resource_output::Builder {
        crate::output::update_license_specifications_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateLicenseManagerReportGeneratorOutput {}
impl std::fmt::Debug for UpdateLicenseManagerReportGeneratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLicenseManagerReportGeneratorOutput");
        formatter.finish()
    }
}
/// See [`UpdateLicenseManagerReportGeneratorOutput`](crate::output::UpdateLicenseManagerReportGeneratorOutput)
pub mod update_license_manager_report_generator_output {
    /// A builder for [`UpdateLicenseManagerReportGeneratorOutput`](crate::output::UpdateLicenseManagerReportGeneratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateLicenseManagerReportGeneratorOutput`](crate::output::UpdateLicenseManagerReportGeneratorOutput)
        pub fn build(self) -> crate::output::UpdateLicenseManagerReportGeneratorOutput {
            crate::output::UpdateLicenseManagerReportGeneratorOutput {}
        }
    }
}
impl UpdateLicenseManagerReportGeneratorOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLicenseManagerReportGeneratorOutput`](crate::output::UpdateLicenseManagerReportGeneratorOutput)
    pub fn builder() -> crate::output::update_license_manager_report_generator_output::Builder {
        crate::output::update_license_manager_report_generator_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateLicenseConfigurationOutput {}
impl std::fmt::Debug for UpdateLicenseConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateLicenseConfigurationOutput");
        formatter.finish()
    }
}
/// See [`UpdateLicenseConfigurationOutput`](crate::output::UpdateLicenseConfigurationOutput)
pub mod update_license_configuration_output {
    /// A builder for [`UpdateLicenseConfigurationOutput`](crate::output::UpdateLicenseConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UpdateLicenseConfigurationOutput`](crate::output::UpdateLicenseConfigurationOutput)
        pub fn build(self) -> crate::output::UpdateLicenseConfigurationOutput {
            crate::output::UpdateLicenseConfigurationOutput {}
        }
    }
}
impl UpdateLicenseConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`UpdateLicenseConfigurationOutput`](crate::output::UpdateLicenseConfigurationOutput)
    pub fn builder() -> crate::output::update_license_configuration_output::Builder {
        crate::output::update_license_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RejectGrantOutput {
    /// <p>Grant ARN.</p>
    pub grant_arn: std::option::Option<std::string::String>,
    /// <p>Grant status.</p>
    pub status: std::option::Option<crate::model::GrantStatus>,
    /// <p>Grant version.</p>
    pub version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for RejectGrantOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RejectGrantOutput");
        formatter.field("grant_arn", &self.grant_arn);
        formatter.field("status", &self.status);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
/// See [`RejectGrantOutput`](crate::output::RejectGrantOutput)
pub mod reject_grant_output {
    /// A builder for [`RejectGrantOutput`](crate::output::RejectGrantOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) grant_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::GrantStatus>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Grant ARN.</p>
        pub fn grant_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.grant_arn = Some(input.into());
            self
        }
        pub fn set_grant_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.grant_arn = input;
            self
        }
        /// <p>Grant status.</p>
        pub fn status(mut self, input: crate::model::GrantStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<crate::model::GrantStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>Grant version.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`RejectGrantOutput`](crate::output::RejectGrantOutput)
        pub fn build(self) -> crate::output::RejectGrantOutput {
            crate::output::RejectGrantOutput {
                grant_arn: self.grant_arn,
                status: self.status,
                version: self.version,
            }
        }
    }
}
impl RejectGrantOutput {
    /// Creates a new builder-style object to manufacture [`RejectGrantOutput`](crate::output::RejectGrantOutput)
    pub fn builder() -> crate::output::reject_grant_output::Builder {
        crate::output::reject_grant_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListUsageForLicenseConfigurationOutput {
    /// <p>Information about the license configurations.</p>
    pub license_configuration_usage_list:
        std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationUsage>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListUsageForLicenseConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListUsageForLicenseConfigurationOutput");
        formatter.field(
            "license_configuration_usage_list",
            &self.license_configuration_usage_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListUsageForLicenseConfigurationOutput`](crate::output::ListUsageForLicenseConfigurationOutput)
pub mod list_usage_for_license_configuration_output {
    /// A builder for [`ListUsageForLicenseConfigurationOutput`](crate::output::ListUsageForLicenseConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_configuration_usage_list:
            std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationUsage>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn license_configuration_usage_list(
            mut self,
            input: impl Into<crate::model::LicenseConfigurationUsage>,
        ) -> Self {
            let mut v = self.license_configuration_usage_list.unwrap_or_default();
            v.push(input.into());
            self.license_configuration_usage_list = Some(v);
            self
        }
        pub fn set_license_configuration_usage_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationUsage>>,
        ) -> Self {
            self.license_configuration_usage_list = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListUsageForLicenseConfigurationOutput`](crate::output::ListUsageForLicenseConfigurationOutput)
        pub fn build(self) -> crate::output::ListUsageForLicenseConfigurationOutput {
            crate::output::ListUsageForLicenseConfigurationOutput {
                license_configuration_usage_list: self.license_configuration_usage_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListUsageForLicenseConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`ListUsageForLicenseConfigurationOutput`](crate::output::ListUsageForLicenseConfigurationOutput)
    pub fn builder() -> crate::output::list_usage_for_license_configuration_output::Builder {
        crate::output::list_usage_for_license_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTokensOutput {
    /// <p>Received token details.</p>
    pub tokens: std::option::Option<std::vec::Vec<crate::model::TokenData>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListTokensOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTokensOutput");
        formatter.field("tokens", &self.tokens);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListTokensOutput`](crate::output::ListTokensOutput)
pub mod list_tokens_output {
    /// A builder for [`ListTokensOutput`](crate::output::ListTokensOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tokens: std::option::Option<std::vec::Vec<crate::model::TokenData>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn tokens(mut self, input: impl Into<crate::model::TokenData>) -> Self {
            let mut v = self.tokens.unwrap_or_default();
            v.push(input.into());
            self.tokens = Some(v);
            self
        }
        pub fn set_tokens(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::TokenData>>,
        ) -> Self {
            self.tokens = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTokensOutput`](crate::output::ListTokensOutput)
        pub fn build(self) -> crate::output::ListTokensOutput {
            crate::output::ListTokensOutput {
                tokens: self.tokens,
                next_token: self.next_token,
            }
        }
    }
}
impl ListTokensOutput {
    /// Creates a new builder-style object to manufacture [`ListTokensOutput`](crate::output::ListTokensOutput)
    pub fn builder() -> crate::output::list_tokens_output::Builder {
        crate::output::list_tokens_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>Information about the tags.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput { tags: self.tags }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListResourceInventoryOutput {
    /// <p>Information about the resources.</p>
    pub resource_inventory_list:
        std::option::Option<std::vec::Vec<crate::model::ResourceInventory>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListResourceInventoryOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListResourceInventoryOutput");
        formatter.field("resource_inventory_list", &self.resource_inventory_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListResourceInventoryOutput`](crate::output::ListResourceInventoryOutput)
pub mod list_resource_inventory_output {
    /// A builder for [`ListResourceInventoryOutput`](crate::output::ListResourceInventoryOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) resource_inventory_list:
            std::option::Option<std::vec::Vec<crate::model::ResourceInventory>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn resource_inventory_list(
            mut self,
            input: impl Into<crate::model::ResourceInventory>,
        ) -> Self {
            let mut v = self.resource_inventory_list.unwrap_or_default();
            v.push(input.into());
            self.resource_inventory_list = Some(v);
            self
        }
        pub fn set_resource_inventory_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceInventory>>,
        ) -> Self {
            self.resource_inventory_list = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListResourceInventoryOutput`](crate::output::ListResourceInventoryOutput)
        pub fn build(self) -> crate::output::ListResourceInventoryOutput {
            crate::output::ListResourceInventoryOutput {
                resource_inventory_list: self.resource_inventory_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListResourceInventoryOutput {
    /// Creates a new builder-style object to manufacture [`ListResourceInventoryOutput`](crate::output::ListResourceInventoryOutput)
    pub fn builder() -> crate::output::list_resource_inventory_output::Builder {
        crate::output::list_resource_inventory_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListReceivedLicensesOutput {
    /// <p>Received license details.</p>
    pub licenses: std::option::Option<std::vec::Vec<crate::model::GrantedLicense>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListReceivedLicensesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListReceivedLicensesOutput");
        formatter.field("licenses", &self.licenses);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListReceivedLicensesOutput`](crate::output::ListReceivedLicensesOutput)
pub mod list_received_licenses_output {
    /// A builder for [`ListReceivedLicensesOutput`](crate::output::ListReceivedLicensesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) licenses: std::option::Option<std::vec::Vec<crate::model::GrantedLicense>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn licenses(mut self, input: impl Into<crate::model::GrantedLicense>) -> Self {
            let mut v = self.licenses.unwrap_or_default();
            v.push(input.into());
            self.licenses = Some(v);
            self
        }
        pub fn set_licenses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::GrantedLicense>>,
        ) -> Self {
            self.licenses = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListReceivedLicensesOutput`](crate::output::ListReceivedLicensesOutput)
        pub fn build(self) -> crate::output::ListReceivedLicensesOutput {
            crate::output::ListReceivedLicensesOutput {
                licenses: self.licenses,
                next_token: self.next_token,
            }
        }
    }
}
impl ListReceivedLicensesOutput {
    /// Creates a new builder-style object to manufacture [`ListReceivedLicensesOutput`](crate::output::ListReceivedLicensesOutput)
    pub fn builder() -> crate::output::list_received_licenses_output::Builder {
        crate::output::list_received_licenses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListReceivedGrantsOutput {
    /// <p>Received grant details.</p>
    pub grants: std::option::Option<std::vec::Vec<crate::model::Grant>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListReceivedGrantsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListReceivedGrantsOutput");
        formatter.field("grants", &self.grants);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListReceivedGrantsOutput`](crate::output::ListReceivedGrantsOutput)
pub mod list_received_grants_output {
    /// A builder for [`ListReceivedGrantsOutput`](crate::output::ListReceivedGrantsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) grants: std::option::Option<std::vec::Vec<crate::model::Grant>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn grants(mut self, input: impl Into<crate::model::Grant>) -> Self {
            let mut v = self.grants.unwrap_or_default();
            v.push(input.into());
            self.grants = Some(v);
            self
        }
        pub fn set_grants(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Grant>>,
        ) -> Self {
            self.grants = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListReceivedGrantsOutput`](crate::output::ListReceivedGrantsOutput)
        pub fn build(self) -> crate::output::ListReceivedGrantsOutput {
            crate::output::ListReceivedGrantsOutput {
                grants: self.grants,
                next_token: self.next_token,
            }
        }
    }
}
impl ListReceivedGrantsOutput {
    /// Creates a new builder-style object to manufacture [`ListReceivedGrantsOutput`](crate::output::ListReceivedGrantsOutput)
    pub fn builder() -> crate::output::list_received_grants_output::Builder {
        crate::output::list_received_grants_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLicenseVersionsOutput {
    /// <p>License details.</p>
    pub licenses: std::option::Option<std::vec::Vec<crate::model::License>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListLicenseVersionsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListLicenseVersionsOutput");
        formatter.field("licenses", &self.licenses);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListLicenseVersionsOutput`](crate::output::ListLicenseVersionsOutput)
pub mod list_license_versions_output {
    /// A builder for [`ListLicenseVersionsOutput`](crate::output::ListLicenseVersionsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) licenses: std::option::Option<std::vec::Vec<crate::model::License>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn licenses(mut self, input: impl Into<crate::model::License>) -> Self {
            let mut v = self.licenses.unwrap_or_default();
            v.push(input.into());
            self.licenses = Some(v);
            self
        }
        pub fn set_licenses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::License>>,
        ) -> Self {
            self.licenses = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListLicenseVersionsOutput`](crate::output::ListLicenseVersionsOutput)
        pub fn build(self) -> crate::output::ListLicenseVersionsOutput {
            crate::output::ListLicenseVersionsOutput {
                licenses: self.licenses,
                next_token: self.next_token,
            }
        }
    }
}
impl ListLicenseVersionsOutput {
    /// Creates a new builder-style object to manufacture [`ListLicenseVersionsOutput`](crate::output::ListLicenseVersionsOutput)
    pub fn builder() -> crate::output::list_license_versions_output::Builder {
        crate::output::list_license_versions_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLicenseSpecificationsForResourceOutput {
    /// <p>License configurations associated with a resource.</p>
    pub license_specifications:
        std::option::Option<std::vec::Vec<crate::model::LicenseSpecification>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListLicenseSpecificationsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListLicenseSpecificationsForResourceOutput");
        formatter.field("license_specifications", &self.license_specifications);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListLicenseSpecificationsForResourceOutput`](crate::output::ListLicenseSpecificationsForResourceOutput)
pub mod list_license_specifications_for_resource_output {
    /// A builder for [`ListLicenseSpecificationsForResourceOutput`](crate::output::ListLicenseSpecificationsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_specifications:
            std::option::Option<std::vec::Vec<crate::model::LicenseSpecification>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn license_specifications(
            mut self,
            input: impl Into<crate::model::LicenseSpecification>,
        ) -> Self {
            let mut v = self.license_specifications.unwrap_or_default();
            v.push(input.into());
            self.license_specifications = Some(v);
            self
        }
        pub fn set_license_specifications(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LicenseSpecification>>,
        ) -> Self {
            self.license_specifications = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListLicenseSpecificationsForResourceOutput`](crate::output::ListLicenseSpecificationsForResourceOutput)
        pub fn build(self) -> crate::output::ListLicenseSpecificationsForResourceOutput {
            crate::output::ListLicenseSpecificationsForResourceOutput {
                license_specifications: self.license_specifications,
                next_token: self.next_token,
            }
        }
    }
}
impl ListLicenseSpecificationsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListLicenseSpecificationsForResourceOutput`](crate::output::ListLicenseSpecificationsForResourceOutput)
    pub fn builder() -> crate::output::list_license_specifications_for_resource_output::Builder {
        crate::output::list_license_specifications_for_resource_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLicensesOutput {
    /// <p>License details.</p>
    pub licenses: std::option::Option<std::vec::Vec<crate::model::License>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListLicensesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListLicensesOutput");
        formatter.field("licenses", &self.licenses);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListLicensesOutput`](crate::output::ListLicensesOutput)
pub mod list_licenses_output {
    /// A builder for [`ListLicensesOutput`](crate::output::ListLicensesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) licenses: std::option::Option<std::vec::Vec<crate::model::License>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn licenses(mut self, input: impl Into<crate::model::License>) -> Self {
            let mut v = self.licenses.unwrap_or_default();
            v.push(input.into());
            self.licenses = Some(v);
            self
        }
        pub fn set_licenses(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::License>>,
        ) -> Self {
            self.licenses = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListLicensesOutput`](crate::output::ListLicensesOutput)
        pub fn build(self) -> crate::output::ListLicensesOutput {
            crate::output::ListLicensesOutput {
                licenses: self.licenses,
                next_token: self.next_token,
            }
        }
    }
}
impl ListLicensesOutput {
    /// Creates a new builder-style object to manufacture [`ListLicensesOutput`](crate::output::ListLicensesOutput)
    pub fn builder() -> crate::output::list_licenses_output::Builder {
        crate::output::list_licenses_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLicenseManagerReportGeneratorsOutput {
    /// <p>A report generator that creates periodic reports on your license configurations.</p>
    pub report_generators: std::option::Option<std::vec::Vec<crate::model::ReportGenerator>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListLicenseManagerReportGeneratorsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListLicenseManagerReportGeneratorsOutput");
        formatter.field("report_generators", &self.report_generators);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListLicenseManagerReportGeneratorsOutput`](crate::output::ListLicenseManagerReportGeneratorsOutput)
pub mod list_license_manager_report_generators_output {
    /// A builder for [`ListLicenseManagerReportGeneratorsOutput`](crate::output::ListLicenseManagerReportGeneratorsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) report_generators:
            std::option::Option<std::vec::Vec<crate::model::ReportGenerator>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn report_generators(
            mut self,
            input: impl Into<crate::model::ReportGenerator>,
        ) -> Self {
            let mut v = self.report_generators.unwrap_or_default();
            v.push(input.into());
            self.report_generators = Some(v);
            self
        }
        pub fn set_report_generators(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ReportGenerator>>,
        ) -> Self {
            self.report_generators = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListLicenseManagerReportGeneratorsOutput`](crate::output::ListLicenseManagerReportGeneratorsOutput)
        pub fn build(self) -> crate::output::ListLicenseManagerReportGeneratorsOutput {
            crate::output::ListLicenseManagerReportGeneratorsOutput {
                report_generators: self.report_generators,
                next_token: self.next_token,
            }
        }
    }
}
impl ListLicenseManagerReportGeneratorsOutput {
    /// Creates a new builder-style object to manufacture [`ListLicenseManagerReportGeneratorsOutput`](crate::output::ListLicenseManagerReportGeneratorsOutput)
    pub fn builder() -> crate::output::list_license_manager_report_generators_output::Builder {
        crate::output::list_license_manager_report_generators_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListLicenseConfigurationsOutput {
    /// <p>Information about the license configurations.</p>
    pub license_configurations:
        std::option::Option<std::vec::Vec<crate::model::LicenseConfiguration>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListLicenseConfigurationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListLicenseConfigurationsOutput");
        formatter.field("license_configurations", &self.license_configurations);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListLicenseConfigurationsOutput`](crate::output::ListLicenseConfigurationsOutput)
pub mod list_license_configurations_output {
    /// A builder for [`ListLicenseConfigurationsOutput`](crate::output::ListLicenseConfigurationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_configurations:
            std::option::Option<std::vec::Vec<crate::model::LicenseConfiguration>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn license_configurations(
            mut self,
            input: impl Into<crate::model::LicenseConfiguration>,
        ) -> Self {
            let mut v = self.license_configurations.unwrap_or_default();
            v.push(input.into());
            self.license_configurations = Some(v);
            self
        }
        pub fn set_license_configurations(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LicenseConfiguration>>,
        ) -> Self {
            self.license_configurations = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListLicenseConfigurationsOutput`](crate::output::ListLicenseConfigurationsOutput)
        pub fn build(self) -> crate::output::ListLicenseConfigurationsOutput {
            crate::output::ListLicenseConfigurationsOutput {
                license_configurations: self.license_configurations,
                next_token: self.next_token,
            }
        }
    }
}
impl ListLicenseConfigurationsOutput {
    /// Creates a new builder-style object to manufacture [`ListLicenseConfigurationsOutput`](crate::output::ListLicenseConfigurationsOutput)
    pub fn builder() -> crate::output::list_license_configurations_output::Builder {
        crate::output::list_license_configurations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListFailuresForLicenseConfigurationOperationsOutput {
    /// <p>License configuration operations that failed.</p>
    pub license_operation_failure_list:
        std::option::Option<std::vec::Vec<crate::model::LicenseOperationFailure>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListFailuresForLicenseConfigurationOperationsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListFailuresForLicenseConfigurationOperationsOutput");
        formatter.field(
            "license_operation_failure_list",
            &self.license_operation_failure_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListFailuresForLicenseConfigurationOperationsOutput`](crate::output::ListFailuresForLicenseConfigurationOperationsOutput)
pub mod list_failures_for_license_configuration_operations_output {
    /// A builder for [`ListFailuresForLicenseConfigurationOperationsOutput`](crate::output::ListFailuresForLicenseConfigurationOperationsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_operation_failure_list:
            std::option::Option<std::vec::Vec<crate::model::LicenseOperationFailure>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn license_operation_failure_list(
            mut self,
            input: impl Into<crate::model::LicenseOperationFailure>,
        ) -> Self {
            let mut v = self.license_operation_failure_list.unwrap_or_default();
            v.push(input.into());
            self.license_operation_failure_list = Some(v);
            self
        }
        pub fn set_license_operation_failure_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::LicenseOperationFailure>>,
        ) -> Self {
            self.license_operation_failure_list = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListFailuresForLicenseConfigurationOperationsOutput`](crate::output::ListFailuresForLicenseConfigurationOperationsOutput)
        pub fn build(self) -> crate::output::ListFailuresForLicenseConfigurationOperationsOutput {
            crate::output::ListFailuresForLicenseConfigurationOperationsOutput {
                license_operation_failure_list: self.license_operation_failure_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListFailuresForLicenseConfigurationOperationsOutput {
    /// Creates a new builder-style object to manufacture [`ListFailuresForLicenseConfigurationOperationsOutput`](crate::output::ListFailuresForLicenseConfigurationOperationsOutput)
    pub fn builder(
    ) -> crate::output::list_failures_for_license_configuration_operations_output::Builder {
        crate::output::list_failures_for_license_configuration_operations_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListDistributedGrantsOutput {
    /// <p>Distributed grant details.</p>
    pub grants: std::option::Option<std::vec::Vec<crate::model::Grant>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListDistributedGrantsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListDistributedGrantsOutput");
        formatter.field("grants", &self.grants);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListDistributedGrantsOutput`](crate::output::ListDistributedGrantsOutput)
pub mod list_distributed_grants_output {
    /// A builder for [`ListDistributedGrantsOutput`](crate::output::ListDistributedGrantsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) grants: std::option::Option<std::vec::Vec<crate::model::Grant>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn grants(mut self, input: impl Into<crate::model::Grant>) -> Self {
            let mut v = self.grants.unwrap_or_default();
            v.push(input.into());
            self.grants = Some(v);
            self
        }
        pub fn set_grants(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Grant>>,
        ) -> Self {
            self.grants = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListDistributedGrantsOutput`](crate::output::ListDistributedGrantsOutput)
        pub fn build(self) -> crate::output::ListDistributedGrantsOutput {
            crate::output::ListDistributedGrantsOutput {
                grants: self.grants,
                next_token: self.next_token,
            }
        }
    }
}
impl ListDistributedGrantsOutput {
    /// Creates a new builder-style object to manufacture [`ListDistributedGrantsOutput`](crate::output::ListDistributedGrantsOutput)
    pub fn builder() -> crate::output::list_distributed_grants_output::Builder {
        crate::output::list_distributed_grants_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAssociationsForLicenseConfigurationOutput {
    /// <p>Information about the associations for the license configuration.</p>
    pub license_configuration_associations:
        std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationAssociation>>,
    /// <p>Token for the next set of results.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ListAssociationsForLicenseConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAssociationsForLicenseConfigurationOutput");
        formatter.field(
            "license_configuration_associations",
            &self.license_configuration_associations,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAssociationsForLicenseConfigurationOutput`](crate::output::ListAssociationsForLicenseConfigurationOutput)
pub mod list_associations_for_license_configuration_output {
    /// A builder for [`ListAssociationsForLicenseConfigurationOutput`](crate::output::ListAssociationsForLicenseConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_configuration_associations:
            std::option::Option<std::vec::Vec<crate::model::LicenseConfigurationAssociation>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn license_configuration_associations(
            mut self,
            input: impl Into<crate::model::LicenseConfigurationAssociation>,
        ) -> Self {
            let mut v = self.license_configuration_associations.unwrap_or_default();
            v.push(input.into());
            self.license_configuration_associations = Some(v);
            self
        }
        pub fn set_license_configuration_associations(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::LicenseConfigurationAssociation>,
            >,
        ) -> Self {
            self.license_configuration_associations = input;
            self
        }
        /// <p>Token for the next set of results.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAssociationsForLicenseConfigurationOutput`](crate::output::ListAssociationsForLicenseConfigurationOutput)
        pub fn build(self) -> crate::output::ListAssociationsForLicenseConfigurationOutput {
            crate::output::ListAssociationsForLicenseConfigurationOutput {
                license_configuration_associations: self.license_configuration_associations,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAssociationsForLicenseConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`ListAssociationsForLicenseConfigurationOutput`](crate::output::ListAssociationsForLicenseConfigurationOutput)
    pub fn builder() -> crate::output::list_associations_for_license_configuration_output::Builder {
        crate::output::list_associations_for_license_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetServiceSettingsOutput {
    /// <p>Regional S3 bucket path for storing reports, license trail event data, discovery data,
    /// and so on.</p>
    pub s3_bucket_arn: std::option::Option<std::string::String>,
    /// <p>SNS topic configured to receive notifications from License Manager.</p>
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>Indicates whether AWS Organizations is integrated with License Manager for
    /// cross-account discovery.</p>
    pub organization_configuration: std::option::Option<crate::model::OrganizationConfiguration>,
    /// <p>Indicates whether cross-account discovery is enabled.</p>
    pub enable_cross_accounts_discovery: std::option::Option<bool>,
    /// <p>Amazon Resource Name (ARN) of the AWS resource share. The License Manager management account
    /// provides member accounts with access to this share.</p>
    pub license_manager_resource_share_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetServiceSettingsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetServiceSettingsOutput");
        formatter.field("s3_bucket_arn", &self.s3_bucket_arn);
        formatter.field("sns_topic_arn", &self.sns_topic_arn);
        formatter.field(
            "organization_configuration",
            &self.organization_configuration,
        );
        formatter.field(
            "enable_cross_accounts_discovery",
            &self.enable_cross_accounts_discovery,
        );
        formatter.field(
            "license_manager_resource_share_arn",
            &self.license_manager_resource_share_arn,
        );
        formatter.finish()
    }
}
/// See [`GetServiceSettingsOutput`](crate::output::GetServiceSettingsOutput)
pub mod get_service_settings_output {
    /// A builder for [`GetServiceSettingsOutput`](crate::output::GetServiceSettingsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) s3_bucket_arn: std::option::Option<std::string::String>,
        pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
        pub(crate) organization_configuration:
            std::option::Option<crate::model::OrganizationConfiguration>,
        pub(crate) enable_cross_accounts_discovery: std::option::Option<bool>,
        pub(crate) license_manager_resource_share_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Regional S3 bucket path for storing reports, license trail event data, discovery data,
        /// and so on.</p>
        pub fn s3_bucket_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.s3_bucket_arn = Some(input.into());
            self
        }
        pub fn set_s3_bucket_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.s3_bucket_arn = input;
            self
        }
        /// <p>SNS topic configured to receive notifications from License Manager.</p>
        pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.sns_topic_arn = Some(input.into());
            self
        }
        pub fn set_sns_topic_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sns_topic_arn = input;
            self
        }
        /// <p>Indicates whether AWS Organizations is integrated with License Manager for
        /// cross-account discovery.</p>
        pub fn organization_configuration(
            mut self,
            input: crate::model::OrganizationConfiguration,
        ) -> Self {
            self.organization_configuration = Some(input);
            self
        }
        pub fn set_organization_configuration(
            mut self,
            input: std::option::Option<crate::model::OrganizationConfiguration>,
        ) -> Self {
            self.organization_configuration = input;
            self
        }
        /// <p>Indicates whether cross-account discovery is enabled.</p>
        pub fn enable_cross_accounts_discovery(mut self, input: bool) -> Self {
            self.enable_cross_accounts_discovery = Some(input);
            self
        }
        pub fn set_enable_cross_accounts_discovery(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.enable_cross_accounts_discovery = input;
            self
        }
        /// <p>Amazon Resource Name (ARN) of the AWS resource share. The License Manager management account
        /// provides member accounts with access to this share.</p>
        pub fn license_manager_resource_share_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.license_manager_resource_share_arn = Some(input.into());
            self
        }
        pub fn set_license_manager_resource_share_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_manager_resource_share_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`GetServiceSettingsOutput`](crate::output::GetServiceSettingsOutput)
        pub fn build(self) -> crate::output::GetServiceSettingsOutput {
            crate::output::GetServiceSettingsOutput {
                s3_bucket_arn: self.s3_bucket_arn,
                sns_topic_arn: self.sns_topic_arn,
                organization_configuration: self.organization_configuration,
                enable_cross_accounts_discovery: self.enable_cross_accounts_discovery,
                license_manager_resource_share_arn: self.license_manager_resource_share_arn,
            }
        }
    }
}
impl GetServiceSettingsOutput {
    /// Creates a new builder-style object to manufacture [`GetServiceSettingsOutput`](crate::output::GetServiceSettingsOutput)
    pub fn builder() -> crate::output::get_service_settings_output::Builder {
        crate::output::get_service_settings_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLicenseUsageOutput {
    /// <p>License usage details.</p>
    pub license_usage: std::option::Option<crate::model::LicenseUsage>,
}
impl std::fmt::Debug for GetLicenseUsageOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLicenseUsageOutput");
        formatter.field("license_usage", &self.license_usage);
        formatter.finish()
    }
}
/// See [`GetLicenseUsageOutput`](crate::output::GetLicenseUsageOutput)
pub mod get_license_usage_output {
    /// A builder for [`GetLicenseUsageOutput`](crate::output::GetLicenseUsageOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_usage: std::option::Option<crate::model::LicenseUsage>,
    }
    impl Builder {
        /// <p>License usage details.</p>
        pub fn license_usage(mut self, input: crate::model::LicenseUsage) -> Self {
            self.license_usage = Some(input);
            self
        }
        pub fn set_license_usage(
            mut self,
            input: std::option::Option<crate::model::LicenseUsage>,
        ) -> Self {
            self.license_usage = input;
            self
        }
        /// Consumes the builder and constructs a [`GetLicenseUsageOutput`](crate::output::GetLicenseUsageOutput)
        pub fn build(self) -> crate::output::GetLicenseUsageOutput {
            crate::output::GetLicenseUsageOutput {
                license_usage: self.license_usage,
            }
        }
    }
}
impl GetLicenseUsageOutput {
    /// Creates a new builder-style object to manufacture [`GetLicenseUsageOutput`](crate::output::GetLicenseUsageOutput)
    pub fn builder() -> crate::output::get_license_usage_output::Builder {
        crate::output::get_license_usage_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLicenseManagerReportGeneratorOutput {
    /// <p>A report generator that creates periodic reports on your license configurations.</p>
    pub report_generator: std::option::Option<crate::model::ReportGenerator>,
}
impl std::fmt::Debug for GetLicenseManagerReportGeneratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLicenseManagerReportGeneratorOutput");
        formatter.field("report_generator", &self.report_generator);
        formatter.finish()
    }
}
/// See [`GetLicenseManagerReportGeneratorOutput`](crate::output::GetLicenseManagerReportGeneratorOutput)
pub mod get_license_manager_report_generator_output {
    /// A builder for [`GetLicenseManagerReportGeneratorOutput`](crate::output::GetLicenseManagerReportGeneratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) report_generator: std::option::Option<crate::model::ReportGenerator>,
    }
    impl Builder {
        /// <p>A report generator that creates periodic reports on your license configurations.</p>
        pub fn report_generator(mut self, input: crate::model::ReportGenerator) -> Self {
            self.report_generator = Some(input);
            self
        }
        pub fn set_report_generator(
            mut self,
            input: std::option::Option<crate::model::ReportGenerator>,
        ) -> Self {
            self.report_generator = input;
            self
        }
        /// Consumes the builder and constructs a [`GetLicenseManagerReportGeneratorOutput`](crate::output::GetLicenseManagerReportGeneratorOutput)
        pub fn build(self) -> crate::output::GetLicenseManagerReportGeneratorOutput {
            crate::output::GetLicenseManagerReportGeneratorOutput {
                report_generator: self.report_generator,
            }
        }
    }
}
impl GetLicenseManagerReportGeneratorOutput {
    /// Creates a new builder-style object to manufacture [`GetLicenseManagerReportGeneratorOutput`](crate::output::GetLicenseManagerReportGeneratorOutput)
    pub fn builder() -> crate::output::get_license_manager_report_generator_output::Builder {
        crate::output::get_license_manager_report_generator_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLicenseConfigurationOutput {
    /// <p>Unique ID for the license configuration.</p>
    pub license_configuration_id: std::option::Option<std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the license configuration.</p>
    pub license_configuration_arn: std::option::Option<std::string::String>,
    /// <p>Name of the license configuration.</p>
    pub name: std::option::Option<std::string::String>,
    /// <p>Description of the license configuration.</p>
    pub description: std::option::Option<std::string::String>,
    /// <p>Dimension on which the licenses are counted.</p>
    pub license_counting_type: std::option::Option<crate::model::LicenseCountingType>,
    /// <p>License rules.</p>
    pub license_rules: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Number of available licenses.</p>
    pub license_count: std::option::Option<i64>,
    /// <p>Sets the number of available licenses as a hard limit.</p>
    pub license_count_hard_limit: std::option::Option<bool>,
    /// <p>Number of licenses assigned to resources.</p>
    pub consumed_licenses: std::option::Option<i64>,
    /// <p>License configuration status.</p>
    pub status: std::option::Option<std::string::String>,
    /// <p>Account ID of the owner of the license configuration.</p>
    pub owner_account_id: std::option::Option<std::string::String>,
    /// <p>Summaries of the licenses consumed by resources.</p>
    pub consumed_license_summary_list:
        std::option::Option<std::vec::Vec<crate::model::ConsumedLicenseSummary>>,
    /// <p>Summaries of the managed resources.</p>
    pub managed_resource_summary_list:
        std::option::Option<std::vec::Vec<crate::model::ManagedResourceSummary>>,
    /// <p>Tags for the license configuration.</p>
    pub tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    /// <p>Product information.</p>
    pub product_information_list:
        std::option::Option<std::vec::Vec<crate::model::ProductInformation>>,
    /// <p>Automated discovery information.</p>
    pub automated_discovery_information:
        std::option::Option<crate::model::AutomatedDiscoveryInformation>,
    /// <p>When true, disassociates a resource when software is uninstalled.</p>
    pub disassociate_when_not_found: std::option::Option<bool>,
}
impl std::fmt::Debug for GetLicenseConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLicenseConfigurationOutput");
        formatter.field("license_configuration_id", &self.license_configuration_id);
        formatter.field("license_configuration_arn", &self.license_configuration_arn);
        formatter.field("name", &self.name);
        formatter.field("description", &self.description);
        formatter.field("license_counting_type", &self.license_counting_type);
        formatter.field("license_rules", &self.license_rules);
        formatter.field("license_count", &self.license_count);
        formatter.field("license_count_hard_limit", &self.license_count_hard_limit);
        formatter.field("consumed_licenses", &self.consumed_licenses);
        formatter.field("status", &self.status);
        formatter.field("owner_account_id", &self.owner_account_id);
        formatter.field(
            "consumed_license_summary_list",
            &self.consumed_license_summary_list,
        );
        formatter.field(
            "managed_resource_summary_list",
            &self.managed_resource_summary_list,
        );
        formatter.field("tags", &self.tags);
        formatter.field("product_information_list", &self.product_information_list);
        formatter.field(
            "automated_discovery_information",
            &self.automated_discovery_information,
        );
        formatter.field(
            "disassociate_when_not_found",
            &self.disassociate_when_not_found,
        );
        formatter.finish()
    }
}
/// See [`GetLicenseConfigurationOutput`](crate::output::GetLicenseConfigurationOutput)
pub mod get_license_configuration_output {
    /// A builder for [`GetLicenseConfigurationOutput`](crate::output::GetLicenseConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_configuration_id: std::option::Option<std::string::String>,
        pub(crate) license_configuration_arn: std::option::Option<std::string::String>,
        pub(crate) name: std::option::Option<std::string::String>,
        pub(crate) description: std::option::Option<std::string::String>,
        pub(crate) license_counting_type: std::option::Option<crate::model::LicenseCountingType>,
        pub(crate) license_rules: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) license_count: std::option::Option<i64>,
        pub(crate) license_count_hard_limit: std::option::Option<bool>,
        pub(crate) consumed_licenses: std::option::Option<i64>,
        pub(crate) status: std::option::Option<std::string::String>,
        pub(crate) owner_account_id: std::option::Option<std::string::String>,
        pub(crate) consumed_license_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ConsumedLicenseSummary>>,
        pub(crate) managed_resource_summary_list:
            std::option::Option<std::vec::Vec<crate::model::ManagedResourceSummary>>,
        pub(crate) tags: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        pub(crate) product_information_list:
            std::option::Option<std::vec::Vec<crate::model::ProductInformation>>,
        pub(crate) automated_discovery_information:
            std::option::Option<crate::model::AutomatedDiscoveryInformation>,
        pub(crate) disassociate_when_not_found: std::option::Option<bool>,
    }
    impl Builder {
        /// <p>Unique ID for the license configuration.</p>
        pub fn license_configuration_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_configuration_id = Some(input.into());
            self
        }
        pub fn set_license_configuration_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_configuration_id = input;
            self
        }
        /// <p>Amazon Resource Name (ARN) of the license configuration.</p>
        pub fn license_configuration_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_configuration_arn = Some(input.into());
            self
        }
        pub fn set_license_configuration_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_configuration_arn = input;
            self
        }
        /// <p>Name of the license configuration.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.name = Some(input.into());
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.name = input;
            self
        }
        /// <p>Description of the license configuration.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.description = Some(input.into());
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.description = input;
            self
        }
        /// <p>Dimension on which the licenses are counted.</p>
        pub fn license_counting_type(mut self, input: crate::model::LicenseCountingType) -> Self {
            self.license_counting_type = Some(input);
            self
        }
        pub fn set_license_counting_type(
            mut self,
            input: std::option::Option<crate::model::LicenseCountingType>,
        ) -> Self {
            self.license_counting_type = input;
            self
        }
        pub fn license_rules(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.license_rules.unwrap_or_default();
            v.push(input.into());
            self.license_rules = Some(v);
            self
        }
        pub fn set_license_rules(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.license_rules = input;
            self
        }
        /// <p>Number of available licenses.</p>
        pub fn license_count(mut self, input: i64) -> Self {
            self.license_count = Some(input);
            self
        }
        pub fn set_license_count(mut self, input: std::option::Option<i64>) -> Self {
            self.license_count = input;
            self
        }
        /// <p>Sets the number of available licenses as a hard limit.</p>
        pub fn license_count_hard_limit(mut self, input: bool) -> Self {
            self.license_count_hard_limit = Some(input);
            self
        }
        pub fn set_license_count_hard_limit(mut self, input: std::option::Option<bool>) -> Self {
            self.license_count_hard_limit = input;
            self
        }
        /// <p>Number of licenses assigned to resources.</p>
        pub fn consumed_licenses(mut self, input: i64) -> Self {
            self.consumed_licenses = Some(input);
            self
        }
        pub fn set_consumed_licenses(mut self, input: std::option::Option<i64>) -> Self {
            self.consumed_licenses = input;
            self
        }
        /// <p>License configuration status.</p>
        pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
            self.status = Some(input.into());
            self
        }
        pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.status = input;
            self
        }
        /// <p>Account ID of the owner of the license configuration.</p>
        pub fn owner_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.owner_account_id = Some(input.into());
            self
        }
        pub fn set_owner_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.owner_account_id = input;
            self
        }
        pub fn consumed_license_summary_list(
            mut self,
            input: impl Into<crate::model::ConsumedLicenseSummary>,
        ) -> Self {
            let mut v = self.consumed_license_summary_list.unwrap_or_default();
            v.push(input.into());
            self.consumed_license_summary_list = Some(v);
            self
        }
        pub fn set_consumed_license_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ConsumedLicenseSummary>>,
        ) -> Self {
            self.consumed_license_summary_list = input;
            self
        }
        pub fn managed_resource_summary_list(
            mut self,
            input: impl Into<crate::model::ManagedResourceSummary>,
        ) -> Self {
            let mut v = self.managed_resource_summary_list.unwrap_or_default();
            v.push(input.into());
            self.managed_resource_summary_list = Some(v);
            self
        }
        pub fn set_managed_resource_summary_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ManagedResourceSummary>>,
        ) -> Self {
            self.managed_resource_summary_list = input;
            self
        }
        pub fn tags(mut self, input: impl Into<crate::model::Tag>) -> Self {
            let mut v = self.tags.unwrap_or_default();
            v.push(input.into());
            self.tags = Some(v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tags = input;
            self
        }
        pub fn product_information_list(
            mut self,
            input: impl Into<crate::model::ProductInformation>,
        ) -> Self {
            let mut v = self.product_information_list.unwrap_or_default();
            v.push(input.into());
            self.product_information_list = Some(v);
            self
        }
        pub fn set_product_information_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProductInformation>>,
        ) -> Self {
            self.product_information_list = input;
            self
        }
        /// <p>Automated discovery information.</p>
        pub fn automated_discovery_information(
            mut self,
            input: crate::model::AutomatedDiscoveryInformation,
        ) -> Self {
            self.automated_discovery_information = Some(input);
            self
        }
        pub fn set_automated_discovery_information(
            mut self,
            input: std::option::Option<crate::model::AutomatedDiscoveryInformation>,
        ) -> Self {
            self.automated_discovery_information = input;
            self
        }
        /// <p>When true, disassociates a resource when software is uninstalled.</p>
        pub fn disassociate_when_not_found(mut self, input: bool) -> Self {
            self.disassociate_when_not_found = Some(input);
            self
        }
        pub fn set_disassociate_when_not_found(mut self, input: std::option::Option<bool>) -> Self {
            self.disassociate_when_not_found = input;
            self
        }
        /// Consumes the builder and constructs a [`GetLicenseConfigurationOutput`](crate::output::GetLicenseConfigurationOutput)
        pub fn build(self) -> crate::output::GetLicenseConfigurationOutput {
            crate::output::GetLicenseConfigurationOutput {
                license_configuration_id: self.license_configuration_id,
                license_configuration_arn: self.license_configuration_arn,
                name: self.name,
                description: self.description,
                license_counting_type: self.license_counting_type,
                license_rules: self.license_rules,
                license_count: self.license_count,
                license_count_hard_limit: self.license_count_hard_limit,
                consumed_licenses: self.consumed_licenses,
                status: self.status,
                owner_account_id: self.owner_account_id,
                consumed_license_summary_list: self.consumed_license_summary_list,
                managed_resource_summary_list: self.managed_resource_summary_list,
                tags: self.tags,
                product_information_list: self.product_information_list,
                automated_discovery_information: self.automated_discovery_information,
                disassociate_when_not_found: self.disassociate_when_not_found,
            }
        }
    }
}
impl GetLicenseConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetLicenseConfigurationOutput`](crate::output::GetLicenseConfigurationOutput)
    pub fn builder() -> crate::output::get_license_configuration_output::Builder {
        crate::output::get_license_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetLicenseOutput {
    /// <p>License details.</p>
    pub license: std::option::Option<crate::model::License>,
}
impl std::fmt::Debug for GetLicenseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetLicenseOutput");
        formatter.field("license", &self.license);
        formatter.finish()
    }
}
/// See [`GetLicenseOutput`](crate::output::GetLicenseOutput)
pub mod get_license_output {
    /// A builder for [`GetLicenseOutput`](crate::output::GetLicenseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license: std::option::Option<crate::model::License>,
    }
    impl Builder {
        /// <p>License details.</p>
        pub fn license(mut self, input: crate::model::License) -> Self {
            self.license = Some(input);
            self
        }
        pub fn set_license(mut self, input: std::option::Option<crate::model::License>) -> Self {
            self.license = input;
            self
        }
        /// Consumes the builder and constructs a [`GetLicenseOutput`](crate::output::GetLicenseOutput)
        pub fn build(self) -> crate::output::GetLicenseOutput {
            crate::output::GetLicenseOutput {
                license: self.license,
            }
        }
    }
}
impl GetLicenseOutput {
    /// Creates a new builder-style object to manufacture [`GetLicenseOutput`](crate::output::GetLicenseOutput)
    pub fn builder() -> crate::output::get_license_output::Builder {
        crate::output::get_license_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGrantOutput {
    /// <p>Grant details.</p>
    pub grant: std::option::Option<crate::model::Grant>,
}
impl std::fmt::Debug for GetGrantOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetGrantOutput");
        formatter.field("grant", &self.grant);
        formatter.finish()
    }
}
/// See [`GetGrantOutput`](crate::output::GetGrantOutput)
pub mod get_grant_output {
    /// A builder for [`GetGrantOutput`](crate::output::GetGrantOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) grant: std::option::Option<crate::model::Grant>,
    }
    impl Builder {
        /// <p>Grant details.</p>
        pub fn grant(mut self, input: crate::model::Grant) -> Self {
            self.grant = Some(input);
            self
        }
        pub fn set_grant(mut self, input: std::option::Option<crate::model::Grant>) -> Self {
            self.grant = input;
            self
        }
        /// Consumes the builder and constructs a [`GetGrantOutput`](crate::output::GetGrantOutput)
        pub fn build(self) -> crate::output::GetGrantOutput {
            crate::output::GetGrantOutput { grant: self.grant }
        }
    }
}
impl GetGrantOutput {
    /// Creates a new builder-style object to manufacture [`GetGrantOutput`](crate::output::GetGrantOutput)
    pub fn builder() -> crate::output::get_grant_output::Builder {
        crate::output::get_grant_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAccessTokenOutput {
    /// <p>Temporary access token.</p>
    pub access_token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetAccessTokenOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAccessTokenOutput");
        formatter.field("access_token", &self.access_token);
        formatter.finish()
    }
}
/// See [`GetAccessTokenOutput`](crate::output::GetAccessTokenOutput)
pub mod get_access_token_output {
    /// A builder for [`GetAccessTokenOutput`](crate::output::GetAccessTokenOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) access_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Temporary access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.access_token = Some(input.into());
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.access_token = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAccessTokenOutput`](crate::output::GetAccessTokenOutput)
        pub fn build(self) -> crate::output::GetAccessTokenOutput {
            crate::output::GetAccessTokenOutput {
                access_token: self.access_token,
            }
        }
    }
}
impl GetAccessTokenOutput {
    /// Creates a new builder-style object to manufacture [`GetAccessTokenOutput`](crate::output::GetAccessTokenOutput)
    pub fn builder() -> crate::output::get_access_token_output::Builder {
        crate::output::get_access_token_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExtendLicenseConsumptionOutput {
    /// <p>License consumption token.</p>
    pub license_consumption_token: std::option::Option<std::string::String>,
    /// <p>Date and time at which the license consumption expires.</p>
    pub expiration: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for ExtendLicenseConsumptionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ExtendLicenseConsumptionOutput");
        formatter.field("license_consumption_token", &self.license_consumption_token);
        formatter.field("expiration", &self.expiration);
        formatter.finish()
    }
}
/// See [`ExtendLicenseConsumptionOutput`](crate::output::ExtendLicenseConsumptionOutput)
pub mod extend_license_consumption_output {
    /// A builder for [`ExtendLicenseConsumptionOutput`](crate::output::ExtendLicenseConsumptionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_consumption_token: std::option::Option<std::string::String>,
        pub(crate) expiration: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>License consumption token.</p>
        pub fn license_consumption_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_consumption_token = Some(input.into());
            self
        }
        pub fn set_license_consumption_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_consumption_token = input;
            self
        }
        /// <p>Date and time at which the license consumption expires.</p>
        pub fn expiration(mut self, input: impl Into<std::string::String>) -> Self {
            self.expiration = Some(input.into());
            self
        }
        pub fn set_expiration(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.expiration = input;
            self
        }
        /// Consumes the builder and constructs a [`ExtendLicenseConsumptionOutput`](crate::output::ExtendLicenseConsumptionOutput)
        pub fn build(self) -> crate::output::ExtendLicenseConsumptionOutput {
            crate::output::ExtendLicenseConsumptionOutput {
                license_consumption_token: self.license_consumption_token,
                expiration: self.expiration,
            }
        }
    }
}
impl ExtendLicenseConsumptionOutput {
    /// Creates a new builder-style object to manufacture [`ExtendLicenseConsumptionOutput`](crate::output::ExtendLicenseConsumptionOutput)
    pub fn builder() -> crate::output::extend_license_consumption_output::Builder {
        crate::output::extend_license_consumption_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteTokenOutput {}
impl std::fmt::Debug for DeleteTokenOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteTokenOutput");
        formatter.finish()
    }
}
/// See [`DeleteTokenOutput`](crate::output::DeleteTokenOutput)
pub mod delete_token_output {
    /// A builder for [`DeleteTokenOutput`](crate::output::DeleteTokenOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteTokenOutput`](crate::output::DeleteTokenOutput)
        pub fn build(self) -> crate::output::DeleteTokenOutput {
            crate::output::DeleteTokenOutput {}
        }
    }
}
impl DeleteTokenOutput {
    /// Creates a new builder-style object to manufacture [`DeleteTokenOutput`](crate::output::DeleteTokenOutput)
    pub fn builder() -> crate::output::delete_token_output::Builder {
        crate::output::delete_token_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLicenseManagerReportGeneratorOutput {}
impl std::fmt::Debug for DeleteLicenseManagerReportGeneratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLicenseManagerReportGeneratorOutput");
        formatter.finish()
    }
}
/// See [`DeleteLicenseManagerReportGeneratorOutput`](crate::output::DeleteLicenseManagerReportGeneratorOutput)
pub mod delete_license_manager_report_generator_output {
    /// A builder for [`DeleteLicenseManagerReportGeneratorOutput`](crate::output::DeleteLicenseManagerReportGeneratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteLicenseManagerReportGeneratorOutput`](crate::output::DeleteLicenseManagerReportGeneratorOutput)
        pub fn build(self) -> crate::output::DeleteLicenseManagerReportGeneratorOutput {
            crate::output::DeleteLicenseManagerReportGeneratorOutput {}
        }
    }
}
impl DeleteLicenseManagerReportGeneratorOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLicenseManagerReportGeneratorOutput`](crate::output::DeleteLicenseManagerReportGeneratorOutput)
    pub fn builder() -> crate::output::delete_license_manager_report_generator_output::Builder {
        crate::output::delete_license_manager_report_generator_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLicenseConfigurationOutput {}
impl std::fmt::Debug for DeleteLicenseConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLicenseConfigurationOutput");
        formatter.finish()
    }
}
/// See [`DeleteLicenseConfigurationOutput`](crate::output::DeleteLicenseConfigurationOutput)
pub mod delete_license_configuration_output {
    /// A builder for [`DeleteLicenseConfigurationOutput`](crate::output::DeleteLicenseConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteLicenseConfigurationOutput`](crate::output::DeleteLicenseConfigurationOutput)
        pub fn build(self) -> crate::output::DeleteLicenseConfigurationOutput {
            crate::output::DeleteLicenseConfigurationOutput {}
        }
    }
}
impl DeleteLicenseConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLicenseConfigurationOutput`](crate::output::DeleteLicenseConfigurationOutput)
    pub fn builder() -> crate::output::delete_license_configuration_output::Builder {
        crate::output::delete_license_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteLicenseOutput {
    /// <p>License status.</p>
    pub status: std::option::Option<crate::model::LicenseDeletionStatus>,
    /// <p>Date on which the license is deleted.</p>
    pub deletion_date: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteLicenseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteLicenseOutput");
        formatter.field("status", &self.status);
        formatter.field("deletion_date", &self.deletion_date);
        formatter.finish()
    }
}
/// See [`DeleteLicenseOutput`](crate::output::DeleteLicenseOutput)
pub mod delete_license_output {
    /// A builder for [`DeleteLicenseOutput`](crate::output::DeleteLicenseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) status: std::option::Option<crate::model::LicenseDeletionStatus>,
        pub(crate) deletion_date: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>License status.</p>
        pub fn status(mut self, input: crate::model::LicenseDeletionStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::LicenseDeletionStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>Date on which the license is deleted.</p>
        pub fn deletion_date(mut self, input: impl Into<std::string::String>) -> Self {
            self.deletion_date = Some(input.into());
            self
        }
        pub fn set_deletion_date(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.deletion_date = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteLicenseOutput`](crate::output::DeleteLicenseOutput)
        pub fn build(self) -> crate::output::DeleteLicenseOutput {
            crate::output::DeleteLicenseOutput {
                status: self.status,
                deletion_date: self.deletion_date,
            }
        }
    }
}
impl DeleteLicenseOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLicenseOutput`](crate::output::DeleteLicenseOutput)
    pub fn builder() -> crate::output::delete_license_output::Builder {
        crate::output::delete_license_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteGrantOutput {
    /// <p>Grant ARN.</p>
    pub grant_arn: std::option::Option<std::string::String>,
    /// <p>Grant status.</p>
    pub status: std::option::Option<crate::model::GrantStatus>,
    /// <p>Grant version.</p>
    pub version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for DeleteGrantOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteGrantOutput");
        formatter.field("grant_arn", &self.grant_arn);
        formatter.field("status", &self.status);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
/// See [`DeleteGrantOutput`](crate::output::DeleteGrantOutput)
pub mod delete_grant_output {
    /// A builder for [`DeleteGrantOutput`](crate::output::DeleteGrantOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) grant_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::GrantStatus>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Grant ARN.</p>
        pub fn grant_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.grant_arn = Some(input.into());
            self
        }
        pub fn set_grant_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.grant_arn = input;
            self
        }
        /// <p>Grant status.</p>
        pub fn status(mut self, input: crate::model::GrantStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<crate::model::GrantStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>Grant version.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`DeleteGrantOutput`](crate::output::DeleteGrantOutput)
        pub fn build(self) -> crate::output::DeleteGrantOutput {
            crate::output::DeleteGrantOutput {
                grant_arn: self.grant_arn,
                status: self.status,
                version: self.version,
            }
        }
    }
}
impl DeleteGrantOutput {
    /// Creates a new builder-style object to manufacture [`DeleteGrantOutput`](crate::output::DeleteGrantOutput)
    pub fn builder() -> crate::output::delete_grant_output::Builder {
        crate::output::delete_grant_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateTokenOutput {
    /// <p>Token ID.</p>
    pub token_id: std::option::Option<std::string::String>,
    /// <p>Token type.</p>
    pub token_type: std::option::Option<crate::model::TokenType>,
    /// <p>Refresh token, encoded as a JWT token.</p>
    pub token: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateTokenOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateTokenOutput");
        formatter.field("token_id", &self.token_id);
        formatter.field("token_type", &self.token_type);
        formatter.field("token", &self.token);
        formatter.finish()
    }
}
/// See [`CreateTokenOutput`](crate::output::CreateTokenOutput)
pub mod create_token_output {
    /// A builder for [`CreateTokenOutput`](crate::output::CreateTokenOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) token_id: std::option::Option<std::string::String>,
        pub(crate) token_type: std::option::Option<crate::model::TokenType>,
        pub(crate) token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Token ID.</p>
        pub fn token_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.token_id = Some(input.into());
            self
        }
        pub fn set_token_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.token_id = input;
            self
        }
        /// <p>Token type.</p>
        pub fn token_type(mut self, input: crate::model::TokenType) -> Self {
            self.token_type = Some(input);
            self
        }
        pub fn set_token_type(
            mut self,
            input: std::option::Option<crate::model::TokenType>,
        ) -> Self {
            self.token_type = input;
            self
        }
        /// <p>Refresh token, encoded as a JWT token.</p>
        pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
            self.token = Some(input.into());
            self
        }
        pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.token = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateTokenOutput`](crate::output::CreateTokenOutput)
        pub fn build(self) -> crate::output::CreateTokenOutput {
            crate::output::CreateTokenOutput {
                token_id: self.token_id,
                token_type: self.token_type,
                token: self.token,
            }
        }
    }
}
impl CreateTokenOutput {
    /// Creates a new builder-style object to manufacture [`CreateTokenOutput`](crate::output::CreateTokenOutput)
    pub fn builder() -> crate::output::create_token_output::Builder {
        crate::output::create_token_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLicenseVersionOutput {
    /// <p>License ARN.</p>
    pub license_arn: std::option::Option<std::string::String>,
    /// <p>New version of the license.</p>
    pub version: std::option::Option<std::string::String>,
    /// <p>License status.</p>
    pub status: std::option::Option<crate::model::LicenseStatus>,
}
impl std::fmt::Debug for CreateLicenseVersionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLicenseVersionOutput");
        formatter.field("license_arn", &self.license_arn);
        formatter.field("version", &self.version);
        formatter.field("status", &self.status);
        formatter.finish()
    }
}
/// See [`CreateLicenseVersionOutput`](crate::output::CreateLicenseVersionOutput)
pub mod create_license_version_output {
    /// A builder for [`CreateLicenseVersionOutput`](crate::output::CreateLicenseVersionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_arn: std::option::Option<std::string::String>,
        pub(crate) version: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::LicenseStatus>,
    }
    impl Builder {
        /// <p>License ARN.</p>
        pub fn license_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_arn = Some(input.into());
            self
        }
        pub fn set_license_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.license_arn = input;
            self
        }
        /// <p>New version of the license.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// <p>License status.</p>
        pub fn status(mut self, input: crate::model::LicenseStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::LicenseStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateLicenseVersionOutput`](crate::output::CreateLicenseVersionOutput)
        pub fn build(self) -> crate::output::CreateLicenseVersionOutput {
            crate::output::CreateLicenseVersionOutput {
                license_arn: self.license_arn,
                version: self.version,
                status: self.status,
            }
        }
    }
}
impl CreateLicenseVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateLicenseVersionOutput`](crate::output::CreateLicenseVersionOutput)
    pub fn builder() -> crate::output::create_license_version_output::Builder {
        crate::output::create_license_version_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLicenseManagerReportGeneratorOutput {
    /// <p>The Amazon Resource Number (ARN) of the new report generator.</p>
    pub license_manager_report_generator_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateLicenseManagerReportGeneratorOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLicenseManagerReportGeneratorOutput");
        formatter.field(
            "license_manager_report_generator_arn",
            &self.license_manager_report_generator_arn,
        );
        formatter.finish()
    }
}
/// See [`CreateLicenseManagerReportGeneratorOutput`](crate::output::CreateLicenseManagerReportGeneratorOutput)
pub mod create_license_manager_report_generator_output {
    /// A builder for [`CreateLicenseManagerReportGeneratorOutput`](crate::output::CreateLicenseManagerReportGeneratorOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_manager_report_generator_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The Amazon Resource Number (ARN) of the new report generator.</p>
        pub fn license_manager_report_generator_arn(
            mut self,
            input: impl Into<std::string::String>,
        ) -> Self {
            self.license_manager_report_generator_arn = Some(input.into());
            self
        }
        pub fn set_license_manager_report_generator_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_manager_report_generator_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateLicenseManagerReportGeneratorOutput`](crate::output::CreateLicenseManagerReportGeneratorOutput)
        pub fn build(self) -> crate::output::CreateLicenseManagerReportGeneratorOutput {
            crate::output::CreateLicenseManagerReportGeneratorOutput {
                license_manager_report_generator_arn: self.license_manager_report_generator_arn,
            }
        }
    }
}
impl CreateLicenseManagerReportGeneratorOutput {
    /// Creates a new builder-style object to manufacture [`CreateLicenseManagerReportGeneratorOutput`](crate::output::CreateLicenseManagerReportGeneratorOutput)
    pub fn builder() -> crate::output::create_license_manager_report_generator_output::Builder {
        crate::output::create_license_manager_report_generator_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLicenseConfigurationOutput {
    /// <p>Amazon Resource Name (ARN) of the license configuration.</p>
    pub license_configuration_arn: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateLicenseConfigurationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLicenseConfigurationOutput");
        formatter.field("license_configuration_arn", &self.license_configuration_arn);
        formatter.finish()
    }
}
/// See [`CreateLicenseConfigurationOutput`](crate::output::CreateLicenseConfigurationOutput)
pub mod create_license_configuration_output {
    /// A builder for [`CreateLicenseConfigurationOutput`](crate::output::CreateLicenseConfigurationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_configuration_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Amazon Resource Name (ARN) of the license configuration.</p>
        pub fn license_configuration_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_configuration_arn = Some(input.into());
            self
        }
        pub fn set_license_configuration_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_configuration_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateLicenseConfigurationOutput`](crate::output::CreateLicenseConfigurationOutput)
        pub fn build(self) -> crate::output::CreateLicenseConfigurationOutput {
            crate::output::CreateLicenseConfigurationOutput {
                license_configuration_arn: self.license_configuration_arn,
            }
        }
    }
}
impl CreateLicenseConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`CreateLicenseConfigurationOutput`](crate::output::CreateLicenseConfigurationOutput)
    pub fn builder() -> crate::output::create_license_configuration_output::Builder {
        crate::output::create_license_configuration_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateLicenseOutput {
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub license_arn: std::option::Option<std::string::String>,
    /// <p>License status.</p>
    pub status: std::option::Option<crate::model::LicenseStatus>,
    /// <p>License version.</p>
    pub version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateLicenseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateLicenseOutput");
        formatter.field("license_arn", &self.license_arn);
        formatter.field("status", &self.status);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
/// See [`CreateLicenseOutput`](crate::output::CreateLicenseOutput)
pub mod create_license_output {
    /// A builder for [`CreateLicenseOutput`](crate::output::CreateLicenseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::LicenseStatus>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Amazon Resource Name (ARN) of the license.</p>
        pub fn license_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_arn = Some(input.into());
            self
        }
        pub fn set_license_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.license_arn = input;
            self
        }
        /// <p>License status.</p>
        pub fn status(mut self, input: crate::model::LicenseStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(
            mut self,
            input: std::option::Option<crate::model::LicenseStatus>,
        ) -> Self {
            self.status = input;
            self
        }
        /// <p>License version.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateLicenseOutput`](crate::output::CreateLicenseOutput)
        pub fn build(self) -> crate::output::CreateLicenseOutput {
            crate::output::CreateLicenseOutput {
                license_arn: self.license_arn,
                status: self.status,
                version: self.version,
            }
        }
    }
}
impl CreateLicenseOutput {
    /// Creates a new builder-style object to manufacture [`CreateLicenseOutput`](crate::output::CreateLicenseOutput)
    pub fn builder() -> crate::output::create_license_output::Builder {
        crate::output::create_license_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGrantVersionOutput {
    /// <p>Grant ARN.</p>
    pub grant_arn: std::option::Option<std::string::String>,
    /// <p>Grant status.</p>
    pub status: std::option::Option<crate::model::GrantStatus>,
    /// <p>New version of the grant.</p>
    pub version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateGrantVersionOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGrantVersionOutput");
        formatter.field("grant_arn", &self.grant_arn);
        formatter.field("status", &self.status);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
/// See [`CreateGrantVersionOutput`](crate::output::CreateGrantVersionOutput)
pub mod create_grant_version_output {
    /// A builder for [`CreateGrantVersionOutput`](crate::output::CreateGrantVersionOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) grant_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::GrantStatus>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Grant ARN.</p>
        pub fn grant_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.grant_arn = Some(input.into());
            self
        }
        pub fn set_grant_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.grant_arn = input;
            self
        }
        /// <p>Grant status.</p>
        pub fn status(mut self, input: crate::model::GrantStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<crate::model::GrantStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>New version of the grant.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateGrantVersionOutput`](crate::output::CreateGrantVersionOutput)
        pub fn build(self) -> crate::output::CreateGrantVersionOutput {
            crate::output::CreateGrantVersionOutput {
                grant_arn: self.grant_arn,
                status: self.status,
                version: self.version,
            }
        }
    }
}
impl CreateGrantVersionOutput {
    /// Creates a new builder-style object to manufacture [`CreateGrantVersionOutput`](crate::output::CreateGrantVersionOutput)
    pub fn builder() -> crate::output::create_grant_version_output::Builder {
        crate::output::create_grant_version_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGrantOutput {
    /// <p>Grant ARN.</p>
    pub grant_arn: std::option::Option<std::string::String>,
    /// <p>Grant status.</p>
    pub status: std::option::Option<crate::model::GrantStatus>,
    /// <p>Grant version.</p>
    pub version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CreateGrantOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGrantOutput");
        formatter.field("grant_arn", &self.grant_arn);
        formatter.field("status", &self.status);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
/// See [`CreateGrantOutput`](crate::output::CreateGrantOutput)
pub mod create_grant_output {
    /// A builder for [`CreateGrantOutput`](crate::output::CreateGrantOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) grant_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::GrantStatus>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Grant ARN.</p>
        pub fn grant_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.grant_arn = Some(input.into());
            self
        }
        pub fn set_grant_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.grant_arn = input;
            self
        }
        /// <p>Grant status.</p>
        pub fn status(mut self, input: crate::model::GrantStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<crate::model::GrantStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>Grant version.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`CreateGrantOutput`](crate::output::CreateGrantOutput)
        pub fn build(self) -> crate::output::CreateGrantOutput {
            crate::output::CreateGrantOutput {
                grant_arn: self.grant_arn,
                status: self.status,
                version: self.version,
            }
        }
    }
}
impl CreateGrantOutput {
    /// Creates a new builder-style object to manufacture [`CreateGrantOutput`](crate::output::CreateGrantOutput)
    pub fn builder() -> crate::output::create_grant_output::Builder {
        crate::output::create_grant_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CheckoutLicenseOutput {
    /// <p>Checkout type.</p>
    pub checkout_type: std::option::Option<crate::model::CheckoutType>,
    /// <p>License consumption token.</p>
    pub license_consumption_token: std::option::Option<std::string::String>,
    /// <p>Allowed license entitlements.</p>
    pub entitlements_allowed: std::option::Option<std::vec::Vec<crate::model::EntitlementData>>,
    /// <p>Signed token.</p>
    pub signed_token: std::option::Option<std::string::String>,
    /// <p>Node ID.</p>
    pub node_id: std::option::Option<std::string::String>,
    /// <p>Date and time at which the license checkout is issued.</p>
    pub issued_at: std::option::Option<std::string::String>,
    /// <p>Date and time at which the license checkout expires.</p>
    pub expiration: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for CheckoutLicenseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CheckoutLicenseOutput");
        formatter.field("checkout_type", &self.checkout_type);
        formatter.field("license_consumption_token", &self.license_consumption_token);
        formatter.field("entitlements_allowed", &self.entitlements_allowed);
        formatter.field("signed_token", &self.signed_token);
        formatter.field("node_id", &self.node_id);
        formatter.field("issued_at", &self.issued_at);
        formatter.field("expiration", &self.expiration);
        formatter.finish()
    }
}
/// See [`CheckoutLicenseOutput`](crate::output::CheckoutLicenseOutput)
pub mod checkout_license_output {
    /// A builder for [`CheckoutLicenseOutput`](crate::output::CheckoutLicenseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) checkout_type: std::option::Option<crate::model::CheckoutType>,
        pub(crate) license_consumption_token: std::option::Option<std::string::String>,
        pub(crate) entitlements_allowed:
            std::option::Option<std::vec::Vec<crate::model::EntitlementData>>,
        pub(crate) signed_token: std::option::Option<std::string::String>,
        pub(crate) node_id: std::option::Option<std::string::String>,
        pub(crate) issued_at: std::option::Option<std::string::String>,
        pub(crate) expiration: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Checkout type.</p>
        pub fn checkout_type(mut self, input: crate::model::CheckoutType) -> Self {
            self.checkout_type = Some(input);
            self
        }
        pub fn set_checkout_type(
            mut self,
            input: std::option::Option<crate::model::CheckoutType>,
        ) -> Self {
            self.checkout_type = input;
            self
        }
        /// <p>License consumption token.</p>
        pub fn license_consumption_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_consumption_token = Some(input.into());
            self
        }
        pub fn set_license_consumption_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_consumption_token = input;
            self
        }
        pub fn entitlements_allowed(
            mut self,
            input: impl Into<crate::model::EntitlementData>,
        ) -> Self {
            let mut v = self.entitlements_allowed.unwrap_or_default();
            v.push(input.into());
            self.entitlements_allowed = Some(v);
            self
        }
        pub fn set_entitlements_allowed(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EntitlementData>>,
        ) -> Self {
            self.entitlements_allowed = input;
            self
        }
        /// <p>Signed token.</p>
        pub fn signed_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.signed_token = Some(input.into());
            self
        }
        pub fn set_signed_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.signed_token = input;
            self
        }
        /// <p>Node ID.</p>
        pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.node_id = Some(input.into());
            self
        }
        pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.node_id = input;
            self
        }
        /// <p>Date and time at which the license checkout is issued.</p>
        pub fn issued_at(mut self, input: impl Into<std::string::String>) -> Self {
            self.issued_at = Some(input.into());
            self
        }
        pub fn set_issued_at(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.issued_at = input;
            self
        }
        /// <p>Date and time at which the license checkout expires.</p>
        pub fn expiration(mut self, input: impl Into<std::string::String>) -> Self {
            self.expiration = Some(input.into());
            self
        }
        pub fn set_expiration(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.expiration = input;
            self
        }
        /// Consumes the builder and constructs a [`CheckoutLicenseOutput`](crate::output::CheckoutLicenseOutput)
        pub fn build(self) -> crate::output::CheckoutLicenseOutput {
            crate::output::CheckoutLicenseOutput {
                checkout_type: self.checkout_type,
                license_consumption_token: self.license_consumption_token,
                entitlements_allowed: self.entitlements_allowed,
                signed_token: self.signed_token,
                node_id: self.node_id,
                issued_at: self.issued_at,
                expiration: self.expiration,
            }
        }
    }
}
impl CheckoutLicenseOutput {
    /// Creates a new builder-style object to manufacture [`CheckoutLicenseOutput`](crate::output::CheckoutLicenseOutput)
    pub fn builder() -> crate::output::checkout_license_output::Builder {
        crate::output::checkout_license_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CheckoutBorrowLicenseOutput {
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub license_arn: std::option::Option<std::string::String>,
    /// <p>License consumption token.</p>
    pub license_consumption_token: std::option::Option<std::string::String>,
    /// <p>Allowed license entitlements.</p>
    pub entitlements_allowed: std::option::Option<std::vec::Vec<crate::model::EntitlementData>>,
    /// <p>Node ID.</p>
    pub node_id: std::option::Option<std::string::String>,
    /// <p>Signed token.</p>
    pub signed_token: std::option::Option<std::string::String>,
    /// <p>Date and time at which the license checkout is issued.</p>
    pub issued_at: std::option::Option<std::string::String>,
    /// <p>Date and time at which the license checkout expires.</p>
    pub expiration: std::option::Option<std::string::String>,
    /// <p>Information about constraints.</p>
    pub checkout_metadata: std::option::Option<std::vec::Vec<crate::model::Metadata>>,
}
impl std::fmt::Debug for CheckoutBorrowLicenseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CheckoutBorrowLicenseOutput");
        formatter.field("license_arn", &self.license_arn);
        formatter.field("license_consumption_token", &self.license_consumption_token);
        formatter.field("entitlements_allowed", &self.entitlements_allowed);
        formatter.field("node_id", &self.node_id);
        formatter.field("signed_token", &self.signed_token);
        formatter.field("issued_at", &self.issued_at);
        formatter.field("expiration", &self.expiration);
        formatter.field("checkout_metadata", &self.checkout_metadata);
        formatter.finish()
    }
}
/// See [`CheckoutBorrowLicenseOutput`](crate::output::CheckoutBorrowLicenseOutput)
pub mod checkout_borrow_license_output {
    /// A builder for [`CheckoutBorrowLicenseOutput`](crate::output::CheckoutBorrowLicenseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) license_arn: std::option::Option<std::string::String>,
        pub(crate) license_consumption_token: std::option::Option<std::string::String>,
        pub(crate) entitlements_allowed:
            std::option::Option<std::vec::Vec<crate::model::EntitlementData>>,
        pub(crate) node_id: std::option::Option<std::string::String>,
        pub(crate) signed_token: std::option::Option<std::string::String>,
        pub(crate) issued_at: std::option::Option<std::string::String>,
        pub(crate) expiration: std::option::Option<std::string::String>,
        pub(crate) checkout_metadata: std::option::Option<std::vec::Vec<crate::model::Metadata>>,
    }
    impl Builder {
        /// <p>Amazon Resource Name (ARN) of the license.</p>
        pub fn license_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_arn = Some(input.into());
            self
        }
        pub fn set_license_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.license_arn = input;
            self
        }
        /// <p>License consumption token.</p>
        pub fn license_consumption_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.license_consumption_token = Some(input.into());
            self
        }
        pub fn set_license_consumption_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.license_consumption_token = input;
            self
        }
        pub fn entitlements_allowed(
            mut self,
            input: impl Into<crate::model::EntitlementData>,
        ) -> Self {
            let mut v = self.entitlements_allowed.unwrap_or_default();
            v.push(input.into());
            self.entitlements_allowed = Some(v);
            self
        }
        pub fn set_entitlements_allowed(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EntitlementData>>,
        ) -> Self {
            self.entitlements_allowed = input;
            self
        }
        /// <p>Node ID.</p>
        pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.node_id = Some(input.into());
            self
        }
        pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.node_id = input;
            self
        }
        /// <p>Signed token.</p>
        pub fn signed_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.signed_token = Some(input.into());
            self
        }
        pub fn set_signed_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.signed_token = input;
            self
        }
        /// <p>Date and time at which the license checkout is issued.</p>
        pub fn issued_at(mut self, input: impl Into<std::string::String>) -> Self {
            self.issued_at = Some(input.into());
            self
        }
        pub fn set_issued_at(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.issued_at = input;
            self
        }
        /// <p>Date and time at which the license checkout expires.</p>
        pub fn expiration(mut self, input: impl Into<std::string::String>) -> Self {
            self.expiration = Some(input.into());
            self
        }
        pub fn set_expiration(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.expiration = input;
            self
        }
        pub fn checkout_metadata(mut self, input: impl Into<crate::model::Metadata>) -> Self {
            let mut v = self.checkout_metadata.unwrap_or_default();
            v.push(input.into());
            self.checkout_metadata = Some(v);
            self
        }
        pub fn set_checkout_metadata(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Metadata>>,
        ) -> Self {
            self.checkout_metadata = input;
            self
        }
        /// Consumes the builder and constructs a [`CheckoutBorrowLicenseOutput`](crate::output::CheckoutBorrowLicenseOutput)
        pub fn build(self) -> crate::output::CheckoutBorrowLicenseOutput {
            crate::output::CheckoutBorrowLicenseOutput {
                license_arn: self.license_arn,
                license_consumption_token: self.license_consumption_token,
                entitlements_allowed: self.entitlements_allowed,
                node_id: self.node_id,
                signed_token: self.signed_token,
                issued_at: self.issued_at,
                expiration: self.expiration,
                checkout_metadata: self.checkout_metadata,
            }
        }
    }
}
impl CheckoutBorrowLicenseOutput {
    /// Creates a new builder-style object to manufacture [`CheckoutBorrowLicenseOutput`](crate::output::CheckoutBorrowLicenseOutput)
    pub fn builder() -> crate::output::checkout_borrow_license_output::Builder {
        crate::output::checkout_borrow_license_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CheckInLicenseOutput {}
impl std::fmt::Debug for CheckInLicenseOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CheckInLicenseOutput");
        formatter.finish()
    }
}
/// See [`CheckInLicenseOutput`](crate::output::CheckInLicenseOutput)
pub mod check_in_license_output {
    /// A builder for [`CheckInLicenseOutput`](crate::output::CheckInLicenseOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`CheckInLicenseOutput`](crate::output::CheckInLicenseOutput)
        pub fn build(self) -> crate::output::CheckInLicenseOutput {
            crate::output::CheckInLicenseOutput {}
        }
    }
}
impl CheckInLicenseOutput {
    /// Creates a new builder-style object to manufacture [`CheckInLicenseOutput`](crate::output::CheckInLicenseOutput)
    pub fn builder() -> crate::output::check_in_license_output::Builder {
        crate::output::check_in_license_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AcceptGrantOutput {
    /// <p>Grant ARN.</p>
    pub grant_arn: std::option::Option<std::string::String>,
    /// <p>Grant status.</p>
    pub status: std::option::Option<crate::model::GrantStatus>,
    /// <p>Grant version.</p>
    pub version: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for AcceptGrantOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AcceptGrantOutput");
        formatter.field("grant_arn", &self.grant_arn);
        formatter.field("status", &self.status);
        formatter.field("version", &self.version);
        formatter.finish()
    }
}
/// See [`AcceptGrantOutput`](crate::output::AcceptGrantOutput)
pub mod accept_grant_output {
    /// A builder for [`AcceptGrantOutput`](crate::output::AcceptGrantOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) grant_arn: std::option::Option<std::string::String>,
        pub(crate) status: std::option::Option<crate::model::GrantStatus>,
        pub(crate) version: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Grant ARN.</p>
        pub fn grant_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.grant_arn = Some(input.into());
            self
        }
        pub fn set_grant_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.grant_arn = input;
            self
        }
        /// <p>Grant status.</p>
        pub fn status(mut self, input: crate::model::GrantStatus) -> Self {
            self.status = Some(input);
            self
        }
        pub fn set_status(mut self, input: std::option::Option<crate::model::GrantStatus>) -> Self {
            self.status = input;
            self
        }
        /// <p>Grant version.</p>
        pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
            self.version = Some(input.into());
            self
        }
        pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.version = input;
            self
        }
        /// Consumes the builder and constructs a [`AcceptGrantOutput`](crate::output::AcceptGrantOutput)
        pub fn build(self) -> crate::output::AcceptGrantOutput {
            crate::output::AcceptGrantOutput {
                grant_arn: self.grant_arn,
                status: self.status,
                version: self.version,
            }
        }
    }
}
impl AcceptGrantOutput {
    /// Creates a new builder-style object to manufacture [`AcceptGrantOutput`](crate::output::AcceptGrantOutput)
    pub fn builder() -> crate::output::accept_grant_output::Builder {
        crate::output::accept_grant_output::Builder::default()
    }
}
