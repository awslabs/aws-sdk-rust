// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_accept_grant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AcceptGrantInput,
) {
    if let Some(var_1) = &input.grant_arn {
        object.key("GrantArn").string(var_1);
    }
}

pub fn serialize_structure_crate_input_check_in_license_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckInLicenseInput,
) {
    if let Some(var_2) = &input.license_consumption_token {
        object.key("LicenseConsumptionToken").string(var_2);
    }
    if let Some(var_3) = &input.beneficiary {
        object.key("Beneficiary").string(var_3);
    }
}

pub fn serialize_structure_crate_input_checkout_borrow_license_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckoutBorrowLicenseInput,
) {
    if let Some(var_4) = &input.license_arn {
        object.key("LicenseArn").string(var_4);
    }
    if let Some(var_5) = &input.entitlements {
        let mut array_6 = object.key("Entitlements").start_array();
        for item_7 in var_5 {
            {
                let mut object_8 = array_6.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entitlement_data(
                    &mut object_8,
                    item_7,
                );
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.digital_signature_method {
        object.key("DigitalSignatureMethod").string(var_9.as_str());
    }
    if let Some(var_10) = &input.node_id {
        object.key("NodeId").string(var_10);
    }
    if let Some(var_11) = &input.checkout_metadata {
        let mut array_12 = object.key("CheckoutMetadata").start_array();
        for item_13 in var_11 {
            {
                let mut object_14 = array_12.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata(&mut object_14, item_13);
                object_14.finish();
            }
        }
        array_12.finish();
    }
    if let Some(var_15) = &input.client_token {
        object.key("ClientToken").string(var_15);
    }
}

pub fn serialize_structure_crate_input_checkout_license_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CheckoutLicenseInput,
) {
    if let Some(var_16) = &input.product_sku {
        object.key("ProductSKU").string(var_16);
    }
    if let Some(var_17) = &input.checkout_type {
        object.key("CheckoutType").string(var_17.as_str());
    }
    if let Some(var_18) = &input.key_fingerprint {
        object.key("KeyFingerprint").string(var_18);
    }
    if let Some(var_19) = &input.entitlements {
        let mut array_20 = object.key("Entitlements").start_array();
        for item_21 in var_19 {
            {
                let mut object_22 = array_20.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entitlement_data(
                    &mut object_22,
                    item_21,
                );
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.client_token {
        object.key("ClientToken").string(var_23);
    }
    if let Some(var_24) = &input.beneficiary {
        object.key("Beneficiary").string(var_24);
    }
    if let Some(var_25) = &input.node_id {
        object.key("NodeId").string(var_25);
    }
}

pub fn serialize_structure_crate_input_create_grant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGrantInput,
) {
    if let Some(var_26) = &input.client_token {
        object.key("ClientToken").string(var_26);
    }
    if let Some(var_27) = &input.grant_name {
        object.key("GrantName").string(var_27);
    }
    if let Some(var_28) = &input.license_arn {
        object.key("LicenseArn").string(var_28);
    }
    if let Some(var_29) = &input.principals {
        let mut array_30 = object.key("Principals").start_array();
        for item_31 in var_29 {
            {
                array_30.value().string(item_31);
            }
        }
        array_30.finish();
    }
    if let Some(var_32) = &input.home_region {
        object.key("HomeRegion").string(var_32);
    }
    if let Some(var_33) = &input.allowed_operations {
        let mut array_34 = object.key("AllowedOperations").start_array();
        for item_35 in var_33 {
            {
                array_34.value().string(item_35.as_str());
            }
        }
        array_34.finish();
    }
}

pub fn serialize_structure_crate_input_create_grant_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateGrantVersionInput,
) {
    if let Some(var_36) = &input.client_token {
        object.key("ClientToken").string(var_36);
    }
    if let Some(var_37) = &input.grant_arn {
        object.key("GrantArn").string(var_37);
    }
    if let Some(var_38) = &input.grant_name {
        object.key("GrantName").string(var_38);
    }
    if let Some(var_39) = &input.allowed_operations {
        let mut array_40 = object.key("AllowedOperations").start_array();
        for item_41 in var_39 {
            {
                array_40.value().string(item_41.as_str());
            }
        }
        array_40.finish();
    }
    if let Some(var_42) = &input.status {
        object.key("Status").string(var_42.as_str());
    }
    if let Some(var_43) = &input.status_reason {
        object.key("StatusReason").string(var_43);
    }
    if let Some(var_44) = &input.source_version {
        object.key("SourceVersion").string(var_44);
    }
}

pub fn serialize_structure_crate_input_create_license_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLicenseInput,
) {
    if let Some(var_45) = &input.license_name {
        object.key("LicenseName").string(var_45);
    }
    if let Some(var_46) = &input.product_name {
        object.key("ProductName").string(var_46);
    }
    if let Some(var_47) = &input.product_sku {
        object.key("ProductSKU").string(var_47);
    }
    if let Some(var_48) = &input.issuer {
        let mut object_49 = object.key("Issuer").start_object();
        crate::json_ser::serialize_structure_crate_model_issuer(&mut object_49, var_48);
        object_49.finish();
    }
    if let Some(var_50) = &input.home_region {
        object.key("HomeRegion").string(var_50);
    }
    if let Some(var_51) = &input.validity {
        let mut object_52 = object.key("Validity").start_object();
        crate::json_ser::serialize_structure_crate_model_datetime_range(&mut object_52, var_51);
        object_52.finish();
    }
    if let Some(var_53) = &input.entitlements {
        let mut array_54 = object.key("Entitlements").start_array();
        for item_55 in var_53 {
            {
                let mut object_56 = array_54.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entitlement(
                    &mut object_56,
                    item_55,
                );
                object_56.finish();
            }
        }
        array_54.finish();
    }
    if let Some(var_57) = &input.beneficiary {
        object.key("Beneficiary").string(var_57);
    }
    if let Some(var_58) = &input.consumption_configuration {
        let mut object_59 = object.key("ConsumptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_consumption_configuration(
            &mut object_59,
            var_58,
        );
        object_59.finish();
    }
    if let Some(var_60) = &input.license_metadata {
        let mut array_61 = object.key("LicenseMetadata").start_array();
        for item_62 in var_60 {
            {
                let mut object_63 = array_61.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata(&mut object_63, item_62);
                object_63.finish();
            }
        }
        array_61.finish();
    }
    if let Some(var_64) = &input.client_token {
        object.key("ClientToken").string(var_64);
    }
}

pub fn serialize_structure_crate_input_create_license_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLicenseConfigurationInput,
) {
    if let Some(var_65) = &input.name {
        object.key("Name").string(var_65);
    }
    if let Some(var_66) = &input.description {
        object.key("Description").string(var_66);
    }
    if let Some(var_67) = &input.license_counting_type {
        object.key("LicenseCountingType").string(var_67.as_str());
    }
    if let Some(var_68) = &input.license_count {
        object.key("LicenseCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_68).into()),
        );
    }
    if let Some(var_69) = &input.license_count_hard_limit {
        object.key("LicenseCountHardLimit").boolean(*var_69);
    }
    if let Some(var_70) = &input.license_rules {
        let mut array_71 = object.key("LicenseRules").start_array();
        for item_72 in var_70 {
            {
                array_71.value().string(item_72);
            }
        }
        array_71.finish();
    }
    if let Some(var_73) = &input.tags {
        let mut array_74 = object.key("Tags").start_array();
        for item_75 in var_73 {
            {
                let mut object_76 = array_74.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_76, item_75);
                object_76.finish();
            }
        }
        array_74.finish();
    }
    if let Some(var_77) = &input.disassociate_when_not_found {
        object.key("DisassociateWhenNotFound").boolean(*var_77);
    }
    if let Some(var_78) = &input.product_information_list {
        let mut array_79 = object.key("ProductInformationList").start_array();
        for item_80 in var_78 {
            {
                let mut object_81 = array_79.value().start_object();
                crate::json_ser::serialize_structure_crate_model_product_information(
                    &mut object_81,
                    item_80,
                );
                object_81.finish();
            }
        }
        array_79.finish();
    }
}

pub fn serialize_structure_crate_input_create_license_manager_report_generator_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLicenseManagerReportGeneratorInput,
) {
    if let Some(var_82) = &input.report_generator_name {
        object.key("ReportGeneratorName").string(var_82);
    }
    if let Some(var_83) = &input.r#type {
        let mut array_84 = object.key("Type").start_array();
        for item_85 in var_83 {
            {
                array_84.value().string(item_85.as_str());
            }
        }
        array_84.finish();
    }
    if let Some(var_86) = &input.report_context {
        let mut object_87 = object.key("ReportContext").start_object();
        crate::json_ser::serialize_structure_crate_model_report_context(&mut object_87, var_86);
        object_87.finish();
    }
    if let Some(var_88) = &input.report_frequency {
        let mut object_89 = object.key("ReportFrequency").start_object();
        crate::json_ser::serialize_structure_crate_model_report_frequency(&mut object_89, var_88);
        object_89.finish();
    }
    if let Some(var_90) = &input.client_token {
        object.key("ClientToken").string(var_90);
    }
    if let Some(var_91) = &input.description {
        object.key("Description").string(var_91);
    }
    if let Some(var_92) = &input.tags {
        let mut array_93 = object.key("Tags").start_array();
        for item_94 in var_92 {
            {
                let mut object_95 = array_93.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_95, item_94);
                object_95.finish();
            }
        }
        array_93.finish();
    }
}

pub fn serialize_structure_crate_input_create_license_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateLicenseVersionInput,
) {
    if let Some(var_96) = &input.license_arn {
        object.key("LicenseArn").string(var_96);
    }
    if let Some(var_97) = &input.license_name {
        object.key("LicenseName").string(var_97);
    }
    if let Some(var_98) = &input.product_name {
        object.key("ProductName").string(var_98);
    }
    if let Some(var_99) = &input.issuer {
        let mut object_100 = object.key("Issuer").start_object();
        crate::json_ser::serialize_structure_crate_model_issuer(&mut object_100, var_99);
        object_100.finish();
    }
    if let Some(var_101) = &input.home_region {
        object.key("HomeRegion").string(var_101);
    }
    if let Some(var_102) = &input.validity {
        let mut object_103 = object.key("Validity").start_object();
        crate::json_ser::serialize_structure_crate_model_datetime_range(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.license_metadata {
        let mut array_105 = object.key("LicenseMetadata").start_array();
        for item_106 in var_104 {
            {
                let mut object_107 = array_105.value().start_object();
                crate::json_ser::serialize_structure_crate_model_metadata(
                    &mut object_107,
                    item_106,
                );
                object_107.finish();
            }
        }
        array_105.finish();
    }
    if let Some(var_108) = &input.entitlements {
        let mut array_109 = object.key("Entitlements").start_array();
        for item_110 in var_108 {
            {
                let mut object_111 = array_109.value().start_object();
                crate::json_ser::serialize_structure_crate_model_entitlement(
                    &mut object_111,
                    item_110,
                );
                object_111.finish();
            }
        }
        array_109.finish();
    }
    if let Some(var_112) = &input.consumption_configuration {
        let mut object_113 = object.key("ConsumptionConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_consumption_configuration(
            &mut object_113,
            var_112,
        );
        object_113.finish();
    }
    if let Some(var_114) = &input.status {
        object.key("Status").string(var_114.as_str());
    }
    if let Some(var_115) = &input.client_token {
        object.key("ClientToken").string(var_115);
    }
    if let Some(var_116) = &input.source_version {
        object.key("SourceVersion").string(var_116);
    }
}

pub fn serialize_structure_crate_input_create_token_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTokenInput,
) {
    if let Some(var_117) = &input.license_arn {
        object.key("LicenseArn").string(var_117);
    }
    if let Some(var_118) = &input.role_arns {
        let mut array_119 = object.key("RoleArns").start_array();
        for item_120 in var_118 {
            {
                array_119.value().string(item_120);
            }
        }
        array_119.finish();
    }
    if let Some(var_121) = &input.expiration_in_days {
        object.key("ExpirationInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_121).into()),
        );
    }
    if let Some(var_122) = &input.token_properties {
        let mut array_123 = object.key("TokenProperties").start_array();
        for item_124 in var_122 {
            {
                array_123.value().string(item_124);
            }
        }
        array_123.finish();
    }
    if let Some(var_125) = &input.client_token {
        object.key("ClientToken").string(var_125);
    }
}

pub fn serialize_structure_crate_input_delete_grant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteGrantInput,
) {
    if let Some(var_126) = &input.grant_arn {
        object.key("GrantArn").string(var_126);
    }
    if let Some(var_127) = &input.status_reason {
        object.key("StatusReason").string(var_127);
    }
    if let Some(var_128) = &input.version {
        object.key("Version").string(var_128);
    }
}

pub fn serialize_structure_crate_input_delete_license_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLicenseInput,
) {
    if let Some(var_129) = &input.license_arn {
        object.key("LicenseArn").string(var_129);
    }
    if let Some(var_130) = &input.source_version {
        object.key("SourceVersion").string(var_130);
    }
}

pub fn serialize_structure_crate_input_delete_license_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLicenseConfigurationInput,
) {
    if let Some(var_131) = &input.license_configuration_arn {
        object.key("LicenseConfigurationArn").string(var_131);
    }
}

pub fn serialize_structure_crate_input_delete_license_manager_report_generator_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteLicenseManagerReportGeneratorInput,
) {
    if let Some(var_132) = &input.license_manager_report_generator_arn {
        object
            .key("LicenseManagerReportGeneratorArn")
            .string(var_132);
    }
}

pub fn serialize_structure_crate_input_delete_token_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTokenInput,
) {
    if let Some(var_133) = &input.token_id {
        object.key("TokenId").string(var_133);
    }
}

pub fn serialize_structure_crate_input_extend_license_consumption_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ExtendLicenseConsumptionInput,
) {
    if let Some(var_134) = &input.license_consumption_token {
        object.key("LicenseConsumptionToken").string(var_134);
    }
    if input.dry_run {
        object.key("DryRun").boolean(input.dry_run);
    }
}

pub fn serialize_structure_crate_input_get_access_token_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetAccessTokenInput,
) {
    if let Some(var_135) = &input.token {
        object.key("Token").string(var_135);
    }
    if let Some(var_136) = &input.token_properties {
        let mut array_137 = object.key("TokenProperties").start_array();
        for item_138 in var_136 {
            {
                array_137.value().string(item_138);
            }
        }
        array_137.finish();
    }
}

pub fn serialize_structure_crate_input_get_grant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetGrantInput,
) {
    if let Some(var_139) = &input.grant_arn {
        object.key("GrantArn").string(var_139);
    }
    if let Some(var_140) = &input.version {
        object.key("Version").string(var_140);
    }
}

pub fn serialize_structure_crate_input_get_license_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLicenseInput,
) {
    if let Some(var_141) = &input.license_arn {
        object.key("LicenseArn").string(var_141);
    }
    if let Some(var_142) = &input.version {
        object.key("Version").string(var_142);
    }
}

pub fn serialize_structure_crate_input_get_license_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLicenseConfigurationInput,
) {
    if let Some(var_143) = &input.license_configuration_arn {
        object.key("LicenseConfigurationArn").string(var_143);
    }
}

pub fn serialize_structure_crate_input_get_license_manager_report_generator_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLicenseManagerReportGeneratorInput,
) {
    if let Some(var_144) = &input.license_manager_report_generator_arn {
        object
            .key("LicenseManagerReportGeneratorArn")
            .string(var_144);
    }
}

pub fn serialize_structure_crate_input_get_license_usage_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetLicenseUsageInput,
) {
    if let Some(var_145) = &input.license_arn {
        object.key("LicenseArn").string(var_145);
    }
}

pub fn serialize_structure_crate_input_list_associations_for_license_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAssociationsForLicenseConfigurationInput,
) {
    if let Some(var_146) = &input.license_configuration_arn {
        object.key("LicenseConfigurationArn").string(var_146);
    }
    if let Some(var_147) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_147).into()),
        );
    }
    if let Some(var_148) = &input.next_token {
        object.key("NextToken").string(var_148);
    }
}

pub fn serialize_structure_crate_input_list_distributed_grants_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDistributedGrantsInput,
) {
    if let Some(var_149) = &input.grant_arns {
        let mut array_150 = object.key("GrantArns").start_array();
        for item_151 in var_149 {
            {
                array_150.value().string(item_151);
            }
        }
        array_150.finish();
    }
    if let Some(var_152) = &input.filters {
        let mut array_153 = object.key("Filters").start_array();
        for item_154 in var_152 {
            {
                let mut object_155 = array_153.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_155, item_154);
                object_155.finish();
            }
        }
        array_153.finish();
    }
    if let Some(var_156) = &input.next_token {
        object.key("NextToken").string(var_156);
    }
    if let Some(var_157) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_157).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_failures_for_license_configuration_operations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFailuresForLicenseConfigurationOperationsInput,
) {
    if let Some(var_158) = &input.license_configuration_arn {
        object.key("LicenseConfigurationArn").string(var_158);
    }
    if let Some(var_159) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    if let Some(var_160) = &input.next_token {
        object.key("NextToken").string(var_160);
    }
}

pub fn serialize_structure_crate_input_list_license_configurations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLicenseConfigurationsInput,
) {
    if let Some(var_161) = &input.license_configuration_arns {
        let mut array_162 = object.key("LicenseConfigurationArns").start_array();
        for item_163 in var_161 {
            {
                array_162.value().string(item_163);
            }
        }
        array_162.finish();
    }
    if let Some(var_164) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_164).into()),
        );
    }
    if let Some(var_165) = &input.next_token {
        object.key("NextToken").string(var_165);
    }
    if let Some(var_166) = &input.filters {
        let mut array_167 = object.key("Filters").start_array();
        for item_168 in var_166 {
            {
                let mut object_169 = array_167.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_169, item_168);
                object_169.finish();
            }
        }
        array_167.finish();
    }
}

pub fn serialize_structure_crate_input_list_license_manager_report_generators_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLicenseManagerReportGeneratorsInput,
) {
    if let Some(var_170) = &input.filters {
        let mut array_171 = object.key("Filters").start_array();
        for item_172 in var_170 {
            {
                let mut object_173 = array_171.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_173, item_172);
                object_173.finish();
            }
        }
        array_171.finish();
    }
    if let Some(var_174) = &input.next_token {
        object.key("NextToken").string(var_174);
    }
    if let Some(var_175) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_175).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_licenses_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLicensesInput,
) {
    if let Some(var_176) = &input.license_arns {
        let mut array_177 = object.key("LicenseArns").start_array();
        for item_178 in var_176 {
            {
                array_177.value().string(item_178);
            }
        }
        array_177.finish();
    }
    if let Some(var_179) = &input.filters {
        let mut array_180 = object.key("Filters").start_array();
        for item_181 in var_179 {
            {
                let mut object_182 = array_180.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_182, item_181);
                object_182.finish();
            }
        }
        array_180.finish();
    }
    if let Some(var_183) = &input.next_token {
        object.key("NextToken").string(var_183);
    }
    if let Some(var_184) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_184).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_license_specifications_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLicenseSpecificationsForResourceInput,
) {
    if let Some(var_185) = &input.resource_arn {
        object.key("ResourceArn").string(var_185);
    }
    if let Some(var_186) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_186).into()),
        );
    }
    if let Some(var_187) = &input.next_token {
        object.key("NextToken").string(var_187);
    }
}

pub fn serialize_structure_crate_input_list_license_versions_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLicenseVersionsInput,
) {
    if let Some(var_188) = &input.license_arn {
        object.key("LicenseArn").string(var_188);
    }
    if let Some(var_189) = &input.next_token {
        object.key("NextToken").string(var_189);
    }
    if let Some(var_190) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_190).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_received_grants_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListReceivedGrantsInput,
) {
    if let Some(var_191) = &input.grant_arns {
        let mut array_192 = object.key("GrantArns").start_array();
        for item_193 in var_191 {
            {
                array_192.value().string(item_193);
            }
        }
        array_192.finish();
    }
    if let Some(var_194) = &input.filters {
        let mut array_195 = object.key("Filters").start_array();
        for item_196 in var_194 {
            {
                let mut object_197 = array_195.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_197, item_196);
                object_197.finish();
            }
        }
        array_195.finish();
    }
    if let Some(var_198) = &input.next_token {
        object.key("NextToken").string(var_198);
    }
    if let Some(var_199) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_199).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_received_licenses_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListReceivedLicensesInput,
) {
    if let Some(var_200) = &input.license_arns {
        let mut array_201 = object.key("LicenseArns").start_array();
        for item_202 in var_200 {
            {
                array_201.value().string(item_202);
            }
        }
        array_201.finish();
    }
    if let Some(var_203) = &input.filters {
        let mut array_204 = object.key("Filters").start_array();
        for item_205 in var_203 {
            {
                let mut object_206 = array_204.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_206, item_205);
                object_206.finish();
            }
        }
        array_204.finish();
    }
    if let Some(var_207) = &input.next_token {
        object.key("NextToken").string(var_207);
    }
    if let Some(var_208) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_208).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_resource_inventory_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListResourceInventoryInput,
) {
    if let Some(var_209) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_209).into()),
        );
    }
    if let Some(var_210) = &input.next_token {
        object.key("NextToken").string(var_210);
    }
    if let Some(var_211) = &input.filters {
        let mut array_212 = object.key("Filters").start_array();
        for item_213 in var_211 {
            {
                let mut object_214 = array_212.value().start_object();
                crate::json_ser::serialize_structure_crate_model_inventory_filter(
                    &mut object_214,
                    item_213,
                );
                object_214.finish();
            }
        }
        array_212.finish();
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_215) = &input.resource_arn {
        object.key("ResourceArn").string(var_215);
    }
}

pub fn serialize_structure_crate_input_list_tokens_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTokensInput,
) {
    if let Some(var_216) = &input.token_ids {
        let mut array_217 = object.key("TokenIds").start_array();
        for item_218 in var_216 {
            {
                array_217.value().string(item_218);
            }
        }
        array_217.finish();
    }
    if let Some(var_219) = &input.filters {
        let mut array_220 = object.key("Filters").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_222, item_221);
                object_222.finish();
            }
        }
        array_220.finish();
    }
    if let Some(var_223) = &input.next_token {
        object.key("NextToken").string(var_223);
    }
    if let Some(var_224) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_224).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_usage_for_license_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListUsageForLicenseConfigurationInput,
) {
    if let Some(var_225) = &input.license_configuration_arn {
        object.key("LicenseConfigurationArn").string(var_225);
    }
    if let Some(var_226) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_226).into()),
        );
    }
    if let Some(var_227) = &input.next_token {
        object.key("NextToken").string(var_227);
    }
    if let Some(var_228) = &input.filters {
        let mut array_229 = object.key("Filters").start_array();
        for item_230 in var_228 {
            {
                let mut object_231 = array_229.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_231, item_230);
                object_231.finish();
            }
        }
        array_229.finish();
    }
}

pub fn serialize_structure_crate_input_reject_grant_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RejectGrantInput,
) {
    if let Some(var_232) = &input.grant_arn {
        object.key("GrantArn").string(var_232);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_233) = &input.resource_arn {
        object.key("ResourceArn").string(var_233);
    }
    if let Some(var_234) = &input.tags {
        let mut array_235 = object.key("Tags").start_array();
        for item_236 in var_234 {
            {
                let mut object_237 = array_235.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_237, item_236);
                object_237.finish();
            }
        }
        array_235.finish();
    }
}

pub fn serialize_structure_crate_input_untag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UntagResourceInput,
) {
    if let Some(var_238) = &input.resource_arn {
        object.key("ResourceArn").string(var_238);
    }
    if let Some(var_239) = &input.tag_keys {
        let mut array_240 = object.key("TagKeys").start_array();
        for item_241 in var_239 {
            {
                array_240.value().string(item_241);
            }
        }
        array_240.finish();
    }
}

pub fn serialize_structure_crate_input_update_license_configuration_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLicenseConfigurationInput,
) {
    if let Some(var_242) = &input.license_configuration_arn {
        object.key("LicenseConfigurationArn").string(var_242);
    }
    if let Some(var_243) = &input.license_configuration_status {
        object
            .key("LicenseConfigurationStatus")
            .string(var_243.as_str());
    }
    if let Some(var_244) = &input.license_rules {
        let mut array_245 = object.key("LicenseRules").start_array();
        for item_246 in var_244 {
            {
                array_245.value().string(item_246);
            }
        }
        array_245.finish();
    }
    if let Some(var_247) = &input.license_count {
        object.key("LicenseCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_247).into()),
        );
    }
    if let Some(var_248) = &input.license_count_hard_limit {
        object.key("LicenseCountHardLimit").boolean(*var_248);
    }
    if let Some(var_249) = &input.name {
        object.key("Name").string(var_249);
    }
    if let Some(var_250) = &input.description {
        object.key("Description").string(var_250);
    }
    if let Some(var_251) = &input.product_information_list {
        let mut array_252 = object.key("ProductInformationList").start_array();
        for item_253 in var_251 {
            {
                let mut object_254 = array_252.value().start_object();
                crate::json_ser::serialize_structure_crate_model_product_information(
                    &mut object_254,
                    item_253,
                );
                object_254.finish();
            }
        }
        array_252.finish();
    }
    if let Some(var_255) = &input.disassociate_when_not_found {
        object.key("DisassociateWhenNotFound").boolean(*var_255);
    }
}

pub fn serialize_structure_crate_input_update_license_manager_report_generator_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLicenseManagerReportGeneratorInput,
) {
    if let Some(var_256) = &input.license_manager_report_generator_arn {
        object
            .key("LicenseManagerReportGeneratorArn")
            .string(var_256);
    }
    if let Some(var_257) = &input.report_generator_name {
        object.key("ReportGeneratorName").string(var_257);
    }
    if let Some(var_258) = &input.r#type {
        let mut array_259 = object.key("Type").start_array();
        for item_260 in var_258 {
            {
                array_259.value().string(item_260.as_str());
            }
        }
        array_259.finish();
    }
    if let Some(var_261) = &input.report_context {
        let mut object_262 = object.key("ReportContext").start_object();
        crate::json_ser::serialize_structure_crate_model_report_context(&mut object_262, var_261);
        object_262.finish();
    }
    if let Some(var_263) = &input.report_frequency {
        let mut object_264 = object.key("ReportFrequency").start_object();
        crate::json_ser::serialize_structure_crate_model_report_frequency(&mut object_264, var_263);
        object_264.finish();
    }
    if let Some(var_265) = &input.client_token {
        object.key("ClientToken").string(var_265);
    }
    if let Some(var_266) = &input.description {
        object.key("Description").string(var_266);
    }
}

pub fn serialize_structure_crate_input_update_license_specifications_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateLicenseSpecificationsForResourceInput,
) {
    if let Some(var_267) = &input.resource_arn {
        object.key("ResourceArn").string(var_267);
    }
    if let Some(var_268) = &input.add_license_specifications {
        let mut array_269 = object.key("AddLicenseSpecifications").start_array();
        for item_270 in var_268 {
            {
                let mut object_271 = array_269.value().start_object();
                crate::json_ser::serialize_structure_crate_model_license_specification(
                    &mut object_271,
                    item_270,
                );
                object_271.finish();
            }
        }
        array_269.finish();
    }
    if let Some(var_272) = &input.remove_license_specifications {
        let mut array_273 = object.key("RemoveLicenseSpecifications").start_array();
        for item_274 in var_272 {
            {
                let mut object_275 = array_273.value().start_object();
                crate::json_ser::serialize_structure_crate_model_license_specification(
                    &mut object_275,
                    item_274,
                );
                object_275.finish();
            }
        }
        array_273.finish();
    }
}

pub fn serialize_structure_crate_input_update_service_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateServiceSettingsInput,
) {
    if let Some(var_276) = &input.s3_bucket_arn {
        object.key("S3BucketArn").string(var_276);
    }
    if let Some(var_277) = &input.sns_topic_arn {
        object.key("SnsTopicArn").string(var_277);
    }
    if let Some(var_278) = &input.organization_configuration {
        let mut object_279 = object.key("OrganizationConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_organization_configuration(
            &mut object_279,
            var_278,
        );
        object_279.finish();
    }
    if let Some(var_280) = &input.enable_cross_accounts_discovery {
        object.key("EnableCrossAccountsDiscovery").boolean(*var_280);
    }
}

pub fn serialize_structure_crate_model_entitlement_data(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EntitlementData,
) {
    if let Some(var_281) = &input.name {
        object.key("Name").string(var_281);
    }
    if let Some(var_282) = &input.value {
        object.key("Value").string(var_282);
    }
    if let Some(var_283) = &input.unit {
        object.key("Unit").string(var_283.as_str());
    }
}

pub fn serialize_structure_crate_model_metadata(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Metadata,
) {
    if let Some(var_284) = &input.name {
        object.key("Name").string(var_284);
    }
    if let Some(var_285) = &input.value {
        object.key("Value").string(var_285);
    }
}

pub fn serialize_structure_crate_model_issuer(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Issuer,
) {
    if let Some(var_286) = &input.name {
        object.key("Name").string(var_286);
    }
    if let Some(var_287) = &input.sign_key {
        object.key("SignKey").string(var_287);
    }
}

pub fn serialize_structure_crate_model_datetime_range(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DatetimeRange,
) {
    if let Some(var_288) = &input.begin {
        object.key("Begin").string(var_288);
    }
    if let Some(var_289) = &input.end {
        object.key("End").string(var_289);
    }
}

pub fn serialize_structure_crate_model_entitlement(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Entitlement,
) {
    if let Some(var_290) = &input.name {
        object.key("Name").string(var_290);
    }
    if let Some(var_291) = &input.value {
        object.key("Value").string(var_291);
    }
    if let Some(var_292) = &input.max_count {
        object.key("MaxCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_292).into()),
        );
    }
    if let Some(var_293) = &input.overage {
        object.key("Overage").boolean(*var_293);
    }
    if let Some(var_294) = &input.unit {
        object.key("Unit").string(var_294.as_str());
    }
    if let Some(var_295) = &input.allow_check_in {
        object.key("AllowCheckIn").boolean(*var_295);
    }
}

pub fn serialize_structure_crate_model_consumption_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ConsumptionConfiguration,
) {
    if let Some(var_296) = &input.renew_type {
        object.key("RenewType").string(var_296.as_str());
    }
    if let Some(var_297) = &input.provisional_configuration {
        let mut object_298 = object.key("ProvisionalConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_provisional_configuration(
            &mut object_298,
            var_297,
        );
        object_298.finish();
    }
    if let Some(var_299) = &input.borrow_configuration {
        let mut object_300 = object.key("BorrowConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_borrow_configuration(
            &mut object_300,
            var_299,
        );
        object_300.finish();
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_301) = &input.key {
        object.key("Key").string(var_301);
    }
    if let Some(var_302) = &input.value {
        object.key("Value").string(var_302);
    }
}

pub fn serialize_structure_crate_model_product_information(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductInformation,
) {
    if let Some(var_303) = &input.resource_type {
        object.key("ResourceType").string(var_303);
    }
    if let Some(var_304) = &input.product_information_filter_list {
        let mut array_305 = object.key("ProductInformationFilterList").start_array();
        for item_306 in var_304 {
            {
                let mut object_307 = array_305.value().start_object();
                crate::json_ser::serialize_structure_crate_model_product_information_filter(
                    &mut object_307,
                    item_306,
                );
                object_307.finish();
            }
        }
        array_305.finish();
    }
}

pub fn serialize_structure_crate_model_report_context(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReportContext,
) {
    if let Some(var_308) = &input.license_configuration_arns {
        let mut array_309 = object.key("licenseConfigurationArns").start_array();
        for item_310 in var_308 {
            {
                array_309.value().string(item_310);
            }
        }
        array_309.finish();
    }
}

pub fn serialize_structure_crate_model_report_frequency(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ReportFrequency,
) {
    if let Some(var_311) = &input.value {
        object.key("value").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_311).into()),
        );
    }
    if let Some(var_312) = &input.period {
        object.key("period").string(var_312.as_str());
    }
}

pub fn serialize_structure_crate_model_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_313) = &input.name {
        object.key("Name").string(var_313);
    }
    if let Some(var_314) = &input.values {
        let mut array_315 = object.key("Values").start_array();
        for item_316 in var_314 {
            {
                array_315.value().string(item_316);
            }
        }
        array_315.finish();
    }
}

pub fn serialize_structure_crate_model_inventory_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::InventoryFilter,
) {
    if let Some(var_317) = &input.name {
        object.key("Name").string(var_317);
    }
    if let Some(var_318) = &input.condition {
        object.key("Condition").string(var_318.as_str());
    }
    if let Some(var_319) = &input.value {
        object.key("Value").string(var_319);
    }
}

pub fn serialize_structure_crate_model_license_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LicenseSpecification,
) {
    if let Some(var_320) = &input.license_configuration_arn {
        object.key("LicenseConfigurationArn").string(var_320);
    }
    if let Some(var_321) = &input.ami_association_scope {
        object.key("AmiAssociationScope").string(var_321);
    }
}

pub fn serialize_structure_crate_model_organization_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OrganizationConfiguration,
) {
    {
        object
            .key("EnableIntegration")
            .boolean(input.enable_integration);
    }
}

pub fn serialize_structure_crate_model_provisional_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProvisionalConfiguration,
) {
    if let Some(var_322) = &input.max_time_to_live_in_minutes {
        object.key("MaxTimeToLiveInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_322).into()),
        );
    }
}

pub fn serialize_structure_crate_model_borrow_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BorrowConfiguration,
) {
    if let Some(var_323) = &input.allow_early_check_in {
        object.key("AllowEarlyCheckIn").boolean(*var_323);
    }
    if let Some(var_324) = &input.max_time_to_live_in_minutes {
        object.key("MaxTimeToLiveInMinutes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_324).into()),
        );
    }
}

pub fn serialize_structure_crate_model_product_information_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::ProductInformationFilter,
) {
    if let Some(var_325) = &input.product_information_filter_name {
        object.key("ProductInformationFilterName").string(var_325);
    }
    if let Some(var_326) = &input.product_information_filter_value {
        let mut array_327 = object.key("ProductInformationFilterValue").start_array();
        for item_328 in var_326 {
            {
                array_327.value().string(item_328);
            }
        }
        array_327.finish();
    }
    if let Some(var_329) = &input.product_information_filter_comparator {
        object
            .key("ProductInformationFilterComparator")
            .string(var_329);
    }
}
