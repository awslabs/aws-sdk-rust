// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>Access to resource denied.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The Amazon Web Services user account does not have permission to perform the action. Check the IAM policy associated with this account.</p>
    AuthorizationException(crate::error::AuthorizationException),
    /// <p>There was a conflict processing the request. Try your request again.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The entitlement is not allowed.</p>
    EntitlementNotAllowedException(crate::error::EntitlementNotAllowedException),
    /// <p>A dependency required to run the API is missing.</p>
    FailedDependencyException(crate::error::FailedDependencyException),
    /// <p>The request uses too many filters or too many filter values.</p>
    FilterLimitExceededException(crate::error::FilterLimitExceededException),
    /// <p>One or more parameter values are not valid.</p>
    InvalidParameterValueException(crate::error::InvalidParameterValueException),
    /// <p>License Manager cannot allocate a license to a resource because of its state. </p>
    /// <p>For example, you cannot allocate a license to an instance in the process of shutting down.</p>
    InvalidResourceStateException(crate::error::InvalidResourceStateException),
    /// <p>You do not have enough licenses available to support a new resource launch.</p>
    LicenseUsageException(crate::error::LicenseUsageException),
    /// <p>There are no entitlements found for this license, or the entitlement maximum count is reached.</p>
    NoEntitlementsAllowedException(crate::error::NoEntitlementsAllowedException),
    /// <p>Too many requests have been submitted. Try again after a brief wait.</p>
    RateLimitExceededException(crate::error::RateLimitExceededException),
    /// <p>This is not the correct Region for the resource. Try again.</p>
    RedirectException(crate::error::RedirectException),
    /// <p>Your resource limits have been exceeded.</p>
    ResourceLimitExceededException(crate::error::ResourceLimitExceededException),
    /// <p>The resource cannot be found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The server experienced an internal error. Try again.</p>
    ServerInternalException(crate::error::ServerInternalException),
    /// <p>The digital signature method is unsupported. Try your request again.</p>
    UnsupportedDigitalSignatureMethodException(
        crate::error::UnsupportedDigitalSignatureMethodException,
    ),
    /// <p>The provided input is not valid. Try your request again.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::AuthorizationException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::EntitlementNotAllowedException(inner) => inner.fmt(f),
            Error::FailedDependencyException(inner) => inner.fmt(f),
            Error::FilterLimitExceededException(inner) => inner.fmt(f),
            Error::InvalidParameterValueException(inner) => inner.fmt(f),
            Error::InvalidResourceStateException(inner) => inner.fmt(f),
            Error::LicenseUsageException(inner) => inner.fmt(f),
            Error::NoEntitlementsAllowedException(inner) => inner.fmt(f),
            Error::RateLimitExceededException(inner) => inner.fmt(f),
            Error::RedirectException(inner) => inner.fmt(f),
            Error::ResourceLimitExceededException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServerInternalException(inner) => inner.fmt(f),
            Error::UnsupportedDigitalSignatureMethodException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AcceptGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AcceptGrantError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AcceptGrantError> for Error {
    fn from(err: crate::error::AcceptGrantError) -> Self {
        match err {
            crate::error::AcceptGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::AcceptGrantError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::AcceptGrantError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::AcceptGrantError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::AcceptGrantError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::AcceptGrantError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::AcceptGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::AcceptGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CheckInLicenseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CheckInLicenseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CheckInLicenseError> for Error {
    fn from(err: crate::error::CheckInLicenseError) -> Self {
        match err {
            crate::error::CheckInLicenseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CheckInLicenseError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::CheckInLicenseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CheckInLicenseError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CheckInLicenseError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::CheckInLicenseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CheckInLicenseError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::CheckInLicenseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CheckInLicenseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CheckoutBorrowLicenseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CheckoutBorrowLicenseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CheckoutBorrowLicenseError> for Error {
    fn from(err: crate::error::CheckoutBorrowLicenseError) -> Self {
        match err {
            crate::error::CheckoutBorrowLicenseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CheckoutBorrowLicenseError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::CheckoutBorrowLicenseError::EntitlementNotAllowedException(inner) => Error::EntitlementNotAllowedException(inner),
            crate::error::CheckoutBorrowLicenseError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::CheckoutBorrowLicenseError::NoEntitlementsAllowedException(inner) => Error::NoEntitlementsAllowedException(inner),
            crate::error::CheckoutBorrowLicenseError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::CheckoutBorrowLicenseError::RedirectException(inner) => Error::RedirectException(inner),
            crate::error::CheckoutBorrowLicenseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CheckoutBorrowLicenseError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::CheckoutBorrowLicenseError::UnsupportedDigitalSignatureMethodException(inner) => Error::UnsupportedDigitalSignatureMethodException(inner),
            crate::error::CheckoutBorrowLicenseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CheckoutBorrowLicenseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CheckoutLicenseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CheckoutLicenseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CheckoutLicenseError> for Error {
    fn from(err: crate::error::CheckoutLicenseError) -> Self {
        match err {
            crate::error::CheckoutLicenseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CheckoutLicenseError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::CheckoutLicenseError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CheckoutLicenseError::NoEntitlementsAllowedException(inner) => {
                Error::NoEntitlementsAllowedException(inner)
            }
            crate::error::CheckoutLicenseError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::CheckoutLicenseError::RedirectException(inner) => {
                Error::RedirectException(inner)
            }
            crate::error::CheckoutLicenseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CheckoutLicenseError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::CheckoutLicenseError::UnsupportedDigitalSignatureMethodException(
                inner,
            ) => Error::UnsupportedDigitalSignatureMethodException(inner),
            crate::error::CheckoutLicenseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CheckoutLicenseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGrantError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGrantError> for Error {
    fn from(err: crate::error::CreateGrantError) -> Self {
        match err {
            crate::error::CreateGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateGrantError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::CreateGrantError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateGrantError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::CreateGrantError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateGrantError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::CreateGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGrantVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateGrantVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGrantVersionError> for Error {
    fn from(err: crate::error::CreateGrantVersionError) -> Self {
        match err {
            crate::error::CreateGrantVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateGrantVersionError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::CreateGrantVersionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateGrantVersionError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::CreateGrantVersionError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateGrantVersionError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::CreateGrantVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateGrantVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLicenseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateLicenseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLicenseError> for Error {
    fn from(err: crate::error::CreateLicenseError) -> Self {
        match err {
            crate::error::CreateLicenseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateLicenseError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::CreateLicenseError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::CreateLicenseError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::CreateLicenseError::RedirectException(inner) => {
                Error::RedirectException(inner)
            }
            crate::error::CreateLicenseError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::CreateLicenseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateLicenseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLicenseConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateLicenseConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLicenseConfigurationError> for Error {
    fn from(err: crate::error::CreateLicenseConfigurationError) -> Self {
        match err {
            crate::error::CreateLicenseConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateLicenseConfigurationError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::CreateLicenseConfigurationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::CreateLicenseConfigurationError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::CreateLicenseConfigurationError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateLicenseConfigurationError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::CreateLicenseConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateLicenseConversionTaskForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateLicenseConversionTaskForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLicenseConversionTaskForResourceError> for Error {
    fn from(err: crate::error::CreateLicenseConversionTaskForResourceError) -> Self {
        match err {
            crate::error::CreateLicenseConversionTaskForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateLicenseConversionTaskForResourceError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::CreateLicenseConversionTaskForResourceError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::CreateLicenseConversionTaskForResourceError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::CreateLicenseConversionTaskForResourceError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::CreateLicenseConversionTaskForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateLicenseConversionTaskForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateLicenseManagerReportGeneratorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateLicenseManagerReportGeneratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLicenseManagerReportGeneratorError> for Error {
    fn from(err: crate::error::CreateLicenseManagerReportGeneratorError) -> Self {
        match err {
            crate::error::CreateLicenseManagerReportGeneratorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateLicenseManagerReportGeneratorError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::CreateLicenseManagerReportGeneratorError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::CreateLicenseManagerReportGeneratorError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::CreateLicenseManagerReportGeneratorError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::CreateLicenseManagerReportGeneratorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::CreateLicenseManagerReportGeneratorError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::CreateLicenseManagerReportGeneratorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateLicenseManagerReportGeneratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateLicenseVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateLicenseVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateLicenseVersionError> for Error {
    fn from(err: crate::error::CreateLicenseVersionError) -> Self {
        match err {
            crate::error::CreateLicenseVersionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateLicenseVersionError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::CreateLicenseVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateLicenseVersionError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::CreateLicenseVersionError::RedirectException(inner) => {
                Error::RedirectException(inner)
            }
            crate::error::CreateLicenseVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateLicenseVersionError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::CreateLicenseVersionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateLicenseVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTokenError> for Error {
    fn from(err: crate::error::CreateTokenError) -> Self {
        match err {
            crate::error::CreateTokenError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateTokenError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::CreateTokenError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::CreateTokenError::RedirectException(inner) => {
                Error::RedirectException(inner)
            }
            crate::error::CreateTokenError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::CreateTokenError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateTokenError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::CreateTokenError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGrantError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGrantError> for Error {
    fn from(err: crate::error::DeleteGrantError) -> Self {
        match err {
            crate::error::DeleteGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteGrantError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::DeleteGrantError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteGrantError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::DeleteGrantError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::DeleteGrantError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::DeleteGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLicenseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteLicenseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLicenseError> for Error {
    fn from(err: crate::error::DeleteLicenseError) -> Self {
        match err {
            crate::error::DeleteLicenseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteLicenseError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::DeleteLicenseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteLicenseError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::DeleteLicenseError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::DeleteLicenseError::RedirectException(inner) => {
                Error::RedirectException(inner)
            }
            crate::error::DeleteLicenseError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::DeleteLicenseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteLicenseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteLicenseConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteLicenseConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLicenseConfigurationError> for Error {
    fn from(err: crate::error::DeleteLicenseConfigurationError) -> Self {
        match err {
            crate::error::DeleteLicenseConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteLicenseConfigurationError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::DeleteLicenseConfigurationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::DeleteLicenseConfigurationError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::DeleteLicenseConfigurationError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::DeleteLicenseConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteLicenseManagerReportGeneratorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteLicenseManagerReportGeneratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteLicenseManagerReportGeneratorError> for Error {
    fn from(err: crate::error::DeleteLicenseManagerReportGeneratorError) -> Self {
        match err {
            crate::error::DeleteLicenseManagerReportGeneratorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::DeleteLicenseManagerReportGeneratorError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::DeleteLicenseManagerReportGeneratorError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::DeleteLicenseManagerReportGeneratorError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::DeleteLicenseManagerReportGeneratorError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::DeleteLicenseManagerReportGeneratorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteLicenseManagerReportGeneratorError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::DeleteLicenseManagerReportGeneratorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DeleteLicenseManagerReportGeneratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTokenError> for Error {
    fn from(err: crate::error::DeleteTokenError) -> Self {
        match err {
            crate::error::DeleteTokenError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteTokenError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::DeleteTokenError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::DeleteTokenError::RedirectException(inner) => {
                Error::RedirectException(inner)
            }
            crate::error::DeleteTokenError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteTokenError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::DeleteTokenError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DeleteTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ExtendLicenseConsumptionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ExtendLicenseConsumptionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ExtendLicenseConsumptionError> for Error {
    fn from(err: crate::error::ExtendLicenseConsumptionError) -> Self {
        match err {
            crate::error::ExtendLicenseConsumptionError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ExtendLicenseConsumptionError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ExtendLicenseConsumptionError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ExtendLicenseConsumptionError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ExtendLicenseConsumptionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ExtendLicenseConsumptionError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ExtendLicenseConsumptionError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ExtendLicenseConsumptionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccessTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAccessTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccessTokenError> for Error {
    fn from(err: crate::error::GetAccessTokenError) -> Self {
        match err {
            crate::error::GetAccessTokenError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetAccessTokenError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::GetAccessTokenError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::GetAccessTokenError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::GetAccessTokenError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetAccessTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGrantError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGrantError> for Error {
    fn from(err: crate::error::GetGrantError) -> Self {
        match err {
            crate::error::GetGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetGrantError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::GetGrantError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::GetGrantError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::GetGrantError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::GetGrantError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::GetGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLicenseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLicenseError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLicenseError> for Error {
    fn from(err: crate::error::GetLicenseError) -> Self {
        match err {
            crate::error::GetLicenseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLicenseError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::GetLicenseError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::GetLicenseError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::GetLicenseError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::GetLicenseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetLicenseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLicenseConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLicenseConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLicenseConfigurationError> for Error {
    fn from(err: crate::error::GetLicenseConfigurationError) -> Self {
        match err {
            crate::error::GetLicenseConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLicenseConfigurationError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::GetLicenseConfigurationError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::GetLicenseConfigurationError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::GetLicenseConfigurationError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::GetLicenseConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLicenseConversionTaskError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLicenseConversionTaskError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLicenseConversionTaskError> for Error {
    fn from(err: crate::error::GetLicenseConversionTaskError) -> Self {
        match err {
            crate::error::GetLicenseConversionTaskError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLicenseConversionTaskError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::GetLicenseConversionTaskError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::GetLicenseConversionTaskError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::GetLicenseConversionTaskError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::GetLicenseConversionTaskError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetLicenseManagerReportGeneratorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetLicenseManagerReportGeneratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLicenseManagerReportGeneratorError> for Error {
    fn from(err: crate::error::GetLicenseManagerReportGeneratorError) -> Self {
        match err {
            crate::error::GetLicenseManagerReportGeneratorError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLicenseManagerReportGeneratorError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::GetLicenseManagerReportGeneratorError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::GetLicenseManagerReportGeneratorError::RateLimitExceededException(
                inner,
            ) => Error::RateLimitExceededException(inner),
            crate::error::GetLicenseManagerReportGeneratorError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::GetLicenseManagerReportGeneratorError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetLicenseManagerReportGeneratorError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::GetLicenseManagerReportGeneratorError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetLicenseManagerReportGeneratorError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLicenseUsageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetLicenseUsageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLicenseUsageError> for Error {
    fn from(err: crate::error::GetLicenseUsageError) -> Self {
        match err {
            crate::error::GetLicenseUsageError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetLicenseUsageError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::GetLicenseUsageError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::GetLicenseUsageError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::GetLicenseUsageError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::GetLicenseUsageError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::GetLicenseUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetServiceSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetServiceSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetServiceSettingsError> for Error {
    fn from(err: crate::error::GetServiceSettingsError) -> Self {
        match err {
            crate::error::GetServiceSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetServiceSettingsError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::GetServiceSettingsError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::GetServiceSettingsError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::GetServiceSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListAssociationsForLicenseConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAssociationsForLicenseConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAssociationsForLicenseConfigurationError> for Error {
    fn from(err: crate::error::ListAssociationsForLicenseConfigurationError) -> Self {
        match err {
            crate::error::ListAssociationsForLicenseConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListAssociationsForLicenseConfigurationError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::ListAssociationsForLicenseConfigurationError::FilterLimitExceededException(inner) => Error::FilterLimitExceededException(inner),
            crate::error::ListAssociationsForLicenseConfigurationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ListAssociationsForLicenseConfigurationError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::ListAssociationsForLicenseConfigurationError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::ListAssociationsForLicenseConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDistributedGrantsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDistributedGrantsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDistributedGrantsError> for Error {
    fn from(err: crate::error::ListDistributedGrantsError) -> Self {
        match err {
            crate::error::ListDistributedGrantsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListDistributedGrantsError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListDistributedGrantsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListDistributedGrantsError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListDistributedGrantsError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::ListDistributedGrantsError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListDistributedGrantsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListDistributedGrantsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListFailuresForLicenseConfigurationOperationsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListFailuresForLicenseConfigurationOperationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFailuresForLicenseConfigurationOperationsError> for Error {
    fn from(err: crate::error::ListFailuresForLicenseConfigurationOperationsError) -> Self {
        match err {
            crate::error::ListFailuresForLicenseConfigurationOperationsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListFailuresForLicenseConfigurationOperationsError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::ListFailuresForLicenseConfigurationOperationsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ListFailuresForLicenseConfigurationOperationsError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::ListFailuresForLicenseConfigurationOperationsError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::ListFailuresForLicenseConfigurationOperationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLicenseConfigurationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListLicenseConfigurationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLicenseConfigurationsError> for Error {
    fn from(err: crate::error::ListLicenseConfigurationsError) -> Self {
        match err {
            crate::error::ListLicenseConfigurationsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListLicenseConfigurationsError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListLicenseConfigurationsError::FilterLimitExceededException(inner) => {
                Error::FilterLimitExceededException(inner)
            }
            crate::error::ListLicenseConfigurationsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListLicenseConfigurationsError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListLicenseConfigurationsError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListLicenseConfigurationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLicenseConversionTasksError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListLicenseConversionTasksError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLicenseConversionTasksError> for Error {
    fn from(err: crate::error::ListLicenseConversionTasksError) -> Self {
        match err {
            crate::error::ListLicenseConversionTasksError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListLicenseConversionTasksError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListLicenseConversionTasksError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::ListLicenseConversionTasksError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListLicenseConversionTasksError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListLicenseConversionTasksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::ListLicenseManagerReportGeneratorsError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListLicenseManagerReportGeneratorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLicenseManagerReportGeneratorsError> for Error {
    fn from(err: crate::error::ListLicenseManagerReportGeneratorsError) -> Self {
        match err {
            crate::error::ListLicenseManagerReportGeneratorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListLicenseManagerReportGeneratorsError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::ListLicenseManagerReportGeneratorsError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ListLicenseManagerReportGeneratorsError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::ListLicenseManagerReportGeneratorsError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::ListLicenseManagerReportGeneratorsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListLicenseManagerReportGeneratorsError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::ListLicenseManagerReportGeneratorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListLicenseManagerReportGeneratorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLicensesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLicensesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLicensesError> for Error {
    fn from(err: crate::error::ListLicensesError) -> Self {
        match err {
            crate::error::ListLicensesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListLicensesError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListLicensesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListLicensesError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListLicensesError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListLicensesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListLicensesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListLicenseSpecificationsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListLicenseSpecificationsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLicenseSpecificationsForResourceError> for Error {
    fn from(err: crate::error::ListLicenseSpecificationsForResourceError) -> Self {
        match err {
            crate::error::ListLicenseSpecificationsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListLicenseSpecificationsForResourceError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::ListLicenseSpecificationsForResourceError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ListLicenseSpecificationsForResourceError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::ListLicenseSpecificationsForResourceError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::ListLicenseSpecificationsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLicenseVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListLicenseVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLicenseVersionsError> for Error {
    fn from(err: crate::error::ListLicenseVersionsError) -> Self {
        match err {
            crate::error::ListLicenseVersionsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListLicenseVersionsError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListLicenseVersionsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListLicenseVersionsError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListLicenseVersionsError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListLicenseVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListReceivedGrantsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListReceivedGrantsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListReceivedGrantsError> for Error {
    fn from(err: crate::error::ListReceivedGrantsError) -> Self {
        match err {
            crate::error::ListReceivedGrantsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListReceivedGrantsError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListReceivedGrantsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListReceivedGrantsError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListReceivedGrantsError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::ListReceivedGrantsError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListReceivedGrantsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListReceivedGrantsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListReceivedGrantsForOrganizationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListReceivedGrantsForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListReceivedGrantsForOrganizationError> for Error {
    fn from(err: crate::error::ListReceivedGrantsForOrganizationError) -> Self {
        match err {
            crate::error::ListReceivedGrantsForOrganizationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListReceivedGrantsForOrganizationError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::ListReceivedGrantsForOrganizationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ListReceivedGrantsForOrganizationError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::ListReceivedGrantsForOrganizationError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::ListReceivedGrantsForOrganizationError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::ListReceivedGrantsForOrganizationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListReceivedGrantsForOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListReceivedLicensesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListReceivedLicensesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListReceivedLicensesError> for Error {
    fn from(err: crate::error::ListReceivedLicensesError) -> Self {
        match err {
            crate::error::ListReceivedLicensesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListReceivedLicensesError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListReceivedLicensesError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListReceivedLicensesError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListReceivedLicensesError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::ListReceivedLicensesError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListReceivedLicensesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListReceivedLicensesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListReceivedLicensesForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListReceivedLicensesForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListReceivedLicensesForOrganizationError> for Error {
    fn from(err: crate::error::ListReceivedLicensesForOrganizationError) -> Self {
        match err {
            crate::error::ListReceivedLicensesForOrganizationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::ListReceivedLicensesForOrganizationError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::ListReceivedLicensesForOrganizationError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::ListReceivedLicensesForOrganizationError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::ListReceivedLicensesForOrganizationError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::ListReceivedLicensesForOrganizationError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::ListReceivedLicensesForOrganizationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::ListReceivedLicensesForOrganizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceInventoryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceInventoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceInventoryError> for Error {
    fn from(err: crate::error::ListResourceInventoryError) -> Self {
        match err {
            crate::error::ListResourceInventoryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListResourceInventoryError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListResourceInventoryError::FailedDependencyException(inner) => {
                Error::FailedDependencyException(inner)
            }
            crate::error::ListResourceInventoryError::FilterLimitExceededException(inner) => {
                Error::FilterLimitExceededException(inner)
            }
            crate::error::ListResourceInventoryError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListResourceInventoryError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListResourceInventoryError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListResourceInventoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::ListTagsForResourceError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListTagsForResourceError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTokensError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTokensError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTokensError> for Error {
    fn from(err: crate::error::ListTokensError) -> Self {
        match err {
            crate::error::ListTokensError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTokensError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListTokensError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::ListTokensError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListTokensError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTokensError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListUsageForLicenseConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListUsageForLicenseConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsageForLicenseConfigurationError> for Error {
    fn from(err: crate::error::ListUsageForLicenseConfigurationError) -> Self {
        match err {
            crate::error::ListUsageForLicenseConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListUsageForLicenseConfigurationError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::ListUsageForLicenseConfigurationError::FilterLimitExceededException(
                inner,
            ) => Error::FilterLimitExceededException(inner),
            crate::error::ListUsageForLicenseConfigurationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::ListUsageForLicenseConfigurationError::RateLimitExceededException(
                inner,
            ) => Error::RateLimitExceededException(inner),
            crate::error::ListUsageForLicenseConfigurationError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::ListUsageForLicenseConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RejectGrantError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RejectGrantError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RejectGrantError> for Error {
    fn from(err: crate::error::RejectGrantError) -> Self {
        match err {
            crate::error::RejectGrantError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::RejectGrantError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::RejectGrantError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::RejectGrantError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::RejectGrantError::ResourceLimitExceededException(inner) => {
                Error::ResourceLimitExceededException(inner)
            }
            crate::error::RejectGrantError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::RejectGrantError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RejectGrantError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::TagResourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::TagResourceError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::TagResourceError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::UntagResourceError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UntagResourceError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::UntagResourceError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLicenseConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateLicenseConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLicenseConfigurationError> for Error {
    fn from(err: crate::error::UpdateLicenseConfigurationError) -> Self {
        match err {
            crate::error::UpdateLicenseConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateLicenseConfigurationError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::UpdateLicenseConfigurationError::InvalidParameterValueException(
                inner,
            ) => Error::InvalidParameterValueException(inner),
            crate::error::UpdateLicenseConfigurationError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::UpdateLicenseConfigurationError::ResourceLimitExceededException(
                inner,
            ) => Error::ResourceLimitExceededException(inner),
            crate::error::UpdateLicenseConfigurationError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::UpdateLicenseConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateLicenseManagerReportGeneratorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateLicenseManagerReportGeneratorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLicenseManagerReportGeneratorError> for Error {
    fn from(err: crate::error::UpdateLicenseManagerReportGeneratorError) -> Self {
        match err {
            crate::error::UpdateLicenseManagerReportGeneratorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateLicenseManagerReportGeneratorError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::UpdateLicenseManagerReportGeneratorError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::UpdateLicenseManagerReportGeneratorError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::UpdateLicenseManagerReportGeneratorError::ResourceLimitExceededException(inner) => Error::ResourceLimitExceededException(inner),
            crate::error::UpdateLicenseManagerReportGeneratorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateLicenseManagerReportGeneratorError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::UpdateLicenseManagerReportGeneratorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateLicenseManagerReportGeneratorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateLicenseSpecificationsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateLicenseSpecificationsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLicenseSpecificationsForResourceError> for Error {
    fn from(err: crate::error::UpdateLicenseSpecificationsForResourceError) -> Self {
        match err {
            crate::error::UpdateLicenseSpecificationsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateLicenseSpecificationsForResourceError::AuthorizationException(inner) => Error::AuthorizationException(inner),
            crate::error::UpdateLicenseSpecificationsForResourceError::InvalidParameterValueException(inner) => Error::InvalidParameterValueException(inner),
            crate::error::UpdateLicenseSpecificationsForResourceError::InvalidResourceStateException(inner) => Error::InvalidResourceStateException(inner),
            crate::error::UpdateLicenseSpecificationsForResourceError::LicenseUsageException(inner) => Error::LicenseUsageException(inner),
            crate::error::UpdateLicenseSpecificationsForResourceError::RateLimitExceededException(inner) => Error::RateLimitExceededException(inner),
            crate::error::UpdateLicenseSpecificationsForResourceError::ServerInternalException(inner) => Error::ServerInternalException(inner),
            crate::error::UpdateLicenseSpecificationsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateServiceSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateServiceSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateServiceSettingsError> for Error {
    fn from(err: crate::error::UpdateServiceSettingsError) -> Self {
        match err {
            crate::error::UpdateServiceSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateServiceSettingsError::AuthorizationException(inner) => {
                Error::AuthorizationException(inner)
            }
            crate::error::UpdateServiceSettingsError::InvalidParameterValueException(inner) => {
                Error::InvalidParameterValueException(inner)
            }
            crate::error::UpdateServiceSettingsError::RateLimitExceededException(inner) => {
                Error::RateLimitExceededException(inner)
            }
            crate::error::UpdateServiceSettingsError::ServerInternalException(inner) => {
                Error::ServerInternalException(inner)
            }
            crate::error::UpdateServiceSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::AuthorizationException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::EntitlementNotAllowedException(e) => e.request_id(),
            Self::FailedDependencyException(e) => e.request_id(),
            Self::FilterLimitExceededException(e) => e.request_id(),
            Self::InvalidParameterValueException(e) => e.request_id(),
            Self::InvalidResourceStateException(e) => e.request_id(),
            Self::LicenseUsageException(e) => e.request_id(),
            Self::NoEntitlementsAllowedException(e) => e.request_id(),
            Self::RateLimitExceededException(e) => e.request_id(),
            Self::RedirectException(e) => e.request_id(),
            Self::ResourceLimitExceededException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServerInternalException(e) => e.request_id(),
            Self::UnsupportedDigitalSignatureMethodException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
