// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ExtendLicenseConsumptionOutput {
    /// <p>License consumption token.</p>
    #[doc(hidden)]
    pub license_consumption_token: std::option::Option<std::string::String>,
    /// <p>Date and time at which the license consumption expires.</p>
    #[doc(hidden)]
    pub expiration: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExtendLicenseConsumptionOutput {
    /// <p>License consumption token.</p>
    pub fn license_consumption_token(&self) -> std::option::Option<&str> {
        self.license_consumption_token.as_deref()
    }
    /// <p>Date and time at which the license consumption expires.</p>
    pub fn expiration(&self) -> std::option::Option<&str> {
        self.expiration.as_deref()
    }
}
impl aws_http::request_id::RequestId for ExtendLicenseConsumptionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ExtendLicenseConsumptionOutput {
    /// Creates a new builder-style object to manufacture [`ExtendLicenseConsumptionOutput`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionOutput).
    pub fn builder(
    ) -> crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionOutputBuilder
    {
        crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionOutputBuilder::default()
    }
}

/// A builder for [`ExtendLicenseConsumptionOutput`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ExtendLicenseConsumptionOutputBuilder {
    pub(crate) license_consumption_token: std::option::Option<std::string::String>,
    pub(crate) expiration: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ExtendLicenseConsumptionOutputBuilder {
    /// <p>License consumption token.</p>
    pub fn license_consumption_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_consumption_token = Some(input.into());
        self
    }
    /// <p>License consumption token.</p>
    pub fn set_license_consumption_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.license_consumption_token = input;
        self
    }
    /// <p>Date and time at which the license consumption expires.</p>
    pub fn expiration(mut self, input: impl Into<std::string::String>) -> Self {
        self.expiration = Some(input.into());
        self
    }
    /// <p>Date and time at which the license consumption expires.</p>
    pub fn set_expiration(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expiration = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ExtendLicenseConsumptionOutput`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionOutput).
    pub fn build(
        self,
    ) -> crate::operation::extend_license_consumption::ExtendLicenseConsumptionOutput {
        crate::operation::extend_license_consumption::ExtendLicenseConsumptionOutput {
            license_consumption_token: self.license_consumption_token,
            expiration: self.expiration,
            _request_id: self._request_id,
        }
    }
}
