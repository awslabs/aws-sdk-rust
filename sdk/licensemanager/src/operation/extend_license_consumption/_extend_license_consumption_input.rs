// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExtendLicenseConsumptionInput {
    /// <p>License consumption token.</p>
    pub license_consumption_token: ::std::option::Option<::std::string::String>,
    /// <p>Checks whether you have the required permissions for the action, without actually making the request. Provides an error response if you do not have the required permissions.</p>
    pub dry_run: ::std::option::Option<bool>,
}
impl ExtendLicenseConsumptionInput {
    /// <p>License consumption token.</p>
    pub fn license_consumption_token(&self) -> ::std::option::Option<&str> {
        self.license_consumption_token.as_deref()
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request. Provides an error response if you do not have the required permissions.</p>
    pub fn dry_run(&self) -> ::std::option::Option<bool> {
        self.dry_run
    }
}
impl ExtendLicenseConsumptionInput {
    /// Creates a new builder-style object to manufacture [`ExtendLicenseConsumptionInput`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionInput).
    pub fn builder() -> crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionInputBuilder {
        crate::operation::extend_license_consumption::builders::ExtendLicenseConsumptionInputBuilder::default()
    }
}

/// A builder for [`ExtendLicenseConsumptionInput`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExtendLicenseConsumptionInputBuilder {
    pub(crate) license_consumption_token: ::std::option::Option<::std::string::String>,
    pub(crate) dry_run: ::std::option::Option<bool>,
}
impl ExtendLicenseConsumptionInputBuilder {
    /// <p>License consumption token.</p>
    /// This field is required.
    pub fn license_consumption_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.license_consumption_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>License consumption token.</p>
    pub fn set_license_consumption_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.license_consumption_token = input;
        self
    }
    /// <p>License consumption token.</p>
    pub fn get_license_consumption_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.license_consumption_token
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request. Provides an error response if you do not have the required permissions.</p>
    pub fn dry_run(mut self, input: bool) -> Self {
        self.dry_run = ::std::option::Option::Some(input);
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request. Provides an error response if you do not have the required permissions.</p>
    pub fn set_dry_run(mut self, input: ::std::option::Option<bool>) -> Self {
        self.dry_run = input;
        self
    }
    /// <p>Checks whether you have the required permissions for the action, without actually making the request. Provides an error response if you do not have the required permissions.</p>
    pub fn get_dry_run(&self) -> &::std::option::Option<bool> {
        &self.dry_run
    }
    /// Consumes the builder and constructs a [`ExtendLicenseConsumptionInput`](crate::operation::extend_license_consumption::ExtendLicenseConsumptionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::extend_license_consumption::ExtendLicenseConsumptionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::extend_license_consumption::ExtendLicenseConsumptionInput {
            license_consumption_token: self.license_consumption_token,
            dry_run: self.dry_run,
        })
    }
}
