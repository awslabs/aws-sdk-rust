// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_license_specifications_for_resource::_update_license_specifications_for_resource_output::UpdateLicenseSpecificationsForResourceOutputBuilder;

pub use crate::operation::update_license_specifications_for_resource::_update_license_specifications_for_resource_input::UpdateLicenseSpecificationsForResourceInputBuilder;

/// Fluent builder constructing a request to `UpdateLicenseSpecificationsForResource`.
///
/// <p>Adds or removes the specified license configurations for the specified Amazon Web Services resource.</p>
/// <p>You can update the license specifications of AMIs, instances, and hosts. You cannot update the license specifications for launch templates and CloudFormation templates, as they send license configurations to the operation that creates the resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateLicenseSpecificationsForResourceFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_license_specifications_for_resource::builders::UpdateLicenseSpecificationsForResourceInputBuilder
            }
impl UpdateLicenseSpecificationsForResourceFluentBuilder {
    /// Creates a new `UpdateLicenseSpecificationsForResource`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResource, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResourceError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResourceOutput, aws_smithy_http::result::SdkError<crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResourceError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_arn(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_arn(input);
        self
    }
    /// Appends an item to `AddLicenseSpecifications`.
    ///
    /// To override the contents of this collection use [`set_add_license_specifications`](Self::set_add_license_specifications).
    ///
    /// <p>ARNs of the license configurations to add.</p>
    pub fn add_license_specifications(mut self, input: crate::types::LicenseSpecification) -> Self {
        self.inner = self.inner.add_license_specifications(input);
        self
    }
    /// <p>ARNs of the license configurations to add.</p>
    pub fn set_add_license_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LicenseSpecification>>,
    ) -> Self {
        self.inner = self.inner.set_add_license_specifications(input);
        self
    }
    /// Appends an item to `RemoveLicenseSpecifications`.
    ///
    /// To override the contents of this collection use [`set_remove_license_specifications`](Self::set_remove_license_specifications).
    ///
    /// <p>ARNs of the license configurations to remove.</p>
    pub fn remove_license_specifications(
        mut self,
        input: crate::types::LicenseSpecification,
    ) -> Self {
        self.inner = self.inner.remove_license_specifications(input);
        self
    }
    /// <p>ARNs of the license configurations to remove.</p>
    pub fn set_remove_license_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LicenseSpecification>>,
    ) -> Self {
        self.inner = self.inner.set_remove_license_specifications(input);
        self
    }
}
