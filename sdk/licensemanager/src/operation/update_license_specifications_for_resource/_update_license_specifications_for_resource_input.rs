// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateLicenseSpecificationsForResourceInput {
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>ARNs of the license configurations to add.</p>
    #[doc(hidden)]
    pub add_license_specifications:
        std::option::Option<std::vec::Vec<crate::types::LicenseSpecification>>,
    /// <p>ARNs of the license configurations to remove.</p>
    #[doc(hidden)]
    pub remove_license_specifications:
        std::option::Option<std::vec::Vec<crate::types::LicenseSpecification>>,
}
impl UpdateLicenseSpecificationsForResourceInput {
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>ARNs of the license configurations to add.</p>
    pub fn add_license_specifications(
        &self,
    ) -> std::option::Option<&[crate::types::LicenseSpecification]> {
        self.add_license_specifications.as_deref()
    }
    /// <p>ARNs of the license configurations to remove.</p>
    pub fn remove_license_specifications(
        &self,
    ) -> std::option::Option<&[crate::types::LicenseSpecification]> {
        self.remove_license_specifications.as_deref()
    }
}
impl UpdateLicenseSpecificationsForResourceInput {
    /// Creates a new builder-style object to manufacture [`UpdateLicenseSpecificationsForResourceInput`](crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResourceInput).
    pub fn builder() -> crate::operation::update_license_specifications_for_resource::builders::UpdateLicenseSpecificationsForResourceInputBuilder{
        crate::operation::update_license_specifications_for_resource::builders::UpdateLicenseSpecificationsForResourceInputBuilder::default()
    }
}

/// A builder for [`UpdateLicenseSpecificationsForResourceInput`](crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResourceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateLicenseSpecificationsForResourceInputBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) add_license_specifications:
        std::option::Option<std::vec::Vec<crate::types::LicenseSpecification>>,
    pub(crate) remove_license_specifications:
        std::option::Option<std::vec::Vec<crate::types::LicenseSpecification>>,
}
impl UpdateLicenseSpecificationsForResourceInputBuilder {
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the Amazon Web Services resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// Appends an item to `add_license_specifications`.
    ///
    /// To override the contents of this collection use [`set_add_license_specifications`](Self::set_add_license_specifications).
    ///
    /// <p>ARNs of the license configurations to add.</p>
    pub fn add_license_specifications(mut self, input: crate::types::LicenseSpecification) -> Self {
        let mut v = self.add_license_specifications.unwrap_or_default();
        v.push(input);
        self.add_license_specifications = Some(v);
        self
    }
    /// <p>ARNs of the license configurations to add.</p>
    pub fn set_add_license_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LicenseSpecification>>,
    ) -> Self {
        self.add_license_specifications = input;
        self
    }
    /// Appends an item to `remove_license_specifications`.
    ///
    /// To override the contents of this collection use [`set_remove_license_specifications`](Self::set_remove_license_specifications).
    ///
    /// <p>ARNs of the license configurations to remove.</p>
    pub fn remove_license_specifications(
        mut self,
        input: crate::types::LicenseSpecification,
    ) -> Self {
        let mut v = self.remove_license_specifications.unwrap_or_default();
        v.push(input);
        self.remove_license_specifications = Some(v);
        self
    }
    /// <p>ARNs of the license configurations to remove.</p>
    pub fn set_remove_license_specifications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::LicenseSpecification>>,
    ) -> Self {
        self.remove_license_specifications = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateLicenseSpecificationsForResourceInput`](crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResourceInput).
    pub fn build(self) -> Result<crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResourceInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_license_specifications_for_resource::UpdateLicenseSpecificationsForResourceInput {
                resource_arn: self.resource_arn
                ,
                add_license_specifications: self.add_license_specifications
                ,
                remove_license_specifications: self.remove_license_specifications
                ,
            }
        )
    }
}
