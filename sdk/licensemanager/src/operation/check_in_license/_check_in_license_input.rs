// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CheckInLicenseInput {
    /// <p>License consumption token.</p>
    #[doc(hidden)]
    pub license_consumption_token: std::option::Option<std::string::String>,
    /// <p>License beneficiary.</p>
    #[doc(hidden)]
    pub beneficiary: std::option::Option<std::string::String>,
}
impl CheckInLicenseInput {
    /// <p>License consumption token.</p>
    pub fn license_consumption_token(&self) -> std::option::Option<&str> {
        self.license_consumption_token.as_deref()
    }
    /// <p>License beneficiary.</p>
    pub fn beneficiary(&self) -> std::option::Option<&str> {
        self.beneficiary.as_deref()
    }
}
impl CheckInLicenseInput {
    /// Creates a new builder-style object to manufacture [`CheckInLicenseInput`](crate::operation::check_in_license::CheckInLicenseInput).
    pub fn builder() -> crate::operation::check_in_license::builders::CheckInLicenseInputBuilder {
        crate::operation::check_in_license::builders::CheckInLicenseInputBuilder::default()
    }
}

/// A builder for [`CheckInLicenseInput`](crate::operation::check_in_license::CheckInLicenseInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CheckInLicenseInputBuilder {
    pub(crate) license_consumption_token: std::option::Option<std::string::String>,
    pub(crate) beneficiary: std::option::Option<std::string::String>,
}
impl CheckInLicenseInputBuilder {
    /// <p>License consumption token.</p>
    pub fn license_consumption_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_consumption_token = Some(input.into());
        self
    }
    /// <p>License consumption token.</p>
    pub fn set_license_consumption_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.license_consumption_token = input;
        self
    }
    /// <p>License beneficiary.</p>
    pub fn beneficiary(mut self, input: impl Into<std::string::String>) -> Self {
        self.beneficiary = Some(input.into());
        self
    }
    /// <p>License beneficiary.</p>
    pub fn set_beneficiary(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.beneficiary = input;
        self
    }
    /// Consumes the builder and constructs a [`CheckInLicenseInput`](crate::operation::check_in_license::CheckInLicenseInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::check_in_license::CheckInLicenseInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::check_in_license::CheckInLicenseInput {
            license_consumption_token: self.license_consumption_token,
            beneficiary: self.beneficiary,
        })
    }
}
