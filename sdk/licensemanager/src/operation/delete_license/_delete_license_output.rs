// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteLicenseOutput {
    /// <p>License status.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::LicenseDeletionStatus>,
    /// <p>Date when the license is deleted.</p>
    #[doc(hidden)]
    pub deletion_date: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteLicenseOutput {
    /// <p>License status.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::LicenseDeletionStatus> {
        self.status.as_ref()
    }
    /// <p>Date when the license is deleted.</p>
    pub fn deletion_date(&self) -> std::option::Option<&str> {
        self.deletion_date.as_deref()
    }
}
impl aws_http::request_id::RequestId for DeleteLicenseOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeleteLicenseOutput {
    /// Creates a new builder-style object to manufacture [`DeleteLicenseOutput`](crate::operation::delete_license::DeleteLicenseOutput).
    pub fn builder() -> crate::operation::delete_license::builders::DeleteLicenseOutputBuilder {
        crate::operation::delete_license::builders::DeleteLicenseOutputBuilder::default()
    }
}

/// A builder for [`DeleteLicenseOutput`](crate::operation::delete_license::DeleteLicenseOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteLicenseOutputBuilder {
    pub(crate) status: std::option::Option<crate::types::LicenseDeletionStatus>,
    pub(crate) deletion_date: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DeleteLicenseOutputBuilder {
    /// <p>License status.</p>
    pub fn status(mut self, input: crate::types::LicenseDeletionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>License status.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::LicenseDeletionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Date when the license is deleted.</p>
    pub fn deletion_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.deletion_date = Some(input.into());
        self
    }
    /// <p>Date when the license is deleted.</p>
    pub fn set_deletion_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.deletion_date = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeleteLicenseOutput`](crate::operation::delete_license::DeleteLicenseOutput).
    pub fn build(self) -> crate::operation::delete_license::DeleteLicenseOutput {
        crate::operation::delete_license::DeleteLicenseOutput {
            status: self.status,
            deletion_date: self.deletion_date,
            _request_id: self._request_id,
        }
    }
}
