// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLicenseInput {
    /// <p>License name.</p>
    #[doc(hidden)]
    pub license_name: std::option::Option<std::string::String>,
    /// <p>Product name.</p>
    #[doc(hidden)]
    pub product_name: std::option::Option<std::string::String>,
    /// <p>Product SKU.</p>
    #[doc(hidden)]
    pub product_sku: std::option::Option<std::string::String>,
    /// <p>License issuer.</p>
    #[doc(hidden)]
    pub issuer: std::option::Option<crate::types::Issuer>,
    /// <p>Home Region for the license.</p>
    #[doc(hidden)]
    pub home_region: std::option::Option<std::string::String>,
    /// <p>Date and time range during which the license is valid, in ISO8601-UTC format.</p>
    #[doc(hidden)]
    pub validity: std::option::Option<crate::types::DatetimeRange>,
    /// <p>License entitlements.</p>
    #[doc(hidden)]
    pub entitlements: std::option::Option<std::vec::Vec<crate::types::Entitlement>>,
    /// <p>License beneficiary.</p>
    #[doc(hidden)]
    pub beneficiary: std::option::Option<std::string::String>,
    /// <p>Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage.</p>
    #[doc(hidden)]
    pub consumption_configuration: std::option::Option<crate::types::ConsumptionConfiguration>,
    /// <p>Information about the license.</p>
    #[doc(hidden)]
    pub license_metadata: std::option::Option<std::vec::Vec<crate::types::Metadata>>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
}
impl CreateLicenseInput {
    /// <p>License name.</p>
    pub fn license_name(&self) -> std::option::Option<&str> {
        self.license_name.as_deref()
    }
    /// <p>Product name.</p>
    pub fn product_name(&self) -> std::option::Option<&str> {
        self.product_name.as_deref()
    }
    /// <p>Product SKU.</p>
    pub fn product_sku(&self) -> std::option::Option<&str> {
        self.product_sku.as_deref()
    }
    /// <p>License issuer.</p>
    pub fn issuer(&self) -> std::option::Option<&crate::types::Issuer> {
        self.issuer.as_ref()
    }
    /// <p>Home Region for the license.</p>
    pub fn home_region(&self) -> std::option::Option<&str> {
        self.home_region.as_deref()
    }
    /// <p>Date and time range during which the license is valid, in ISO8601-UTC format.</p>
    pub fn validity(&self) -> std::option::Option<&crate::types::DatetimeRange> {
        self.validity.as_ref()
    }
    /// <p>License entitlements.</p>
    pub fn entitlements(&self) -> std::option::Option<&[crate::types::Entitlement]> {
        self.entitlements.as_deref()
    }
    /// <p>License beneficiary.</p>
    pub fn beneficiary(&self) -> std::option::Option<&str> {
        self.beneficiary.as_deref()
    }
    /// <p>Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage.</p>
    pub fn consumption_configuration(
        &self,
    ) -> std::option::Option<&crate::types::ConsumptionConfiguration> {
        self.consumption_configuration.as_ref()
    }
    /// <p>Information about the license.</p>
    pub fn license_metadata(&self) -> std::option::Option<&[crate::types::Metadata]> {
        self.license_metadata.as_deref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
}
impl CreateLicenseInput {
    /// Creates a new builder-style object to manufacture [`CreateLicenseInput`](crate::operation::create_license::CreateLicenseInput).
    pub fn builder() -> crate::operation::create_license::builders::CreateLicenseInputBuilder {
        crate::operation::create_license::builders::CreateLicenseInputBuilder::default()
    }
}

/// A builder for [`CreateLicenseInput`](crate::operation::create_license::CreateLicenseInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLicenseInputBuilder {
    pub(crate) license_name: std::option::Option<std::string::String>,
    pub(crate) product_name: std::option::Option<std::string::String>,
    pub(crate) product_sku: std::option::Option<std::string::String>,
    pub(crate) issuer: std::option::Option<crate::types::Issuer>,
    pub(crate) home_region: std::option::Option<std::string::String>,
    pub(crate) validity: std::option::Option<crate::types::DatetimeRange>,
    pub(crate) entitlements: std::option::Option<std::vec::Vec<crate::types::Entitlement>>,
    pub(crate) beneficiary: std::option::Option<std::string::String>,
    pub(crate) consumption_configuration:
        std::option::Option<crate::types::ConsumptionConfiguration>,
    pub(crate) license_metadata: std::option::Option<std::vec::Vec<crate::types::Metadata>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
}
impl CreateLicenseInputBuilder {
    /// <p>License name.</p>
    pub fn license_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_name = Some(input.into());
        self
    }
    /// <p>License name.</p>
    pub fn set_license_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_name = input;
        self
    }
    /// <p>Product name.</p>
    pub fn product_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_name = Some(input.into());
        self
    }
    /// <p>Product name.</p>
    pub fn set_product_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_name = input;
        self
    }
    /// <p>Product SKU.</p>
    pub fn product_sku(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_sku = Some(input.into());
        self
    }
    /// <p>Product SKU.</p>
    pub fn set_product_sku(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_sku = input;
        self
    }
    /// <p>License issuer.</p>
    pub fn issuer(mut self, input: crate::types::Issuer) -> Self {
        self.issuer = Some(input);
        self
    }
    /// <p>License issuer.</p>
    pub fn set_issuer(mut self, input: std::option::Option<crate::types::Issuer>) -> Self {
        self.issuer = input;
        self
    }
    /// <p>Home Region for the license.</p>
    pub fn home_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.home_region = Some(input.into());
        self
    }
    /// <p>Home Region for the license.</p>
    pub fn set_home_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.home_region = input;
        self
    }
    /// <p>Date and time range during which the license is valid, in ISO8601-UTC format.</p>
    pub fn validity(mut self, input: crate::types::DatetimeRange) -> Self {
        self.validity = Some(input);
        self
    }
    /// <p>Date and time range during which the license is valid, in ISO8601-UTC format.</p>
    pub fn set_validity(mut self, input: std::option::Option<crate::types::DatetimeRange>) -> Self {
        self.validity = input;
        self
    }
    /// Appends an item to `entitlements`.
    ///
    /// To override the contents of this collection use [`set_entitlements`](Self::set_entitlements).
    ///
    /// <p>License entitlements.</p>
    pub fn entitlements(mut self, input: crate::types::Entitlement) -> Self {
        let mut v = self.entitlements.unwrap_or_default();
        v.push(input);
        self.entitlements = Some(v);
        self
    }
    /// <p>License entitlements.</p>
    pub fn set_entitlements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Entitlement>>,
    ) -> Self {
        self.entitlements = input;
        self
    }
    /// <p>License beneficiary.</p>
    pub fn beneficiary(mut self, input: impl Into<std::string::String>) -> Self {
        self.beneficiary = Some(input.into());
        self
    }
    /// <p>License beneficiary.</p>
    pub fn set_beneficiary(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.beneficiary = input;
        self
    }
    /// <p>Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage.</p>
    pub fn consumption_configuration(
        mut self,
        input: crate::types::ConsumptionConfiguration,
    ) -> Self {
        self.consumption_configuration = Some(input);
        self
    }
    /// <p>Configuration for consumption of the license. Choose a provisional configuration for workloads running with continuous connectivity. Choose a borrow configuration for workloads with offline usage.</p>
    pub fn set_consumption_configuration(
        mut self,
        input: std::option::Option<crate::types::ConsumptionConfiguration>,
    ) -> Self {
        self.consumption_configuration = input;
        self
    }
    /// Appends an item to `license_metadata`.
    ///
    /// To override the contents of this collection use [`set_license_metadata`](Self::set_license_metadata).
    ///
    /// <p>Information about the license.</p>
    pub fn license_metadata(mut self, input: crate::types::Metadata) -> Self {
        let mut v = self.license_metadata.unwrap_or_default();
        v.push(input);
        self.license_metadata = Some(v);
        self
    }
    /// <p>Information about the license.</p>
    pub fn set_license_metadata(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Metadata>>,
    ) -> Self {
        self.license_metadata = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateLicenseInput`](crate::operation::create_license::CreateLicenseInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_license::CreateLicenseInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_license::CreateLicenseInput {
            license_name: self.license_name,
            product_name: self.product_name,
            product_sku: self.product_sku,
            issuer: self.issuer,
            home_region: self.home_region,
            validity: self.validity,
            entitlements: self.entitlements,
            beneficiary: self.beneficiary,
            consumption_configuration: self.consumption_configuration,
            license_metadata: self.license_metadata,
            client_token: self.client_token,
        })
    }
}
