// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::checkout_borrow_license::_checkout_borrow_license_output::CheckoutBorrowLicenseOutputBuilder;

pub use crate::operation::checkout_borrow_license::_checkout_borrow_license_input::CheckoutBorrowLicenseInputBuilder;

/// Fluent builder constructing a request to `CheckoutBorrowLicense`.
///
/// <p>Checks out the specified license for offline use.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CheckoutBorrowLicenseFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::checkout_borrow_license::builders::CheckoutBorrowLicenseInputBuilder,
}
impl CheckoutBorrowLicenseFluentBuilder {
    /// Creates a new `CheckoutBorrowLicense`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::checkout_borrow_license::CheckoutBorrowLicense,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::checkout_borrow_license::CheckoutBorrowLicenseError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::checkout_borrow_license::CheckoutBorrowLicenseOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::checkout_borrow_license::CheckoutBorrowLicenseError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Amazon Resource Name (ARN) of the license. The license must use the borrow consumption configuration.</p>
    pub fn license_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.license_arn(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license. The license must use the borrow consumption configuration.</p>
    pub fn set_license_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_license_arn(input);
        self
    }
    /// Appends an item to `Entitlements`.
    ///
    /// To override the contents of this collection use [`set_entitlements`](Self::set_entitlements).
    ///
    /// <p>License entitlements. Partial checkouts are not supported.</p>
    pub fn entitlements(mut self, input: crate::types::EntitlementData) -> Self {
        self.inner = self.inner.entitlements(input);
        self
    }
    /// <p>License entitlements. Partial checkouts are not supported.</p>
    pub fn set_entitlements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EntitlementData>>,
    ) -> Self {
        self.inner = self.inner.set_entitlements(input);
        self
    }
    /// <p>Digital signature method. The possible value is JSON Web Signature (JWS) algorithm PS384. For more information, see <a href="https://tools.ietf.org/html/rfc7518#section-3.5">RFC 7518 Digital Signature with RSASSA-PSS</a>.</p>
    pub fn digital_signature_method(mut self, input: crate::types::DigitalSignatureMethod) -> Self {
        self.inner = self.inner.digital_signature_method(input);
        self
    }
    /// <p>Digital signature method. The possible value is JSON Web Signature (JWS) algorithm PS384. For more information, see <a href="https://tools.ietf.org/html/rfc7518#section-3.5">RFC 7518 Digital Signature with RSASSA-PSS</a>.</p>
    pub fn set_digital_signature_method(
        mut self,
        input: std::option::Option<crate::types::DigitalSignatureMethod>,
    ) -> Self {
        self.inner = self.inner.set_digital_signature_method(input);
        self
    }
    /// <p>Node ID.</p>
    pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.node_id(input.into());
        self
    }
    /// <p>Node ID.</p>
    pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_node_id(input);
        self
    }
    /// Appends an item to `CheckoutMetadata`.
    ///
    /// To override the contents of this collection use [`set_checkout_metadata`](Self::set_checkout_metadata).
    ///
    /// <p>Information about constraints.</p>
    pub fn checkout_metadata(mut self, input: crate::types::Metadata) -> Self {
        self.inner = self.inner.checkout_metadata(input);
        self
    }
    /// <p>Information about constraints.</p>
    pub fn set_checkout_metadata(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Metadata>>,
    ) -> Self {
        self.inner = self.inner.set_checkout_metadata(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
}
