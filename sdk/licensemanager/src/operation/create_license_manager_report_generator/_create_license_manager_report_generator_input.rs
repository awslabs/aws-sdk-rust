// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateLicenseManagerReportGeneratorInput {
    /// <p>Name of the report generator.</p>
    #[doc(hidden)]
    pub report_generator_name: std::option::Option<std::string::String>,
    /// <p>Type of reports to generate. The following report types an be generated:</p>
    /// <ul>
    /// <li> <p>License configuration report - Reports the number and details of consumed licenses for a license configuration.</p> </li>
    /// <li> <p>Resource report - Reports the tracked licenses and resource consumption for a license configuration.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::vec::Vec<crate::types::ReportType>>,
    /// <p>Defines the type of license configuration the report generator tracks.</p>
    #[doc(hidden)]
    pub report_context: std::option::Option<crate::types::ReportContext>,
    /// <p>Frequency by which reports are generated. Reports can be generated daily, monthly, or weekly.</p>
    #[doc(hidden)]
    pub report_frequency: std::option::Option<crate::types::ReportFrequency>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Description of the report generator.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Tags to add to the report generator.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateLicenseManagerReportGeneratorInput {
    /// <p>Name of the report generator.</p>
    pub fn report_generator_name(&self) -> std::option::Option<&str> {
        self.report_generator_name.as_deref()
    }
    /// <p>Type of reports to generate. The following report types an be generated:</p>
    /// <ul>
    /// <li> <p>License configuration report - Reports the number and details of consumed licenses for a license configuration.</p> </li>
    /// <li> <p>Resource report - Reports the tracked licenses and resource consumption for a license configuration.</p> </li>
    /// </ul>
    pub fn r#type(&self) -> std::option::Option<&[crate::types::ReportType]> {
        self.r#type.as_deref()
    }
    /// <p>Defines the type of license configuration the report generator tracks.</p>
    pub fn report_context(&self) -> std::option::Option<&crate::types::ReportContext> {
        self.report_context.as_ref()
    }
    /// <p>Frequency by which reports are generated. Reports can be generated daily, monthly, or weekly.</p>
    pub fn report_frequency(&self) -> std::option::Option<&crate::types::ReportFrequency> {
        self.report_frequency.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Description of the report generator.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Tags to add to the report generator.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateLicenseManagerReportGeneratorInput {
    /// Creates a new builder-style object to manufacture [`CreateLicenseManagerReportGeneratorInput`](crate::operation::create_license_manager_report_generator::CreateLicenseManagerReportGeneratorInput).
    pub fn builder() -> crate::operation::create_license_manager_report_generator::builders::CreateLicenseManagerReportGeneratorInputBuilder{
        crate::operation::create_license_manager_report_generator::builders::CreateLicenseManagerReportGeneratorInputBuilder::default()
    }
}

/// A builder for [`CreateLicenseManagerReportGeneratorInput`](crate::operation::create_license_manager_report_generator::CreateLicenseManagerReportGeneratorInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateLicenseManagerReportGeneratorInputBuilder {
    pub(crate) report_generator_name: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::vec::Vec<crate::types::ReportType>>,
    pub(crate) report_context: std::option::Option<crate::types::ReportContext>,
    pub(crate) report_frequency: std::option::Option<crate::types::ReportFrequency>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateLicenseManagerReportGeneratorInputBuilder {
    /// <p>Name of the report generator.</p>
    pub fn report_generator_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.report_generator_name = Some(input.into());
        self
    }
    /// <p>Name of the report generator.</p>
    pub fn set_report_generator_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.report_generator_name = input;
        self
    }
    /// Appends an item to `r#type`.
    ///
    /// To override the contents of this collection use [`set_type`](Self::set_type).
    ///
    /// <p>Type of reports to generate. The following report types an be generated:</p>
    /// <ul>
    /// <li> <p>License configuration report - Reports the number and details of consumed licenses for a license configuration.</p> </li>
    /// <li> <p>Resource report - Reports the tracked licenses and resource consumption for a license configuration.</p> </li>
    /// </ul>
    pub fn r#type(mut self, input: crate::types::ReportType) -> Self {
        let mut v = self.r#type.unwrap_or_default();
        v.push(input);
        self.r#type = Some(v);
        self
    }
    /// <p>Type of reports to generate. The following report types an be generated:</p>
    /// <ul>
    /// <li> <p>License configuration report - Reports the number and details of consumed licenses for a license configuration.</p> </li>
    /// <li> <p>Resource report - Reports the tracked licenses and resource consumption for a license configuration.</p> </li>
    /// </ul>
    pub fn set_type(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ReportType>>,
    ) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Defines the type of license configuration the report generator tracks.</p>
    pub fn report_context(mut self, input: crate::types::ReportContext) -> Self {
        self.report_context = Some(input);
        self
    }
    /// <p>Defines the type of license configuration the report generator tracks.</p>
    pub fn set_report_context(
        mut self,
        input: std::option::Option<crate::types::ReportContext>,
    ) -> Self {
        self.report_context = input;
        self
    }
    /// <p>Frequency by which reports are generated. Reports can be generated daily, monthly, or weekly.</p>
    pub fn report_frequency(mut self, input: crate::types::ReportFrequency) -> Self {
        self.report_frequency = Some(input);
        self
    }
    /// <p>Frequency by which reports are generated. Reports can be generated daily, monthly, or weekly.</p>
    pub fn set_report_frequency(
        mut self,
        input: std::option::Option<crate::types::ReportFrequency>,
    ) -> Self {
        self.report_frequency = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Description of the report generator.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Description of the report generator.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags to add to the report generator.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>Tags to add to the report generator.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateLicenseManagerReportGeneratorInput`](crate::operation::create_license_manager_report_generator::CreateLicenseManagerReportGeneratorInput).
    pub fn build(self) -> Result<crate::operation::create_license_manager_report_generator::CreateLicenseManagerReportGeneratorInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::create_license_manager_report_generator::CreateLicenseManagerReportGeneratorInput {
                report_generator_name: self.report_generator_name
                ,
                r#type: self.r#type
                ,
                report_context: self.report_context
                ,
                report_frequency: self.report_frequency
                ,
                client_token: self.client_token
                ,
                description: self.description
                ,
                tags: self.tags
                ,
            }
        )
    }
}
