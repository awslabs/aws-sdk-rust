// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDistributedGrantsInput {
    /// <p>Amazon Resource Names (ARNs) of the grants.</p>
    #[doc(hidden)]
    pub grant_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Filters to scope the results. The following filters are supported:</p>
    /// <ul>
    /// <li> <p> <code>LicenseArn</code> </p> </li>
    /// <li> <p> <code>GrantStatus</code> </p> </li>
    /// <li> <p> <code>GranteePrincipalARN</code> </p> </li>
    /// <li> <p> <code>ProductSKU</code> </p> </li>
    /// <li> <p> <code>LicenseIssuerName</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    /// <p>Token for the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Maximum number of results to return in a single call.</p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
}
impl ListDistributedGrantsInput {
    /// <p>Amazon Resource Names (ARNs) of the grants.</p>
    pub fn grant_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.grant_arns.as_deref()
    }
    /// <p>Filters to scope the results. The following filters are supported:</p>
    /// <ul>
    /// <li> <p> <code>LicenseArn</code> </p> </li>
    /// <li> <p> <code>GrantStatus</code> </p> </li>
    /// <li> <p> <code>GranteePrincipalARN</code> </p> </li>
    /// <li> <p> <code>ProductSKU</code> </p> </li>
    /// <li> <p> <code>LicenseIssuerName</code> </p> </li>
    /// </ul>
    pub fn filters(&self) -> std::option::Option<&[crate::types::Filter]> {
        self.filters.as_deref()
    }
    /// <p>Token for the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Maximum number of results to return in a single call.</p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
}
impl ListDistributedGrantsInput {
    /// Creates a new builder-style object to manufacture [`ListDistributedGrantsInput`](crate::operation::list_distributed_grants::ListDistributedGrantsInput).
    pub fn builder(
    ) -> crate::operation::list_distributed_grants::builders::ListDistributedGrantsInputBuilder
    {
        crate::operation::list_distributed_grants::builders::ListDistributedGrantsInputBuilder::default()
    }
}

/// A builder for [`ListDistributedGrantsInput`](crate::operation::list_distributed_grants::ListDistributedGrantsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDistributedGrantsInputBuilder {
    pub(crate) grant_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) filters: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) max_results: std::option::Option<i32>,
}
impl ListDistributedGrantsInputBuilder {
    /// Appends an item to `grant_arns`.
    ///
    /// To override the contents of this collection use [`set_grant_arns`](Self::set_grant_arns).
    ///
    /// <p>Amazon Resource Names (ARNs) of the grants.</p>
    pub fn grant_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.grant_arns.unwrap_or_default();
        v.push(input.into());
        self.grant_arns = Some(v);
        self
    }
    /// <p>Amazon Resource Names (ARNs) of the grants.</p>
    pub fn set_grant_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.grant_arns = input;
        self
    }
    /// Appends an item to `filters`.
    ///
    /// To override the contents of this collection use [`set_filters`](Self::set_filters).
    ///
    /// <p>Filters to scope the results. The following filters are supported:</p>
    /// <ul>
    /// <li> <p> <code>LicenseArn</code> </p> </li>
    /// <li> <p> <code>GrantStatus</code> </p> </li>
    /// <li> <p> <code>GranteePrincipalARN</code> </p> </li>
    /// <li> <p> <code>ProductSKU</code> </p> </li>
    /// <li> <p> <code>LicenseIssuerName</code> </p> </li>
    /// </ul>
    pub fn filters(mut self, input: crate::types::Filter) -> Self {
        let mut v = self.filters.unwrap_or_default();
        v.push(input);
        self.filters = Some(v);
        self
    }
    /// <p>Filters to scope the results. The following filters are supported:</p>
    /// <ul>
    /// <li> <p> <code>LicenseArn</code> </p> </li>
    /// <li> <p> <code>GrantStatus</code> </p> </li>
    /// <li> <p> <code>GranteePrincipalARN</code> </p> </li>
    /// <li> <p> <code>ProductSKU</code> </p> </li>
    /// <li> <p> <code>LicenseIssuerName</code> </p> </li>
    /// </ul>
    pub fn set_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.filters = input;
        self
    }
    /// <p>Token for the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Token for the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Maximum number of results to return in a single call.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>Maximum number of results to return in a single call.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDistributedGrantsInput`](crate::operation::list_distributed_grants::ListDistributedGrantsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_distributed_grants::ListDistributedGrantsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_distributed_grants::ListDistributedGrantsInput {
                grant_arns: self.grant_arns,
                filters: self.filters,
                next_token: self.next_token,
                max_results: self.max_results,
            },
        )
    }
}
