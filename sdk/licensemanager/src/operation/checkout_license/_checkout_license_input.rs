// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CheckoutLicenseInput {
    /// <p>Product SKU.</p>
    #[doc(hidden)]
    pub product_sku: std::option::Option<std::string::String>,
    /// <p>Checkout type.</p>
    #[doc(hidden)]
    pub checkout_type: std::option::Option<crate::types::CheckoutType>,
    /// <p>Key fingerprint identifying the license.</p>
    #[doc(hidden)]
    pub key_fingerprint: std::option::Option<std::string::String>,
    /// <p>License entitlements.</p>
    #[doc(hidden)]
    pub entitlements: std::option::Option<std::vec::Vec<crate::types::EntitlementData>>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>License beneficiary.</p>
    #[doc(hidden)]
    pub beneficiary: std::option::Option<std::string::String>,
    /// <p>Node ID.</p>
    #[doc(hidden)]
    pub node_id: std::option::Option<std::string::String>,
}
impl CheckoutLicenseInput {
    /// <p>Product SKU.</p>
    pub fn product_sku(&self) -> std::option::Option<&str> {
        self.product_sku.as_deref()
    }
    /// <p>Checkout type.</p>
    pub fn checkout_type(&self) -> std::option::Option<&crate::types::CheckoutType> {
        self.checkout_type.as_ref()
    }
    /// <p>Key fingerprint identifying the license.</p>
    pub fn key_fingerprint(&self) -> std::option::Option<&str> {
        self.key_fingerprint.as_deref()
    }
    /// <p>License entitlements.</p>
    pub fn entitlements(&self) -> std::option::Option<&[crate::types::EntitlementData]> {
        self.entitlements.as_deref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>License beneficiary.</p>
    pub fn beneficiary(&self) -> std::option::Option<&str> {
        self.beneficiary.as_deref()
    }
    /// <p>Node ID.</p>
    pub fn node_id(&self) -> std::option::Option<&str> {
        self.node_id.as_deref()
    }
}
impl CheckoutLicenseInput {
    /// Creates a new builder-style object to manufacture [`CheckoutLicenseInput`](crate::operation::checkout_license::CheckoutLicenseInput).
    pub fn builder() -> crate::operation::checkout_license::builders::CheckoutLicenseInputBuilder {
        crate::operation::checkout_license::builders::CheckoutLicenseInputBuilder::default()
    }
}

/// A builder for [`CheckoutLicenseInput`](crate::operation::checkout_license::CheckoutLicenseInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CheckoutLicenseInputBuilder {
    pub(crate) product_sku: std::option::Option<std::string::String>,
    pub(crate) checkout_type: std::option::Option<crate::types::CheckoutType>,
    pub(crate) key_fingerprint: std::option::Option<std::string::String>,
    pub(crate) entitlements: std::option::Option<std::vec::Vec<crate::types::EntitlementData>>,
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) beneficiary: std::option::Option<std::string::String>,
    pub(crate) node_id: std::option::Option<std::string::String>,
}
impl CheckoutLicenseInputBuilder {
    /// <p>Product SKU.</p>
    pub fn product_sku(mut self, input: impl Into<std::string::String>) -> Self {
        self.product_sku = Some(input.into());
        self
    }
    /// <p>Product SKU.</p>
    pub fn set_product_sku(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.product_sku = input;
        self
    }
    /// <p>Checkout type.</p>
    pub fn checkout_type(mut self, input: crate::types::CheckoutType) -> Self {
        self.checkout_type = Some(input);
        self
    }
    /// <p>Checkout type.</p>
    pub fn set_checkout_type(
        mut self,
        input: std::option::Option<crate::types::CheckoutType>,
    ) -> Self {
        self.checkout_type = input;
        self
    }
    /// <p>Key fingerprint identifying the license.</p>
    pub fn key_fingerprint(mut self, input: impl Into<std::string::String>) -> Self {
        self.key_fingerprint = Some(input.into());
        self
    }
    /// <p>Key fingerprint identifying the license.</p>
    pub fn set_key_fingerprint(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key_fingerprint = input;
        self
    }
    /// Appends an item to `entitlements`.
    ///
    /// To override the contents of this collection use [`set_entitlements`](Self::set_entitlements).
    ///
    /// <p>License entitlements.</p>
    pub fn entitlements(mut self, input: crate::types::EntitlementData) -> Self {
        let mut v = self.entitlements.unwrap_or_default();
        v.push(input);
        self.entitlements = Some(v);
        self
    }
    /// <p>License entitlements.</p>
    pub fn set_entitlements(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EntitlementData>>,
    ) -> Self {
        self.entitlements = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>License beneficiary.</p>
    pub fn beneficiary(mut self, input: impl Into<std::string::String>) -> Self {
        self.beneficiary = Some(input.into());
        self
    }
    /// <p>License beneficiary.</p>
    pub fn set_beneficiary(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.beneficiary = input;
        self
    }
    /// <p>Node ID.</p>
    pub fn node_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.node_id = Some(input.into());
        self
    }
    /// <p>Node ID.</p>
    pub fn set_node_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.node_id = input;
        self
    }
    /// Consumes the builder and constructs a [`CheckoutLicenseInput`](crate::operation::checkout_license::CheckoutLicenseInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::checkout_license::CheckoutLicenseInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::checkout_license::CheckoutLicenseInput {
            product_sku: self.product_sku,
            checkout_type: self.checkout_type,
            key_fingerprint: self.key_fingerprint,
            entitlements: self.entitlements,
            client_token: self.client_token,
            beneficiary: self.beneficiary,
            node_id: self.node_id,
        })
    }
}
