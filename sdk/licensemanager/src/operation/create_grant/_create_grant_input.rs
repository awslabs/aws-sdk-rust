// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateGrantInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_token: std::option::Option<std::string::String>,
    /// <p>Grant name.</p>
    #[doc(hidden)]
    pub grant_name: std::option::Option<std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    #[doc(hidden)]
    pub license_arn: std::option::Option<std::string::String>,
    /// <p>The grant principals. This value should be specified as an Amazon Resource Name (ARN).</p>
    #[doc(hidden)]
    pub principals: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Home Region of the grant.</p>
    #[doc(hidden)]
    pub home_region: std::option::Option<std::string::String>,
    /// <p>Allowed operations for the grant.</p>
    #[doc(hidden)]
    pub allowed_operations: std::option::Option<std::vec::Vec<crate::types::AllowedOperation>>,
}
impl CreateGrantInput {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(&self) -> std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>Grant name.</p>
    pub fn grant_name(&self) -> std::option::Option<&str> {
        self.grant_name.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn license_arn(&self) -> std::option::Option<&str> {
        self.license_arn.as_deref()
    }
    /// <p>The grant principals. This value should be specified as an Amazon Resource Name (ARN).</p>
    pub fn principals(&self) -> std::option::Option<&[std::string::String]> {
        self.principals.as_deref()
    }
    /// <p>Home Region of the grant.</p>
    pub fn home_region(&self) -> std::option::Option<&str> {
        self.home_region.as_deref()
    }
    /// <p>Allowed operations for the grant.</p>
    pub fn allowed_operations(&self) -> std::option::Option<&[crate::types::AllowedOperation]> {
        self.allowed_operations.as_deref()
    }
}
impl CreateGrantInput {
    /// Creates a new builder-style object to manufacture [`CreateGrantInput`](crate::operation::create_grant::CreateGrantInput).
    pub fn builder() -> crate::operation::create_grant::builders::CreateGrantInputBuilder {
        crate::operation::create_grant::builders::CreateGrantInputBuilder::default()
    }
}

/// A builder for [`CreateGrantInput`](crate::operation::create_grant::CreateGrantInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateGrantInputBuilder {
    pub(crate) client_token: std::option::Option<std::string::String>,
    pub(crate) grant_name: std::option::Option<std::string::String>,
    pub(crate) license_arn: std::option::Option<std::string::String>,
    pub(crate) principals: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) home_region: std::option::Option<std::string::String>,
    pub(crate) allowed_operations:
        std::option::Option<std::vec::Vec<crate::types::AllowedOperation>>,
}
impl CreateGrantInputBuilder {
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>Grant name.</p>
    pub fn grant_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.grant_name = Some(input.into());
        self
    }
    /// <p>Grant name.</p>
    pub fn set_grant_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.grant_name = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn license_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn set_license_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_arn = input;
        self
    }
    /// Appends an item to `principals`.
    ///
    /// To override the contents of this collection use [`set_principals`](Self::set_principals).
    ///
    /// <p>The grant principals. This value should be specified as an Amazon Resource Name (ARN).</p>
    pub fn principals(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.principals.unwrap_or_default();
        v.push(input.into());
        self.principals = Some(v);
        self
    }
    /// <p>The grant principals. This value should be specified as an Amazon Resource Name (ARN).</p>
    pub fn set_principals(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.principals = input;
        self
    }
    /// <p>Home Region of the grant.</p>
    pub fn home_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.home_region = Some(input.into());
        self
    }
    /// <p>Home Region of the grant.</p>
    pub fn set_home_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.home_region = input;
        self
    }
    /// Appends an item to `allowed_operations`.
    ///
    /// To override the contents of this collection use [`set_allowed_operations`](Self::set_allowed_operations).
    ///
    /// <p>Allowed operations for the grant.</p>
    pub fn allowed_operations(mut self, input: crate::types::AllowedOperation) -> Self {
        let mut v = self.allowed_operations.unwrap_or_default();
        v.push(input);
        self.allowed_operations = Some(v);
        self
    }
    /// <p>Allowed operations for the grant.</p>
    pub fn set_allowed_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AllowedOperation>>,
    ) -> Self {
        self.allowed_operations = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateGrantInput`](crate::operation::create_grant::CreateGrantInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_grant::CreateGrantInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_grant::CreateGrantInput {
            client_token: self.client_token,
            grant_name: self.grant_name,
            license_arn: self.license_arn,
            principals: self.principals,
            home_region: self.home_region,
            allowed_operations: self.allowed_operations,
        })
    }
}
