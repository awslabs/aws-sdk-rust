// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_grant::_create_grant_output::CreateGrantOutputBuilder;

pub use crate::operation::create_grant::_create_grant_input::CreateGrantInputBuilder;

impl CreateGrantInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_grant::CreateGrantOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_grant::CreateGrantError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_grant();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateGrant`.
///
/// <p>Creates a grant for the specified license. A grant shares the use of license entitlements with a specific Amazon Web Services account, an organization, or an organizational unit (OU). For more information, see <a href="https://docs.aws.amazon.com/license-manager/latest/userguide/granted-licenses.html">Granted licenses in License Manager</a> in the <i>License Manager User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateGrantFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_grant::builders::CreateGrantInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_grant::CreateGrantOutput,
        crate::operation::create_grant::CreateGrantError,
    > for CreateGrantFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_grant::CreateGrantOutput,
            crate::operation::create_grant::CreateGrantError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateGrantFluentBuilder {
    /// Creates a new `CreateGrant`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateGrant as a reference.
    pub fn as_input(&self) -> &crate::operation::create_grant::builders::CreateGrantInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_grant::CreateGrantOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_grant::CreateGrantError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_grant::CreateGrant::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_grant::CreateGrant::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_grant::CreateGrantOutput,
        crate::operation::create_grant::CreateGrantError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_token()
    }
    /// <p>Grant name.</p>
    pub fn grant_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.grant_name(input.into());
        self
    }
    /// <p>Grant name.</p>
    pub fn set_grant_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_grant_name(input);
        self
    }
    /// <p>Grant name.</p>
    pub fn get_grant_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_grant_name()
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn license_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.license_arn(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn set_license_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_license_arn(input);
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn get_license_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_license_arn()
    }
    /// Appends an item to `Principals`.
    ///
    /// To override the contents of this collection use [`set_principals`](Self::set_principals).
    ///
    /// <p>The grant principals. You can specify one of the following as an Amazon Resource Name (ARN):</p>
    /// <ul>
    /// <li> <p>An Amazon Web Services account, which includes only the account specified.</p> </li>
    /// </ul>
    /// <ul>
    /// <li> <p>An organizational unit (OU), which includes all accounts in the OU.</p> </li>
    /// </ul>
    /// <ul>
    /// <li> <p>An organization, which will include all accounts across your organization.</p> </li>
    /// </ul>
    pub fn principals(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.principals(input.into());
        self
    }
    /// <p>The grant principals. You can specify one of the following as an Amazon Resource Name (ARN):</p>
    /// <ul>
    /// <li> <p>An Amazon Web Services account, which includes only the account specified.</p> </li>
    /// </ul>
    /// <ul>
    /// <li> <p>An organizational unit (OU), which includes all accounts in the OU.</p> </li>
    /// </ul>
    /// <ul>
    /// <li> <p>An organization, which will include all accounts across your organization.</p> </li>
    /// </ul>
    pub fn set_principals(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_principals(input);
        self
    }
    /// <p>The grant principals. You can specify one of the following as an Amazon Resource Name (ARN):</p>
    /// <ul>
    /// <li> <p>An Amazon Web Services account, which includes only the account specified.</p> </li>
    /// </ul>
    /// <ul>
    /// <li> <p>An organizational unit (OU), which includes all accounts in the OU.</p> </li>
    /// </ul>
    /// <ul>
    /// <li> <p>An organization, which will include all accounts across your organization.</p> </li>
    /// </ul>
    pub fn get_principals(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_principals()
    }
    /// <p>Home Region of the grant.</p>
    pub fn home_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.home_region(input.into());
        self
    }
    /// <p>Home Region of the grant.</p>
    pub fn set_home_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_home_region(input);
        self
    }
    /// <p>Home Region of the grant.</p>
    pub fn get_home_region(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_home_region()
    }
    /// Appends an item to `AllowedOperations`.
    ///
    /// To override the contents of this collection use [`set_allowed_operations`](Self::set_allowed_operations).
    ///
    /// <p>Allowed operations for the grant.</p>
    pub fn allowed_operations(mut self, input: crate::types::AllowedOperation) -> Self {
        self.inner = self.inner.allowed_operations(input);
        self
    }
    /// <p>Allowed operations for the grant.</p>
    pub fn set_allowed_operations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AllowedOperation>>) -> Self {
        self.inner = self.inner.set_allowed_operations(input);
        self
    }
    /// <p>Allowed operations for the grant.</p>
    pub fn get_allowed_operations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AllowedOperation>> {
        self.inner.get_allowed_operations()
    }
}
