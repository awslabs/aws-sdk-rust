// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_grant::_create_grant_output::CreateGrantOutputBuilder;

pub use crate::operation::create_grant::_create_grant_input::CreateGrantInputBuilder;

/// Fluent builder constructing a request to `CreateGrant`.
///
/// <p>Creates a grant for the specified license. A grant shares the use of license entitlements with specific Amazon Web Services accounts.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateGrantFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_grant::builders::CreateGrantInputBuilder,
}
impl CreateGrantFluentBuilder {
    /// Creates a new `CreateGrant`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_grant::CreateGrant,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::create_grant::CreateGrantError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_grant::CreateGrantOutput,
        aws_smithy_http::result::SdkError<crate::operation::create_grant::CreateGrantError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>Grant name.</p>
    pub fn grant_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.grant_name(input.into());
        self
    }
    /// <p>Grant name.</p>
    pub fn set_grant_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_grant_name(input);
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn license_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.license_arn(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn set_license_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_license_arn(input);
        self
    }
    /// Appends an item to `Principals`.
    ///
    /// To override the contents of this collection use [`set_principals`](Self::set_principals).
    ///
    /// <p>The grant principals. This value should be specified as an Amazon Resource Name (ARN).</p>
    pub fn principals(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.principals(input.into());
        self
    }
    /// <p>The grant principals. This value should be specified as an Amazon Resource Name (ARN).</p>
    pub fn set_principals(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_principals(input);
        self
    }
    /// <p>Home Region of the grant.</p>
    pub fn home_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.home_region(input.into());
        self
    }
    /// <p>Home Region of the grant.</p>
    pub fn set_home_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_home_region(input);
        self
    }
    /// Appends an item to `AllowedOperations`.
    ///
    /// To override the contents of this collection use [`set_allowed_operations`](Self::set_allowed_operations).
    ///
    /// <p>Allowed operations for the grant.</p>
    pub fn allowed_operations(mut self, input: crate::types::AllowedOperation) -> Self {
        self.inner = self.inner.allowed_operations(input);
        self
    }
    /// <p>Allowed operations for the grant.</p>
    pub fn set_allowed_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AllowedOperation>>,
    ) -> Self {
        self.inner = self.inner.set_allowed_operations(input);
        self
    }
}
