// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a grant.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Grant {
    /// <p>Amazon Resource Name (ARN) of the grant.</p>
    #[doc(hidden)]
    pub grant_arn: std::option::Option<std::string::String>,
    /// <p>Grant name.</p>
    #[doc(hidden)]
    pub grant_name: std::option::Option<std::string::String>,
    /// <p>Parent ARN.</p>
    #[doc(hidden)]
    pub parent_arn: std::option::Option<std::string::String>,
    /// <p>License ARN.</p>
    #[doc(hidden)]
    pub license_arn: std::option::Option<std::string::String>,
    /// <p>The grantee principal ARN.</p>
    #[doc(hidden)]
    pub grantee_principal_arn: std::option::Option<std::string::String>,
    /// <p>Home Region of the grant.</p>
    #[doc(hidden)]
    pub home_region: std::option::Option<std::string::String>,
    /// <p>Grant status.</p>
    #[doc(hidden)]
    pub grant_status: std::option::Option<crate::types::GrantStatus>,
    /// <p>Grant status reason.</p>
    #[doc(hidden)]
    pub status_reason: std::option::Option<std::string::String>,
    /// <p>Grant version.</p>
    #[doc(hidden)]
    pub version: std::option::Option<std::string::String>,
    /// <p>Granted operations.</p>
    #[doc(hidden)]
    pub granted_operations: std::option::Option<std::vec::Vec<crate::types::AllowedOperation>>,
}
impl Grant {
    /// <p>Amazon Resource Name (ARN) of the grant.</p>
    pub fn grant_arn(&self) -> std::option::Option<&str> {
        self.grant_arn.as_deref()
    }
    /// <p>Grant name.</p>
    pub fn grant_name(&self) -> std::option::Option<&str> {
        self.grant_name.as_deref()
    }
    /// <p>Parent ARN.</p>
    pub fn parent_arn(&self) -> std::option::Option<&str> {
        self.parent_arn.as_deref()
    }
    /// <p>License ARN.</p>
    pub fn license_arn(&self) -> std::option::Option<&str> {
        self.license_arn.as_deref()
    }
    /// <p>The grantee principal ARN.</p>
    pub fn grantee_principal_arn(&self) -> std::option::Option<&str> {
        self.grantee_principal_arn.as_deref()
    }
    /// <p>Home Region of the grant.</p>
    pub fn home_region(&self) -> std::option::Option<&str> {
        self.home_region.as_deref()
    }
    /// <p>Grant status.</p>
    pub fn grant_status(&self) -> std::option::Option<&crate::types::GrantStatus> {
        self.grant_status.as_ref()
    }
    /// <p>Grant status reason.</p>
    pub fn status_reason(&self) -> std::option::Option<&str> {
        self.status_reason.as_deref()
    }
    /// <p>Grant version.</p>
    pub fn version(&self) -> std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>Granted operations.</p>
    pub fn granted_operations(&self) -> std::option::Option<&[crate::types::AllowedOperation]> {
        self.granted_operations.as_deref()
    }
}
impl Grant {
    /// Creates a new builder-style object to manufacture [`Grant`](crate::types::Grant).
    pub fn builder() -> crate::types::builders::GrantBuilder {
        crate::types::builders::GrantBuilder::default()
    }
}

/// A builder for [`Grant`](crate::types::Grant).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GrantBuilder {
    pub(crate) grant_arn: std::option::Option<std::string::String>,
    pub(crate) grant_name: std::option::Option<std::string::String>,
    pub(crate) parent_arn: std::option::Option<std::string::String>,
    pub(crate) license_arn: std::option::Option<std::string::String>,
    pub(crate) grantee_principal_arn: std::option::Option<std::string::String>,
    pub(crate) home_region: std::option::Option<std::string::String>,
    pub(crate) grant_status: std::option::Option<crate::types::GrantStatus>,
    pub(crate) status_reason: std::option::Option<std::string::String>,
    pub(crate) version: std::option::Option<std::string::String>,
    pub(crate) granted_operations:
        std::option::Option<std::vec::Vec<crate::types::AllowedOperation>>,
}
impl GrantBuilder {
    /// <p>Amazon Resource Name (ARN) of the grant.</p>
    pub fn grant_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.grant_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the grant.</p>
    pub fn set_grant_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.grant_arn = input;
        self
    }
    /// <p>Grant name.</p>
    pub fn grant_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.grant_name = Some(input.into());
        self
    }
    /// <p>Grant name.</p>
    pub fn set_grant_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.grant_name = input;
        self
    }
    /// <p>Parent ARN.</p>
    pub fn parent_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.parent_arn = Some(input.into());
        self
    }
    /// <p>Parent ARN.</p>
    pub fn set_parent_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parent_arn = input;
        self
    }
    /// <p>License ARN.</p>
    pub fn license_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_arn = Some(input.into());
        self
    }
    /// <p>License ARN.</p>
    pub fn set_license_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_arn = input;
        self
    }
    /// <p>The grantee principal ARN.</p>
    pub fn grantee_principal_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.grantee_principal_arn = Some(input.into());
        self
    }
    /// <p>The grantee principal ARN.</p>
    pub fn set_grantee_principal_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.grantee_principal_arn = input;
        self
    }
    /// <p>Home Region of the grant.</p>
    pub fn home_region(mut self, input: impl Into<std::string::String>) -> Self {
        self.home_region = Some(input.into());
        self
    }
    /// <p>Home Region of the grant.</p>
    pub fn set_home_region(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.home_region = input;
        self
    }
    /// <p>Grant status.</p>
    pub fn grant_status(mut self, input: crate::types::GrantStatus) -> Self {
        self.grant_status = Some(input);
        self
    }
    /// <p>Grant status.</p>
    pub fn set_grant_status(
        mut self,
        input: std::option::Option<crate::types::GrantStatus>,
    ) -> Self {
        self.grant_status = input;
        self
    }
    /// <p>Grant status reason.</p>
    pub fn status_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_reason = Some(input.into());
        self
    }
    /// <p>Grant status reason.</p>
    pub fn set_status_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Grant version.</p>
    pub fn version(mut self, input: impl Into<std::string::String>) -> Self {
        self.version = Some(input.into());
        self
    }
    /// <p>Grant version.</p>
    pub fn set_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// Appends an item to `granted_operations`.
    ///
    /// To override the contents of this collection use [`set_granted_operations`](Self::set_granted_operations).
    ///
    /// <p>Granted operations.</p>
    pub fn granted_operations(mut self, input: crate::types::AllowedOperation) -> Self {
        let mut v = self.granted_operations.unwrap_or_default();
        v.push(input);
        self.granted_operations = Some(v);
        self
    }
    /// <p>Granted operations.</p>
    pub fn set_granted_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AllowedOperation>>,
    ) -> Self {
        self.granted_operations = input;
        self
    }
    /// Consumes the builder and constructs a [`Grant`](crate::types::Grant).
    pub fn build(self) -> crate::types::Grant {
        crate::types::Grant {
            grant_arn: self.grant_arn,
            grant_name: self.grant_name,
            parent_arn: self.parent_arn,
            license_arn: self.license_arn,
            grantee_principal_arn: self.grantee_principal_arn,
            home_region: self.home_region,
            grant_status: self.grant_status,
            status_reason: self.status_reason,
            version: self.version,
            granted_operations: self.granted_operations,
        }
    }
}
