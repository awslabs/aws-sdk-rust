// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of the license configuration that this generator reports on.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReportContext {
    /// <p>Amazon Resource Name (ARN) of the license configuration that this generator reports on.</p>
    #[doc(hidden)]
    pub license_configuration_arns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ReportContext {
    /// <p>Amazon Resource Name (ARN) of the license configuration that this generator reports on.</p>
    pub fn license_configuration_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.license_configuration_arns.as_deref()
    }
}
impl ReportContext {
    /// Creates a new builder-style object to manufacture [`ReportContext`](crate::types::ReportContext).
    pub fn builder() -> crate::types::builders::ReportContextBuilder {
        crate::types::builders::ReportContextBuilder::default()
    }
}

/// A builder for [`ReportContext`](crate::types::ReportContext).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReportContextBuilder {
    pub(crate) license_configuration_arns: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl ReportContextBuilder {
    /// Appends an item to `license_configuration_arns`.
    ///
    /// To override the contents of this collection use [`set_license_configuration_arns`](Self::set_license_configuration_arns).
    ///
    /// <p>Amazon Resource Name (ARN) of the license configuration that this generator reports on.</p>
    pub fn license_configuration_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.license_configuration_arns.unwrap_or_default();
        v.push(input.into());
        self.license_configuration_arns = Some(v);
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license configuration that this generator reports on.</p>
    pub fn set_license_configuration_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.license_configuration_arns = input;
        self
    }
    /// Consumes the builder and constructs a [`ReportContext`](crate::types::ReportContext).
    pub fn build(self) -> crate::types::ReportContext {
        crate::types::ReportContext {
            license_configuration_arns: self.license_configuration_arns,
        }
    }
}
