// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Usage associated with an entitlement resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntitlementUsage {
    /// <p>Entitlement usage name.</p>
    pub name: ::std::string::String,
    /// <p>Resource usage consumed.</p>
    pub consumed_value: ::std::string::String,
    /// <p>Maximum entitlement usage count.</p>
    pub max_count: ::std::option::Option<::std::string::String>,
    /// <p>Entitlement usage unit.</p>
    pub unit: crate::types::EntitlementDataUnit,
}
impl EntitlementUsage {
    /// <p>Entitlement usage name.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Resource usage consumed.</p>
    pub fn consumed_value(&self) -> &str {
        use std::ops::Deref;
        self.consumed_value.deref()
    }
    /// <p>Maximum entitlement usage count.</p>
    pub fn max_count(&self) -> ::std::option::Option<&str> {
        self.max_count.as_deref()
    }
    /// <p>Entitlement usage unit.</p>
    pub fn unit(&self) -> &crate::types::EntitlementDataUnit {
        &self.unit
    }
}
impl EntitlementUsage {
    /// Creates a new builder-style object to manufacture [`EntitlementUsage`](crate::types::EntitlementUsage).
    pub fn builder() -> crate::types::builders::EntitlementUsageBuilder {
        crate::types::builders::EntitlementUsageBuilder::default()
    }
}

/// A builder for [`EntitlementUsage`](crate::types::EntitlementUsage).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EntitlementUsageBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) consumed_value: ::std::option::Option<::std::string::String>,
    pub(crate) max_count: ::std::option::Option<::std::string::String>,
    pub(crate) unit: ::std::option::Option<crate::types::EntitlementDataUnit>,
}
impl EntitlementUsageBuilder {
    /// <p>Entitlement usage name.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Entitlement usage name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Entitlement usage name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Resource usage consumed.</p>
    /// This field is required.
    pub fn consumed_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.consumed_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Resource usage consumed.</p>
    pub fn set_consumed_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.consumed_value = input;
        self
    }
    /// <p>Resource usage consumed.</p>
    pub fn get_consumed_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.consumed_value
    }
    /// <p>Maximum entitlement usage count.</p>
    pub fn max_count(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.max_count = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Maximum entitlement usage count.</p>
    pub fn set_max_count(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.max_count = input;
        self
    }
    /// <p>Maximum entitlement usage count.</p>
    pub fn get_max_count(&self) -> &::std::option::Option<::std::string::String> {
        &self.max_count
    }
    /// <p>Entitlement usage unit.</p>
    /// This field is required.
    pub fn unit(mut self, input: crate::types::EntitlementDataUnit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Entitlement usage unit.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::EntitlementDataUnit>) -> Self {
        self.unit = input;
        self
    }
    /// <p>Entitlement usage unit.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::EntitlementDataUnit> {
        &self.unit
    }
    /// Consumes the builder and constructs a [`EntitlementUsage`](crate::types::EntitlementUsage).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::EntitlementUsageBuilder::name)
    /// - [`consumed_value`](crate::types::builders::EntitlementUsageBuilder::consumed_value)
    /// - [`unit`](crate::types::builders::EntitlementUsageBuilder::unit)
    pub fn build(self) -> ::std::result::Result<crate::types::EntitlementUsage, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EntitlementUsage {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building EntitlementUsage",
                )
            })?,
            consumed_value: self.consumed_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "consumed_value",
                    "consumed_value was not specified but it is required when building EntitlementUsage",
                )
            })?,
            max_count: self.max_count,
            unit: self.unit.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "unit",
                    "unit was not specified but it is required when building EntitlementUsage",
                )
            })?,
        })
    }
}
