// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AllowedOperation`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let allowedoperation = unimplemented!();
/// match allowedoperation {
///     AllowedOperation::CheckInLicense => { /* ... */ },
///     AllowedOperation::CheckoutBorrowLicense => { /* ... */ },
///     AllowedOperation::CheckoutLicense => { /* ... */ },
///     AllowedOperation::CreateGrant => { /* ... */ },
///     AllowedOperation::CreateToken => { /* ... */ },
///     AllowedOperation::ExtendConsumptionLicense => { /* ... */ },
///     AllowedOperation::ListPurchasedLicenses => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `allowedoperation` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AllowedOperation::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AllowedOperation::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AllowedOperation::NewFeature` is defined.
/// Specifically, when `allowedoperation` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AllowedOperation::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum AllowedOperation {
    #[allow(missing_docs)] // documentation missing in model
    CheckInLicense,
    #[allow(missing_docs)] // documentation missing in model
    CheckoutBorrowLicense,
    #[allow(missing_docs)] // documentation missing in model
    CheckoutLicense,
    #[allow(missing_docs)] // documentation missing in model
    CreateGrant,
    #[allow(missing_docs)] // documentation missing in model
    CreateToken,
    #[allow(missing_docs)] // documentation missing in model
    ExtendConsumptionLicense,
    #[allow(missing_docs)] // documentation missing in model
    ListPurchasedLicenses,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for AllowedOperation {
    fn from(s: &str) -> Self {
        match s {
            "CheckInLicense" => AllowedOperation::CheckInLicense,
            "CheckoutBorrowLicense" => AllowedOperation::CheckoutBorrowLicense,
            "CheckoutLicense" => AllowedOperation::CheckoutLicense,
            "CreateGrant" => AllowedOperation::CreateGrant,
            "CreateToken" => AllowedOperation::CreateToken,
            "ExtendConsumptionLicense" => AllowedOperation::ExtendConsumptionLicense,
            "ListPurchasedLicenses" => AllowedOperation::ListPurchasedLicenses,
            other => {
                AllowedOperation::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for AllowedOperation {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(AllowedOperation::from(s))
    }
}
impl AllowedOperation {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AllowedOperation::CheckInLicense => "CheckInLicense",
            AllowedOperation::CheckoutBorrowLicense => "CheckoutBorrowLicense",
            AllowedOperation::CheckoutLicense => "CheckoutLicense",
            AllowedOperation::CreateGrant => "CreateGrant",
            AllowedOperation::CreateToken => "CreateToken",
            AllowedOperation::ExtendConsumptionLicense => "ExtendConsumptionLicense",
            AllowedOperation::ListPurchasedLicenses => "ListPurchasedLicenses",
            AllowedOperation::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "CheckInLicense",
            "CheckoutBorrowLicense",
            "CheckoutLicense",
            "CreateGrant",
            "CreateToken",
            "ExtendConsumptionLicense",
            "ListPurchasedLicenses",
        ]
    }
}
impl AsRef<str> for AllowedOperation {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
