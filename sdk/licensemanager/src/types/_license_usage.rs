// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes the entitlement usage associated with a license.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LicenseUsage {
    /// <p>License entitlement usages.</p>
    #[doc(hidden)]
    pub entitlement_usages: std::option::Option<std::vec::Vec<crate::types::EntitlementUsage>>,
}
impl LicenseUsage {
    /// <p>License entitlement usages.</p>
    pub fn entitlement_usages(&self) -> std::option::Option<&[crate::types::EntitlementUsage]> {
        self.entitlement_usages.as_deref()
    }
}
impl LicenseUsage {
    /// Creates a new builder-style object to manufacture [`LicenseUsage`](crate::types::LicenseUsage).
    pub fn builder() -> crate::types::builders::LicenseUsageBuilder {
        crate::types::builders::LicenseUsageBuilder::default()
    }
}

/// A builder for [`LicenseUsage`](crate::types::LicenseUsage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LicenseUsageBuilder {
    pub(crate) entitlement_usages:
        std::option::Option<std::vec::Vec<crate::types::EntitlementUsage>>,
}
impl LicenseUsageBuilder {
    /// Appends an item to `entitlement_usages`.
    ///
    /// To override the contents of this collection use [`set_entitlement_usages`](Self::set_entitlement_usages).
    ///
    /// <p>License entitlement usages.</p>
    pub fn entitlement_usages(mut self, input: crate::types::EntitlementUsage) -> Self {
        let mut v = self.entitlement_usages.unwrap_or_default();
        v.push(input);
        self.entitlement_usages = Some(v);
        self
    }
    /// <p>License entitlement usages.</p>
    pub fn set_entitlement_usages(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::EntitlementUsage>>,
    ) -> Self {
        self.entitlement_usages = input;
        self
    }
    /// Consumes the builder and constructs a [`LicenseUsage`](crate::types::LicenseUsage).
    pub fn build(self) -> crate::types::LicenseUsage {
        crate::types::LicenseUsage {
            entitlement_usages: self.entitlement_usages,
        }
    }
}
