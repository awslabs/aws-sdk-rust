// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the issuer of a license.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Issuer {
    /// <p>Issuer name.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Asymmetric KMS key from Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.</p>
    #[doc(hidden)]
    pub sign_key: std::option::Option<std::string::String>,
}
impl Issuer {
    /// <p>Issuer name.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Asymmetric KMS key from Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.</p>
    pub fn sign_key(&self) -> std::option::Option<&str> {
        self.sign_key.as_deref()
    }
}
impl Issuer {
    /// Creates a new builder-style object to manufacture [`Issuer`](crate::types::Issuer).
    pub fn builder() -> crate::types::builders::IssuerBuilder {
        crate::types::builders::IssuerBuilder::default()
    }
}

/// A builder for [`Issuer`](crate::types::Issuer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct IssuerBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) sign_key: std::option::Option<std::string::String>,
}
impl IssuerBuilder {
    /// <p>Issuer name.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>Issuer name.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Asymmetric KMS key from Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.</p>
    pub fn sign_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.sign_key = Some(input.into());
        self
    }
    /// <p>Asymmetric KMS key from Key Management Service. The KMS key must have a key usage of sign and verify, and support the RSASSA-PSS SHA-256 signing algorithm.</p>
    pub fn set_sign_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sign_key = input;
        self
    }
    /// Consumes the builder and constructs a [`Issuer`](crate::types::Issuer).
    pub fn build(self) -> crate::types::Issuer {
        crate::types::Issuer {
            name: self.name,
            sign_key: self.sign_key,
        }
    }
}
