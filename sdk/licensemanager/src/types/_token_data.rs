// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a token.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TokenData {
    /// <p>Token ID.</p>
    #[doc(hidden)]
    pub token_id: std::option::Option<std::string::String>,
    /// <p>Type of token generated. The supported value is <code>REFRESH_TOKEN</code>.</p>
    #[doc(hidden)]
    pub token_type: std::option::Option<std::string::String>,
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    #[doc(hidden)]
    pub license_arn: std::option::Option<std::string::String>,
    /// <p>Token expiration time, in ISO8601-UTC format.</p>
    #[doc(hidden)]
    pub expiration_time: std::option::Option<std::string::String>,
    /// <p>Data specified by the caller.</p>
    #[doc(hidden)]
    pub token_properties: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Amazon Resource Names (ARN) of the roles included in the token.</p>
    #[doc(hidden)]
    pub role_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Token status. The possible values are <code>AVAILABLE</code> and <code>DELETED</code>.</p>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
}
impl TokenData {
    /// <p>Token ID.</p>
    pub fn token_id(&self) -> std::option::Option<&str> {
        self.token_id.as_deref()
    }
    /// <p>Type of token generated. The supported value is <code>REFRESH_TOKEN</code>.</p>
    pub fn token_type(&self) -> std::option::Option<&str> {
        self.token_type.as_deref()
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn license_arn(&self) -> std::option::Option<&str> {
        self.license_arn.as_deref()
    }
    /// <p>Token expiration time, in ISO8601-UTC format.</p>
    pub fn expiration_time(&self) -> std::option::Option<&str> {
        self.expiration_time.as_deref()
    }
    /// <p>Data specified by the caller.</p>
    pub fn token_properties(&self) -> std::option::Option<&[std::string::String]> {
        self.token_properties.as_deref()
    }
    /// <p>Amazon Resource Names (ARN) of the roles included in the token.</p>
    pub fn role_arns(&self) -> std::option::Option<&[std::string::String]> {
        self.role_arns.as_deref()
    }
    /// <p>Token status. The possible values are <code>AVAILABLE</code> and <code>DELETED</code>.</p>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
}
impl TokenData {
    /// Creates a new builder-style object to manufacture [`TokenData`](crate::types::TokenData).
    pub fn builder() -> crate::types::builders::TokenDataBuilder {
        crate::types::builders::TokenDataBuilder::default()
    }
}

/// A builder for [`TokenData`](crate::types::TokenData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TokenDataBuilder {
    pub(crate) token_id: std::option::Option<std::string::String>,
    pub(crate) token_type: std::option::Option<std::string::String>,
    pub(crate) license_arn: std::option::Option<std::string::String>,
    pub(crate) expiration_time: std::option::Option<std::string::String>,
    pub(crate) token_properties: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) role_arns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) status: std::option::Option<std::string::String>,
}
impl TokenDataBuilder {
    /// <p>Token ID.</p>
    pub fn token_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.token_id = Some(input.into());
        self
    }
    /// <p>Token ID.</p>
    pub fn set_token_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token_id = input;
        self
    }
    /// <p>Type of token generated. The supported value is <code>REFRESH_TOKEN</code>.</p>
    pub fn token_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.token_type = Some(input.into());
        self
    }
    /// <p>Type of token generated. The supported value is <code>REFRESH_TOKEN</code>.</p>
    pub fn set_token_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token_type = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn license_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.license_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the license.</p>
    pub fn set_license_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.license_arn = input;
        self
    }
    /// <p>Token expiration time, in ISO8601-UTC format.</p>
    pub fn expiration_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.expiration_time = Some(input.into());
        self
    }
    /// <p>Token expiration time, in ISO8601-UTC format.</p>
    pub fn set_expiration_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.expiration_time = input;
        self
    }
    /// Appends an item to `token_properties`.
    ///
    /// To override the contents of this collection use [`set_token_properties`](Self::set_token_properties).
    ///
    /// <p>Data specified by the caller.</p>
    pub fn token_properties(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.token_properties.unwrap_or_default();
        v.push(input.into());
        self.token_properties = Some(v);
        self
    }
    /// <p>Data specified by the caller.</p>
    pub fn set_token_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.token_properties = input;
        self
    }
    /// Appends an item to `role_arns`.
    ///
    /// To override the contents of this collection use [`set_role_arns`](Self::set_role_arns).
    ///
    /// <p>Amazon Resource Names (ARN) of the roles included in the token.</p>
    pub fn role_arns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.role_arns.unwrap_or_default();
        v.push(input.into());
        self.role_arns = Some(v);
        self
    }
    /// <p>Amazon Resource Names (ARN) of the roles included in the token.</p>
    pub fn set_role_arns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.role_arns = input;
        self
    }
    /// <p>Token status. The possible values are <code>AVAILABLE</code> and <code>DELETED</code>.</p>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Token status. The possible values are <code>AVAILABLE</code> and <code>DELETED</code>.</p>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`TokenData`](crate::types::TokenData).
    pub fn build(self) -> crate::types::TokenData {
        crate::types::TokenData {
            token_id: self.token_id,
            token_type: self.token_type,
            license_arn: self.license_arn,
            expiration_time: self.expiration_time,
            token_properties: self.token_properties,
            role_arns: self.role_arns,
            status: self.status,
        }
    }
}
