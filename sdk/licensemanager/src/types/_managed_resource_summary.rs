// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Summary information about a managed resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ManagedResourceSummary {
    /// <p>Type of resource associated with a license.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>Number of resources associated with licenses.</p>
    #[doc(hidden)]
    pub association_count: std::option::Option<i64>,
}
impl ManagedResourceSummary {
    /// <p>Type of resource associated with a license.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>Number of resources associated with licenses.</p>
    pub fn association_count(&self) -> std::option::Option<i64> {
        self.association_count
    }
}
impl ManagedResourceSummary {
    /// Creates a new builder-style object to manufacture [`ManagedResourceSummary`](crate::types::ManagedResourceSummary).
    pub fn builder() -> crate::types::builders::ManagedResourceSummaryBuilder {
        crate::types::builders::ManagedResourceSummaryBuilder::default()
    }
}

/// A builder for [`ManagedResourceSummary`](crate::types::ManagedResourceSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ManagedResourceSummaryBuilder {
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) association_count: std::option::Option<i64>,
}
impl ManagedResourceSummaryBuilder {
    /// <p>Type of resource associated with a license.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>Type of resource associated with a license.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Number of resources associated with licenses.</p>
    pub fn association_count(mut self, input: i64) -> Self {
        self.association_count = Some(input);
        self
    }
    /// <p>Number of resources associated with licenses.</p>
    pub fn set_association_count(mut self, input: std::option::Option<i64>) -> Self {
        self.association_count = input;
        self
    }
    /// Consumes the builder and constructs a [`ManagedResourceSummary`](crate::types::ManagedResourceSummary).
    pub fn build(self) -> crate::types::ManagedResourceSummary {
        crate::types::ManagedResourceSummary {
            resource_type: self.resource_type,
            association_count: self.association_count,
        }
    }
}
