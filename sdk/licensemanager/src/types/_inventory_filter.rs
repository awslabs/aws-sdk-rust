// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An inventory filter.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InventoryFilter {
    /// <p>Name of the filter.</p>
    pub name: ::std::string::String,
    /// <p>Condition of the filter.</p>
    pub condition: crate::types::InventoryFilterCondition,
    /// <p>Value of the filter.</p>
    pub value: ::std::option::Option<::std::string::String>,
}
impl InventoryFilter {
    /// <p>Name of the filter.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>Condition of the filter.</p>
    pub fn condition(&self) -> &crate::types::InventoryFilterCondition {
        &self.condition
    }
    /// <p>Value of the filter.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl InventoryFilter {
    /// Creates a new builder-style object to manufacture [`InventoryFilter`](crate::types::InventoryFilter).
    pub fn builder() -> crate::types::builders::InventoryFilterBuilder {
        crate::types::builders::InventoryFilterBuilder::default()
    }
}

/// A builder for [`InventoryFilter`](crate::types::InventoryFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InventoryFilterBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) condition: ::std::option::Option<crate::types::InventoryFilterCondition>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
}
impl InventoryFilterBuilder {
    /// <p>Name of the filter.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Name of the filter.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Name of the filter.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Condition of the filter.</p>
    /// This field is required.
    pub fn condition(mut self, input: crate::types::InventoryFilterCondition) -> Self {
        self.condition = ::std::option::Option::Some(input);
        self
    }
    /// <p>Condition of the filter.</p>
    pub fn set_condition(mut self, input: ::std::option::Option<crate::types::InventoryFilterCondition>) -> Self {
        self.condition = input;
        self
    }
    /// <p>Condition of the filter.</p>
    pub fn get_condition(&self) -> &::std::option::Option<crate::types::InventoryFilterCondition> {
        &self.condition
    }
    /// <p>Value of the filter.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Value of the filter.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>Value of the filter.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// Consumes the builder and constructs a [`InventoryFilter`](crate::types::InventoryFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::InventoryFilterBuilder::name)
    /// - [`condition`](crate::types::builders::InventoryFilterBuilder::condition)
    pub fn build(self) -> ::std::result::Result<crate::types::InventoryFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InventoryFilter {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building InventoryFilter",
                )
            })?,
            condition: self.condition.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "condition",
                    "condition was not specified but it is required when building InventoryFilter",
                )
            })?,
            value: self.value,
        })
    }
}
