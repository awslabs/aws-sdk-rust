// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the usage of a resource associated with a license configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LicenseConfigurationUsage {
    /// <p>Amazon Resource Name (ARN) of the resource.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>Type of resource.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>Status of the resource.</p>
    #[doc(hidden)]
    pub resource_status: std::option::Option<std::string::String>,
    /// <p>ID of the account that owns the resource.</p>
    #[doc(hidden)]
    pub resource_owner_id: std::option::Option<std::string::String>,
    /// <p>Time when the license configuration was initially associated with the resource.</p>
    #[doc(hidden)]
    pub association_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Number of licenses consumed by the resource.</p>
    #[doc(hidden)]
    pub consumed_licenses: std::option::Option<i64>,
}
impl LicenseConfigurationUsage {
    /// <p>Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>Type of resource.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>Status of the resource.</p>
    pub fn resource_status(&self) -> std::option::Option<&str> {
        self.resource_status.as_deref()
    }
    /// <p>ID of the account that owns the resource.</p>
    pub fn resource_owner_id(&self) -> std::option::Option<&str> {
        self.resource_owner_id.as_deref()
    }
    /// <p>Time when the license configuration was initially associated with the resource.</p>
    pub fn association_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.association_time.as_ref()
    }
    /// <p>Number of licenses consumed by the resource.</p>
    pub fn consumed_licenses(&self) -> std::option::Option<i64> {
        self.consumed_licenses
    }
}
impl LicenseConfigurationUsage {
    /// Creates a new builder-style object to manufacture [`LicenseConfigurationUsage`](crate::types::LicenseConfigurationUsage).
    pub fn builder() -> crate::types::builders::LicenseConfigurationUsageBuilder {
        crate::types::builders::LicenseConfigurationUsageBuilder::default()
    }
}

/// A builder for [`LicenseConfigurationUsage`](crate::types::LicenseConfigurationUsage).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LicenseConfigurationUsageBuilder {
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_status: std::option::Option<std::string::String>,
    pub(crate) resource_owner_id: std::option::Option<std::string::String>,
    pub(crate) association_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) consumed_licenses: std::option::Option<i64>,
}
impl LicenseConfigurationUsageBuilder {
    /// <p>Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>Type of resource.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>Type of resource.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Status of the resource.</p>
    pub fn resource_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_status = Some(input.into());
        self
    }
    /// <p>Status of the resource.</p>
    pub fn set_resource_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_status = input;
        self
    }
    /// <p>ID of the account that owns the resource.</p>
    pub fn resource_owner_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_owner_id = Some(input.into());
        self
    }
    /// <p>ID of the account that owns the resource.</p>
    pub fn set_resource_owner_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_owner_id = input;
        self
    }
    /// <p>Time when the license configuration was initially associated with the resource.</p>
    pub fn association_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.association_time = Some(input);
        self
    }
    /// <p>Time when the license configuration was initially associated with the resource.</p>
    pub fn set_association_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.association_time = input;
        self
    }
    /// <p>Number of licenses consumed by the resource.</p>
    pub fn consumed_licenses(mut self, input: i64) -> Self {
        self.consumed_licenses = Some(input);
        self
    }
    /// <p>Number of licenses consumed by the resource.</p>
    pub fn set_consumed_licenses(mut self, input: std::option::Option<i64>) -> Self {
        self.consumed_licenses = input;
        self
    }
    /// Consumes the builder and constructs a [`LicenseConfigurationUsage`](crate::types::LicenseConfigurationUsage).
    pub fn build(self) -> crate::types::LicenseConfigurationUsage {
        crate::types::LicenseConfigurationUsage {
            resource_arn: self.resource_arn,
            resource_type: self.resource_type,
            resource_status: self.resource_status,
            resource_owner_id: self.resource_owner_id,
            association_time: self.association_time,
            consumed_licenses: self.consumed_licenses,
        }
    }
}
