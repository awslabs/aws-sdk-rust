// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a time range, in ISO8601-UTC format.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DatetimeRange {
    /// <p>Start of the time range.</p>
    pub begin: ::std::string::String,
    /// <p>End of the time range.</p>
    pub end: ::std::option::Option<::std::string::String>,
}
impl DatetimeRange {
    /// <p>Start of the time range.</p>
    pub fn begin(&self) -> &str {
        use std::ops::Deref;
        self.begin.deref()
    }
    /// <p>End of the time range.</p>
    pub fn end(&self) -> ::std::option::Option<&str> {
        self.end.as_deref()
    }
}
impl DatetimeRange {
    /// Creates a new builder-style object to manufacture [`DatetimeRange`](crate::types::DatetimeRange).
    pub fn builder() -> crate::types::builders::DatetimeRangeBuilder {
        crate::types::builders::DatetimeRangeBuilder::default()
    }
}

/// A builder for [`DatetimeRange`](crate::types::DatetimeRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DatetimeRangeBuilder {
    pub(crate) begin: ::std::option::Option<::std::string::String>,
    pub(crate) end: ::std::option::Option<::std::string::String>,
}
impl DatetimeRangeBuilder {
    /// <p>Start of the time range.</p>
    /// This field is required.
    pub fn begin(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.begin = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Start of the time range.</p>
    pub fn set_begin(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.begin = input;
        self
    }
    /// <p>Start of the time range.</p>
    pub fn get_begin(&self) -> &::std::option::Option<::std::string::String> {
        &self.begin
    }
    /// <p>End of the time range.</p>
    pub fn end(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.end = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>End of the time range.</p>
    pub fn set_end(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.end = input;
        self
    }
    /// <p>End of the time range.</p>
    pub fn get_end(&self) -> &::std::option::Option<::std::string::String> {
        &self.end
    }
    /// Consumes the builder and constructs a [`DatetimeRange`](crate::types::DatetimeRange).
    /// This method will fail if any of the following fields are not set:
    /// - [`begin`](crate::types::builders::DatetimeRangeBuilder::begin)
    pub fn build(self) -> ::std::result::Result<crate::types::DatetimeRange, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DatetimeRange {
            begin: self.begin.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "begin",
                    "begin was not specified but it is required when building DatetimeRange",
                )
            })?,
            end: self.end,
        })
    }
}
