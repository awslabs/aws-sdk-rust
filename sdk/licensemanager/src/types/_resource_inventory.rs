// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about a resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceInventory {
    /// <p>ID of the resource.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>Type of resource.</p>
    #[doc(hidden)]
    pub resource_type: std::option::Option<crate::types::ResourceType>,
    /// <p>Amazon Resource Name (ARN) of the resource.</p>
    #[doc(hidden)]
    pub resource_arn: std::option::Option<std::string::String>,
    /// <p>Platform of the resource.</p>
    #[doc(hidden)]
    pub platform: std::option::Option<std::string::String>,
    /// <p>Platform version of the resource in the inventory.</p>
    #[doc(hidden)]
    pub platform_version: std::option::Option<std::string::String>,
    /// <p>ID of the account that owns the resource.</p>
    #[doc(hidden)]
    pub resource_owning_account_id: std::option::Option<std::string::String>,
}
impl ResourceInventory {
    /// <p>ID of the resource.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>Type of resource.</p>
    pub fn resource_type(&self) -> std::option::Option<&crate::types::ResourceType> {
        self.resource_type.as_ref()
    }
    /// <p>Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(&self) -> std::option::Option<&str> {
        self.resource_arn.as_deref()
    }
    /// <p>Platform of the resource.</p>
    pub fn platform(&self) -> std::option::Option<&str> {
        self.platform.as_deref()
    }
    /// <p>Platform version of the resource in the inventory.</p>
    pub fn platform_version(&self) -> std::option::Option<&str> {
        self.platform_version.as_deref()
    }
    /// <p>ID of the account that owns the resource.</p>
    pub fn resource_owning_account_id(&self) -> std::option::Option<&str> {
        self.resource_owning_account_id.as_deref()
    }
}
impl ResourceInventory {
    /// Creates a new builder-style object to manufacture [`ResourceInventory`](crate::types::ResourceInventory).
    pub fn builder() -> crate::types::builders::ResourceInventoryBuilder {
        crate::types::builders::ResourceInventoryBuilder::default()
    }
}

/// A builder for [`ResourceInventory`](crate::types::ResourceInventory).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceInventoryBuilder {
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) resource_type: std::option::Option<crate::types::ResourceType>,
    pub(crate) resource_arn: std::option::Option<std::string::String>,
    pub(crate) platform: std::option::Option<std::string::String>,
    pub(crate) platform_version: std::option::Option<std::string::String>,
    pub(crate) resource_owning_account_id: std::option::Option<std::string::String>,
}
impl ResourceInventoryBuilder {
    /// <p>ID of the resource.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>ID of the resource.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>Type of resource.</p>
    pub fn resource_type(mut self, input: crate::types::ResourceType) -> Self {
        self.resource_type = Some(input);
        self
    }
    /// <p>Type of resource.</p>
    pub fn set_resource_type(
        mut self,
        input: std::option::Option<crate::types::ResourceType>,
    ) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>Amazon Resource Name (ARN) of the resource.</p>
    pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_arn = Some(input.into());
        self
    }
    /// <p>Amazon Resource Name (ARN) of the resource.</p>
    pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_arn = input;
        self
    }
    /// <p>Platform of the resource.</p>
    pub fn platform(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform = Some(input.into());
        self
    }
    /// <p>Platform of the resource.</p>
    pub fn set_platform(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform = input;
        self
    }
    /// <p>Platform version of the resource in the inventory.</p>
    pub fn platform_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.platform_version = Some(input.into());
        self
    }
    /// <p>Platform version of the resource in the inventory.</p>
    pub fn set_platform_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.platform_version = input;
        self
    }
    /// <p>ID of the account that owns the resource.</p>
    pub fn resource_owning_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_owning_account_id = Some(input.into());
        self
    }
    /// <p>ID of the account that owns the resource.</p>
    pub fn set_resource_owning_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.resource_owning_account_id = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceInventory`](crate::types::ResourceInventory).
    pub fn build(self) -> crate::types::ResourceInventory {
        crate::types::ResourceInventory {
            resource_id: self.resource_id,
            resource_type: self.resource_type,
            resource_arn: self.resource_arn,
            platform: self.platform,
            platform_version: self.platform_version,
            resource_owning_account_id: self.resource_owning_account_id,
        }
    }
}
