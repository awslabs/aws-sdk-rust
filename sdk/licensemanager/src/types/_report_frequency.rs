// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about how frequently reports are generated.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReportFrequency {
    /// <p>Number of times within the frequency period that a report is generated. The only supported value is <code>1</code>.</p>
    #[doc(hidden)]
    pub value: std::option::Option<i32>,
    /// <p>Time period between each report. The period can be daily, weekly, or monthly.</p>
    #[doc(hidden)]
    pub period: std::option::Option<crate::types::ReportFrequencyType>,
}
impl ReportFrequency {
    /// <p>Number of times within the frequency period that a report is generated. The only supported value is <code>1</code>.</p>
    pub fn value(&self) -> std::option::Option<i32> {
        self.value
    }
    /// <p>Time period between each report. The period can be daily, weekly, or monthly.</p>
    pub fn period(&self) -> std::option::Option<&crate::types::ReportFrequencyType> {
        self.period.as_ref()
    }
}
impl ReportFrequency {
    /// Creates a new builder-style object to manufacture [`ReportFrequency`](crate::types::ReportFrequency).
    pub fn builder() -> crate::types::builders::ReportFrequencyBuilder {
        crate::types::builders::ReportFrequencyBuilder::default()
    }
}

/// A builder for [`ReportFrequency`](crate::types::ReportFrequency).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReportFrequencyBuilder {
    pub(crate) value: std::option::Option<i32>,
    pub(crate) period: std::option::Option<crate::types::ReportFrequencyType>,
}
impl ReportFrequencyBuilder {
    /// <p>Number of times within the frequency period that a report is generated. The only supported value is <code>1</code>.</p>
    pub fn value(mut self, input: i32) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>Number of times within the frequency period that a report is generated. The only supported value is <code>1</code>.</p>
    pub fn set_value(mut self, input: std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p>Time period between each report. The period can be daily, weekly, or monthly.</p>
    pub fn period(mut self, input: crate::types::ReportFrequencyType) -> Self {
        self.period = Some(input);
        self
    }
    /// <p>Time period between each report. The period can be daily, weekly, or monthly.</p>
    pub fn set_period(
        mut self,
        input: std::option::Option<crate::types::ReportFrequencyType>,
    ) -> Self {
        self.period = input;
        self
    }
    /// Consumes the builder and constructs a [`ReportFrequency`](crate::types::ReportFrequency).
    pub fn build(self) -> crate::types::ReportFrequency {
        crate::types::ReportFrequency {
            value: self.value,
            period: self.period,
        }
    }
}
