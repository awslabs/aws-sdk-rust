// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn grant_correct_errors(mut builder: crate::types::builders::GrantBuilder) -> crate::types::builders::GrantBuilder {
    if builder.grant_arn.is_none() {
        builder.grant_arn = Some(Default::default())
    }
    if builder.grant_name.is_none() {
        builder.grant_name = Some(Default::default())
    }
    if builder.parent_arn.is_none() {
        builder.parent_arn = Some(Default::default())
    }
    if builder.license_arn.is_none() {
        builder.license_arn = Some(Default::default())
    }
    if builder.grantee_principal_arn.is_none() {
        builder.grantee_principal_arn = Some(Default::default())
    }
    if builder.home_region.is_none() {
        builder.home_region = Some(Default::default())
    }
    if builder.grant_status.is_none() {
        builder.grant_status = "no value was set".parse::<crate::types::GrantStatus>().ok()
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.granted_operations.is_none() {
        builder.granted_operations = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_configuration_correct_errors(
    mut builder: crate::types::builders::OrganizationConfigurationBuilder,
) -> crate::types::builders::OrganizationConfigurationBuilder {
    if builder.enable_integration.is_none() {
        builder.enable_integration = Some(Default::default())
    }
    builder
}

pub(crate) fn datetime_range_correct_errors(
    mut builder: crate::types::builders::DatetimeRangeBuilder,
) -> crate::types::builders::DatetimeRangeBuilder {
    if builder.begin.is_none() {
        builder.begin = Some(Default::default())
    }
    builder
}

pub(crate) fn entitlement_data_correct_errors(
    mut builder: crate::types::builders::EntitlementDataBuilder,
) -> crate::types::builders::EntitlementDataBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = "no value was set".parse::<crate::types::EntitlementDataUnit>().ok()
    }
    builder
}

pub(crate) fn license_specification_correct_errors(
    mut builder: crate::types::builders::LicenseSpecificationBuilder,
) -> crate::types::builders::LicenseSpecificationBuilder {
    if builder.license_configuration_arn.is_none() {
        builder.license_configuration_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn product_information_correct_errors(
    mut builder: crate::types::builders::ProductInformationBuilder,
) -> crate::types::builders::ProductInformationBuilder {
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.product_information_filter_list.is_none() {
        builder.product_information_filter_list = Some(Default::default())
    }
    builder
}

pub(crate) fn report_context_correct_errors(
    mut builder: crate::types::builders::ReportContextBuilder,
) -> crate::types::builders::ReportContextBuilder {
    if builder.license_configuration_arns.is_none() {
        builder.license_configuration_arns = Some(Default::default())
    }
    builder
}

pub(crate) fn borrow_configuration_correct_errors(
    mut builder: crate::types::builders::BorrowConfigurationBuilder,
) -> crate::types::builders::BorrowConfigurationBuilder {
    if builder.allow_early_check_in.is_none() {
        builder.allow_early_check_in = Some(Default::default())
    }
    if builder.max_time_to_live_in_minutes.is_none() {
        builder.max_time_to_live_in_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn entitlement_correct_errors(mut builder: crate::types::builders::EntitlementBuilder) -> crate::types::builders::EntitlementBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = "no value was set".parse::<crate::types::EntitlementUnit>().ok()
    }
    builder
}

pub(crate) fn entitlement_usage_correct_errors(
    mut builder: crate::types::builders::EntitlementUsageBuilder,
) -> crate::types::builders::EntitlementUsageBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.consumed_value.is_none() {
        builder.consumed_value = Some(Default::default())
    }
    if builder.unit.is_none() {
        builder.unit = "no value was set".parse::<crate::types::EntitlementDataUnit>().ok()
    }
    builder
}

pub(crate) fn provisional_configuration_correct_errors(
    mut builder: crate::types::builders::ProvisionalConfigurationBuilder,
) -> crate::types::builders::ProvisionalConfigurationBuilder {
    if builder.max_time_to_live_in_minutes.is_none() {
        builder.max_time_to_live_in_minutes = Some(Default::default())
    }
    builder
}

pub(crate) fn product_information_filter_correct_errors(
    mut builder: crate::types::builders::ProductInformationFilterBuilder,
) -> crate::types::builders::ProductInformationFilterBuilder {
    if builder.product_information_filter_name.is_none() {
        builder.product_information_filter_name = Some(Default::default())
    }
    if builder.product_information_filter_comparator.is_none() {
        builder.product_information_filter_comparator = Some(Default::default())
    }
    builder
}
