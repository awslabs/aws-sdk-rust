// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_get_resource_metrics_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::get_resource_metrics::GetResourceMetricsInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.service_type {
        object.key("ServiceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.identifier {
        object.key("Identifier").string(var_2.as_str());
    }
    if let Some(var_3) = &input.metric_queries {
        let mut array_4 = object.key("MetricQueries").start_array();
        for item_5 in var_3 {
            {
                #[allow(unused_mut)]
                let mut object_6 = array_4.value().start_object();
                crate::protocol_serde::shape_metric_query::ser_metric_query(&mut object_6, item_5)?;
                object_6.finish();
            }
        }
        array_4.finish();
    }
    if let Some(var_7) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_7, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_8) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_8, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_9) = &input.period_in_seconds {
        object.key("PeriodInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.next_token {
        object.key("NextToken").string(var_11.as_str());
    }
    if let Some(var_12) = &input.period_alignment {
        object.key("PeriodAlignment").string(var_12.as_str());
    }
    Ok(())
}
