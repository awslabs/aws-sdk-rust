// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_describe_dimension_keys_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::describe_dimension_keys::DescribeDimensionKeysInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.service_type {
        object.key("ServiceType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.identifier {
        object.key("Identifier").string(var_2.as_str());
    }
    if let Some(var_3) = &input.start_time {
        object
            .key("StartTime")
            .date_time(var_3, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_4) = &input.end_time {
        object
            .key("EndTime")
            .date_time(var_4, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_5) = &input.metric {
        object.key("Metric").string(var_5.as_str());
    }
    if let Some(var_6) = &input.period_in_seconds {
        object.key("PeriodInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_6).into()),
        );
    }
    if let Some(var_7) = &input.group_by {
        #[allow(unused_mut)]
        let mut object_8 = object.key("GroupBy").start_object();
        crate::protocol_serde::shape_dimension_group::ser_dimension_group(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.additional_metrics {
        let mut array_10 = object.key("AdditionalMetrics").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.partition_by {
        #[allow(unused_mut)]
        let mut object_13 = object.key("PartitionBy").start_object();
        crate::protocol_serde::shape_dimension_group::ser_dimension_group(&mut object_13, var_12)?;
        object_13.finish();
    }
    if let Some(var_14) = &input.filter {
        #[allow(unused_mut)]
        let mut object_15 = object.key("Filter").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16.as_str()).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    if let Some(var_18) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_18).into()),
        );
    }
    if let Some(var_19) = &input.next_token {
        object.key("NextToken").string(var_19.as_str());
    }
    Ok(())
}
