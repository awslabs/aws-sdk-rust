// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The available dimension information for a metric type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricDimensionGroups {
    /// <p>The metric type to which the dimension information belongs.</p>
    pub metric: ::std::option::Option<::std::string::String>,
    /// <p>The available dimension groups for a metric type.</p>
    pub groups: ::std::option::Option<::std::vec::Vec<crate::types::DimensionGroupDetail>>,
}
impl MetricDimensionGroups {
    /// <p>The metric type to which the dimension information belongs.</p>
    pub fn metric(&self) -> ::std::option::Option<&str> {
        self.metric.as_deref()
    }
    /// <p>The available dimension groups for a metric type.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.groups.is_none()`.
    pub fn groups(&self) -> &[crate::types::DimensionGroupDetail] {
        self.groups.as_deref().unwrap_or_default()
    }
}
impl MetricDimensionGroups {
    /// Creates a new builder-style object to manufacture [`MetricDimensionGroups`](crate::types::MetricDimensionGroups).
    pub fn builder() -> crate::types::builders::MetricDimensionGroupsBuilder {
        crate::types::builders::MetricDimensionGroupsBuilder::default()
    }
}

/// A builder for [`MetricDimensionGroups`](crate::types::MetricDimensionGroups).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricDimensionGroupsBuilder {
    pub(crate) metric: ::std::option::Option<::std::string::String>,
    pub(crate) groups: ::std::option::Option<::std::vec::Vec<crate::types::DimensionGroupDetail>>,
}
impl MetricDimensionGroupsBuilder {
    /// <p>The metric type to which the dimension information belongs.</p>
    pub fn metric(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.metric = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The metric type to which the dimension information belongs.</p>
    pub fn set_metric(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.metric = input;
        self
    }
    /// <p>The metric type to which the dimension information belongs.</p>
    pub fn get_metric(&self) -> &::std::option::Option<::std::string::String> {
        &self.metric
    }
    /// Appends an item to `groups`.
    ///
    /// To override the contents of this collection use [`set_groups`](Self::set_groups).
    ///
    /// <p>The available dimension groups for a metric type.</p>
    pub fn groups(mut self, input: crate::types::DimensionGroupDetail) -> Self {
        let mut v = self.groups.unwrap_or_default();
        v.push(input);
        self.groups = ::std::option::Option::Some(v);
        self
    }
    /// <p>The available dimension groups for a metric type.</p>
    pub fn set_groups(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DimensionGroupDetail>>) -> Self {
        self.groups = input;
        self
    }
    /// <p>The available dimension groups for a metric type.</p>
    pub fn get_groups(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DimensionGroupDetail>> {
        &self.groups
    }
    /// Consumes the builder and constructs a [`MetricDimensionGroups`](crate::types::MetricDimensionGroups).
    pub fn build(self) -> crate::types::MetricDimensionGroups {
        crate::types::MetricDimensionGroups {
            metric: self.metric,
            groups: self.groups,
        }
    }
}
