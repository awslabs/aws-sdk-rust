// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The metadata for a feature. For example, the metadata might indicate that a feature is turned on or off on a specific DB instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FeatureMetadata {
    /// <p>The status of the feature on the DB instance. Possible values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - The feature is enabled on the instance.</p> </li>
    /// <li> <p> <code>DISABLED</code> - The feature is disabled on the instance.</p> </li>
    /// <li> <p> <code>UNSUPPORTED</code> - The feature isn't supported on the instance.</p> </li>
    /// <li> <p> <code>ENABLED_PENDING_REBOOT</code> - The feature is enabled on the instance but requires a reboot to take effect.</p> </li>
    /// <li> <p> <code>DISABLED_PENDING_REBOOT</code> - The feature is disabled on the instance but requires a reboot to take effect.</p> </li>
    /// <li> <p> <code>UNKNOWN</code> - The feature status couldn't be determined.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::FeatureStatus>,
}
impl FeatureMetadata {
    /// <p>The status of the feature on the DB instance. Possible values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - The feature is enabled on the instance.</p> </li>
    /// <li> <p> <code>DISABLED</code> - The feature is disabled on the instance.</p> </li>
    /// <li> <p> <code>UNSUPPORTED</code> - The feature isn't supported on the instance.</p> </li>
    /// <li> <p> <code>ENABLED_PENDING_REBOOT</code> - The feature is enabled on the instance but requires a reboot to take effect.</p> </li>
    /// <li> <p> <code>DISABLED_PENDING_REBOOT</code> - The feature is disabled on the instance but requires a reboot to take effect.</p> </li>
    /// <li> <p> <code>UNKNOWN</code> - The feature status couldn't be determined.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::FeatureStatus> {
        self.status.as_ref()
    }
}
impl FeatureMetadata {
    /// Creates a new builder-style object to manufacture [`FeatureMetadata`](crate::types::FeatureMetadata).
    pub fn builder() -> crate::types::builders::FeatureMetadataBuilder {
        crate::types::builders::FeatureMetadataBuilder::default()
    }
}

/// A builder for [`FeatureMetadata`](crate::types::FeatureMetadata).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FeatureMetadataBuilder {
    pub(crate) status: std::option::Option<crate::types::FeatureStatus>,
}
impl FeatureMetadataBuilder {
    /// <p>The status of the feature on the DB instance. Possible values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - The feature is enabled on the instance.</p> </li>
    /// <li> <p> <code>DISABLED</code> - The feature is disabled on the instance.</p> </li>
    /// <li> <p> <code>UNSUPPORTED</code> - The feature isn't supported on the instance.</p> </li>
    /// <li> <p> <code>ENABLED_PENDING_REBOOT</code> - The feature is enabled on the instance but requires a reboot to take effect.</p> </li>
    /// <li> <p> <code>DISABLED_PENDING_REBOOT</code> - The feature is disabled on the instance but requires a reboot to take effect.</p> </li>
    /// <li> <p> <code>UNKNOWN</code> - The feature status couldn't be determined.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::FeatureStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the feature on the DB instance. Possible values include the following:</p>
    /// <ul>
    /// <li> <p> <code>ENABLED</code> - The feature is enabled on the instance.</p> </li>
    /// <li> <p> <code>DISABLED</code> - The feature is disabled on the instance.</p> </li>
    /// <li> <p> <code>UNSUPPORTED</code> - The feature isn't supported on the instance.</p> </li>
    /// <li> <p> <code>ENABLED_PENDING_REBOOT</code> - The feature is enabled on the instance but requires a reboot to take effect.</p> </li>
    /// <li> <p> <code>DISABLED_PENDING_REBOOT</code> - The feature is disabled on the instance but requires a reboot to take effect.</p> </li>
    /// <li> <p> <code>UNKNOWN</code> - The feature status couldn't be determined.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<crate::types::FeatureStatus>) -> Self {
        self.status = input;
        self
    }
    /// Consumes the builder and constructs a [`FeatureMetadata`](crate::types::FeatureMetadata).
    pub fn build(self) -> crate::types::FeatureMetadata {
        crate::types::FeatureMetadata {
            status: self.status,
        }
    }
}
