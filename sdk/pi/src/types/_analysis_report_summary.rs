// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Retrieves the details of the performance analysis report.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AnalysisReportSummary {
    /// <p>The name of the analysis report.</p>
    pub analysis_report_id: ::std::option::Option<::std::string::String>,
    /// <p>The time you created the analysis report.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The start time of the analysis in the report.</p>
    pub start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The end time of the analysis in the report.</p>
    pub end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the analysis report.</p>
    pub status: ::std::option::Option<crate::types::AnalysisStatus>,
    /// <p>List of all the tags added to the analysis report.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl AnalysisReportSummary {
    /// <p>The name of the analysis report.</p>
    pub fn analysis_report_id(&self) -> ::std::option::Option<&str> {
        self.analysis_report_id.as_deref()
    }
    /// <p>The time you created the analysis report.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The start time of the analysis in the report.</p>
    pub fn start_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end time of the analysis in the report.</p>
    pub fn end_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The status of the analysis report.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::AnalysisStatus> {
        self.status.as_ref()
    }
    /// <p>List of all the tags added to the analysis report.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl AnalysisReportSummary {
    /// Creates a new builder-style object to manufacture [`AnalysisReportSummary`](crate::types::AnalysisReportSummary).
    pub fn builder() -> crate::types::builders::AnalysisReportSummaryBuilder {
        crate::types::builders::AnalysisReportSummaryBuilder::default()
    }
}

/// A builder for [`AnalysisReportSummary`](crate::types::AnalysisReportSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AnalysisReportSummaryBuilder {
    pub(crate) analysis_report_id: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) start_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status: ::std::option::Option<crate::types::AnalysisStatus>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl AnalysisReportSummaryBuilder {
    /// <p>The name of the analysis report.</p>
    pub fn analysis_report_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.analysis_report_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the analysis report.</p>
    pub fn set_analysis_report_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.analysis_report_id = input;
        self
    }
    /// <p>The name of the analysis report.</p>
    pub fn get_analysis_report_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.analysis_report_id
    }
    /// <p>The time you created the analysis report.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time you created the analysis report.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time you created the analysis report.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The start time of the analysis in the report.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The start time of the analysis in the report.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The start time of the analysis in the report.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time
    }
    /// <p>The end time of the analysis in the report.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The end time of the analysis in the report.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The end time of the analysis in the report.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time
    }
    /// <p>The status of the analysis report.</p>
    pub fn status(mut self, input: crate::types::AnalysisStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the analysis report.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::AnalysisStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the analysis report.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::AnalysisStatus> {
        &self.status
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>List of all the tags added to the analysis report.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of all the tags added to the analysis report.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>List of all the tags added to the analysis report.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`AnalysisReportSummary`](crate::types::AnalysisReportSummary).
    pub fn build(self) -> crate::types::AnalysisReportSummary {
        crate::types::AnalysisReportSummary {
            analysis_report_id: self.analysis_report_id,
            create_time: self.create_time,
            start_time: self.start_time,
            end_time: self.end_time,
            status: self.status,
            tags: self.tags,
        }
    }
}
