// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A timestamp, and a single numerical value, which together represent a measurement at a particular point in time.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataPoint {
    /// <p>The time, in epoch format, associated with a particular <code>Value</code>.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The actual value associated with a particular <code>Timestamp</code>.</p>
    pub value: f64,
}
impl DataPoint {
    /// <p>The time, in epoch format, associated with a particular <code>Value</code>.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The actual value associated with a particular <code>Timestamp</code>.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
}
impl DataPoint {
    /// Creates a new builder-style object to manufacture [`DataPoint`](crate::types::DataPoint).
    pub fn builder() -> crate::types::builders::DataPointBuilder {
        crate::types::builders::DataPointBuilder::default()
    }
}

/// A builder for [`DataPoint`](crate::types::DataPoint).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DataPointBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) value: ::std::option::Option<f64>,
}
impl DataPointBuilder {
    /// <p>The time, in epoch format, associated with a particular <code>Value</code>.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in epoch format, associated with a particular <code>Value</code>.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The time, in epoch format, associated with a particular <code>Value</code>.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The actual value associated with a particular <code>Timestamp</code>.</p>
    /// This field is required.
    pub fn value(mut self, input: f64) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p>The actual value associated with a particular <code>Timestamp</code>.</p>
    pub fn set_value(mut self, input: ::std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The actual value associated with a particular <code>Timestamp</code>.</p>
    pub fn get_value(&self) -> &::std::option::Option<f64> {
        &self.value
    }
    /// Consumes the builder and constructs a [`DataPoint`](crate::types::DataPoint).
    /// This method will fail if any of the following fields are not set:
    /// - [`timestamp`](crate::types::builders::DataPointBuilder::timestamp)
    /// - [`value`](crate::types::builders::DataPointBuilder::value)
    pub fn build(self) -> ::std::result::Result<crate::types::DataPoint, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataPoint {
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building DataPoint",
                )
            })?,
            value: self.value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value",
                    "value was not specified but it is required when building DataPoint",
                )
            })?,
        })
    }
}
