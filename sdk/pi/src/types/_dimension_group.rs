// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A logical grouping of Performance Insights metrics for a related subject area. For example, the <code>db.sql</code> dimension group consists of the following dimensions:</p>
/// <ul>
/// <li> <p> <code>db.sql.id</code> - The hash of a running SQL statement, generated by Performance Insights.</p> </li>
/// <li> <p> <code>db.sql.db_id</code> - Either the SQL ID generated by the database engine, or a value generated by Performance Insights that begins with <code>pi-</code>.</p> </li>
/// <li> <p> <code>db.sql.statement</code> - The full text of the SQL statement that is running, for example, <code>SELECT * FROM employees</code>.</p> </li>
/// <li> <p> <code>db.sql_tokenized.id</code> - The hash of the SQL digest generated by Performance Insights.</p> </li>
/// </ul> <note>
/// <p>Each response element returns a maximum of 500 bytes. For larger elements, such as SQL statements, only the first 500 bytes are returned.</p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DimensionGroup {
    /// <p>The name of the dimension group. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>db</code> - The name of the database to which the client is connected. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.application</code> - The name of the application that is connected to the database. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.query</code> - The query that is currently running (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query_tokenized</code> - The digest query (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type</code> - The type of the current session (only Aurora PostgreSQL and RDS PostgreSQL).</p> </li>
    /// <li> <p> <code>db.sql</code> - The text of the SQL statement that is currently running (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized</code> - The SQL digest (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user</code> - The user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event</code> - The event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type</code> - The type of event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state</code> - The event for which the database backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    pub group: ::std::string::String,
    /// <p>A list of specific dimensions from a dimension group. If this parameter is not present, then it signifies that all of the dimensions in the group were requested, or are present in the response.</p>
    /// <p>Valid values for elements in the <code>Dimensions</code> array are:</p>
    /// <ul>
    /// <li> <p> <code>db.application.name</code> - The name of the application that is connected to the database. Valid values are as follows: </p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host.id</code> - The host ID of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.host.name</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.name</code> - The name of the database to which the client is connected. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.query.id</code> - The query ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.db_id</code> - The query ID generated by the database (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.statement</code> - The text of the query that is being run (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.query.tokenized.id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.db_id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.statement</code> - The text of the query digest (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type.name</code> - The type of the current session (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.id</code> - The hash of the full, non-tokenized SQL statement generated by Performance Insights (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.db_id</code> - Either the SQL ID generated by the database engine, or a value generated by Performance Insights that begins with <code>pi-</code> (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.statement</code> - The full text of the SQL statement that is running, as in <code>SELECT * FROM employees</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.sql.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.sql_tokenized.id</code> - The hash of the SQL digest generated by Performance Insights (all engines except Amazon DocumentDB). In the console, <code>db.sql_tokenized.id</code> is called the Support ID because Amazon Web Services Support can look at this data to help you troubleshoot database issues.</p> </li>
    /// <li> <p> <code>db.sql_tokenized.db_id</code> - Either the native database ID used to refer to the SQL statement, or a synthetic ID such as <code>pi-2372568224</code> that Performance Insights generates if the native database ID isn't available (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized.statement</code> - The text of the SQL digest, as in <code>SELECT * FROM employees WHERE employee_id = ?</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.user.id</code> - The ID of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user.name</code> - The name of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.name</code> - The event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.type</code> - The type of event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type.name</code> - The name of the event type for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state.name</code> - The event for which the backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    pub dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub limit: ::std::option::Option<i32>,
}
impl DimensionGroup {
    /// <p>The name of the dimension group. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>db</code> - The name of the database to which the client is connected. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.application</code> - The name of the application that is connected to the database. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.query</code> - The query that is currently running (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query_tokenized</code> - The digest query (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type</code> - The type of the current session (only Aurora PostgreSQL and RDS PostgreSQL).</p> </li>
    /// <li> <p> <code>db.sql</code> - The text of the SQL statement that is currently running (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized</code> - The SQL digest (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user</code> - The user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event</code> - The event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type</code> - The type of event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state</code> - The event for which the database backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    pub fn group(&self) -> &str {
        use std::ops::Deref;
        self.group.deref()
    }
    /// <p>A list of specific dimensions from a dimension group. If this parameter is not present, then it signifies that all of the dimensions in the group were requested, or are present in the response.</p>
    /// <p>Valid values for elements in the <code>Dimensions</code> array are:</p>
    /// <ul>
    /// <li> <p> <code>db.application.name</code> - The name of the application that is connected to the database. Valid values are as follows: </p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host.id</code> - The host ID of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.host.name</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.name</code> - The name of the database to which the client is connected. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.query.id</code> - The query ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.db_id</code> - The query ID generated by the database (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.statement</code> - The text of the query that is being run (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.query.tokenized.id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.db_id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.statement</code> - The text of the query digest (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type.name</code> - The type of the current session (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.id</code> - The hash of the full, non-tokenized SQL statement generated by Performance Insights (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.db_id</code> - Either the SQL ID generated by the database engine, or a value generated by Performance Insights that begins with <code>pi-</code> (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.statement</code> - The full text of the SQL statement that is running, as in <code>SELECT * FROM employees</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.sql.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.sql_tokenized.id</code> - The hash of the SQL digest generated by Performance Insights (all engines except Amazon DocumentDB). In the console, <code>db.sql_tokenized.id</code> is called the Support ID because Amazon Web Services Support can look at this data to help you troubleshoot database issues.</p> </li>
    /// <li> <p> <code>db.sql_tokenized.db_id</code> - Either the native database ID used to refer to the SQL statement, or a synthetic ID such as <code>pi-2372568224</code> that Performance Insights generates if the native database ID isn't available (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized.statement</code> - The text of the SQL digest, as in <code>SELECT * FROM employees WHERE employee_id = ?</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.user.id</code> - The ID of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user.name</code> - The name of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.name</code> - The event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.type</code> - The type of event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type.name</code> - The name of the event type for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state.name</code> - The event for which the backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.dimensions.is_none()`.
    pub fn dimensions(&self) -> &[::std::string::String] {
        self.dimensions.as_deref().unwrap_or_default()
    }
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
}
impl DimensionGroup {
    /// Creates a new builder-style object to manufacture [`DimensionGroup`](crate::types::DimensionGroup).
    pub fn builder() -> crate::types::builders::DimensionGroupBuilder {
        crate::types::builders::DimensionGroupBuilder::default()
    }
}

/// A builder for [`DimensionGroup`](crate::types::DimensionGroup).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DimensionGroupBuilder {
    pub(crate) group: ::std::option::Option<::std::string::String>,
    pub(crate) dimensions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) limit: ::std::option::Option<i32>,
}
impl DimensionGroupBuilder {
    /// <p>The name of the dimension group. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>db</code> - The name of the database to which the client is connected. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.application</code> - The name of the application that is connected to the database. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.query</code> - The query that is currently running (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query_tokenized</code> - The digest query (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type</code> - The type of the current session (only Aurora PostgreSQL and RDS PostgreSQL).</p> </li>
    /// <li> <p> <code>db.sql</code> - The text of the SQL statement that is currently running (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized</code> - The SQL digest (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user</code> - The user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event</code> - The event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type</code> - The type of event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state</code> - The event for which the database backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    /// This field is required.
    pub fn group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.group = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the dimension group. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>db</code> - The name of the database to which the client is connected. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.application</code> - The name of the application that is connected to the database. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.query</code> - The query that is currently running (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query_tokenized</code> - The digest query (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type</code> - The type of the current session (only Aurora PostgreSQL and RDS PostgreSQL).</p> </li>
    /// <li> <p> <code>db.sql</code> - The text of the SQL statement that is currently running (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized</code> - The SQL digest (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user</code> - The user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event</code> - The event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type</code> - The type of event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state</code> - The event for which the database backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    pub fn set_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.group = input;
        self
    }
    /// <p>The name of the dimension group. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p> <code>db</code> - The name of the database to which the client is connected. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.application</code> - The name of the application that is connected to the database. The following values are permitted:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.query</code> - The query that is currently running (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query_tokenized</code> - The digest query (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type</code> - The type of the current session (only Aurora PostgreSQL and RDS PostgreSQL).</p> </li>
    /// <li> <p> <code>db.sql</code> - The text of the SQL statement that is currently running (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized</code> - The SQL digest (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user</code> - The user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event</code> - The event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type</code> - The type of event for which the database backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state</code> - The event for which the database backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    pub fn get_group(&self) -> &::std::option::Option<::std::string::String> {
        &self.group
    }
    /// Appends an item to `dimensions`.
    ///
    /// To override the contents of this collection use [`set_dimensions`](Self::set_dimensions).
    ///
    /// <p>A list of specific dimensions from a dimension group. If this parameter is not present, then it signifies that all of the dimensions in the group were requested, or are present in the response.</p>
    /// <p>Valid values for elements in the <code>Dimensions</code> array are:</p>
    /// <ul>
    /// <li> <p> <code>db.application.name</code> - The name of the application that is connected to the database. Valid values are as follows: </p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host.id</code> - The host ID of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.host.name</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.name</code> - The name of the database to which the client is connected. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.query.id</code> - The query ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.db_id</code> - The query ID generated by the database (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.statement</code> - The text of the query that is being run (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.query.tokenized.id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.db_id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.statement</code> - The text of the query digest (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type.name</code> - The type of the current session (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.id</code> - The hash of the full, non-tokenized SQL statement generated by Performance Insights (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.db_id</code> - Either the SQL ID generated by the database engine, or a value generated by Performance Insights that begins with <code>pi-</code> (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.statement</code> - The full text of the SQL statement that is running, as in <code>SELECT * FROM employees</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.sql.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.sql_tokenized.id</code> - The hash of the SQL digest generated by Performance Insights (all engines except Amazon DocumentDB). In the console, <code>db.sql_tokenized.id</code> is called the Support ID because Amazon Web Services Support can look at this data to help you troubleshoot database issues.</p> </li>
    /// <li> <p> <code>db.sql_tokenized.db_id</code> - Either the native database ID used to refer to the SQL statement, or a synthetic ID such as <code>pi-2372568224</code> that Performance Insights generates if the native database ID isn't available (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized.statement</code> - The text of the SQL digest, as in <code>SELECT * FROM employees WHERE employee_id = ?</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.user.id</code> - The ID of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user.name</code> - The name of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.name</code> - The event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.type</code> - The type of event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type.name</code> - The name of the event type for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state.name</code> - The event for which the backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    pub fn dimensions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.dimensions.unwrap_or_default();
        v.push(input.into());
        self.dimensions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of specific dimensions from a dimension group. If this parameter is not present, then it signifies that all of the dimensions in the group were requested, or are present in the response.</p>
    /// <p>Valid values for elements in the <code>Dimensions</code> array are:</p>
    /// <ul>
    /// <li> <p> <code>db.application.name</code> - The name of the application that is connected to the database. Valid values are as follows: </p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host.id</code> - The host ID of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.host.name</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.name</code> - The name of the database to which the client is connected. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.query.id</code> - The query ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.db_id</code> - The query ID generated by the database (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.statement</code> - The text of the query that is being run (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.query.tokenized.id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.db_id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.statement</code> - The text of the query digest (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type.name</code> - The type of the current session (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.id</code> - The hash of the full, non-tokenized SQL statement generated by Performance Insights (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.db_id</code> - Either the SQL ID generated by the database engine, or a value generated by Performance Insights that begins with <code>pi-</code> (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.statement</code> - The full text of the SQL statement that is running, as in <code>SELECT * FROM employees</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.sql.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.sql_tokenized.id</code> - The hash of the SQL digest generated by Performance Insights (all engines except Amazon DocumentDB). In the console, <code>db.sql_tokenized.id</code> is called the Support ID because Amazon Web Services Support can look at this data to help you troubleshoot database issues.</p> </li>
    /// <li> <p> <code>db.sql_tokenized.db_id</code> - Either the native database ID used to refer to the SQL statement, or a synthetic ID such as <code>pi-2372568224</code> that Performance Insights generates if the native database ID isn't available (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized.statement</code> - The text of the SQL digest, as in <code>SELECT * FROM employees WHERE employee_id = ?</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.user.id</code> - The ID of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user.name</code> - The name of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.name</code> - The event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.type</code> - The type of event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type.name</code> - The name of the event type for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state.name</code> - The event for which the backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    pub fn set_dimensions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.dimensions = input;
        self
    }
    /// <p>A list of specific dimensions from a dimension group. If this parameter is not present, then it signifies that all of the dimensions in the group were requested, or are present in the response.</p>
    /// <p>Valid values for elements in the <code>Dimensions</code> array are:</p>
    /// <ul>
    /// <li> <p> <code>db.application.name</code> - The name of the application that is connected to the database. Valid values are as follows: </p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.host.id</code> - The host ID of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.host.name</code> - The host name of the connected client (all engines).</p> </li>
    /// <li> <p> <code>db.name</code> - The name of the database to which the client is connected. Valid values are as follows:</p>
    /// <ul>
    /// <li> <p>Aurora PostgreSQL</p> </li>
    /// <li> <p>Amazon RDS PostgreSQL</p> </li>
    /// <li> <p>Aurora MySQL</p> </li>
    /// <li> <p>Amazon RDS MySQL</p> </li>
    /// <li> <p>Amazon RDS MariaDB</p> </li>
    /// <li> <p>Amazon DocumentDB</p> </li>
    /// </ul> </li>
    /// <li> <p> <code>db.query.id</code> - The query ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.db_id</code> - The query ID generated by the database (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.statement</code> - The text of the query that is being run (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.query.tokenized.id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.db_id</code> - The query digest ID generated by Performance Insights (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.query.tokenized.statement</code> - The text of the query digest (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.session_type.name</code> - The type of the current session (only Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.id</code> - The hash of the full, non-tokenized SQL statement generated by Performance Insights (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.db_id</code> - Either the SQL ID generated by the database engine, or a value generated by Performance Insights that begins with <code>pi-</code> (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql.statement</code> - The full text of the SQL statement that is running, as in <code>SELECT * FROM employees</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.sql.tokenized_id</code> </p> </li>
    /// <li> <p> <code>db.sql_tokenized.id</code> - The hash of the SQL digest generated by Performance Insights (all engines except Amazon DocumentDB). In the console, <code>db.sql_tokenized.id</code> is called the Support ID because Amazon Web Services Support can look at this data to help you troubleshoot database issues.</p> </li>
    /// <li> <p> <code>db.sql_tokenized.db_id</code> - Either the native database ID used to refer to the SQL statement, or a synthetic ID such as <code>pi-2372568224</code> that Performance Insights generates if the native database ID isn't available (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.sql_tokenized.statement</code> - The text of the SQL digest, as in <code>SELECT * FROM employees WHERE employee_id = ?</code> (all engines except Amazon DocumentDB)</p> </li>
    /// <li> <p> <code>db.user.id</code> - The ID of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.user.name</code> - The name of the user logged in to the database (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.name</code> - The event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event.type</code> - The type of event for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_event_type.name</code> - The name of the event type for which the backend is waiting (all engines except Amazon DocumentDB).</p> </li>
    /// <li> <p> <code>db.wait_state.name</code> - The event for which the backend is waiting (only Amazon DocumentDB).</p> </li>
    /// </ul>
    pub fn get_dimensions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.dimensions
    }
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of items to fetch for this dimension group.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Consumes the builder and constructs a [`DimensionGroup`](crate::types::DimensionGroup).
    /// This method will fail if any of the following fields are not set:
    /// - [`group`](crate::types::builders::DimensionGroupBuilder::group)
    pub fn build(self) -> ::std::result::Result<crate::types::DimensionGroup, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DimensionGroup {
            group: self.group.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "group",
                    "group was not specified but it is required when building DimensionGroup",
                )
            })?,
            dimensions: self.dimensions,
            limit: self.limit,
        })
    }
}
