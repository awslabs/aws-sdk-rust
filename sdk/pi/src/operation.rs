// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>For a specific time period, retrieve the top <code>N</code> dimension keys for a
/// metric.</p>
/// <note>
/// <p>Each response element returns a maximum of 500 bytes. For larger elements, such as SQL statements,
/// only the first 500 bytes are returned.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDimensionKeys {
    _private: (),
}
impl DescribeDimensionKeys {
    /// Creates a new builder-style object to manufacture [`DescribeDimensionKeysInput`](crate::input::DescribeDimensionKeysInput)
    pub fn builder() -> crate::input::describe_dimension_keys_input::Builder {
        crate::input::describe_dimension_keys_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDimensionKeys {
    type Output = std::result::Result<
        crate::output::DescribeDimensionKeysOutput,
        crate::error::DescribeDimensionKeysError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_dimension_keys_error(response)
        } else {
            crate::operation_deser::parse_describe_dimension_keys_response(response)
        }
    }
}

/// <p>Get the attributes of the specified dimension group for a DB instance or data source. For example, if you specify a
/// SQL ID, <code>GetDimensionKeyDetails</code> retrieves the full text of the dimension <code>db.sql.statement</code>
/// associated with this ID. This operation is useful because <code>GetResourceMetrics</code> and
/// <code>DescribeDimensionKeys</code> don't support retrieval of large SQL statement text.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDimensionKeyDetails {
    _private: (),
}
impl GetDimensionKeyDetails {
    /// Creates a new builder-style object to manufacture [`GetDimensionKeyDetailsInput`](crate::input::GetDimensionKeyDetailsInput)
    pub fn builder() -> crate::input::get_dimension_key_details_input::Builder {
        crate::input::get_dimension_key_details_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDimensionKeyDetails {
    type Output = std::result::Result<
        crate::output::GetDimensionKeyDetailsOutput,
        crate::error::GetDimensionKeyDetailsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_dimension_key_details_error(response)
        } else {
            crate::operation_deser::parse_get_dimension_key_details_response(response)
        }
    }
}

/// <p>Retrieve Performance Insights metrics for a set of data sources, over a time period. You can provide
/// specific dimension groups and dimensions, and provide aggregation and filtering criteria for
/// each group.</p>
/// <note>
/// <p>Each response element returns a maximum of 500 bytes. For larger elements, such as SQL statements,
/// only the first 500 bytes are returned.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetResourceMetrics {
    _private: (),
}
impl GetResourceMetrics {
    /// Creates a new builder-style object to manufacture [`GetResourceMetricsInput`](crate::input::GetResourceMetricsInput)
    pub fn builder() -> crate::input::get_resource_metrics_input::Builder {
        crate::input::get_resource_metrics_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetResourceMetrics {
    type Output = std::result::Result<
        crate::output::GetResourceMetricsOutput,
        crate::error::GetResourceMetricsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_resource_metrics_error(response)
        } else {
            crate::operation_deser::parse_get_resource_metrics_response(response)
        }
    }
}
