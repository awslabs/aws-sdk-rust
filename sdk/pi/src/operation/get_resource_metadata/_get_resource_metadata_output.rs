// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetResourceMetadataOutput {
    /// <p>An immutable identifier for a data source that is unique for an Amazon Web Services Region. Performance Insights gathers metrics from this data source. To use a DB instance as a data source, specify its <code>DbiResourceId</code> value. For example, specify <code>db-ABCDEFGHIJKLMNOPQRSTU1VW2X</code>. </p>
    #[doc(hidden)]
    pub identifier: std::option::Option<std::string::String>,
    /// <p>The metadata for different features. For example, the metadata might indicate that a feature is turned on or off on a specific DB instance.</p>
    #[doc(hidden)]
    pub features: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::FeatureMetadata>,
    >,
    _request_id: Option<String>,
}
impl GetResourceMetadataOutput {
    /// <p>An immutable identifier for a data source that is unique for an Amazon Web Services Region. Performance Insights gathers metrics from this data source. To use a DB instance as a data source, specify its <code>DbiResourceId</code> value. For example, specify <code>db-ABCDEFGHIJKLMNOPQRSTU1VW2X</code>. </p>
    pub fn identifier(&self) -> std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The metadata for different features. For example, the metadata might indicate that a feature is turned on or off on a specific DB instance.</p>
    pub fn features(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::FeatureMetadata>,
    > {
        self.features.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetResourceMetadataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetResourceMetadataOutput {
    /// Creates a new builder-style object to manufacture [`GetResourceMetadataOutput`](crate::operation::get_resource_metadata::GetResourceMetadataOutput).
    pub fn builder(
    ) -> crate::operation::get_resource_metadata::builders::GetResourceMetadataOutputBuilder {
        crate::operation::get_resource_metadata::builders::GetResourceMetadataOutputBuilder::default(
        )
    }
}

/// A builder for [`GetResourceMetadataOutput`](crate::operation::get_resource_metadata::GetResourceMetadataOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetResourceMetadataOutputBuilder {
    pub(crate) identifier: std::option::Option<std::string::String>,
    pub(crate) features: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::FeatureMetadata>,
    >,
    _request_id: Option<String>,
}
impl GetResourceMetadataOutputBuilder {
    /// <p>An immutable identifier for a data source that is unique for an Amazon Web Services Region. Performance Insights gathers metrics from this data source. To use a DB instance as a data source, specify its <code>DbiResourceId</code> value. For example, specify <code>db-ABCDEFGHIJKLMNOPQRSTU1VW2X</code>. </p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.identifier = Some(input.into());
        self
    }
    /// <p>An immutable identifier for a data source that is unique for an Amazon Web Services Region. Performance Insights gathers metrics from this data source. To use a DB instance as a data source, specify its <code>DbiResourceId</code> value. For example, specify <code>db-ABCDEFGHIJKLMNOPQRSTU1VW2X</code>. </p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// Adds a key-value pair to `features`.
    ///
    /// To override the contents of this collection use [`set_features`](Self::set_features).
    ///
    /// <p>The metadata for different features. For example, the metadata might indicate that a feature is turned on or off on a specific DB instance.</p>
    pub fn features(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::FeatureMetadata,
    ) -> Self {
        let mut hash_map = self.features.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.features = Some(hash_map);
        self
    }
    /// <p>The metadata for different features. For example, the metadata might indicate that a feature is turned on or off on a specific DB instance.</p>
    pub fn set_features(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::FeatureMetadata>,
        >,
    ) -> Self {
        self.features = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetResourceMetadataOutput`](crate::operation::get_resource_metadata::GetResourceMetadataOutput).
    pub fn build(self) -> crate::operation::get_resource_metadata::GetResourceMetadataOutput {
        crate::operation::get_resource_metadata::GetResourceMetadataOutput {
            identifier: self.identifier,
            features: self.features,
            _request_id: self._request_id,
        }
    }
}
