// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateGroupInput {
    /// <p>The case-sensitive name of the group.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The ARN that was generated upon creation.</p>
    #[doc(hidden)]
    pub group_arn: std::option::Option<std::string::String>,
    /// <p>The updated filter expression defining criteria by which to group traces.</p>
    #[doc(hidden)]
    pub filter_expression: std::option::Option<std::string::String>,
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li> <p>The InsightsEnabled boolean can be set to true to enable insights for the group or false to disable insights for the group.</p> </li>
    /// <li> <p>The NotificationsEnabled boolean can be set to true to enable insights notifications for the group. Notifications can only be enabled on a group with InsightsEnabled set to true.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub insights_configuration: std::option::Option<crate::types::InsightsConfiguration>,
}
impl UpdateGroupInput {
    /// <p>The case-sensitive name of the group.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The ARN that was generated upon creation.</p>
    pub fn group_arn(&self) -> std::option::Option<&str> {
        self.group_arn.as_deref()
    }
    /// <p>The updated filter expression defining criteria by which to group traces.</p>
    pub fn filter_expression(&self) -> std::option::Option<&str> {
        self.filter_expression.as_deref()
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li> <p>The InsightsEnabled boolean can be set to true to enable insights for the group or false to disable insights for the group.</p> </li>
    /// <li> <p>The NotificationsEnabled boolean can be set to true to enable insights notifications for the group. Notifications can only be enabled on a group with InsightsEnabled set to true.</p> </li>
    /// </ul>
    pub fn insights_configuration(
        &self,
    ) -> std::option::Option<&crate::types::InsightsConfiguration> {
        self.insights_configuration.as_ref()
    }
}
impl UpdateGroupInput {
    /// Creates a new builder-style object to manufacture [`UpdateGroupInput`](crate::operation::update_group::UpdateGroupInput).
    pub fn builder() -> crate::operation::update_group::builders::UpdateGroupInputBuilder {
        crate::operation::update_group::builders::UpdateGroupInputBuilder::default()
    }
}

/// A builder for [`UpdateGroupInput`](crate::operation::update_group::UpdateGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateGroupInputBuilder {
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) group_arn: std::option::Option<std::string::String>,
    pub(crate) filter_expression: std::option::Option<std::string::String>,
    pub(crate) insights_configuration: std::option::Option<crate::types::InsightsConfiguration>,
}
impl UpdateGroupInputBuilder {
    /// <p>The case-sensitive name of the group.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The case-sensitive name of the group.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The ARN that was generated upon creation.</p>
    pub fn group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_arn = Some(input.into());
        self
    }
    /// <p>The ARN that was generated upon creation.</p>
    pub fn set_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_arn = input;
        self
    }
    /// <p>The updated filter expression defining criteria by which to group traces.</p>
    pub fn filter_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter_expression = Some(input.into());
        self
    }
    /// <p>The updated filter expression defining criteria by which to group traces.</p>
    pub fn set_filter_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.filter_expression = input;
        self
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li> <p>The InsightsEnabled boolean can be set to true to enable insights for the group or false to disable insights for the group.</p> </li>
    /// <li> <p>The NotificationsEnabled boolean can be set to true to enable insights notifications for the group. Notifications can only be enabled on a group with InsightsEnabled set to true.</p> </li>
    /// </ul>
    pub fn insights_configuration(mut self, input: crate::types::InsightsConfiguration) -> Self {
        self.insights_configuration = Some(input);
        self
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li> <p>The InsightsEnabled boolean can be set to true to enable insights for the group or false to disable insights for the group.</p> </li>
    /// <li> <p>The NotificationsEnabled boolean can be set to true to enable insights notifications for the group. Notifications can only be enabled on a group with InsightsEnabled set to true.</p> </li>
    /// </ul>
    pub fn set_insights_configuration(
        mut self,
        input: std::option::Option<crate::types::InsightsConfiguration>,
    ) -> Self {
        self.insights_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateGroupInput`](crate::operation::update_group::UpdateGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_group::UpdateGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_group::UpdateGroupInput {
            group_name: self.group_name,
            group_arn: self.group_arn,
            filter_expression: self.filter_expression,
            insights_configuration: self.insights_configuration,
        })
    }
}
