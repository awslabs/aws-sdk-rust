// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_group::_create_group_output::CreateGroupOutputBuilder;

pub use crate::operation::create_group::_create_group_input::CreateGroupInputBuilder;

impl crate::operation::create_group::builders::CreateGroupInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_group::CreateGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_group::CreateGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_group();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateGroup`.
///
/// <p>Creates a group resource with a name and a filter expression.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateGroupFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_group::builders::CreateGroupInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_group::CreateGroupOutput,
        crate::operation::create_group::CreateGroupError,
    > for CreateGroupFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_group::CreateGroupOutput,
            crate::operation::create_group::CreateGroupError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateGroupFluentBuilder {
    /// Creates a new `CreateGroup`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateGroup as a reference.
    pub fn as_input(&self) -> &crate::operation::create_group::builders::CreateGroupInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_group::CreateGroupOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_group::CreateGroupError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_group::CreateGroup::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_group::CreateGroup::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_group::CreateGroupOutput,
        crate::operation::create_group::CreateGroupError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The case-sensitive name of the new group. Default is a reserved name and names must be unique.</p>
    pub fn group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.group_name(input.into());
        self
    }
    /// <p>The case-sensitive name of the new group. Default is a reserved name and names must be unique.</p>
    pub fn set_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_group_name(input);
        self
    }
    /// <p>The case-sensitive name of the new group. Default is a reserved name and names must be unique.</p>
    pub fn get_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_group_name()
    }
    /// <p>The filter expression defining criteria by which to group traces.</p>
    pub fn filter_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.filter_expression(input.into());
        self
    }
    /// <p>The filter expression defining criteria by which to group traces.</p>
    pub fn set_filter_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_filter_expression(input);
        self
    }
    /// <p>The filter expression defining criteria by which to group traces.</p>
    pub fn get_filter_expression(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_filter_expression()
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li>
    /// <p>The InsightsEnabled boolean can be set to true to enable insights for the new group or false to disable insights for the new group.</p></li>
    /// <li>
    /// <p>The NotificationsEnabled boolean can be set to true to enable insights notifications for the new group. Notifications may only be enabled on a group with InsightsEnabled set to true.</p></li>
    /// </ul>
    pub fn insights_configuration(mut self, input: crate::types::InsightsConfiguration) -> Self {
        self.inner = self.inner.insights_configuration(input);
        self
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li>
    /// <p>The InsightsEnabled boolean can be set to true to enable insights for the new group or false to disable insights for the new group.</p></li>
    /// <li>
    /// <p>The NotificationsEnabled boolean can be set to true to enable insights notifications for the new group. Notifications may only be enabled on a group with InsightsEnabled set to true.</p></li>
    /// </ul>
    pub fn set_insights_configuration(mut self, input: ::std::option::Option<crate::types::InsightsConfiguration>) -> Self {
        self.inner = self.inner.set_insights_configuration(input);
        self
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li>
    /// <p>The InsightsEnabled boolean can be set to true to enable insights for the new group or false to disable insights for the new group.</p></li>
    /// <li>
    /// <p>The NotificationsEnabled boolean can be set to true to enable insights notifications for the new group. Notifications may only be enabled on a group with InsightsEnabled set to true.</p></li>
    /// </ul>
    pub fn get_insights_configuration(&self) -> &::std::option::Option<crate::types::InsightsConfiguration> {
        self.inner.get_insights_configuration()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map that contains one or more tag keys and tag values to attach to an X-Ray group. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of user-applied tags per resource: 50</p></li>
    /// <li>
    /// <p>Maximum tag key length: 128 Unicode characters</p></li>
    /// <li>
    /// <p>Maximum tag value length: 256 Unicode characters</p></li>
    /// <li>
    /// <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p></li>
    /// </ul>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A map that contains one or more tag keys and tag values to attach to an X-Ray group. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of user-applied tags per resource: 50</p></li>
    /// <li>
    /// <p>Maximum tag key length: 128 Unicode characters</p></li>
    /// <li>
    /// <p>Maximum tag value length: 256 Unicode characters</p></li>
    /// <li>
    /// <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p></li>
    /// </ul>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>A map that contains one or more tag keys and tag values to attach to an X-Ray group. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li>
    /// <p>Maximum number of user-applied tags per resource: 50</p></li>
    /// <li>
    /// <p>Maximum tag key length: 128 Unicode characters</p></li>
    /// <li>
    /// <p>Maximum tag value length: 256 Unicode characters</p></li>
    /// <li>
    /// <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p></li>
    /// <li>
    /// <p>Tag keys and values are case sensitive.</p></li>
    /// <li>
    /// <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p></li>
    /// </ul>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
