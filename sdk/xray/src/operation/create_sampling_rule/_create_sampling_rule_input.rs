// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateSamplingRuleInput {
    /// <p>The rule definition.</p>
    pub sampling_rule: ::std::option::Option<crate::types::SamplingRule>,
    /// <p>A map that contains one or more tag keys and tag values to attach to an X-Ray sampling rule. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of user-applied tags per resource: 50</p> </li>
    /// <li> <p>Maximum tag key length: 128 Unicode characters</p> </li>
    /// <li> <p>Maximum tag value length: 256 Unicode characters</p> </li>
    /// <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li>
    /// </ul>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateSamplingRuleInput {
    /// <p>The rule definition.</p>
    pub fn sampling_rule(&self) -> ::std::option::Option<&crate::types::SamplingRule> {
        self.sampling_rule.as_ref()
    }
    /// <p>A map that contains one or more tag keys and tag values to attach to an X-Ray sampling rule. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of user-applied tags per resource: 50</p> </li>
    /// <li> <p>Maximum tag key length: 128 Unicode characters</p> </li>
    /// <li> <p>Maximum tag value length: 256 Unicode characters</p> </li>
    /// <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateSamplingRuleInput {
    /// Creates a new builder-style object to manufacture [`CreateSamplingRuleInput`](crate::operation::create_sampling_rule::CreateSamplingRuleInput).
    pub fn builder() -> crate::operation::create_sampling_rule::builders::CreateSamplingRuleInputBuilder {
        crate::operation::create_sampling_rule::builders::CreateSamplingRuleInputBuilder::default()
    }
}

/// A builder for [`CreateSamplingRuleInput`](crate::operation::create_sampling_rule::CreateSamplingRuleInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateSamplingRuleInputBuilder {
    pub(crate) sampling_rule: ::std::option::Option<crate::types::SamplingRule>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateSamplingRuleInputBuilder {
    /// <p>The rule definition.</p>
    /// This field is required.
    pub fn sampling_rule(mut self, input: crate::types::SamplingRule) -> Self {
        self.sampling_rule = ::std::option::Option::Some(input);
        self
    }
    /// <p>The rule definition.</p>
    pub fn set_sampling_rule(mut self, input: ::std::option::Option<crate::types::SamplingRule>) -> Self {
        self.sampling_rule = input;
        self
    }
    /// <p>The rule definition.</p>
    pub fn get_sampling_rule(&self) -> &::std::option::Option<crate::types::SamplingRule> {
        &self.sampling_rule
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map that contains one or more tag keys and tag values to attach to an X-Ray sampling rule. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of user-applied tags per resource: 50</p> </li>
    /// <li> <p>Maximum tag key length: 128 Unicode characters</p> </li>
    /// <li> <p>Maximum tag value length: 256 Unicode characters</p> </li>
    /// <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li>
    /// </ul>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A map that contains one or more tag keys and tag values to attach to an X-Ray sampling rule. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of user-applied tags per resource: 50</p> </li>
    /// <li> <p>Maximum tag key length: 128 Unicode characters</p> </li>
    /// <li> <p>Maximum tag value length: 256 Unicode characters</p> </li>
    /// <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li>
    /// </ul>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map that contains one or more tag keys and tag values to attach to an X-Ray sampling rule. For more information about ways to use tags, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html">Tagging Amazon Web Services resources</a> in the <i>Amazon Web Services General Reference</i>.</p>
    /// <p>The following restrictions apply to tags:</p>
    /// <ul>
    /// <li> <p>Maximum number of user-applied tags per resource: 50</p> </li>
    /// <li> <p>Maximum tag key length: 128 Unicode characters</p> </li>
    /// <li> <p>Maximum tag value length: 256 Unicode characters</p> </li>
    /// <li> <p>Valid values for key and value: a-z, A-Z, 0-9, space, and the following characters: _ . : / = + - and @</p> </li>
    /// <li> <p>Tag keys and values are case sensitive.</p> </li>
    /// <li> <p>Don't use <code>aws:</code> as a prefix for keys; it's reserved for Amazon Web Services use.</p> </li>
    /// </ul>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateSamplingRuleInput`](crate::operation::create_sampling_rule::CreateSamplingRuleInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_sampling_rule::CreateSamplingRuleInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_sampling_rule::CreateSamplingRuleInput {
            sampling_rule: self.sampling_rule,
            tags: self.tags,
        })
    }
}
