// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTraceSummariesInput {
    /// <p>The start of the time frame for which to retrieve traces.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end of the time frame for which to retrieve traces.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A parameter to indicate whether to query trace summaries by TraceId or Event time.</p>
    #[doc(hidden)]
    pub time_range_type: std::option::Option<crate::types::TimeRangeType>,
    /// <p>Set to <code>true</code> to get summaries for only a subset of available traces.</p>
    #[doc(hidden)]
    pub sampling: std::option::Option<bool>,
    /// <p>A parameter to indicate whether to enable sampling on trace summaries. Input parameters are Name and Value.</p>
    #[doc(hidden)]
    pub sampling_strategy: std::option::Option<crate::types::SamplingStrategy>,
    /// <p>Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.</p>
    #[doc(hidden)]
    pub filter_expression: std::option::Option<std::string::String>,
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl GetTraceSummariesInput {
    /// <p>The start of the time frame for which to retrieve traces.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end of the time frame for which to retrieve traces.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>A parameter to indicate whether to query trace summaries by TraceId or Event time.</p>
    pub fn time_range_type(&self) -> std::option::Option<&crate::types::TimeRangeType> {
        self.time_range_type.as_ref()
    }
    /// <p>Set to <code>true</code> to get summaries for only a subset of available traces.</p>
    pub fn sampling(&self) -> std::option::Option<bool> {
        self.sampling
    }
    /// <p>A parameter to indicate whether to enable sampling on trace summaries. Input parameters are Name and Value.</p>
    pub fn sampling_strategy(&self) -> std::option::Option<&crate::types::SamplingStrategy> {
        self.sampling_strategy.as_ref()
    }
    /// <p>Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.</p>
    pub fn filter_expression(&self) -> std::option::Option<&str> {
        self.filter_expression.as_deref()
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetTraceSummariesInput {
    /// Creates a new builder-style object to manufacture [`GetTraceSummariesInput`](crate::operation::get_trace_summaries::GetTraceSummariesInput).
    pub fn builder(
    ) -> crate::operation::get_trace_summaries::builders::GetTraceSummariesInputBuilder {
        crate::operation::get_trace_summaries::builders::GetTraceSummariesInputBuilder::default()
    }
}

/// A builder for [`GetTraceSummariesInput`](crate::operation::get_trace_summaries::GetTraceSummariesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTraceSummariesInputBuilder {
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) time_range_type: std::option::Option<crate::types::TimeRangeType>,
    pub(crate) sampling: std::option::Option<bool>,
    pub(crate) sampling_strategy: std::option::Option<crate::types::SamplingStrategy>,
    pub(crate) filter_expression: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl GetTraceSummariesInputBuilder {
    /// <p>The start of the time frame for which to retrieve traces.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The start of the time frame for which to retrieve traces.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The end of the time frame for which to retrieve traces.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The end of the time frame for which to retrieve traces.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>A parameter to indicate whether to query trace summaries by TraceId or Event time.</p>
    pub fn time_range_type(mut self, input: crate::types::TimeRangeType) -> Self {
        self.time_range_type = Some(input);
        self
    }
    /// <p>A parameter to indicate whether to query trace summaries by TraceId or Event time.</p>
    pub fn set_time_range_type(
        mut self,
        input: std::option::Option<crate::types::TimeRangeType>,
    ) -> Self {
        self.time_range_type = input;
        self
    }
    /// <p>Set to <code>true</code> to get summaries for only a subset of available traces.</p>
    pub fn sampling(mut self, input: bool) -> Self {
        self.sampling = Some(input);
        self
    }
    /// <p>Set to <code>true</code> to get summaries for only a subset of available traces.</p>
    pub fn set_sampling(mut self, input: std::option::Option<bool>) -> Self {
        self.sampling = input;
        self
    }
    /// <p>A parameter to indicate whether to enable sampling on trace summaries. Input parameters are Name and Value.</p>
    pub fn sampling_strategy(mut self, input: crate::types::SamplingStrategy) -> Self {
        self.sampling_strategy = Some(input);
        self
    }
    /// <p>A parameter to indicate whether to enable sampling on trace summaries. Input parameters are Name and Value.</p>
    pub fn set_sampling_strategy(
        mut self,
        input: std::option::Option<crate::types::SamplingStrategy>,
    ) -> Self {
        self.sampling_strategy = input;
        self
    }
    /// <p>Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.</p>
    pub fn filter_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter_expression = Some(input.into());
        self
    }
    /// <p>Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.</p>
    pub fn set_filter_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.filter_expression = input;
        self
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetTraceSummariesInput`](crate::operation::get_trace_summaries::GetTraceSummariesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_trace_summaries::GetTraceSummariesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_trace_summaries::GetTraceSummariesInput {
                start_time: self.start_time,
                end_time: self.end_time,
                time_range_type: self.time_range_type,
                sampling: self.sampling,
                sampling_strategy: self.sampling_strategy,
                filter_expression: self.filter_expression,
                next_token: self.next_token,
            },
        )
    }
}
