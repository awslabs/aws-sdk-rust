// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_trace_summaries::_get_trace_summaries_output::GetTraceSummariesOutputBuilder;

pub use crate::operation::get_trace_summaries::_get_trace_summaries_input::GetTraceSummariesInputBuilder;

impl crate::operation::get_trace_summaries::builders::GetTraceSummariesInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_trace_summaries::GetTraceSummariesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_trace_summaries::GetTraceSummariesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_trace_summaries();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetTraceSummaries`.
///
/// <p>Retrieves IDs and annotations for traces available for a specified time frame using an optional filter. To get the full traces, pass the trace IDs to <code>BatchGetTraces</code>.</p>
/// <p>A filter expression can target traced requests that hit specific service nodes or edges, have errors, or come from a known user. For example, the following filter expression targets traces that pass through <code>api.example.com</code>:</p>
/// <p><code>service("api.example.com")</code></p>
/// <p>This filter expression finds traces that have an annotation named <code>account</code> with the value <code>12345</code>:</p>
/// <p><code>annotation.account = "12345"</code></p>
/// <p>For a full list of indexed fields and keywords that you can use in filter expressions, see <a href="https://docs.aws.amazon.com/xray/latest/devguide/xray-console-filters.html">Using Filter Expressions</a> in the <i>Amazon Web Services X-Ray Developer Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetTraceSummariesFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_trace_summaries::builders::GetTraceSummariesInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_trace_summaries::GetTraceSummariesOutput,
        crate::operation::get_trace_summaries::GetTraceSummariesError,
    > for GetTraceSummariesFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_trace_summaries::GetTraceSummariesOutput,
            crate::operation::get_trace_summaries::GetTraceSummariesError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetTraceSummariesFluentBuilder {
    /// Creates a new `GetTraceSummaries`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetTraceSummaries as a reference.
    pub fn as_input(&self) -> &crate::operation::get_trace_summaries::builders::GetTraceSummariesInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_trace_summaries::GetTraceSummariesOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_trace_summaries::GetTraceSummariesError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_trace_summaries::GetTraceSummaries::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_trace_summaries::GetTraceSummaries::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_trace_summaries::GetTraceSummariesOutput,
        crate::operation::get_trace_summaries::GetTraceSummariesError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_trace_summaries::paginator::GetTraceSummariesPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::get_trace_summaries::paginator::GetTraceSummariesPaginator {
        crate::operation::get_trace_summaries::paginator::GetTraceSummariesPaginator::new(self.handle, self.inner)
    }
    /// <p>The start of the time frame for which to retrieve traces.</p>
    pub fn start_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>The start of the time frame for which to retrieve traces.</p>
    pub fn set_start_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>The start of the time frame for which to retrieve traces.</p>
    pub fn get_start_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_start_time()
    }
    /// <p>The end of the time frame for which to retrieve traces.</p>
    pub fn end_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>The end of the time frame for which to retrieve traces.</p>
    pub fn set_end_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// <p>The end of the time frame for which to retrieve traces.</p>
    pub fn get_end_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        self.inner.get_end_time()
    }
    /// <p>A parameter to indicate whether to query trace summaries by TraceId, Event (trace update time), or Service (segment end time).</p>
    pub fn time_range_type(mut self, input: crate::types::TimeRangeType) -> Self {
        self.inner = self.inner.time_range_type(input);
        self
    }
    /// <p>A parameter to indicate whether to query trace summaries by TraceId, Event (trace update time), or Service (segment end time).</p>
    pub fn set_time_range_type(mut self, input: ::std::option::Option<crate::types::TimeRangeType>) -> Self {
        self.inner = self.inner.set_time_range_type(input);
        self
    }
    /// <p>A parameter to indicate whether to query trace summaries by TraceId, Event (trace update time), or Service (segment end time).</p>
    pub fn get_time_range_type(&self) -> &::std::option::Option<crate::types::TimeRangeType> {
        self.inner.get_time_range_type()
    }
    /// <p>Set to <code>true</code> to get summaries for only a subset of available traces.</p>
    pub fn sampling(mut self, input: bool) -> Self {
        self.inner = self.inner.sampling(input);
        self
    }
    /// <p>Set to <code>true</code> to get summaries for only a subset of available traces.</p>
    pub fn set_sampling(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_sampling(input);
        self
    }
    /// <p>Set to <code>true</code> to get summaries for only a subset of available traces.</p>
    pub fn get_sampling(&self) -> &::std::option::Option<bool> {
        self.inner.get_sampling()
    }
    /// <p>A parameter to indicate whether to enable sampling on trace summaries. Input parameters are Name and Value.</p>
    pub fn sampling_strategy(mut self, input: crate::types::SamplingStrategy) -> Self {
        self.inner = self.inner.sampling_strategy(input);
        self
    }
    /// <p>A parameter to indicate whether to enable sampling on trace summaries. Input parameters are Name and Value.</p>
    pub fn set_sampling_strategy(mut self, input: ::std::option::Option<crate::types::SamplingStrategy>) -> Self {
        self.inner = self.inner.set_sampling_strategy(input);
        self
    }
    /// <p>A parameter to indicate whether to enable sampling on trace summaries. Input parameters are Name and Value.</p>
    pub fn get_sampling_strategy(&self) -> &::std::option::Option<crate::types::SamplingStrategy> {
        self.inner.get_sampling_strategy()
    }
    /// <p>Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.</p>
    pub fn filter_expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.filter_expression(input.into());
        self
    }
    /// <p>Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.</p>
    pub fn set_filter_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_filter_expression(input);
        self
    }
    /// <p>Specify a filter expression to retrieve trace summaries for services or requests that meet certain requirements.</p>
    pub fn get_filter_expression(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_filter_expression()
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of results.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of results.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>Specify the pagination token returned by a previous request to retrieve the next page of results.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
