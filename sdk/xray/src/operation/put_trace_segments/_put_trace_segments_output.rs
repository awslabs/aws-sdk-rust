// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutTraceSegmentsOutput {
    /// <p>Segments that failed processing.</p>
    pub unprocessed_trace_segments: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedTraceSegment>>,
    _request_id: Option<String>,
}
impl PutTraceSegmentsOutput {
    /// <p>Segments that failed processing.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unprocessed_trace_segments.is_none()`.
    pub fn unprocessed_trace_segments(&self) -> &[crate::types::UnprocessedTraceSegment] {
        self.unprocessed_trace_segments.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for PutTraceSegmentsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutTraceSegmentsOutput {
    /// Creates a new builder-style object to manufacture [`PutTraceSegmentsOutput`](crate::operation::put_trace_segments::PutTraceSegmentsOutput).
    pub fn builder() -> crate::operation::put_trace_segments::builders::PutTraceSegmentsOutputBuilder {
        crate::operation::put_trace_segments::builders::PutTraceSegmentsOutputBuilder::default()
    }
}

/// A builder for [`PutTraceSegmentsOutput`](crate::operation::put_trace_segments::PutTraceSegmentsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutTraceSegmentsOutputBuilder {
    pub(crate) unprocessed_trace_segments: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedTraceSegment>>,
    _request_id: Option<String>,
}
impl PutTraceSegmentsOutputBuilder {
    /// Appends an item to `unprocessed_trace_segments`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_trace_segments`](Self::set_unprocessed_trace_segments).
    ///
    /// <p>Segments that failed processing.</p>
    pub fn unprocessed_trace_segments(mut self, input: crate::types::UnprocessedTraceSegment) -> Self {
        let mut v = self.unprocessed_trace_segments.unwrap_or_default();
        v.push(input);
        self.unprocessed_trace_segments = ::std::option::Option::Some(v);
        self
    }
    /// <p>Segments that failed processing.</p>
    pub fn set_unprocessed_trace_segments(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UnprocessedTraceSegment>>) -> Self {
        self.unprocessed_trace_segments = input;
        self
    }
    /// <p>Segments that failed processing.</p>
    pub fn get_unprocessed_trace_segments(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UnprocessedTraceSegment>> {
        &self.unprocessed_trace_segments
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutTraceSegmentsOutput`](crate::operation::put_trace_segments::PutTraceSegmentsOutput).
    pub fn build(self) -> crate::operation::put_trace_segments::PutTraceSegmentsOutput {
        crate::operation::put_trace_segments::PutTraceSegmentsOutput {
            unprocessed_trace_segments: self.unprocessed_trace_segments,
            _request_id: self._request_id,
        }
    }
}
