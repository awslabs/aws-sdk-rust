// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetTimeSeriesServiceStatisticsInput {
    /// <p>The start of the time frame for which to aggregate statistics.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end of the time frame for which to aggregate statistics.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The case-sensitive name of the group for which to pull statistics from.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the group for which to pull statistics from.</p>
    #[doc(hidden)]
    pub group_arn: std::option::Option<std::string::String>,
    /// <p>A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. </p>
    #[doc(hidden)]
    pub entity_selector_expression: std::option::Option<std::string::String>,
    /// <p>Aggregation period in seconds.</p>
    #[doc(hidden)]
    pub period: std::option::Option<i32>,
    /// <p>The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.</p>
    #[doc(hidden)]
    pub forecast_statistics: std::option::Option<bool>,
    /// <p>Pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl GetTimeSeriesServiceStatisticsInput {
    /// <p>The start of the time frame for which to aggregate statistics.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end of the time frame for which to aggregate statistics.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The case-sensitive name of the group for which to pull statistics from.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the group for which to pull statistics from.</p>
    pub fn group_arn(&self) -> std::option::Option<&str> {
        self.group_arn.as_deref()
    }
    /// <p>A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. </p>
    pub fn entity_selector_expression(&self) -> std::option::Option<&str> {
        self.entity_selector_expression.as_deref()
    }
    /// <p>Aggregation period in seconds.</p>
    pub fn period(&self) -> std::option::Option<i32> {
        self.period
    }
    /// <p>The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.</p>
    pub fn forecast_statistics(&self) -> std::option::Option<bool> {
        self.forecast_statistics
    }
    /// <p>Pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetTimeSeriesServiceStatisticsInput {
    /// Creates a new builder-style object to manufacture [`GetTimeSeriesServiceStatisticsInput`](crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsInput).
    pub fn builder() -> crate::operation::get_time_series_service_statistics::builders::GetTimeSeriesServiceStatisticsInputBuilder{
        crate::operation::get_time_series_service_statistics::builders::GetTimeSeriesServiceStatisticsInputBuilder::default()
    }
}

/// A builder for [`GetTimeSeriesServiceStatisticsInput`](crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetTimeSeriesServiceStatisticsInputBuilder {
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) group_arn: std::option::Option<std::string::String>,
    pub(crate) entity_selector_expression: std::option::Option<std::string::String>,
    pub(crate) period: std::option::Option<i32>,
    pub(crate) forecast_statistics: std::option::Option<bool>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl GetTimeSeriesServiceStatisticsInputBuilder {
    /// <p>The start of the time frame for which to aggregate statistics.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The start of the time frame for which to aggregate statistics.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The end of the time frame for which to aggregate statistics.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The end of the time frame for which to aggregate statistics.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The case-sensitive name of the group for which to pull statistics from.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The case-sensitive name of the group for which to pull statistics from.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the group for which to pull statistics from.</p>
    pub fn group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the group for which to pull statistics from.</p>
    pub fn set_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_arn = input;
        self
    }
    /// <p>A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. </p>
    pub fn entity_selector_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.entity_selector_expression = Some(input.into());
        self
    }
    /// <p>A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. </p>
    pub fn set_entity_selector_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.entity_selector_expression = input;
        self
    }
    /// <p>Aggregation period in seconds.</p>
    pub fn period(mut self, input: i32) -> Self {
        self.period = Some(input);
        self
    }
    /// <p>Aggregation period in seconds.</p>
    pub fn set_period(mut self, input: std::option::Option<i32>) -> Self {
        self.period = input;
        self
    }
    /// <p>The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.</p>
    pub fn forecast_statistics(mut self, input: bool) -> Self {
        self.forecast_statistics = Some(input);
        self
    }
    /// <p>The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.</p>
    pub fn set_forecast_statistics(mut self, input: std::option::Option<bool>) -> Self {
        self.forecast_statistics = input;
        self
    }
    /// <p>Pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetTimeSeriesServiceStatisticsInput`](crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsInput {
                start_time: self.start_time
                ,
                end_time: self.end_time
                ,
                group_name: self.group_name
                ,
                group_arn: self.group_arn
                ,
                entity_selector_expression: self.entity_selector_expression
                ,
                period: self.period
                ,
                forecast_statistics: self.forecast_statistics
                ,
                next_token: self.next_token
                ,
            }
        )
    }
}
