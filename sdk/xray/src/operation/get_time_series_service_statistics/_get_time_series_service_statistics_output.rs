// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetTimeSeriesServiceStatisticsOutput {
    /// <p>The collection of statistics.</p>
    pub time_series_service_statistics: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesServiceStatistics>>,
    /// <p>A flag indicating whether or not a group's filter expression has been consistent, or if a returned aggregation might show statistics from an older version of the group's filter expression.</p>
    pub contains_old_group_versions: bool,
    /// <p>Pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTimeSeriesServiceStatisticsOutput {
    /// <p>The collection of statistics.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.time_series_service_statistics.is_none()`.
    pub fn time_series_service_statistics(&self) -> &[crate::types::TimeSeriesServiceStatistics] {
        self.time_series_service_statistics.as_deref().unwrap_or_default()
    }
    /// <p>A flag indicating whether or not a group's filter expression has been consistent, or if a returned aggregation might show statistics from an older version of the group's filter expression.</p>
    pub fn contains_old_group_versions(&self) -> bool {
        self.contains_old_group_versions
    }
    /// <p>Pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetTimeSeriesServiceStatisticsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetTimeSeriesServiceStatisticsOutput {
    /// Creates a new builder-style object to manufacture [`GetTimeSeriesServiceStatisticsOutput`](crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsOutput).
    pub fn builder() -> crate::operation::get_time_series_service_statistics::builders::GetTimeSeriesServiceStatisticsOutputBuilder {
        crate::operation::get_time_series_service_statistics::builders::GetTimeSeriesServiceStatisticsOutputBuilder::default()
    }
}

/// A builder for [`GetTimeSeriesServiceStatisticsOutput`](crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetTimeSeriesServiceStatisticsOutputBuilder {
    pub(crate) time_series_service_statistics: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesServiceStatistics>>,
    pub(crate) contains_old_group_versions: ::std::option::Option<bool>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetTimeSeriesServiceStatisticsOutputBuilder {
    /// Appends an item to `time_series_service_statistics`.
    ///
    /// To override the contents of this collection use [`set_time_series_service_statistics`](Self::set_time_series_service_statistics).
    ///
    /// <p>The collection of statistics.</p>
    pub fn time_series_service_statistics(mut self, input: crate::types::TimeSeriesServiceStatistics) -> Self {
        let mut v = self.time_series_service_statistics.unwrap_or_default();
        v.push(input);
        self.time_series_service_statistics = ::std::option::Option::Some(v);
        self
    }
    /// <p>The collection of statistics.</p>
    pub fn set_time_series_service_statistics(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesServiceStatistics>>,
    ) -> Self {
        self.time_series_service_statistics = input;
        self
    }
    /// <p>The collection of statistics.</p>
    pub fn get_time_series_service_statistics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::TimeSeriesServiceStatistics>> {
        &self.time_series_service_statistics
    }
    /// <p>A flag indicating whether or not a group's filter expression has been consistent, or if a returned aggregation might show statistics from an older version of the group's filter expression.</p>
    pub fn contains_old_group_versions(mut self, input: bool) -> Self {
        self.contains_old_group_versions = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag indicating whether or not a group's filter expression has been consistent, or if a returned aggregation might show statistics from an older version of the group's filter expression.</p>
    pub fn set_contains_old_group_versions(mut self, input: ::std::option::Option<bool>) -> Self {
        self.contains_old_group_versions = input;
        self
    }
    /// <p>A flag indicating whether or not a group's filter expression has been consistent, or if a returned aggregation might show statistics from an older version of the group's filter expression.</p>
    pub fn get_contains_old_group_versions(&self) -> &::std::option::Option<bool> {
        &self.contains_old_group_versions
    }
    /// <p>Pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetTimeSeriesServiceStatisticsOutput`](crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsOutput).
    pub fn build(self) -> crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsOutput {
        crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsOutput {
            time_series_service_statistics: self.time_series_service_statistics,
            contains_old_group_versions: self.contains_old_group_versions.unwrap_or_default(),
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
