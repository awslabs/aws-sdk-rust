// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_time_series_service_statistics::_get_time_series_service_statistics_output::GetTimeSeriesServiceStatisticsOutputBuilder;

pub use crate::operation::get_time_series_service_statistics::_get_time_series_service_statistics_input::GetTimeSeriesServiceStatisticsInputBuilder;

/// Fluent builder constructing a request to `GetTimeSeriesServiceStatistics`.
///
/// <p>Get an aggregation of service statistics defined by a specific time range.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetTimeSeriesServiceStatisticsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::get_time_series_service_statistics::builders::GetTimeSeriesServiceStatisticsInputBuilder
            }
impl GetTimeSeriesServiceStatisticsFluentBuilder {
    /// Creates a new `GetTimeSeriesServiceStatistics`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatistics, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsOutput, aws_smithy_http::result::SdkError<crate::operation::get_time_series_service_statistics::GetTimeSeriesServiceStatisticsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_time_series_service_statistics::paginator::GetTimeSeriesServiceStatisticsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::get_time_series_service_statistics::paginator::GetTimeSeriesServiceStatisticsPaginator{
        crate::operation::get_time_series_service_statistics::paginator::GetTimeSeriesServiceStatisticsPaginator::new(self.handle, self.inner)
    }
    /// <p>The start of the time frame for which to aggregate statistics.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.start_time(input);
        self
    }
    /// <p>The start of the time frame for which to aggregate statistics.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_start_time(input);
        self
    }
    /// <p>The end of the time frame for which to aggregate statistics.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.end_time(input);
        self
    }
    /// <p>The end of the time frame for which to aggregate statistics.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.inner = self.inner.set_end_time(input);
        self
    }
    /// <p>The case-sensitive name of the group for which to pull statistics from.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.group_name(input.into());
        self
    }
    /// <p>The case-sensitive name of the group for which to pull statistics from.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_group_name(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the group for which to pull statistics from.</p>
    pub fn group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.group_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the group for which to pull statistics from.</p>
    pub fn set_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_group_arn(input);
        self
    }
    /// <p>A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. </p>
    pub fn entity_selector_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.entity_selector_expression(input.into());
        self
    }
    /// <p>A filter expression defining entities that will be aggregated for statistics. Supports ID, service, and edge functions. If no selector expression is specified, edge statistics are returned. </p>
    pub fn set_entity_selector_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_entity_selector_expression(input);
        self
    }
    /// <p>Aggregation period in seconds.</p>
    pub fn period(mut self, input: i32) -> Self {
        self.inner = self.inner.period(input);
        self
    }
    /// <p>Aggregation period in seconds.</p>
    pub fn set_period(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_period(input);
        self
    }
    /// <p>The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.</p>
    pub fn forecast_statistics(mut self, input: bool) -> Self {
        self.inner = self.inner.forecast_statistics(input);
        self
    }
    /// <p>The forecasted high and low fault count values. Forecast enabled requests require the EntitySelectorExpression ID be provided.</p>
    pub fn set_forecast_statistics(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_forecast_statistics(input);
        self
    }
    /// <p>Pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>Pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
}
