// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetInsightEventsOutput {
    /// <p>A detailed description of the event. This includes the time of the event, client and root cause impact statistics, and the top anomalous service at the time of the event.</p>
    pub insight_events: ::std::option::Option<::std::vec::Vec<crate::types::InsightEvent>>,
    /// <p>Use this token to retrieve the next page of insight events.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetInsightEventsOutput {
    /// <p>A detailed description of the event. This includes the time of the event, client and root cause impact statistics, and the top anomalous service at the time of the event.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.insight_events.is_none()`.
    pub fn insight_events(&self) -> &[crate::types::InsightEvent] {
        self.insight_events.as_deref().unwrap_or_default()
    }
    /// <p>Use this token to retrieve the next page of insight events.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetInsightEventsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInsightEventsOutput {
    /// Creates a new builder-style object to manufacture [`GetInsightEventsOutput`](crate::operation::get_insight_events::GetInsightEventsOutput).
    pub fn builder() -> crate::operation::get_insight_events::builders::GetInsightEventsOutputBuilder {
        crate::operation::get_insight_events::builders::GetInsightEventsOutputBuilder::default()
    }
}

/// A builder for [`GetInsightEventsOutput`](crate::operation::get_insight_events::GetInsightEventsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetInsightEventsOutputBuilder {
    pub(crate) insight_events: ::std::option::Option<::std::vec::Vec<crate::types::InsightEvent>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetInsightEventsOutputBuilder {
    /// Appends an item to `insight_events`.
    ///
    /// To override the contents of this collection use [`set_insight_events`](Self::set_insight_events).
    ///
    /// <p>A detailed description of the event. This includes the time of the event, client and root cause impact statistics, and the top anomalous service at the time of the event.</p>
    pub fn insight_events(mut self, input: crate::types::InsightEvent) -> Self {
        let mut v = self.insight_events.unwrap_or_default();
        v.push(input);
        self.insight_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>A detailed description of the event. This includes the time of the event, client and root cause impact statistics, and the top anomalous service at the time of the event.</p>
    pub fn set_insight_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InsightEvent>>) -> Self {
        self.insight_events = input;
        self
    }
    /// <p>A detailed description of the event. This includes the time of the event, client and root cause impact statistics, and the top anomalous service at the time of the event.</p>
    pub fn get_insight_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InsightEvent>> {
        &self.insight_events
    }
    /// <p>Use this token to retrieve the next page of insight events.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Use this token to retrieve the next page of insight events.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Use this token to retrieve the next page of insight events.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetInsightEventsOutput`](crate::operation::get_insight_events::GetInsightEventsOutput).
    pub fn build(self) -> crate::operation::get_insight_events::GetInsightEventsOutput {
        crate::operation::get_insight_events::GetInsightEventsOutput {
            insight_events: self.insight_events,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
