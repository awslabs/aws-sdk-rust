// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetServiceGraphInput {
    /// <p>The start of the time frame for which to generate a graph.</p>
    #[doc(hidden)]
    pub start_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The end of the timeframe for which to generate a graph.</p>
    #[doc(hidden)]
    pub end_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of a group based on which you want to generate a graph.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of a group based on which you want to generate a graph.</p>
    #[doc(hidden)]
    pub group_arn: std::option::Option<std::string::String>,
    /// <p>Pagination token.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
}
impl GetServiceGraphInput {
    /// <p>The start of the time frame for which to generate a graph.</p>
    pub fn start_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_time.as_ref()
    }
    /// <p>The end of the timeframe for which to generate a graph.</p>
    pub fn end_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.end_time.as_ref()
    }
    /// <p>The name of a group based on which you want to generate a graph.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of a group based on which you want to generate a graph.</p>
    pub fn group_arn(&self) -> std::option::Option<&str> {
        self.group_arn.as_deref()
    }
    /// <p>Pagination token.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl GetServiceGraphInput {
    /// Creates a new builder-style object to manufacture [`GetServiceGraphInput`](crate::operation::get_service_graph::GetServiceGraphInput).
    pub fn builder() -> crate::operation::get_service_graph::builders::GetServiceGraphInputBuilder {
        crate::operation::get_service_graph::builders::GetServiceGraphInputBuilder::default()
    }
}

/// A builder for [`GetServiceGraphInput`](crate::operation::get_service_graph::GetServiceGraphInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetServiceGraphInputBuilder {
    pub(crate) start_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) end_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) group_arn: std::option::Option<std::string::String>,
    pub(crate) next_token: std::option::Option<std::string::String>,
}
impl GetServiceGraphInputBuilder {
    /// <p>The start of the time frame for which to generate a graph.</p>
    pub fn start_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_time = Some(input);
        self
    }
    /// <p>The start of the time frame for which to generate a graph.</p>
    pub fn set_start_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_time = input;
        self
    }
    /// <p>The end of the timeframe for which to generate a graph.</p>
    pub fn end_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.end_time = Some(input);
        self
    }
    /// <p>The end of the timeframe for which to generate a graph.</p>
    pub fn set_end_time(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.end_time = input;
        self
    }
    /// <p>The name of a group based on which you want to generate a graph.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The name of a group based on which you want to generate a graph.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a group based on which you want to generate a graph.</p>
    pub fn group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a group based on which you want to generate a graph.</p>
    pub fn set_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_arn = input;
        self
    }
    /// <p>Pagination token.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>Pagination token.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Consumes the builder and constructs a [`GetServiceGraphInput`](crate::operation::get_service_graph::GetServiceGraphInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_service_graph::GetServiceGraphInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_service_graph::GetServiceGraphInput {
            start_time: self.start_time,
            end_time: self.end_time,
            group_name: self.group_name,
            group_arn: self.group_arn,
            next_token: self.next_token,
        })
    }
}
