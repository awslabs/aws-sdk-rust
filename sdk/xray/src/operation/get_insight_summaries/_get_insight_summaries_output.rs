// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetInsightSummariesOutput {
    /// <p>The summary of each insight within the group matching the provided filters. The summary contains the InsightID, start and end time, the root cause service, the root cause and client impact statistics, the top anomalous services, and the status of the insight.</p>
    pub insight_summaries: ::std::option::Option<::std::vec::Vec<crate::types::InsightSummary>>,
    /// <p>Pagination token.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetInsightSummariesOutput {
    /// <p>The summary of each insight within the group matching the provided filters. The summary contains the InsightID, start and end time, the root cause service, the root cause and client impact statistics, the top anomalous services, and the status of the insight.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.insight_summaries.is_none()`.
    pub fn insight_summaries(&self) -> &[crate::types::InsightSummary] {
        self.insight_summaries.as_deref().unwrap_or_default()
    }
    /// <p>Pagination token.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetInsightSummariesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInsightSummariesOutput {
    /// Creates a new builder-style object to manufacture [`GetInsightSummariesOutput`](crate::operation::get_insight_summaries::GetInsightSummariesOutput).
    pub fn builder() -> crate::operation::get_insight_summaries::builders::GetInsightSummariesOutputBuilder {
        crate::operation::get_insight_summaries::builders::GetInsightSummariesOutputBuilder::default()
    }
}

/// A builder for [`GetInsightSummariesOutput`](crate::operation::get_insight_summaries::GetInsightSummariesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetInsightSummariesOutputBuilder {
    pub(crate) insight_summaries: ::std::option::Option<::std::vec::Vec<crate::types::InsightSummary>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetInsightSummariesOutputBuilder {
    /// Appends an item to `insight_summaries`.
    ///
    /// To override the contents of this collection use [`set_insight_summaries`](Self::set_insight_summaries).
    ///
    /// <p>The summary of each insight within the group matching the provided filters. The summary contains the InsightID, start and end time, the root cause service, the root cause and client impact statistics, the top anomalous services, and the status of the insight.</p>
    pub fn insight_summaries(mut self, input: crate::types::InsightSummary) -> Self {
        let mut v = self.insight_summaries.unwrap_or_default();
        v.push(input);
        self.insight_summaries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The summary of each insight within the group matching the provided filters. The summary contains the InsightID, start and end time, the root cause service, the root cause and client impact statistics, the top anomalous services, and the status of the insight.</p>
    pub fn set_insight_summaries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::InsightSummary>>) -> Self {
        self.insight_summaries = input;
        self
    }
    /// <p>The summary of each insight within the group matching the provided filters. The summary contains the InsightID, start and end time, the root cause service, the root cause and client impact statistics, the top anomalous services, and the status of the insight.</p>
    pub fn get_insight_summaries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::InsightSummary>> {
        &self.insight_summaries
    }
    /// <p>Pagination token.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Pagination token.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Pagination token.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetInsightSummariesOutput`](crate::operation::get_insight_summaries::GetInsightSummariesOutput).
    pub fn build(self) -> crate::operation::get_insight_summaries::GetInsightSummariesOutput {
        crate::operation::get_insight_summaries::GetInsightSummariesOutput {
            insight_summaries: self.insight_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
