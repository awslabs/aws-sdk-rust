// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_trace_summary<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::TraceSummary>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::TraceSummaryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Id" => {
                                builder = builder.set_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Duration" => {
                                builder = builder.set_duration(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "ResponseTime" => {
                                builder = builder.set_response_time(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|v| v.to_f64_lossy()),
                                );
                            }
                            "HasFault" => {
                                builder = builder.set_has_fault(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "HasError" => {
                                builder = builder.set_has_error(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "HasThrottle" => {
                                builder = builder.set_has_throttle(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "IsPartial" => {
                                builder = builder.set_is_partial(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "Http" => {
                                builder = builder
                                    .set_http(crate::protocol_serde::shape_http::de_http(tokens)?);
                            }
                            "Annotations" => {
                                builder = builder.set_annotations(
                                    crate::protocol_serde::shape_annotations::de_annotations(
                                        tokens,
                                    )?,
                                );
                            }
                            "Users" => {
                                builder = builder.set_users(
                                    crate::protocol_serde::shape_trace_users::de_trace_users(
                                        tokens,
                                    )?,
                                );
                            }
                            "ServiceIds" => {
                                builder = builder.set_service_ids(
                                    crate::protocol_serde::shape_service_ids::de_service_ids(
                                        tokens,
                                    )?,
                                );
                            }
                            "ResourceARNs" => {
                                builder = builder.set_resource_ar_ns(
                                    crate::protocol_serde::shape_trace_resource_ar_ns::de_trace_resource_ar_ns(tokens)?
                                );
                            }
                            "InstanceIds" => {
                                builder = builder.set_instance_ids(
                                    crate::protocol_serde::shape_trace_instance_ids::de_trace_instance_ids(tokens)?
                                );
                            }
                            "AvailabilityZones" => {
                                builder = builder.set_availability_zones(
                                    crate::protocol_serde::shape_trace_availability_zones::de_trace_availability_zones(tokens)?
                                );
                            }
                            "EntryPoint" => {
                                builder = builder.set_entry_point(
                                    crate::protocol_serde::shape_service_id::de_service_id(tokens)?,
                                );
                            }
                            "FaultRootCauses" => {
                                builder = builder.set_fault_root_causes(
                                    crate::protocol_serde::shape_fault_root_causes::de_fault_root_causes(tokens)?
                                );
                            }
                            "ErrorRootCauses" => {
                                builder = builder.set_error_root_causes(
                                    crate::protocol_serde::shape_error_root_causes::de_error_root_causes(tokens)?
                                );
                            }
                            "ResponseTimeRootCauses" => {
                                builder = builder.set_response_time_root_causes(
                                    crate::protocol_serde::shape_response_time_root_causes::de_response_time_root_causes(tokens)?
                                );
                            }
                            "Revision" => {
                                builder = builder.set_revision(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "MatchedEventTime" => {
                                builder = builder.set_matched_event_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
