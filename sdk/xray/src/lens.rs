// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_batch_get_traces_output_next_token(
    input: &crate::output::BatchGetTracesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_groups_output_next_token(
    input: &crate::output::GetGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_insight_events_output_next_token(
    input: &crate::output::GetInsightEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_insight_summaries_output_next_token(
    input: &crate::output::GetInsightSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_sampling_rules_output_next_token(
    input: &crate::output::GetSamplingRulesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_sampling_statistic_summaries_output_next_token(
    input: &crate::output::GetSamplingStatisticSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_service_graph_output_next_token(
    input: &crate::output::GetServiceGraphOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_time_series_service_statistics_output_next_token(
    input: &crate::output::GetTimeSeriesServiceStatisticsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_trace_graph_output_next_token(
    input: &crate::output::GetTraceGraphOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_get_trace_summaries_output_next_token(
    input: &crate::output::GetTraceSummariesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_batch_get_traces_output_traces(
    input: crate::output::BatchGetTracesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Trace>> {
    let input = match input.traces {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_groups_output_groups(
    input: crate::output::GetGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GroupSummary>> {
    let input = match input.groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_sampling_rules_output_sampling_rule_records(
    input: crate::output::GetSamplingRulesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SamplingRuleRecord>> {
    let input = match input.sampling_rule_records {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_sampling_statistic_summaries_output_sampling_statistic_summaries(
    input: crate::output::GetSamplingStatisticSummariesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::SamplingStatisticSummary>> {
    let input = match input.sampling_statistic_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_service_graph_output_services(
    input: crate::output::GetServiceGraphOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Service>> {
    let input = match input.services {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_time_series_service_statistics_output_time_series_service_statistics(
    input: crate::output::GetTimeSeriesServiceStatisticsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TimeSeriesServiceStatistics>> {
    let input = match input.time_series_service_statistics {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_trace_graph_output_services(
    input: crate::output::GetTraceGraphOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Service>> {
    let input = match input.services {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_get_trace_summaries_output_trace_summaries(
    input: crate::output::GetTraceSummariesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TraceSummary>> {
    let input = match input.trace_summaries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
