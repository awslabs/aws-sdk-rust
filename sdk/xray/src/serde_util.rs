// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn sampling_rule_correct_errors(mut builder: crate::types::builders::SamplingRuleBuilder) -> crate::types::builders::SamplingRuleBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.fixed_rate.is_none() {
        builder.fixed_rate = Some(Default::default())
    }
    if builder.reservoir_size.is_none() {
        builder.reservoir_size = Some(Default::default())
    }
    if builder.service_name.is_none() {
        builder.service_name = Some(Default::default())
    }
    if builder.service_type.is_none() {
        builder.service_type = Some(Default::default())
    }
    if builder.host.is_none() {
        builder.host = Some(Default::default())
    }
    if builder.http_method.is_none() {
        builder.http_method = Some(Default::default())
    }
    if builder.url_path.is_none() {
        builder.url_path = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
