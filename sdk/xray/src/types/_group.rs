// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details and metadata for a group.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Group {
    /// <p>The unique case-sensitive name of the group.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the group generated based on the GroupName.</p>
    #[doc(hidden)]
    pub group_arn: std::option::Option<std::string::String>,
    /// <p>The filter expression defining the parameters to include traces.</p>
    #[doc(hidden)]
    pub filter_expression: std::option::Option<std::string::String>,
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li> <p>The InsightsEnabled boolean can be set to true to enable insights for the group or false to disable insights for the group.</p> </li>
    /// <li> <p>The NotificationsEnabled boolean can be set to true to enable insights notifications through Amazon EventBridge for the group.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub insights_configuration: std::option::Option<crate::types::InsightsConfiguration>,
}
impl Group {
    /// <p>The unique case-sensitive name of the group.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the group generated based on the GroupName.</p>
    pub fn group_arn(&self) -> std::option::Option<&str> {
        self.group_arn.as_deref()
    }
    /// <p>The filter expression defining the parameters to include traces.</p>
    pub fn filter_expression(&self) -> std::option::Option<&str> {
        self.filter_expression.as_deref()
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li> <p>The InsightsEnabled boolean can be set to true to enable insights for the group or false to disable insights for the group.</p> </li>
    /// <li> <p>The NotificationsEnabled boolean can be set to true to enable insights notifications through Amazon EventBridge for the group.</p> </li>
    /// </ul>
    pub fn insights_configuration(
        &self,
    ) -> std::option::Option<&crate::types::InsightsConfiguration> {
        self.insights_configuration.as_ref()
    }
}
impl Group {
    /// Creates a new builder-style object to manufacture [`Group`](crate::types::Group).
    pub fn builder() -> crate::types::builders::GroupBuilder {
        crate::types::builders::GroupBuilder::default()
    }
}

/// A builder for [`Group`](crate::types::Group).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GroupBuilder {
    pub(crate) group_name: std::option::Option<std::string::String>,
    pub(crate) group_arn: std::option::Option<std::string::String>,
    pub(crate) filter_expression: std::option::Option<std::string::String>,
    pub(crate) insights_configuration: std::option::Option<crate::types::InsightsConfiguration>,
}
impl GroupBuilder {
    /// <p>The unique case-sensitive name of the group.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The unique case-sensitive name of the group.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the group generated based on the GroupName.</p>
    pub fn group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the group generated based on the GroupName.</p>
    pub fn set_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_arn = input;
        self
    }
    /// <p>The filter expression defining the parameters to include traces.</p>
    pub fn filter_expression(mut self, input: impl Into<std::string::String>) -> Self {
        self.filter_expression = Some(input.into());
        self
    }
    /// <p>The filter expression defining the parameters to include traces.</p>
    pub fn set_filter_expression(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.filter_expression = input;
        self
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li> <p>The InsightsEnabled boolean can be set to true to enable insights for the group or false to disable insights for the group.</p> </li>
    /// <li> <p>The NotificationsEnabled boolean can be set to true to enable insights notifications through Amazon EventBridge for the group.</p> </li>
    /// </ul>
    pub fn insights_configuration(mut self, input: crate::types::InsightsConfiguration) -> Self {
        self.insights_configuration = Some(input);
        self
    }
    /// <p>The structure containing configurations related to insights.</p>
    /// <ul>
    /// <li> <p>The InsightsEnabled boolean can be set to true to enable insights for the group or false to disable insights for the group.</p> </li>
    /// <li> <p>The NotificationsEnabled boolean can be set to true to enable insights notifications through Amazon EventBridge for the group.</p> </li>
    /// </ul>
    pub fn set_insights_configuration(
        mut self,
        input: std::option::Option<crate::types::InsightsConfiguration>,
    ) -> Self {
        self.insights_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`Group`](crate::types::Group).
    pub fn build(self) -> crate::types::Group {
        crate::types::Group {
            group_name: self.group_name,
            group_arn: self.group_arn,
            filter_expression: self.filter_expression,
            insights_configuration: self.insights_configuration,
        }
    }
}
