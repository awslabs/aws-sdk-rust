// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of TimeSeriesStatistic structures.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TimeSeriesServiceStatistics {
    /// <p>Timestamp of the window for which statistics are aggregated.</p>
    pub timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Response statistics for an edge.</p>
    pub edge_summary_statistics: ::std::option::Option<crate::types::EdgeStatistics>,
    /// <p>Response statistics for a service.</p>
    pub service_summary_statistics: ::std::option::Option<crate::types::ServiceStatistics>,
    /// <p>The forecasted high and low fault count values.</p>
    pub service_forecast_statistics: ::std::option::Option<crate::types::ForecastStatistics>,
    /// <p>The response time histogram for the selected entities.</p>
    pub response_time_histogram: ::std::option::Option<::std::vec::Vec<crate::types::HistogramEntry>>,
}
impl TimeSeriesServiceStatistics {
    /// <p>Timestamp of the window for which statistics are aggregated.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
    /// <p>Response statistics for an edge.</p>
    pub fn edge_summary_statistics(&self) -> ::std::option::Option<&crate::types::EdgeStatistics> {
        self.edge_summary_statistics.as_ref()
    }
    /// <p>Response statistics for a service.</p>
    pub fn service_summary_statistics(&self) -> ::std::option::Option<&crate::types::ServiceStatistics> {
        self.service_summary_statistics.as_ref()
    }
    /// <p>The forecasted high and low fault count values.</p>
    pub fn service_forecast_statistics(&self) -> ::std::option::Option<&crate::types::ForecastStatistics> {
        self.service_forecast_statistics.as_ref()
    }
    /// <p>The response time histogram for the selected entities.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.response_time_histogram.is_none()`.
    pub fn response_time_histogram(&self) -> &[crate::types::HistogramEntry] {
        self.response_time_histogram.as_deref().unwrap_or_default()
    }
}
impl TimeSeriesServiceStatistics {
    /// Creates a new builder-style object to manufacture [`TimeSeriesServiceStatistics`](crate::types::TimeSeriesServiceStatistics).
    pub fn builder() -> crate::types::builders::TimeSeriesServiceStatisticsBuilder {
        crate::types::builders::TimeSeriesServiceStatisticsBuilder::default()
    }
}

/// A builder for [`TimeSeriesServiceStatistics`](crate::types::TimeSeriesServiceStatistics).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TimeSeriesServiceStatisticsBuilder {
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) edge_summary_statistics: ::std::option::Option<crate::types::EdgeStatistics>,
    pub(crate) service_summary_statistics: ::std::option::Option<crate::types::ServiceStatistics>,
    pub(crate) service_forecast_statistics: ::std::option::Option<crate::types::ForecastStatistics>,
    pub(crate) response_time_histogram: ::std::option::Option<::std::vec::Vec<crate::types::HistogramEntry>>,
}
impl TimeSeriesServiceStatisticsBuilder {
    /// <p>Timestamp of the window for which statistics are aggregated.</p>
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp of the window for which statistics are aggregated.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>Timestamp of the window for which statistics are aggregated.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>Response statistics for an edge.</p>
    pub fn edge_summary_statistics(mut self, input: crate::types::EdgeStatistics) -> Self {
        self.edge_summary_statistics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response statistics for an edge.</p>
    pub fn set_edge_summary_statistics(mut self, input: ::std::option::Option<crate::types::EdgeStatistics>) -> Self {
        self.edge_summary_statistics = input;
        self
    }
    /// <p>Response statistics for an edge.</p>
    pub fn get_edge_summary_statistics(&self) -> &::std::option::Option<crate::types::EdgeStatistics> {
        &self.edge_summary_statistics
    }
    /// <p>Response statistics for a service.</p>
    pub fn service_summary_statistics(mut self, input: crate::types::ServiceStatistics) -> Self {
        self.service_summary_statistics = ::std::option::Option::Some(input);
        self
    }
    /// <p>Response statistics for a service.</p>
    pub fn set_service_summary_statistics(mut self, input: ::std::option::Option<crate::types::ServiceStatistics>) -> Self {
        self.service_summary_statistics = input;
        self
    }
    /// <p>Response statistics for a service.</p>
    pub fn get_service_summary_statistics(&self) -> &::std::option::Option<crate::types::ServiceStatistics> {
        &self.service_summary_statistics
    }
    /// <p>The forecasted high and low fault count values.</p>
    pub fn service_forecast_statistics(mut self, input: crate::types::ForecastStatistics) -> Self {
        self.service_forecast_statistics = ::std::option::Option::Some(input);
        self
    }
    /// <p>The forecasted high and low fault count values.</p>
    pub fn set_service_forecast_statistics(mut self, input: ::std::option::Option<crate::types::ForecastStatistics>) -> Self {
        self.service_forecast_statistics = input;
        self
    }
    /// <p>The forecasted high and low fault count values.</p>
    pub fn get_service_forecast_statistics(&self) -> &::std::option::Option<crate::types::ForecastStatistics> {
        &self.service_forecast_statistics
    }
    /// Appends an item to `response_time_histogram`.
    ///
    /// To override the contents of this collection use [`set_response_time_histogram`](Self::set_response_time_histogram).
    ///
    /// <p>The response time histogram for the selected entities.</p>
    pub fn response_time_histogram(mut self, input: crate::types::HistogramEntry) -> Self {
        let mut v = self.response_time_histogram.unwrap_or_default();
        v.push(input);
        self.response_time_histogram = ::std::option::Option::Some(v);
        self
    }
    /// <p>The response time histogram for the selected entities.</p>
    pub fn set_response_time_histogram(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::HistogramEntry>>) -> Self {
        self.response_time_histogram = input;
        self
    }
    /// <p>The response time histogram for the selected entities.</p>
    pub fn get_response_time_histogram(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::HistogramEntry>> {
        &self.response_time_histogram
    }
    /// Consumes the builder and constructs a [`TimeSeriesServiceStatistics`](crate::types::TimeSeriesServiceStatistics).
    pub fn build(self) -> crate::types::TimeSeriesServiceStatistics {
        crate::types::TimeSeriesServiceStatistics {
            timestamp: self.timestamp,
            edge_summary_statistics: self.edge_summary_statistics,
            service_summary_statistics: self.service_summary_statistics,
            service_forecast_statistics: self.service_forecast_statistics,
            response_time_histogram: self.response_time_histogram,
        }
    }
}
