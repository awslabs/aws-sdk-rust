// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A collection of fields identifying the services in a trace summary fault.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FaultRootCauseService {
    /// <p>The service name.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A collection of associated service names.</p>
    pub names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The type associated to the service.</p>
    pub r#type: ::std::option::Option<::std::string::String>,
    /// <p>The account ID associated to the service.</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The path of root cause entities found on the service. </p>
    pub entity_path: ::std::option::Option<::std::vec::Vec<crate::types::FaultRootCauseEntity>>,
    /// <p>A Boolean value indicating if the service is inferred from the trace.</p>
    pub inferred: ::std::option::Option<bool>,
}
impl FaultRootCauseService {
    /// <p>The service name.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A collection of associated service names.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.names.is_none()`.
    pub fn names(&self) -> &[::std::string::String] {
        self.names.as_deref().unwrap_or_default()
    }
    /// <p>The type associated to the service.</p>
    pub fn r#type(&self) -> ::std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The account ID associated to the service.</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The path of root cause entities found on the service. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entity_path.is_none()`.
    pub fn entity_path(&self) -> &[crate::types::FaultRootCauseEntity] {
        self.entity_path.as_deref().unwrap_or_default()
    }
    /// <p>A Boolean value indicating if the service is inferred from the trace.</p>
    pub fn inferred(&self) -> ::std::option::Option<bool> {
        self.inferred
    }
}
impl FaultRootCauseService {
    /// Creates a new builder-style object to manufacture [`FaultRootCauseService`](crate::types::FaultRootCauseService).
    pub fn builder() -> crate::types::builders::FaultRootCauseServiceBuilder {
        crate::types::builders::FaultRootCauseServiceBuilder::default()
    }
}

/// A builder for [`FaultRootCauseService`](crate::types::FaultRootCauseService).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FaultRootCauseServiceBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<::std::string::String>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) entity_path: ::std::option::Option<::std::vec::Vec<crate::types::FaultRootCauseEntity>>,
    pub(crate) inferred: ::std::option::Option<bool>,
}
impl FaultRootCauseServiceBuilder {
    /// <p>The service name.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The service name.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The service name.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// Appends an item to `names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p>A collection of associated service names.</p>
    pub fn names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.names.unwrap_or_default();
        v.push(input.into());
        self.names = ::std::option::Option::Some(v);
        self
    }
    /// <p>A collection of associated service names.</p>
    pub fn set_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.names = input;
        self
    }
    /// <p>A collection of associated service names.</p>
    pub fn get_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.names
    }
    /// <p>The type associated to the service.</p>
    pub fn r#type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.r#type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type associated to the service.</p>
    pub fn set_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type associated to the service.</p>
    pub fn get_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.r#type
    }
    /// <p>The account ID associated to the service.</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The account ID associated to the service.</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The account ID associated to the service.</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// Appends an item to `entity_path`.
    ///
    /// To override the contents of this collection use [`set_entity_path`](Self::set_entity_path).
    ///
    /// <p>The path of root cause entities found on the service. </p>
    pub fn entity_path(mut self, input: crate::types::FaultRootCauseEntity) -> Self {
        let mut v = self.entity_path.unwrap_or_default();
        v.push(input);
        self.entity_path = ::std::option::Option::Some(v);
        self
    }
    /// <p>The path of root cause entities found on the service. </p>
    pub fn set_entity_path(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FaultRootCauseEntity>>) -> Self {
        self.entity_path = input;
        self
    }
    /// <p>The path of root cause entities found on the service. </p>
    pub fn get_entity_path(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FaultRootCauseEntity>> {
        &self.entity_path
    }
    /// <p>A Boolean value indicating if the service is inferred from the trace.</p>
    pub fn inferred(mut self, input: bool) -> Self {
        self.inferred = ::std::option::Option::Some(input);
        self
    }
    /// <p>A Boolean value indicating if the service is inferred from the trace.</p>
    pub fn set_inferred(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inferred = input;
        self
    }
    /// <p>A Boolean value indicating if the service is inferred from the trace.</p>
    pub fn get_inferred(&self) -> &::std::option::Option<bool> {
        &self.inferred
    }
    /// Consumes the builder and constructs a [`FaultRootCauseService`](crate::types::FaultRootCauseService).
    pub fn build(self) -> crate::types::FaultRootCauseService {
        crate::types::FaultRootCauseService {
            name: self.name,
            names: self.names,
            r#type: self.r#type,
            account_id: self.account_id,
            entity_path: self.entity_path,
            inferred: self.inferred,
        }
    }
}
