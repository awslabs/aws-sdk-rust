// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The root cause information for a trace summary fault.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FaultRootCause {
    /// <p>A list of corresponding services. A service identifies a segment and it contains a name, account ID, type, and inferred flag.</p>
    pub services: ::std::option::Option<::std::vec::Vec<crate::types::FaultRootCauseService>>,
    /// <p>A flag that denotes that the root cause impacts the trace client.</p>
    pub client_impacting: ::std::option::Option<bool>,
}
impl FaultRootCause {
    /// <p>A list of corresponding services. A service identifies a segment and it contains a name, account ID, type, and inferred flag.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.services.is_none()`.
    pub fn services(&self) -> &[crate::types::FaultRootCauseService] {
        self.services.as_deref().unwrap_or_default()
    }
    /// <p>A flag that denotes that the root cause impacts the trace client.</p>
    pub fn client_impacting(&self) -> ::std::option::Option<bool> {
        self.client_impacting
    }
}
impl FaultRootCause {
    /// Creates a new builder-style object to manufacture [`FaultRootCause`](crate::types::FaultRootCause).
    pub fn builder() -> crate::types::builders::FaultRootCauseBuilder {
        crate::types::builders::FaultRootCauseBuilder::default()
    }
}

/// A builder for [`FaultRootCause`](crate::types::FaultRootCause).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FaultRootCauseBuilder {
    pub(crate) services: ::std::option::Option<::std::vec::Vec<crate::types::FaultRootCauseService>>,
    pub(crate) client_impacting: ::std::option::Option<bool>,
}
impl FaultRootCauseBuilder {
    /// Appends an item to `services`.
    ///
    /// To override the contents of this collection use [`set_services`](Self::set_services).
    ///
    /// <p>A list of corresponding services. A service identifies a segment and it contains a name, account ID, type, and inferred flag.</p>
    pub fn services(mut self, input: crate::types::FaultRootCauseService) -> Self {
        let mut v = self.services.unwrap_or_default();
        v.push(input);
        self.services = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of corresponding services. A service identifies a segment and it contains a name, account ID, type, and inferred flag.</p>
    pub fn set_services(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FaultRootCauseService>>) -> Self {
        self.services = input;
        self
    }
    /// <p>A list of corresponding services. A service identifies a segment and it contains a name, account ID, type, and inferred flag.</p>
    pub fn get_services(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FaultRootCauseService>> {
        &self.services
    }
    /// <p>A flag that denotes that the root cause impacts the trace client.</p>
    pub fn client_impacting(mut self, input: bool) -> Self {
        self.client_impacting = ::std::option::Option::Some(input);
        self
    }
    /// <p>A flag that denotes that the root cause impacts the trace client.</p>
    pub fn set_client_impacting(mut self, input: ::std::option::Option<bool>) -> Self {
        self.client_impacting = input;
        self
    }
    /// <p>A flag that denotes that the root cause impacts the trace client.</p>
    pub fn get_client_impacting(&self) -> &::std::option::Option<bool> {
        &self.client_impacting
    }
    /// Consumes the builder and constructs a [`FaultRootCause`](crate::types::FaultRootCause).
    pub fn build(self) -> crate::types::FaultRootCause {
        crate::types::FaultRootCause {
            services: self.services,
            client_impacting: self.client_impacting,
        }
    }
}
