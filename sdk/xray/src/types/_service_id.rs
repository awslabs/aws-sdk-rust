// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p></p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ServiceId {
    /// <p></p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub names: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p></p>
    #[doc(hidden)]
    pub account_id: std::option::Option<std::string::String>,
    /// <p></p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl ServiceId {
    /// <p></p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p></p>
    pub fn names(&self) -> std::option::Option<&[std::string::String]> {
        self.names.as_deref()
    }
    /// <p></p>
    pub fn account_id(&self) -> std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p></p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl ServiceId {
    /// Creates a new builder-style object to manufacture [`ServiceId`](crate::types::ServiceId).
    pub fn builder() -> crate::types::builders::ServiceIdBuilder {
        crate::types::builders::ServiceIdBuilder::default()
    }
}

/// A builder for [`ServiceId`](crate::types::ServiceId).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ServiceIdBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) names: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) account_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl ServiceIdBuilder {
    /// <p></p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `names`.
    ///
    /// To override the contents of this collection use [`set_names`](Self::set_names).
    ///
    /// <p></p>
    pub fn names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.names.unwrap_or_default();
        v.push(input.into());
        self.names = Some(v);
        self
    }
    /// <p></p>
    pub fn set_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.names = input;
        self
    }
    /// <p></p>
    pub fn account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.account_id = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_account_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p></p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p></p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`ServiceId`](crate::types::ServiceId).
    pub fn build(self) -> crate::types::ServiceId {
        crate::types::ServiceId {
            name: self.name,
            names: self.names,
            account_id: self.account_id,
            r#type: self.r#type,
        }
    }
}
