// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The predicted high and low fault count. This is used to determine if a service has become anomalous and if an insight should be created.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ForecastStatistics {
    /// <p>The upper limit of fault counts for a service.</p>
    #[doc(hidden)]
    pub fault_count_high: std::option::Option<i64>,
    /// <p>The lower limit of fault counts for a service.</p>
    #[doc(hidden)]
    pub fault_count_low: std::option::Option<i64>,
}
impl ForecastStatistics {
    /// <p>The upper limit of fault counts for a service.</p>
    pub fn fault_count_high(&self) -> std::option::Option<i64> {
        self.fault_count_high
    }
    /// <p>The lower limit of fault counts for a service.</p>
    pub fn fault_count_low(&self) -> std::option::Option<i64> {
        self.fault_count_low
    }
}
impl ForecastStatistics {
    /// Creates a new builder-style object to manufacture [`ForecastStatistics`](crate::types::ForecastStatistics).
    pub fn builder() -> crate::types::builders::ForecastStatisticsBuilder {
        crate::types::builders::ForecastStatisticsBuilder::default()
    }
}

/// A builder for [`ForecastStatistics`](crate::types::ForecastStatistics).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ForecastStatisticsBuilder {
    pub(crate) fault_count_high: std::option::Option<i64>,
    pub(crate) fault_count_low: std::option::Option<i64>,
}
impl ForecastStatisticsBuilder {
    /// <p>The upper limit of fault counts for a service.</p>
    pub fn fault_count_high(mut self, input: i64) -> Self {
        self.fault_count_high = Some(input);
        self
    }
    /// <p>The upper limit of fault counts for a service.</p>
    pub fn set_fault_count_high(mut self, input: std::option::Option<i64>) -> Self {
        self.fault_count_high = input;
        self
    }
    /// <p>The lower limit of fault counts for a service.</p>
    pub fn fault_count_low(mut self, input: i64) -> Self {
        self.fault_count_low = Some(input);
        self
    }
    /// <p>The lower limit of fault counts for a service.</p>
    pub fn set_fault_count_low(mut self, input: std::option::Option<i64>) -> Self {
        self.fault_count_low = input;
        self
    }
    /// Consumes the builder and constructs a [`ForecastStatistics`](crate::types::ForecastStatistics).
    pub fn build(self) -> crate::types::ForecastStatistics {
        crate::types::ForecastStatistics {
            fault_count_high: self.fault_count_high,
            fault_count_low: self.fault_count_low,
        }
    }
}
