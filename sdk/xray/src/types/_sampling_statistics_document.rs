// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request sampling results for a single rule from a service. Results are for the last 10 seconds unless the service has been assigned a longer reporting interval after a previous call to <a href="https://docs.aws.amazon.com/xray/latest/api/API_GetSamplingTargets.html">GetSamplingTargets</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SamplingStatisticsDocument {
    /// <p>The name of the sampling rule.</p>
    pub rule_name: ::std::string::String,
    /// <p>A unique identifier for the service in hexadecimal.</p>
    pub client_id: ::std::string::String,
    /// <p>The current time.</p>
    pub timestamp: ::aws_smithy_types::DateTime,
    /// <p>The number of requests that matched the rule.</p>
    pub request_count: i32,
    /// <p>The number of requests recorded.</p>
    pub sampled_count: i32,
    /// <p>The number of requests recorded with borrowed reservoir quota.</p>
    pub borrow_count: i32,
}
impl SamplingStatisticsDocument {
    /// <p>The name of the sampling rule.</p>
    pub fn rule_name(&self) -> &str {
        use std::ops::Deref;
        self.rule_name.deref()
    }
    /// <p>A unique identifier for the service in hexadecimal.</p>
    pub fn client_id(&self) -> &str {
        use std::ops::Deref;
        self.client_id.deref()
    }
    /// <p>The current time.</p>
    pub fn timestamp(&self) -> &::aws_smithy_types::DateTime {
        &self.timestamp
    }
    /// <p>The number of requests that matched the rule.</p>
    pub fn request_count(&self) -> i32 {
        self.request_count
    }
    /// <p>The number of requests recorded.</p>
    pub fn sampled_count(&self) -> i32 {
        self.sampled_count
    }
    /// <p>The number of requests recorded with borrowed reservoir quota.</p>
    pub fn borrow_count(&self) -> i32 {
        self.borrow_count
    }
}
impl SamplingStatisticsDocument {
    /// Creates a new builder-style object to manufacture [`SamplingStatisticsDocument`](crate::types::SamplingStatisticsDocument).
    pub fn builder() -> crate::types::builders::SamplingStatisticsDocumentBuilder {
        crate::types::builders::SamplingStatisticsDocumentBuilder::default()
    }
}

/// A builder for [`SamplingStatisticsDocument`](crate::types::SamplingStatisticsDocument).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SamplingStatisticsDocumentBuilder {
    pub(crate) rule_name: ::std::option::Option<::std::string::String>,
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) request_count: ::std::option::Option<i32>,
    pub(crate) sampled_count: ::std::option::Option<i32>,
    pub(crate) borrow_count: ::std::option::Option<i32>,
}
impl SamplingStatisticsDocumentBuilder {
    /// <p>The name of the sampling rule.</p>
    /// This field is required.
    pub fn rule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rule_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the sampling rule.</p>
    pub fn set_rule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rule_name = input;
        self
    }
    /// <p>The name of the sampling rule.</p>
    pub fn get_rule_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.rule_name
    }
    /// <p>A unique identifier for the service in hexadecimal.</p>
    /// This field is required.
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the service in hexadecimal.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>A unique identifier for the service in hexadecimal.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>The current time.</p>
    /// This field is required.
    pub fn timestamp(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.timestamp = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current time.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The current time.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.timestamp
    }
    /// <p>The number of requests that matched the rule.</p>
    /// This field is required.
    pub fn request_count(mut self, input: i32) -> Self {
        self.request_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of requests that matched the rule.</p>
    pub fn set_request_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.request_count = input;
        self
    }
    /// <p>The number of requests that matched the rule.</p>
    pub fn get_request_count(&self) -> &::std::option::Option<i32> {
        &self.request_count
    }
    /// <p>The number of requests recorded.</p>
    /// This field is required.
    pub fn sampled_count(mut self, input: i32) -> Self {
        self.sampled_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of requests recorded.</p>
    pub fn set_sampled_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.sampled_count = input;
        self
    }
    /// <p>The number of requests recorded.</p>
    pub fn get_sampled_count(&self) -> &::std::option::Option<i32> {
        &self.sampled_count
    }
    /// <p>The number of requests recorded with borrowed reservoir quota.</p>
    pub fn borrow_count(mut self, input: i32) -> Self {
        self.borrow_count = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of requests recorded with borrowed reservoir quota.</p>
    pub fn set_borrow_count(mut self, input: ::std::option::Option<i32>) -> Self {
        self.borrow_count = input;
        self
    }
    /// <p>The number of requests recorded with borrowed reservoir quota.</p>
    pub fn get_borrow_count(&self) -> &::std::option::Option<i32> {
        &self.borrow_count
    }
    /// Consumes the builder and constructs a [`SamplingStatisticsDocument`](crate::types::SamplingStatisticsDocument).
    /// This method will fail if any of the following fields are not set:
    /// - [`rule_name`](crate::types::builders::SamplingStatisticsDocumentBuilder::rule_name)
    /// - [`client_id`](crate::types::builders::SamplingStatisticsDocumentBuilder::client_id)
    /// - [`timestamp`](crate::types::builders::SamplingStatisticsDocumentBuilder::timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::SamplingStatisticsDocument, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SamplingStatisticsDocument {
            rule_name: self.rule_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rule_name",
                    "rule_name was not specified but it is required when building SamplingStatisticsDocument",
                )
            })?,
            client_id: self.client_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "client_id",
                    "client_id was not specified but it is required when building SamplingStatisticsDocument",
                )
            })?,
            timestamp: self.timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "timestamp",
                    "timestamp was not specified but it is required when building SamplingStatisticsDocument",
                )
            })?,
            request_count: self.request_count.unwrap_or_default(),
            sampled_count: self.sampled_count.unwrap_or_default(),
            borrow_count: self.borrow_count.unwrap_or_default(),
        })
    }
}
