// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>X-Ray reevaluates insights periodically until they are resolved, and records each intermediate state in an event. You can review incident events in the Impact Timeline on the Inspect page in the X-Ray console.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InsightEvent {
    /// <p>A brief description of the event.</p>
    #[doc(hidden)]
    pub summary: std::option::Option<std::string::String>,
    /// <p>The time, in Unix seconds, at which the event was recorded.</p>
    #[doc(hidden)]
    pub event_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The impact statistics of the client side service. This includes the number of requests to the client service and whether the requests were faults or okay.</p>
    #[doc(hidden)]
    pub client_request_impact_statistics:
        std::option::Option<crate::types::RequestImpactStatistics>,
    /// <p>The impact statistics of the root cause service. This includes the number of requests to the client service and whether the requests were faults or okay.</p>
    #[doc(hidden)]
    pub root_cause_service_request_impact_statistics:
        std::option::Option<crate::types::RequestImpactStatistics>,
    /// <p>The service during the event that is most impacted by the incident.</p>
    #[doc(hidden)]
    pub top_anomalous_services: std::option::Option<std::vec::Vec<crate::types::AnomalousService>>,
}
impl InsightEvent {
    /// <p>A brief description of the event.</p>
    pub fn summary(&self) -> std::option::Option<&str> {
        self.summary.as_deref()
    }
    /// <p>The time, in Unix seconds, at which the event was recorded.</p>
    pub fn event_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.event_time.as_ref()
    }
    /// <p>The impact statistics of the client side service. This includes the number of requests to the client service and whether the requests were faults or okay.</p>
    pub fn client_request_impact_statistics(
        &self,
    ) -> std::option::Option<&crate::types::RequestImpactStatistics> {
        self.client_request_impact_statistics.as_ref()
    }
    /// <p>The impact statistics of the root cause service. This includes the number of requests to the client service and whether the requests were faults or okay.</p>
    pub fn root_cause_service_request_impact_statistics(
        &self,
    ) -> std::option::Option<&crate::types::RequestImpactStatistics> {
        self.root_cause_service_request_impact_statistics.as_ref()
    }
    /// <p>The service during the event that is most impacted by the incident.</p>
    pub fn top_anomalous_services(&self) -> std::option::Option<&[crate::types::AnomalousService]> {
        self.top_anomalous_services.as_deref()
    }
}
impl InsightEvent {
    /// Creates a new builder-style object to manufacture [`InsightEvent`](crate::types::InsightEvent).
    pub fn builder() -> crate::types::builders::InsightEventBuilder {
        crate::types::builders::InsightEventBuilder::default()
    }
}

/// A builder for [`InsightEvent`](crate::types::InsightEvent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InsightEventBuilder {
    pub(crate) summary: std::option::Option<std::string::String>,
    pub(crate) event_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) client_request_impact_statistics:
        std::option::Option<crate::types::RequestImpactStatistics>,
    pub(crate) root_cause_service_request_impact_statistics:
        std::option::Option<crate::types::RequestImpactStatistics>,
    pub(crate) top_anomalous_services:
        std::option::Option<std::vec::Vec<crate::types::AnomalousService>>,
}
impl InsightEventBuilder {
    /// <p>A brief description of the event.</p>
    pub fn summary(mut self, input: impl Into<std::string::String>) -> Self {
        self.summary = Some(input.into());
        self
    }
    /// <p>A brief description of the event.</p>
    pub fn set_summary(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.summary = input;
        self
    }
    /// <p>The time, in Unix seconds, at which the event was recorded.</p>
    pub fn event_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.event_time = Some(input);
        self
    }
    /// <p>The time, in Unix seconds, at which the event was recorded.</p>
    pub fn set_event_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.event_time = input;
        self
    }
    /// <p>The impact statistics of the client side service. This includes the number of requests to the client service and whether the requests were faults or okay.</p>
    pub fn client_request_impact_statistics(
        mut self,
        input: crate::types::RequestImpactStatistics,
    ) -> Self {
        self.client_request_impact_statistics = Some(input);
        self
    }
    /// <p>The impact statistics of the client side service. This includes the number of requests to the client service and whether the requests were faults or okay.</p>
    pub fn set_client_request_impact_statistics(
        mut self,
        input: std::option::Option<crate::types::RequestImpactStatistics>,
    ) -> Self {
        self.client_request_impact_statistics = input;
        self
    }
    /// <p>The impact statistics of the root cause service. This includes the number of requests to the client service and whether the requests were faults or okay.</p>
    pub fn root_cause_service_request_impact_statistics(
        mut self,
        input: crate::types::RequestImpactStatistics,
    ) -> Self {
        self.root_cause_service_request_impact_statistics = Some(input);
        self
    }
    /// <p>The impact statistics of the root cause service. This includes the number of requests to the client service and whether the requests were faults or okay.</p>
    pub fn set_root_cause_service_request_impact_statistics(
        mut self,
        input: std::option::Option<crate::types::RequestImpactStatistics>,
    ) -> Self {
        self.root_cause_service_request_impact_statistics = input;
        self
    }
    /// Appends an item to `top_anomalous_services`.
    ///
    /// To override the contents of this collection use [`set_top_anomalous_services`](Self::set_top_anomalous_services).
    ///
    /// <p>The service during the event that is most impacted by the incident.</p>
    pub fn top_anomalous_services(mut self, input: crate::types::AnomalousService) -> Self {
        let mut v = self.top_anomalous_services.unwrap_or_default();
        v.push(input);
        self.top_anomalous_services = Some(v);
        self
    }
    /// <p>The service during the event that is most impacted by the incident.</p>
    pub fn set_top_anomalous_services(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AnomalousService>>,
    ) -> Self {
        self.top_anomalous_services = input;
        self
    }
    /// Consumes the builder and constructs a [`InsightEvent`](crate::types::InsightEvent).
    pub fn build(self) -> crate::types::InsightEvent {
        crate::types::InsightEvent {
            summary: self.summary,
            event_time: self.event_time,
            client_request_impact_statistics: self.client_request_impact_statistics,
            root_cause_service_request_impact_statistics: self
                .root_cause_service_request_impact_statistics,
            top_anomalous_services: self.top_anomalous_services,
        }
    }
}
