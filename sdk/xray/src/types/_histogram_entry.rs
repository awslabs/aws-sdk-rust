// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An entry in a histogram for a statistic. A histogram maps the range of observed values on the X axis, and the prevalence of each value on the Y axis.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct HistogramEntry {
    /// <p>The value of the entry.</p>
    #[doc(hidden)]
    pub value: f64,
    /// <p>The prevalence of the entry.</p>
    #[doc(hidden)]
    pub count: i32,
}
impl HistogramEntry {
    /// <p>The value of the entry.</p>
    pub fn value(&self) -> f64 {
        self.value
    }
    /// <p>The prevalence of the entry.</p>
    pub fn count(&self) -> i32 {
        self.count
    }
}
impl HistogramEntry {
    /// Creates a new builder-style object to manufacture [`HistogramEntry`](crate::types::HistogramEntry).
    pub fn builder() -> crate::types::builders::HistogramEntryBuilder {
        crate::types::builders::HistogramEntryBuilder::default()
    }
}

/// A builder for [`HistogramEntry`](crate::types::HistogramEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct HistogramEntryBuilder {
    pub(crate) value: std::option::Option<f64>,
    pub(crate) count: std::option::Option<i32>,
}
impl HistogramEntryBuilder {
    /// <p>The value of the entry.</p>
    pub fn value(mut self, input: f64) -> Self {
        self.value = Some(input);
        self
    }
    /// <p>The value of the entry.</p>
    pub fn set_value(mut self, input: std::option::Option<f64>) -> Self {
        self.value = input;
        self
    }
    /// <p>The prevalence of the entry.</p>
    pub fn count(mut self, input: i32) -> Self {
        self.count = Some(input);
        self
    }
    /// <p>The prevalence of the entry.</p>
    pub fn set_count(mut self, input: std::option::Option<i32>) -> Self {
        self.count = input;
        self
    }
    /// Consumes the builder and constructs a [`HistogramEntry`](crate::types::HistogramEntry).
    pub fn build(self) -> crate::types::HistogramEntry {
        crate::types::HistogramEntry {
            value: self.value.unwrap_or_default(),
            count: self.count.unwrap_or_default(),
        }
    }
}
