// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchGetTraces`](crate::operation::batch_get_traces::builders::BatchGetTracesFluentBuilder) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::operation::batch_get_traces::builders::BatchGetTracesFluentBuilder::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`trace_ids(Vec<String>)`](crate::operation::batch_get_traces::builders::BatchGetTracesFluentBuilder::trace_ids) / [`set_trace_ids(Option<Vec<String>>)`](crate::operation::batch_get_traces::builders::BatchGetTracesFluentBuilder::set_trace_ids): <p>Specify the trace IDs of requests for which to retrieve segments.</p>
    ///   - [`next_token(impl Into<String>)`](crate::operation::batch_get_traces::builders::BatchGetTracesFluentBuilder::next_token) / [`set_next_token(Option<String>)`](crate::operation::batch_get_traces::builders::BatchGetTracesFluentBuilder::set_next_token): <p>Pagination token.</p>
    /// - On success, responds with [`BatchGetTracesOutput`](crate::operation::batch_get_traces::BatchGetTracesOutput) with field(s):
    ///   - [`traces(Option<Vec<Trace>>)`](crate::operation::batch_get_traces::BatchGetTracesOutput::traces): <p>Full traces for the specified requests.</p>
    ///   - [`unprocessed_trace_ids(Option<Vec<String>>)`](crate::operation::batch_get_traces::BatchGetTracesOutput::unprocessed_trace_ids): <p>Trace IDs of requests that haven't been processed.</p>
    ///   - [`next_token(Option<String>)`](crate::operation::batch_get_traces::BatchGetTracesOutput::next_token): <p>Pagination token.</p>
    /// - On failure, responds with [`SdkError<BatchGetTracesError>`](crate::operation::batch_get_traces::BatchGetTracesError)
    pub fn batch_get_traces(
        &self,
    ) -> crate::operation::batch_get_traces::builders::BatchGetTracesFluentBuilder {
        crate::operation::batch_get_traces::builders::BatchGetTracesFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
