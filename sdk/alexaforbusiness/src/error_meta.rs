// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The resource being created already exists.</p>
    AlreadyExistsException(crate::types::error::AlreadyExistsException),
    /// <p>There is a concurrent modification of resources.</p>
    ConcurrentModificationException(crate::types::error::ConcurrentModificationException),
    /// <p>The request failed because this device is no longer registered and therefore no longer managed by this account.</p>
    DeviceNotRegisteredException(crate::types::error::DeviceNotRegisteredException),
    /// <p>The Certificate Authority can't issue or revoke a certificate.</p>
    InvalidCertificateAuthorityException(crate::types::error::InvalidCertificateAuthorityException),
    /// <p>The device is in an invalid state.</p>
    InvalidDeviceException(crate::types::error::InvalidDeviceException),
    /// <p>A password in SecretsManager is in an invalid state.</p>
    InvalidSecretsManagerResourceException(
        crate::types::error::InvalidSecretsManagerResourceException,
    ),
    /// <p>The service linked role is locked for deletion. </p>
    InvalidServiceLinkedRoleStateException(
        crate::types::error::InvalidServiceLinkedRoleStateException,
    ),
    /// <p>The attempt to update a user is invalid due to the user's current status.</p>
    InvalidUserStatusException(crate::types::error::InvalidUserStatusException),
    /// <p>You are performing an action that would put you beyond your account's limits.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The name sent in the request is already in use.</p>
    NameInUseException(crate::types::error::NameInUseException),
    /// <p>The resource is not found.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>Another resource is associated with the resource in the request.</p>
    ResourceAssociatedException(crate::types::error::ResourceAssociatedException),
    /// <p>The resource in the request is already in use.</p>
    ResourceInUseException(crate::types::error::ResourceInUseException),
    /// <p>The skill must be linked to a third-party account.</p>
    SkillNotLinkedException(crate::types::error::SkillNotLinkedException),
    /// <p>The caller has no permissions to operate on the resource involved in the API call.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AlreadyExistsException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::DeviceNotRegisteredException(inner) => inner.fmt(f),
            Error::InvalidCertificateAuthorityException(inner) => inner.fmt(f),
            Error::InvalidDeviceException(inner) => inner.fmt(f),
            Error::InvalidSecretsManagerResourceException(inner) => inner.fmt(f),
            Error::InvalidServiceLinkedRoleStateException(inner) => inner.fmt(f),
            Error::InvalidUserStatusException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NameInUseException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ResourceAssociatedException(inner) => inner.fmt(f),
            Error::ResourceInUseException(inner) => inner.fmt(f),
            Error::SkillNotLinkedException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::approve_skill::ApproveSkillError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::approve_skill::ApproveSkillError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::approve_skill::ApproveSkillError> for Error {
    fn from(err: crate::operation::approve_skill::ApproveSkillError) -> Self {
        match err {
            crate::operation::approve_skill::ApproveSkillError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::approve_skill::ApproveSkillError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::approve_skill::ApproveSkillError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::approve_skill::ApproveSkillError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::associate_contact_with_address_book::AssociateContactWithAddressBookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::associate_contact_with_address_book::AssociateContactWithAddressBookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::associate_contact_with_address_book::AssociateContactWithAddressBookError,
    > for Error
{
    fn from(
        err: crate::operation::associate_contact_with_address_book::AssociateContactWithAddressBookError,
    ) -> Self {
        match err {
            crate::operation::associate_contact_with_address_book::AssociateContactWithAddressBookError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::associate_contact_with_address_book::AssociateContactWithAddressBookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::associate_device_with_network_profile::AssociateDeviceWithNetworkProfileError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::associate_device_with_network_profile::AssociateDeviceWithNetworkProfileError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::associate_device_with_network_profile::AssociateDeviceWithNetworkProfileError> for Error {
    fn from(err: crate::operation::associate_device_with_network_profile::AssociateDeviceWithNetworkProfileError) -> Self {
        match err {
            crate::operation::associate_device_with_network_profile::AssociateDeviceWithNetworkProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::associate_device_with_network_profile::AssociateDeviceWithNetworkProfileError::DeviceNotRegisteredException(inner) => Error::DeviceNotRegisteredException(inner),
            crate::operation::associate_device_with_network_profile::AssociateDeviceWithNetworkProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::associate_device_with_network_profile::AssociateDeviceWithNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_device_with_room::AssociateDeviceWithRoomError> for Error {
    fn from(
        err: crate::operation::associate_device_with_room::AssociateDeviceWithRoomError,
    ) -> Self {
        match err {
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError::DeviceNotRegisteredException(inner) => Error::DeviceNotRegisteredException(inner),
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_skill_group_with_room::AssociateSkillGroupWithRoomError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_skill_group_with_room::AssociateSkillGroupWithRoomError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_skill_group_with_room::AssociateSkillGroupWithRoomError>
    for Error
{
    fn from(
        err: crate::operation::associate_skill_group_with_room::AssociateSkillGroupWithRoomError,
    ) -> Self {
        match err {
            crate::operation::associate_skill_group_with_room::AssociateSkillGroupWithRoomError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::associate_skill_group_with_room::AssociateSkillGroupWithRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_skill_with_skill_group::AssociateSkillWithSkillGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_skill_with_skill_group::AssociateSkillWithSkillGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_skill_with_skill_group::AssociateSkillWithSkillGroupError>
    for Error
{
    fn from(
        err: crate::operation::associate_skill_with_skill_group::AssociateSkillWithSkillGroupError,
    ) -> Self {
        match err {
            crate::operation::associate_skill_with_skill_group::AssociateSkillWithSkillGroupError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::associate_skill_with_skill_group::AssociateSkillWithSkillGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::associate_skill_with_skill_group::AssociateSkillWithSkillGroupError::SkillNotLinkedException(inner) => Error::SkillNotLinkedException(inner),
            crate::operation::associate_skill_with_skill_group::AssociateSkillWithSkillGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_skill_with_users::AssociateSkillWithUsersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_skill_with_users::AssociateSkillWithUsersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_skill_with_users::AssociateSkillWithUsersError> for Error {
    fn from(
        err: crate::operation::associate_skill_with_users::AssociateSkillWithUsersError,
    ) -> Self {
        match err {
            crate::operation::associate_skill_with_users::AssociateSkillWithUsersError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::associate_skill_with_users::AssociateSkillWithUsersError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::associate_skill_with_users::AssociateSkillWithUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_address_book::CreateAddressBookError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_address_book::CreateAddressBookError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_address_book::CreateAddressBookError> for Error {
    fn from(err: crate::operation::create_address_book::CreateAddressBookError) -> Self {
        match err {
            crate::operation::create_address_book::CreateAddressBookError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_address_book::CreateAddressBookError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_address_book::CreateAddressBookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_business_report_schedule::CreateBusinessReportScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_business_report_schedule::CreateBusinessReportScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_business_report_schedule::CreateBusinessReportScheduleError>
    for Error
{
    fn from(
        err: crate::operation::create_business_report_schedule::CreateBusinessReportScheduleError,
    ) -> Self {
        match err {
            crate::operation::create_business_report_schedule::CreateBusinessReportScheduleError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_business_report_schedule::CreateBusinessReportScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_conference_provider::CreateConferenceProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_conference_provider::CreateConferenceProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_conference_provider::CreateConferenceProviderError> for Error {
    fn from(
        err: crate::operation::create_conference_provider::CreateConferenceProviderError,
    ) -> Self {
        match err {
            crate::operation::create_conference_provider::CreateConferenceProviderError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_conference_provider::CreateConferenceProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_contact::CreateContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_contact::CreateContactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_contact::CreateContactError> for Error {
    fn from(err: crate::operation::create_contact::CreateContactError) -> Self {
        match err {
            crate::operation::create_contact::CreateContactError::AlreadyExistsException(inner) => {
                Error::AlreadyExistsException(inner)
            }
            crate::operation::create_contact::CreateContactError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_contact::CreateContactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_gateway_group::CreateGatewayGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_gateway_group::CreateGatewayGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_gateway_group::CreateGatewayGroupError> for Error {
    fn from(err: crate::operation::create_gateway_group::CreateGatewayGroupError) -> Self {
        match err {
            crate::operation::create_gateway_group::CreateGatewayGroupError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_gateway_group::CreateGatewayGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_gateway_group::CreateGatewayGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_network_profile::CreateNetworkProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_network_profile::CreateNetworkProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_network_profile::CreateNetworkProfileError> for Error {
    fn from(err: crate::operation::create_network_profile::CreateNetworkProfileError) -> Self {
        match err {
            crate::operation::create_network_profile::CreateNetworkProfileError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_network_profile::CreateNetworkProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_network_profile::CreateNetworkProfileError::InvalidCertificateAuthorityException(inner) => Error::InvalidCertificateAuthorityException(inner),
            crate::operation::create_network_profile::CreateNetworkProfileError::InvalidServiceLinkedRoleStateException(inner) => Error::InvalidServiceLinkedRoleStateException(inner),
            crate::operation::create_network_profile::CreateNetworkProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_network_profile::CreateNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_profile::CreateProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_profile::CreateProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_profile::CreateProfileError> for Error {
    fn from(err: crate::operation::create_profile::CreateProfileError) -> Self {
        match err {
            crate::operation::create_profile::CreateProfileError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_profile::CreateProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_profile::CreateProfileError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_profile::CreateProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_room::CreateRoomError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_room::CreateRoomError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_room::CreateRoomError> for Error {
    fn from(err: crate::operation::create_room::CreateRoomError) -> Self {
        match err {
            crate::operation::create_room::CreateRoomError::AlreadyExistsException(inner) => {
                Error::AlreadyExistsException(inner)
            }
            crate::operation::create_room::CreateRoomError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_room::CreateRoomError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_skill_group::CreateSkillGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_skill_group::CreateSkillGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_skill_group::CreateSkillGroupError> for Error {
    fn from(err: crate::operation::create_skill_group::CreateSkillGroupError) -> Self {
        match err {
            crate::operation::create_skill_group::CreateSkillGroupError::AlreadyExistsException(inner) => Error::AlreadyExistsException(inner),
            crate::operation::create_skill_group::CreateSkillGroupError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::create_skill_group::CreateSkillGroupError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_skill_group::CreateSkillGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_user::CreateUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_user::CreateUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_user::CreateUserError> for Error {
    fn from(err: crate::operation::create_user::CreateUserError) -> Self {
        match err {
            crate::operation::create_user::CreateUserError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::create_user::CreateUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_user::CreateUserError::ResourceInUseException(inner) => {
                Error::ResourceInUseException(inner)
            }
            crate::operation::create_user::CreateUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_address_book::DeleteAddressBookError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_address_book::DeleteAddressBookError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_address_book::DeleteAddressBookError> for Error {
    fn from(err: crate::operation::delete_address_book::DeleteAddressBookError) -> Self {
        match err {
            crate::operation::delete_address_book::DeleteAddressBookError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_address_book::DeleteAddressBookError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_address_book::DeleteAddressBookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_business_report_schedule::DeleteBusinessReportScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_business_report_schedule::DeleteBusinessReportScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_business_report_schedule::DeleteBusinessReportScheduleError>
    for Error
{
    fn from(
        err: crate::operation::delete_business_report_schedule::DeleteBusinessReportScheduleError,
    ) -> Self {
        match err {
            crate::operation::delete_business_report_schedule::DeleteBusinessReportScheduleError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_business_report_schedule::DeleteBusinessReportScheduleError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_business_report_schedule::DeleteBusinessReportScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_conference_provider::DeleteConferenceProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_conference_provider::DeleteConferenceProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_conference_provider::DeleteConferenceProviderError> for Error {
    fn from(
        err: crate::operation::delete_conference_provider::DeleteConferenceProviderError,
    ) -> Self {
        match err {
            crate::operation::delete_conference_provider::DeleteConferenceProviderError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_conference_provider::DeleteConferenceProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_contact::DeleteContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_contact::DeleteContactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_contact::DeleteContactError> for Error {
    fn from(err: crate::operation::delete_contact::DeleteContactError) -> Self {
        match err {
            crate::operation::delete_contact::DeleteContactError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_contact::DeleteContactError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_contact::DeleteContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_device::DeleteDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_device::DeleteDeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_device::DeleteDeviceError> for Error {
    fn from(err: crate::operation::delete_device::DeleteDeviceError) -> Self {
        match err {
            crate::operation::delete_device::DeleteDeviceError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_device::DeleteDeviceError::InvalidCertificateAuthorityException(inner) => Error::InvalidCertificateAuthorityException(inner),
            crate::operation::delete_device::DeleteDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_device::DeleteDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError> for Error {
    fn from(err: crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError) -> Self {
        match err {
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError::DeviceNotRegisteredException(inner) => Error::DeviceNotRegisteredException(inner),
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_gateway_group::DeleteGatewayGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_gateway_group::DeleteGatewayGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_gateway_group::DeleteGatewayGroupError> for Error {
    fn from(err: crate::operation::delete_gateway_group::DeleteGatewayGroupError) -> Self {
        match err {
            crate::operation::delete_gateway_group::DeleteGatewayGroupError::ResourceAssociatedException(inner) => Error::ResourceAssociatedException(inner),
            crate::operation::delete_gateway_group::DeleteGatewayGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_network_profile::DeleteNetworkProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_network_profile::DeleteNetworkProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_network_profile::DeleteNetworkProfileError> for Error {
    fn from(err: crate::operation::delete_network_profile::DeleteNetworkProfileError) -> Self {
        match err {
            crate::operation::delete_network_profile::DeleteNetworkProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_network_profile::DeleteNetworkProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_network_profile::DeleteNetworkProfileError::ResourceInUseException(inner) => Error::ResourceInUseException(inner),
            crate::operation::delete_network_profile::DeleteNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_profile::DeleteProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_profile::DeleteProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_profile::DeleteProfileError> for Error {
    fn from(err: crate::operation::delete_profile::DeleteProfileError) -> Self {
        match err {
            crate::operation::delete_profile::DeleteProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_profile::DeleteProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_profile::DeleteProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_room::DeleteRoomError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_room::DeleteRoomError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_room::DeleteRoomError> for Error {
    fn from(err: crate::operation::delete_room::DeleteRoomError) -> Self {
        match err {
            crate::operation::delete_room::DeleteRoomError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_room::DeleteRoomError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_room::DeleteRoomError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_room_skill_parameter::DeleteRoomSkillParameterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_room_skill_parameter::DeleteRoomSkillParameterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_room_skill_parameter::DeleteRoomSkillParameterError> for Error {
    fn from(
        err: crate::operation::delete_room_skill_parameter::DeleteRoomSkillParameterError,
    ) -> Self {
        match err {
            crate::operation::delete_room_skill_parameter::DeleteRoomSkillParameterError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_room_skill_parameter::DeleteRoomSkillParameterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_skill_authorization::DeleteSkillAuthorizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_skill_authorization::DeleteSkillAuthorizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_skill_authorization::DeleteSkillAuthorizationError> for Error {
    fn from(
        err: crate::operation::delete_skill_authorization::DeleteSkillAuthorizationError,
    ) -> Self {
        match err {
            crate::operation::delete_skill_authorization::DeleteSkillAuthorizationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_skill_authorization::DeleteSkillAuthorizationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_skill_authorization::DeleteSkillAuthorizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_skill_group::DeleteSkillGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_skill_group::DeleteSkillGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_skill_group::DeleteSkillGroupError> for Error {
    fn from(err: crate::operation::delete_skill_group::DeleteSkillGroupError) -> Self {
        match err {
            crate::operation::delete_skill_group::DeleteSkillGroupError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_skill_group::DeleteSkillGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_skill_group::DeleteSkillGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_user::DeleteUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_user::DeleteUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_user::DeleteUserError> for Error {
    fn from(err: crate::operation::delete_user::DeleteUserError) -> Self {
        match err {
            crate::operation::delete_user::DeleteUserError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::delete_user::DeleteUserError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_user::DeleteUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disassociate_contact_from_address_book::DisassociateContactFromAddressBookError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disassociate_contact_from_address_book::DisassociateContactFromAddressBookError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::disassociate_contact_from_address_book::DisassociateContactFromAddressBookError> for Error {
    fn from(err: crate::operation::disassociate_contact_from_address_book::DisassociateContactFromAddressBookError) -> Self {
        match err {
            crate::operation::disassociate_contact_from_address_book::DisassociateContactFromAddressBookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_device_from_room::DisassociateDeviceFromRoomError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_device_from_room::DisassociateDeviceFromRoomError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_device_from_room::DisassociateDeviceFromRoomError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_device_from_room::DisassociateDeviceFromRoomError,
    ) -> Self {
        match err {
            crate::operation::disassociate_device_from_room::DisassociateDeviceFromRoomError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::disassociate_device_from_room::DisassociateDeviceFromRoomError::DeviceNotRegisteredException(inner) => Error::DeviceNotRegisteredException(inner),
            crate::operation::disassociate_device_from_room::DisassociateDeviceFromRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disassociate_skill_from_skill_group::DisassociateSkillFromSkillGroupError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disassociate_skill_from_skill_group::DisassociateSkillFromSkillGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl
    From<
        crate::operation::disassociate_skill_from_skill_group::DisassociateSkillFromSkillGroupError,
    > for Error
{
    fn from(
        err: crate::operation::disassociate_skill_from_skill_group::DisassociateSkillFromSkillGroupError,
    ) -> Self {
        match err {
            crate::operation::disassociate_skill_from_skill_group::DisassociateSkillFromSkillGroupError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::disassociate_skill_from_skill_group::DisassociateSkillFromSkillGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::disassociate_skill_from_skill_group::DisassociateSkillFromSkillGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_skill_from_users::DisassociateSkillFromUsersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_skill_from_users::DisassociateSkillFromUsersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_skill_from_users::DisassociateSkillFromUsersError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_skill_from_users::DisassociateSkillFromUsersError,
    ) -> Self {
        match err {
            crate::operation::disassociate_skill_from_users::DisassociateSkillFromUsersError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::disassociate_skill_from_users::DisassociateSkillFromUsersError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::disassociate_skill_from_users::DisassociateSkillFromUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::disassociate_skill_group_from_room::DisassociateSkillGroupFromRoomError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::disassociate_skill_group_from_room::DisassociateSkillGroupFromRoomError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::disassociate_skill_group_from_room::DisassociateSkillGroupFromRoomError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_skill_group_from_room::DisassociateSkillGroupFromRoomError,
    ) -> Self {
        match err {
            crate::operation::disassociate_skill_group_from_room::DisassociateSkillGroupFromRoomError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::disassociate_skill_group_from_room::DisassociateSkillGroupFromRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::forget_smart_home_appliances::ForgetSmartHomeAppliancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::forget_smart_home_appliances::ForgetSmartHomeAppliancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::forget_smart_home_appliances::ForgetSmartHomeAppliancesError>
    for Error
{
    fn from(
        err: crate::operation::forget_smart_home_appliances::ForgetSmartHomeAppliancesError,
    ) -> Self {
        match err {
            crate::operation::forget_smart_home_appliances::ForgetSmartHomeAppliancesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::forget_smart_home_appliances::ForgetSmartHomeAppliancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_address_book::GetAddressBookError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_address_book::GetAddressBookError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_address_book::GetAddressBookError> for Error {
    fn from(err: crate::operation::get_address_book::GetAddressBookError) -> Self {
        match err {
            crate::operation::get_address_book::GetAddressBookError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_address_book::GetAddressBookError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_conference_preference::GetConferencePreferenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_conference_preference::GetConferencePreferenceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_conference_preference::GetConferencePreferenceError> for Error {
    fn from(
        err: crate::operation::get_conference_preference::GetConferencePreferenceError,
    ) -> Self {
        match err {
            crate::operation::get_conference_preference::GetConferencePreferenceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_conference_preference::GetConferencePreferenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_conference_provider::GetConferenceProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_conference_provider::GetConferenceProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_conference_provider::GetConferenceProviderError> for Error {
    fn from(err: crate::operation::get_conference_provider::GetConferenceProviderError) -> Self {
        match err {
            crate::operation::get_conference_provider::GetConferenceProviderError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_conference_provider::GetConferenceProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_contact::GetContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_contact::GetContactError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_contact::GetContactError> for Error {
    fn from(err: crate::operation::get_contact::GetContactError) -> Self {
        match err {
            crate::operation::get_contact::GetContactError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_contact::GetContactError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_device::GetDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_device::GetDeviceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device::GetDeviceError> for Error {
    fn from(err: crate::operation::get_device::GetDeviceError) -> Self {
        match err {
            crate::operation::get_device::GetDeviceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_device::GetDeviceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_gateway::GetGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_gateway::GetGatewayError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_gateway::GetGatewayError> for Error {
    fn from(err: crate::operation::get_gateway::GetGatewayError) -> Self {
        match err {
            crate::operation::get_gateway::GetGatewayError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_gateway::GetGatewayError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_gateway_group::GetGatewayGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_gateway_group::GetGatewayGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_gateway_group::GetGatewayGroupError> for Error {
    fn from(err: crate::operation::get_gateway_group::GetGatewayGroupError) -> Self {
        match err {
            crate::operation::get_gateway_group::GetGatewayGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_gateway_group::GetGatewayGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_invitation_configuration::GetInvitationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_invitation_configuration::GetInvitationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_invitation_configuration::GetInvitationConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::get_invitation_configuration::GetInvitationConfigurationError,
    ) -> Self {
        match err {
            crate::operation::get_invitation_configuration::GetInvitationConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_invitation_configuration::GetInvitationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_network_profile::GetNetworkProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_network_profile::GetNetworkProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_network_profile::GetNetworkProfileError> for Error {
    fn from(err: crate::operation::get_network_profile::GetNetworkProfileError) -> Self {
        match err {
            crate::operation::get_network_profile::GetNetworkProfileError::InvalidSecretsManagerResourceException(inner) => Error::InvalidSecretsManagerResourceException(inner),
            crate::operation::get_network_profile::GetNetworkProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_network_profile::GetNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_profile::GetProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_profile::GetProfileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_profile::GetProfileError> for Error {
    fn from(err: crate::operation::get_profile::GetProfileError) -> Self {
        match err {
            crate::operation::get_profile::GetProfileError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_profile::GetProfileError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_room::GetRoomError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_room::GetRoomError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_room::GetRoomError> for Error {
    fn from(err: crate::operation::get_room::GetRoomError) -> Self {
        match err {
            crate::operation::get_room::GetRoomError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_room::GetRoomError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_room_skill_parameter::GetRoomSkillParameterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_room_skill_parameter::GetRoomSkillParameterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_room_skill_parameter::GetRoomSkillParameterError> for Error {
    fn from(err: crate::operation::get_room_skill_parameter::GetRoomSkillParameterError) -> Self {
        match err {
            crate::operation::get_room_skill_parameter::GetRoomSkillParameterError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_room_skill_parameter::GetRoomSkillParameterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_skill_group::GetSkillGroupError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_skill_group::GetSkillGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_skill_group::GetSkillGroupError> for Error {
    fn from(err: crate::operation::get_skill_group::GetSkillGroupError) -> Self {
        match err {
            crate::operation::get_skill_group::GetSkillGroupError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::get_skill_group::GetSkillGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_business_report_schedules::ListBusinessReportSchedulesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_business_report_schedules::ListBusinessReportSchedulesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_business_report_schedules::ListBusinessReportSchedulesError>
    for Error
{
    fn from(
        err: crate::operation::list_business_report_schedules::ListBusinessReportSchedulesError,
    ) -> Self {
        match err {
            crate::operation::list_business_report_schedules::ListBusinessReportSchedulesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_conference_providers::ListConferenceProvidersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_conference_providers::ListConferenceProvidersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_conference_providers::ListConferenceProvidersError> for Error {
    fn from(
        err: crate::operation::list_conference_providers::ListConferenceProvidersError,
    ) -> Self {
        match err {
            crate::operation::list_conference_providers::ListConferenceProvidersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_device_events::ListDeviceEventsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_device_events::ListDeviceEventsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_events::ListDeviceEventsError> for Error {
    fn from(err: crate::operation::list_device_events::ListDeviceEventsError) -> Self {
        match err {
            crate::operation::list_device_events::ListDeviceEventsError::NotFoundException(
                inner,
            ) => Error::NotFoundException(inner),
            crate::operation::list_device_events::ListDeviceEventsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_gateway_groups::ListGatewayGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_gateway_groups::ListGatewayGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_gateway_groups::ListGatewayGroupsError> for Error {
    fn from(err: crate::operation::list_gateway_groups::ListGatewayGroupsError) -> Self {
        match err {
            crate::operation::list_gateway_groups::ListGatewayGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_gateways::ListGatewaysError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_gateways::ListGatewaysError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_gateways::ListGatewaysError> for Error {
    fn from(err: crate::operation::list_gateways::ListGatewaysError) -> Self {
        match err {
            crate::operation::list_gateways::ListGatewaysError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_skills::ListSkillsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_skills::ListSkillsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_skills::ListSkillsError> for Error {
    fn from(err: crate::operation::list_skills::ListSkillsError) -> Self {
        match err {
            crate::operation::list_skills::ListSkillsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_skills_store_categories::ListSkillsStoreCategoriesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_skills_store_categories::ListSkillsStoreCategoriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_skills_store_categories::ListSkillsStoreCategoriesError>
    for Error
{
    fn from(
        err: crate::operation::list_skills_store_categories::ListSkillsStoreCategoriesError,
    ) -> Self {
        match err {
            crate::operation::list_skills_store_categories::ListSkillsStoreCategoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_skills_store_skills_by_category::ListSkillsStoreSkillsByCategoryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_skills_store_skills_by_category::ListSkillsStoreSkillsByCategoryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_skills_store_skills_by_category::ListSkillsStoreSkillsByCategoryError> for Error {
    fn from(err: crate::operation::list_skills_store_skills_by_category::ListSkillsStoreSkillsByCategoryError) -> Self {
        match err {
            crate::operation::list_skills_store_skills_by_category::ListSkillsStoreSkillsByCategoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_smart_home_appliances::ListSmartHomeAppliancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_smart_home_appliances::ListSmartHomeAppliancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_smart_home_appliances::ListSmartHomeAppliancesError> for Error {
    fn from(
        err: crate::operation::list_smart_home_appliances::ListSmartHomeAppliancesError,
    ) -> Self {
        match err {
            crate::operation::list_smart_home_appliances::ListSmartHomeAppliancesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_smart_home_appliances::ListSmartHomeAppliancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_tags::ListTagsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_tags::ListTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags::ListTagsError> for Error {
    fn from(err: crate::operation::list_tags::ListTagsError) -> Self {
        match err {
            crate::operation::list_tags::ListTagsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::list_tags::ListTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_conference_preference::PutConferencePreferenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_conference_preference::PutConferencePreferenceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_conference_preference::PutConferencePreferenceError> for Error {
    fn from(
        err: crate::operation::put_conference_preference::PutConferencePreferenceError,
    ) -> Self {
        match err {
            crate::operation::put_conference_preference::PutConferencePreferenceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_conference_preference::PutConferencePreferenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_invitation_configuration::PutInvitationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_invitation_configuration::PutInvitationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_invitation_configuration::PutInvitationConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::put_invitation_configuration::PutInvitationConfigurationError,
    ) -> Self {
        match err {
            crate::operation::put_invitation_configuration::PutInvitationConfigurationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::put_invitation_configuration::PutInvitationConfigurationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_invitation_configuration::PutInvitationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_room_skill_parameter::PutRoomSkillParameterError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_room_skill_parameter::PutRoomSkillParameterError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_room_skill_parameter::PutRoomSkillParameterError> for Error {
    fn from(err: crate::operation::put_room_skill_parameter::PutRoomSkillParameterError) -> Self {
        match err {
            crate::operation::put_room_skill_parameter::PutRoomSkillParameterError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::put_room_skill_parameter::PutRoomSkillParameterError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_skill_authorization::PutSkillAuthorizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_skill_authorization::PutSkillAuthorizationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_skill_authorization::PutSkillAuthorizationError> for Error {
    fn from(err: crate::operation::put_skill_authorization::PutSkillAuthorizationError) -> Self {
        match err {
            crate::operation::put_skill_authorization::PutSkillAuthorizationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::put_skill_authorization::PutSkillAuthorizationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_skill_authorization::PutSkillAuthorizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::register_avs_device::RegisterAVSDeviceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::register_avs_device::RegisterAVSDeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::register_avs_device::RegisterAVSDeviceError> for Error {
    fn from(err: crate::operation::register_avs_device::RegisterAVSDeviceError) -> Self {
        match err {
            crate::operation::register_avs_device::RegisterAVSDeviceError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::register_avs_device::RegisterAVSDeviceError::InvalidDeviceException(inner) => Error::InvalidDeviceException(inner),
            crate::operation::register_avs_device::RegisterAVSDeviceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::register_avs_device::RegisterAVSDeviceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::register_avs_device::RegisterAVSDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::reject_skill::RejectSkillError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::reject_skill::RejectSkillError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reject_skill::RejectSkillError> for Error {
    fn from(err: crate::operation::reject_skill::RejectSkillError) -> Self {
        match err {
            crate::operation::reject_skill::RejectSkillError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::reject_skill::RejectSkillError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::reject_skill::RejectSkillError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::resolve_room::ResolveRoomError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::resolve_room::ResolveRoomError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::resolve_room::ResolveRoomError> for Error {
    fn from(err: crate::operation::resolve_room::ResolveRoomError) -> Self {
        match err {
            crate::operation::resolve_room::ResolveRoomError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::resolve_room::ResolveRoomError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::revoke_invitation::RevokeInvitationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::revoke_invitation::RevokeInvitationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::revoke_invitation::RevokeInvitationError> for Error {
    fn from(err: crate::operation::revoke_invitation::RevokeInvitationError) -> Self {
        match err {
            crate::operation::revoke_invitation::RevokeInvitationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::revoke_invitation::RevokeInvitationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::revoke_invitation::RevokeInvitationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_address_books::SearchAddressBooksError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_address_books::SearchAddressBooksError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_address_books::SearchAddressBooksError> for Error {
    fn from(err: crate::operation::search_address_books::SearchAddressBooksError) -> Self {
        match err {
            crate::operation::search_address_books::SearchAddressBooksError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_contacts::SearchContactsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_contacts::SearchContactsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_contacts::SearchContactsError> for Error {
    fn from(err: crate::operation::search_contacts::SearchContactsError) -> Self {
        match err {
            crate::operation::search_contacts::SearchContactsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::search_devices::SearchDevicesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_devices::SearchDevicesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_devices::SearchDevicesError> for Error {
    fn from(err: crate::operation::search_devices::SearchDevicesError) -> Self {
        match err {
            crate::operation::search_devices::SearchDevicesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_network_profiles::SearchNetworkProfilesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_network_profiles::SearchNetworkProfilesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_network_profiles::SearchNetworkProfilesError> for Error {
    fn from(err: crate::operation::search_network_profiles::SearchNetworkProfilesError) -> Self {
        match err {
            crate::operation::search_network_profiles::SearchNetworkProfilesError::Unhandled(
                inner,
            ) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_profiles::SearchProfilesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_profiles::SearchProfilesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_profiles::SearchProfilesError> for Error {
    fn from(err: crate::operation::search_profiles::SearchProfilesError) -> Self {
        match err {
            crate::operation::search_profiles::SearchProfilesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::search_rooms::SearchRoomsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::search_rooms::SearchRoomsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_rooms::SearchRoomsError> for Error {
    fn from(err: crate::operation::search_rooms::SearchRoomsError) -> Self {
        match err {
            crate::operation::search_rooms::SearchRoomsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_skill_groups::SearchSkillGroupsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_skill_groups::SearchSkillGroupsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_skill_groups::SearchSkillGroupsError> for Error {
    fn from(err: crate::operation::search_skill_groups::SearchSkillGroupsError) -> Self {
        match err {
            crate::operation::search_skill_groups::SearchSkillGroupsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::search_users::SearchUsersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::search_users::SearchUsersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_users::SearchUsersError> for Error {
    fn from(err: crate::operation::search_users::SearchUsersError) -> Self {
        match err {
            crate::operation::search_users::SearchUsersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_announcement::SendAnnouncementError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_announcement::SendAnnouncementError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_announcement::SendAnnouncementError> for Error {
    fn from(err: crate::operation::send_announcement::SendAnnouncementError) -> Self {
        match err {
            crate::operation::send_announcement::SendAnnouncementError::AlreadyExistsException(
                inner,
            ) => Error::AlreadyExistsException(inner),
            crate::operation::send_announcement::SendAnnouncementError::LimitExceededException(
                inner,
            ) => Error::LimitExceededException(inner),
            crate::operation::send_announcement::SendAnnouncementError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::send_invitation::SendInvitationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::send_invitation::SendInvitationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::send_invitation::SendInvitationError> for Error {
    fn from(err: crate::operation::send_invitation::SendInvitationError) -> Self {
        match err {
            crate::operation::send_invitation::SendInvitationError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::send_invitation::SendInvitationError::InvalidUserStatusException(inner) => Error::InvalidUserStatusException(inner),
            crate::operation::send_invitation::SendInvitationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::send_invitation::SendInvitationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_device_sync::StartDeviceSyncError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_device_sync::StartDeviceSyncError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_device_sync::StartDeviceSyncError> for Error {
    fn from(err: crate::operation::start_device_sync::StartDeviceSyncError) -> Self {
        match err {
            crate::operation::start_device_sync::StartDeviceSyncError::DeviceNotRegisteredException(inner) => Error::DeviceNotRegisteredException(inner),
            crate::operation::start_device_sync::StartDeviceSyncError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::start_smart_home_appliance_discovery::StartSmartHomeApplianceDiscoveryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::start_smart_home_appliance_discovery::StartSmartHomeApplianceDiscoveryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::start_smart_home_appliance_discovery::StartSmartHomeApplianceDiscoveryError> for Error {
    fn from(err: crate::operation::start_smart_home_appliance_discovery::StartSmartHomeApplianceDiscoveryError) -> Self {
        match err {
            crate::operation::start_smart_home_appliance_discovery::StartSmartHomeApplianceDiscoveryError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_smart_home_appliance_discovery::StartSmartHomeApplianceDiscoveryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_address_book::UpdateAddressBookError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_address_book::UpdateAddressBookError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_address_book::UpdateAddressBookError> for Error {
    fn from(err: crate::operation::update_address_book::UpdateAddressBookError) -> Self {
        match err {
            crate::operation::update_address_book::UpdateAddressBookError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_address_book::UpdateAddressBookError::NameInUseException(inner) => Error::NameInUseException(inner),
            crate::operation::update_address_book::UpdateAddressBookError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_address_book::UpdateAddressBookError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError>
    for Error
{
    fn from(
        err: crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError,
    ) -> Self {
        match err {
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_conference_provider::UpdateConferenceProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_conference_provider::UpdateConferenceProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_conference_provider::UpdateConferenceProviderError> for Error {
    fn from(
        err: crate::operation::update_conference_provider::UpdateConferenceProviderError,
    ) -> Self {
        match err {
            crate::operation::update_conference_provider::UpdateConferenceProviderError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_conference_provider::UpdateConferenceProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_contact::UpdateContactError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_contact::UpdateContactError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_contact::UpdateContactError> for Error {
    fn from(err: crate::operation::update_contact::UpdateContactError) -> Self {
        match err {
            crate::operation::update_contact::UpdateContactError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_contact::UpdateContactError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_contact::UpdateContactError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_device::UpdateDeviceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_device::UpdateDeviceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_device::UpdateDeviceError> for Error {
    fn from(err: crate::operation::update_device::UpdateDeviceError) -> Self {
        match err {
            crate::operation::update_device::UpdateDeviceError::ConcurrentModificationException(
                inner,
            ) => Error::ConcurrentModificationException(inner),
            crate::operation::update_device::UpdateDeviceError::DeviceNotRegisteredException(
                inner,
            ) => Error::DeviceNotRegisteredException(inner),
            crate::operation::update_device::UpdateDeviceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_device::UpdateDeviceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_gateway::UpdateGatewayError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_gateway::UpdateGatewayError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_gateway::UpdateGatewayError> for Error {
    fn from(err: crate::operation::update_gateway::UpdateGatewayError) -> Self {
        match err {
            crate::operation::update_gateway::UpdateGatewayError::NameInUseException(inner) => {
                Error::NameInUseException(inner)
            }
            crate::operation::update_gateway::UpdateGatewayError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_gateway::UpdateGatewayError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_gateway_group::UpdateGatewayGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_gateway_group::UpdateGatewayGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_gateway_group::UpdateGatewayGroupError> for Error {
    fn from(err: crate::operation::update_gateway_group::UpdateGatewayGroupError) -> Self {
        match err {
            crate::operation::update_gateway_group::UpdateGatewayGroupError::NameInUseException(
                inner,
            ) => Error::NameInUseException(inner),
            crate::operation::update_gateway_group::UpdateGatewayGroupError::NotFoundException(
                inner,
            ) => Error::NotFoundException(inner),
            crate::operation::update_gateway_group::UpdateGatewayGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_network_profile::UpdateNetworkProfileError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_network_profile::UpdateNetworkProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_network_profile::UpdateNetworkProfileError> for Error {
    fn from(err: crate::operation::update_network_profile::UpdateNetworkProfileError) -> Self {
        match err {
            crate::operation::update_network_profile::UpdateNetworkProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_network_profile::UpdateNetworkProfileError::InvalidCertificateAuthorityException(inner) => Error::InvalidCertificateAuthorityException(inner),
            crate::operation::update_network_profile::UpdateNetworkProfileError::InvalidSecretsManagerResourceException(inner) => Error::InvalidSecretsManagerResourceException(inner),
            crate::operation::update_network_profile::UpdateNetworkProfileError::NameInUseException(inner) => Error::NameInUseException(inner),
            crate::operation::update_network_profile::UpdateNetworkProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_network_profile::UpdateNetworkProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_profile::UpdateProfileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_profile::UpdateProfileError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_profile::UpdateProfileError> for Error {
    fn from(err: crate::operation::update_profile::UpdateProfileError) -> Self {
        match err {
            crate::operation::update_profile::UpdateProfileError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_profile::UpdateProfileError::NameInUseException(inner) => Error::NameInUseException(inner),
            crate::operation::update_profile::UpdateProfileError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_profile::UpdateProfileError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_room::UpdateRoomError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_room::UpdateRoomError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_room::UpdateRoomError> for Error {
    fn from(err: crate::operation::update_room::UpdateRoomError) -> Self {
        match err {
            crate::operation::update_room::UpdateRoomError::NameInUseException(inner) => {
                Error::NameInUseException(inner)
            }
            crate::operation::update_room::UpdateRoomError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_room::UpdateRoomError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_skill_group::UpdateSkillGroupError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_skill_group::UpdateSkillGroupError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_skill_group::UpdateSkillGroupError> for Error {
    fn from(err: crate::operation::update_skill_group::UpdateSkillGroupError) -> Self {
        match err {
            crate::operation::update_skill_group::UpdateSkillGroupError::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
            crate::operation::update_skill_group::UpdateSkillGroupError::NameInUseException(inner) => Error::NameInUseException(inner),
            crate::operation::update_skill_group::UpdateSkillGroupError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_skill_group::UpdateSkillGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AlreadyExistsException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::DeviceNotRegisteredException(e) => e.request_id(),
            Self::InvalidCertificateAuthorityException(e) => e.request_id(),
            Self::InvalidDeviceException(e) => e.request_id(),
            Self::InvalidSecretsManagerResourceException(e) => e.request_id(),
            Self::InvalidServiceLinkedRoleStateException(e) => e.request_id(),
            Self::InvalidUserStatusException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NameInUseException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ResourceAssociatedException(e) => e.request_id(),
            Self::ResourceInUseException(e) => e.request_id(),
            Self::SkillNotLinkedException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
