// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`SendAnnouncement`](crate::client::fluent_builders::SendAnnouncement) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`room_filters(Vec<Filter>)`](crate::client::fluent_builders::SendAnnouncement::room_filters) / [`set_room_filters(Option<Vec<Filter>>)`](crate::client::fluent_builders::SendAnnouncement::set_room_filters): <p>The filters to use to send an announcement to a specified list of rooms. The supported filter keys are RoomName, ProfileName, RoomArn, and ProfileArn. To send to all rooms, specify an empty RoomFilters list.</p>
    ///   - [`content(Content)`](crate::client::fluent_builders::SendAnnouncement::content) / [`set_content(Option<Content>)`](crate::client::fluent_builders::SendAnnouncement::set_content): <p>The announcement content. This can contain only one of the three possible announcement types (text, SSML or audio).</p>
    ///   - [`time_to_live_in_seconds(i32)`](crate::client::fluent_builders::SendAnnouncement::time_to_live_in_seconds) / [`set_time_to_live_in_seconds(Option<i32>)`](crate::client::fluent_builders::SendAnnouncement::set_time_to_live_in_seconds): <p>The time to live for an announcement. Default is 300. If delivery doesn't occur within this time, the announcement is not delivered.</p>
    ///   - [`client_request_token(impl Into<String>)`](crate::client::fluent_builders::SendAnnouncement::client_request_token) / [`set_client_request_token(Option<String>)`](crate::client::fluent_builders::SendAnnouncement::set_client_request_token): <p>The unique, user-specified identifier for the request that ensures idempotency.</p>
    /// - On success, responds with [`SendAnnouncementOutput`](crate::output::SendAnnouncementOutput) with field(s):
    ///   - [`announcement_arn(Option<String>)`](crate::output::SendAnnouncementOutput::announcement_arn): <p>The identifier of the announcement.</p>
    /// - On failure, responds with [`SdkError<SendAnnouncementError>`](crate::error::SendAnnouncementError)
    pub fn send_announcement(&self) -> crate::client::fluent_builders::SendAnnouncement {
        crate::client::fluent_builders::SendAnnouncement::new(self.handle.clone())
    }
}
