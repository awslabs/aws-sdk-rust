// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutSkillAuthorization`](crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`authorization_result(HashMap<String, String>)`](crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder::authorization_result) / [`set_authorization_result(Option<HashMap<String, String>>)`](crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder::set_authorization_result): <p>The authorization result specific to OAUTH code grant output. "Code‚Äù must be populated in the AuthorizationResult map to establish the authorization.</p>
    ///   - [`skill_id(impl Into<String>)`](crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder::skill_id) / [`set_skill_id(Option<String>)`](crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder::set_skill_id): <p>The unique identifier of a skill.</p>
    ///   - [`room_arn(impl Into<String>)`](crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder::room_arn) / [`set_room_arn(Option<String>)`](crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder::set_room_arn): <p>The room that the skill is authorized for.</p>
    /// - On success, responds with [`PutSkillAuthorizationOutput`](crate::operation::put_skill_authorization::PutSkillAuthorizationOutput)
    /// - On failure, responds with [`SdkError<PutSkillAuthorizationError>`](crate::operation::put_skill_authorization::PutSkillAuthorizationError)
    pub fn put_skill_authorization(
        &self,
    ) -> crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder
    {
        crate::operation::put_skill_authorization::builders::PutSkillAuthorizationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
