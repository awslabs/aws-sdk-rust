// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateNetworkProfileInput {
    /// <p>The name of the network profile associated with a device.</p>
    #[doc(hidden)]
    pub network_profile_name: std::option::Option<std::string::String>,
    /// <p>Detailed information about a device's network profile.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The SSID of the Wi-Fi network.</p>
    #[doc(hidden)]
    pub ssid: std::option::Option<std::string::String>,
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    #[doc(hidden)]
    pub security_type: std::option::Option<crate::types::NetworkSecurityType>,
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported.</p>
    #[doc(hidden)]
    pub eap_method: std::option::Option<crate::types::NetworkEapMethod>,
    /// <p>The current password of the Wi-Fi network.</p>
    #[doc(hidden)]
    pub current_password: std::option::Option<std::string::String>,
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    #[doc(hidden)]
    pub next_password: std::option::Option<std::string::String>,
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    #[doc(hidden)]
    pub certificate_authority_arn: std::option::Option<std::string::String>,
    /// <p>The root certificates of your authentication server that is installed on your devices and used to trust your authentication server during EAP negotiation. </p>
    #[doc(hidden)]
    pub trust_anchors: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>A unique, user-specified identifier for the request that ensures idempotency.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The tags to be added to the specified resource. Do not provide system tags. </p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateNetworkProfileInput {
    /// <p>The name of the network profile associated with a device.</p>
    pub fn network_profile_name(&self) -> std::option::Option<&str> {
        self.network_profile_name.as_deref()
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn ssid(&self) -> std::option::Option<&str> {
        self.ssid.as_deref()
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn security_type(&self) -> std::option::Option<&crate::types::NetworkSecurityType> {
        self.security_type.as_ref()
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported.</p>
    pub fn eap_method(&self) -> std::option::Option<&crate::types::NetworkEapMethod> {
        self.eap_method.as_ref()
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn current_password(&self) -> std::option::Option<&str> {
        self.current_password.as_deref()
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn next_password(&self) -> std::option::Option<&str> {
        self.next_password.as_deref()
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn certificate_authority_arn(&self) -> std::option::Option<&str> {
        self.certificate_authority_arn.as_deref()
    }
    /// <p>The root certificates of your authentication server that is installed on your devices and used to trust your authentication server during EAP negotiation. </p>
    pub fn trust_anchors(&self) -> std::option::Option<&[std::string::String]> {
        self.trust_anchors.as_deref()
    }
    /// <p>A unique, user-specified identifier for the request that ensures idempotency.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags. </p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl std::fmt::Debug for CreateNetworkProfileInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkProfileInput");
        formatter.field("network_profile_name", &self.network_profile_name);
        formatter.field("description", &self.description);
        formatter.field("ssid", &self.ssid);
        formatter.field("security_type", &self.security_type);
        formatter.field("eap_method", &self.eap_method);
        formatter.field("current_password", &"*** Sensitive Data Redacted ***");
        formatter.field("next_password", &"*** Sensitive Data Redacted ***");
        formatter.field("certificate_authority_arn", &self.certificate_authority_arn);
        formatter.field("trust_anchors", &self.trust_anchors);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
impl CreateNetworkProfileInput {
    /// Creates a new builder-style object to manufacture [`CreateNetworkProfileInput`](crate::operation::create_network_profile::CreateNetworkProfileInput).
    pub fn builder(
    ) -> crate::operation::create_network_profile::builders::CreateNetworkProfileInputBuilder {
        crate::operation::create_network_profile::builders::CreateNetworkProfileInputBuilder::default()
    }
}

/// A builder for [`CreateNetworkProfileInput`](crate::operation::create_network_profile::CreateNetworkProfileInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateNetworkProfileInputBuilder {
    pub(crate) network_profile_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) ssid: std::option::Option<std::string::String>,
    pub(crate) security_type: std::option::Option<crate::types::NetworkSecurityType>,
    pub(crate) eap_method: std::option::Option<crate::types::NetworkEapMethod>,
    pub(crate) current_password: std::option::Option<std::string::String>,
    pub(crate) next_password: std::option::Option<std::string::String>,
    pub(crate) certificate_authority_arn: std::option::Option<std::string::String>,
    pub(crate) trust_anchors: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateNetworkProfileInputBuilder {
    /// <p>The name of the network profile associated with a device.</p>
    pub fn network_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_profile_name = Some(input.into());
        self
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn set_network_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_profile_name = input;
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn ssid(mut self, input: impl Into<std::string::String>) -> Self {
        self.ssid = Some(input.into());
        self
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn set_ssid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ssid = input;
        self
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn security_type(mut self, input: crate::types::NetworkSecurityType) -> Self {
        self.security_type = Some(input);
        self
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn set_security_type(
        mut self,
        input: std::option::Option<crate::types::NetworkSecurityType>,
    ) -> Self {
        self.security_type = input;
        self
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported.</p>
    pub fn eap_method(mut self, input: crate::types::NetworkEapMethod) -> Self {
        self.eap_method = Some(input);
        self
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported.</p>
    pub fn set_eap_method(
        mut self,
        input: std::option::Option<crate::types::NetworkEapMethod>,
    ) -> Self {
        self.eap_method = input;
        self
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn current_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_password = Some(input.into());
        self
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn set_current_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.current_password = input;
        self
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn next_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_password = Some(input.into());
        self
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn set_next_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_password = input;
        self
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn certificate_authority_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_authority_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn set_certificate_authority_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.certificate_authority_arn = input;
        self
    }
    /// Appends an item to `trust_anchors`.
    ///
    /// To override the contents of this collection use [`set_trust_anchors`](Self::set_trust_anchors).
    ///
    /// <p>The root certificates of your authentication server that is installed on your devices and used to trust your authentication server during EAP negotiation. </p>
    pub fn trust_anchors(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.trust_anchors.unwrap_or_default();
        v.push(input.into());
        self.trust_anchors = Some(v);
        self
    }
    /// <p>The root certificates of your authentication server that is installed on your devices and used to trust your authentication server during EAP negotiation. </p>
    pub fn set_trust_anchors(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.trust_anchors = input;
        self
    }
    /// <p>A unique, user-specified identifier for the request that ensures idempotency.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>A unique, user-specified identifier for the request that ensures idempotency.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be added to the specified resource. Do not provide system tags. </p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags. </p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateNetworkProfileInput`](crate::operation::create_network_profile::CreateNetworkProfileInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_network_profile::CreateNetworkProfileInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_network_profile::CreateNetworkProfileInput {
                network_profile_name: self.network_profile_name,
                description: self.description,
                ssid: self.ssid,
                security_type: self.security_type,
                eap_method: self.eap_method,
                current_password: self.current_password,
                next_password: self.next_password,
                certificate_authority_arn: self.certificate_authority_arn,
                trust_anchors: self.trust_anchors,
                client_request_token: self.client_request_token,
                tags: self.tags,
            },
        )
    }
}
impl std::fmt::Debug for CreateNetworkProfileInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateNetworkProfileInputBuilder");
        formatter.field("network_profile_name", &self.network_profile_name);
        formatter.field("description", &self.description);
        formatter.field("ssid", &self.ssid);
        formatter.field("security_type", &self.security_type);
        formatter.field("eap_method", &self.eap_method);
        formatter.field("current_password", &"*** Sensitive Data Redacted ***");
        formatter.field("next_password", &"*** Sensitive Data Redacted ***");
        formatter.field("certificate_authority_arn", &self.certificate_authority_arn);
        formatter.field("trust_anchors", &self.trust_anchors);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.field("tags", &self.tags);
        formatter.finish()
    }
}
