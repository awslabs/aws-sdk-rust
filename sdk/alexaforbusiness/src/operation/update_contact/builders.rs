// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_contact::_update_contact_output::UpdateContactOutputBuilder;

pub use crate::operation::update_contact::_update_contact_input::UpdateContactInputBuilder;

impl crate::operation::update_contact::builders::UpdateContactInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_contact::UpdateContactOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_contact::UpdateContactError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_contact();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateContact`.
///
/// <p>Updates the contact details by the contact ARN.</p>
#[deprecated(note = "Alexa For Business is no longer supported")]
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateContactFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_contact::builders::UpdateContactInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_contact::UpdateContactOutput,
        crate::operation::update_contact::UpdateContactError,
    > for UpdateContactFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_contact::UpdateContactOutput,
            crate::operation::update_contact::UpdateContactError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateContactFluentBuilder {
    /// Creates a new `UpdateContact`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateContact as a reference.
    pub fn as_input(&self) -> &crate::operation::update_contact::builders::UpdateContactInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_contact::UpdateContactOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_contact::UpdateContactError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_contact::UpdateContact::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_contact::UpdateContact::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_contact::UpdateContactOutput,
        crate::operation::update_contact::UpdateContactError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the contact to update.</p>
    pub fn contact_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.contact_arn(input.into());
        self
    }
    /// <p>The ARN of the contact to update.</p>
    pub fn set_contact_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_contact_arn(input);
        self
    }
    /// <p>The ARN of the contact to update.</p>
    pub fn get_contact_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_contact_arn()
    }
    /// <p>The updated display name of the contact.</p>
    pub fn display_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.display_name(input.into());
        self
    }
    /// <p>The updated display name of the contact.</p>
    pub fn set_display_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_display_name(input);
        self
    }
    /// <p>The updated display name of the contact.</p>
    pub fn get_display_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_display_name()
    }
    /// <p>The updated first name of the contact.</p>
    pub fn first_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.first_name(input.into());
        self
    }
    /// <p>The updated first name of the contact.</p>
    pub fn set_first_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_first_name(input);
        self
    }
    /// <p>The updated first name of the contact.</p>
    pub fn get_first_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_first_name()
    }
    /// <p>The updated last name of the contact.</p>
    pub fn last_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.last_name(input.into());
        self
    }
    /// <p>The updated last name of the contact.</p>
    pub fn set_last_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_last_name(input);
        self
    }
    /// <p>The updated last name of the contact.</p>
    pub fn get_last_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_last_name()
    }
    /// <p>The updated phone number of the contact. The phone number type defaults to WORK. You can either specify PhoneNumber or PhoneNumbers. We recommend that you use PhoneNumbers, which lets you specify the phone number type and multiple numbers.</p>
    pub fn phone_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.phone_number(input.into());
        self
    }
    /// <p>The updated phone number of the contact. The phone number type defaults to WORK. You can either specify PhoneNumber or PhoneNumbers. We recommend that you use PhoneNumbers, which lets you specify the phone number type and multiple numbers.</p>
    pub fn set_phone_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_phone_number(input);
        self
    }
    /// <p>The updated phone number of the contact. The phone number type defaults to WORK. You can either specify PhoneNumber or PhoneNumbers. We recommend that you use PhoneNumbers, which lets you specify the phone number type and multiple numbers.</p>
    pub fn get_phone_number(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_phone_number()
    }
    ///
    /// Appends an item to `PhoneNumbers`.
    ///
    /// To override the contents of this collection use [`set_phone_numbers`](Self::set_phone_numbers).
    ///
    /// <p>The list of phone numbers for the contact.</p>
    pub fn phone_numbers(mut self, input: crate::types::PhoneNumber) -> Self {
        self.inner = self.inner.phone_numbers(input);
        self
    }
    /// <p>The list of phone numbers for the contact.</p>
    pub fn set_phone_numbers(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PhoneNumber>>) -> Self {
        self.inner = self.inner.set_phone_numbers(input);
        self
    }
    /// <p>The list of phone numbers for the contact.</p>
    pub fn get_phone_numbers(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PhoneNumber>> {
        self.inner.get_phone_numbers()
    }
    ///
    /// Appends an item to `SipAddresses`.
    ///
    /// To override the contents of this collection use [`set_sip_addresses`](Self::set_sip_addresses).
    ///
    /// <p>The list of SIP addresses for the contact.</p>
    pub fn sip_addresses(mut self, input: crate::types::SipAddress) -> Self {
        self.inner = self.inner.sip_addresses(input);
        self
    }
    /// <p>The list of SIP addresses for the contact.</p>
    pub fn set_sip_addresses(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SipAddress>>) -> Self {
        self.inner = self.inner.set_sip_addresses(input);
        self
    }
    /// <p>The list of SIP addresses for the contact.</p>
    pub fn get_sip_addresses(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SipAddress>> {
        self.inner.get_sip_addresses()
    }
}
