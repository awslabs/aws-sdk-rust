// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateConferenceProviderInput {
    /// <p>The name of the conference provider.</p>
    pub conference_provider_name: ::std::option::Option<::std::string::String>,
    /// <p>Represents a type within a list of predefined types.</p>
    pub conference_provider_type: ::std::option::Option<crate::types::ConferenceProviderType>,
    /// <p>The IP endpoint and protocol for calling.</p>
    pub ip_dial_in: ::std::option::Option<crate::types::IpDialIn>,
    /// <p>The information for PSTN conferencing.</p>
    pub pstn_dial_in: ::std::option::Option<crate::types::PstnDialIn>,
    /// <p>The meeting settings for the conference provider.</p>
    pub meeting_setting: ::std::option::Option<crate::types::MeetingSetting>,
    /// <p>The request token of the client.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateConferenceProviderInput {
    /// <p>The name of the conference provider.</p>
    pub fn conference_provider_name(&self) -> ::std::option::Option<&str> {
        self.conference_provider_name.as_deref()
    }
    /// <p>Represents a type within a list of predefined types.</p>
    pub fn conference_provider_type(&self) -> ::std::option::Option<&crate::types::ConferenceProviderType> {
        self.conference_provider_type.as_ref()
    }
    /// <p>The IP endpoint and protocol for calling.</p>
    pub fn ip_dial_in(&self) -> ::std::option::Option<&crate::types::IpDialIn> {
        self.ip_dial_in.as_ref()
    }
    /// <p>The information for PSTN conferencing.</p>
    pub fn pstn_dial_in(&self) -> ::std::option::Option<&crate::types::PstnDialIn> {
        self.pstn_dial_in.as_ref()
    }
    /// <p>The meeting settings for the conference provider.</p>
    pub fn meeting_setting(&self) -> ::std::option::Option<&crate::types::MeetingSetting> {
        self.meeting_setting.as_ref()
    }
    /// <p>The request token of the client.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl CreateConferenceProviderInput {
    /// Creates a new builder-style object to manufacture [`CreateConferenceProviderInput`](crate::operation::create_conference_provider::CreateConferenceProviderInput).
    pub fn builder() -> crate::operation::create_conference_provider::builders::CreateConferenceProviderInputBuilder {
        crate::operation::create_conference_provider::builders::CreateConferenceProviderInputBuilder::default()
    }
}

/// A builder for [`CreateConferenceProviderInput`](crate::operation::create_conference_provider::CreateConferenceProviderInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateConferenceProviderInputBuilder {
    pub(crate) conference_provider_name: ::std::option::Option<::std::string::String>,
    pub(crate) conference_provider_type: ::std::option::Option<crate::types::ConferenceProviderType>,
    pub(crate) ip_dial_in: ::std::option::Option<crate::types::IpDialIn>,
    pub(crate) pstn_dial_in: ::std::option::Option<crate::types::PstnDialIn>,
    pub(crate) meeting_setting: ::std::option::Option<crate::types::MeetingSetting>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl CreateConferenceProviderInputBuilder {
    /// <p>The name of the conference provider.</p>
    /// This field is required.
    pub fn conference_provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.conference_provider_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the conference provider.</p>
    pub fn set_conference_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.conference_provider_name = input;
        self
    }
    /// <p>The name of the conference provider.</p>
    pub fn get_conference_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.conference_provider_name
    }
    /// <p>Represents a type within a list of predefined types.</p>
    /// This field is required.
    pub fn conference_provider_type(mut self, input: crate::types::ConferenceProviderType) -> Self {
        self.conference_provider_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Represents a type within a list of predefined types.</p>
    pub fn set_conference_provider_type(mut self, input: ::std::option::Option<crate::types::ConferenceProviderType>) -> Self {
        self.conference_provider_type = input;
        self
    }
    /// <p>Represents a type within a list of predefined types.</p>
    pub fn get_conference_provider_type(&self) -> &::std::option::Option<crate::types::ConferenceProviderType> {
        &self.conference_provider_type
    }
    /// <p>The IP endpoint and protocol for calling.</p>
    pub fn ip_dial_in(mut self, input: crate::types::IpDialIn) -> Self {
        self.ip_dial_in = ::std::option::Option::Some(input);
        self
    }
    /// <p>The IP endpoint and protocol for calling.</p>
    pub fn set_ip_dial_in(mut self, input: ::std::option::Option<crate::types::IpDialIn>) -> Self {
        self.ip_dial_in = input;
        self
    }
    /// <p>The IP endpoint and protocol for calling.</p>
    pub fn get_ip_dial_in(&self) -> &::std::option::Option<crate::types::IpDialIn> {
        &self.ip_dial_in
    }
    /// <p>The information for PSTN conferencing.</p>
    pub fn pstn_dial_in(mut self, input: crate::types::PstnDialIn) -> Self {
        self.pstn_dial_in = ::std::option::Option::Some(input);
        self
    }
    /// <p>The information for PSTN conferencing.</p>
    pub fn set_pstn_dial_in(mut self, input: ::std::option::Option<crate::types::PstnDialIn>) -> Self {
        self.pstn_dial_in = input;
        self
    }
    /// <p>The information for PSTN conferencing.</p>
    pub fn get_pstn_dial_in(&self) -> &::std::option::Option<crate::types::PstnDialIn> {
        &self.pstn_dial_in
    }
    /// <p>The meeting settings for the conference provider.</p>
    /// This field is required.
    pub fn meeting_setting(mut self, input: crate::types::MeetingSetting) -> Self {
        self.meeting_setting = ::std::option::Option::Some(input);
        self
    }
    /// <p>The meeting settings for the conference provider.</p>
    pub fn set_meeting_setting(mut self, input: ::std::option::Option<crate::types::MeetingSetting>) -> Self {
        self.meeting_setting = input;
        self
    }
    /// <p>The meeting settings for the conference provider.</p>
    pub fn get_meeting_setting(&self) -> &::std::option::Option<crate::types::MeetingSetting> {
        &self.meeting_setting
    }
    /// <p>The request token of the client.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The request token of the client.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The request token of the client.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateConferenceProviderInput`](crate::operation::create_conference_provider::CreateConferenceProviderInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_conference_provider::CreateConferenceProviderInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_conference_provider::CreateConferenceProviderInput {
            conference_provider_name: self.conference_provider_name,
            conference_provider_type: self.conference_provider_type,
            ip_dial_in: self.ip_dial_in,
            pstn_dial_in: self.pstn_dial_in,
            meeting_setting: self.meeting_setting,
            client_request_token: self.client_request_token,
            tags: self.tags,
        })
    }
}
