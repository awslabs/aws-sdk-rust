// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_network_profile::_update_network_profile_output::UpdateNetworkProfileOutputBuilder;

pub use crate::operation::update_network_profile::_update_network_profile_input::UpdateNetworkProfileInputBuilder;

/// Fluent builder constructing a request to `UpdateNetworkProfile`.
///
/// <p>Updates a network profile by the network profile ARN.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNetworkProfileFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_network_profile::builders::UpdateNetworkProfileInputBuilder,
}
impl UpdateNetworkProfileFluentBuilder {
    /// Creates a new `UpdateNetworkProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_network_profile::UpdateNetworkProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_network_profile::UpdateNetworkProfileError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_network_profile::UpdateNetworkProfileOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_network_profile::UpdateNetworkProfileError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn network_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_profile_arn(input.into());
        self
    }
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn set_network_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_network_profile_arn(input);
        self
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn network_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.network_profile_name(input.into());
        self
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn set_network_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_network_profile_name(input);
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.description(input.into());
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_description(input);
        self
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn current_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.current_password(input.into());
        self
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn set_current_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_current_password(input);
        self
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn next_password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_password(input.into());
        self
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn set_next_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_password(input);
        self
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn certificate_authority_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.certificate_authority_arn(input.into());
        self
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn set_certificate_authority_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_certificate_authority_arn(input);
        self
    }
    /// Appends an item to `TrustAnchors`.
    ///
    /// To override the contents of this collection use [`set_trust_anchors`](Self::set_trust_anchors).
    ///
    /// <p>The root certificate(s) of your authentication server that will be installed on your devices and used to trust your authentication server during EAP negotiation. </p>
    pub fn trust_anchors(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.trust_anchors(input.into());
        self
    }
    /// <p>The root certificate(s) of your authentication server that will be installed on your devices and used to trust your authentication server during EAP negotiation. </p>
    pub fn set_trust_anchors(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_trust_anchors(input);
        self
    }
}
