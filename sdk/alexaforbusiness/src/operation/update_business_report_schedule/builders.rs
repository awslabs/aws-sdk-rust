// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_business_report_schedule::_update_business_report_schedule_output::UpdateBusinessReportScheduleOutputBuilder;

pub use crate::operation::update_business_report_schedule::_update_business_report_schedule_input::UpdateBusinessReportScheduleInputBuilder;

impl crate::operation::update_business_report_schedule::builders::UpdateBusinessReportScheduleInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_business_report_schedule();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateBusinessReportSchedule`.
///
/// <p>Updates the configuration of the report delivery schedule with the specified schedule ARN.</p>
#[deprecated(note = "Alexa For Business is no longer supported")]
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateBusinessReportScheduleFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_business_report_schedule::builders::UpdateBusinessReportScheduleInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleOutput,
        crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError,
    > for UpdateBusinessReportScheduleFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleOutput,
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateBusinessReportScheduleFluentBuilder {
    /// Creates a new `UpdateBusinessReportSchedule`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateBusinessReportSchedule as a reference.
    pub fn as_input(&self) -> &crate::operation::update_business_report_schedule::builders::UpdateBusinessReportScheduleInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_business_report_schedule::UpdateBusinessReportSchedule::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_business_report_schedule::UpdateBusinessReportSchedule::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleOutput,
        crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the business report schedule.</p>
    pub fn schedule_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.schedule_arn(input.into());
        self
    }
    /// <p>The ARN of the business report schedule.</p>
    pub fn set_schedule_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_schedule_arn(input);
        self
    }
    /// <p>The ARN of the business report schedule.</p>
    pub fn get_schedule_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_schedule_arn()
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn s3_bucket_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.s3_bucket_name(input.into());
        self
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn set_s3_bucket_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_s3_bucket_name(input);
        self
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn get_s3_bucket_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_s3_bucket_name()
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn s3_key_prefix(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.s3_key_prefix(input.into());
        self
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn set_s3_key_prefix(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_s3_key_prefix(input);
        self
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn get_s3_key_prefix(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_s3_key_prefix()
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn format(mut self, input: crate::types::BusinessReportFormat) -> Self {
        self.inner = self.inner.format(input);
        self
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::BusinessReportFormat>) -> Self {
        self.inner = self.inner.set_format(input);
        self
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::BusinessReportFormat> {
        self.inner.get_format()
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn schedule_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.schedule_name(input.into());
        self
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn set_schedule_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_schedule_name(input);
        self
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn get_schedule_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_schedule_name()
    }
    /// <p>The recurrence of the reports.</p>
    pub fn recurrence(mut self, input: crate::types::BusinessReportRecurrence) -> Self {
        self.inner = self.inner.recurrence(input);
        self
    }
    /// <p>The recurrence of the reports.</p>
    pub fn set_recurrence(mut self, input: ::std::option::Option<crate::types::BusinessReportRecurrence>) -> Self {
        self.inner = self.inner.set_recurrence(input);
        self
    }
    /// <p>The recurrence of the reports.</p>
    pub fn get_recurrence(&self) -> &::std::option::Option<crate::types::BusinessReportRecurrence> {
        self.inner.get_recurrence()
    }
}
