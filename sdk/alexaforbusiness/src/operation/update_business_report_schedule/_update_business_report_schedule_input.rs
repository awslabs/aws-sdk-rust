// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateBusinessReportScheduleInput {
    /// <p>The ARN of the business report schedule.</p>
    #[doc(hidden)]
    pub schedule_arn: std::option::Option<std::string::String>,
    /// <p>The S3 location of the output reports.</p>
    #[doc(hidden)]
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The S3 key where the report is delivered.</p>
    #[doc(hidden)]
    pub s3_key_prefix: std::option::Option<std::string::String>,
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::BusinessReportFormat>,
    /// <p>The name identifier of the schedule.</p>
    #[doc(hidden)]
    pub schedule_name: std::option::Option<std::string::String>,
    /// <p>The recurrence of the reports.</p>
    #[doc(hidden)]
    pub recurrence: std::option::Option<crate::types::BusinessReportRecurrence>,
}
impl UpdateBusinessReportScheduleInput {
    /// <p>The ARN of the business report schedule.</p>
    pub fn schedule_arn(&self) -> std::option::Option<&str> {
        self.schedule_arn.as_deref()
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn s3_bucket_name(&self) -> std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn s3_key_prefix(&self) -> std::option::Option<&str> {
        self.s3_key_prefix.as_deref()
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn format(&self) -> std::option::Option<&crate::types::BusinessReportFormat> {
        self.format.as_ref()
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn schedule_name(&self) -> std::option::Option<&str> {
        self.schedule_name.as_deref()
    }
    /// <p>The recurrence of the reports.</p>
    pub fn recurrence(&self) -> std::option::Option<&crate::types::BusinessReportRecurrence> {
        self.recurrence.as_ref()
    }
}
impl UpdateBusinessReportScheduleInput {
    /// Creates a new builder-style object to manufacture [`UpdateBusinessReportScheduleInput`](crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleInput).
    pub fn builder() -> crate::operation::update_business_report_schedule::builders::UpdateBusinessReportScheduleInputBuilder{
        crate::operation::update_business_report_schedule::builders::UpdateBusinessReportScheduleInputBuilder::default()
    }
}

/// A builder for [`UpdateBusinessReportScheduleInput`](crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateBusinessReportScheduleInputBuilder {
    pub(crate) schedule_arn: std::option::Option<std::string::String>,
    pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
    pub(crate) s3_key_prefix: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::BusinessReportFormat>,
    pub(crate) schedule_name: std::option::Option<std::string::String>,
    pub(crate) recurrence: std::option::Option<crate::types::BusinessReportRecurrence>,
}
impl UpdateBusinessReportScheduleInputBuilder {
    /// <p>The ARN of the business report schedule.</p>
    pub fn schedule_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the business report schedule.</p>
    pub fn set_schedule_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schedule_arn = input;
        self
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_name = Some(input.into());
        self
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn set_s3_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn s3_key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_key_prefix = Some(input.into());
        self
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn set_s3_key_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_key_prefix = input;
        self
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn format(mut self, input: crate::types::BusinessReportFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn set_format(
        mut self,
        input: std::option::Option<crate::types::BusinessReportFormat>,
    ) -> Self {
        self.format = input;
        self
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_name = Some(input.into());
        self
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn set_schedule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schedule_name = input;
        self
    }
    /// <p>The recurrence of the reports.</p>
    pub fn recurrence(mut self, input: crate::types::BusinessReportRecurrence) -> Self {
        self.recurrence = Some(input);
        self
    }
    /// <p>The recurrence of the reports.</p>
    pub fn set_recurrence(
        mut self,
        input: std::option::Option<crate::types::BusinessReportRecurrence>,
    ) -> Self {
        self.recurrence = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateBusinessReportScheduleInput`](crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_business_report_schedule::UpdateBusinessReportScheduleInput {
                schedule_arn: self.schedule_arn,
                s3_bucket_name: self.s3_bucket_name,
                s3_key_prefix: self.s3_key_prefix,
                format: self.format,
                schedule_name: self.schedule_name,
                recurrence: self.recurrence,
            },
        )
    }
}
