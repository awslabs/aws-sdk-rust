// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_device_usage_data::_delete_device_usage_data_output::DeleteDeviceUsageDataOutputBuilder;

pub use crate::operation::delete_device_usage_data::_delete_device_usage_data_input::DeleteDeviceUsageDataInputBuilder;

/// Fluent builder constructing a request to `DeleteDeviceUsageData`.
///
/// <p>When this action is called for a specified shared device, it allows authorized users to delete the device's entire previous history of voice input data and associated response data. This action can be called once every 24 hours for a specific shared device.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteDeviceUsageDataFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_device_usage_data::builders::DeleteDeviceUsageDataInputBuilder,
}
impl DeleteDeviceUsageDataFluentBuilder {
    /// Creates a new `DeleteDeviceUsageData`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_device_usage_data::DeleteDeviceUsageData,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_device_usage_data::DeleteDeviceUsageDataOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_device_usage_data::DeleteDeviceUsageDataError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the device.</p>
    pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.device_arn(input.into());
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_device_arn(input);
        self
    }
    /// <p>The type of usage data to delete.</p>
    pub fn device_usage_type(mut self, input: crate::types::DeviceUsageType) -> Self {
        self.inner = self.inner.device_usage_type(input);
        self
    }
    /// <p>The type of usage data to delete.</p>
    pub fn set_device_usage_type(
        mut self,
        input: std::option::Option<crate::types::DeviceUsageType>,
    ) -> Self {
        self.inner = self.inner.set_device_usage_type(input);
        self
    }
}
