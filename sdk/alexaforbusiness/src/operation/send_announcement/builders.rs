// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::send_announcement::_send_announcement_output::SendAnnouncementOutputBuilder;

pub use crate::operation::send_announcement::_send_announcement_input::SendAnnouncementInputBuilder;

/// Fluent builder constructing a request to `SendAnnouncement`.
///
/// <p>Triggers an asynchronous flow to send text, SSML, or audio announcements to rooms that are identified by a search or filter. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SendAnnouncementFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::send_announcement::builders::SendAnnouncementInputBuilder,
}
impl SendAnnouncementFluentBuilder {
    /// Creates a new `SendAnnouncement`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::send_announcement::SendAnnouncement,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::send_announcement::SendAnnouncementError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::send_announcement::SendAnnouncementOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::send_announcement::SendAnnouncementError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `RoomFilters`.
    ///
    /// To override the contents of this collection use [`set_room_filters`](Self::set_room_filters).
    ///
    /// <p>The filters to use to send an announcement to a specified list of rooms. The supported filter keys are RoomName, ProfileName, RoomArn, and ProfileArn. To send to all rooms, specify an empty RoomFilters list.</p>
    pub fn room_filters(mut self, input: crate::types::Filter) -> Self {
        self.inner = self.inner.room_filters(input);
        self
    }
    /// <p>The filters to use to send an announcement to a specified list of rooms. The supported filter keys are RoomName, ProfileName, RoomArn, and ProfileArn. To send to all rooms, specify an empty RoomFilters list.</p>
    pub fn set_room_filters(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Filter>>,
    ) -> Self {
        self.inner = self.inner.set_room_filters(input);
        self
    }
    /// <p>The announcement content. This can contain only one of the three possible announcement types (text, SSML or audio).</p>
    pub fn content(mut self, input: crate::types::Content) -> Self {
        self.inner = self.inner.content(input);
        self
    }
    /// <p>The announcement content. This can contain only one of the three possible announcement types (text, SSML or audio).</p>
    pub fn set_content(mut self, input: std::option::Option<crate::types::Content>) -> Self {
        self.inner = self.inner.set_content(input);
        self
    }
    /// <p>The time to live for an announcement. Default is 300. If delivery doesn't occur within this time, the announcement is not delivered.</p>
    pub fn time_to_live_in_seconds(mut self, input: i32) -> Self {
        self.inner = self.inner.time_to_live_in_seconds(input);
        self
    }
    /// <p>The time to live for an announcement. Default is 300. If delivery doesn't occur within this time, the announcement is not delivered.</p>
    pub fn set_time_to_live_in_seconds(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_time_to_live_in_seconds(input);
        self
    }
    /// <p>The unique, user-specified identifier for the request that ensures idempotency.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>The unique, user-specified identifier for the request that ensures idempotency.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
}
