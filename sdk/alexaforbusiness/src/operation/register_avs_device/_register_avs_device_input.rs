// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegisterAvsDeviceInput {
    /// <p>The client ID of the OEM used for code-based linking authorization on an AVS device.</p>
    pub client_id: ::std::option::Option<::std::string::String>,
    /// <p>The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.</p>
    pub user_code: ::std::option::Option<::std::string::String>,
    /// <p>The product ID used to identify your AVS device during authorization.</p>
    pub product_id: ::std::option::Option<::std::string::String>,
    /// <p>The key generated by the OEM that uniquely identifies a specified instance of your AVS device.</p>
    pub device_serial_number: ::std::option::Option<::std::string::String>,
    /// <p>The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.</p>
    pub amazon_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the room with which to associate your AVS device.</p>
    pub room_arn: ::std::option::Option<::std::string::String>,
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RegisterAvsDeviceInput {
    /// <p>The client ID of the OEM used for code-based linking authorization on an AVS device.</p>
    pub fn client_id(&self) -> ::std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.</p>
    pub fn user_code(&self) -> ::std::option::Option<&str> {
        self.user_code.as_deref()
    }
    /// <p>The product ID used to identify your AVS device during authorization.</p>
    pub fn product_id(&self) -> ::std::option::Option<&str> {
        self.product_id.as_deref()
    }
    /// <p>The key generated by the OEM that uniquely identifies a specified instance of your AVS device.</p>
    pub fn device_serial_number(&self) -> ::std::option::Option<&str> {
        self.device_serial_number.as_deref()
    }
    /// <p>The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.</p>
    pub fn amazon_id(&self) -> ::std::option::Option<&str> {
        self.amazon_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the room with which to associate your AVS device.</p>
    pub fn room_arn(&self) -> ::std::option::Option<&str> {
        self.room_arn.as_deref()
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl RegisterAvsDeviceInput {
    /// Creates a new builder-style object to manufacture [`RegisterAvsDeviceInput`](crate::operation::register_avs_device::RegisterAvsDeviceInput).
    pub fn builder() -> crate::operation::register_avs_device::builders::RegisterAvsDeviceInputBuilder {
        crate::operation::register_avs_device::builders::RegisterAvsDeviceInputBuilder::default()
    }
}

/// A builder for [`RegisterAvsDeviceInput`](crate::operation::register_avs_device::RegisterAvsDeviceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegisterAvsDeviceInputBuilder {
    pub(crate) client_id: ::std::option::Option<::std::string::String>,
    pub(crate) user_code: ::std::option::Option<::std::string::String>,
    pub(crate) product_id: ::std::option::Option<::std::string::String>,
    pub(crate) device_serial_number: ::std::option::Option<::std::string::String>,
    pub(crate) amazon_id: ::std::option::Option<::std::string::String>,
    pub(crate) room_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
}
impl RegisterAvsDeviceInputBuilder {
    /// <p>The client ID of the OEM used for code-based linking authorization on an AVS device.</p>
    /// This field is required.
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The client ID of the OEM used for code-based linking authorization on an AVS device.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The client ID of the OEM used for code-based linking authorization on an AVS device.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_id
    }
    /// <p>The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.</p>
    /// This field is required.
    pub fn user_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.</p>
    pub fn set_user_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_code = input;
        self
    }
    /// <p>The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.</p>
    pub fn get_user_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_code
    }
    /// <p>The product ID used to identify your AVS device during authorization.</p>
    /// This field is required.
    pub fn product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The product ID used to identify your AVS device during authorization.</p>
    pub fn set_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_id = input;
        self
    }
    /// <p>The product ID used to identify your AVS device during authorization.</p>
    pub fn get_product_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_id
    }
    /// <p>The key generated by the OEM that uniquely identifies a specified instance of your AVS device.</p>
    pub fn device_serial_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_serial_number = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The key generated by the OEM that uniquely identifies a specified instance of your AVS device.</p>
    pub fn set_device_serial_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_serial_number = input;
        self
    }
    /// <p>The key generated by the OEM that uniquely identifies a specified instance of your AVS device.</p>
    pub fn get_device_serial_number(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_serial_number
    }
    /// <p>The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.</p>
    /// This field is required.
    pub fn amazon_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.amazon_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.</p>
    pub fn set_amazon_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.amazon_id = input;
        self
    }
    /// <p>The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.</p>
    pub fn get_amazon_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.amazon_id
    }
    /// <p>The Amazon Resource Name (ARN) of the room with which to associate your AVS device.</p>
    pub fn room_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.room_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the room with which to associate your AVS device.</p>
    pub fn set_room_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.room_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the room with which to associate your AVS device.</p>
    pub fn get_room_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.room_arn
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`RegisterAvsDeviceInput`](crate::operation::register_avs_device::RegisterAvsDeviceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::register_avs_device::RegisterAvsDeviceInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::register_avs_device::RegisterAvsDeviceInput {
            client_id: self.client_id,
            user_code: self.user_code,
            product_id: self.product_id,
            device_serial_number: self.device_serial_number,
            amazon_id: self.amazon_id,
            room_arn: self.room_arn,
            tags: self.tags,
        })
    }
}
