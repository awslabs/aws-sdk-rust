// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::register_avs_device::_register_avs_device_output::RegisterAvsDeviceOutputBuilder;

pub use crate::operation::register_avs_device::_register_avs_device_input::RegisterAvsDeviceInputBuilder;

impl crate::operation::register_avs_device::builders::RegisterAvsDeviceInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::register_avs_device::RegisterAvsDeviceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_avs_device::RegisterAVSDeviceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.register_avs_device();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `RegisterAVSDevice`.
///
/// <p>Registers an Alexa-enabled device built by an Original Equipment Manufacturer (OEM) using Alexa Voice Service (AVS).</p>
#[deprecated(note = "Alexa For Business is no longer supported")]
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct RegisterAVSDeviceFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::register_avs_device::builders::RegisterAvsDeviceInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::register_avs_device::RegisterAvsDeviceOutput,
        crate::operation::register_avs_device::RegisterAVSDeviceError,
    > for RegisterAVSDeviceFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::register_avs_device::RegisterAvsDeviceOutput,
            crate::operation::register_avs_device::RegisterAVSDeviceError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl RegisterAVSDeviceFluentBuilder {
    /// Creates a new `RegisterAVSDevice`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the RegisterAVSDevice as a reference.
    pub fn as_input(&self) -> &crate::operation::register_avs_device::builders::RegisterAvsDeviceInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::register_avs_device::RegisterAvsDeviceOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::register_avs_device::RegisterAVSDeviceError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::register_avs_device::RegisterAVSDevice::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::register_avs_device::RegisterAVSDevice::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::register_avs_device::RegisterAvsDeviceOutput,
        crate::operation::register_avs_device::RegisterAVSDeviceError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The client ID of the OEM used for code-based linking authorization on an AVS device.</p>
    pub fn client_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_id(input.into());
        self
    }
    /// <p>The client ID of the OEM used for code-based linking authorization on an AVS device.</p>
    pub fn set_client_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_id(input);
        self
    }
    /// <p>The client ID of the OEM used for code-based linking authorization on an AVS device.</p>
    pub fn get_client_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_id()
    }
    /// <p>The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.</p>
    pub fn user_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_code(input.into());
        self
    }
    /// <p>The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.</p>
    pub fn set_user_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_code(input);
        self
    }
    /// <p>The code that is obtained after your AVS device has made a POST request to LWA as a part of the Device Authorization Request component of the OAuth code-based linking specification.</p>
    pub fn get_user_code(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_code()
    }
    /// <p>The product ID used to identify your AVS device during authorization.</p>
    pub fn product_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.product_id(input.into());
        self
    }
    /// <p>The product ID used to identify your AVS device during authorization.</p>
    pub fn set_product_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_product_id(input);
        self
    }
    /// <p>The product ID used to identify your AVS device during authorization.</p>
    pub fn get_product_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_product_id()
    }
    /// <p>The key generated by the OEM that uniquely identifies a specified instance of your AVS device.</p>
    pub fn device_serial_number(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.device_serial_number(input.into());
        self
    }
    /// <p>The key generated by the OEM that uniquely identifies a specified instance of your AVS device.</p>
    pub fn set_device_serial_number(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_device_serial_number(input);
        self
    }
    /// <p>The key generated by the OEM that uniquely identifies a specified instance of your AVS device.</p>
    pub fn get_device_serial_number(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_device_serial_number()
    }
    /// <p>The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.</p>
    pub fn amazon_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.amazon_id(input.into());
        self
    }
    /// <p>The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.</p>
    pub fn set_amazon_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_amazon_id(input);
        self
    }
    /// <p>The device type ID for your AVS device generated by Amazon when the OEM creates a new product on Amazon's Developer Console.</p>
    pub fn get_amazon_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_amazon_id()
    }
    /// <p>The Amazon Resource Name (ARN) of the room with which to associate your AVS device.</p>
    pub fn room_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.room_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the room with which to associate your AVS device.</p>
    pub fn set_room_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_room_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the room with which to associate your AVS device.</p>
    pub fn get_room_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_room_arn()
    }
    ///
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The tags to be added to the specified resource. Do not provide system tags.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tags()
    }
}
