// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegisterAvsDeviceOutput {
    /// <p>The ARN of the device.</p>
    #[doc(hidden)]
    pub device_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RegisterAvsDeviceOutput {
    /// <p>The ARN of the device.</p>
    pub fn device_arn(&self) -> std::option::Option<&str> {
        self.device_arn.as_deref()
    }
}
impl aws_http::request_id::RequestId for RegisterAvsDeviceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl RegisterAvsDeviceOutput {
    /// Creates a new builder-style object to manufacture [`RegisterAvsDeviceOutput`](crate::operation::register_avs_device::RegisterAvsDeviceOutput).
    pub fn builder(
    ) -> crate::operation::register_avs_device::builders::RegisterAvsDeviceOutputBuilder {
        crate::operation::register_avs_device::builders::RegisterAvsDeviceOutputBuilder::default()
    }
}

/// A builder for [`RegisterAvsDeviceOutput`](crate::operation::register_avs_device::RegisterAvsDeviceOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegisterAvsDeviceOutputBuilder {
    pub(crate) device_arn: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl RegisterAvsDeviceOutputBuilder {
    /// <p>The ARN of the device.</p>
    pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`RegisterAvsDeviceOutput`](crate::operation::register_avs_device::RegisterAvsDeviceOutput).
    pub fn build(self) -> crate::operation::register_avs_device::RegisterAvsDeviceOutput {
        crate::operation::register_avs_device::RegisterAvsDeviceOutput {
            device_arn: self.device_arn,
            _request_id: self._request_id,
        }
    }
}
