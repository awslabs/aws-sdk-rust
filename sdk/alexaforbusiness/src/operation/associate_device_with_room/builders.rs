// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_device_with_room::_associate_device_with_room_output::AssociateDeviceWithRoomOutputBuilder;

pub use crate::operation::associate_device_with_room::_associate_device_with_room_input::AssociateDeviceWithRoomInputBuilder;

impl crate::operation::associate_device_with_room::builders::AssociateDeviceWithRoomInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::associate_device_with_room::AssociateDeviceWithRoomOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.associate_device_with_room();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `AssociateDeviceWithRoom`.
///
/// <p>Associates a device with a given room. This applies all the settings from the room profile to the device, and all the skills in any skill groups added to that room. This operation requires the device to be online, or else a manual sync is required.</p>
#[deprecated(note = "Alexa For Business is no longer supported")]
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct AssociateDeviceWithRoomFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::associate_device_with_room::builders::AssociateDeviceWithRoomInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::associate_device_with_room::AssociateDeviceWithRoomOutput,
        crate::operation::associate_device_with_room::AssociateDeviceWithRoomError,
    > for AssociateDeviceWithRoomFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomOutput,
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl AssociateDeviceWithRoomFluentBuilder {
    /// Creates a new `AssociateDeviceWithRoom`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the AssociateDeviceWithRoom as a reference.
    pub fn as_input(&self) -> &crate::operation::associate_device_with_room::builders::AssociateDeviceWithRoomInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::associate_device_with_room::AssociateDeviceWithRoomOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_device_with_room::AssociateDeviceWithRoomError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::associate_device_with_room::AssociateDeviceWithRoom::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::associate_device_with_room::AssociateDeviceWithRoom::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::associate_device_with_room::AssociateDeviceWithRoomOutput,
        crate::operation::associate_device_with_room::AssociateDeviceWithRoomError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the device to associate to a room. Required.</p>
    pub fn device_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.device_arn(input.into());
        self
    }
    /// <p>The ARN of the device to associate to a room. Required.</p>
    pub fn set_device_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_device_arn(input);
        self
    }
    /// <p>The ARN of the device to associate to a room. Required.</p>
    pub fn get_device_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_device_arn()
    }
    /// <p>The ARN of the room with which to associate the device. Required.</p>
    pub fn room_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.room_arn(input.into());
        self
    }
    /// <p>The ARN of the room with which to associate the device. Required.</p>
    pub fn set_room_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_room_arn(input);
        self
    }
    /// <p>The ARN of the room with which to associate the device. Required.</p>
    pub fn get_room_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_room_arn()
    }
}
