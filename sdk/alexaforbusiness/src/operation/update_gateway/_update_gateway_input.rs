// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateGatewayInput {
    /// <p>The ARN of the gateway to update.</p>
    #[doc(hidden)]
    pub gateway_arn: std::option::Option<std::string::String>,
    /// <p>The updated name of the gateway.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The updated description of the gateway.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The updated software version of the gateway. The gateway automatically updates its software version during normal operation.</p>
    #[doc(hidden)]
    pub software_version: std::option::Option<std::string::String>,
}
impl UpdateGatewayInput {
    /// <p>The ARN of the gateway to update.</p>
    pub fn gateway_arn(&self) -> std::option::Option<&str> {
        self.gateway_arn.as_deref()
    }
    /// <p>The updated name of the gateway.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The updated description of the gateway.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The updated software version of the gateway. The gateway automatically updates its software version during normal operation.</p>
    pub fn software_version(&self) -> std::option::Option<&str> {
        self.software_version.as_deref()
    }
}
impl UpdateGatewayInput {
    /// Creates a new builder-style object to manufacture [`UpdateGatewayInput`](crate::operation::update_gateway::UpdateGatewayInput).
    pub fn builder() -> crate::operation::update_gateway::builders::UpdateGatewayInputBuilder {
        crate::operation::update_gateway::builders::UpdateGatewayInputBuilder::default()
    }
}

/// A builder for [`UpdateGatewayInput`](crate::operation::update_gateway::UpdateGatewayInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateGatewayInputBuilder {
    pub(crate) gateway_arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) software_version: std::option::Option<std::string::String>,
}
impl UpdateGatewayInputBuilder {
    /// <p>The ARN of the gateway to update.</p>
    pub fn gateway_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the gateway to update.</p>
    pub fn set_gateway_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gateway_arn = input;
        self
    }
    /// <p>The updated name of the gateway.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The updated name of the gateway.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The updated description of the gateway.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The updated description of the gateway.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The updated software version of the gateway. The gateway automatically updates its software version during normal operation.</p>
    pub fn software_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.software_version = Some(input.into());
        self
    }
    /// <p>The updated software version of the gateway. The gateway automatically updates its software version during normal operation.</p>
    pub fn set_software_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.software_version = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateGatewayInput`](crate::operation::update_gateway::UpdateGatewayInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_gateway::UpdateGatewayInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::update_gateway::UpdateGatewayInput {
            gateway_arn: self.gateway_arn,
            name: self.name,
            description: self.description,
            software_version: self.software_version,
        })
    }
}
