// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBusinessReportScheduleInput {
    /// <p>The name identifier of the schedule.</p>
    #[doc(hidden)]
    pub schedule_name: std::option::Option<std::string::String>,
    /// <p>The S3 bucket name of the output reports. If this isn't specified, the report can be retrieved from a download link by calling ListBusinessReportSchedule. </p>
    #[doc(hidden)]
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The S3 key where the report is delivered.</p>
    #[doc(hidden)]
    pub s3_key_prefix: std::option::Option<std::string::String>,
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::BusinessReportFormat>,
    /// <p>The content range of the reports.</p>
    #[doc(hidden)]
    pub content_range: std::option::Option<crate::types::BusinessReportContentRange>,
    /// <p>The recurrence of the reports. If this isn't specified, the report will only be delivered one time when the API is called. </p>
    #[doc(hidden)]
    pub recurrence: std::option::Option<crate::types::BusinessReportRecurrence>,
    /// <p>The client request token.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The tags for the business report schedule.</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateBusinessReportScheduleInput {
    /// <p>The name identifier of the schedule.</p>
    pub fn schedule_name(&self) -> std::option::Option<&str> {
        self.schedule_name.as_deref()
    }
    /// <p>The S3 bucket name of the output reports. If this isn't specified, the report can be retrieved from a download link by calling ListBusinessReportSchedule. </p>
    pub fn s3_bucket_name(&self) -> std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn s3_key_prefix(&self) -> std::option::Option<&str> {
        self.s3_key_prefix.as_deref()
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn format(&self) -> std::option::Option<&crate::types::BusinessReportFormat> {
        self.format.as_ref()
    }
    /// <p>The content range of the reports.</p>
    pub fn content_range(&self) -> std::option::Option<&crate::types::BusinessReportContentRange> {
        self.content_range.as_ref()
    }
    /// <p>The recurrence of the reports. If this isn't specified, the report will only be delivered one time when the API is called. </p>
    pub fn recurrence(&self) -> std::option::Option<&crate::types::BusinessReportRecurrence> {
        self.recurrence.as_ref()
    }
    /// <p>The client request token.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The tags for the business report schedule.</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateBusinessReportScheduleInput {
    /// Creates a new builder-style object to manufacture [`CreateBusinessReportScheduleInput`](crate::operation::create_business_report_schedule::CreateBusinessReportScheduleInput).
    pub fn builder() -> crate::operation::create_business_report_schedule::builders::CreateBusinessReportScheduleInputBuilder{
        crate::operation::create_business_report_schedule::builders::CreateBusinessReportScheduleInputBuilder::default()
    }
}

/// A builder for [`CreateBusinessReportScheduleInput`](crate::operation::create_business_report_schedule::CreateBusinessReportScheduleInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBusinessReportScheduleInputBuilder {
    pub(crate) schedule_name: std::option::Option<std::string::String>,
    pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
    pub(crate) s3_key_prefix: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::BusinessReportFormat>,
    pub(crate) content_range: std::option::Option<crate::types::BusinessReportContentRange>,
    pub(crate) recurrence: std::option::Option<crate::types::BusinessReportRecurrence>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateBusinessReportScheduleInputBuilder {
    /// <p>The name identifier of the schedule.</p>
    pub fn schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_name = Some(input.into());
        self
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn set_schedule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schedule_name = input;
        self
    }
    /// <p>The S3 bucket name of the output reports. If this isn't specified, the report can be retrieved from a download link by calling ListBusinessReportSchedule. </p>
    pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_name = Some(input.into());
        self
    }
    /// <p>The S3 bucket name of the output reports. If this isn't specified, the report can be retrieved from a download link by calling ListBusinessReportSchedule. </p>
    pub fn set_s3_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn s3_key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_key_prefix = Some(input.into());
        self
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn set_s3_key_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_key_prefix = input;
        self
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn format(mut self, input: crate::types::BusinessReportFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn set_format(
        mut self,
        input: std::option::Option<crate::types::BusinessReportFormat>,
    ) -> Self {
        self.format = input;
        self
    }
    /// <p>The content range of the reports.</p>
    pub fn content_range(mut self, input: crate::types::BusinessReportContentRange) -> Self {
        self.content_range = Some(input);
        self
    }
    /// <p>The content range of the reports.</p>
    pub fn set_content_range(
        mut self,
        input: std::option::Option<crate::types::BusinessReportContentRange>,
    ) -> Self {
        self.content_range = input;
        self
    }
    /// <p>The recurrence of the reports. If this isn't specified, the report will only be delivered one time when the API is called. </p>
    pub fn recurrence(mut self, input: crate::types::BusinessReportRecurrence) -> Self {
        self.recurrence = Some(input);
        self
    }
    /// <p>The recurrence of the reports. If this isn't specified, the report will only be delivered one time when the API is called. </p>
    pub fn set_recurrence(
        mut self,
        input: std::option::Option<crate::types::BusinessReportRecurrence>,
    ) -> Self {
        self.recurrence = input;
        self
    }
    /// <p>The client request token.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>The client request token.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags for the business report schedule.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>The tags for the business report schedule.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateBusinessReportScheduleInput`](crate::operation::create_business_report_schedule::CreateBusinessReportScheduleInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_business_report_schedule::CreateBusinessReportScheduleInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_business_report_schedule::CreateBusinessReportScheduleInput {
                schedule_name: self.schedule_name,
                s3_bucket_name: self.s3_bucket_name,
                s3_key_prefix: self.s3_key_prefix,
                format: self.format,
                content_range: self.content_range,
                recurrence: self.recurrence,
                client_request_token: self.client_request_token,
                tags: self.tags,
            },
        )
    }
}
