// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListSkillsInput {
    /// <p>The ARN of the skill group for which to list enabled skills.</p>
    pub skill_group_arn: ::std::option::Option<::std::string::String>,
    /// <p>Whether the skill is enabled under the user's account.</p>
    pub enablement_type: ::std::option::Option<crate::types::EnablementTypeFilter>,
    /// <p>Whether the skill is publicly available or is a private skill.</p>
    pub skill_type: ::std::option::Option<crate::types::SkillTypeFilter>,
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListSkillsInput {
    /// <p>The ARN of the skill group for which to list enabled skills.</p>
    pub fn skill_group_arn(&self) -> ::std::option::Option<&str> {
        self.skill_group_arn.as_deref()
    }
    /// <p>Whether the skill is enabled under the user's account.</p>
    pub fn enablement_type(&self) -> ::std::option::Option<&crate::types::EnablementTypeFilter> {
        self.enablement_type.as_ref()
    }
    /// <p>Whether the skill is publicly available or is a private skill.</p>
    pub fn skill_type(&self) -> ::std::option::Option<&crate::types::SkillTypeFilter> {
        self.skill_type.as_ref()
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListSkillsInput {
    /// Creates a new builder-style object to manufacture [`ListSkillsInput`](crate::operation::list_skills::ListSkillsInput).
    pub fn builder() -> crate::operation::list_skills::builders::ListSkillsInputBuilder {
        crate::operation::list_skills::builders::ListSkillsInputBuilder::default()
    }
}

/// A builder for [`ListSkillsInput`](crate::operation::list_skills::ListSkillsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListSkillsInputBuilder {
    pub(crate) skill_group_arn: ::std::option::Option<::std::string::String>,
    pub(crate) enablement_type: ::std::option::Option<crate::types::EnablementTypeFilter>,
    pub(crate) skill_type: ::std::option::Option<crate::types::SkillTypeFilter>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListSkillsInputBuilder {
    /// <p>The ARN of the skill group for which to list enabled skills.</p>
    pub fn skill_group_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.skill_group_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the skill group for which to list enabled skills.</p>
    pub fn set_skill_group_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.skill_group_arn = input;
        self
    }
    /// <p>The ARN of the skill group for which to list enabled skills.</p>
    pub fn get_skill_group_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.skill_group_arn
    }
    /// <p>Whether the skill is enabled under the user's account.</p>
    pub fn enablement_type(mut self, input: crate::types::EnablementTypeFilter) -> Self {
        self.enablement_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the skill is enabled under the user's account.</p>
    pub fn set_enablement_type(mut self, input: ::std::option::Option<crate::types::EnablementTypeFilter>) -> Self {
        self.enablement_type = input;
        self
    }
    /// <p>Whether the skill is enabled under the user's account.</p>
    pub fn get_enablement_type(&self) -> &::std::option::Option<crate::types::EnablementTypeFilter> {
        &self.enablement_type
    }
    /// <p>Whether the skill is publicly available or is a private skill.</p>
    pub fn skill_type(mut self, input: crate::types::SkillTypeFilter) -> Self {
        self.skill_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the skill is publicly available or is a private skill.</p>
    pub fn set_skill_type(mut self, input: ::std::option::Option<crate::types::SkillTypeFilter>) -> Self {
        self.skill_type = input;
        self
    }
    /// <p>Whether the skill is publicly available or is a private skill.</p>
    pub fn get_skill_type(&self) -> &::std::option::Option<crate::types::SkillTypeFilter> {
        &self.skill_type
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListSkillsInput`](crate::operation::list_skills::ListSkillsInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::list_skills::ListSkillsInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_skills::ListSkillsInput {
            skill_group_arn: self.skill_group_arn,
            enablement_type: self.enablement_type,
            skill_type: self.skill_type,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
