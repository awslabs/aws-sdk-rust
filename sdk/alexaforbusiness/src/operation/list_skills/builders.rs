// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_skills::_list_skills_output::ListSkillsOutputBuilder;

pub use crate::operation::list_skills::_list_skills_input::ListSkillsInputBuilder;

/// Fluent builder constructing a request to `ListSkills`.
///
/// <p>Lists all enabled skills in a specific skill group.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListSkillsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_skills::builders::ListSkillsInputBuilder,
}
impl ListSkillsFluentBuilder {
    /// Creates a new `ListSkills`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_skills::ListSkills,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_skills::ListSkillsError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_skills::ListSkillsOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_skills::ListSkillsError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_skills::paginator::ListSkillsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_skills::paginator::ListSkillsPaginator {
        crate::operation::list_skills::paginator::ListSkillsPaginator::new(self.handle, self.inner)
    }
    /// <p>The ARN of the skill group for which to list enabled skills.</p>
    pub fn skill_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.skill_group_arn(input.into());
        self
    }
    /// <p>The ARN of the skill group for which to list enabled skills.</p>
    pub fn set_skill_group_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_skill_group_arn(input);
        self
    }
    /// <p>Whether the skill is enabled under the user's account.</p>
    pub fn enablement_type(mut self, input: crate::types::EnablementTypeFilter) -> Self {
        self.inner = self.inner.enablement_type(input);
        self
    }
    /// <p>Whether the skill is enabled under the user's account.</p>
    pub fn set_enablement_type(
        mut self,
        input: std::option::Option<crate::types::EnablementTypeFilter>,
    ) -> Self {
        self.inner = self.inner.set_enablement_type(input);
        self
    }
    /// <p>Whether the skill is publicly available or is a private skill.</p>
    pub fn skill_type(mut self, input: crate::types::SkillTypeFilter) -> Self {
        self.inner = self.inner.skill_type(input);
        self
    }
    /// <p>Whether the skill is publicly available or is a private skill.</p>
    pub fn set_skill_type(
        mut self,
        input: std::option::Option<crate::types::SkillTypeFilter>,
    ) -> Self {
        self.inner = self.inner.set_skill_type(input);
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by <code>MaxResults</code>.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>The maximum number of results to include in the response. If more results exist than the specified <code>MaxResults</code> value, a token is included in the response so that the remaining results can be retrieved.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
}
