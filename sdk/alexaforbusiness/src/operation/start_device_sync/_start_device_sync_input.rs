// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartDeviceSyncInput {
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    #[doc(hidden)]
    pub room_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of the device to sync. Required.</p>
    #[doc(hidden)]
    pub device_arn: std::option::Option<std::string::String>,
    /// <p>Request structure to start the device sync. Required.</p>
    #[doc(hidden)]
    pub features: std::option::Option<std::vec::Vec<crate::types::Feature>>,
}
impl StartDeviceSyncInput {
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    pub fn room_arn(&self) -> std::option::Option<&str> {
        self.room_arn.as_deref()
    }
    /// <p>The ARN of the device to sync. Required.</p>
    pub fn device_arn(&self) -> std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>Request structure to start the device sync. Required.</p>
    pub fn features(&self) -> std::option::Option<&[crate::types::Feature]> {
        self.features.as_deref()
    }
}
impl StartDeviceSyncInput {
    /// Creates a new builder-style object to manufacture [`StartDeviceSyncInput`](crate::operation::start_device_sync::StartDeviceSyncInput).
    pub fn builder() -> crate::operation::start_device_sync::builders::StartDeviceSyncInputBuilder {
        crate::operation::start_device_sync::builders::StartDeviceSyncInputBuilder::default()
    }
}

/// A builder for [`StartDeviceSyncInput`](crate::operation::start_device_sync::StartDeviceSyncInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartDeviceSyncInputBuilder {
    pub(crate) room_arn: std::option::Option<std::string::String>,
    pub(crate) device_arn: std::option::Option<std::string::String>,
    pub(crate) features: std::option::Option<std::vec::Vec<crate::types::Feature>>,
}
impl StartDeviceSyncInputBuilder {
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    pub fn room_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.room_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    pub fn set_room_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.room_arn = input;
        self
    }
    /// <p>The ARN of the device to sync. Required.</p>
    pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the device to sync. Required.</p>
    pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// Appends an item to `features`.
    ///
    /// To override the contents of this collection use [`set_features`](Self::set_features).
    ///
    /// <p>Request structure to start the device sync. Required.</p>
    pub fn features(mut self, input: crate::types::Feature) -> Self {
        let mut v = self.features.unwrap_or_default();
        v.push(input);
        self.features = Some(v);
        self
    }
    /// <p>Request structure to start the device sync. Required.</p>
    pub fn set_features(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Feature>>,
    ) -> Self {
        self.features = input;
        self
    }
    /// Consumes the builder and constructs a [`StartDeviceSyncInput`](crate::operation::start_device_sync::StartDeviceSyncInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::start_device_sync::StartDeviceSyncInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::start_device_sync::StartDeviceSyncInput {
            room_arn: self.room_arn,
            device_arn: self.device_arn,
            features: self.features,
        })
    }
}
