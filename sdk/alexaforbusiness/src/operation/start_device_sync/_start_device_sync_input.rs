// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct StartDeviceSyncInput {
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    pub room_arn: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the device to sync. Required.</p>
    pub device_arn: ::std::option::Option<::std::string::String>,
    /// <p>Request structure to start the device sync. Required.</p>
    pub features: ::std::option::Option<::std::vec::Vec<crate::types::Feature>>,
}
impl StartDeviceSyncInput {
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    pub fn room_arn(&self) -> ::std::option::Option<&str> {
        self.room_arn.as_deref()
    }
    /// <p>The ARN of the device to sync. Required.</p>
    pub fn device_arn(&self) -> ::std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>Request structure to start the device sync. Required.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.features.is_none()`.
    pub fn features(&self) -> &[crate::types::Feature] {
        self.features.as_deref().unwrap_or_default()
    }
}
impl StartDeviceSyncInput {
    /// Creates a new builder-style object to manufacture [`StartDeviceSyncInput`](crate::operation::start_device_sync::StartDeviceSyncInput).
    pub fn builder() -> crate::operation::start_device_sync::builders::StartDeviceSyncInputBuilder {
        crate::operation::start_device_sync::builders::StartDeviceSyncInputBuilder::default()
    }
}

/// A builder for [`StartDeviceSyncInput`](crate::operation::start_device_sync::StartDeviceSyncInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct StartDeviceSyncInputBuilder {
    pub(crate) room_arn: ::std::option::Option<::std::string::String>,
    pub(crate) device_arn: ::std::option::Option<::std::string::String>,
    pub(crate) features: ::std::option::Option<::std::vec::Vec<crate::types::Feature>>,
}
impl StartDeviceSyncInputBuilder {
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    pub fn room_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.room_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    pub fn set_room_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.room_arn = input;
        self
    }
    /// <p>The ARN of the room with which the device to sync is associated. Required.</p>
    pub fn get_room_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.room_arn
    }
    /// <p>The ARN of the device to sync. Required.</p>
    pub fn device_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the device to sync. Required.</p>
    pub fn set_device_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// <p>The ARN of the device to sync. Required.</p>
    pub fn get_device_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_arn
    }
    /// Appends an item to `features`.
    ///
    /// To override the contents of this collection use [`set_features`](Self::set_features).
    ///
    /// <p>Request structure to start the device sync. Required.</p>
    pub fn features(mut self, input: crate::types::Feature) -> Self {
        let mut v = self.features.unwrap_or_default();
        v.push(input);
        self.features = ::std::option::Option::Some(v);
        self
    }
    /// <p>Request structure to start the device sync. Required.</p>
    pub fn set_features(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Feature>>) -> Self {
        self.features = input;
        self
    }
    /// <p>Request structure to start the device sync. Required.</p>
    pub fn get_features(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Feature>> {
        &self.features
    }
    /// Consumes the builder and constructs a [`StartDeviceSyncInput`](crate::operation::start_device_sync::StartDeviceSyncInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::start_device_sync::StartDeviceSyncInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::start_device_sync::StartDeviceSyncInput {
            room_arn: self.room_arn,
            device_arn: self.device_arn,
            features: self.features,
        })
    }
}
