// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchRoomsOutput {
    /// <p>The rooms that meet the specified set of filter criteria, in sort order.</p>
    #[doc(hidden)]
    pub rooms: std::option::Option<std::vec::Vec<crate::types::RoomData>>,
    /// <p>The token returned to indicate that there is more data available.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The total number of rooms returned.</p>
    #[doc(hidden)]
    pub total_count: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl SearchRoomsOutput {
    /// <p>The rooms that meet the specified set of filter criteria, in sort order.</p>
    pub fn rooms(&self) -> std::option::Option<&[crate::types::RoomData]> {
        self.rooms.as_deref()
    }
    /// <p>The token returned to indicate that there is more data available.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The total number of rooms returned.</p>
    pub fn total_count(&self) -> std::option::Option<i32> {
        self.total_count
    }
}
impl aws_http::request_id::RequestId for SearchRoomsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchRoomsOutput {
    /// Creates a new builder-style object to manufacture [`SearchRoomsOutput`](crate::operation::search_rooms::SearchRoomsOutput).
    pub fn builder() -> crate::operation::search_rooms::builders::SearchRoomsOutputBuilder {
        crate::operation::search_rooms::builders::SearchRoomsOutputBuilder::default()
    }
}

/// A builder for [`SearchRoomsOutput`](crate::operation::search_rooms::SearchRoomsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchRoomsOutputBuilder {
    pub(crate) rooms: std::option::Option<std::vec::Vec<crate::types::RoomData>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) total_count: std::option::Option<i32>,
    _request_id: Option<String>,
}
impl SearchRoomsOutputBuilder {
    /// Appends an item to `rooms`.
    ///
    /// To override the contents of this collection use [`set_rooms`](Self::set_rooms).
    ///
    /// <p>The rooms that meet the specified set of filter criteria, in sort order.</p>
    pub fn rooms(mut self, input: crate::types::RoomData) -> Self {
        let mut v = self.rooms.unwrap_or_default();
        v.push(input);
        self.rooms = Some(v);
        self
    }
    /// <p>The rooms that meet the specified set of filter criteria, in sort order.</p>
    pub fn set_rooms(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RoomData>>,
    ) -> Self {
        self.rooms = input;
        self
    }
    /// <p>The token returned to indicate that there is more data available.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token returned to indicate that there is more data available.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The total number of rooms returned.</p>
    pub fn total_count(mut self, input: i32) -> Self {
        self.total_count = Some(input);
        self
    }
    /// <p>The total number of rooms returned.</p>
    pub fn set_total_count(mut self, input: std::option::Option<i32>) -> Self {
        self.total_count = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchRoomsOutput`](crate::operation::search_rooms::SearchRoomsOutput).
    pub fn build(self) -> crate::operation::search_rooms::SearchRoomsOutput {
        crate::operation::search_rooms::SearchRoomsOutput {
            rooms: self.rooms,
            next_token: self.next_token,
            total_count: self.total_count,
            _request_id: self._request_id,
        }
    }
}
