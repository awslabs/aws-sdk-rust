// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetInvitationConfigurationOutput {
    /// <p>The name of the organization sending the enrollment invite to a user.</p>
    #[doc(hidden)]
    pub organization_name: std::option::Option<std::string::String>,
    /// <p>The email ID of the organization or individual contact that the enrolled user can use. </p>
    #[doc(hidden)]
    pub contact_email: std::option::Option<std::string::String>,
    /// <p>The list of private skill IDs that you want to recommend to the user to enable in the invitation.</p>
    #[doc(hidden)]
    pub private_skill_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl GetInvitationConfigurationOutput {
    /// <p>The name of the organization sending the enrollment invite to a user.</p>
    pub fn organization_name(&self) -> std::option::Option<&str> {
        self.organization_name.as_deref()
    }
    /// <p>The email ID of the organization or individual contact that the enrolled user can use. </p>
    pub fn contact_email(&self) -> std::option::Option<&str> {
        self.contact_email.as_deref()
    }
    /// <p>The list of private skill IDs that you want to recommend to the user to enable in the invitation.</p>
    pub fn private_skill_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.private_skill_ids.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetInvitationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetInvitationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetInvitationConfigurationOutput`](crate::operation::get_invitation_configuration::GetInvitationConfigurationOutput).
    pub fn builder() -> crate::operation::get_invitation_configuration::builders::GetInvitationConfigurationOutputBuilder{
        crate::operation::get_invitation_configuration::builders::GetInvitationConfigurationOutputBuilder::default()
    }
}

/// A builder for [`GetInvitationConfigurationOutput`](crate::operation::get_invitation_configuration::GetInvitationConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetInvitationConfigurationOutputBuilder {
    pub(crate) organization_name: std::option::Option<std::string::String>,
    pub(crate) contact_email: std::option::Option<std::string::String>,
    pub(crate) private_skill_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl GetInvitationConfigurationOutputBuilder {
    /// <p>The name of the organization sending the enrollment invite to a user.</p>
    pub fn organization_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.organization_name = Some(input.into());
        self
    }
    /// <p>The name of the organization sending the enrollment invite to a user.</p>
    pub fn set_organization_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.organization_name = input;
        self
    }
    /// <p>The email ID of the organization or individual contact that the enrolled user can use. </p>
    pub fn contact_email(mut self, input: impl Into<std::string::String>) -> Self {
        self.contact_email = Some(input.into());
        self
    }
    /// <p>The email ID of the organization or individual contact that the enrolled user can use. </p>
    pub fn set_contact_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.contact_email = input;
        self
    }
    /// Appends an item to `private_skill_ids`.
    ///
    /// To override the contents of this collection use [`set_private_skill_ids`](Self::set_private_skill_ids).
    ///
    /// <p>The list of private skill IDs that you want to recommend to the user to enable in the invitation.</p>
    pub fn private_skill_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.private_skill_ids.unwrap_or_default();
        v.push(input.into());
        self.private_skill_ids = Some(v);
        self
    }
    /// <p>The list of private skill IDs that you want to recommend to the user to enable in the invitation.</p>
    pub fn set_private_skill_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.private_skill_ids = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetInvitationConfigurationOutput`](crate::operation::get_invitation_configuration::GetInvitationConfigurationOutput).
    pub fn build(
        self,
    ) -> crate::operation::get_invitation_configuration::GetInvitationConfigurationOutput {
        crate::operation::get_invitation_configuration::GetInvitationConfigurationOutput {
            organization_name: self.organization_name,
            contact_email: self.contact_email,
            private_skill_ids: self.private_skill_ids,
            _request_id: self._request_id,
        }
    }
}
