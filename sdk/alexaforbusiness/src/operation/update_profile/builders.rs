// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_profile::_update_profile_output::UpdateProfileOutputBuilder;

pub use crate::operation::update_profile::_update_profile_input::UpdateProfileInputBuilder;

/// Fluent builder constructing a request to `UpdateProfile`.
///
/// <p>Updates an existing room profile by room profile ARN.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateProfileFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_profile::builders::UpdateProfileInputBuilder,
}
impl UpdateProfileFluentBuilder {
    /// Creates a new `UpdateProfile`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_profile::UpdateProfile,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::update_profile::UpdateProfileError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_profile::UpdateProfileOutput,
        aws_smithy_http::result::SdkError<crate::operation::update_profile::UpdateProfileError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_arn(input.into());
        self
    }
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn set_profile_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_arn(input);
        self
    }
    /// <p>The updated name for the room profile.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The updated name for the room profile.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.inner = self.inner.is_default(input);
        self
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn set_is_default(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_default(input);
        self
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn timezone(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.timezone(input.into());
        self
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn set_timezone(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_timezone(input);
        self
    }
    /// <p>The updated address for the room profile.</p>
    pub fn address(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.address(input.into());
        self
    }
    /// <p>The updated address for the room profile.</p>
    pub fn set_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_address(input);
        self
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.inner = self.inner.distance_unit(input);
        self
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn set_distance_unit(
        mut self,
        input: std::option::Option<crate::types::DistanceUnit>,
    ) -> Self {
        self.inner = self.inner.set_distance_unit(input);
        self
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn temperature_unit(mut self, input: crate::types::TemperatureUnit) -> Self {
        self.inner = self.inner.temperature_unit(input);
        self
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn set_temperature_unit(
        mut self,
        input: std::option::Option<crate::types::TemperatureUnit>,
    ) -> Self {
        self.inner = self.inner.set_temperature_unit(input);
        self
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn wake_word(mut self, input: crate::types::WakeWord) -> Self {
        self.inner = self.inner.wake_word(input);
        self
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn set_wake_word(mut self, input: std::option::Option<crate::types::WakeWord>) -> Self {
        self.inner = self.inner.set_wake_word(input);
        self
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn locale(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.locale(input.into());
        self
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn set_locale(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_locale(input);
        self
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn setup_mode_disabled(mut self, input: bool) -> Self {
        self.inner = self.inner.setup_mode_disabled(input);
        self
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn set_setup_mode_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_setup_mode_disabled(input);
        self
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn max_volume_limit(mut self, input: i32) -> Self {
        self.inner = self.inner.max_volume_limit(input);
        self
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn set_max_volume_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_volume_limit(input);
        self
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn pstn_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.pstn_enabled(input);
        self
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn set_pstn_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_pstn_enabled(input);
        self
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn data_retention_opt_in(mut self, input: bool) -> Self {
        self.inner = self.inner.data_retention_opt_in(input);
        self
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn set_data_retention_opt_in(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_data_retention_opt_in(input);
        self
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn meeting_room_configuration(
        mut self,
        input: crate::types::UpdateMeetingRoomConfiguration,
    ) -> Self {
        self.inner = self.inner.meeting_room_configuration(input);
        self
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn set_meeting_room_configuration(
        mut self,
        input: std::option::Option<crate::types::UpdateMeetingRoomConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_meeting_room_configuration(input);
        self
    }
}
