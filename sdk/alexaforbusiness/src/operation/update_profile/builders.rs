// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_profile::_update_profile_output::UpdateProfileOutputBuilder;

pub use crate::operation::update_profile::_update_profile_input::UpdateProfileInputBuilder;

impl UpdateProfileInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_profile::UpdateProfileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_profile::UpdateProfileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_profile();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateProfile`.
///
/// <p>Updates an existing room profile by room profile ARN.</p>
#[deprecated(note = "Alexa For Business is no longer supported")]
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateProfileFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_profile::builders::UpdateProfileInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_profile::UpdateProfileOutput,
        crate::operation::update_profile::UpdateProfileError,
    > for UpdateProfileFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_profile::UpdateProfileOutput,
            crate::operation::update_profile::UpdateProfileError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateProfileFluentBuilder {
    /// Creates a new `UpdateProfile`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateProfile as a reference.
    pub fn as_input(&self) -> &crate::operation::update_profile::builders::UpdateProfileInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_profile::UpdateProfileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_profile::UpdateProfileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_profile::UpdateProfile::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_profile::UpdateProfile::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_profile::UpdateProfileOutput,
        crate::operation::update_profile::UpdateProfileError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.profile_arn(input.into());
        self
    }
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_profile_arn(input);
        self
    }
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_profile_arn()
    }
    /// <p>The updated name for the room profile.</p>
    pub fn profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.profile_name(input.into());
        self
    }
    /// <p>The updated name for the room profile.</p>
    pub fn set_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_profile_name(input);
        self
    }
    /// <p>The updated name for the room profile.</p>
    pub fn get_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_profile_name()
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.inner = self.inner.is_default(input);
        self
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_is_default(input);
        self
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        self.inner.get_is_default()
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.timezone(input.into());
        self
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_timezone(input);
        self
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_timezone()
    }
    /// <p>The updated address for the room profile.</p>
    pub fn address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.address(input.into());
        self
    }
    /// <p>The updated address for the room profile.</p>
    pub fn set_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_address(input);
        self
    }
    /// <p>The updated address for the room profile.</p>
    pub fn get_address(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_address()
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.inner = self.inner.distance_unit(input);
        self
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn set_distance_unit(mut self, input: ::std::option::Option<crate::types::DistanceUnit>) -> Self {
        self.inner = self.inner.set_distance_unit(input);
        self
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn get_distance_unit(&self) -> &::std::option::Option<crate::types::DistanceUnit> {
        self.inner.get_distance_unit()
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn temperature_unit(mut self, input: crate::types::TemperatureUnit) -> Self {
        self.inner = self.inner.temperature_unit(input);
        self
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn set_temperature_unit(mut self, input: ::std::option::Option<crate::types::TemperatureUnit>) -> Self {
        self.inner = self.inner.set_temperature_unit(input);
        self
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn get_temperature_unit(&self) -> &::std::option::Option<crate::types::TemperatureUnit> {
        self.inner.get_temperature_unit()
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn wake_word(mut self, input: crate::types::WakeWord) -> Self {
        self.inner = self.inner.wake_word(input);
        self
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn set_wake_word(mut self, input: ::std::option::Option<crate::types::WakeWord>) -> Self {
        self.inner = self.inner.set_wake_word(input);
        self
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn get_wake_word(&self) -> &::std::option::Option<crate::types::WakeWord> {
        self.inner.get_wake_word()
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn locale(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.locale(input.into());
        self
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn set_locale(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_locale(input);
        self
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn get_locale(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_locale()
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn setup_mode_disabled(mut self, input: bool) -> Self {
        self.inner = self.inner.setup_mode_disabled(input);
        self
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn set_setup_mode_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_setup_mode_disabled(input);
        self
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn get_setup_mode_disabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_setup_mode_disabled()
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn max_volume_limit(mut self, input: i32) -> Self {
        self.inner = self.inner.max_volume_limit(input);
        self
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn set_max_volume_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_volume_limit(input);
        self
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn get_max_volume_limit(&self) -> &::std::option::Option<i32> {
        self.inner.get_max_volume_limit()
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn pstn_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.pstn_enabled(input);
        self
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn set_pstn_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_pstn_enabled(input);
        self
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn get_pstn_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_pstn_enabled()
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn data_retention_opt_in(mut self, input: bool) -> Self {
        self.inner = self.inner.data_retention_opt_in(input);
        self
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn set_data_retention_opt_in(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_data_retention_opt_in(input);
        self
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn get_data_retention_opt_in(&self) -> &::std::option::Option<bool> {
        self.inner.get_data_retention_opt_in()
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn meeting_room_configuration(mut self, input: crate::types::UpdateMeetingRoomConfiguration) -> Self {
        self.inner = self.inner.meeting_room_configuration(input);
        self
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn set_meeting_room_configuration(mut self, input: ::std::option::Option<crate::types::UpdateMeetingRoomConfiguration>) -> Self {
        self.inner = self.inner.set_meeting_room_configuration(input);
        self
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn get_meeting_room_configuration(&self) -> &::std::option::Option<crate::types::UpdateMeetingRoomConfiguration> {
        self.inner.get_meeting_room_configuration()
    }
}
