// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateProfileInput {
    /// <p>The ARN of the room profile to update. Required.</p>
    pub profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The updated name for the room profile.</p>
    pub profile_name: ::std::option::Option<::std::string::String>,
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub is_default: ::std::option::Option<bool>,
    /// <p>The updated timezone for the room profile.</p>
    pub timezone: ::std::option::Option<::std::string::String>,
    /// <p>The updated address for the room profile.</p>
    pub address: ::std::option::Option<::std::string::String>,
    /// <p>The updated distance unit for the room profile.</p>
    pub distance_unit: ::std::option::Option<crate::types::DistanceUnit>,
    /// <p>The updated temperature unit for the room profile.</p>
    pub temperature_unit: ::std::option::Option<crate::types::TemperatureUnit>,
    /// <p>The updated wake word for the room profile.</p>
    pub wake_word: ::std::option::Option<crate::types::WakeWord>,
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub locale: ::std::option::Option<::std::string::String>,
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub setup_mode_disabled: ::std::option::Option<bool>,
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub max_volume_limit: ::std::option::Option<i32>,
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub pstn_enabled: ::std::option::Option<bool>,
    /// <p>Whether data retention of the profile is enabled.</p>
    pub data_retention_opt_in: ::std::option::Option<bool>,
    /// <p>The updated meeting room settings of a room profile.</p>
    pub meeting_room_configuration: ::std::option::Option<crate::types::UpdateMeetingRoomConfiguration>,
}
impl UpdateProfileInput {
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn profile_arn(&self) -> ::std::option::Option<&str> {
        self.profile_arn.as_deref()
    }
    /// <p>The updated name for the room profile.</p>
    pub fn profile_name(&self) -> ::std::option::Option<&str> {
        self.profile_name.as_deref()
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn is_default(&self) -> ::std::option::Option<bool> {
        self.is_default
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn timezone(&self) -> ::std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p>The updated address for the room profile.</p>
    pub fn address(&self) -> ::std::option::Option<&str> {
        self.address.as_deref()
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn distance_unit(&self) -> ::std::option::Option<&crate::types::DistanceUnit> {
        self.distance_unit.as_ref()
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn temperature_unit(&self) -> ::std::option::Option<&crate::types::TemperatureUnit> {
        self.temperature_unit.as_ref()
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn wake_word(&self) -> ::std::option::Option<&crate::types::WakeWord> {
        self.wake_word.as_ref()
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn locale(&self) -> ::std::option::Option<&str> {
        self.locale.as_deref()
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn setup_mode_disabled(&self) -> ::std::option::Option<bool> {
        self.setup_mode_disabled
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn max_volume_limit(&self) -> ::std::option::Option<i32> {
        self.max_volume_limit
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn pstn_enabled(&self) -> ::std::option::Option<bool> {
        self.pstn_enabled
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn data_retention_opt_in(&self) -> ::std::option::Option<bool> {
        self.data_retention_opt_in
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn meeting_room_configuration(&self) -> ::std::option::Option<&crate::types::UpdateMeetingRoomConfiguration> {
        self.meeting_room_configuration.as_ref()
    }
}
impl UpdateProfileInput {
    /// Creates a new builder-style object to manufacture [`UpdateProfileInput`](crate::operation::update_profile::UpdateProfileInput).
    pub fn builder() -> crate::operation::update_profile::builders::UpdateProfileInputBuilder {
        crate::operation::update_profile::builders::UpdateProfileInputBuilder::default()
    }
}

/// A builder for [`UpdateProfileInput`](crate::operation::update_profile::UpdateProfileInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateProfileInputBuilder {
    pub(crate) profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) is_default: ::std::option::Option<bool>,
    pub(crate) timezone: ::std::option::Option<::std::string::String>,
    pub(crate) address: ::std::option::Option<::std::string::String>,
    pub(crate) distance_unit: ::std::option::Option<crate::types::DistanceUnit>,
    pub(crate) temperature_unit: ::std::option::Option<crate::types::TemperatureUnit>,
    pub(crate) wake_word: ::std::option::Option<crate::types::WakeWord>,
    pub(crate) locale: ::std::option::Option<::std::string::String>,
    pub(crate) setup_mode_disabled: ::std::option::Option<bool>,
    pub(crate) max_volume_limit: ::std::option::Option<i32>,
    pub(crate) pstn_enabled: ::std::option::Option<bool>,
    pub(crate) data_retention_opt_in: ::std::option::Option<bool>,
    pub(crate) meeting_room_configuration: ::std::option::Option<crate::types::UpdateMeetingRoomConfiguration>,
}
impl UpdateProfileInputBuilder {
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }
    /// <p>The ARN of the room profile to update. Required.</p>
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_arn
    }
    /// <p>The updated name for the room profile.</p>
    pub fn profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated name for the room profile.</p>
    pub fn set_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_name = input;
        self
    }
    /// <p>The updated name for the room profile.</p>
    pub fn get_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_name
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = ::std::option::Option::Some(input);
        self
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn set_is_default(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>Sets the profile as default if selected. If this is missing, no update is done to the default status.</p>
    pub fn get_is_default(&self) -> &::std::option::Option<bool> {
        &self.is_default
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p>The updated timezone for the room profile.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.timezone
    }
    /// <p>The updated address for the room profile.</p>
    pub fn address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated address for the room profile.</p>
    pub fn set_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>The updated address for the room profile.</p>
    pub fn get_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.address
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.distance_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn set_distance_unit(mut self, input: ::std::option::Option<crate::types::DistanceUnit>) -> Self {
        self.distance_unit = input;
        self
    }
    /// <p>The updated distance unit for the room profile.</p>
    pub fn get_distance_unit(&self) -> &::std::option::Option<crate::types::DistanceUnit> {
        &self.distance_unit
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn temperature_unit(mut self, input: crate::types::TemperatureUnit) -> Self {
        self.temperature_unit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn set_temperature_unit(mut self, input: ::std::option::Option<crate::types::TemperatureUnit>) -> Self {
        self.temperature_unit = input;
        self
    }
    /// <p>The updated temperature unit for the room profile.</p>
    pub fn get_temperature_unit(&self) -> &::std::option::Option<crate::types::TemperatureUnit> {
        &self.temperature_unit
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn wake_word(mut self, input: crate::types::WakeWord) -> Self {
        self.wake_word = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn set_wake_word(mut self, input: ::std::option::Option<crate::types::WakeWord>) -> Self {
        self.wake_word = input;
        self
    }
    /// <p>The updated wake word for the room profile.</p>
    pub fn get_wake_word(&self) -> &::std::option::Option<crate::types::WakeWord> {
        &self.wake_word
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn locale(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.locale = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn set_locale(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The updated locale for the room profile. (This is currently only available to a limited preview audience.)</p>
    pub fn get_locale(&self) -> &::std::option::Option<::std::string::String> {
        &self.locale
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn setup_mode_disabled(mut self, input: bool) -> Self {
        self.setup_mode_disabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn set_setup_mode_disabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.setup_mode_disabled = input;
        self
    }
    /// <p>Whether the setup mode of the profile is enabled.</p>
    pub fn get_setup_mode_disabled(&self) -> &::std::option::Option<bool> {
        &self.setup_mode_disabled
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn max_volume_limit(mut self, input: i32) -> Self {
        self.max_volume_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn set_max_volume_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_volume_limit = input;
        self
    }
    /// <p>The updated maximum volume limit for the room profile.</p>
    pub fn get_max_volume_limit(&self) -> &::std::option::Option<i32> {
        &self.max_volume_limit
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn pstn_enabled(mut self, input: bool) -> Self {
        self.pstn_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn set_pstn_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.pstn_enabled = input;
        self
    }
    /// <p>Whether the PSTN setting of the room profile is enabled.</p>
    pub fn get_pstn_enabled(&self) -> &::std::option::Option<bool> {
        &self.pstn_enabled
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn data_retention_opt_in(mut self, input: bool) -> Self {
        self.data_retention_opt_in = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn set_data_retention_opt_in(mut self, input: ::std::option::Option<bool>) -> Self {
        self.data_retention_opt_in = input;
        self
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn get_data_retention_opt_in(&self) -> &::std::option::Option<bool> {
        &self.data_retention_opt_in
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn meeting_room_configuration(mut self, input: crate::types::UpdateMeetingRoomConfiguration) -> Self {
        self.meeting_room_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn set_meeting_room_configuration(mut self, input: ::std::option::Option<crate::types::UpdateMeetingRoomConfiguration>) -> Self {
        self.meeting_room_configuration = input;
        self
    }
    /// <p>The updated meeting room settings of a room profile.</p>
    pub fn get_meeting_room_configuration(&self) -> &::std::option::Option<crate::types::UpdateMeetingRoomConfiguration> {
        &self.meeting_room_configuration
    }
    /// Consumes the builder and constructs a [`UpdateProfileInput`](crate::operation::update_profile::UpdateProfileInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_profile::UpdateProfileInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_profile::UpdateProfileInput {
            profile_arn: self.profile_arn,
            profile_name: self.profile_name,
            is_default: self.is_default,
            timezone: self.timezone,
            address: self.address,
            distance_unit: self.distance_unit,
            temperature_unit: self.temperature_unit,
            wake_word: self.wake_word,
            locale: self.locale,
            setup_mode_disabled: self.setup_mode_disabled,
            max_volume_limit: self.max_volume_limit,
            pstn_enabled: self.pstn_enabled,
            data_retention_opt_in: self.data_retention_opt_in,
            meeting_room_configuration: self.meeting_room_configuration,
        })
    }
}
