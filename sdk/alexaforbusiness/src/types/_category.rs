// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The skill store category that is shown. Alexa skills are assigned a specific skill category during creation, such as News, Social, and Sports.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Category {
    /// <p>The ID of the skill store category.</p>
    #[doc(hidden)]
    pub category_id: std::option::Option<i64>,
    /// <p>The name of the skill store category.</p>
    #[doc(hidden)]
    pub category_name: std::option::Option<std::string::String>,
}
impl Category {
    /// <p>The ID of the skill store category.</p>
    pub fn category_id(&self) -> std::option::Option<i64> {
        self.category_id
    }
    /// <p>The name of the skill store category.</p>
    pub fn category_name(&self) -> std::option::Option<&str> {
        self.category_name.as_deref()
    }
}
impl Category {
    /// Creates a new builder-style object to manufacture [`Category`](crate::types::Category).
    pub fn builder() -> crate::types::builders::CategoryBuilder {
        crate::types::builders::CategoryBuilder::default()
    }
}

/// A builder for [`Category`](crate::types::Category).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CategoryBuilder {
    pub(crate) category_id: std::option::Option<i64>,
    pub(crate) category_name: std::option::Option<std::string::String>,
}
impl CategoryBuilder {
    /// <p>The ID of the skill store category.</p>
    pub fn category_id(mut self, input: i64) -> Self {
        self.category_id = Some(input);
        self
    }
    /// <p>The ID of the skill store category.</p>
    pub fn set_category_id(mut self, input: std::option::Option<i64>) -> Self {
        self.category_id = input;
        self
    }
    /// <p>The name of the skill store category.</p>
    pub fn category_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.category_name = Some(input.into());
        self
    }
    /// <p>The name of the skill store category.</p>
    pub fn set_category_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.category_name = input;
        self
    }
    /// Consumes the builder and constructs a [`Category`](crate::types::Category).
    pub fn build(self) -> crate::types::Category {
        crate::types::Category {
            category_id: self.category_id,
            category_name: self.category_name,
        }
    }
}
