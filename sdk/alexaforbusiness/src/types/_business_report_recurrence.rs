// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The recurrence of the reports.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BusinessReportRecurrence {
    /// <p>The start date.</p>
    #[doc(hidden)]
    pub start_date: std::option::Option<std::string::String>,
}
impl BusinessReportRecurrence {
    /// <p>The start date.</p>
    pub fn start_date(&self) -> std::option::Option<&str> {
        self.start_date.as_deref()
    }
}
impl BusinessReportRecurrence {
    /// Creates a new builder-style object to manufacture [`BusinessReportRecurrence`](crate::types::BusinessReportRecurrence).
    pub fn builder() -> crate::types::builders::BusinessReportRecurrenceBuilder {
        crate::types::builders::BusinessReportRecurrenceBuilder::default()
    }
}

/// A builder for [`BusinessReportRecurrence`](crate::types::BusinessReportRecurrence).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BusinessReportRecurrenceBuilder {
    pub(crate) start_date: std::option::Option<std::string::String>,
}
impl BusinessReportRecurrenceBuilder {
    /// <p>The start date.</p>
    pub fn start_date(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_date = Some(input.into());
        self
    }
    /// <p>The start date.</p>
    pub fn set_start_date(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_date = input;
        self
    }
    /// Consumes the builder and constructs a [`BusinessReportRecurrence`](crate::types::BusinessReportRecurrence).
    pub fn build(self) -> crate::types::BusinessReportRecurrence {
        crate::types::BusinessReportRecurrence {
            start_date: self.start_date,
        }
    }
}
