// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The default conference provider that is used if no other scheduled meetings are detected.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConferencePreference {
    /// <p>The ARN of the default conference provider.</p>
    #[doc(hidden)]
    pub default_conference_provider_arn: std::option::Option<std::string::String>,
}
impl ConferencePreference {
    /// <p>The ARN of the default conference provider.</p>
    pub fn default_conference_provider_arn(&self) -> std::option::Option<&str> {
        self.default_conference_provider_arn.as_deref()
    }
}
impl ConferencePreference {
    /// Creates a new builder-style object to manufacture [`ConferencePreference`](crate::types::ConferencePreference).
    pub fn builder() -> crate::types::builders::ConferencePreferenceBuilder {
        crate::types::builders::ConferencePreferenceBuilder::default()
    }
}

/// A builder for [`ConferencePreference`](crate::types::ConferencePreference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConferencePreferenceBuilder {
    pub(crate) default_conference_provider_arn: std::option::Option<std::string::String>,
}
impl ConferencePreferenceBuilder {
    /// <p>The ARN of the default conference provider.</p>
    pub fn default_conference_provider_arn(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.default_conference_provider_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the default conference provider.</p>
    pub fn set_default_conference_provider_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_conference_provider_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ConferencePreference`](crate::types::ConferencePreference).
    pub fn build(self) -> crate::types::ConferencePreference {
        crate::types::ConferencePreference {
            default_conference_provider_arn: self.default_conference_provider_arn,
        }
    }
}
