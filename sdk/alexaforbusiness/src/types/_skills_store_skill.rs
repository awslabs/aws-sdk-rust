// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The detailed information about an Alexa skill.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SkillsStoreSkill {
    /// <p>The ARN of the skill.</p>
    pub skill_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the skill.</p>
    pub skill_name: ::std::option::Option<::std::string::String>,
    /// <p>Short description about the skill.</p>
    pub short_description: ::std::option::Option<::std::string::String>,
    /// <p>The URL where the skill icon resides.</p>
    pub icon_url: ::std::option::Option<::std::string::String>,
    /// <p>Sample utterances that interact with the skill.</p>
    pub sample_utterances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Information about the skill.</p>
    pub skill_details: ::std::option::Option<crate::types::SkillDetails>,
    /// <p>Linking support for a skill.</p>
    pub supports_linking: bool,
}
impl SkillsStoreSkill {
    /// <p>The ARN of the skill.</p>
    pub fn skill_id(&self) -> ::std::option::Option<&str> {
        self.skill_id.as_deref()
    }
    /// <p>The name of the skill.</p>
    pub fn skill_name(&self) -> ::std::option::Option<&str> {
        self.skill_name.as_deref()
    }
    /// <p>Short description about the skill.</p>
    pub fn short_description(&self) -> ::std::option::Option<&str> {
        self.short_description.as_deref()
    }
    /// <p>The URL where the skill icon resides.</p>
    pub fn icon_url(&self) -> ::std::option::Option<&str> {
        self.icon_url.as_deref()
    }
    /// <p>Sample utterances that interact with the skill.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.sample_utterances.is_none()`.
    pub fn sample_utterances(&self) -> &[::std::string::String] {
        self.sample_utterances.as_deref().unwrap_or_default()
    }
    /// <p>Information about the skill.</p>
    pub fn skill_details(&self) -> ::std::option::Option<&crate::types::SkillDetails> {
        self.skill_details.as_ref()
    }
    /// <p>Linking support for a skill.</p>
    pub fn supports_linking(&self) -> bool {
        self.supports_linking
    }
}
impl SkillsStoreSkill {
    /// Creates a new builder-style object to manufacture [`SkillsStoreSkill`](crate::types::SkillsStoreSkill).
    pub fn builder() -> crate::types::builders::SkillsStoreSkillBuilder {
        crate::types::builders::SkillsStoreSkillBuilder::default()
    }
}

/// A builder for [`SkillsStoreSkill`](crate::types::SkillsStoreSkill).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SkillsStoreSkillBuilder {
    pub(crate) skill_id: ::std::option::Option<::std::string::String>,
    pub(crate) skill_name: ::std::option::Option<::std::string::String>,
    pub(crate) short_description: ::std::option::Option<::std::string::String>,
    pub(crate) icon_url: ::std::option::Option<::std::string::String>,
    pub(crate) sample_utterances: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) skill_details: ::std::option::Option<crate::types::SkillDetails>,
    pub(crate) supports_linking: ::std::option::Option<bool>,
}
impl SkillsStoreSkillBuilder {
    /// <p>The ARN of the skill.</p>
    pub fn skill_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.skill_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the skill.</p>
    pub fn set_skill_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.skill_id = input;
        self
    }
    /// <p>The ARN of the skill.</p>
    pub fn get_skill_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.skill_id
    }
    /// <p>The name of the skill.</p>
    pub fn skill_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.skill_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the skill.</p>
    pub fn set_skill_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.skill_name = input;
        self
    }
    /// <p>The name of the skill.</p>
    pub fn get_skill_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.skill_name
    }
    /// <p>Short description about the skill.</p>
    pub fn short_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.short_description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Short description about the skill.</p>
    pub fn set_short_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.short_description = input;
        self
    }
    /// <p>Short description about the skill.</p>
    pub fn get_short_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.short_description
    }
    /// <p>The URL where the skill icon resides.</p>
    pub fn icon_url(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.icon_url = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URL where the skill icon resides.</p>
    pub fn set_icon_url(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.icon_url = input;
        self
    }
    /// <p>The URL where the skill icon resides.</p>
    pub fn get_icon_url(&self) -> &::std::option::Option<::std::string::String> {
        &self.icon_url
    }
    /// Appends an item to `sample_utterances`.
    ///
    /// To override the contents of this collection use [`set_sample_utterances`](Self::set_sample_utterances).
    ///
    /// <p>Sample utterances that interact with the skill.</p>
    pub fn sample_utterances(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.sample_utterances.unwrap_or_default();
        v.push(input.into());
        self.sample_utterances = ::std::option::Option::Some(v);
        self
    }
    /// <p>Sample utterances that interact with the skill.</p>
    pub fn set_sample_utterances(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.sample_utterances = input;
        self
    }
    /// <p>Sample utterances that interact with the skill.</p>
    pub fn get_sample_utterances(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.sample_utterances
    }
    /// <p>Information about the skill.</p>
    pub fn skill_details(mut self, input: crate::types::SkillDetails) -> Self {
        self.skill_details = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the skill.</p>
    pub fn set_skill_details(mut self, input: ::std::option::Option<crate::types::SkillDetails>) -> Self {
        self.skill_details = input;
        self
    }
    /// <p>Information about the skill.</p>
    pub fn get_skill_details(&self) -> &::std::option::Option<crate::types::SkillDetails> {
        &self.skill_details
    }
    /// <p>Linking support for a skill.</p>
    pub fn supports_linking(mut self, input: bool) -> Self {
        self.supports_linking = ::std::option::Option::Some(input);
        self
    }
    /// <p>Linking support for a skill.</p>
    pub fn set_supports_linking(mut self, input: ::std::option::Option<bool>) -> Self {
        self.supports_linking = input;
        self
    }
    /// <p>Linking support for a skill.</p>
    pub fn get_supports_linking(&self) -> &::std::option::Option<bool> {
        &self.supports_linking
    }
    /// Consumes the builder and constructs a [`SkillsStoreSkill`](crate::types::SkillsStoreSkill).
    pub fn build(self) -> crate::types::SkillsStoreSkill {
        crate::types::SkillsStoreSkill {
            skill_id: self.skill_id,
            skill_name: self.skill_name,
            short_description: self.short_description,
            icon_url: self.icon_url,
            sample_utterances: self.sample_utterances,
            skill_details: self.skill_details,
            supports_linking: self.supports_linking.unwrap_or_default(),
        }
    }
}
