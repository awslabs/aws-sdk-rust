// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A device with attributes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Device {
    /// <p>The ARN of a device.</p>
    #[doc(hidden)]
    pub device_arn: std::option::Option<std::string::String>,
    /// <p>The serial number of a device.</p>
    #[doc(hidden)]
    pub device_serial_number: std::option::Option<std::string::String>,
    /// <p>The type of a device.</p>
    #[doc(hidden)]
    pub device_type: std::option::Option<std::string::String>,
    /// <p>The name of a device.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The software version of a device.</p>
    #[doc(hidden)]
    pub software_version: std::option::Option<std::string::String>,
    /// <p>The MAC address of a device.</p>
    #[doc(hidden)]
    pub mac_address: std::option::Option<std::string::String>,
    /// <p>The room ARN of a device.</p>
    #[doc(hidden)]
    pub room_arn: std::option::Option<std::string::String>,
    /// <p>The status of a device. If the status is not READY, check the DeviceStatusInfo value for details.</p>
    #[doc(hidden)]
    pub device_status: std::option::Option<crate::types::DeviceStatus>,
    /// <p>Detailed information about a device's status.</p>
    #[doc(hidden)]
    pub device_status_info: std::option::Option<crate::types::DeviceStatusInfo>,
    /// <p>Detailed information about a device's network profile.</p>
    #[doc(hidden)]
    pub network_profile_info: std::option::Option<crate::types::DeviceNetworkProfileInfo>,
}
impl Device {
    /// <p>The ARN of a device.</p>
    pub fn device_arn(&self) -> std::option::Option<&str> {
        self.device_arn.as_deref()
    }
    /// <p>The serial number of a device.</p>
    pub fn device_serial_number(&self) -> std::option::Option<&str> {
        self.device_serial_number.as_deref()
    }
    /// <p>The type of a device.</p>
    pub fn device_type(&self) -> std::option::Option<&str> {
        self.device_type.as_deref()
    }
    /// <p>The name of a device.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The software version of a device.</p>
    pub fn software_version(&self) -> std::option::Option<&str> {
        self.software_version.as_deref()
    }
    /// <p>The MAC address of a device.</p>
    pub fn mac_address(&self) -> std::option::Option<&str> {
        self.mac_address.as_deref()
    }
    /// <p>The room ARN of a device.</p>
    pub fn room_arn(&self) -> std::option::Option<&str> {
        self.room_arn.as_deref()
    }
    /// <p>The status of a device. If the status is not READY, check the DeviceStatusInfo value for details.</p>
    pub fn device_status(&self) -> std::option::Option<&crate::types::DeviceStatus> {
        self.device_status.as_ref()
    }
    /// <p>Detailed information about a device's status.</p>
    pub fn device_status_info(&self) -> std::option::Option<&crate::types::DeviceStatusInfo> {
        self.device_status_info.as_ref()
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn network_profile_info(
        &self,
    ) -> std::option::Option<&crate::types::DeviceNetworkProfileInfo> {
        self.network_profile_info.as_ref()
    }
}
impl Device {
    /// Creates a new builder-style object to manufacture [`Device`](crate::types::Device).
    pub fn builder() -> crate::types::builders::DeviceBuilder {
        crate::types::builders::DeviceBuilder::default()
    }
}

/// A builder for [`Device`](crate::types::Device).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceBuilder {
    pub(crate) device_arn: std::option::Option<std::string::String>,
    pub(crate) device_serial_number: std::option::Option<std::string::String>,
    pub(crate) device_type: std::option::Option<std::string::String>,
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) software_version: std::option::Option<std::string::String>,
    pub(crate) mac_address: std::option::Option<std::string::String>,
    pub(crate) room_arn: std::option::Option<std::string::String>,
    pub(crate) device_status: std::option::Option<crate::types::DeviceStatus>,
    pub(crate) device_status_info: std::option::Option<crate::types::DeviceStatusInfo>,
    pub(crate) network_profile_info: std::option::Option<crate::types::DeviceNetworkProfileInfo>,
}
impl DeviceBuilder {
    /// <p>The ARN of a device.</p>
    pub fn device_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a device.</p>
    pub fn set_device_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_arn = input;
        self
    }
    /// <p>The serial number of a device.</p>
    pub fn device_serial_number(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_serial_number = Some(input.into());
        self
    }
    /// <p>The serial number of a device.</p>
    pub fn set_device_serial_number(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_serial_number = input;
        self
    }
    /// <p>The type of a device.</p>
    pub fn device_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_type = Some(input.into());
        self
    }
    /// <p>The type of a device.</p>
    pub fn set_device_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_type = input;
        self
    }
    /// <p>The name of a device.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The name of a device.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The software version of a device.</p>
    pub fn software_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.software_version = Some(input.into());
        self
    }
    /// <p>The software version of a device.</p>
    pub fn set_software_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.software_version = input;
        self
    }
    /// <p>The MAC address of a device.</p>
    pub fn mac_address(mut self, input: impl Into<std::string::String>) -> Self {
        self.mac_address = Some(input.into());
        self
    }
    /// <p>The MAC address of a device.</p>
    pub fn set_mac_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.mac_address = input;
        self
    }
    /// <p>The room ARN of a device.</p>
    pub fn room_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.room_arn = Some(input.into());
        self
    }
    /// <p>The room ARN of a device.</p>
    pub fn set_room_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.room_arn = input;
        self
    }
    /// <p>The status of a device. If the status is not READY, check the DeviceStatusInfo value for details.</p>
    pub fn device_status(mut self, input: crate::types::DeviceStatus) -> Self {
        self.device_status = Some(input);
        self
    }
    /// <p>The status of a device. If the status is not READY, check the DeviceStatusInfo value for details.</p>
    pub fn set_device_status(
        mut self,
        input: std::option::Option<crate::types::DeviceStatus>,
    ) -> Self {
        self.device_status = input;
        self
    }
    /// <p>Detailed information about a device's status.</p>
    pub fn device_status_info(mut self, input: crate::types::DeviceStatusInfo) -> Self {
        self.device_status_info = Some(input);
        self
    }
    /// <p>Detailed information about a device's status.</p>
    pub fn set_device_status_info(
        mut self,
        input: std::option::Option<crate::types::DeviceStatusInfo>,
    ) -> Self {
        self.device_status_info = input;
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn network_profile_info(mut self, input: crate::types::DeviceNetworkProfileInfo) -> Self {
        self.network_profile_info = Some(input);
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn set_network_profile_info(
        mut self,
        input: std::option::Option<crate::types::DeviceNetworkProfileInfo>,
    ) -> Self {
        self.network_profile_info = input;
        self
    }
    /// Consumes the builder and constructs a [`Device`](crate::types::Device).
    pub fn build(self) -> crate::types::Device {
        crate::types::Device {
            device_arn: self.device_arn,
            device_serial_number: self.device_serial_number,
            device_type: self.device_type,
            device_name: self.device_name,
            software_version: self.software_version,
            mac_address: self.mac_address,
            room_arn: self.room_arn,
            device_status: self.device_status,
            device_status_info: self.device_status_info,
            network_profile_info: self.network_profile_info,
        }
    }
}
