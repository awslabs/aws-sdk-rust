// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A room profile with attributes.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Profile {
    /// <p>The ARN of a room profile.</p>
    #[doc(hidden)]
    pub profile_arn: std::option::Option<std::string::String>,
    /// <p>The name of a room profile.</p>
    #[doc(hidden)]
    pub profile_name: std::option::Option<std::string::String>,
    /// <p>Retrieves if the profile is default or not.</p>
    #[doc(hidden)]
    pub is_default: std::option::Option<bool>,
    /// <p>The address of a room profile.</p>
    #[doc(hidden)]
    pub address: std::option::Option<std::string::String>,
    /// <p>The time zone of a room profile.</p>
    #[doc(hidden)]
    pub timezone: std::option::Option<std::string::String>,
    /// <p>The distance unit of a room profile.</p>
    #[doc(hidden)]
    pub distance_unit: std::option::Option<crate::types::DistanceUnit>,
    /// <p>The temperature unit of a room profile.</p>
    #[doc(hidden)]
    pub temperature_unit: std::option::Option<crate::types::TemperatureUnit>,
    /// <p>The wake word of a room profile.</p>
    #[doc(hidden)]
    pub wake_word: std::option::Option<crate::types::WakeWord>,
    /// <p>The locale of a room profile. (This is currently available only to a limited preview audience.)</p>
    #[doc(hidden)]
    pub locale: std::option::Option<std::string::String>,
    /// <p>The setup mode of a room profile.</p>
    #[doc(hidden)]
    pub setup_mode_disabled: std::option::Option<bool>,
    /// <p>The max volume limit of a room profile.</p>
    #[doc(hidden)]
    pub max_volume_limit: std::option::Option<i32>,
    /// <p>The PSTN setting of a room profile.</p>
    #[doc(hidden)]
    pub pstn_enabled: std::option::Option<bool>,
    /// <p>Whether data retention of the profile is enabled.</p>
    #[doc(hidden)]
    pub data_retention_opt_in: std::option::Option<bool>,
    /// <p>The ARN of the address book.</p>
    #[doc(hidden)]
    pub address_book_arn: std::option::Option<std::string::String>,
    /// <p>Meeting room settings of a room profile.</p>
    #[doc(hidden)]
    pub meeting_room_configuration: std::option::Option<crate::types::MeetingRoomConfiguration>,
}
impl Profile {
    /// <p>The ARN of a room profile.</p>
    pub fn profile_arn(&self) -> std::option::Option<&str> {
        self.profile_arn.as_deref()
    }
    /// <p>The name of a room profile.</p>
    pub fn profile_name(&self) -> std::option::Option<&str> {
        self.profile_name.as_deref()
    }
    /// <p>Retrieves if the profile is default or not.</p>
    pub fn is_default(&self) -> std::option::Option<bool> {
        self.is_default
    }
    /// <p>The address of a room profile.</p>
    pub fn address(&self) -> std::option::Option<&str> {
        self.address.as_deref()
    }
    /// <p>The time zone of a room profile.</p>
    pub fn timezone(&self) -> std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p>The distance unit of a room profile.</p>
    pub fn distance_unit(&self) -> std::option::Option<&crate::types::DistanceUnit> {
        self.distance_unit.as_ref()
    }
    /// <p>The temperature unit of a room profile.</p>
    pub fn temperature_unit(&self) -> std::option::Option<&crate::types::TemperatureUnit> {
        self.temperature_unit.as_ref()
    }
    /// <p>The wake word of a room profile.</p>
    pub fn wake_word(&self) -> std::option::Option<&crate::types::WakeWord> {
        self.wake_word.as_ref()
    }
    /// <p>The locale of a room profile. (This is currently available only to a limited preview audience.)</p>
    pub fn locale(&self) -> std::option::Option<&str> {
        self.locale.as_deref()
    }
    /// <p>The setup mode of a room profile.</p>
    pub fn setup_mode_disabled(&self) -> std::option::Option<bool> {
        self.setup_mode_disabled
    }
    /// <p>The max volume limit of a room profile.</p>
    pub fn max_volume_limit(&self) -> std::option::Option<i32> {
        self.max_volume_limit
    }
    /// <p>The PSTN setting of a room profile.</p>
    pub fn pstn_enabled(&self) -> std::option::Option<bool> {
        self.pstn_enabled
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn data_retention_opt_in(&self) -> std::option::Option<bool> {
        self.data_retention_opt_in
    }
    /// <p>The ARN of the address book.</p>
    pub fn address_book_arn(&self) -> std::option::Option<&str> {
        self.address_book_arn.as_deref()
    }
    /// <p>Meeting room settings of a room profile.</p>
    pub fn meeting_room_configuration(
        &self,
    ) -> std::option::Option<&crate::types::MeetingRoomConfiguration> {
        self.meeting_room_configuration.as_ref()
    }
}
impl Profile {
    /// Creates a new builder-style object to manufacture [`Profile`](crate::types::Profile).
    pub fn builder() -> crate::types::builders::ProfileBuilder {
        crate::types::builders::ProfileBuilder::default()
    }
}

/// A builder for [`Profile`](crate::types::Profile).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProfileBuilder {
    pub(crate) profile_arn: std::option::Option<std::string::String>,
    pub(crate) profile_name: std::option::Option<std::string::String>,
    pub(crate) is_default: std::option::Option<bool>,
    pub(crate) address: std::option::Option<std::string::String>,
    pub(crate) timezone: std::option::Option<std::string::String>,
    pub(crate) distance_unit: std::option::Option<crate::types::DistanceUnit>,
    pub(crate) temperature_unit: std::option::Option<crate::types::TemperatureUnit>,
    pub(crate) wake_word: std::option::Option<crate::types::WakeWord>,
    pub(crate) locale: std::option::Option<std::string::String>,
    pub(crate) setup_mode_disabled: std::option::Option<bool>,
    pub(crate) max_volume_limit: std::option::Option<i32>,
    pub(crate) pstn_enabled: std::option::Option<bool>,
    pub(crate) data_retention_opt_in: std::option::Option<bool>,
    pub(crate) address_book_arn: std::option::Option<std::string::String>,
    pub(crate) meeting_room_configuration:
        std::option::Option<crate::types::MeetingRoomConfiguration>,
}
impl ProfileBuilder {
    /// <p>The ARN of a room profile.</p>
    pub fn profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a room profile.</p>
    pub fn set_profile_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }
    /// <p>The name of a room profile.</p>
    pub fn profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.profile_name = Some(input.into());
        self
    }
    /// <p>The name of a room profile.</p>
    pub fn set_profile_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.profile_name = input;
        self
    }
    /// <p>Retrieves if the profile is default or not.</p>
    pub fn is_default(mut self, input: bool) -> Self {
        self.is_default = Some(input);
        self
    }
    /// <p>Retrieves if the profile is default or not.</p>
    pub fn set_is_default(mut self, input: std::option::Option<bool>) -> Self {
        self.is_default = input;
        self
    }
    /// <p>The address of a room profile.</p>
    pub fn address(mut self, input: impl Into<std::string::String>) -> Self {
        self.address = Some(input.into());
        self
    }
    /// <p>The address of a room profile.</p>
    pub fn set_address(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address = input;
        self
    }
    /// <p>The time zone of a room profile.</p>
    pub fn timezone(mut self, input: impl Into<std::string::String>) -> Self {
        self.timezone = Some(input.into());
        self
    }
    /// <p>The time zone of a room profile.</p>
    pub fn set_timezone(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p>The distance unit of a room profile.</p>
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.distance_unit = Some(input);
        self
    }
    /// <p>The distance unit of a room profile.</p>
    pub fn set_distance_unit(
        mut self,
        input: std::option::Option<crate::types::DistanceUnit>,
    ) -> Self {
        self.distance_unit = input;
        self
    }
    /// <p>The temperature unit of a room profile.</p>
    pub fn temperature_unit(mut self, input: crate::types::TemperatureUnit) -> Self {
        self.temperature_unit = Some(input);
        self
    }
    /// <p>The temperature unit of a room profile.</p>
    pub fn set_temperature_unit(
        mut self,
        input: std::option::Option<crate::types::TemperatureUnit>,
    ) -> Self {
        self.temperature_unit = input;
        self
    }
    /// <p>The wake word of a room profile.</p>
    pub fn wake_word(mut self, input: crate::types::WakeWord) -> Self {
        self.wake_word = Some(input);
        self
    }
    /// <p>The wake word of a room profile.</p>
    pub fn set_wake_word(mut self, input: std::option::Option<crate::types::WakeWord>) -> Self {
        self.wake_word = input;
        self
    }
    /// <p>The locale of a room profile. (This is currently available only to a limited preview audience.)</p>
    pub fn locale(mut self, input: impl Into<std::string::String>) -> Self {
        self.locale = Some(input.into());
        self
    }
    /// <p>The locale of a room profile. (This is currently available only to a limited preview audience.)</p>
    pub fn set_locale(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The setup mode of a room profile.</p>
    pub fn setup_mode_disabled(mut self, input: bool) -> Self {
        self.setup_mode_disabled = Some(input);
        self
    }
    /// <p>The setup mode of a room profile.</p>
    pub fn set_setup_mode_disabled(mut self, input: std::option::Option<bool>) -> Self {
        self.setup_mode_disabled = input;
        self
    }
    /// <p>The max volume limit of a room profile.</p>
    pub fn max_volume_limit(mut self, input: i32) -> Self {
        self.max_volume_limit = Some(input);
        self
    }
    /// <p>The max volume limit of a room profile.</p>
    pub fn set_max_volume_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.max_volume_limit = input;
        self
    }
    /// <p>The PSTN setting of a room profile.</p>
    pub fn pstn_enabled(mut self, input: bool) -> Self {
        self.pstn_enabled = Some(input);
        self
    }
    /// <p>The PSTN setting of a room profile.</p>
    pub fn set_pstn_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.pstn_enabled = input;
        self
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn data_retention_opt_in(mut self, input: bool) -> Self {
        self.data_retention_opt_in = Some(input);
        self
    }
    /// <p>Whether data retention of the profile is enabled.</p>
    pub fn set_data_retention_opt_in(mut self, input: std::option::Option<bool>) -> Self {
        self.data_retention_opt_in = input;
        self
    }
    /// <p>The ARN of the address book.</p>
    pub fn address_book_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.address_book_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the address book.</p>
    pub fn set_address_book_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.address_book_arn = input;
        self
    }
    /// <p>Meeting room settings of a room profile.</p>
    pub fn meeting_room_configuration(
        mut self,
        input: crate::types::MeetingRoomConfiguration,
    ) -> Self {
        self.meeting_room_configuration = Some(input);
        self
    }
    /// <p>Meeting room settings of a room profile.</p>
    pub fn set_meeting_room_configuration(
        mut self,
        input: std::option::Option<crate::types::MeetingRoomConfiguration>,
    ) -> Self {
        self.meeting_room_configuration = input;
        self
    }
    /// Consumes the builder and constructs a [`Profile`](crate::types::Profile).
    pub fn build(self) -> crate::types::Profile {
        crate::types::Profile {
            profile_arn: self.profile_arn,
            profile_name: self.profile_name,
            is_default: self.is_default,
            address: self.address,
            timezone: self.timezone,
            distance_unit: self.distance_unit,
            temperature_unit: self.temperature_unit,
            wake_word: self.wake_word,
            locale: self.locale,
            setup_mode_disabled: self.setup_mode_disabled,
            max_volume_limit: self.max_volume_limit,
            pstn_enabled: self.pstn_enabled,
            data_retention_opt_in: self.data_retention_opt_in,
            address_book_arn: self.address_book_arn,
            meeting_room_configuration: self.meeting_room_configuration,
        }
    }
}
