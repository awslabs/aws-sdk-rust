// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The schedule of the usage report.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BusinessReportSchedule {
    /// <p>The ARN of the business report schedule.</p>
    #[doc(hidden)]
    pub schedule_arn: std::option::Option<std::string::String>,
    /// <p>The name identifier of the schedule.</p>
    #[doc(hidden)]
    pub schedule_name: std::option::Option<std::string::String>,
    /// <p>The S3 bucket name of the output reports.</p>
    #[doc(hidden)]
    pub s3_bucket_name: std::option::Option<std::string::String>,
    /// <p>The S3 key where the report is delivered.</p>
    #[doc(hidden)]
    pub s3_key_prefix: std::option::Option<std::string::String>,
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::BusinessReportFormat>,
    /// <p>The content range of the reports.</p>
    #[doc(hidden)]
    pub content_range: std::option::Option<crate::types::BusinessReportContentRange>,
    /// <p>The recurrence of the reports.</p>
    #[doc(hidden)]
    pub recurrence: std::option::Option<crate::types::BusinessReportRecurrence>,
    /// <p>The details of the last business report delivery for a specified time interval.</p>
    #[doc(hidden)]
    pub last_business_report: std::option::Option<crate::types::BusinessReport>,
}
impl BusinessReportSchedule {
    /// <p>The ARN of the business report schedule.</p>
    pub fn schedule_arn(&self) -> std::option::Option<&str> {
        self.schedule_arn.as_deref()
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn schedule_name(&self) -> std::option::Option<&str> {
        self.schedule_name.as_deref()
    }
    /// <p>The S3 bucket name of the output reports.</p>
    pub fn s3_bucket_name(&self) -> std::option::Option<&str> {
        self.s3_bucket_name.as_deref()
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn s3_key_prefix(&self) -> std::option::Option<&str> {
        self.s3_key_prefix.as_deref()
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn format(&self) -> std::option::Option<&crate::types::BusinessReportFormat> {
        self.format.as_ref()
    }
    /// <p>The content range of the reports.</p>
    pub fn content_range(&self) -> std::option::Option<&crate::types::BusinessReportContentRange> {
        self.content_range.as_ref()
    }
    /// <p>The recurrence of the reports.</p>
    pub fn recurrence(&self) -> std::option::Option<&crate::types::BusinessReportRecurrence> {
        self.recurrence.as_ref()
    }
    /// <p>The details of the last business report delivery for a specified time interval.</p>
    pub fn last_business_report(&self) -> std::option::Option<&crate::types::BusinessReport> {
        self.last_business_report.as_ref()
    }
}
impl BusinessReportSchedule {
    /// Creates a new builder-style object to manufacture [`BusinessReportSchedule`](crate::types::BusinessReportSchedule).
    pub fn builder() -> crate::types::builders::BusinessReportScheduleBuilder {
        crate::types::builders::BusinessReportScheduleBuilder::default()
    }
}

/// A builder for [`BusinessReportSchedule`](crate::types::BusinessReportSchedule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BusinessReportScheduleBuilder {
    pub(crate) schedule_arn: std::option::Option<std::string::String>,
    pub(crate) schedule_name: std::option::Option<std::string::String>,
    pub(crate) s3_bucket_name: std::option::Option<std::string::String>,
    pub(crate) s3_key_prefix: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::BusinessReportFormat>,
    pub(crate) content_range: std::option::Option<crate::types::BusinessReportContentRange>,
    pub(crate) recurrence: std::option::Option<crate::types::BusinessReportRecurrence>,
    pub(crate) last_business_report: std::option::Option<crate::types::BusinessReport>,
}
impl BusinessReportScheduleBuilder {
    /// <p>The ARN of the business report schedule.</p>
    pub fn schedule_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the business report schedule.</p>
    pub fn set_schedule_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schedule_arn = input;
        self
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn schedule_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schedule_name = Some(input.into());
        self
    }
    /// <p>The name identifier of the schedule.</p>
    pub fn set_schedule_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schedule_name = input;
        self
    }
    /// <p>The S3 bucket name of the output reports.</p>
    pub fn s3_bucket_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_name = Some(input.into());
        self
    }
    /// <p>The S3 bucket name of the output reports.</p>
    pub fn set_s3_bucket_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_name = input;
        self
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn s3_key_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_key_prefix = Some(input.into());
        self
    }
    /// <p>The S3 key where the report is delivered.</p>
    pub fn set_s3_key_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_key_prefix = input;
        self
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn format(mut self, input: crate::types::BusinessReportFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>The format of the generated report (individual CSV files or zipped files of individual files).</p>
    pub fn set_format(
        mut self,
        input: std::option::Option<crate::types::BusinessReportFormat>,
    ) -> Self {
        self.format = input;
        self
    }
    /// <p>The content range of the reports.</p>
    pub fn content_range(mut self, input: crate::types::BusinessReportContentRange) -> Self {
        self.content_range = Some(input);
        self
    }
    /// <p>The content range of the reports.</p>
    pub fn set_content_range(
        mut self,
        input: std::option::Option<crate::types::BusinessReportContentRange>,
    ) -> Self {
        self.content_range = input;
        self
    }
    /// <p>The recurrence of the reports.</p>
    pub fn recurrence(mut self, input: crate::types::BusinessReportRecurrence) -> Self {
        self.recurrence = Some(input);
        self
    }
    /// <p>The recurrence of the reports.</p>
    pub fn set_recurrence(
        mut self,
        input: std::option::Option<crate::types::BusinessReportRecurrence>,
    ) -> Self {
        self.recurrence = input;
        self
    }
    /// <p>The details of the last business report delivery for a specified time interval.</p>
    pub fn last_business_report(mut self, input: crate::types::BusinessReport) -> Self {
        self.last_business_report = Some(input);
        self
    }
    /// <p>The details of the last business report delivery for a specified time interval.</p>
    pub fn set_last_business_report(
        mut self,
        input: std::option::Option<crate::types::BusinessReport>,
    ) -> Self {
        self.last_business_report = input;
        self
    }
    /// Consumes the builder and constructs a [`BusinessReportSchedule`](crate::types::BusinessReportSchedule).
    pub fn build(self) -> crate::types::BusinessReportSchedule {
        crate::types::BusinessReportSchedule {
            schedule_arn: self.schedule_arn,
            schedule_name: self.schedule_name,
            s3_bucket_name: self.s3_bucket_name,
            s3_key_prefix: self.s3_key_prefix,
            format: self.format,
            content_range: self.content_range,
            recurrence: self.recurrence,
            last_business_report: self.last_business_report,
        }
    }
}
