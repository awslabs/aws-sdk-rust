// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The phone number for the contact containing the raw number and phone number type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PhoneNumber {
    /// <p>The raw value of the phone number.</p>
    #[doc(hidden)]
    pub number: std::option::Option<std::string::String>,
    /// <p>The type of the phone number.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::PhoneNumberType>,
}
impl PhoneNumber {
    /// <p>The raw value of the phone number.</p>
    pub fn number(&self) -> std::option::Option<&str> {
        self.number.as_deref()
    }
    /// <p>The type of the phone number.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::PhoneNumberType> {
        self.r#type.as_ref()
    }
}
impl std::fmt::Debug for PhoneNumber {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PhoneNumber");
        formatter.field("number", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PhoneNumber {
    /// Creates a new builder-style object to manufacture [`PhoneNumber`](crate::types::PhoneNumber).
    pub fn builder() -> crate::types::builders::PhoneNumberBuilder {
        crate::types::builders::PhoneNumberBuilder::default()
    }
}

/// A builder for [`PhoneNumber`](crate::types::PhoneNumber).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct PhoneNumberBuilder {
    pub(crate) number: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<crate::types::PhoneNumberType>,
}
impl PhoneNumberBuilder {
    /// <p>The raw value of the phone number.</p>
    pub fn number(mut self, input: impl Into<std::string::String>) -> Self {
        self.number = Some(input.into());
        self
    }
    /// <p>The raw value of the phone number.</p>
    pub fn set_number(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.number = input;
        self
    }
    /// <p>The type of the phone number.</p>
    pub fn r#type(mut self, input: crate::types::PhoneNumberType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of the phone number.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::PhoneNumberType>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`PhoneNumber`](crate::types::PhoneNumber).
    pub fn build(self) -> crate::types::PhoneNumber {
        crate::types::PhoneNumber {
            number: self.number,
            r#type: self.r#type,
        }
    }
}
impl std::fmt::Debug for PhoneNumberBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PhoneNumberBuilder");
        formatter.field("number", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
