// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information related to a user.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserData {
    /// <p>The ARN of a user.</p>
    #[doc(hidden)]
    pub user_arn: std::option::Option<std::string::String>,
    /// <p>The first name of a user.</p>
    #[doc(hidden)]
    pub first_name: std::option::Option<std::string::String>,
    /// <p>The last name of a user.</p>
    #[doc(hidden)]
    pub last_name: std::option::Option<std::string::String>,
    /// <p>The email of a user.</p>
    #[doc(hidden)]
    pub email: std::option::Option<std::string::String>,
    /// <p>The enrollment status of a user.</p>
    #[doc(hidden)]
    pub enrollment_status: std::option::Option<crate::types::EnrollmentStatus>,
    /// <p>The enrollment ARN of a user.</p>
    #[doc(hidden)]
    pub enrollment_id: std::option::Option<std::string::String>,
}
impl UserData {
    /// <p>The ARN of a user.</p>
    pub fn user_arn(&self) -> std::option::Option<&str> {
        self.user_arn.as_deref()
    }
    /// <p>The first name of a user.</p>
    pub fn first_name(&self) -> std::option::Option<&str> {
        self.first_name.as_deref()
    }
    /// <p>The last name of a user.</p>
    pub fn last_name(&self) -> std::option::Option<&str> {
        self.last_name.as_deref()
    }
    /// <p>The email of a user.</p>
    pub fn email(&self) -> std::option::Option<&str> {
        self.email.as_deref()
    }
    /// <p>The enrollment status of a user.</p>
    pub fn enrollment_status(&self) -> std::option::Option<&crate::types::EnrollmentStatus> {
        self.enrollment_status.as_ref()
    }
    /// <p>The enrollment ARN of a user.</p>
    pub fn enrollment_id(&self) -> std::option::Option<&str> {
        self.enrollment_id.as_deref()
    }
}
impl UserData {
    /// Creates a new builder-style object to manufacture [`UserData`](crate::types::UserData).
    pub fn builder() -> crate::types::builders::UserDataBuilder {
        crate::types::builders::UserDataBuilder::default()
    }
}

/// A builder for [`UserData`](crate::types::UserData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserDataBuilder {
    pub(crate) user_arn: std::option::Option<std::string::String>,
    pub(crate) first_name: std::option::Option<std::string::String>,
    pub(crate) last_name: std::option::Option<std::string::String>,
    pub(crate) email: std::option::Option<std::string::String>,
    pub(crate) enrollment_status: std::option::Option<crate::types::EnrollmentStatus>,
    pub(crate) enrollment_id: std::option::Option<std::string::String>,
}
impl UserDataBuilder {
    /// <p>The ARN of a user.</p>
    pub fn user_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_arn = Some(input.into());
        self
    }
    /// <p>The ARN of a user.</p>
    pub fn set_user_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_arn = input;
        self
    }
    /// <p>The first name of a user.</p>
    pub fn first_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_name = Some(input.into());
        self
    }
    /// <p>The first name of a user.</p>
    pub fn set_first_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.first_name = input;
        self
    }
    /// <p>The last name of a user.</p>
    pub fn last_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_name = Some(input.into());
        self
    }
    /// <p>The last name of a user.</p>
    pub fn set_last_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.last_name = input;
        self
    }
    /// <p>The email of a user.</p>
    pub fn email(mut self, input: impl Into<std::string::String>) -> Self {
        self.email = Some(input.into());
        self
    }
    /// <p>The email of a user.</p>
    pub fn set_email(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.email = input;
        self
    }
    /// <p>The enrollment status of a user.</p>
    pub fn enrollment_status(mut self, input: crate::types::EnrollmentStatus) -> Self {
        self.enrollment_status = Some(input);
        self
    }
    /// <p>The enrollment status of a user.</p>
    pub fn set_enrollment_status(
        mut self,
        input: std::option::Option<crate::types::EnrollmentStatus>,
    ) -> Self {
        self.enrollment_status = input;
        self
    }
    /// <p>The enrollment ARN of a user.</p>
    pub fn enrollment_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.enrollment_id = Some(input.into());
        self
    }
    /// <p>The enrollment ARN of a user.</p>
    pub fn set_enrollment_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.enrollment_id = input;
        self
    }
    /// Consumes the builder and constructs a [`UserData`](crate::types::UserData).
    pub fn build(self) -> crate::types::UserData {
        crate::types::UserData {
            user_arn: self.user_arn,
            first_name: self.first_name,
            last_name: self.last_name,
            email: self.email,
            enrollment_status: self.enrollment_status,
            enrollment_id: self.enrollment_id,
        }
    }
}
