// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details of a deviceâ€™s status.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceStatusDetail {
    /// <p>The list of available features on the device.</p>
    #[doc(hidden)]
    pub feature: std::option::Option<crate::types::Feature>,
    /// <p>The device status detail code.</p>
    #[doc(hidden)]
    pub code: std::option::Option<crate::types::DeviceStatusDetailCode>,
}
impl DeviceStatusDetail {
    /// <p>The list of available features on the device.</p>
    pub fn feature(&self) -> std::option::Option<&crate::types::Feature> {
        self.feature.as_ref()
    }
    /// <p>The device status detail code.</p>
    pub fn code(&self) -> std::option::Option<&crate::types::DeviceStatusDetailCode> {
        self.code.as_ref()
    }
}
impl DeviceStatusDetail {
    /// Creates a new builder-style object to manufacture [`DeviceStatusDetail`](crate::types::DeviceStatusDetail).
    pub fn builder() -> crate::types::builders::DeviceStatusDetailBuilder {
        crate::types::builders::DeviceStatusDetailBuilder::default()
    }
}

/// A builder for [`DeviceStatusDetail`](crate::types::DeviceStatusDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceStatusDetailBuilder {
    pub(crate) feature: std::option::Option<crate::types::Feature>,
    pub(crate) code: std::option::Option<crate::types::DeviceStatusDetailCode>,
}
impl DeviceStatusDetailBuilder {
    /// <p>The list of available features on the device.</p>
    pub fn feature(mut self, input: crate::types::Feature) -> Self {
        self.feature = Some(input);
        self
    }
    /// <p>The list of available features on the device.</p>
    pub fn set_feature(mut self, input: std::option::Option<crate::types::Feature>) -> Self {
        self.feature = input;
        self
    }
    /// <p>The device status detail code.</p>
    pub fn code(mut self, input: crate::types::DeviceStatusDetailCode) -> Self {
        self.code = Some(input);
        self
    }
    /// <p>The device status detail code.</p>
    pub fn set_code(
        mut self,
        input: std::option::Option<crate::types::DeviceStatusDetailCode>,
    ) -> Self {
        self.code = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceStatusDetail`](crate::types::DeviceStatusDetail).
    pub fn build(self) -> crate::types::DeviceStatusDetail {
        crate::types::DeviceStatusDetail {
            feature: self.feature,
            code: self.code,
        }
    }
}
