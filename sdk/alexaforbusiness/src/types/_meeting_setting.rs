// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The values that indicate whether a pin is always required (YES), never required (NO), or OPTIONAL.</p>
/// <ul>
/// <li> <p>If YES, Alexa will always ask for a meeting pin.</p> </li>
/// <li> <p>If NO, Alexa will never ask for a meeting pin.</p> </li>
/// <li> <p>If OPTIONAL, Alexa will ask if you have a meeting pin and if the customer responds with yes, it will ask for the meeting pin.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MeetingSetting {
    /// <p>The values that indicate whether the pin is always required.</p>
    pub require_pin: crate::types::RequirePin,
}
impl MeetingSetting {
    /// <p>The values that indicate whether the pin is always required.</p>
    pub fn require_pin(&self) -> &crate::types::RequirePin {
        &self.require_pin
    }
}
impl MeetingSetting {
    /// Creates a new builder-style object to manufacture [`MeetingSetting`](crate::types::MeetingSetting).
    pub fn builder() -> crate::types::builders::MeetingSettingBuilder {
        crate::types::builders::MeetingSettingBuilder::default()
    }
}

/// A builder for [`MeetingSetting`](crate::types::MeetingSetting).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MeetingSettingBuilder {
    pub(crate) require_pin: ::std::option::Option<crate::types::RequirePin>,
}
impl MeetingSettingBuilder {
    /// <p>The values that indicate whether the pin is always required.</p>
    /// This field is required.
    pub fn require_pin(mut self, input: crate::types::RequirePin) -> Self {
        self.require_pin = ::std::option::Option::Some(input);
        self
    }
    /// <p>The values that indicate whether the pin is always required.</p>
    pub fn set_require_pin(mut self, input: ::std::option::Option<crate::types::RequirePin>) -> Self {
        self.require_pin = input;
        self
    }
    /// <p>The values that indicate whether the pin is always required.</p>
    pub fn get_require_pin(&self) -> &::std::option::Option<crate::types::RequirePin> {
        &self.require_pin
    }
    /// Consumes the builder and constructs a [`MeetingSetting`](crate::types::MeetingSetting).
    /// This method will fail if any of the following fields are not set:
    /// - [`require_pin`](crate::types::builders::MeetingSettingBuilder::require_pin)
    pub fn build(self) -> ::std::result::Result<crate::types::MeetingSetting, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MeetingSetting {
            require_pin: self.require_pin.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "require_pin",
                    "require_pin was not specified but it is required when building MeetingSetting",
                )
            })?,
        })
    }
}
