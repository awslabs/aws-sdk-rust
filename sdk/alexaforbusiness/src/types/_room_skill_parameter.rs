// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A skill parameter associated with a room.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RoomSkillParameter {
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    pub parameter_key: ::std::string::String,
    /// <p>The parameter value of a room skill parameter.</p>
    pub parameter_value: ::std::string::String,
}
impl RoomSkillParameter {
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    pub fn parameter_key(&self) -> &str {
        use std::ops::Deref;
        self.parameter_key.deref()
    }
    /// <p>The parameter value of a room skill parameter.</p>
    pub fn parameter_value(&self) -> &str {
        use std::ops::Deref;
        self.parameter_value.deref()
    }
}
impl RoomSkillParameter {
    /// Creates a new builder-style object to manufacture [`RoomSkillParameter`](crate::types::RoomSkillParameter).
    pub fn builder() -> crate::types::builders::RoomSkillParameterBuilder {
        crate::types::builders::RoomSkillParameterBuilder::default()
    }
}

/// A builder for [`RoomSkillParameter`](crate::types::RoomSkillParameter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RoomSkillParameterBuilder {
    pub(crate) parameter_key: ::std::option::Option<::std::string::String>,
    pub(crate) parameter_value: ::std::option::Option<::std::string::String>,
}
impl RoomSkillParameterBuilder {
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    /// This field is required.
    pub fn parameter_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    pub fn set_parameter_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_key = input;
        self
    }
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    pub fn get_parameter_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_key
    }
    /// <p>The parameter value of a room skill parameter.</p>
    /// This field is required.
    pub fn parameter_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.parameter_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The parameter value of a room skill parameter.</p>
    pub fn set_parameter_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.parameter_value = input;
        self
    }
    /// <p>The parameter value of a room skill parameter.</p>
    pub fn get_parameter_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.parameter_value
    }
    /// Consumes the builder and constructs a [`RoomSkillParameter`](crate::types::RoomSkillParameter).
    /// This method will fail if any of the following fields are not set:
    /// - [`parameter_key`](crate::types::builders::RoomSkillParameterBuilder::parameter_key)
    /// - [`parameter_value`](crate::types::builders::RoomSkillParameterBuilder::parameter_value)
    pub fn build(self) -> ::std::result::Result<crate::types::RoomSkillParameter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RoomSkillParameter {
            parameter_key: self.parameter_key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parameter_key",
                    "parameter_key was not specified but it is required when building RoomSkillParameter",
                )
            })?,
            parameter_value: self.parameter_value.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parameter_value",
                    "parameter_value was not specified but it is required when building RoomSkillParameter",
                )
            })?,
        })
    }
}
