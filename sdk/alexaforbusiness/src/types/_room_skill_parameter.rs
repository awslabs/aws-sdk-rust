// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A skill parameter associated with a room.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RoomSkillParameter {
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    #[doc(hidden)]
    pub parameter_key: std::option::Option<std::string::String>,
    /// <p>The parameter value of a room skill parameter.</p>
    #[doc(hidden)]
    pub parameter_value: std::option::Option<std::string::String>,
}
impl RoomSkillParameter {
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    pub fn parameter_key(&self) -> std::option::Option<&str> {
        self.parameter_key.as_deref()
    }
    /// <p>The parameter value of a room skill parameter.</p>
    pub fn parameter_value(&self) -> std::option::Option<&str> {
        self.parameter_value.as_deref()
    }
}
impl RoomSkillParameter {
    /// Creates a new builder-style object to manufacture [`RoomSkillParameter`](crate::types::RoomSkillParameter).
    pub fn builder() -> crate::types::builders::RoomSkillParameterBuilder {
        crate::types::builders::RoomSkillParameterBuilder::default()
    }
}

/// A builder for [`RoomSkillParameter`](crate::types::RoomSkillParameter).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RoomSkillParameterBuilder {
    pub(crate) parameter_key: std::option::Option<std::string::String>,
    pub(crate) parameter_value: std::option::Option<std::string::String>,
}
impl RoomSkillParameterBuilder {
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    pub fn parameter_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_key = Some(input.into());
        self
    }
    /// <p>The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.</p>
    pub fn set_parameter_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_key = input;
        self
    }
    /// <p>The parameter value of a room skill parameter.</p>
    pub fn parameter_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.parameter_value = Some(input.into());
        self
    }
    /// <p>The parameter value of a room skill parameter.</p>
    pub fn set_parameter_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.parameter_value = input;
        self
    }
    /// Consumes the builder and constructs a [`RoomSkillParameter`](crate::types::RoomSkillParameter).
    pub fn build(self) -> crate::types::RoomSkillParameter {
        crate::types::RoomSkillParameter {
            parameter_key: self.parameter_key,
            parameter_value: self.parameter_value,
        }
    }
}
