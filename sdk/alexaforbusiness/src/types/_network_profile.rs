// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The network profile associated with a device.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct NetworkProfile {
    /// <p>The ARN of the network profile associated with a device.</p>
    pub network_profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the network profile associated with a device.</p>
    pub network_profile_name: ::std::option::Option<::std::string::String>,
    /// <p>Detailed information about a device's network profile.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The SSID of the Wi-Fi network.</p>
    pub ssid: ::std::option::Option<::std::string::String>,
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub security_type: ::std::option::Option<crate::types::NetworkSecurityType>,
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported. </p>
    pub eap_method: ::std::option::Option<crate::types::NetworkEapMethod>,
    /// <p>The current password of the Wi-Fi network.</p>
    pub current_password: ::std::option::Option<::std::string::String>,
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub next_password: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub certificate_authority_arn: ::std::option::Option<::std::string::String>,
    /// <p>The root certificates of your authentication server, which is installed on your devices and used to trust your authentication server during EAP negotiation.</p>
    pub trust_anchors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NetworkProfile {
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn network_profile_arn(&self) -> ::std::option::Option<&str> {
        self.network_profile_arn.as_deref()
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn network_profile_name(&self) -> ::std::option::Option<&str> {
        self.network_profile_name.as_deref()
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn ssid(&self) -> ::std::option::Option<&str> {
        self.ssid.as_deref()
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn security_type(&self) -> ::std::option::Option<&crate::types::NetworkSecurityType> {
        self.security_type.as_ref()
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported. </p>
    pub fn eap_method(&self) -> ::std::option::Option<&crate::types::NetworkEapMethod> {
        self.eap_method.as_ref()
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn current_password(&self) -> ::std::option::Option<&str> {
        self.current_password.as_deref()
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn next_password(&self) -> ::std::option::Option<&str> {
        self.next_password.as_deref()
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn certificate_authority_arn(&self) -> ::std::option::Option<&str> {
        self.certificate_authority_arn.as_deref()
    }
    /// <p>The root certificates of your authentication server, which is installed on your devices and used to trust your authentication server during EAP negotiation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.trust_anchors.is_none()`.
    pub fn trust_anchors(&self) -> &[::std::string::String] {
        self.trust_anchors.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for NetworkProfile {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NetworkProfile");
        formatter.field("network_profile_arn", &self.network_profile_arn);
        formatter.field("network_profile_name", &self.network_profile_name);
        formatter.field("description", &self.description);
        formatter.field("ssid", &self.ssid);
        formatter.field("security_type", &self.security_type);
        formatter.field("eap_method", &self.eap_method);
        formatter.field("current_password", &"*** Sensitive Data Redacted ***");
        formatter.field("next_password", &"*** Sensitive Data Redacted ***");
        formatter.field("certificate_authority_arn", &self.certificate_authority_arn);
        formatter.field("trust_anchors", &self.trust_anchors);
        formatter.finish()
    }
}
impl NetworkProfile {
    /// Creates a new builder-style object to manufacture [`NetworkProfile`](crate::types::NetworkProfile).
    pub fn builder() -> crate::types::builders::NetworkProfileBuilder {
        crate::types::builders::NetworkProfileBuilder::default()
    }
}

/// A builder for [`NetworkProfile`](crate::types::NetworkProfile).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct NetworkProfileBuilder {
    pub(crate) network_profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) network_profile_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) ssid: ::std::option::Option<::std::string::String>,
    pub(crate) security_type: ::std::option::Option<crate::types::NetworkSecurityType>,
    pub(crate) eap_method: ::std::option::Option<crate::types::NetworkEapMethod>,
    pub(crate) current_password: ::std::option::Option<::std::string::String>,
    pub(crate) next_password: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_authority_arn: ::std::option::Option<::std::string::String>,
    pub(crate) trust_anchors: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl NetworkProfileBuilder {
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn network_profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn set_network_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_profile_arn = input;
        self
    }
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn get_network_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_profile_arn
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn network_profile_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.network_profile_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn set_network_profile_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.network_profile_name = input;
        self
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn get_network_profile_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.network_profile_name
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn ssid(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ssid = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn set_ssid(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ssid = input;
        self
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn get_ssid(&self) -> &::std::option::Option<::std::string::String> {
        &self.ssid
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn security_type(mut self, input: crate::types::NetworkSecurityType) -> Self {
        self.security_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn set_security_type(mut self, input: ::std::option::Option<crate::types::NetworkSecurityType>) -> Self {
        self.security_type = input;
        self
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn get_security_type(&self) -> &::std::option::Option<crate::types::NetworkSecurityType> {
        &self.security_type
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported. </p>
    pub fn eap_method(mut self, input: crate::types::NetworkEapMethod) -> Self {
        self.eap_method = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported. </p>
    pub fn set_eap_method(mut self, input: ::std::option::Option<crate::types::NetworkEapMethod>) -> Self {
        self.eap_method = input;
        self
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported. </p>
    pub fn get_eap_method(&self) -> &::std::option::Option<crate::types::NetworkEapMethod> {
        &self.eap_method
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn current_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn set_current_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_password = input;
        self
    }
    /// <p>The current password of the Wi-Fi network.</p>
    pub fn get_current_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_password
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn next_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn set_next_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_password = input;
        self
    }
    /// <p>The next, or subsequent, password of the Wi-Fi network. This password is asynchronously transmitted to the device and is used when the password of the network changes to NextPassword. </p>
    pub fn get_next_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_password
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn certificate_authority_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_authority_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn set_certificate_authority_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_authority_arn = input;
        self
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices. </p>
    pub fn get_certificate_authority_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_authority_arn
    }
    /// Appends an item to `trust_anchors`.
    ///
    /// To override the contents of this collection use [`set_trust_anchors`](Self::set_trust_anchors).
    ///
    /// <p>The root certificates of your authentication server, which is installed on your devices and used to trust your authentication server during EAP negotiation.</p>
    pub fn trust_anchors(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.trust_anchors.unwrap_or_default();
        v.push(input.into());
        self.trust_anchors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The root certificates of your authentication server, which is installed on your devices and used to trust your authentication server during EAP negotiation.</p>
    pub fn set_trust_anchors(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.trust_anchors = input;
        self
    }
    /// <p>The root certificates of your authentication server, which is installed on your devices and used to trust your authentication server during EAP negotiation.</p>
    pub fn get_trust_anchors(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.trust_anchors
    }
    /// Consumes the builder and constructs a [`NetworkProfile`](crate::types::NetworkProfile).
    pub fn build(self) -> crate::types::NetworkProfile {
        crate::types::NetworkProfile {
            network_profile_arn: self.network_profile_arn,
            network_profile_name: self.network_profile_name,
            description: self.description,
            ssid: self.ssid,
            security_type: self.security_type,
            eap_method: self.eap_method,
            current_password: self.current_password,
            next_password: self.next_password,
            certificate_authority_arn: self.certificate_authority_arn,
            trust_anchors: self.trust_anchors,
        }
    }
}
impl ::std::fmt::Debug for NetworkProfileBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("NetworkProfileBuilder");
        formatter.field("network_profile_arn", &self.network_profile_arn);
        formatter.field("network_profile_name", &self.network_profile_name);
        formatter.field("description", &self.description);
        formatter.field("ssid", &self.ssid);
        formatter.field("security_type", &self.security_type);
        formatter.field("eap_method", &self.eap_method);
        formatter.field("current_password", &"*** Sensitive Data Redacted ***");
        formatter.field("next_password", &"*** Sensitive Data Redacted ***");
        formatter.field("certificate_authority_arn", &self.certificate_authority_arn);
        formatter.field("trust_anchors", &self.trust_anchors);
        formatter.finish()
    }
}
