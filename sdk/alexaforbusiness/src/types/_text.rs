// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The text message.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Text {
    /// <p>The locale of the text message. Currently, en-US is supported.</p>
    #[doc(hidden)]
    pub locale: std::option::Option<crate::types::Locale>,
    /// <p>The value of the text message.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
}
impl Text {
    /// <p>The locale of the text message. Currently, en-US is supported.</p>
    pub fn locale(&self) -> std::option::Option<&crate::types::Locale> {
        self.locale.as_ref()
    }
    /// <p>The value of the text message.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
}
impl Text {
    /// Creates a new builder-style object to manufacture [`Text`](crate::types::Text).
    pub fn builder() -> crate::types::builders::TextBuilder {
        crate::types::builders::TextBuilder::default()
    }
}

/// A builder for [`Text`](crate::types::Text).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TextBuilder {
    pub(crate) locale: std::option::Option<crate::types::Locale>,
    pub(crate) value: std::option::Option<std::string::String>,
}
impl TextBuilder {
    /// <p>The locale of the text message. Currently, en-US is supported.</p>
    pub fn locale(mut self, input: crate::types::Locale) -> Self {
        self.locale = Some(input);
        self
    }
    /// <p>The locale of the text message. Currently, en-US is supported.</p>
    pub fn set_locale(mut self, input: std::option::Option<crate::types::Locale>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The value of the text message.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the text message.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// Consumes the builder and constructs a [`Text`](crate::types::Text).
    pub fn build(self) -> crate::types::Text {
        crate::types::Text {
            locale: self.locale,
            value: self.value,
        }
    }
}
