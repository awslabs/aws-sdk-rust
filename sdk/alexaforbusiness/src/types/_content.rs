// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The content definition. This can contain only one text, SSML, or audio list object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Content {
    /// <p>The list of text messages.</p>
    pub text_list: ::std::option::Option<::std::vec::Vec<crate::types::Text>>,
    /// <p>The list of SSML messages.</p>
    pub ssml_list: ::std::option::Option<::std::vec::Vec<crate::types::Ssml>>,
    /// <p>The list of audio messages.</p>
    pub audio_list: ::std::option::Option<::std::vec::Vec<crate::types::Audio>>,
}
impl Content {
    /// <p>The list of text messages.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.text_list.is_none()`.
    pub fn text_list(&self) -> &[crate::types::Text] {
        self.text_list.as_deref().unwrap_or_default()
    }
    /// <p>The list of SSML messages.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ssml_list.is_none()`.
    pub fn ssml_list(&self) -> &[crate::types::Ssml] {
        self.ssml_list.as_deref().unwrap_or_default()
    }
    /// <p>The list of audio messages.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.audio_list.is_none()`.
    pub fn audio_list(&self) -> &[crate::types::Audio] {
        self.audio_list.as_deref().unwrap_or_default()
    }
}
impl Content {
    /// Creates a new builder-style object to manufacture [`Content`](crate::types::Content).
    pub fn builder() -> crate::types::builders::ContentBuilder {
        crate::types::builders::ContentBuilder::default()
    }
}

/// A builder for [`Content`](crate::types::Content).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContentBuilder {
    pub(crate) text_list: ::std::option::Option<::std::vec::Vec<crate::types::Text>>,
    pub(crate) ssml_list: ::std::option::Option<::std::vec::Vec<crate::types::Ssml>>,
    pub(crate) audio_list: ::std::option::Option<::std::vec::Vec<crate::types::Audio>>,
}
impl ContentBuilder {
    /// Appends an item to `text_list`.
    ///
    /// To override the contents of this collection use [`set_text_list`](Self::set_text_list).
    ///
    /// <p>The list of text messages.</p>
    pub fn text_list(mut self, input: crate::types::Text) -> Self {
        let mut v = self.text_list.unwrap_or_default();
        v.push(input);
        self.text_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of text messages.</p>
    pub fn set_text_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Text>>) -> Self {
        self.text_list = input;
        self
    }
    /// <p>The list of text messages.</p>
    pub fn get_text_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Text>> {
        &self.text_list
    }
    /// Appends an item to `ssml_list`.
    ///
    /// To override the contents of this collection use [`set_ssml_list`](Self::set_ssml_list).
    ///
    /// <p>The list of SSML messages.</p>
    pub fn ssml_list(mut self, input: crate::types::Ssml) -> Self {
        let mut v = self.ssml_list.unwrap_or_default();
        v.push(input);
        self.ssml_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of SSML messages.</p>
    pub fn set_ssml_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Ssml>>) -> Self {
        self.ssml_list = input;
        self
    }
    /// <p>The list of SSML messages.</p>
    pub fn get_ssml_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Ssml>> {
        &self.ssml_list
    }
    /// Appends an item to `audio_list`.
    ///
    /// To override the contents of this collection use [`set_audio_list`](Self::set_audio_list).
    ///
    /// <p>The list of audio messages.</p>
    pub fn audio_list(mut self, input: crate::types::Audio) -> Self {
        let mut v = self.audio_list.unwrap_or_default();
        v.push(input);
        self.audio_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of audio messages.</p>
    pub fn set_audio_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Audio>>) -> Self {
        self.audio_list = input;
        self
    }
    /// <p>The list of audio messages.</p>
    pub fn get_audio_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Audio>> {
        &self.audio_list
    }
    /// Consumes the builder and constructs a [`Content`](crate::types::Content).
    pub fn build(self) -> crate::types::Content {
        crate::types::Content {
            text_list: self.text_list,
            ssml_list: self.ssml_list,
            audio_list: self.audio_list,
        }
    }
}
