// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data associated with a network profile.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkProfileData {
    /// <p>The ARN of the network profile associated with a device.</p>
    #[doc(hidden)]
    pub network_profile_arn: std::option::Option<std::string::String>,
    /// <p>The name of the network profile associated with a device.</p>
    #[doc(hidden)]
    pub network_profile_name: std::option::Option<std::string::String>,
    /// <p>Detailed information about a device's network profile.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The SSID of the Wi-Fi network.</p>
    #[doc(hidden)]
    pub ssid: std::option::Option<std::string::String>,
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    #[doc(hidden)]
    pub security_type: std::option::Option<crate::types::NetworkSecurityType>,
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported.</p>
    #[doc(hidden)]
    pub eap_method: std::option::Option<crate::types::NetworkEapMethod>,
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices.</p>
    #[doc(hidden)]
    pub certificate_authority_arn: std::option::Option<std::string::String>,
}
impl NetworkProfileData {
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn network_profile_arn(&self) -> std::option::Option<&str> {
        self.network_profile_arn.as_deref()
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn network_profile_name(&self) -> std::option::Option<&str> {
        self.network_profile_name.as_deref()
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn ssid(&self) -> std::option::Option<&str> {
        self.ssid.as_deref()
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn security_type(&self) -> std::option::Option<&crate::types::NetworkSecurityType> {
        self.security_type.as_ref()
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported.</p>
    pub fn eap_method(&self) -> std::option::Option<&crate::types::NetworkEapMethod> {
        self.eap_method.as_ref()
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices.</p>
    pub fn certificate_authority_arn(&self) -> std::option::Option<&str> {
        self.certificate_authority_arn.as_deref()
    }
}
impl NetworkProfileData {
    /// Creates a new builder-style object to manufacture [`NetworkProfileData`](crate::types::NetworkProfileData).
    pub fn builder() -> crate::types::builders::NetworkProfileDataBuilder {
        crate::types::builders::NetworkProfileDataBuilder::default()
    }
}

/// A builder for [`NetworkProfileData`](crate::types::NetworkProfileData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkProfileDataBuilder {
    pub(crate) network_profile_arn: std::option::Option<std::string::String>,
    pub(crate) network_profile_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) ssid: std::option::Option<std::string::String>,
    pub(crate) security_type: std::option::Option<crate::types::NetworkSecurityType>,
    pub(crate) eap_method: std::option::Option<crate::types::NetworkEapMethod>,
    pub(crate) certificate_authority_arn: std::option::Option<std::string::String>,
}
impl NetworkProfileDataBuilder {
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn network_profile_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_profile_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the network profile associated with a device.</p>
    pub fn set_network_profile_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_profile_arn = input;
        self
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn network_profile_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_profile_name = Some(input.into());
        self
    }
    /// <p>The name of the network profile associated with a device.</p>
    pub fn set_network_profile_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_profile_name = input;
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Detailed information about a device's network profile.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn ssid(mut self, input: impl Into<std::string::String>) -> Self {
        self.ssid = Some(input.into());
        self
    }
    /// <p>The SSID of the Wi-Fi network.</p>
    pub fn set_ssid(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ssid = input;
        self
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn security_type(mut self, input: crate::types::NetworkSecurityType) -> Self {
        self.security_type = Some(input);
        self
    }
    /// <p>The security type of the Wi-Fi network. This can be WPA2_ENTERPRISE, WPA2_PSK, WPA_PSK, WEP, or OPEN.</p>
    pub fn set_security_type(
        mut self,
        input: std::option::Option<crate::types::NetworkSecurityType>,
    ) -> Self {
        self.security_type = input;
        self
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported.</p>
    pub fn eap_method(mut self, input: crate::types::NetworkEapMethod) -> Self {
        self.eap_method = Some(input);
        self
    }
    /// <p>The authentication standard that is used in the EAP framework. Currently, EAP_TLS is supported.</p>
    pub fn set_eap_method(
        mut self,
        input: std::option::Option<crate::types::NetworkEapMethod>,
    ) -> Self {
        self.eap_method = input;
        self
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices.</p>
    pub fn certificate_authority_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.certificate_authority_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the Private Certificate Authority (PCA) created in AWS Certificate Manager (ACM). This is used to issue certificates to the devices.</p>
    pub fn set_certificate_authority_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.certificate_authority_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkProfileData`](crate::types::NetworkProfileData).
    pub fn build(self) -> crate::types::NetworkProfileData {
        crate::types::NetworkProfileData {
            network_profile_arn: self.network_profile_arn,
            network_profile_name: self.network_profile_name,
            description: self.description,
            ssid: self.ssid,
            security_type: self.security_type,
            eap_method: self.eap_method,
            certificate_authority_arn: self.certificate_authority_arn,
        }
    }
}
