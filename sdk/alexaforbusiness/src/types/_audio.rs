// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The audio message. There is a 1 MB limit on the audio file input and the only supported format is MP3. To convert your MP3 audio files to an Alexa-friendly, </p>
/// <p>required codec version (MPEG version 2) and bit rate (48 kbps), you might use converter software. One option for this is a command-line tool, FFmpeg. For more information, see <a href="https://www.ffmpeg.org/">FFmpeg</a>. The following command converts the provided <input-file>
/// to an MP3 file that is played in the announcement:
/// </input-file></p>
/// <p> <code>ffmpeg -i
/// <input-file>
/// -ac 2 -codec:a libmp3lame -b:a 48k -ar 16000
/// <output-file.mp3></output-file.mp3>
/// </input-file></code> </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Audio {
    /// <p>The locale of the audio message. Currently, en-US is supported.</p>
    pub locale: crate::types::Locale,
    /// <p>The location of the audio file. Currently, S3 URLs are supported. Only S3 locations comprised of safe characters are valid. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#Safe%20Characters">Safe Characters</a>.</p>
    pub location: ::std::string::String,
}
impl Audio {
    /// <p>The locale of the audio message. Currently, en-US is supported.</p>
    pub fn locale(&self) -> &crate::types::Locale {
        &self.locale
    }
    /// <p>The location of the audio file. Currently, S3 URLs are supported. Only S3 locations comprised of safe characters are valid. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#Safe%20Characters">Safe Characters</a>.</p>
    pub fn location(&self) -> &str {
        use std::ops::Deref;
        self.location.deref()
    }
}
impl Audio {
    /// Creates a new builder-style object to manufacture [`Audio`](crate::types::Audio).
    pub fn builder() -> crate::types::builders::AudioBuilder {
        crate::types::builders::AudioBuilder::default()
    }
}

/// A builder for [`Audio`](crate::types::Audio).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AudioBuilder {
    pub(crate) locale: ::std::option::Option<crate::types::Locale>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
}
impl AudioBuilder {
    /// <p>The locale of the audio message. Currently, en-US is supported.</p>
    /// This field is required.
    pub fn locale(mut self, input: crate::types::Locale) -> Self {
        self.locale = ::std::option::Option::Some(input);
        self
    }
    /// <p>The locale of the audio message. Currently, en-US is supported.</p>
    pub fn set_locale(mut self, input: ::std::option::Option<crate::types::Locale>) -> Self {
        self.locale = input;
        self
    }
    /// <p>The locale of the audio message. Currently, en-US is supported.</p>
    pub fn get_locale(&self) -> &::std::option::Option<crate::types::Locale> {
        &self.locale
    }
    /// <p>The location of the audio file. Currently, S3 URLs are supported. Only S3 locations comprised of safe characters are valid. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#Safe%20Characters">Safe Characters</a>.</p>
    /// This field is required.
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The location of the audio file. Currently, S3 URLs are supported. Only S3 locations comprised of safe characters are valid. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#Safe%20Characters">Safe Characters</a>.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>The location of the audio file. Currently, S3 URLs are supported. Only S3 locations comprised of safe characters are valid. For more information, see <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#Safe%20Characters">Safe Characters</a>.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// Consumes the builder and constructs a [`Audio`](crate::types::Audio).
    /// This method will fail if any of the following fields are not set:
    /// - [`locale`](crate::types::builders::AudioBuilder::locale)
    /// - [`location`](crate::types::builders::AudioBuilder::location)
    pub fn build(self) -> ::std::result::Result<crate::types::Audio, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Audio {
            locale: self.locale.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "locale",
                    "locale was not specified but it is required when building Audio",
                )
            })?,
            location: self.location.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "location",
                    "location was not specified but it is required when building Audio",
                )
            })?,
        })
    }
}
