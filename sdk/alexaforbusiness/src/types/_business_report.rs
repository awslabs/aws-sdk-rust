// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Usage report with specified parameters.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BusinessReport {
    /// <p>The status of the report generation execution (RUNNING, SUCCEEDED, or FAILED).</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::BusinessReportStatus>,
    /// <p>The failure code.</p>
    #[doc(hidden)]
    pub failure_code: std::option::Option<crate::types::BusinessReportFailureCode>,
    /// <p>The S3 location of the output reports.</p>
    #[doc(hidden)]
    pub s3_location: std::option::Option<crate::types::BusinessReportS3Location>,
    /// <p>The time of report delivery.</p>
    #[doc(hidden)]
    pub delivery_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The download link where a user can download the report.</p>
    #[doc(hidden)]
    pub download_url: std::option::Option<std::string::String>,
}
impl BusinessReport {
    /// <p>The status of the report generation execution (RUNNING, SUCCEEDED, or FAILED).</p>
    pub fn status(&self) -> std::option::Option<&crate::types::BusinessReportStatus> {
        self.status.as_ref()
    }
    /// <p>The failure code.</p>
    pub fn failure_code(&self) -> std::option::Option<&crate::types::BusinessReportFailureCode> {
        self.failure_code.as_ref()
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn s3_location(&self) -> std::option::Option<&crate::types::BusinessReportS3Location> {
        self.s3_location.as_ref()
    }
    /// <p>The time of report delivery.</p>
    pub fn delivery_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.delivery_time.as_ref()
    }
    /// <p>The download link where a user can download the report.</p>
    pub fn download_url(&self) -> std::option::Option<&str> {
        self.download_url.as_deref()
    }
}
impl BusinessReport {
    /// Creates a new builder-style object to manufacture [`BusinessReport`](crate::types::BusinessReport).
    pub fn builder() -> crate::types::builders::BusinessReportBuilder {
        crate::types::builders::BusinessReportBuilder::default()
    }
}

/// A builder for [`BusinessReport`](crate::types::BusinessReport).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BusinessReportBuilder {
    pub(crate) status: std::option::Option<crate::types::BusinessReportStatus>,
    pub(crate) failure_code: std::option::Option<crate::types::BusinessReportFailureCode>,
    pub(crate) s3_location: std::option::Option<crate::types::BusinessReportS3Location>,
    pub(crate) delivery_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) download_url: std::option::Option<std::string::String>,
}
impl BusinessReportBuilder {
    /// <p>The status of the report generation execution (RUNNING, SUCCEEDED, or FAILED).</p>
    pub fn status(mut self, input: crate::types::BusinessReportStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the report generation execution (RUNNING, SUCCEEDED, or FAILED).</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::BusinessReportStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The failure code.</p>
    pub fn failure_code(mut self, input: crate::types::BusinessReportFailureCode) -> Self {
        self.failure_code = Some(input);
        self
    }
    /// <p>The failure code.</p>
    pub fn set_failure_code(
        mut self,
        input: std::option::Option<crate::types::BusinessReportFailureCode>,
    ) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn s3_location(mut self, input: crate::types::BusinessReportS3Location) -> Self {
        self.s3_location = Some(input);
        self
    }
    /// <p>The S3 location of the output reports.</p>
    pub fn set_s3_location(
        mut self,
        input: std::option::Option<crate::types::BusinessReportS3Location>,
    ) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The time of report delivery.</p>
    pub fn delivery_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.delivery_time = Some(input);
        self
    }
    /// <p>The time of report delivery.</p>
    pub fn set_delivery_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.delivery_time = input;
        self
    }
    /// <p>The download link where a user can download the report.</p>
    pub fn download_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.download_url = Some(input.into());
        self
    }
    /// <p>The download link where a user can download the report.</p>
    pub fn set_download_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.download_url = input;
        self
    }
    /// Consumes the builder and constructs a [`BusinessReport`](crate::types::BusinessReport).
    pub fn build(self) -> crate::types::BusinessReport {
        crate::types::BusinessReport {
            status: self.status,
            failure_code: self.failure_code,
            s3_location: self.s3_location,
            delivery_time: self.delivery_time,
            download_url: self.download_url,
        }
    }
}
