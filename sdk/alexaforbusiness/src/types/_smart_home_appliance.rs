// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A smart home appliance that can connect to a central system. Any domestic device can be a smart appliance. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SmartHomeAppliance {
    /// <p>The friendly name of the smart home appliance.</p>
    #[doc(hidden)]
    pub friendly_name: std::option::Option<std::string::String>,
    /// <p>The description of the smart home appliance.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The name of the manufacturer of the smart home appliance.</p>
    #[doc(hidden)]
    pub manufacturer_name: std::option::Option<std::string::String>,
}
impl SmartHomeAppliance {
    /// <p>The friendly name of the smart home appliance.</p>
    pub fn friendly_name(&self) -> std::option::Option<&str> {
        self.friendly_name.as_deref()
    }
    /// <p>The description of the smart home appliance.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The name of the manufacturer of the smart home appliance.</p>
    pub fn manufacturer_name(&self) -> std::option::Option<&str> {
        self.manufacturer_name.as_deref()
    }
}
impl SmartHomeAppliance {
    /// Creates a new builder-style object to manufacture [`SmartHomeAppliance`](crate::types::SmartHomeAppliance).
    pub fn builder() -> crate::types::builders::SmartHomeApplianceBuilder {
        crate::types::builders::SmartHomeApplianceBuilder::default()
    }
}

/// A builder for [`SmartHomeAppliance`](crate::types::SmartHomeAppliance).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SmartHomeApplianceBuilder {
    pub(crate) friendly_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) manufacturer_name: std::option::Option<std::string::String>,
}
impl SmartHomeApplianceBuilder {
    /// <p>The friendly name of the smart home appliance.</p>
    pub fn friendly_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.friendly_name = Some(input.into());
        self
    }
    /// <p>The friendly name of the smart home appliance.</p>
    pub fn set_friendly_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.friendly_name = input;
        self
    }
    /// <p>The description of the smart home appliance.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the smart home appliance.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The name of the manufacturer of the smart home appliance.</p>
    pub fn manufacturer_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.manufacturer_name = Some(input.into());
        self
    }
    /// <p>The name of the manufacturer of the smart home appliance.</p>
    pub fn set_manufacturer_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.manufacturer_name = input;
        self
    }
    /// Consumes the builder and constructs a [`SmartHomeAppliance`](crate::types::SmartHomeAppliance).
    pub fn build(self) -> crate::types::SmartHomeAppliance {
        crate::types::SmartHomeAppliance {
            friendly_name: self.friendly_name,
            description: self.description,
            manufacturer_name: self.manufacturer_name,
        }
    }
}
