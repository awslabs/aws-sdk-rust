// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Creates settings for the end of meeting reminder feature that are applied to a room profile. The end of meeting reminder enables Alexa to remind users when a meeting is ending.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateEndOfMeetingReminder {
    /// <p> A range of 3 to 15 minutes that determines when the reminder begins.</p>
    #[doc(hidden)]
    pub reminder_at_minutes: std::option::Option<std::vec::Vec<i32>>,
    /// <p>The type of sound that users hear during the end of meeting reminder. </p>
    #[doc(hidden)]
    pub reminder_type: std::option::Option<crate::types::EndOfMeetingReminderType>,
    /// <p>Whether an end of meeting reminder is enabled or not.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
}
impl CreateEndOfMeetingReminder {
    /// <p> A range of 3 to 15 minutes that determines when the reminder begins.</p>
    pub fn reminder_at_minutes(&self) -> std::option::Option<&[i32]> {
        self.reminder_at_minutes.as_deref()
    }
    /// <p>The type of sound that users hear during the end of meeting reminder. </p>
    pub fn reminder_type(&self) -> std::option::Option<&crate::types::EndOfMeetingReminderType> {
        self.reminder_type.as_ref()
    }
    /// <p>Whether an end of meeting reminder is enabled or not.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
}
impl CreateEndOfMeetingReminder {
    /// Creates a new builder-style object to manufacture [`CreateEndOfMeetingReminder`](crate::types::CreateEndOfMeetingReminder).
    pub fn builder() -> crate::types::builders::CreateEndOfMeetingReminderBuilder {
        crate::types::builders::CreateEndOfMeetingReminderBuilder::default()
    }
}

/// A builder for [`CreateEndOfMeetingReminder`](crate::types::CreateEndOfMeetingReminder).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateEndOfMeetingReminderBuilder {
    pub(crate) reminder_at_minutes: std::option::Option<std::vec::Vec<i32>>,
    pub(crate) reminder_type: std::option::Option<crate::types::EndOfMeetingReminderType>,
    pub(crate) enabled: std::option::Option<bool>,
}
impl CreateEndOfMeetingReminderBuilder {
    /// Appends an item to `reminder_at_minutes`.
    ///
    /// To override the contents of this collection use [`set_reminder_at_minutes`](Self::set_reminder_at_minutes).
    ///
    /// <p> A range of 3 to 15 minutes that determines when the reminder begins.</p>
    pub fn reminder_at_minutes(mut self, input: i32) -> Self {
        let mut v = self.reminder_at_minutes.unwrap_or_default();
        v.push(input);
        self.reminder_at_minutes = Some(v);
        self
    }
    /// <p> A range of 3 to 15 minutes that determines when the reminder begins.</p>
    pub fn set_reminder_at_minutes(
        mut self,
        input: std::option::Option<std::vec::Vec<i32>>,
    ) -> Self {
        self.reminder_at_minutes = input;
        self
    }
    /// <p>The type of sound that users hear during the end of meeting reminder. </p>
    pub fn reminder_type(mut self, input: crate::types::EndOfMeetingReminderType) -> Self {
        self.reminder_type = Some(input);
        self
    }
    /// <p>The type of sound that users hear during the end of meeting reminder. </p>
    pub fn set_reminder_type(
        mut self,
        input: std::option::Option<crate::types::EndOfMeetingReminderType>,
    ) -> Self {
        self.reminder_type = input;
        self
    }
    /// <p>Whether an end of meeting reminder is enabled or not.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Whether an end of meeting reminder is enabled or not.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateEndOfMeetingReminder`](crate::types::CreateEndOfMeetingReminder).
    pub fn build(self) -> crate::types::CreateEndOfMeetingReminder {
        crate::types::CreateEndOfMeetingReminder {
            reminder_at_minutes: self.reminder_at_minutes,
            reminder_type: self.reminder_type,
            enabled: self.enabled,
        }
    }
}
