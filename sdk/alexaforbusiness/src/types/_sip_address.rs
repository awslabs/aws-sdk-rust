// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The SIP address for the contact containing the URI and SIP address type.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SipAddress {
    /// <p>The URI for the SIP address.</p>
    pub uri: ::std::string::String,
    /// <p>The type of the SIP address.</p>
    pub r#type: crate::types::SipType,
}
impl SipAddress {
    /// <p>The URI for the SIP address.</p>
    pub fn uri(&self) -> &str {
        use std::ops::Deref;
        self.uri.deref()
    }
    /// <p>The type of the SIP address.</p>
    pub fn r#type(&self) -> &crate::types::SipType {
        &self.r#type
    }
}
impl ::std::fmt::Debug for SipAddress {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SipAddress");
        formatter.field("uri", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SipAddress {
    /// Creates a new builder-style object to manufacture [`SipAddress`](crate::types::SipAddress).
    pub fn builder() -> crate::types::builders::SipAddressBuilder {
        crate::types::builders::SipAddressBuilder::default()
    }
}

/// A builder for [`SipAddress`](crate::types::SipAddress).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SipAddressBuilder {
    pub(crate) uri: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::SipType>,
}
impl SipAddressBuilder {
    /// <p>The URI for the SIP address.</p>
    /// This field is required.
    pub fn uri(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.uri = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The URI for the SIP address.</p>
    pub fn set_uri(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.uri = input;
        self
    }
    /// <p>The URI for the SIP address.</p>
    pub fn get_uri(&self) -> &::std::option::Option<::std::string::String> {
        &self.uri
    }
    /// <p>The type of the SIP address.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::SipType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the SIP address.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::SipType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the SIP address.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::SipType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`SipAddress`](crate::types::SipAddress).
    /// This method will fail if any of the following fields are not set:
    /// - [`uri`](crate::types::builders::SipAddressBuilder::uri)
    /// - [`r#type`](crate::types::builders::SipAddressBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::SipAddress, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SipAddress {
            uri: self.uri.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "uri",
                    "uri was not specified but it is required when building SipAddress",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building SipAddress",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for SipAddressBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SipAddressBuilder");
        formatter.field("uri", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
