// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The content range of the report.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BusinessReportContentRange {
    /// <p>The interval of the content range.</p>
    #[doc(hidden)]
    pub interval: std::option::Option<crate::types::BusinessReportInterval>,
}
impl BusinessReportContentRange {
    /// <p>The interval of the content range.</p>
    pub fn interval(&self) -> std::option::Option<&crate::types::BusinessReportInterval> {
        self.interval.as_ref()
    }
}
impl BusinessReportContentRange {
    /// Creates a new builder-style object to manufacture [`BusinessReportContentRange`](crate::types::BusinessReportContentRange).
    pub fn builder() -> crate::types::builders::BusinessReportContentRangeBuilder {
        crate::types::builders::BusinessReportContentRangeBuilder::default()
    }
}

/// A builder for [`BusinessReportContentRange`](crate::types::BusinessReportContentRange).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BusinessReportContentRangeBuilder {
    pub(crate) interval: std::option::Option<crate::types::BusinessReportInterval>,
}
impl BusinessReportContentRangeBuilder {
    /// <p>The interval of the content range.</p>
    pub fn interval(mut self, input: crate::types::BusinessReportInterval) -> Self {
        self.interval = Some(input);
        self
    }
    /// <p>The interval of the content range.</p>
    pub fn set_interval(
        mut self,
        input: std::option::Option<crate::types::BusinessReportInterval>,
    ) -> Self {
        self.interval = input;
        self
    }
    /// Consumes the builder and constructs a [`BusinessReportContentRange`](crate::types::BusinessReportContentRange).
    pub fn build(self) -> crate::types::BusinessReportContentRange {
        crate::types::BusinessReportContentRange {
            interval: self.interval,
        }
    }
}
