// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The list of device events.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceEvent {
    /// <p>The type of device event.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::DeviceEventType>,
    /// <p>The value of the event.</p>
    #[doc(hidden)]
    pub value: std::option::Option<std::string::String>,
    /// <p>The time (in epoch) when the event occurred. </p>
    #[doc(hidden)]
    pub timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl DeviceEvent {
    /// <p>The type of device event.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::DeviceEventType> {
        self.r#type.as_ref()
    }
    /// <p>The value of the event.</p>
    pub fn value(&self) -> std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The time (in epoch) when the event occurred. </p>
    pub fn timestamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.timestamp.as_ref()
    }
}
impl DeviceEvent {
    /// Creates a new builder-style object to manufacture [`DeviceEvent`](crate::types::DeviceEvent).
    pub fn builder() -> crate::types::builders::DeviceEventBuilder {
        crate::types::builders::DeviceEventBuilder::default()
    }
}

/// A builder for [`DeviceEvent`](crate::types::DeviceEvent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceEventBuilder {
    pub(crate) r#type: std::option::Option<crate::types::DeviceEventType>,
    pub(crate) value: std::option::Option<std::string::String>,
    pub(crate) timestamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl DeviceEventBuilder {
    /// <p>The type of device event.</p>
    pub fn r#type(mut self, input: crate::types::DeviceEventType) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of device event.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::DeviceEventType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The value of the event.</p>
    pub fn value(mut self, input: impl Into<std::string::String>) -> Self {
        self.value = Some(input.into());
        self
    }
    /// <p>The value of the event.</p>
    pub fn set_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The time (in epoch) when the event occurred. </p>
    pub fn timestamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.timestamp = Some(input);
        self
    }
    /// <p>The time (in epoch) when the event occurred. </p>
    pub fn set_timestamp(mut self, input: std::option::Option<aws_smithy_types::DateTime>) -> Self {
        self.timestamp = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceEvent`](crate::types::DeviceEvent).
    pub fn build(self) -> crate::types::DeviceEvent {
        crate::types::DeviceEvent {
            r#type: self.r#type,
            value: self.value,
            timestamp: self.timestamp,
        }
    }
}
