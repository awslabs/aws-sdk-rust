// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of a gateway.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GatewaySummary {
    /// <p>The ARN of the gateway.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The name of the gateway.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the gateway.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The ARN of the gateway group that the gateway is associated to.</p>
    #[doc(hidden)]
    pub gateway_group_arn: std::option::Option<std::string::String>,
    /// <p>The software version of the gateway. The gateway automatically updates its software version during normal operation.</p>
    #[doc(hidden)]
    pub software_version: std::option::Option<std::string::String>,
}
impl GatewaySummary {
    /// <p>The ARN of the gateway.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the gateway.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the gateway.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the gateway group that the gateway is associated to.</p>
    pub fn gateway_group_arn(&self) -> std::option::Option<&str> {
        self.gateway_group_arn.as_deref()
    }
    /// <p>The software version of the gateway. The gateway automatically updates its software version during normal operation.</p>
    pub fn software_version(&self) -> std::option::Option<&str> {
        self.software_version.as_deref()
    }
}
impl GatewaySummary {
    /// Creates a new builder-style object to manufacture [`GatewaySummary`](crate::types::GatewaySummary).
    pub fn builder() -> crate::types::builders::GatewaySummaryBuilder {
        crate::types::builders::GatewaySummaryBuilder::default()
    }
}

/// A builder for [`GatewaySummary`](crate::types::GatewaySummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GatewaySummaryBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) gateway_group_arn: std::option::Option<std::string::String>,
    pub(crate) software_version: std::option::Option<std::string::String>,
}
impl GatewaySummaryBuilder {
    /// <p>The ARN of the gateway.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the gateway.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The name of the gateway.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the gateway.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the gateway.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the gateway.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The ARN of the gateway group that the gateway is associated to.</p>
    pub fn gateway_group_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_group_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the gateway group that the gateway is associated to.</p>
    pub fn set_gateway_group_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.gateway_group_arn = input;
        self
    }
    /// <p>The software version of the gateway. The gateway automatically updates its software version during normal operation.</p>
    pub fn software_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.software_version = Some(input.into());
        self
    }
    /// <p>The software version of the gateway. The gateway automatically updates its software version during normal operation.</p>
    pub fn set_software_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.software_version = input;
        self
    }
    /// Consumes the builder and constructs a [`GatewaySummary`](crate::types::GatewaySummary).
    pub fn build(self) -> crate::types::GatewaySummary {
        crate::types::GatewaySummary {
            arn: self.arn,
            name: self.name,
            description: self.description,
            gateway_group_arn: self.gateway_group_arn,
            software_version: self.software_version,
        }
    }
}
