// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_conference_provider_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_conference_provider::CreateConferenceProviderInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.conference_provider_name {
        object.key("ConferenceProviderName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.conference_provider_type {
        object.key("ConferenceProviderType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.ip_dial_in {
        #[allow(unused_mut)]
        let mut object_4 = object.key("IPDialIn").start_object();
        crate::protocol_serde::shape_ip_dial_in::ser_ip_dial_in(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.pstn_dial_in {
        #[allow(unused_mut)]
        let mut object_6 = object.key("PSTNDialIn").start_object();
        crate::protocol_serde::shape_pstn_dial_in::ser_pstn_dial_in(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.meeting_setting {
        #[allow(unused_mut)]
        let mut object_8 = object.key("MeetingSetting").start_object();
        crate::protocol_serde::shape_meeting_setting::ser_meeting_setting(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_9.as_str());
    }
    if let Some(var_10) = &input.tags {
        let mut array_11 = object.key("Tags").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}
