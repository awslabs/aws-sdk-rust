// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_meeting_room_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::CreateMeetingRoomConfiguration,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.room_utilization_metrics_enabled {
        object.key("RoomUtilizationMetricsEnabled").boolean(*var_1);
    }
    if let Some(var_2) = &input.end_of_meeting_reminder {
        #[allow(unused_mut)]
        let mut object_3 = object.key("EndOfMeetingReminder").start_object();
        crate::protocol_serde::shape_create_end_of_meeting_reminder::ser_create_end_of_meeting_reminder(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.instant_booking {
        #[allow(unused_mut)]
        let mut object_5 = object.key("InstantBooking").start_object();
        crate::protocol_serde::shape_create_instant_booking::ser_create_instant_booking(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.require_check_in {
        #[allow(unused_mut)]
        let mut object_7 = object.key("RequireCheckIn").start_object();
        crate::protocol_serde::shape_create_require_check_in::ser_create_require_check_in(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.proactive_join {
        #[allow(unused_mut)]
        let mut object_9 = object.key("ProactiveJoin").start_object();
        crate::protocol_serde::shape_create_proactive_join::ser_create_proactive_join(&mut object_9, var_8)?;
        object_9.finish();
    }
    Ok(())
}
