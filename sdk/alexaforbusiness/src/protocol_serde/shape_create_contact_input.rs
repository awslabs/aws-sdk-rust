// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_contact_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_contact::CreateContactInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.display_name {
        object.key("DisplayName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.first_name {
        object.key("FirstName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.last_name {
        object.key("LastName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.phone_number {
        object.key("PhoneNumber").string(var_4.as_str());
    }
    if let Some(var_5) = &input.phone_numbers {
        let mut array_6 = object.key("PhoneNumbers").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_phone_number::ser_phone_number(&mut object_8, item_7)?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.sip_addresses {
        let mut array_10 = object.key("SipAddresses").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_sip_address::ser_sip_address(&mut object_12, item_11)?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_13.as_str());
    }
    if let Some(var_14) = &input.tags {
        let mut array_15 = object.key("Tags").start_array();
        for item_16 in var_14 {
            {
                #[allow(unused_mut)]
                let mut object_17 = array_15.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_17, item_16)?;
                object_17.finish();
            }
        }
        array_15.finish();
    }
    Ok(())
}
