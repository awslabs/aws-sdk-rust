// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_profile_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_profile::CreateProfileInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.profile_name {
        object.key("ProfileName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.timezone {
        object.key("Timezone").string(var_2.as_str());
    }
    if let Some(var_3) = &input.address {
        object.key("Address").string(var_3.as_str());
    }
    if let Some(var_4) = &input.distance_unit {
        object.key("DistanceUnit").string(var_4.as_str());
    }
    if let Some(var_5) = &input.temperature_unit {
        object.key("TemperatureUnit").string(var_5.as_str());
    }
    if let Some(var_6) = &input.wake_word {
        object.key("WakeWord").string(var_6.as_str());
    }
    if let Some(var_7) = &input.locale {
        object.key("Locale").string(var_7.as_str());
    }
    if let Some(var_8) = &input.client_request_token {
        object.key("ClientRequestToken").string(var_8.as_str());
    }
    if let Some(var_9) = &input.setup_mode_disabled {
        object.key("SetupModeDisabled").boolean(*var_9);
    }
    if let Some(var_10) = &input.max_volume_limit {
        object.key("MaxVolumeLimit").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_10).into()),
        );
    }
    if let Some(var_11) = &input.pstn_enabled {
        object.key("PSTNEnabled").boolean(*var_11);
    }
    if let Some(var_12) = &input.data_retention_opt_in {
        object.key("DataRetentionOptIn").boolean(*var_12);
    }
    if let Some(var_13) = &input.meeting_room_configuration {
        #[allow(unused_mut)]
        let mut object_14 = object.key("MeetingRoomConfiguration").start_object();
        crate::protocol_serde::shape_create_meeting_room_configuration::ser_create_meeting_room_configuration(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.tags {
        let mut array_16 = object.key("Tags").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    Ok(())
}
