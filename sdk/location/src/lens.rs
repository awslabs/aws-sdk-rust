// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_device_position_history_output_next_token(
    input: &crate::operation::get_device_position_history::GetDevicePositionHistoryOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_device_positions_output_next_token(
    input: &crate::operation::list_device_positions::ListDevicePositionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_geofence_collections_output_next_token(
    input: &crate::operation::list_geofence_collections::ListGeofenceCollectionsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_geofences_output_next_token(
    input: &crate::operation::list_geofences::ListGeofencesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_maps_output_next_token(
    input: &crate::operation::list_maps::ListMapsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_place_indexes_output_next_token(
    input: &crate::operation::list_place_indexes::ListPlaceIndexesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_route_calculators_output_next_token(
    input: &crate::operation::list_route_calculators::ListRouteCalculatorsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_tracker_consumers_output_next_token(
    input: &crate::operation::list_tracker_consumers::ListTrackerConsumersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_trackers_output_next_token(
    input: &crate::operation::list_trackers::ListTrackersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_device_position_history_output_device_positions(
    input: crate::operation::get_device_position_history::GetDevicePositionHistoryOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DevicePosition>> {
    let input = match input.device_positions {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_device_positions_output_entries(
    input: crate::operation::list_device_positions::ListDevicePositionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListDevicePositionsResponseEntry>> {
    let input = match input.entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_geofence_collections_output_entries(
    input: crate::operation::list_geofence_collections::ListGeofenceCollectionsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListGeofenceCollectionsResponseEntry>> {
    let input = match input.entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_geofences_output_entries(
    input: crate::operation::list_geofences::ListGeofencesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListGeofenceResponseEntry>> {
    let input = match input.entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_maps_output_entries(
    input: crate::operation::list_maps::ListMapsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListMapsResponseEntry>> {
    let input = match input.entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_place_indexes_output_entries(
    input: crate::operation::list_place_indexes::ListPlaceIndexesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListPlaceIndexesResponseEntry>> {
    let input = match input.entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_route_calculators_output_entries(
    input: crate::operation::list_route_calculators::ListRouteCalculatorsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListRouteCalculatorsResponseEntry>> {
    let input = match input.entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_tracker_consumers_output_consumer_arns(
    input: crate::operation::list_tracker_consumers::ListTrackerConsumersOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.consumer_arns {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_trackers_output_entries(
    input: crate::operation::list_trackers::ListTrackersOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ListTrackersResponseEntry>> {
    let input = match input.entries {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
