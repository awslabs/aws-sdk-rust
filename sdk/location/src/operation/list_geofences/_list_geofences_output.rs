// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListGeofencesOutput {
    /// <p>Contains a list of geofences stored in the geofence collection.</p>
    pub entries: ::std::vec::Vec<crate::types::ListGeofenceResponseEntry>,
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListGeofencesOutput {
    /// <p>Contains a list of geofences stored in the geofence collection.</p>
    pub fn entries(&self) -> &[crate::types::ListGeofenceResponseEntry] {
        use std::ops::Deref;
        self.entries.deref()
    }
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListGeofencesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListGeofencesOutput {
    /// Creates a new builder-style object to manufacture [`ListGeofencesOutput`](crate::operation::list_geofences::ListGeofencesOutput).
    pub fn builder() -> crate::operation::list_geofences::builders::ListGeofencesOutputBuilder {
        crate::operation::list_geofences::builders::ListGeofencesOutputBuilder::default()
    }
}

/// A builder for [`ListGeofencesOutput`](crate::operation::list_geofences::ListGeofencesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListGeofencesOutputBuilder {
    pub(crate) entries: ::std::option::Option<::std::vec::Vec<crate::types::ListGeofenceResponseEntry>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListGeofencesOutputBuilder {
    /// Appends an item to `entries`.
    ///
    /// To override the contents of this collection use [`set_entries`](Self::set_entries).
    ///
    /// <p>Contains a list of geofences stored in the geofence collection.</p>
    pub fn entries(mut self, input: crate::types::ListGeofenceResponseEntry) -> Self {
        let mut v = self.entries.unwrap_or_default();
        v.push(input);
        self.entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains a list of geofences stored in the geofence collection.</p>
    pub fn set_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ListGeofenceResponseEntry>>) -> Self {
        self.entries = input;
        self
    }
    /// <p>Contains a list of geofences stored in the geofence collection.</p>
    pub fn get_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ListGeofenceResponseEntry>> {
        &self.entries
    }
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListGeofencesOutput`](crate::operation::list_geofences::ListGeofencesOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`entries`](crate::operation::list_geofences::builders::ListGeofencesOutputBuilder::entries)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_geofences::ListGeofencesOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_geofences::ListGeofencesOutput {
            entries: self.entries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "entries",
                    "entries was not specified but it is required when building ListGeofencesOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
