// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListGeofencesInput {
    /// <p>The name of the geofence collection storing the list of geofences.</p>
    pub collection_name: ::std::option::Option<::std::string::String>,
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An optional limit for the number of geofences returned in a single call. </p>
    /// <p>Default value: <code>100</code> </p>
    pub max_results: ::std::option::Option<i32>,
}
impl ListGeofencesInput {
    /// <p>The name of the geofence collection storing the list of geofences.</p>
    pub fn collection_name(&self) -> ::std::option::Option<&str> {
        self.collection_name.as_deref()
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An optional limit for the number of geofences returned in a single call. </p>
    /// <p>Default value: <code>100</code> </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl ListGeofencesInput {
    /// Creates a new builder-style object to manufacture [`ListGeofencesInput`](crate::operation::list_geofences::ListGeofencesInput).
    pub fn builder() -> crate::operation::list_geofences::builders::ListGeofencesInputBuilder {
        crate::operation::list_geofences::builders::ListGeofencesInputBuilder::default()
    }
}

/// A builder for [`ListGeofencesInput`](crate::operation::list_geofences::ListGeofencesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListGeofencesInputBuilder {
    pub(crate) collection_name: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl ListGeofencesInputBuilder {
    /// <p>The name of the geofence collection storing the list of geofences.</p>
    /// This field is required.
    pub fn collection_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.collection_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the geofence collection storing the list of geofences.</p>
    pub fn set_collection_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.collection_name = input;
        self
    }
    /// <p>The name of the geofence collection storing the list of geofences.</p>
    pub fn get_collection_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.collection_name
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>An optional limit for the number of geofences returned in a single call. </p>
    /// <p>Default value: <code>100</code> </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional limit for the number of geofences returned in a single call. </p>
    /// <p>Default value: <code>100</code> </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An optional limit for the number of geofences returned in a single call. </p>
    /// <p>Default value: <code>100</code> </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`ListGeofencesInput`](crate::operation::list_geofences::ListGeofencesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_geofences::ListGeofencesInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::list_geofences::ListGeofencesInput {
            collection_name: self.collection_name,
            next_token: self.next_token,
            max_results: self.max_results,
        })
    }
}
