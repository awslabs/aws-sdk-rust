// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetMapSpritesOutput {
    /// <p>Contains the body of the sprite sheet or JSON offset ﬁle.</p>
    #[doc(hidden)]
    pub blob: std::option::Option<aws_smithy_types::Blob>,
    /// <p>The content type of the sprite sheet and offsets. For example, the sprite sheet content type is <code>image/png</code>, and the sprite offset JSON document is <code>application/json</code>. </p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetMapSpritesOutput {
    /// <p>Contains the body of the sprite sheet or JSON offset ﬁle.</p>
    pub fn blob(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.blob.as_ref()
    }
    /// <p>The content type of the sprite sheet and offsets. For example, the sprite sheet content type is <code>image/png</code>, and the sprite offset JSON document is <code>application/json</code>. </p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetMapSpritesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetMapSpritesOutput {
    /// Creates a new builder-style object to manufacture [`GetMapSpritesOutput`](crate::operation::get_map_sprites::GetMapSpritesOutput).
    pub fn builder() -> crate::operation::get_map_sprites::builders::GetMapSpritesOutputBuilder {
        crate::operation::get_map_sprites::builders::GetMapSpritesOutputBuilder::default()
    }
}

/// A builder for [`GetMapSpritesOutput`](crate::operation::get_map_sprites::GetMapSpritesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetMapSpritesOutputBuilder {
    pub(crate) blob: std::option::Option<aws_smithy_types::Blob>,
    pub(crate) content_type: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetMapSpritesOutputBuilder {
    /// <p>Contains the body of the sprite sheet or JSON offset ﬁle.</p>
    pub fn blob(mut self, input: aws_smithy_types::Blob) -> Self {
        self.blob = Some(input);
        self
    }
    /// <p>Contains the body of the sprite sheet or JSON offset ﬁle.</p>
    pub fn set_blob(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.blob = input;
        self
    }
    /// <p>The content type of the sprite sheet and offsets. For example, the sprite sheet content type is <code>image/png</code>, and the sprite offset JSON document is <code>application/json</code>. </p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The content type of the sprite sheet and offsets. For example, the sprite sheet content type is <code>image/png</code>, and the sprite offset JSON document is <code>application/json</code>. </p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetMapSpritesOutput`](crate::operation::get_map_sprites::GetMapSpritesOutput).
    pub fn build(self) -> crate::operation::get_map_sprites::GetMapSpritesOutput {
        crate::operation::get_map_sprites::GetMapSpritesOutput {
            blob: self.blob,
            content_type: self.content_type,
            _request_id: self._request_id,
        }
    }
}
