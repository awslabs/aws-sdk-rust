// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::calculate_route::_calculate_route_output::CalculateRouteOutputBuilder;

pub use crate::operation::calculate_route::_calculate_route_input::CalculateRouteInputBuilder;

/// Fluent builder constructing a request to `CalculateRoute`.
///
/// <p> <a href="https://docs.aws.amazon.com/location/latest/developerguide/calculate-route.html">Calculates a route</a> given the following required parameters: <code>DeparturePosition</code> and <code>DestinationPosition</code>. Requires that you first <a href="https://docs.aws.amazon.com/location-routes/latest/APIReference/API_CreateRouteCalculator.html">create a route calculator resource</a>.</p>
/// <p>By default, a request that doesn't specify a departure time uses the best time of day to travel with the best traffic conditions when calculating the route.</p>
/// <p>Additional options include:</p>
/// <ul>
/// <li> <p> <a href="https://docs.aws.amazon.com/location/latest/developerguide/departure-time.html">Specifying a departure time</a> using either <code>DepartureTime</code> or <code>DepartNow</code>. This calculates a route based on predictive traffic data at the given time. </p> <note>
/// <p>You can't specify both <code>DepartureTime</code> and <code>DepartNow</code> in a single request. Specifying both parameters returns a validation error.</p>
/// </note> </li>
/// <li> <p> <a href="https://docs.aws.amazon.com/location/latest/developerguide/travel-mode.html">Specifying a travel mode</a> using TravelMode sets the transportation mode used to calculate the routes. This also lets you specify additional route preferences in <code>CarModeOptions</code> if traveling by <code>Car</code>, or <code>TruckModeOptions</code> if traveling by <code>Truck</code>.</p> <note>
/// <p>If you specify <code>walking</code> for the travel mode and your data provider is Esri, the start and destination must be within 40km.</p>
/// </note> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CalculateRouteFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::calculate_route::builders::CalculateRouteInputBuilder,
}
impl CalculateRouteFluentBuilder {
    /// Creates a new `CalculateRoute`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::calculate_route::CalculateRoute,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::calculate_route::CalculateRouteError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::calculate_route::CalculateRouteOutput,
        aws_smithy_http::result::SdkError<crate::operation::calculate_route::CalculateRouteError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the route calculator resource that you want to use to calculate the route. </p>
    pub fn calculator_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.calculator_name(input.into());
        self
    }
    /// <p>The name of the route calculator resource that you want to use to calculate the route. </p>
    pub fn set_calculator_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_calculator_name(input);
        self
    }
    /// Appends an item to `DeparturePosition`.
    ///
    /// To override the contents of this collection use [`set_departure_position`](Self::set_departure_position).
    ///
    /// <p>The start position for the route. Defined in <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p>
    /// <ul>
    /// <li> <p>For example, <code>[-123.115, 49.285]</code> </p> </li>
    /// </ul> <note>
    /// <p>If you specify a departure that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position to the nearest road</a>. If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p>
    /// </note>
    /// <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
    pub fn departure_position(mut self, input: f64) -> Self {
        self.inner = self.inner.departure_position(input);
        self
    }
    /// <p>The start position for the route. Defined in <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p>
    /// <ul>
    /// <li> <p>For example, <code>[-123.115, 49.285]</code> </p> </li>
    /// </ul> <note>
    /// <p>If you specify a departure that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position to the nearest road</a>. If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p>
    /// </note>
    /// <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
    pub fn set_departure_position(
        mut self,
        input: std::option::Option<std::vec::Vec<f64>>,
    ) -> Self {
        self.inner = self.inner.set_departure_position(input);
        self
    }
    /// Appends an item to `DestinationPosition`.
    ///
    /// To override the contents of this collection use [`set_destination_position`](Self::set_destination_position).
    ///
    /// <p>The finish position for the route. Defined in <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p>
    /// <ul>
    /// <li> <p> For example, <code>[-122.339, 47.615]</code> </p> </li>
    /// </ul> <note>
    /// <p>If you specify a destination that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position to the nearest road</a>. </p>
    /// </note>
    /// <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
    pub fn destination_position(mut self, input: f64) -> Self {
        self.inner = self.inner.destination_position(input);
        self
    }
    /// <p>The finish position for the route. Defined in <a href="https://earth-info.nga.mil/index.php?dir=wgs84&amp;action=wgs84">World Geodetic System (WGS 84)</a> format: <code>[longitude, latitude]</code>.</p>
    /// <ul>
    /// <li> <p> For example, <code>[-122.339, 47.615]</code> </p> </li>
    /// </ul> <note>
    /// <p>If you specify a destination that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position to the nearest road</a>. </p>
    /// </note>
    /// <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
    pub fn set_destination_position(
        mut self,
        input: std::option::Option<std::vec::Vec<f64>>,
    ) -> Self {
        self.inner = self.inner.set_destination_position(input);
        self
    }
    /// Appends an item to `WaypointPositions`.
    ///
    /// To override the contents of this collection use [`set_waypoint_positions`](Self::set_waypoint_positions).
    ///
    /// <p>Specifies an ordered list of up to 23 intermediate positions to include along a route between the departure position and destination position. </p>
    /// <ul>
    /// <li> <p>For example, from the <code>DeparturePosition</code> <code>[-123.115, 49.285]</code>, the route follows the order that the waypoint positions are given <code>[[-122.757, 49.0021],[-122.349, 47.620]]</code> </p> </li>
    /// </ul> <note>
    /// <p>If you specify a waypoint position that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position to the nearest road</a>. </p>
    /// <p>Specifying more than 23 waypoints returns a <code>400 ValidationException</code> error.</p>
    /// <p>If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p>
    /// </note>
    /// <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
    pub fn waypoint_positions(mut self, input: std::vec::Vec<f64>) -> Self {
        self.inner = self.inner.waypoint_positions(input);
        self
    }
    /// <p>Specifies an ordered list of up to 23 intermediate positions to include along a route between the departure position and destination position. </p>
    /// <ul>
    /// <li> <p>For example, from the <code>DeparturePosition</code> <code>[-123.115, 49.285]</code>, the route follows the order that the waypoint positions are given <code>[[-122.757, 49.0021],[-122.349, 47.620]]</code> </p> </li>
    /// </ul> <note>
    /// <p>If you specify a waypoint position that's not located on a road, Amazon Location <a href="https://docs.aws.amazon.com/location/latest/developerguide/snap-to-nearby-road.html">moves the position to the nearest road</a>. </p>
    /// <p>Specifying more than 23 waypoints returns a <code>400 ValidationException</code> error.</p>
    /// <p>If Esri is the provider for your route calculator, specifying a route that is longer than 400 km returns a <code>400 RoutesValidationException</code> error.</p>
    /// </note>
    /// <p>Valid Values: <code>[-180 to 180,-90 to 90]</code> </p>
    pub fn set_waypoint_positions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::vec::Vec<f64>>>,
    ) -> Self {
        self.inner = self.inner.set_waypoint_positions(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility. You can choose <code>Car</code>, <code>Truck</code>, <code>Walking</code>, <code>Bicycle</code> or <code>Motorcycle</code> as options for the <code>TravelMode</code>.</p> <note>
    /// <p> <code>Bicycle</code> and <code>Motorcycle</code> are only valid when using Grab as a data provider, and only within Southeast Asia.</p>
    /// <p> <code>Truck</code> is not available for Grab.</p>
    /// <p>For more details on the using Grab for routing, including areas of coverage, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/grab.html">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p>
    /// </note>
    /// <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p>
    /// <ul>
    /// <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li>
    /// <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li>
    /// </ul>
    /// <p>Default Value: <code>Car</code> </p>
    pub fn travel_mode(mut self, input: crate::types::TravelMode) -> Self {
        self.inner = self.inner.travel_mode(input);
        self
    }
    /// <p>Specifies the mode of transport when calculating a route. Used in estimating the speed of travel and road compatibility. You can choose <code>Car</code>, <code>Truck</code>, <code>Walking</code>, <code>Bicycle</code> or <code>Motorcycle</code> as options for the <code>TravelMode</code>.</p> <note>
    /// <p> <code>Bicycle</code> and <code>Motorcycle</code> are only valid when using Grab as a data provider, and only within Southeast Asia.</p>
    /// <p> <code>Truck</code> is not available for Grab.</p>
    /// <p>For more details on the using Grab for routing, including areas of coverage, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/grab.html">GrabMaps</a> in the <i>Amazon Location Service Developer Guide</i>.</p>
    /// </note>
    /// <p>The <code>TravelMode</code> you specify also determines how you specify route preferences: </p>
    /// <ul>
    /// <li> <p>If traveling by <code>Car</code> use the <code>CarModeOptions</code> parameter.</p> </li>
    /// <li> <p>If traveling by <code>Truck</code> use the <code>TruckModeOptions</code> parameter.</p> </li>
    /// </ul>
    /// <p>Default Value: <code>Car</code> </p>
    pub fn set_travel_mode(mut self, input: std::option::Option<crate::types::TravelMode>) -> Self {
        self.inner = self.inner.set_travel_mode(input);
        self
    }
    /// <p>Specifies the desired time of departure. Uses the given time to calculate the route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p> <note>
    /// <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p>
    /// </note>
    /// <ul>
    /// <li> <p>In <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020–07-2T12:15:20.000Z+01:00</code> </p> </li>
    /// </ul>
    pub fn departure_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.inner = self.inner.departure_time(input);
        self
    }
    /// <p>Specifies the desired time of departure. Uses the given time to calculate the route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p> <note>
    /// <p>Setting a departure time in the past returns a <code>400 ValidationException</code> error.</p>
    /// </note>
    /// <ul>
    /// <li> <p>In <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. For example, <code>2020–07-2T12:15:20.000Z+01:00</code> </p> </li>
    /// </ul>
    pub fn set_departure_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.inner = self.inner.set_departure_time(input);
        self
    }
    /// <p>Sets the time of departure as the current time. Uses the current time to calculate a route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p>
    /// <p>Default Value: <code>false</code> </p>
    /// <p>Valid Values: <code>false</code> | <code>true</code> </p>
    pub fn depart_now(mut self, input: bool) -> Self {
        self.inner = self.inner.depart_now(input);
        self
    }
    /// <p>Sets the time of departure as the current time. Uses the current time to calculate a route. Otherwise, the best time of day to travel with the best traffic conditions is used to calculate the route.</p>
    /// <p>Default Value: <code>false</code> </p>
    /// <p>Valid Values: <code>false</code> | <code>true</code> </p>
    pub fn set_depart_now(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_depart_now(input);
        self
    }
    /// <p>Set the unit system to specify the distance.</p>
    /// <p>Default Value: <code>Kilometers</code> </p>
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.inner = self.inner.distance_unit(input);
        self
    }
    /// <p>Set the unit system to specify the distance.</p>
    /// <p>Default Value: <code>Kilometers</code> </p>
    pub fn set_distance_unit(
        mut self,
        input: std::option::Option<crate::types::DistanceUnit>,
    ) -> Self {
        self.inner = self.inner.set_distance_unit(input);
        self
    }
    /// <p>Set to include the geometry details in the result for each path between a pair of positions.</p>
    /// <p>Default Value: <code>false</code> </p>
    /// <p>Valid Values: <code>false</code> | <code>true</code> </p>
    pub fn include_leg_geometry(mut self, input: bool) -> Self {
        self.inner = self.inner.include_leg_geometry(input);
        self
    }
    /// <p>Set to include the geometry details in the result for each path between a pair of positions.</p>
    /// <p>Default Value: <code>false</code> </p>
    /// <p>Valid Values: <code>false</code> | <code>true</code> </p>
    pub fn set_include_leg_geometry(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_leg_geometry(input);
        self
    }
    /// <p>Specifies route preferences when traveling by <code>Car</code>, such as avoiding routes that use ferries or tolls.</p>
    /// <p>Requirements: <code>TravelMode</code> must be specified as <code>Car</code>.</p>
    pub fn car_mode_options(mut self, input: crate::types::CalculateRouteCarModeOptions) -> Self {
        self.inner = self.inner.car_mode_options(input);
        self
    }
    /// <p>Specifies route preferences when traveling by <code>Car</code>, such as avoiding routes that use ferries or tolls.</p>
    /// <p>Requirements: <code>TravelMode</code> must be specified as <code>Car</code>.</p>
    pub fn set_car_mode_options(
        mut self,
        input: std::option::Option<crate::types::CalculateRouteCarModeOptions>,
    ) -> Self {
        self.inner = self.inner.set_car_mode_options(input);
        self
    }
    /// <p>Specifies route preferences when traveling by <code>Truck</code>, such as avoiding routes that use ferries or tolls, and truck specifications to consider when choosing an optimal road.</p>
    /// <p>Requirements: <code>TravelMode</code> must be specified as <code>Truck</code>.</p>
    pub fn truck_mode_options(
        mut self,
        input: crate::types::CalculateRouteTruckModeOptions,
    ) -> Self {
        self.inner = self.inner.truck_mode_options(input);
        self
    }
    /// <p>Specifies route preferences when traveling by <code>Truck</code>, such as avoiding routes that use ferries or tolls, and truck specifications to consider when choosing an optimal road.</p>
    /// <p>Requirements: <code>TravelMode</code> must be specified as <code>Truck</code>.</p>
    pub fn set_truck_mode_options(
        mut self,
        input: std::option::Option<crate::types::CalculateRouteTruckModeOptions>,
    ) -> Self {
        self.inner = self.inner.set_truck_mode_options(input);
        self
    }
}
