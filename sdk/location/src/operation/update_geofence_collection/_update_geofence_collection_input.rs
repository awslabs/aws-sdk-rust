// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateGeofenceCollectionInput {
    /// <p>The name of the geofence collection to update.</p>
    #[doc(hidden)]
    pub collection_name: std::option::Option<std::string::String>,
    /// <p>No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.</p>
    #[deprecated(
        note = "Deprecated. If included, the only allowed value is RequestBasedUsage.",
        since = "2022-02-01"
    )]
    #[doc(hidden)]
    pub pricing_plan: std::option::Option<crate::types::PricingPlan>,
    /// <p>This parameter is no longer used.</p>
    #[deprecated(note = "Deprecated. No longer allowed.", since = "2022-02-01")]
    #[doc(hidden)]
    pub pricing_plan_data_source: std::option::Option<std::string::String>,
    /// <p>Updates the description for the geofence collection.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl UpdateGeofenceCollectionInput {
    /// <p>The name of the geofence collection to update.</p>
    pub fn collection_name(&self) -> std::option::Option<&str> {
        self.collection_name.as_deref()
    }
    /// <p>No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.</p>
    #[deprecated(
        note = "Deprecated. If included, the only allowed value is RequestBasedUsage.",
        since = "2022-02-01"
    )]
    pub fn pricing_plan(&self) -> std::option::Option<&crate::types::PricingPlan> {
        self.pricing_plan.as_ref()
    }
    /// <p>This parameter is no longer used.</p>
    #[deprecated(note = "Deprecated. No longer allowed.", since = "2022-02-01")]
    pub fn pricing_plan_data_source(&self) -> std::option::Option<&str> {
        self.pricing_plan_data_source.as_deref()
    }
    /// <p>Updates the description for the geofence collection.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl UpdateGeofenceCollectionInput {
    /// Creates a new builder-style object to manufacture [`UpdateGeofenceCollectionInput`](crate::operation::update_geofence_collection::UpdateGeofenceCollectionInput).
    pub fn builder(
    ) -> crate::operation::update_geofence_collection::builders::UpdateGeofenceCollectionInputBuilder
    {
        crate::operation::update_geofence_collection::builders::UpdateGeofenceCollectionInputBuilder::default()
    }
}

/// A builder for [`UpdateGeofenceCollectionInput`](crate::operation::update_geofence_collection::UpdateGeofenceCollectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateGeofenceCollectionInputBuilder {
    pub(crate) collection_name: std::option::Option<std::string::String>,
    pub(crate) pricing_plan: std::option::Option<crate::types::PricingPlan>,
    pub(crate) pricing_plan_data_source: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl UpdateGeofenceCollectionInputBuilder {
    /// <p>The name of the geofence collection to update.</p>
    pub fn collection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.collection_name = Some(input.into());
        self
    }
    /// <p>The name of the geofence collection to update.</p>
    pub fn set_collection_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.collection_name = input;
        self
    }
    /// <p>No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.</p>
    #[deprecated(
        note = "Deprecated. If included, the only allowed value is RequestBasedUsage.",
        since = "2022-02-01"
    )]
    pub fn pricing_plan(mut self, input: crate::types::PricingPlan) -> Self {
        self.pricing_plan = Some(input);
        self
    }
    /// <p>No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.</p>
    #[deprecated(
        note = "Deprecated. If included, the only allowed value is RequestBasedUsage.",
        since = "2022-02-01"
    )]
    pub fn set_pricing_plan(
        mut self,
        input: std::option::Option<crate::types::PricingPlan>,
    ) -> Self {
        self.pricing_plan = input;
        self
    }
    /// <p>This parameter is no longer used.</p>
    #[deprecated(note = "Deprecated. No longer allowed.", since = "2022-02-01")]
    pub fn pricing_plan_data_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.pricing_plan_data_source = Some(input.into());
        self
    }
    /// <p>This parameter is no longer used.</p>
    #[deprecated(note = "Deprecated. No longer allowed.", since = "2022-02-01")]
    pub fn set_pricing_plan_data_source(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.pricing_plan_data_source = input;
        self
    }
    /// <p>Updates the description for the geofence collection.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Updates the description for the geofence collection.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateGeofenceCollectionInput`](crate::operation::update_geofence_collection::UpdateGeofenceCollectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_geofence_collection::UpdateGeofenceCollectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionInput {
                collection_name: self.collection_name,
                pricing_plan: self.pricing_plan,
                pricing_plan_data_source: self.pricing_plan_data_source,
                description: self.description,
            },
        )
    }
}
