// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::search_place_index_for_suggestions::_search_place_index_for_suggestions_output::SearchPlaceIndexForSuggestionsOutputBuilder;

pub use crate::operation::search_place_index_for_suggestions::_search_place_index_for_suggestions_input::SearchPlaceIndexForSuggestionsInputBuilder;

/// Fluent builder constructing a request to `SearchPlaceIndexForSuggestions`.
///
/// <p>Generates suggestions for addresses and points of interest based on partial or misspelled free-form text. This operation is also known as autocomplete, autosuggest, or fuzzy matching.</p>
/// <p>Optional parameters let you narrow your search results by bounding box or country, or bias your search toward a specific position on the globe.</p> <note>
/// <p>You can search for suggested place names near a specified position by using <code>BiasPosition</code>, or filter results within a bounding box by using <code>FilterBBox</code>. These parameters are mutually exclusive; using both <code>BiasPosition</code> and <code>FilterBBox</code> in the same command returns an error.</p>
/// </note>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SearchPlaceIndexForSuggestionsFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::search_place_index_for_suggestions::builders::SearchPlaceIndexForSuggestionsInputBuilder
            }
impl SearchPlaceIndexForSuggestionsFluentBuilder {
    /// Creates a new `SearchPlaceIndexForSuggestions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestions, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsOutput, aws_smithy_http::result::SdkError<crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the place index resource you want to use for the search.</p>
    pub fn index_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.index_name(input.into());
        self
    }
    /// <p>The name of the place index resource you want to use for the search.</p>
    pub fn set_index_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_index_name(input);
        self
    }
    /// <p>The free-form partial text to use to generate place suggestions. For example, <code>eiffel tow</code>.</p>
    pub fn text(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.text(input.into());
        self
    }
    /// <p>The free-form partial text to use to generate place suggestions. For example, <code>eiffel tow</code>.</p>
    pub fn set_text(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_text(input);
        self
    }
    /// Appends an item to `BiasPosition`.
    ///
    /// To override the contents of this collection use [`set_bias_position`](Self::set_bias_position).
    ///
    /// <p>An optional parameter that indicates a preference for place suggestions that are closer to a specified position.</p>
    /// <p> If provided, this parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p>
    /// <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p> <note>
    /// <p> <code>BiasPosition</code> and <code>FilterBBox</code> are mutually exclusive. Specifying both options results in an error. </p>
    /// </note>
    pub fn bias_position(mut self, input: f64) -> Self {
        self.inner = self.inner.bias_position(input);
        self
    }
    /// <p>An optional parameter that indicates a preference for place suggestions that are closer to a specified position.</p>
    /// <p> If provided, this parameter must contain a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p>
    /// <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p> <note>
    /// <p> <code>BiasPosition</code> and <code>FilterBBox</code> are mutually exclusive. Specifying both options results in an error. </p>
    /// </note>
    pub fn set_bias_position(mut self, input: std::option::Option<std::vec::Vec<f64>>) -> Self {
        self.inner = self.inner.set_bias_position(input);
        self
    }
    /// Appends an item to `FilterBBox`.
    ///
    /// To override the contents of this collection use [`set_filter_b_box`](Self::set_filter_b_box).
    ///
    /// <p>An optional parameter that limits the search results by returning only suggestions within a specified bounding box.</p>
    /// <p> If provided, this parameter must contain a total of four consecutive numbers in two pairs. The first pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the southwest corner of the bounding box; the second pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the northeast corner of the bounding box.</p>
    /// <p>For example, <code>[-12.7935, -37.4835, -12.0684, -36.9542]</code> represents a bounding box where the southwest corner has longitude <code>-12.7935</code> and latitude <code>-37.4835</code>, and the northeast corner has longitude <code>-12.0684</code> and latitude <code>-36.9542</code>.</p> <note>
    /// <p> <code>FilterBBox</code> and <code>BiasPosition</code> are mutually exclusive. Specifying both options results in an error. </p>
    /// </note>
    pub fn filter_b_box(mut self, input: f64) -> Self {
        self.inner = self.inner.filter_b_box(input);
        self
    }
    /// <p>An optional parameter that limits the search results by returning only suggestions within a specified bounding box.</p>
    /// <p> If provided, this parameter must contain a total of four consecutive numbers in two pairs. The first pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the southwest corner of the bounding box; the second pair of numbers represents the X and Y coordinates (longitude and latitude, respectively) of the northeast corner of the bounding box.</p>
    /// <p>For example, <code>[-12.7935, -37.4835, -12.0684, -36.9542]</code> represents a bounding box where the southwest corner has longitude <code>-12.7935</code> and latitude <code>-37.4835</code>, and the northeast corner has longitude <code>-12.0684</code> and latitude <code>-36.9542</code>.</p> <note>
    /// <p> <code>FilterBBox</code> and <code>BiasPosition</code> are mutually exclusive. Specifying both options results in an error. </p>
    /// </note>
    pub fn set_filter_b_box(mut self, input: std::option::Option<std::vec::Vec<f64>>) -> Self {
        self.inner = self.inner.set_filter_b_box(input);
        self
    }
    /// Appends an item to `FilterCountries`.
    ///
    /// To override the contents of this collection use [`set_filter_countries`](Self::set_filter_countries).
    ///
    /// <p>An optional parameter that limits the search results by returning only suggestions within the provided list of countries.</p>
    /// <ul>
    /// <li> <p>Use the <a href="https://www.iso.org/iso-3166-country-codes.html">ISO 3166</a> 3-digit country code. For example, Australia uses three upper-case characters: <code>AUS</code>.</p> </li>
    /// </ul>
    pub fn filter_countries(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.filter_countries(input.into());
        self
    }
    /// <p>An optional parameter that limits the search results by returning only suggestions within the provided list of countries.</p>
    /// <ul>
    /// <li> <p>Use the <a href="https://www.iso.org/iso-3166-country-codes.html">ISO 3166</a> 3-digit country code. For example, Australia uses three upper-case characters: <code>AUS</code>.</p> </li>
    /// </ul>
    pub fn set_filter_countries(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_filter_countries(input);
        self
    }
    /// <p>An optional parameter. The maximum number of results returned per request. </p>
    /// <p>The default: <code>5</code> </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p>An optional parameter. The maximum number of results returned per request. </p>
    /// <p>The default: <code>5</code> </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p>The preferred language used to return results. The value must be a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    /// <p>This setting affects the languages used in the results. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.</p>
    /// <p>For an example, we'll use the Greek language. You search for <code>Athens, Gr</code> to get suggestions with the <code>language</code> parameter set to <code>en</code>. The results found will most likely be returned as <code>Athens, Greece</code>.</p>
    /// <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the result found will more likely be returned as <code>Αθήνα, Ελλάδα</code>.</p>
    /// <p>If the data provider does not have a value for Greek, the result will be in a language that the provider does support.</p>
    pub fn language(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.language(input.into());
        self
    }
    /// <p>The preferred language used to return results. The value must be a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    /// <p>This setting affects the languages used in the results. If no language is specified, or not supported for a particular result, the partner automatically chooses a language for the result.</p>
    /// <p>For an example, we'll use the Greek language. You search for <code>Athens, Gr</code> to get suggestions with the <code>language</code> parameter set to <code>en</code>. The results found will most likely be returned as <code>Athens, Greece</code>.</p>
    /// <p>If you set the <code>language</code> parameter to <code>el</code>, for Greek, then the result found will more likely be returned as <code>Αθήνα, Ελλάδα</code>.</p>
    /// <p>If the data provider does not have a value for Greek, the result will be in a language that the provider does support.</p>
    pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_language(input);
        self
    }
}
