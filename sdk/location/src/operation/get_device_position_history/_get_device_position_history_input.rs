// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDevicePositionHistoryInput {
    /// <p>The tracker resource receiving the request for the device position history.</p>
    pub tracker_name: ::std::option::Option<::std::string::String>,
    /// <p>The device whose position history you want to retrieve.</p>
    pub device_id: ::std::option::Option<::std::string::String>,
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>Specify the start time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be 24 hours prior to the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>StartTimeInclusive</code> must be before <code>EndTimeExclusive</code>.</p> </li>
    /// </ul>
    pub start_time_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Specify the end time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li>
    /// </ul>
    pub end_time_exclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An optional limit for the number of device positions returned in a single call.</p>
    /// <p>Default value: <code>100</code> </p>
    pub max_results: ::std::option::Option<i32>,
}
impl GetDevicePositionHistoryInput {
    /// <p>The tracker resource receiving the request for the device position history.</p>
    pub fn tracker_name(&self) -> ::std::option::Option<&str> {
        self.tracker_name.as_deref()
    }
    /// <p>The device whose position history you want to retrieve.</p>
    pub fn device_id(&self) -> ::std::option::Option<&str> {
        self.device_id.as_deref()
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specify the start time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be 24 hours prior to the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>StartTimeInclusive</code> must be before <code>EndTimeExclusive</code>.</p> </li>
    /// </ul>
    pub fn start_time_inclusive(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.start_time_inclusive.as_ref()
    }
    /// <p>Specify the end time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li>
    /// </ul>
    pub fn end_time_exclusive(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.end_time_exclusive.as_ref()
    }
    /// <p>An optional limit for the number of device positions returned in a single call.</p>
    /// <p>Default value: <code>100</code> </p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
}
impl GetDevicePositionHistoryInput {
    /// Creates a new builder-style object to manufacture [`GetDevicePositionHistoryInput`](crate::operation::get_device_position_history::GetDevicePositionHistoryInput).
    pub fn builder() -> crate::operation::get_device_position_history::builders::GetDevicePositionHistoryInputBuilder {
        crate::operation::get_device_position_history::builders::GetDevicePositionHistoryInputBuilder::default()
    }
}

/// A builder for [`GetDevicePositionHistoryInput`](crate::operation::get_device_position_history::GetDevicePositionHistoryInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDevicePositionHistoryInputBuilder {
    pub(crate) tracker_name: ::std::option::Option<::std::string::String>,
    pub(crate) device_id: ::std::option::Option<::std::string::String>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) start_time_inclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) end_time_exclusive: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) max_results: ::std::option::Option<i32>,
}
impl GetDevicePositionHistoryInputBuilder {
    /// <p>The tracker resource receiving the request for the device position history.</p>
    /// This field is required.
    pub fn tracker_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tracker_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The tracker resource receiving the request for the device position history.</p>
    pub fn set_tracker_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tracker_name = input;
        self
    }
    /// <p>The tracker resource receiving the request for the device position history.</p>
    pub fn get_tracker_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.tracker_name
    }
    /// <p>The device whose position history you want to retrieve.</p>
    /// This field is required.
    pub fn device_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The device whose position history you want to retrieve.</p>
    pub fn set_device_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>The device whose position history you want to retrieve.</p>
    pub fn get_device_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_id
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The pagination token specifying which page of results to return in the response. If no token is provided, the default page is the first page. </p>
    /// <p>Default value: <code>null</code> </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// <p>Specify the start time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be 24 hours prior to the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>StartTimeInclusive</code> must be before <code>EndTimeExclusive</code>.</p> </li>
    /// </ul>
    pub fn start_time_inclusive(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.start_time_inclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the start time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be 24 hours prior to the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>StartTimeInclusive</code> must be before <code>EndTimeExclusive</code>.</p> </li>
    /// </ul>
    pub fn set_start_time_inclusive(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.start_time_inclusive = input;
        self
    }
    /// <p>Specify the start time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be 24 hours prior to the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>StartTimeInclusive</code> must be before <code>EndTimeExclusive</code>.</p> </li>
    /// </ul>
    pub fn get_start_time_inclusive(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.start_time_inclusive
    }
    /// <p>Specify the end time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li>
    /// </ul>
    pub fn end_time_exclusive(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.end_time_exclusive = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specify the end time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li>
    /// </ul>
    pub fn set_end_time_exclusive(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.end_time_exclusive = input;
        self
    }
    /// <p>Specify the end time for the position history in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. By default, the value will be the time that the request is made.</p>
    /// <p>Requirement:</p>
    /// <ul>
    /// <li> <p>The time specified for <code>EndTimeExclusive</code> must be after the time for <code>StartTimeInclusive</code>.</p> </li>
    /// </ul>
    pub fn get_end_time_exclusive(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.end_time_exclusive
    }
    /// <p>An optional limit for the number of device positions returned in a single call.</p>
    /// <p>Default value: <code>100</code> </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>An optional limit for the number of device positions returned in a single call.</p>
    /// <p>Default value: <code>100</code> </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>An optional limit for the number of device positions returned in a single call.</p>
    /// <p>Default value: <code>100</code> </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// Consumes the builder and constructs a [`GetDevicePositionHistoryInput`](crate::operation::get_device_position_history::GetDevicePositionHistoryInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_device_position_history::GetDevicePositionHistoryInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_device_position_history::GetDevicePositionHistoryInput {
            tracker_name: self.tracker_name,
            device_id: self.device_id,
            next_token: self.next_token,
            start_time_inclusive: self.start_time_inclusive,
            end_time_exclusive: self.end_time_exclusive,
            max_results: self.max_results,
        })
    }
}
