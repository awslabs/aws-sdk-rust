// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_map_tile::_get_map_tile_output::GetMapTileOutputBuilder;

pub use crate::operation::get_map_tile::_get_map_tile_input::GetMapTileInputBuilder;

impl crate::operation::get_map_tile::builders::GetMapTileInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_map_tile::GetMapTileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_map_tile::GetMapTileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_map_tile();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetMapTile`.
///
/// <p>Retrieves a vector data tile from the map resource. Map tiles are used by clients to render a map. they're addressed using a grid arrangement with an X coordinate, Y coordinate, and Z (zoom) level.</p>
/// <p>The origin (0, 0) is the top left of the map. Increasing the zoom level by 1 doubles both the X and Y dimensions, so a tile containing data for the entire world at (0/0/0) will be split into 4 tiles at zoom 1 (1/0/0, 1/0/1, 1/1/0, 1/1/1).</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetMapTileFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_map_tile::builders::GetMapTileInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::get_map_tile::GetMapTileOutput,
        crate::operation::get_map_tile::GetMapTileError,
    > for GetMapTileFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::get_map_tile::GetMapTileOutput,
            crate::operation::get_map_tile::GetMapTileError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetMapTileFluentBuilder {
    /// Creates a new `GetMapTile`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetMapTile as a reference.
    pub fn as_input(&self) -> &crate::operation::get_map_tile::builders::GetMapTileInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_map_tile::GetMapTileOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_map_tile::GetMapTileError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_map_tile::GetMapTile::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_map_tile::GetMapTile::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_map_tile::GetMapTileOutput,
        crate::operation::get_map_tile::GetMapTileError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The map resource to retrieve the map tiles from.</p>
    pub fn map_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.map_name(input.into());
        self
    }
    /// <p>The map resource to retrieve the map tiles from.</p>
    pub fn set_map_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_map_name(input);
        self
    }
    /// <p>The map resource to retrieve the map tiles from.</p>
    pub fn get_map_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_map_name()
    }
    /// <p>The zoom value for the map tile.</p>
    pub fn z(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.z(input.into());
        self
    }
    /// <p>The zoom value for the map tile.</p>
    pub fn set_z(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_z(input);
        self
    }
    /// <p>The zoom value for the map tile.</p>
    pub fn get_z(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_z()
    }
    /// <p>The X axis value for the map tile.</p>
    pub fn x(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.x(input.into());
        self
    }
    /// <p>The X axis value for the map tile.</p>
    pub fn set_x(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_x(input);
        self
    }
    /// <p>The X axis value for the map tile.</p>
    pub fn get_x(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_x()
    }
    /// <p>The Y axis value for the map tile.</p>
    pub fn y(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.y(input.into());
        self
    }
    /// <p>The Y axis value for the map tile.</p>
    pub fn set_y(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_y(input);
        self
    }
    /// <p>The Y axis value for the map tile.</p>
    pub fn get_y(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_y()
    }
    /// <p>The optional <a href="https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html">API key</a> to authorize the request.</p>
    pub fn key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.key(input.into());
        self
    }
    /// <p>The optional <a href="https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html">API key</a> to authorize the request.</p>
    pub fn set_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_key(input);
        self
    }
    /// <p>The optional <a href="https://docs.aws.amazon.com/location/latest/developerguide/using-apikeys.html">API key</a> to authorize the request.</p>
    pub fn get_key(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_key()
    }
}
