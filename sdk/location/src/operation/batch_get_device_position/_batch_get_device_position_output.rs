// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetDevicePositionOutput {
    /// <p>Contains error details for each device that failed to send its position to the tracker resource.</p>
    #[doc(hidden)]
    pub errors: std::option::Option<std::vec::Vec<crate::types::BatchGetDevicePositionError>>,
    /// <p>Contains device position details such as the device ID, position, and timestamps for when the position was received and sampled.</p>
    #[doc(hidden)]
    pub device_positions: std::option::Option<std::vec::Vec<crate::types::DevicePosition>>,
    _request_id: Option<String>,
}
impl BatchGetDevicePositionOutput {
    /// <p>Contains error details for each device that failed to send its position to the tracker resource.</p>
    pub fn errors(&self) -> std::option::Option<&[crate::types::BatchGetDevicePositionError]> {
        self.errors.as_deref()
    }
    /// <p>Contains device position details such as the device ID, position, and timestamps for when the position was received and sampled.</p>
    pub fn device_positions(&self) -> std::option::Option<&[crate::types::DevicePosition]> {
        self.device_positions.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchGetDevicePositionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchGetDevicePositionOutput {
    /// Creates a new builder-style object to manufacture [`BatchGetDevicePositionOutput`](crate::operation::batch_get_device_position::BatchGetDevicePositionOutput).
    pub fn builder(
    ) -> crate::operation::batch_get_device_position::builders::BatchGetDevicePositionOutputBuilder
    {
        crate::operation::batch_get_device_position::builders::BatchGetDevicePositionOutputBuilder::default()
    }
}

/// A builder for [`BatchGetDevicePositionOutput`](crate::operation::batch_get_device_position::BatchGetDevicePositionOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetDevicePositionOutputBuilder {
    pub(crate) errors:
        std::option::Option<std::vec::Vec<crate::types::BatchGetDevicePositionError>>,
    pub(crate) device_positions: std::option::Option<std::vec::Vec<crate::types::DevicePosition>>,
    _request_id: Option<String>,
}
impl BatchGetDevicePositionOutputBuilder {
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>Contains error details for each device that failed to send its position to the tracker resource.</p>
    pub fn errors(mut self, input: crate::types::BatchGetDevicePositionError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = Some(v);
        self
    }
    /// <p>Contains error details for each device that failed to send its position to the tracker resource.</p>
    pub fn set_errors(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::BatchGetDevicePositionError>>,
    ) -> Self {
        self.errors = input;
        self
    }
    /// Appends an item to `device_positions`.
    ///
    /// To override the contents of this collection use [`set_device_positions`](Self::set_device_positions).
    ///
    /// <p>Contains device position details such as the device ID, position, and timestamps for when the position was received and sampled.</p>
    pub fn device_positions(mut self, input: crate::types::DevicePosition) -> Self {
        let mut v = self.device_positions.unwrap_or_default();
        v.push(input);
        self.device_positions = Some(v);
        self
    }
    /// <p>Contains device position details such as the device ID, position, and timestamps for when the position was received and sampled.</p>
    pub fn set_device_positions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DevicePosition>>,
    ) -> Self {
        self.device_positions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetDevicePositionOutput`](crate::operation::batch_get_device_position::BatchGetDevicePositionOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_get_device_position::BatchGetDevicePositionOutput {
        crate::operation::batch_get_device_position::BatchGetDevicePositionOutput {
            errors: self.errors,
            device_positions: self.device_positions,
            _request_id: self._request_id,
        }
    }
}
