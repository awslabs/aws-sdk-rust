// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteGeofenceCollectionInput {
    /// <p>The name of the geofence collection to be deleted.</p>
    #[doc(hidden)]
    pub collection_name: std::option::Option<std::string::String>,
}
impl DeleteGeofenceCollectionInput {
    /// <p>The name of the geofence collection to be deleted.</p>
    pub fn collection_name(&self) -> std::option::Option<&str> {
        self.collection_name.as_deref()
    }
}
impl DeleteGeofenceCollectionInput {
    /// Creates a new builder-style object to manufacture [`DeleteGeofenceCollectionInput`](crate::operation::delete_geofence_collection::DeleteGeofenceCollectionInput).
    pub fn builder(
    ) -> crate::operation::delete_geofence_collection::builders::DeleteGeofenceCollectionInputBuilder
    {
        crate::operation::delete_geofence_collection::builders::DeleteGeofenceCollectionInputBuilder::default()
    }
}

/// A builder for [`DeleteGeofenceCollectionInput`](crate::operation::delete_geofence_collection::DeleteGeofenceCollectionInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteGeofenceCollectionInputBuilder {
    pub(crate) collection_name: std::option::Option<std::string::String>,
}
impl DeleteGeofenceCollectionInputBuilder {
    /// <p>The name of the geofence collection to be deleted.</p>
    pub fn collection_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.collection_name = Some(input.into());
        self
    }
    /// <p>The name of the geofence collection to be deleted.</p>
    pub fn set_collection_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.collection_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteGeofenceCollectionInput`](crate::operation::delete_geofence_collection::DeleteGeofenceCollectionInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_geofence_collection::DeleteGeofenceCollectionInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionInput {
                collection_name: self.collection_name,
            },
        )
    }
}
