// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateKeyInput {
    /// <p>The name of the API key resource to update.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>Updates the description for the API key resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Updates the timestamp for when the API key resource will expire in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub expire_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Whether the API key should expire. Set to <code>true</code> to set the API key to have no expiration time.</p>
    pub no_expiry: ::std::option::Option<bool>,
    /// <p>The boolean flag to be included for updating <code>ExpireTime</code> or <code>Restrictions</code> details.</p>
    /// <p>Must be set to <code>true</code> to update an API key resource that has been used in the past 7 days.</p>
    /// <p> <code>False</code> if force update is not preferred</p>
    /// <p>Default value: <code>False</code> </p>
    pub force_update: ::std::option::Option<bool>,
    /// <p>Updates the API key restrictions for the API key resource.</p>
    pub restrictions: ::std::option::Option<crate::types::ApiKeyRestrictions>,
}
impl UpdateKeyInput {
    /// <p>The name of the API key resource to update.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>Updates the description for the API key resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Updates the timestamp for when the API key resource will expire in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn expire_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.expire_time.as_ref()
    }
    /// <p>Whether the API key should expire. Set to <code>true</code> to set the API key to have no expiration time.</p>
    pub fn no_expiry(&self) -> ::std::option::Option<bool> {
        self.no_expiry
    }
    /// <p>The boolean flag to be included for updating <code>ExpireTime</code> or <code>Restrictions</code> details.</p>
    /// <p>Must be set to <code>true</code> to update an API key resource that has been used in the past 7 days.</p>
    /// <p> <code>False</code> if force update is not preferred</p>
    /// <p>Default value: <code>False</code> </p>
    pub fn force_update(&self) -> ::std::option::Option<bool> {
        self.force_update
    }
    /// <p>Updates the API key restrictions for the API key resource.</p>
    pub fn restrictions(&self) -> ::std::option::Option<&crate::types::ApiKeyRestrictions> {
        self.restrictions.as_ref()
    }
}
impl UpdateKeyInput {
    /// Creates a new builder-style object to manufacture [`UpdateKeyInput`](crate::operation::update_key::UpdateKeyInput).
    pub fn builder() -> crate::operation::update_key::builders::UpdateKeyInputBuilder {
        crate::operation::update_key::builders::UpdateKeyInputBuilder::default()
    }
}

/// A builder for [`UpdateKeyInput`](crate::operation::update_key::UpdateKeyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateKeyInputBuilder {
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) expire_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) no_expiry: ::std::option::Option<bool>,
    pub(crate) force_update: ::std::option::Option<bool>,
    pub(crate) restrictions: ::std::option::Option<crate::types::ApiKeyRestrictions>,
}
impl UpdateKeyInputBuilder {
    /// <p>The name of the API key resource to update.</p>
    /// This field is required.
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the API key resource to update.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The name of the API key resource to update.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>Updates the description for the API key resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Updates the description for the API key resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Updates the description for the API key resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Updates the timestamp for when the API key resource will expire in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn expire_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expire_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updates the timestamp for when the API key resource will expire in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn set_expire_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expire_time = input;
        self
    }
    /// <p>Updates the timestamp for when the API key resource will expire in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn get_expire_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expire_time
    }
    /// <p>Whether the API key should expire. Set to <code>true</code> to set the API key to have no expiration time.</p>
    pub fn no_expiry(mut self, input: bool) -> Self {
        self.no_expiry = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the API key should expire. Set to <code>true</code> to set the API key to have no expiration time.</p>
    pub fn set_no_expiry(mut self, input: ::std::option::Option<bool>) -> Self {
        self.no_expiry = input;
        self
    }
    /// <p>Whether the API key should expire. Set to <code>true</code> to set the API key to have no expiration time.</p>
    pub fn get_no_expiry(&self) -> &::std::option::Option<bool> {
        &self.no_expiry
    }
    /// <p>The boolean flag to be included for updating <code>ExpireTime</code> or <code>Restrictions</code> details.</p>
    /// <p>Must be set to <code>true</code> to update an API key resource that has been used in the past 7 days.</p>
    /// <p> <code>False</code> if force update is not preferred</p>
    /// <p>Default value: <code>False</code> </p>
    pub fn force_update(mut self, input: bool) -> Self {
        self.force_update = ::std::option::Option::Some(input);
        self
    }
    /// <p>The boolean flag to be included for updating <code>ExpireTime</code> or <code>Restrictions</code> details.</p>
    /// <p>Must be set to <code>true</code> to update an API key resource that has been used in the past 7 days.</p>
    /// <p> <code>False</code> if force update is not preferred</p>
    /// <p>Default value: <code>False</code> </p>
    pub fn set_force_update(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force_update = input;
        self
    }
    /// <p>The boolean flag to be included for updating <code>ExpireTime</code> or <code>Restrictions</code> details.</p>
    /// <p>Must be set to <code>true</code> to update an API key resource that has been used in the past 7 days.</p>
    /// <p> <code>False</code> if force update is not preferred</p>
    /// <p>Default value: <code>False</code> </p>
    pub fn get_force_update(&self) -> &::std::option::Option<bool> {
        &self.force_update
    }
    /// <p>Updates the API key restrictions for the API key resource.</p>
    pub fn restrictions(mut self, input: crate::types::ApiKeyRestrictions) -> Self {
        self.restrictions = ::std::option::Option::Some(input);
        self
    }
    /// <p>Updates the API key restrictions for the API key resource.</p>
    pub fn set_restrictions(mut self, input: ::std::option::Option<crate::types::ApiKeyRestrictions>) -> Self {
        self.restrictions = input;
        self
    }
    /// <p>Updates the API key restrictions for the API key resource.</p>
    pub fn get_restrictions(&self) -> &::std::option::Option<crate::types::ApiKeyRestrictions> {
        &self.restrictions
    }
    /// Consumes the builder and constructs a [`UpdateKeyInput`](crate::operation::update_key::UpdateKeyInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::update_key::UpdateKeyInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_key::UpdateKeyInput {
            key_name: self.key_name,
            description: self.description,
            expire_time: self.expire_time,
            no_expiry: self.no_expiry,
            force_update: self.force_update,
            restrictions: self.restrictions,
        })
    }
}
