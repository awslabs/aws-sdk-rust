// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListTrackerConsumersOutput {
    /// <p>Contains the list of geofence collection ARNs associated to the tracker resource.</p>
    pub consumer_arns: ::std::vec::Vec<::std::string::String>,
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListTrackerConsumersOutput {
    /// <p>Contains the list of geofence collection ARNs associated to the tracker resource.</p>
    pub fn consumer_arns(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.consumer_arns.deref()
    }
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListTrackerConsumersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTrackerConsumersOutput {
    /// Creates a new builder-style object to manufacture [`ListTrackerConsumersOutput`](crate::operation::list_tracker_consumers::ListTrackerConsumersOutput).
    pub fn builder() -> crate::operation::list_tracker_consumers::builders::ListTrackerConsumersOutputBuilder {
        crate::operation::list_tracker_consumers::builders::ListTrackerConsumersOutputBuilder::default()
    }
}

/// A builder for [`ListTrackerConsumersOutput`](crate::operation::list_tracker_consumers::ListTrackerConsumersOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListTrackerConsumersOutputBuilder {
    pub(crate) consumer_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListTrackerConsumersOutputBuilder {
    /// Appends an item to `consumer_arns`.
    ///
    /// To override the contents of this collection use [`set_consumer_arns`](Self::set_consumer_arns).
    ///
    /// <p>Contains the list of geofence collection ARNs associated to the tracker resource.</p>
    pub fn consumer_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.consumer_arns.unwrap_or_default();
        v.push(input.into());
        self.consumer_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the list of geofence collection ARNs associated to the tracker resource.</p>
    pub fn set_consumer_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.consumer_arns = input;
        self
    }
    /// <p>Contains the list of geofence collection ARNs associated to the tracker resource.</p>
    pub fn get_consumer_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.consumer_arns
    }
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A pagination token indicating there are additional pages available. You can use the token in a following request to fetch the next set of results. </p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListTrackerConsumersOutput`](crate::operation::list_tracker_consumers::ListTrackerConsumersOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`consumer_arns`](crate::operation::list_tracker_consumers::builders::ListTrackerConsumersOutputBuilder::consumer_arns)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_tracker_consumers::ListTrackerConsumersOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_tracker_consumers::ListTrackerConsumersOutput {
            consumer_arns: self.consumer_arns.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "consumer_arns",
                    "consumer_arns was not specified but it is required when building ListTrackerConsumersOutput",
                )
            })?,
            next_token: self.next_token,
            _request_id: self._request_id,
        })
    }
}
