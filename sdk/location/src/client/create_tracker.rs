// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateTracker`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tracker_name(impl Into<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::tracker_name) / [`set_tracker_name(Option<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_tracker_name):<br>required: **true**<br><p>The name for the tracker resource.</p>  <p>Requirements:</p>  <ul>   <li> <p>Contain only alphanumeric characters (A-Z, a-z, 0-9) , hyphens (-), periods (.), and underscores (_).</p> </li>   <li> <p>Must be a unique tracker resource name.</p> </li>   <li> <p>No spaces allowed. For example, <code>ExampleTracker</code>.</p> </li>  </ul><br>
    ///   - [`pricing_plan(PricingPlan)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::pricing_plan) / [`set_pricing_plan(Option<PricingPlan>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_pricing_plan):<br>required: **false**<br><p>No longer used. If included, the only allowed value is <code>RequestBasedUsage</code>.</p><br>
    ///   - [`kms_key_id(impl Into<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::kms_key_id) / [`set_kms_key_id(Option<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_kms_key_id):<br>required: **false**<br><p>A key identifier for an <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html">Amazon Web Services KMS customer managed key</a>. Enter a key ID, key ARN, alias name, or alias ARN.</p><br>
    ///   - [`pricing_plan_data_source(impl Into<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::pricing_plan_data_source) / [`set_pricing_plan_data_source(Option<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_pricing_plan_data_source):<br>required: **false**<br><p>This parameter is no longer used.</p><br>
    ///   - [`description(impl Into<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::description) / [`set_description(Option<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_description):<br>required: **false**<br><p>An optional description for the tracker resource.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_tags):<br>required: **false**<br><p>Applies one or more tags to the tracker resource. A tag is a key-value pair helps manage, identify, search, and filter your resources by labelling them.</p>  <p>Format: <code>"key" : "value"</code> </p>  <p>Restrictions:</p>  <ul>   <li> <p>Maximum 50 tags per resource</p> </li>   <li> <p>Each resource tag must be unique with a maximum of one value.</p> </li>   <li> <p>Maximum key length: 128 Unicode characters in UTF-8</p> </li>   <li> <p>Maximum value length: 256 Unicode characters in UTF-8</p> </li>   <li> <p>Can use alphanumeric characters (A–Z, a–z, 0–9), and the following characters: + - = . _ : / @. </p> </li>   <li> <p>Cannot use "aws:" as a prefix for a key.</p> </li>  </ul><br>
    ///   - [`position_filtering(PositionFiltering)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::position_filtering) / [`set_position_filtering(Option<PositionFiltering>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_position_filtering):<br>required: **false**<br><p>Specifies the position filtering for the tracker resource.</p>  <p>Valid values:</p>  <ul>   <li> <p> <code>TimeBased</code> - Location updates are evaluated against linked geofence collections, but not every location update is stored. If your update frequency is more often than 30 seconds, only one update per 30 seconds is stored for each unique device ID. </p> </li>   <li> <p> <code>DistanceBased</code> - If the device has moved less than 30 m (98.4 ft), location updates are ignored. Location updates within this area are neither evaluated against linked geofence collections, nor stored. This helps control costs by reducing the number of geofence evaluations and historical device positions to paginate through. Distance-based filtering can also reduce the effects of GPS noise when displaying device trajectories on a map. </p> </li>   <li> <p> <code>AccuracyBased</code> - If the device has moved less than the measured accuracy, location updates are ignored. For example, if two consecutive updates from a device have a horizontal accuracy of 5 m and 10 m, the second update is ignored if the device has moved less than 15 m. Ignored location updates are neither evaluated against linked geofence collections, nor stored. This can reduce the effects of GPS noise when displaying device trajectories on a map, and can help control your costs by reducing the number of geofence evaluations. </p> </li>  </ul>  <p>This field is optional. If not specified, the default value is <code>TimeBased</code>.</p><br>
    ///   - [`event_bridge_enabled(bool)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::event_bridge_enabled) / [`set_event_bridge_enabled(Option<bool>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_event_bridge_enabled):<br>required: **false**<br><p>Whether to enable position <code>UPDATE</code> events from this tracker to be sent to EventBridge.</p> <note>   <p>You do not need enable this feature to get <code>ENTER</code> and <code>EXIT</code> events for geofences with this tracker. Those events are always sent to EventBridge.</p>  </note><br>
    ///   - [`kms_key_enable_geospatial_queries(bool)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::kms_key_enable_geospatial_queries) / [`set_kms_key_enable_geospatial_queries(Option<bool>)`](crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::set_kms_key_enable_geospatial_queries):<br>required: **false**<br><p>Enables <code>GeospatialQueries</code> for a tracker that uses a <a href="https://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html">Amazon Web Services KMS customer managed key</a>.</p>  <p>This parameter is only used if you are using a KMS customer managed key.</p> <note>   <p>If you wish to encrypt your data using your own KMS customer managed key, then the Bounding Polygon Queries feature will be disabled by default. This is because by using this feature, a representation of your device positions will not be encrypted using the your KMS managed key. The exact device position, however; is still encrypted using your managed key.</p>   <p>You can choose to opt-in to the Bounding Polygon Quseries feature. This is done by setting the <code>KmsKeyEnableGeospatialQueries</code> parameter to true when creating or updating a Tracker.</p>  </note><br>
    /// - On success, responds with [`CreateTrackerOutput`](crate::operation::create_tracker::CreateTrackerOutput) with field(s):
    ///   - [`tracker_name(String)`](crate::operation::create_tracker::CreateTrackerOutput::tracker_name): <p>The name of the tracker resource.</p>
    ///   - [`tracker_arn(String)`](crate::operation::create_tracker::CreateTrackerOutput::tracker_arn): <p>The Amazon Resource Name (ARN) for the tracker resource. Used when you need to specify a resource across all Amazon Web Services.</p>  <ul>   <li> <p>Format example: <code>arn:aws:geo:region:account-id:tracker/ExampleTracker</code> </p> </li>  </ul>
    ///   - [`create_time(DateTime)`](crate::operation::create_tracker::CreateTrackerOutput::create_time): <p>The timestamp for when the tracker resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    /// - On failure, responds with [`SdkError<CreateTrackerError>`](crate::operation::create_tracker::CreateTrackerError)
    pub fn create_tracker(&self) -> crate::operation::create_tracker::builders::CreateTrackerFluentBuilder {
        crate::operation::create_tracker::builders::CreateTrackerFluentBuilder::new(self.handle.clone())
    }
}
