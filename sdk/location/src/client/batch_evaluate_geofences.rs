// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`BatchEvaluateGeofences`](crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`collection_name(impl Into<String>)`](crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesFluentBuilder::collection_name) / [`set_collection_name(Option<String>)`](crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesFluentBuilder::set_collection_name):<br>required: **true**<br><p>The geofence collection used in evaluating the position of devices against its geofences.</p><br>
    ///   - [`device_position_updates(DevicePositionUpdate)`](crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesFluentBuilder::device_position_updates) / [`set_device_position_updates(Option<Vec::<DevicePositionUpdate>>)`](crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesFluentBuilder::set_device_position_updates):<br>required: **true**<br><p>Contains device details for each device to be evaluated against the given geofence collection.</p><br>
    /// - On success, responds with [`BatchEvaluateGeofencesOutput`](crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesOutput) with field(s):
    ///   - [`errors(Vec::<BatchEvaluateGeofencesError>)`](crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesOutput::errors): <p>Contains error details for each device that failed to evaluate its position against the given geofence collection.</p>
    /// - On failure, responds with [`SdkError<BatchEvaluateGeofencesError>`](crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError)
    pub fn batch_evaluate_geofences(&self) -> crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesFluentBuilder {
        crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesFluentBuilder::new(self.handle.clone())
    }
}
