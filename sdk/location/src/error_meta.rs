// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The request was denied because of insufficient access or permissions. Check with an administrator to verify your permissions.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request was unsuccessful because of a conflict.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request has failed to process because of an unknown server error, exception, or failure.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The resource that you've entered was not found in your AWS account.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The operation was denied because the request would exceed the maximum <a href="https://docs.aws.amazon.com/location/latest/developerguide/location-quotas.html">quota</a> set for Amazon Location Service.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied because of request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The input failed to meet the constraints specified by the AWS service. </p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError> for Error {
    fn from(
        err: crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError,
    ) -> Self {
        match err {
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_tracker_consumer::AssociateTrackerConsumerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError> for Error {
    fn from(err: crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError) -> Self {
        match err {
            crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_delete_device_position_history::BatchDeleteDevicePositionHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_geofence::BatchDeleteGeofenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_geofence::BatchDeleteGeofenceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_delete_geofence::BatchDeleteGeofenceError> for Error {
    fn from(err: crate::operation::batch_delete_geofence::BatchDeleteGeofenceError) -> Self {
        match err {
            crate::operation::batch_delete_geofence::BatchDeleteGeofenceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_delete_geofence::BatchDeleteGeofenceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_delete_geofence::BatchDeleteGeofenceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_delete_geofence::BatchDeleteGeofenceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_delete_geofence::BatchDeleteGeofenceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_delete_geofence::BatchDeleteGeofenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError> for Error {
    fn from(err: crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError) -> Self {
        match err {
            crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_evaluate_geofences::BatchEvaluateGeofencesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_get_device_position::BatchGetDevicePositionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_get_device_position::BatchGetDevicePositionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_device_position::BatchGetDevicePositionError> for Error {
    fn from(err: crate::operation::batch_get_device_position::BatchGetDevicePositionError) -> Self {
        match err {
            crate::operation::batch_get_device_position::BatchGetDevicePositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_get_device_position::BatchGetDevicePositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_get_device_position::BatchGetDevicePositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_get_device_position::BatchGetDevicePositionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_get_device_position::BatchGetDevicePositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_get_device_position::BatchGetDevicePositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_put_geofence::BatchPutGeofenceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_put_geofence::BatchPutGeofenceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_put_geofence::BatchPutGeofenceError> for Error {
    fn from(err: crate::operation::batch_put_geofence::BatchPutGeofenceError) -> Self {
        match err {
            crate::operation::batch_put_geofence::BatchPutGeofenceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_put_geofence::BatchPutGeofenceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_put_geofence::BatchPutGeofenceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_put_geofence::BatchPutGeofenceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_put_geofence::BatchPutGeofenceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_put_geofence::BatchPutGeofenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::batch_update_device_position::BatchUpdateDevicePositionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::batch_update_device_position::BatchUpdateDevicePositionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_update_device_position::BatchUpdateDevicePositionError>
    for Error
{
    fn from(
        err: crate::operation::batch_update_device_position::BatchUpdateDevicePositionError,
    ) -> Self {
        match err {
            crate::operation::batch_update_device_position::BatchUpdateDevicePositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::batch_update_device_position::BatchUpdateDevicePositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::batch_update_device_position::BatchUpdateDevicePositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::batch_update_device_position::BatchUpdateDevicePositionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::batch_update_device_position::BatchUpdateDevicePositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::batch_update_device_position::BatchUpdateDevicePositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::calculate_route::CalculateRouteError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::calculate_route::CalculateRouteError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::calculate_route::CalculateRouteError> for Error {
    fn from(err: crate::operation::calculate_route::CalculateRouteError) -> Self {
        match err {
            crate::operation::calculate_route::CalculateRouteError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::calculate_route::CalculateRouteError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::calculate_route::CalculateRouteError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::calculate_route::CalculateRouteError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::calculate_route::CalculateRouteError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::calculate_route::CalculateRouteError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::calculate_route_matrix::CalculateRouteMatrixError> for Error {
    fn from(err: crate::operation::calculate_route_matrix::CalculateRouteMatrixError) -> Self {
        match err {
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::calculate_route_matrix::CalculateRouteMatrixError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_geofence_collection::CreateGeofenceCollectionError> for Error {
    fn from(
        err: crate::operation::create_geofence_collection::CreateGeofenceCollectionError,
    ) -> Self {
        match err {
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_geofence_collection::CreateGeofenceCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_map::CreateMapError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::create_map::CreateMapError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_map::CreateMapError> for Error {
    fn from(err: crate::operation::create_map::CreateMapError) -> Self {
        match err {
            crate::operation::create_map::CreateMapError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_map::CreateMapError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_map::CreateMapError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_map::CreateMapError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_map::CreateMapError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_map::CreateMapError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_map::CreateMapError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_place_index::CreatePlaceIndexError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_place_index::CreatePlaceIndexError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_place_index::CreatePlaceIndexError> for Error {
    fn from(err: crate::operation::create_place_index::CreatePlaceIndexError) -> Self {
        match err {
            crate::operation::create_place_index::CreatePlaceIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_place_index::CreatePlaceIndexError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_place_index::CreatePlaceIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_place_index::CreatePlaceIndexError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_place_index::CreatePlaceIndexError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_place_index::CreatePlaceIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_place_index::CreatePlaceIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_route_calculator::CreateRouteCalculatorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_route_calculator::CreateRouteCalculatorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_route_calculator::CreateRouteCalculatorError> for Error {
    fn from(err: crate::operation::create_route_calculator::CreateRouteCalculatorError) -> Self {
        match err {
            crate::operation::create_route_calculator::CreateRouteCalculatorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_route_calculator::CreateRouteCalculatorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_route_calculator::CreateRouteCalculatorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_route_calculator::CreateRouteCalculatorError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_route_calculator::CreateRouteCalculatorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_route_calculator::CreateRouteCalculatorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_route_calculator::CreateRouteCalculatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_tracker::CreateTrackerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_tracker::CreateTrackerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_tracker::CreateTrackerError> for Error {
    fn from(err: crate::operation::create_tracker::CreateTrackerError) -> Self {
        match err {
            crate::operation::create_tracker::CreateTrackerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_tracker::CreateTrackerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_tracker::CreateTrackerError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::create_tracker::CreateTrackerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_tracker::CreateTrackerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_tracker::CreateTrackerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError> for Error {
    fn from(
        err: crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError,
    ) -> Self {
        match err {
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_geofence_collection::DeleteGeofenceCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_map::DeleteMapError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_map::DeleteMapError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_map::DeleteMapError> for Error {
    fn from(err: crate::operation::delete_map::DeleteMapError) -> Self {
        match err {
            crate::operation::delete_map::DeleteMapError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_map::DeleteMapError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_map::DeleteMapError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_map::DeleteMapError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_map::DeleteMapError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_map::DeleteMapError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_place_index::DeletePlaceIndexError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_place_index::DeletePlaceIndexError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_place_index::DeletePlaceIndexError> for Error {
    fn from(err: crate::operation::delete_place_index::DeletePlaceIndexError) -> Self {
        match err {
            crate::operation::delete_place_index::DeletePlaceIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_place_index::DeletePlaceIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_place_index::DeletePlaceIndexError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_place_index::DeletePlaceIndexError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_place_index::DeletePlaceIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_place_index::DeletePlaceIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_route_calculator::DeleteRouteCalculatorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_route_calculator::DeleteRouteCalculatorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_route_calculator::DeleteRouteCalculatorError> for Error {
    fn from(err: crate::operation::delete_route_calculator::DeleteRouteCalculatorError) -> Self {
        match err {
            crate::operation::delete_route_calculator::DeleteRouteCalculatorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_route_calculator::DeleteRouteCalculatorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_route_calculator::DeleteRouteCalculatorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_route_calculator::DeleteRouteCalculatorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_route_calculator::DeleteRouteCalculatorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_route_calculator::DeleteRouteCalculatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_tracker::DeleteTrackerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_tracker::DeleteTrackerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_tracker::DeleteTrackerError> for Error {
    fn from(err: crate::operation::delete_tracker::DeleteTrackerError) -> Self {
        match err {
            crate::operation::delete_tracker::DeleteTrackerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_tracker::DeleteTrackerError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::delete_tracker::DeleteTrackerError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_tracker::DeleteTrackerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_tracker::DeleteTrackerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_tracker::DeleteTrackerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError>
    for Error
{
    fn from(
        err: crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError,
    ) -> Self {
        match err {
            crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_geofence_collection::DescribeGeofenceCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_map::DescribeMapError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::describe_map::DescribeMapError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_map::DescribeMapError> for Error {
    fn from(err: crate::operation::describe_map::DescribeMapError) -> Self {
        match err {
            crate::operation::describe_map::DescribeMapError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_map::DescribeMapError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_map::DescribeMapError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_map::DescribeMapError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_map::DescribeMapError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_map::DescribeMapError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_place_index::DescribePlaceIndexError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_place_index::DescribePlaceIndexError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_place_index::DescribePlaceIndexError> for Error {
    fn from(err: crate::operation::describe_place_index::DescribePlaceIndexError) -> Self {
        match err {
            crate::operation::describe_place_index::DescribePlaceIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_place_index::DescribePlaceIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_place_index::DescribePlaceIndexError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_place_index::DescribePlaceIndexError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_place_index::DescribePlaceIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_place_index::DescribePlaceIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_route_calculator::DescribeRouteCalculatorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_route_calculator::DescribeRouteCalculatorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_route_calculator::DescribeRouteCalculatorError> for Error {
    fn from(
        err: crate::operation::describe_route_calculator::DescribeRouteCalculatorError,
    ) -> Self {
        match err {
            crate::operation::describe_route_calculator::DescribeRouteCalculatorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_route_calculator::DescribeRouteCalculatorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_route_calculator::DescribeRouteCalculatorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_route_calculator::DescribeRouteCalculatorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_route_calculator::DescribeRouteCalculatorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_route_calculator::DescribeRouteCalculatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_tracker::DescribeTrackerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_tracker::DescribeTrackerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_tracker::DescribeTrackerError> for Error {
    fn from(err: crate::operation::describe_tracker::DescribeTrackerError) -> Self {
        match err {
            crate::operation::describe_tracker::DescribeTrackerError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_tracker::DescribeTrackerError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_tracker::DescribeTrackerError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_tracker::DescribeTrackerError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::describe_tracker::DescribeTrackerError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::describe_tracker::DescribeTrackerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError,
    ) -> Self {
        match err {
            crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_tracker_consumer::DisassociateTrackerConsumerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_device_position::GetDevicePositionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_device_position::GetDevicePositionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_position::GetDevicePositionError> for Error {
    fn from(err: crate::operation::get_device_position::GetDevicePositionError) -> Self {
        match err {
            crate::operation::get_device_position::GetDevicePositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_device_position::GetDevicePositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_device_position::GetDevicePositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_device_position::GetDevicePositionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_device_position::GetDevicePositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_device_position::GetDevicePositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_device_position_history::GetDevicePositionHistoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_device_position_history::GetDevicePositionHistoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_position_history::GetDevicePositionHistoryError> for Error {
    fn from(
        err: crate::operation::get_device_position_history::GetDevicePositionHistoryError,
    ) -> Self {
        match err {
            crate::operation::get_device_position_history::GetDevicePositionHistoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_device_position_history::GetDevicePositionHistoryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_device_position_history::GetDevicePositionHistoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_device_position_history::GetDevicePositionHistoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_device_position_history::GetDevicePositionHistoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_device_position_history::GetDevicePositionHistoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_geofence::GetGeofenceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_geofence::GetGeofenceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_geofence::GetGeofenceError> for Error {
    fn from(err: crate::operation::get_geofence::GetGeofenceError) -> Self {
        match err {
            crate::operation::get_geofence::GetGeofenceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_geofence::GetGeofenceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_geofence::GetGeofenceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_geofence::GetGeofenceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_geofence::GetGeofenceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_geofence::GetGeofenceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::get_map_glyphs::GetMapGlyphsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_map_glyphs::GetMapGlyphsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_map_glyphs::GetMapGlyphsError> for Error {
    fn from(err: crate::operation::get_map_glyphs::GetMapGlyphsError) -> Self {
        match err {
            crate::operation::get_map_glyphs::GetMapGlyphsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_map_glyphs::GetMapGlyphsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_map_glyphs::GetMapGlyphsError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_map_glyphs::GetMapGlyphsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_map_glyphs::GetMapGlyphsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_map_glyphs::GetMapGlyphsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::operation::get_map_sprites::GetMapSpritesError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_map_sprites::GetMapSpritesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_map_sprites::GetMapSpritesError> for Error {
    fn from(err: crate::operation::get_map_sprites::GetMapSpritesError) -> Self {
        match err {
            crate::operation::get_map_sprites::GetMapSpritesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_map_sprites::GetMapSpritesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::get_map_sprites::GetMapSpritesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_map_sprites::GetMapSpritesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_map_sprites::GetMapSpritesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_map_sprites::GetMapSpritesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError> for Error {
    fn from(err: crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError) -> Self {
        match err {
            crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_map_style_descriptor::GetMapStyleDescriptorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_map_tile::GetMapTileError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_map_tile::GetMapTileError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_map_tile::GetMapTileError> for Error {
    fn from(err: crate::operation::get_map_tile::GetMapTileError) -> Self {
        match err {
            crate::operation::get_map_tile::GetMapTileError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_map_tile::GetMapTileError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_map_tile::GetMapTileError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_map_tile::GetMapTileError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_map_tile::GetMapTileError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_map_tile::GetMapTileError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_place::GetPlaceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::get_place::GetPlaceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_place::GetPlaceError> for Error {
    fn from(err: crate::operation::get_place::GetPlaceError) -> Self {
        match err {
            crate::operation::get_place::GetPlaceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_place::GetPlaceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_place::GetPlaceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_place::GetPlaceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::get_place::GetPlaceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::get_place::GetPlaceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_device_positions::ListDevicePositionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_device_positions::ListDevicePositionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_positions::ListDevicePositionsError> for Error {
    fn from(err: crate::operation::list_device_positions::ListDevicePositionsError) -> Self {
        match err {
            crate::operation::list_device_positions::ListDevicePositionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_device_positions::ListDevicePositionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_device_positions::ListDevicePositionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_device_positions::ListDevicePositionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_device_positions::ListDevicePositionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_geofence_collections::ListGeofenceCollectionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_geofence_collections::ListGeofenceCollectionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_geofence_collections::ListGeofenceCollectionsError> for Error {
    fn from(
        err: crate::operation::list_geofence_collections::ListGeofenceCollectionsError,
    ) -> Self {
        match err {
            crate::operation::list_geofence_collections::ListGeofenceCollectionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_geofence_collections::ListGeofenceCollectionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_geofence_collections::ListGeofenceCollectionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_geofence_collections::ListGeofenceCollectionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_geofence_collections::ListGeofenceCollectionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_geofences::ListGeofencesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_geofences::ListGeofencesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_geofences::ListGeofencesError> for Error {
    fn from(err: crate::operation::list_geofences::ListGeofencesError) -> Self {
        match err {
            crate::operation::list_geofences::ListGeofencesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_geofences::ListGeofencesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_geofences::ListGeofencesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_geofences::ListGeofencesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_geofences::ListGeofencesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_geofences::ListGeofencesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_maps::ListMapsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_maps::ListMapsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_maps::ListMapsError> for Error {
    fn from(err: crate::operation::list_maps::ListMapsError) -> Self {
        match err {
            crate::operation::list_maps::ListMapsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_maps::ListMapsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_maps::ListMapsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_maps::ListMapsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_maps::ListMapsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_place_indexes::ListPlaceIndexesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_place_indexes::ListPlaceIndexesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_place_indexes::ListPlaceIndexesError> for Error {
    fn from(err: crate::operation::list_place_indexes::ListPlaceIndexesError) -> Self {
        match err {
            crate::operation::list_place_indexes::ListPlaceIndexesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_place_indexes::ListPlaceIndexesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_place_indexes::ListPlaceIndexesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_place_indexes::ListPlaceIndexesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_place_indexes::ListPlaceIndexesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_route_calculators::ListRouteCalculatorsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_route_calculators::ListRouteCalculatorsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_route_calculators::ListRouteCalculatorsError> for Error {
    fn from(err: crate::operation::list_route_calculators::ListRouteCalculatorsError) -> Self {
        match err {
            crate::operation::list_route_calculators::ListRouteCalculatorsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_route_calculators::ListRouteCalculatorsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_route_calculators::ListRouteCalculatorsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_route_calculators::ListRouteCalculatorsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_route_calculators::ListRouteCalculatorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tracker_consumers::ListTrackerConsumersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tracker_consumers::ListTrackerConsumersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tracker_consumers::ListTrackerConsumersError> for Error {
    fn from(err: crate::operation::list_tracker_consumers::ListTrackerConsumersError) -> Self {
        match err {
            crate::operation::list_tracker_consumers::ListTrackerConsumersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tracker_consumers::ListTrackerConsumersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tracker_consumers::ListTrackerConsumersError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tracker_consumers::ListTrackerConsumersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tracker_consumers::ListTrackerConsumersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tracker_consumers::ListTrackerConsumersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_trackers::ListTrackersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_trackers::ListTrackersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_trackers::ListTrackersError> for Error {
    fn from(err: crate::operation::list_trackers::ListTrackersError) -> Self {
        match err {
            crate::operation::list_trackers::ListTrackersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_trackers::ListTrackersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_trackers::ListTrackersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_trackers::ListTrackersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_trackers::ListTrackersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::put_geofence::PutGeofenceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::put_geofence::PutGeofenceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_geofence::PutGeofenceError> for Error {
    fn from(err: crate::operation::put_geofence::PutGeofenceError) -> Self {
        match err {
            crate::operation::put_geofence::PutGeofenceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::put_geofence::PutGeofenceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::put_geofence::PutGeofenceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::put_geofence::PutGeofenceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_geofence::PutGeofenceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::put_geofence::PutGeofenceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::put_geofence::PutGeofenceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError>
    for Error
{
    fn from(
        err: crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError,
    ) -> Self {
        match err {
            crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_place_index_for_position::SearchPlaceIndexForPositionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError>
    for Error
{
    fn from(
        err: crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError,
    ) -> Self {
        match err {
            crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_place_index_for_suggestions::SearchPlaceIndexForSuggestionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError> for Error {
    fn from(
        err: crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError,
    ) -> Self {
        match err {
            crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::search_place_index_for_text::SearchPlaceIndexForTextError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_geofence_collection::UpdateGeofenceCollectionError> for Error {
    fn from(
        err: crate::operation::update_geofence_collection::UpdateGeofenceCollectionError,
    ) -> Self {
        match err {
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_geofence_collection::UpdateGeofenceCollectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_map::UpdateMapError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::update_map::UpdateMapError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_map::UpdateMapError> for Error {
    fn from(err: crate::operation::update_map::UpdateMapError) -> Self {
        match err {
            crate::operation::update_map::UpdateMapError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_map::UpdateMapError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_map::UpdateMapError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_map::UpdateMapError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_map::UpdateMapError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_map::UpdateMapError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_place_index::UpdatePlaceIndexError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_place_index::UpdatePlaceIndexError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_place_index::UpdatePlaceIndexError> for Error {
    fn from(err: crate::operation::update_place_index::UpdatePlaceIndexError) -> Self {
        match err {
            crate::operation::update_place_index::UpdatePlaceIndexError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_place_index::UpdatePlaceIndexError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_place_index::UpdatePlaceIndexError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_place_index::UpdatePlaceIndexError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_place_index::UpdatePlaceIndexError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_place_index::UpdatePlaceIndexError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_route_calculator::UpdateRouteCalculatorError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_route_calculator::UpdateRouteCalculatorError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_route_calculator::UpdateRouteCalculatorError> for Error {
    fn from(err: crate::operation::update_route_calculator::UpdateRouteCalculatorError) -> Self {
        match err {
            crate::operation::update_route_calculator::UpdateRouteCalculatorError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_route_calculator::UpdateRouteCalculatorError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_route_calculator::UpdateRouteCalculatorError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_route_calculator::UpdateRouteCalculatorError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_route_calculator::UpdateRouteCalculatorError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_route_calculator::UpdateRouteCalculatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::update_tracker::UpdateTrackerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_tracker::UpdateTrackerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_tracker::UpdateTrackerError> for Error {
    fn from(err: crate::operation::update_tracker::UpdateTrackerError) -> Self {
        match err {
            crate::operation::update_tracker::UpdateTrackerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_tracker::UpdateTrackerError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::update_tracker::UpdateTrackerError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::update_tracker::UpdateTrackerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_tracker::UpdateTrackerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_tracker::UpdateTrackerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
