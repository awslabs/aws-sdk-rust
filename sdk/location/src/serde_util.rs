// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    if builder.reason.is_none() {
        builder.reason = "no value was set".parse::<crate::types::ValidationExceptionReason>().ok()
    }
    if builder.field_list.is_none() {
        builder.field_list = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_device_position_history_output_correct_errors(
    mut builder: crate::operation::batch_delete_device_position_history::builders::BatchDeleteDevicePositionHistoryOutputBuilder,
) -> crate::operation::batch_delete_device_position_history::builders::BatchDeleteDevicePositionHistoryOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_geofence_output_correct_errors(
    mut builder: crate::operation::batch_delete_geofence::builders::BatchDeleteGeofenceOutputBuilder,
) -> crate::operation::batch_delete_geofence::builders::BatchDeleteGeofenceOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_evaluate_geofences_output_correct_errors(
    mut builder: crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesOutputBuilder,
) -> crate::operation::batch_evaluate_geofences::builders::BatchEvaluateGeofencesOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_get_device_position_output_correct_errors(
    mut builder: crate::operation::batch_get_device_position::builders::BatchGetDevicePositionOutputBuilder,
) -> crate::operation::batch_get_device_position::builders::BatchGetDevicePositionOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    if builder.device_positions.is_none() {
        builder.device_positions = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_put_geofence_output_correct_errors(
    mut builder: crate::operation::batch_put_geofence::builders::BatchPutGeofenceOutputBuilder,
) -> crate::operation::batch_put_geofence::builders::BatchPutGeofenceOutputBuilder {
    if builder.successes.is_none() {
        builder.successes = Some(Default::default())
    }
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_device_position_output_correct_errors(
    mut builder: crate::operation::batch_update_device_position::builders::BatchUpdateDevicePositionOutputBuilder,
) -> crate::operation::batch_update_device_position::builders::BatchUpdateDevicePositionOutputBuilder {
    if builder.errors.is_none() {
        builder.errors = Some(Default::default())
    }
    builder
}

pub(crate) fn calculate_route_output_correct_errors(
    mut builder: crate::operation::calculate_route::builders::CalculateRouteOutputBuilder,
) -> crate::operation::calculate_route::builders::CalculateRouteOutputBuilder {
    if builder.legs.is_none() {
        builder.legs = Some(Default::default())
    }
    if builder.summary.is_none() {
        builder.summary = {
            let builder = crate::types::builders::CalculateRouteSummaryBuilder::default();
            crate::serde_util::calculate_route_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn calculate_route_matrix_output_correct_errors(
    mut builder: crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixOutputBuilder,
) -> crate::operation::calculate_route_matrix::builders::CalculateRouteMatrixOutputBuilder {
    if builder.route_matrix.is_none() {
        builder.route_matrix = Some(Default::default())
    }
    if builder.summary.is_none() {
        builder.summary = {
            let builder = crate::types::builders::CalculateRouteMatrixSummaryBuilder::default();
            crate::serde_util::calculate_route_matrix_summary_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_geofence_collection_output_correct_errors(
    mut builder: crate::operation::create_geofence_collection::builders::CreateGeofenceCollectionOutputBuilder,
) -> crate::operation::create_geofence_collection::builders::CreateGeofenceCollectionOutputBuilder {
    if builder.collection_name.is_none() {
        builder.collection_name = Some(Default::default())
    }
    if builder.collection_arn.is_none() {
        builder.collection_arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_key_output_correct_errors(
    mut builder: crate::operation::create_key::builders::CreateKeyOutputBuilder,
) -> crate::operation::create_key::builders::CreateKeyOutputBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_name.is_none() {
        builder.key_name = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_map_output_correct_errors(
    mut builder: crate::operation::create_map::builders::CreateMapOutputBuilder,
) -> crate::operation::create_map::builders::CreateMapOutputBuilder {
    if builder.map_name.is_none() {
        builder.map_name = Some(Default::default())
    }
    if builder.map_arn.is_none() {
        builder.map_arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_place_index_output_correct_errors(
    mut builder: crate::operation::create_place_index::builders::CreatePlaceIndexOutputBuilder,
) -> crate::operation::create_place_index::builders::CreatePlaceIndexOutputBuilder {
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    if builder.index_arn.is_none() {
        builder.index_arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_route_calculator_output_correct_errors(
    mut builder: crate::operation::create_route_calculator::builders::CreateRouteCalculatorOutputBuilder,
) -> crate::operation::create_route_calculator::builders::CreateRouteCalculatorOutputBuilder {
    if builder.calculator_name.is_none() {
        builder.calculator_name = Some(Default::default())
    }
    if builder.calculator_arn.is_none() {
        builder.calculator_arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_tracker_output_correct_errors(
    mut builder: crate::operation::create_tracker::builders::CreateTrackerOutputBuilder,
) -> crate::operation::create_tracker::builders::CreateTrackerOutputBuilder {
    if builder.tracker_name.is_none() {
        builder.tracker_name = Some(Default::default())
    }
    if builder.tracker_arn.is_none() {
        builder.tracker_arn = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_geofence_collection_output_correct_errors(
    mut builder: crate::operation::describe_geofence_collection::builders::DescribeGeofenceCollectionOutputBuilder,
) -> crate::operation::describe_geofence_collection::builders::DescribeGeofenceCollectionOutputBuilder {
    if builder.collection_name.is_none() {
        builder.collection_name = Some(Default::default())
    }
    if builder.collection_arn.is_none() {
        builder.collection_arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_key_output_correct_errors(
    mut builder: crate::operation::describe_key::builders::DescribeKeyOutputBuilder,
) -> crate::operation::describe_key::builders::DescribeKeyOutputBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_name.is_none() {
        builder.key_name = Some(Default::default())
    }
    if builder.restrictions.is_none() {
        builder.restrictions = {
            let builder = crate::types::builders::ApiKeyRestrictionsBuilder::default();
            crate::serde_util::api_key_restrictions_correct_errors(builder).build().ok()
        }
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.expire_time.is_none() {
        builder.expire_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_map_output_correct_errors(
    mut builder: crate::operation::describe_map::builders::DescribeMapOutputBuilder,
) -> crate::operation::describe_map::builders::DescribeMapOutputBuilder {
    if builder.map_name.is_none() {
        builder.map_name = Some(Default::default())
    }
    if builder.map_arn.is_none() {
        builder.map_arn = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    if builder.configuration.is_none() {
        builder.configuration = {
            let builder = crate::types::builders::MapConfigurationBuilder::default();
            crate::serde_util::map_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn describe_place_index_output_correct_errors(
    mut builder: crate::operation::describe_place_index::builders::DescribePlaceIndexOutputBuilder,
) -> crate::operation::describe_place_index::builders::DescribePlaceIndexOutputBuilder {
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    if builder.index_arn.is_none() {
        builder.index_arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    if builder.data_source_configuration.is_none() {
        builder.data_source_configuration = {
            let builder = crate::types::builders::DataSourceConfigurationBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_route_calculator_output_correct_errors(
    mut builder: crate::operation::describe_route_calculator::builders::DescribeRouteCalculatorOutputBuilder,
) -> crate::operation::describe_route_calculator::builders::DescribeRouteCalculatorOutputBuilder {
    if builder.calculator_name.is_none() {
        builder.calculator_name = Some(Default::default())
    }
    if builder.calculator_arn.is_none() {
        builder.calculator_arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_tracker_output_correct_errors(
    mut builder: crate::operation::describe_tracker::builders::DescribeTrackerOutputBuilder,
) -> crate::operation::describe_tracker::builders::DescribeTrackerOutputBuilder {
    if builder.tracker_name.is_none() {
        builder.tracker_name = Some(Default::default())
    }
    if builder.tracker_arn.is_none() {
        builder.tracker_arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_device_position_output_correct_errors(
    mut builder: crate::operation::get_device_position::builders::GetDevicePositionOutputBuilder,
) -> crate::operation::get_device_position::builders::GetDevicePositionOutputBuilder {
    if builder.sample_time.is_none() {
        builder.sample_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.received_time.is_none() {
        builder.received_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn get_device_position_history_output_correct_errors(
    mut builder: crate::operation::get_device_position_history::builders::GetDevicePositionHistoryOutputBuilder,
) -> crate::operation::get_device_position_history::builders::GetDevicePositionHistoryOutputBuilder {
    if builder.device_positions.is_none() {
        builder.device_positions = Some(Default::default())
    }
    builder
}

pub(crate) fn get_geofence_output_correct_errors(
    mut builder: crate::operation::get_geofence::builders::GetGeofenceOutputBuilder,
) -> crate::operation::get_geofence::builders::GetGeofenceOutputBuilder {
    if builder.geofence_id.is_none() {
        builder.geofence_id = Some(Default::default())
    }
    if builder.geometry.is_none() {
        builder.geometry = {
            let builder = crate::types::builders::GeofenceGeometryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_place_output_correct_errors(
    mut builder: crate::operation::get_place::builders::GetPlaceOutputBuilder,
) -> crate::operation::get_place::builders::GetPlaceOutputBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::PlaceBuilder::default();
            Some(crate::serde_util::place_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn list_device_positions_output_correct_errors(
    mut builder: crate::operation::list_device_positions::builders::ListDevicePositionsOutputBuilder,
) -> crate::operation::list_device_positions::builders::ListDevicePositionsOutputBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_geofence_collections_output_correct_errors(
    mut builder: crate::operation::list_geofence_collections::builders::ListGeofenceCollectionsOutputBuilder,
) -> crate::operation::list_geofence_collections::builders::ListGeofenceCollectionsOutputBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_geofences_output_correct_errors(
    mut builder: crate::operation::list_geofences::builders::ListGeofencesOutputBuilder,
) -> crate::operation::list_geofences::builders::ListGeofencesOutputBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_keys_output_correct_errors(
    mut builder: crate::operation::list_keys::builders::ListKeysOutputBuilder,
) -> crate::operation::list_keys::builders::ListKeysOutputBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_maps_output_correct_errors(
    mut builder: crate::operation::list_maps::builders::ListMapsOutputBuilder,
) -> crate::operation::list_maps::builders::ListMapsOutputBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_place_indexes_output_correct_errors(
    mut builder: crate::operation::list_place_indexes::builders::ListPlaceIndexesOutputBuilder,
) -> crate::operation::list_place_indexes::builders::ListPlaceIndexesOutputBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_route_calculators_output_correct_errors(
    mut builder: crate::operation::list_route_calculators::builders::ListRouteCalculatorsOutputBuilder,
) -> crate::operation::list_route_calculators::builders::ListRouteCalculatorsOutputBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_tracker_consumers_output_correct_errors(
    mut builder: crate::operation::list_tracker_consumers::builders::ListTrackerConsumersOutputBuilder,
) -> crate::operation::list_tracker_consumers::builders::ListTrackerConsumersOutputBuilder {
    if builder.consumer_arns.is_none() {
        builder.consumer_arns = Some(Default::default())
    }
    builder
}

pub(crate) fn list_trackers_output_correct_errors(
    mut builder: crate::operation::list_trackers::builders::ListTrackersOutputBuilder,
) -> crate::operation::list_trackers::builders::ListTrackersOutputBuilder {
    if builder.entries.is_none() {
        builder.entries = Some(Default::default())
    }
    builder
}

pub(crate) fn put_geofence_output_correct_errors(
    mut builder: crate::operation::put_geofence::builders::PutGeofenceOutputBuilder,
) -> crate::operation::put_geofence::builders::PutGeofenceOutputBuilder {
    if builder.geofence_id.is_none() {
        builder.geofence_id = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn search_place_index_for_position_output_correct_errors(
    mut builder: crate::operation::search_place_index_for_position::builders::SearchPlaceIndexForPositionOutputBuilder,
) -> crate::operation::search_place_index_for_position::builders::SearchPlaceIndexForPositionOutputBuilder {
    if builder.summary.is_none() {
        builder.summary = {
            let builder = crate::types::builders::SearchPlaceIndexForPositionSummaryBuilder::default();
            crate::serde_util::search_place_index_for_position_summary_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn search_place_index_for_suggestions_output_correct_errors(
    mut builder: crate::operation::search_place_index_for_suggestions::builders::SearchPlaceIndexForSuggestionsOutputBuilder,
) -> crate::operation::search_place_index_for_suggestions::builders::SearchPlaceIndexForSuggestionsOutputBuilder {
    if builder.summary.is_none() {
        builder.summary = {
            let builder = crate::types::builders::SearchPlaceIndexForSuggestionsSummaryBuilder::default();
            crate::serde_util::search_place_index_for_suggestions_summary_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn search_place_index_for_text_output_correct_errors(
    mut builder: crate::operation::search_place_index_for_text::builders::SearchPlaceIndexForTextOutputBuilder,
) -> crate::operation::search_place_index_for_text::builders::SearchPlaceIndexForTextOutputBuilder {
    if builder.summary.is_none() {
        builder.summary = {
            let builder = crate::types::builders::SearchPlaceIndexForTextSummaryBuilder::default();
            crate::serde_util::search_place_index_for_text_summary_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.results.is_none() {
        builder.results = Some(Default::default())
    }
    builder
}

pub(crate) fn update_geofence_collection_output_correct_errors(
    mut builder: crate::operation::update_geofence_collection::builders::UpdateGeofenceCollectionOutputBuilder,
) -> crate::operation::update_geofence_collection::builders::UpdateGeofenceCollectionOutputBuilder {
    if builder.collection_name.is_none() {
        builder.collection_name = Some(Default::default())
    }
    if builder.collection_arn.is_none() {
        builder.collection_arn = Some(Default::default())
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_key_output_correct_errors(
    mut builder: crate::operation::update_key::builders::UpdateKeyOutputBuilder,
) -> crate::operation::update_key::builders::UpdateKeyOutputBuilder {
    if builder.key_arn.is_none() {
        builder.key_arn = Some(Default::default())
    }
    if builder.key_name.is_none() {
        builder.key_name = Some(Default::default())
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_map_output_correct_errors(
    mut builder: crate::operation::update_map::builders::UpdateMapOutputBuilder,
) -> crate::operation::update_map::builders::UpdateMapOutputBuilder {
    if builder.map_name.is_none() {
        builder.map_name = Some(Default::default())
    }
    if builder.map_arn.is_none() {
        builder.map_arn = Some(Default::default())
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_place_index_output_correct_errors(
    mut builder: crate::operation::update_place_index::builders::UpdatePlaceIndexOutputBuilder,
) -> crate::operation::update_place_index::builders::UpdatePlaceIndexOutputBuilder {
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    if builder.index_arn.is_none() {
        builder.index_arn = Some(Default::default())
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_route_calculator_output_correct_errors(
    mut builder: crate::operation::update_route_calculator::builders::UpdateRouteCalculatorOutputBuilder,
) -> crate::operation::update_route_calculator::builders::UpdateRouteCalculatorOutputBuilder {
    if builder.calculator_name.is_none() {
        builder.calculator_name = Some(Default::default())
    }
    if builder.calculator_arn.is_none() {
        builder.calculator_arn = Some(Default::default())
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn update_tracker_output_correct_errors(
    mut builder: crate::operation::update_tracker::builders::UpdateTrackerOutputBuilder,
) -> crate::operation::update_tracker::builders::UpdateTrackerOutputBuilder {
    if builder.tracker_name.is_none() {
        builder.tracker_name = Some(Default::default())
    }
    if builder.tracker_arn.is_none() {
        builder.tracker_arn = Some(Default::default())
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn calculate_route_summary_correct_errors(
    mut builder: crate::types::builders::CalculateRouteSummaryBuilder,
) -> crate::types::builders::CalculateRouteSummaryBuilder {
    if builder.route_b_box.is_none() {
        builder.route_b_box = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.duration_seconds.is_none() {
        builder.duration_seconds = Some(Default::default())
    }
    if builder.distance_unit.is_none() {
        builder.distance_unit = "no value was set".parse::<crate::types::DistanceUnit>().ok()
    }
    builder
}

pub(crate) fn calculate_route_matrix_summary_correct_errors(
    mut builder: crate::types::builders::CalculateRouteMatrixSummaryBuilder,
) -> crate::types::builders::CalculateRouteMatrixSummaryBuilder {
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    if builder.route_count.is_none() {
        builder.route_count = Some(Default::default())
    }
    if builder.error_count.is_none() {
        builder.error_count = Some(Default::default())
    }
    if builder.distance_unit.is_none() {
        builder.distance_unit = "no value was set".parse::<crate::types::DistanceUnit>().ok()
    }
    builder
}

pub(crate) fn api_key_restrictions_correct_errors(
    mut builder: crate::types::builders::ApiKeyRestrictionsBuilder,
) -> crate::types::builders::ApiKeyRestrictionsBuilder {
    if builder.allow_actions.is_none() {
        builder.allow_actions = Some(Default::default())
    }
    if builder.allow_resources.is_none() {
        builder.allow_resources = Some(Default::default())
    }
    builder
}

pub(crate) fn map_configuration_correct_errors(
    mut builder: crate::types::builders::MapConfigurationBuilder,
) -> crate::types::builders::MapConfigurationBuilder {
    if builder.style.is_none() {
        builder.style = Some(Default::default())
    }
    builder
}

pub(crate) fn place_correct_errors(mut builder: crate::types::builders::PlaceBuilder) -> crate::types::builders::PlaceBuilder {
    if builder.geometry.is_none() {
        builder.geometry = {
            let builder = crate::types::builders::PlaceGeometryBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn search_place_index_for_position_summary_correct_errors(
    mut builder: crate::types::builders::SearchPlaceIndexForPositionSummaryBuilder,
) -> crate::types::builders::SearchPlaceIndexForPositionSummaryBuilder {
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    builder
}

pub(crate) fn search_place_index_for_suggestions_summary_correct_errors(
    mut builder: crate::types::builders::SearchPlaceIndexForSuggestionsSummaryBuilder,
) -> crate::types::builders::SearchPlaceIndexForSuggestionsSummaryBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    builder
}

pub(crate) fn search_place_index_for_text_summary_correct_errors(
    mut builder: crate::types::builders::SearchPlaceIndexForTextSummaryBuilder,
) -> crate::types::builders::SearchPlaceIndexForTextSummaryBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    builder
}

pub(crate) fn positional_accuracy_correct_errors(
    mut builder: crate::types::builders::PositionalAccuracyBuilder,
) -> crate::types::builders::PositionalAccuracyBuilder {
    if builder.horizontal.is_none() {
        builder.horizontal = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_delete_device_position_history_error_correct_errors(
    mut builder: crate::types::builders::BatchDeleteDevicePositionHistoryErrorBuilder,
) -> crate::types::builders::BatchDeleteDevicePositionHistoryErrorBuilder {
    if builder.device_id.is_none() {
        builder.device_id = Some(Default::default())
    }
    if builder.error.is_none() {
        builder.error = {
            let builder = crate::types::builders::BatchItemErrorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn batch_delete_geofence_error_correct_errors(
    mut builder: crate::types::builders::BatchDeleteGeofenceErrorBuilder,
) -> crate::types::builders::BatchDeleteGeofenceErrorBuilder {
    if builder.geofence_id.is_none() {
        builder.geofence_id = Some(Default::default())
    }
    if builder.error.is_none() {
        builder.error = {
            let builder = crate::types::builders::BatchItemErrorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn batch_evaluate_geofences_error_correct_errors(
    mut builder: crate::types::builders::BatchEvaluateGeofencesErrorBuilder,
) -> crate::types::builders::BatchEvaluateGeofencesErrorBuilder {
    if builder.device_id.is_none() {
        builder.device_id = Some(Default::default())
    }
    if builder.sample_time.is_none() {
        builder.sample_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.error.is_none() {
        builder.error = {
            let builder = crate::types::builders::BatchItemErrorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn batch_get_device_position_error_correct_errors(
    mut builder: crate::types::builders::BatchGetDevicePositionErrorBuilder,
) -> crate::types::builders::BatchGetDevicePositionErrorBuilder {
    if builder.device_id.is_none() {
        builder.device_id = Some(Default::default())
    }
    if builder.error.is_none() {
        builder.error = {
            let builder = crate::types::builders::BatchItemErrorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn batch_put_geofence_error_correct_errors(
    mut builder: crate::types::builders::BatchPutGeofenceErrorBuilder,
) -> crate::types::builders::BatchPutGeofenceErrorBuilder {
    if builder.geofence_id.is_none() {
        builder.geofence_id = Some(Default::default())
    }
    if builder.error.is_none() {
        builder.error = {
            let builder = crate::types::builders::BatchItemErrorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn batch_put_geofence_success_correct_errors(
    mut builder: crate::types::builders::BatchPutGeofenceSuccessBuilder,
) -> crate::types::builders::BatchPutGeofenceSuccessBuilder {
    if builder.geofence_id.is_none() {
        builder.geofence_id = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn batch_update_device_position_error_correct_errors(
    mut builder: crate::types::builders::BatchUpdateDevicePositionErrorBuilder,
) -> crate::types::builders::BatchUpdateDevicePositionErrorBuilder {
    if builder.device_id.is_none() {
        builder.device_id = Some(Default::default())
    }
    if builder.sample_time.is_none() {
        builder.sample_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.error.is_none() {
        builder.error = {
            let builder = crate::types::builders::BatchItemErrorBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn circle_correct_errors(mut builder: crate::types::builders::CircleBuilder) -> crate::types::builders::CircleBuilder {
    if builder.center.is_none() {
        builder.center = Some(Default::default())
    }
    if builder.radius.is_none() {
        builder.radius = Some(Default::default())
    }
    builder
}

pub(crate) fn device_position_correct_errors(
    mut builder: crate::types::builders::DevicePositionBuilder,
) -> crate::types::builders::DevicePositionBuilder {
    if builder.sample_time.is_none() {
        builder.sample_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.received_time.is_none() {
        builder.received_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn leg_correct_errors(mut builder: crate::types::builders::LegBuilder) -> crate::types::builders::LegBuilder {
    if builder.start_position.is_none() {
        builder.start_position = Some(Default::default())
    }
    if builder.end_position.is_none() {
        builder.end_position = Some(Default::default())
    }
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.duration_seconds.is_none() {
        builder.duration_seconds = Some(Default::default())
    }
    if builder.steps.is_none() {
        builder.steps = Some(Default::default())
    }
    builder
}

pub(crate) fn list_device_positions_response_entry_correct_errors(
    mut builder: crate::types::builders::ListDevicePositionsResponseEntryBuilder,
) -> crate::types::builders::ListDevicePositionsResponseEntryBuilder {
    if builder.device_id.is_none() {
        builder.device_id = Some(Default::default())
    }
    if builder.sample_time.is_none() {
        builder.sample_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.position.is_none() {
        builder.position = Some(Default::default())
    }
    builder
}

pub(crate) fn list_geofence_collections_response_entry_correct_errors(
    mut builder: crate::types::builders::ListGeofenceCollectionsResponseEntryBuilder,
) -> crate::types::builders::ListGeofenceCollectionsResponseEntryBuilder {
    if builder.collection_name.is_none() {
        builder.collection_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_geofence_response_entry_correct_errors(
    mut builder: crate::types::builders::ListGeofenceResponseEntryBuilder,
) -> crate::types::builders::ListGeofenceResponseEntryBuilder {
    if builder.geofence_id.is_none() {
        builder.geofence_id = Some(Default::default())
    }
    if builder.geometry.is_none() {
        builder.geometry = {
            let builder = crate::types::builders::GeofenceGeometryBuilder::default();
            Some(builder.build())
        }
    }
    if builder.status.is_none() {
        builder.status = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_keys_response_entry_correct_errors(
    mut builder: crate::types::builders::ListKeysResponseEntryBuilder,
) -> crate::types::builders::ListKeysResponseEntryBuilder {
    if builder.key_name.is_none() {
        builder.key_name = Some(Default::default())
    }
    if builder.expire_time.is_none() {
        builder.expire_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.restrictions.is_none() {
        builder.restrictions = {
            let builder = crate::types::builders::ApiKeyRestrictionsBuilder::default();
            crate::serde_util::api_key_restrictions_correct_errors(builder).build().ok()
        }
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_maps_response_entry_correct_errors(
    mut builder: crate::types::builders::ListMapsResponseEntryBuilder,
) -> crate::types::builders::ListMapsResponseEntryBuilder {
    if builder.map_name.is_none() {
        builder.map_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_place_indexes_response_entry_correct_errors(
    mut builder: crate::types::builders::ListPlaceIndexesResponseEntryBuilder,
) -> crate::types::builders::ListPlaceIndexesResponseEntryBuilder {
    if builder.index_name.is_none() {
        builder.index_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_route_calculators_response_entry_correct_errors(
    mut builder: crate::types::builders::ListRouteCalculatorsResponseEntryBuilder,
) -> crate::types::builders::ListRouteCalculatorsResponseEntryBuilder {
    if builder.calculator_name.is_none() {
        builder.calculator_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.data_source.is_none() {
        builder.data_source = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_trackers_response_entry_correct_errors(
    mut builder: crate::types::builders::ListTrackersResponseEntryBuilder,
) -> crate::types::builders::ListTrackersResponseEntryBuilder {
    if builder.tracker_name.is_none() {
        builder.tracker_name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.create_time.is_none() {
        builder.create_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.update_time.is_none() {
        builder.update_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn search_for_position_result_correct_errors(
    mut builder: crate::types::builders::SearchForPositionResultBuilder,
) -> crate::types::builders::SearchForPositionResultBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::PlaceBuilder::default();
            Some(crate::serde_util::place_correct_errors(builder).build())
        }
    }
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    builder
}

pub(crate) fn search_for_suggestions_result_correct_errors(
    mut builder: crate::types::builders::SearchForSuggestionsResultBuilder,
) -> crate::types::builders::SearchForSuggestionsResultBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn search_for_text_result_correct_errors(
    mut builder: crate::types::builders::SearchForTextResultBuilder,
) -> crate::types::builders::SearchForTextResultBuilder {
    if builder.place.is_none() {
        builder.place = {
            let builder = crate::types::builders::PlaceBuilder::default();
            Some(crate::serde_util::place_correct_errors(builder).build())
        }
    }
    builder
}

pub(crate) fn time_zone_correct_errors(mut builder: crate::types::builders::TimeZoneBuilder) -> crate::types::builders::TimeZoneBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn route_matrix_entry_error_correct_errors(
    mut builder: crate::types::builders::RouteMatrixEntryErrorBuilder,
) -> crate::types::builders::RouteMatrixEntryErrorBuilder {
    if builder.code.is_none() {
        builder.code = "no value was set".parse::<crate::types::RouteMatrixErrorCode>().ok()
    }
    builder
}

pub(crate) fn step_correct_errors(mut builder: crate::types::builders::StepBuilder) -> crate::types::builders::StepBuilder {
    if builder.start_position.is_none() {
        builder.start_position = Some(Default::default())
    }
    if builder.end_position.is_none() {
        builder.end_position = Some(Default::default())
    }
    if builder.distance.is_none() {
        builder.distance = Some(Default::default())
    }
    if builder.duration_seconds.is_none() {
        builder.duration_seconds = Some(Default::default())
    }
    builder
}
