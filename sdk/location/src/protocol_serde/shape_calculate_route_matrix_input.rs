// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_calculate_route_matrix_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::calculate_route_matrix::CalculateRouteMatrixInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.car_mode_options {
        #[allow(unused_mut)]
        let mut object_2 = object.key("CarModeOptions").start_object();
        crate::protocol_serde::shape_calculate_route_car_mode_options::ser_calculate_route_car_mode_options(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.depart_now {
        object.key("DepartNow").boolean(*var_3);
    }
    if let Some(var_4) = &input.departure_positions {
        let mut array_5 = object.key("DeparturePositions").start_array();
        for item_6 in var_4 {
            {
                let mut array_7 = array_5.value().start_array();
                for item_8 in item_6 {
                    {
                        array_7.value().number(
                            #[allow(clippy::useless_conversion)]
                            aws_smithy_types::Number::Float((*item_8).into()),
                        );
                    }
                }
                array_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_9) = &input.departure_time {
        object
            .key("DepartureTime")
            .date_time(var_9, aws_smithy_types::date_time::Format::DateTime)?;
    }
    if let Some(var_10) = &input.destination_positions {
        let mut array_11 = object.key("DestinationPositions").start_array();
        for item_12 in var_10 {
            {
                let mut array_13 = array_11.value().start_array();
                for item_14 in item_12 {
                    {
                        array_13.value().number(
                            #[allow(clippy::useless_conversion)]
                            aws_smithy_types::Number::Float((*item_14).into()),
                        );
                    }
                }
                array_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_15) = &input.distance_unit {
        object.key("DistanceUnit").string(var_15.as_str());
    }
    if let Some(var_16) = &input.travel_mode {
        object.key("TravelMode").string(var_16.as_str());
    }
    if let Some(var_17) = &input.truck_mode_options {
        #[allow(unused_mut)]
        let mut object_18 = object.key("TruckModeOptions").start_object();
        crate::protocol_serde::shape_calculate_route_truck_mode_options::ser_calculate_route_truck_mode_options(&mut object_18, var_17)?;
        object_18.finish();
    }
    Ok(())
}
