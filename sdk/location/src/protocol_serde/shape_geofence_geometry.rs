// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_geofence_geometry<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::GeofenceGeometry>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::GeofenceGeometryBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "Polygon" => {
                            builder = builder.set_polygon(crate::protocol_serde::shape_linear_rings::de_linear_rings(tokens)?);
                        }
                        "Circle" => {
                            builder = builder.set_circle(crate::protocol_serde::shape_circle::de_circle(tokens)?);
                        }
                        "Geobuf" => {
                            builder = builder.set_geobuf(::aws_smithy_json::deserialize::token::expect_blob_or_null(tokens.next())?);
                        }
                        "MultiPolygon" => {
                            builder = builder.set_multi_polygon(crate::protocol_serde::shape_multi_linear_rings::de_multi_linear_rings(tokens)?);
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_geofence_geometry(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::GeofenceGeometry,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.polygon {
        let mut array_2 = object.key("Polygon").start_array();
        for item_3 in var_1 {
            {
                let mut array_4 = array_2.value().start_array();
                for item_5 in item_3 {
                    {
                        let mut array_6 = array_4.value().start_array();
                        for item_7 in item_5 {
                            {
                                array_6.value().number(
                                    #[allow(clippy::useless_conversion)]
                                    ::aws_smithy_types::Number::Float((*item_7).into()),
                                );
                            }
                        }
                        array_6.finish();
                    }
                }
                array_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_8) = &input.circle {
        #[allow(unused_mut)]
        let mut object_9 = object.key("Circle").start_object();
        crate::protocol_serde::shape_circle::ser_circle(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.geobuf {
        object.key("Geobuf").string_unchecked(&::aws_smithy_types::base64::encode(var_10));
    }
    if let Some(var_11) = &input.multi_polygon {
        let mut array_12 = object.key("MultiPolygon").start_array();
        for item_13 in var_11 {
            {
                let mut array_14 = array_12.value().start_array();
                for item_15 in item_13 {
                    {
                        let mut array_16 = array_14.value().start_array();
                        for item_17 in item_15 {
                            {
                                let mut array_18 = array_16.value().start_array();
                                for item_19 in item_17 {
                                    {
                                        array_18.value().number(
                                            #[allow(clippy::useless_conversion)]
                                            ::aws_smithy_types::Number::Float((*item_19).into()),
                                        );
                                    }
                                }
                                array_18.finish();
                            }
                        }
                        array_16.finish();
                    }
                }
                array_14.finish();
            }
        }
        array_12.finish();
    }
    Ok(())
}
