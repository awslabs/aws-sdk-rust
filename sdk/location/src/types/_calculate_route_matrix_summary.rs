// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the calculated route matrix.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CalculateRouteMatrixSummary {
    /// <p>The data provider of traffic and road network data used to calculate the routes. Indicates one of the available providers:</p>
    /// <ul>
    /// <li> <p> <code>Esri</code> </p> </li>
    /// <li> <p> <code>Grab</code> </p> </li>
    /// <li> <p> <code>Here</code> </p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    #[doc(hidden)]
    pub data_source: std::option::Option<std::string::String>,
    /// <p>The count of cells in the route matrix. Equal to the number of <code>DeparturePositions</code> multiplied by the number of <code>DestinationPositions</code>.</p>
    #[doc(hidden)]
    pub route_count: std::option::Option<i32>,
    /// <p>The count of error results in the route matrix. If this number is 0, all routes were calculated successfully.</p>
    #[doc(hidden)]
    pub error_count: std::option::Option<i32>,
    /// <p>The unit of measurement for route distances.</p>
    #[doc(hidden)]
    pub distance_unit: std::option::Option<crate::types::DistanceUnit>,
}
impl CalculateRouteMatrixSummary {
    /// <p>The data provider of traffic and road network data used to calculate the routes. Indicates one of the available providers:</p>
    /// <ul>
    /// <li> <p> <code>Esri</code> </p> </li>
    /// <li> <p> <code>Grab</code> </p> </li>
    /// <li> <p> <code>Here</code> </p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn data_source(&self) -> std::option::Option<&str> {
        self.data_source.as_deref()
    }
    /// <p>The count of cells in the route matrix. Equal to the number of <code>DeparturePositions</code> multiplied by the number of <code>DestinationPositions</code>.</p>
    pub fn route_count(&self) -> std::option::Option<i32> {
        self.route_count
    }
    /// <p>The count of error results in the route matrix. If this number is 0, all routes were calculated successfully.</p>
    pub fn error_count(&self) -> std::option::Option<i32> {
        self.error_count
    }
    /// <p>The unit of measurement for route distances.</p>
    pub fn distance_unit(&self) -> std::option::Option<&crate::types::DistanceUnit> {
        self.distance_unit.as_ref()
    }
}
impl CalculateRouteMatrixSummary {
    /// Creates a new builder-style object to manufacture [`CalculateRouteMatrixSummary`](crate::types::CalculateRouteMatrixSummary).
    pub fn builder() -> crate::types::builders::CalculateRouteMatrixSummaryBuilder {
        crate::types::builders::CalculateRouteMatrixSummaryBuilder::default()
    }
}

/// A builder for [`CalculateRouteMatrixSummary`](crate::types::CalculateRouteMatrixSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CalculateRouteMatrixSummaryBuilder {
    pub(crate) data_source: std::option::Option<std::string::String>,
    pub(crate) route_count: std::option::Option<i32>,
    pub(crate) error_count: std::option::Option<i32>,
    pub(crate) distance_unit: std::option::Option<crate::types::DistanceUnit>,
}
impl CalculateRouteMatrixSummaryBuilder {
    /// <p>The data provider of traffic and road network data used to calculate the routes. Indicates one of the available providers:</p>
    /// <ul>
    /// <li> <p> <code>Esri</code> </p> </li>
    /// <li> <p> <code>Grab</code> </p> </li>
    /// <li> <p> <code>Here</code> </p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn data_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_source = Some(input.into());
        self
    }
    /// <p>The data provider of traffic and road network data used to calculate the routes. Indicates one of the available providers:</p>
    /// <ul>
    /// <li> <p> <code>Esri</code> </p> </li>
    /// <li> <p> <code>Grab</code> </p> </li>
    /// <li> <p> <code>Here</code> </p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn set_data_source(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The count of cells in the route matrix. Equal to the number of <code>DeparturePositions</code> multiplied by the number of <code>DestinationPositions</code>.</p>
    pub fn route_count(mut self, input: i32) -> Self {
        self.route_count = Some(input);
        self
    }
    /// <p>The count of cells in the route matrix. Equal to the number of <code>DeparturePositions</code> multiplied by the number of <code>DestinationPositions</code>.</p>
    pub fn set_route_count(mut self, input: std::option::Option<i32>) -> Self {
        self.route_count = input;
        self
    }
    /// <p>The count of error results in the route matrix. If this number is 0, all routes were calculated successfully.</p>
    pub fn error_count(mut self, input: i32) -> Self {
        self.error_count = Some(input);
        self
    }
    /// <p>The count of error results in the route matrix. If this number is 0, all routes were calculated successfully.</p>
    pub fn set_error_count(mut self, input: std::option::Option<i32>) -> Self {
        self.error_count = input;
        self
    }
    /// <p>The unit of measurement for route distances.</p>
    pub fn distance_unit(mut self, input: crate::types::DistanceUnit) -> Self {
        self.distance_unit = Some(input);
        self
    }
    /// <p>The unit of measurement for route distances.</p>
    pub fn set_distance_unit(
        mut self,
        input: std::option::Option<crate::types::DistanceUnit>,
    ) -> Self {
        self.distance_unit = input;
        self
    }
    /// Consumes the builder and constructs a [`CalculateRouteMatrixSummary`](crate::types::CalculateRouteMatrixSummary).
    pub fn build(self) -> crate::types::CalculateRouteMatrixSummary {
        crate::types::CalculateRouteMatrixSummary {
            data_source: self.data_source,
            route_count: self.route_count,
            error_count: self.error_count,
            distance_unit: self.distance_unit,
        }
    }
}
