// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub struct PricingPlan(String);
impl PricingPlan {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        &self.0
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &["MobileAssetManagement", "MobileAssetTracking", "RequestBasedUsage"]
    }
}
impl ::std::str::FromStr for PricingPlan {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(PricingPlan::from(s))
    }
}
impl<T> ::std::convert::From<T> for PricingPlan
where
    T: ::std::convert::AsRef<str>,
{
    fn from(s: T) -> Self {
        PricingPlan(s.as_ref().to_owned())
    }
}
