// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the geometry details for each path between a pair of positions. Used in plotting a route leg on a map.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LegGeometry {
    /// <p>An ordered list of positions used to plot a route on a map. </p>
    /// <p>The first position is closest to the start position for the leg, and the last position is the closest to the end position for the leg.</p>
    /// <ul>
    /// <li> <p>For example, <code>[[-123.117, 49.284],[-123.115, 49.285],[-123.115, 49.285]]</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub line_string: std::option::Option<std::vec::Vec<std::vec::Vec<f64>>>,
}
impl LegGeometry {
    /// <p>An ordered list of positions used to plot a route on a map. </p>
    /// <p>The first position is closest to the start position for the leg, and the last position is the closest to the end position for the leg.</p>
    /// <ul>
    /// <li> <p>For example, <code>[[-123.117, 49.284],[-123.115, 49.285],[-123.115, 49.285]]</code> </p> </li>
    /// </ul>
    pub fn line_string(&self) -> std::option::Option<&[std::vec::Vec<f64>]> {
        self.line_string.as_deref()
    }
}
impl LegGeometry {
    /// Creates a new builder-style object to manufacture [`LegGeometry`](crate::types::LegGeometry).
    pub fn builder() -> crate::types::builders::LegGeometryBuilder {
        crate::types::builders::LegGeometryBuilder::default()
    }
}

/// A builder for [`LegGeometry`](crate::types::LegGeometry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LegGeometryBuilder {
    pub(crate) line_string: std::option::Option<std::vec::Vec<std::vec::Vec<f64>>>,
}
impl LegGeometryBuilder {
    /// Appends an item to `line_string`.
    ///
    /// To override the contents of this collection use [`set_line_string`](Self::set_line_string).
    ///
    /// <p>An ordered list of positions used to plot a route on a map. </p>
    /// <p>The first position is closest to the start position for the leg, and the last position is the closest to the end position for the leg.</p>
    /// <ul>
    /// <li> <p>For example, <code>[[-123.117, 49.284],[-123.115, 49.285],[-123.115, 49.285]]</code> </p> </li>
    /// </ul>
    pub fn line_string(mut self, input: std::vec::Vec<f64>) -> Self {
        let mut v = self.line_string.unwrap_or_default();
        v.push(input);
        self.line_string = Some(v);
        self
    }
    /// <p>An ordered list of positions used to plot a route on a map. </p>
    /// <p>The first position is closest to the start position for the leg, and the last position is the closest to the end position for the leg.</p>
    /// <ul>
    /// <li> <p>For example, <code>[[-123.117, 49.284],[-123.115, 49.285],[-123.115, 49.285]]</code> </p> </li>
    /// </ul>
    pub fn set_line_string(
        mut self,
        input: std::option::Option<std::vec::Vec<std::vec::Vec<f64>>>,
    ) -> Self {
        self.line_string = input;
        self
    }
    /// Consumes the builder and constructs a [`LegGeometry`](crate::types::LegGeometry).
    pub fn build(self) -> crate::types::LegGeometry {
        crate::types::LegGeometry {
            line_string: self.line_string,
        }
    }
}
