// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Places uses a point geometry to specify a location or a Place.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct PlaceGeometry {
    /// <p>A single point geometry specifies a location for a Place using <a href="https://gisgeography.com/wgs84-world-geodetic-system/">WGS 84</a> coordinates:</p>
    /// <ul>
    /// <li> <p> <i>x</i> — Specifies the x coordinate or longitude. </p> </li>
    /// <li> <p> <i>y</i> — Specifies the y coordinate or latitude. </p> </li>
    /// </ul>
    pub point: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl PlaceGeometry {
    /// <p>A single point geometry specifies a location for a Place using <a href="https://gisgeography.com/wgs84-world-geodetic-system/">WGS 84</a> coordinates:</p>
    /// <ul>
    /// <li> <p> <i>x</i> — Specifies the x coordinate or longitude. </p> </li>
    /// <li> <p> <i>y</i> — Specifies the y coordinate or latitude. </p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.point.is_none()`.
    pub fn point(&self) -> &[f64] {
        self.point.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for PlaceGeometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PlaceGeometry");
        formatter.field("point", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl PlaceGeometry {
    /// Creates a new builder-style object to manufacture [`PlaceGeometry`](crate::types::PlaceGeometry).
    pub fn builder() -> crate::types::builders::PlaceGeometryBuilder {
        crate::types::builders::PlaceGeometryBuilder::default()
    }
}

/// A builder for [`PlaceGeometry`](crate::types::PlaceGeometry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct PlaceGeometryBuilder {
    pub(crate) point: ::std::option::Option<::std::vec::Vec<f64>>,
}
impl PlaceGeometryBuilder {
    /// Appends an item to `point`.
    ///
    /// To override the contents of this collection use [`set_point`](Self::set_point).
    ///
    /// <p>A single point geometry specifies a location for a Place using <a href="https://gisgeography.com/wgs84-world-geodetic-system/">WGS 84</a> coordinates:</p>
    /// <ul>
    /// <li> <p> <i>x</i> — Specifies the x coordinate or longitude. </p> </li>
    /// <li> <p> <i>y</i> — Specifies the y coordinate or latitude. </p> </li>
    /// </ul>
    pub fn point(mut self, input: f64) -> Self {
        let mut v = self.point.unwrap_or_default();
        v.push(input);
        self.point = ::std::option::Option::Some(v);
        self
    }
    /// <p>A single point geometry specifies a location for a Place using <a href="https://gisgeography.com/wgs84-world-geodetic-system/">WGS 84</a> coordinates:</p>
    /// <ul>
    /// <li> <p> <i>x</i> — Specifies the x coordinate or longitude. </p> </li>
    /// <li> <p> <i>y</i> — Specifies the y coordinate or latitude. </p> </li>
    /// </ul>
    pub fn set_point(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.point = input;
        self
    }
    /// <p>A single point geometry specifies a location for a Place using <a href="https://gisgeography.com/wgs84-world-geodetic-system/">WGS 84</a> coordinates:</p>
    /// <ul>
    /// <li> <p> <i>x</i> — Specifies the x coordinate or longitude. </p> </li>
    /// <li> <p> <i>y</i> — Specifies the y coordinate or latitude. </p> </li>
    /// </ul>
    pub fn get_point(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.point
    }
    /// Consumes the builder and constructs a [`PlaceGeometry`](crate::types::PlaceGeometry).
    pub fn build(self) -> crate::types::PlaceGeometry {
        crate::types::PlaceGeometry { point: self.point }
    }
}
impl ::std::fmt::Debug for PlaceGeometryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("PlaceGeometryBuilder");
        formatter.field("point", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
