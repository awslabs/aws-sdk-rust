// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Unique identifying information for an Android app. Consists of a package name and a 20 byte SHA-1 certificate fingerprint.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AndroidApp {
    /// <p>Unique package name for an Android app.</p>
    pub package: ::std::string::String,
    /// <p>20 byte SHA-1 certificate fingerprint associated with the Android app signing certificate.</p>
    pub certificate_fingerprint: ::std::string::String,
}
impl AndroidApp {
    /// <p>Unique package name for an Android app.</p>
    pub fn package(&self) -> &str {
        use std::ops::Deref;
        self.package.deref()
    }
    /// <p>20 byte SHA-1 certificate fingerprint associated with the Android app signing certificate.</p>
    pub fn certificate_fingerprint(&self) -> &str {
        use std::ops::Deref;
        self.certificate_fingerprint.deref()
    }
}
impl AndroidApp {
    /// Creates a new builder-style object to manufacture [`AndroidApp`](crate::types::AndroidApp).
    pub fn builder() -> crate::types::builders::AndroidAppBuilder {
        crate::types::builders::AndroidAppBuilder::default()
    }
}

/// A builder for [`AndroidApp`](crate::types::AndroidApp).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct AndroidAppBuilder {
    pub(crate) package: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_fingerprint: ::std::option::Option<::std::string::String>,
}
impl AndroidAppBuilder {
    /// <p>Unique package name for an Android app.</p>
    /// This field is required.
    pub fn package(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Unique package name for an Android app.</p>
    pub fn set_package(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package = input;
        self
    }
    /// <p>Unique package name for an Android app.</p>
    pub fn get_package(&self) -> &::std::option::Option<::std::string::String> {
        &self.package
    }
    /// <p>20 byte SHA-1 certificate fingerprint associated with the Android app signing certificate.</p>
    /// This field is required.
    pub fn certificate_fingerprint(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.certificate_fingerprint = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>20 byte SHA-1 certificate fingerprint associated with the Android app signing certificate.</p>
    pub fn set_certificate_fingerprint(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.certificate_fingerprint = input;
        self
    }
    /// <p>20 byte SHA-1 certificate fingerprint associated with the Android app signing certificate.</p>
    pub fn get_certificate_fingerprint(&self) -> &::std::option::Option<::std::string::String> {
        &self.certificate_fingerprint
    }
    /// Consumes the builder and constructs a [`AndroidApp`](crate::types::AndroidApp).
    /// This method will fail if any of the following fields are not set:
    /// - [`package`](crate::types::builders::AndroidAppBuilder::package)
    /// - [`certificate_fingerprint`](crate::types::builders::AndroidAppBuilder::certificate_fingerprint)
    pub fn build(self) -> ::std::result::Result<crate::types::AndroidApp, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AndroidApp {
            package: self.package.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "package",
                    "package was not specified but it is required when building AndroidApp",
                )
            })?,
            certificate_fingerprint: self.certificate_fingerprint.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "certificate_fingerprint",
                    "certificate_fingerprint was not specified but it is required when building AndroidApp",
                )
            })?,
        })
    }
}
