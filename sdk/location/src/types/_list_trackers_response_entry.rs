// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the tracker resource details.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTrackersResponseEntry {
    /// <p>The name of the tracker resource.</p>
    #[doc(hidden)]
    pub tracker_name: std::option::Option<std::string::String>,
    /// <p>The description for the tracker resource.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Always returns <code>RequestBasedUsage</code>.</p>
    #[deprecated(
        note = "Deprecated. Always returns RequestBasedUsage.",
        since = "2022-02-01"
    )]
    #[doc(hidden)]
    pub pricing_plan: std::option::Option<crate::types::PricingPlan>,
    /// <p>No longer used. Always returns an empty string.</p>
    #[deprecated(note = "Deprecated. Unused.", since = "2022-02-01")]
    #[doc(hidden)]
    pub pricing_plan_data_source: std::option::Option<std::string::String>,
    /// <p>The timestamp for when the tracker resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListTrackersResponseEntry {
    /// <p>The name of the tracker resource.</p>
    pub fn tracker_name(&self) -> std::option::Option<&str> {
        self.tracker_name.as_deref()
    }
    /// <p>The description for the tracker resource.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Always returns <code>RequestBasedUsage</code>.</p>
    #[deprecated(
        note = "Deprecated. Always returns RequestBasedUsage.",
        since = "2022-02-01"
    )]
    pub fn pricing_plan(&self) -> std::option::Option<&crate::types::PricingPlan> {
        self.pricing_plan.as_ref()
    }
    /// <p>No longer used. Always returns an empty string.</p>
    #[deprecated(note = "Deprecated. Unused.", since = "2022-02-01")]
    pub fn pricing_plan_data_source(&self) -> std::option::Option<&str> {
        self.pricing_plan_data_source.as_deref()
    }
    /// <p>The timestamp for when the tracker resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
}
impl ListTrackersResponseEntry {
    /// Creates a new builder-style object to manufacture [`ListTrackersResponseEntry`](crate::types::ListTrackersResponseEntry).
    pub fn builder() -> crate::types::builders::ListTrackersResponseEntryBuilder {
        crate::types::builders::ListTrackersResponseEntryBuilder::default()
    }
}

/// A builder for [`ListTrackersResponseEntry`](crate::types::ListTrackersResponseEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListTrackersResponseEntryBuilder {
    pub(crate) tracker_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) pricing_plan: std::option::Option<crate::types::PricingPlan>,
    pub(crate) pricing_plan_data_source: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListTrackersResponseEntryBuilder {
    /// <p>The name of the tracker resource.</p>
    pub fn tracker_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.tracker_name = Some(input.into());
        self
    }
    /// <p>The name of the tracker resource.</p>
    pub fn set_tracker_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tracker_name = input;
        self
    }
    /// <p>The description for the tracker resource.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description for the tracker resource.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Always returns <code>RequestBasedUsage</code>.</p>
    #[deprecated(
        note = "Deprecated. Always returns RequestBasedUsage.",
        since = "2022-02-01"
    )]
    pub fn pricing_plan(mut self, input: crate::types::PricingPlan) -> Self {
        self.pricing_plan = Some(input);
        self
    }
    /// <p>Always returns <code>RequestBasedUsage</code>.</p>
    #[deprecated(
        note = "Deprecated. Always returns RequestBasedUsage.",
        since = "2022-02-01"
    )]
    pub fn set_pricing_plan(
        mut self,
        input: std::option::Option<crate::types::PricingPlan>,
    ) -> Self {
        self.pricing_plan = input;
        self
    }
    /// <p>No longer used. Always returns an empty string.</p>
    #[deprecated(note = "Deprecated. Unused.", since = "2022-02-01")]
    pub fn pricing_plan_data_source(mut self, input: impl Into<std::string::String>) -> Self {
        self.pricing_plan_data_source = Some(input.into());
        self
    }
    /// <p>No longer used. Always returns an empty string.</p>
    #[deprecated(note = "Deprecated. Unused.", since = "2022-02-01")]
    pub fn set_pricing_plan_data_source(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.pricing_plan_data_source = input;
        self
    }
    /// <p>The timestamp for when the tracker resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The timestamp for when the tracker resource was created in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_time = Some(input);
        self
    }
    /// <p>The timestamp at which the device's position was determined. Uses <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>. </p>
    pub fn set_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ListTrackersResponseEntry`](crate::types::ListTrackersResponseEntry).
    pub fn build(self) -> crate::types::ListTrackersResponseEntry {
        crate::types::ListTrackersResponseEntry {
            tracker_name: self.tracker_name,
            description: self.description,
            pricing_plan: self.pricing_plan,
            pricing_plan_data_source: self.pricing_plan_data_source,
            create_time: self.create_time,
            update_time: self.update_time,
        }
    }
}
