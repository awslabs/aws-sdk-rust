// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An API key resource listed in your Amazon Web Services account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListKeysResponseEntry {
    /// <p>The name of the API key resource.</p>
    pub key_name: ::std::string::String,
    /// <p>The timestamp for when the API key resource will expire, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub expire_time: ::aws_smithy_types::DateTime,
    /// <p>The optional description for the API key resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>API Restrictions on the allowed actions, resources, and referers for an API key resource.</p>
    pub restrictions: ::std::option::Option<crate::types::ApiKeyRestrictions>,
    /// <p>The timestamp of when the API key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub create_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of when the API key was last updated, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub update_time: ::aws_smithy_types::DateTime,
}
impl ListKeysResponseEntry {
    /// <p>The name of the API key resource.</p>
    pub fn key_name(&self) -> &str {
        use std::ops::Deref;
        self.key_name.deref()
    }
    /// <p>The timestamp for when the API key resource will expire, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn expire_time(&self) -> &::aws_smithy_types::DateTime {
        &self.expire_time
    }
    /// <p>The optional description for the API key resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>API Restrictions on the allowed actions, resources, and referers for an API key resource.</p>
    pub fn restrictions(&self) -> ::std::option::Option<&crate::types::ApiKeyRestrictions> {
        self.restrictions.as_ref()
    }
    /// <p>The timestamp of when the API key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn create_time(&self) -> &::aws_smithy_types::DateTime {
        &self.create_time
    }
    /// <p>The timestamp of when the API key was last updated, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn update_time(&self) -> &::aws_smithy_types::DateTime {
        &self.update_time
    }
}
impl ListKeysResponseEntry {
    /// Creates a new builder-style object to manufacture [`ListKeysResponseEntry`](crate::types::ListKeysResponseEntry).
    pub fn builder() -> crate::types::builders::ListKeysResponseEntryBuilder {
        crate::types::builders::ListKeysResponseEntryBuilder::default()
    }
}

/// A builder for [`ListKeysResponseEntry`](crate::types::ListKeysResponseEntry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListKeysResponseEntryBuilder {
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) expire_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) restrictions: ::std::option::Option<crate::types::ApiKeyRestrictions>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ListKeysResponseEntryBuilder {
    /// <p>The name of the API key resource.</p>
    /// This field is required.
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the API key resource.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The name of the API key resource.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The timestamp for when the API key resource will expire, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    /// This field is required.
    pub fn expire_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.expire_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the API key resource will expire, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn set_expire_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.expire_time = input;
        self
    }
    /// <p>The timestamp for when the API key resource will expire, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn get_expire_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.expire_time
    }
    /// <p>The optional description for the API key resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The optional description for the API key resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The optional description for the API key resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>API Restrictions on the allowed actions, resources, and referers for an API key resource.</p>
    /// This field is required.
    pub fn restrictions(mut self, input: crate::types::ApiKeyRestrictions) -> Self {
        self.restrictions = ::std::option::Option::Some(input);
        self
    }
    /// <p>API Restrictions on the allowed actions, resources, and referers for an API key resource.</p>
    pub fn set_restrictions(mut self, input: ::std::option::Option<crate::types::ApiKeyRestrictions>) -> Self {
        self.restrictions = input;
        self
    }
    /// <p>API Restrictions on the allowed actions, resources, and referers for an API key resource.</p>
    pub fn get_restrictions(&self) -> &::std::option::Option<crate::types::ApiKeyRestrictions> {
        &self.restrictions
    }
    /// <p>The timestamp of when the API key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    /// This field is required.
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the API key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The timestamp of when the API key was created, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The timestamp of when the API key was last updated, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    /// This field is required.
    pub fn update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of when the API key was last updated, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn set_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.update_time = input;
        self
    }
    /// <p>The timestamp of when the API key was last updated, in <a href="https://www.iso.org/iso-8601-date-and-time-format.html"> ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code>.</p>
    pub fn get_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.update_time
    }
    /// Consumes the builder and constructs a [`ListKeysResponseEntry`](crate::types::ListKeysResponseEntry).
    /// This method will fail if any of the following fields are not set:
    /// - [`key_name`](crate::types::builders::ListKeysResponseEntryBuilder::key_name)
    /// - [`expire_time`](crate::types::builders::ListKeysResponseEntryBuilder::expire_time)
    /// - [`create_time`](crate::types::builders::ListKeysResponseEntryBuilder::create_time)
    /// - [`update_time`](crate::types::builders::ListKeysResponseEntryBuilder::update_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ListKeysResponseEntry, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ListKeysResponseEntry {
            key_name: self.key_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key_name",
                    "key_name was not specified but it is required when building ListKeysResponseEntry",
                )
            })?,
            expire_time: self.expire_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expire_time",
                    "expire_time was not specified but it is required when building ListKeysResponseEntry",
                )
            })?,
            description: self.description,
            restrictions: self.restrictions,
            create_time: self.create_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "create_time",
                    "create_time was not specified but it is required when building ListKeysResponseEntry",
                )
            })?,
            update_time: self.update_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "update_time",
                    "update_time was not specified but it is required when building ListKeysResponseEntry",
                )
            })?,
        })
    }
}
