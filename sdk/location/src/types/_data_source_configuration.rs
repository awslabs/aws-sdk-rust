// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies the data storage option chosen for requesting Places.</p> <important>
/// <p>When using Amazon Location Places:</p>
/// <ul>
/// <li> <p>If using HERE Technologies as a data provider, you can't store results for locations in Japan by setting <code>IntendedUse</code> to <code>Storage</code>. parameter.</p> </li>
/// <li> <p>Under the <code>MobileAssetTracking</code> or <code>MobilAssetManagement</code> pricing plan, you can't store results from your place index resources by setting <code>IntendedUse</code> to <code>Storage</code>. This returns a validation exception error.</p> </li>
/// </ul>
/// <p>For more information, see the <a href="https://aws.amazon.com/service-terms/">AWS Service Terms</a> for Amazon Location Service.</p>
/// </important>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataSourceConfiguration {
    /// <p>Specifies how the results of an operation will be stored by the caller. </p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>SingleUse</code> specifies that the results won't be stored. </p> </li>
    /// <li> <p> <code>Storage</code> specifies that the result can be cached or stored in a database.</p> </li>
    /// </ul>
    /// <p>Default value: <code>SingleUse</code> </p>
    #[doc(hidden)]
    pub intended_use: std::option::Option<crate::types::IntendedUse>,
}
impl DataSourceConfiguration {
    /// <p>Specifies how the results of an operation will be stored by the caller. </p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>SingleUse</code> specifies that the results won't be stored. </p> </li>
    /// <li> <p> <code>Storage</code> specifies that the result can be cached or stored in a database.</p> </li>
    /// </ul>
    /// <p>Default value: <code>SingleUse</code> </p>
    pub fn intended_use(&self) -> std::option::Option<&crate::types::IntendedUse> {
        self.intended_use.as_ref()
    }
}
impl DataSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`DataSourceConfiguration`](crate::types::DataSourceConfiguration).
    pub fn builder() -> crate::types::builders::DataSourceConfigurationBuilder {
        crate::types::builders::DataSourceConfigurationBuilder::default()
    }
}

/// A builder for [`DataSourceConfiguration`](crate::types::DataSourceConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataSourceConfigurationBuilder {
    pub(crate) intended_use: std::option::Option<crate::types::IntendedUse>,
}
impl DataSourceConfigurationBuilder {
    /// <p>Specifies how the results of an operation will be stored by the caller. </p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>SingleUse</code> specifies that the results won't be stored. </p> </li>
    /// <li> <p> <code>Storage</code> specifies that the result can be cached or stored in a database.</p> </li>
    /// </ul>
    /// <p>Default value: <code>SingleUse</code> </p>
    pub fn intended_use(mut self, input: crate::types::IntendedUse) -> Self {
        self.intended_use = Some(input);
        self
    }
    /// <p>Specifies how the results of an operation will be stored by the caller. </p>
    /// <p>Valid values include:</p>
    /// <ul>
    /// <li> <p> <code>SingleUse</code> specifies that the results won't be stored. </p> </li>
    /// <li> <p> <code>Storage</code> specifies that the result can be cached or stored in a database.</p> </li>
    /// </ul>
    /// <p>Default value: <code>SingleUse</code> </p>
    pub fn set_intended_use(
        mut self,
        input: std::option::Option<crate::types::IntendedUse>,
    ) -> Self {
        self.intended_use = input;
        self
    }
    /// Consumes the builder and constructs a [`DataSourceConfiguration`](crate::types::DataSourceConfiguration).
    pub fn build(self) -> crate::types::DataSourceConfiguration {
        crate::types::DataSourceConfiguration {
            intended_use: self.intended_use,
        }
    }
}
