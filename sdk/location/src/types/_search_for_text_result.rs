// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a search result from a text search query that is run on a place index resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchForTextResult {
    /// <p>Details about the search result, such as its address and position.</p>
    pub place: ::std::option::Option<crate::types::Place>,
    /// <p>The distance in meters of a great-circle arc between the bias position specified and the result. <code>Distance</code> will be returned only if a bias position was specified in the query.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub distance: ::std::option::Option<f64>,
    /// <p>The relative confidence in the match for a result among the results returned. For example, if more fields for an address match (including house number, street, city, country/region, and postal code), the relevance score is closer to 1.</p>
    /// <p>Returned only when the partner selected is Esri or Grab.</p>
    pub relevance: ::std::option::Option<f64>,
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForText</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub place_id: ::std::option::Option<::std::string::String>,
}
impl SearchForTextResult {
    /// <p>Details about the search result, such as its address and position.</p>
    pub fn place(&self) -> ::std::option::Option<&crate::types::Place> {
        self.place.as_ref()
    }
    /// <p>The distance in meters of a great-circle arc between the bias position specified and the result. <code>Distance</code> will be returned only if a bias position was specified in the query.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub fn distance(&self) -> ::std::option::Option<f64> {
        self.distance
    }
    /// <p>The relative confidence in the match for a result among the results returned. For example, if more fields for an address match (including house number, street, city, country/region, and postal code), the relevance score is closer to 1.</p>
    /// <p>Returned only when the partner selected is Esri or Grab.</p>
    pub fn relevance(&self) -> ::std::option::Option<f64> {
        self.relevance
    }
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForText</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub fn place_id(&self) -> ::std::option::Option<&str> {
        self.place_id.as_deref()
    }
}
impl SearchForTextResult {
    /// Creates a new builder-style object to manufacture [`SearchForTextResult`](crate::types::SearchForTextResult).
    pub fn builder() -> crate::types::builders::SearchForTextResultBuilder {
        crate::types::builders::SearchForTextResultBuilder::default()
    }
}

/// A builder for [`SearchForTextResult`](crate::types::SearchForTextResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchForTextResultBuilder {
    pub(crate) place: ::std::option::Option<crate::types::Place>,
    pub(crate) distance: ::std::option::Option<f64>,
    pub(crate) relevance: ::std::option::Option<f64>,
    pub(crate) place_id: ::std::option::Option<::std::string::String>,
}
impl SearchForTextResultBuilder {
    /// <p>Details about the search result, such as its address and position.</p>
    /// This field is required.
    pub fn place(mut self, input: crate::types::Place) -> Self {
        self.place = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the search result, such as its address and position.</p>
    pub fn set_place(mut self, input: ::std::option::Option<crate::types::Place>) -> Self {
        self.place = input;
        self
    }
    /// <p>Details about the search result, such as its address and position.</p>
    pub fn get_place(&self) -> &::std::option::Option<crate::types::Place> {
        &self.place
    }
    /// <p>The distance in meters of a great-circle arc between the bias position specified and the result. <code>Distance</code> will be returned only if a bias position was specified in the query.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub fn distance(mut self, input: f64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance in meters of a great-circle arc between the bias position specified and the result. <code>Distance</code> will be returned only if a bias position was specified in the query.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub fn set_distance(mut self, input: ::std::option::Option<f64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>The distance in meters of a great-circle arc between the bias position specified and the result. <code>Distance</code> will be returned only if a bias position was specified in the query.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub fn get_distance(&self) -> &::std::option::Option<f64> {
        &self.distance
    }
    /// <p>The relative confidence in the match for a result among the results returned. For example, if more fields for an address match (including house number, street, city, country/region, and postal code), the relevance score is closer to 1.</p>
    /// <p>Returned only when the partner selected is Esri or Grab.</p>
    pub fn relevance(mut self, input: f64) -> Self {
        self.relevance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The relative confidence in the match for a result among the results returned. For example, if more fields for an address match (including house number, street, city, country/region, and postal code), the relevance score is closer to 1.</p>
    /// <p>Returned only when the partner selected is Esri or Grab.</p>
    pub fn set_relevance(mut self, input: ::std::option::Option<f64>) -> Self {
        self.relevance = input;
        self
    }
    /// <p>The relative confidence in the match for a result among the results returned. For example, if more fields for an address match (including house number, street, city, country/region, and postal code), the relevance score is closer to 1.</p>
    /// <p>Returned only when the partner selected is Esri or Grab.</p>
    pub fn get_relevance(&self) -> &::std::option::Option<f64> {
        &self.relevance
    }
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForText</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub fn place_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.place_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForText</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub fn set_place_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.place_id = input;
        self
    }
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForText</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub fn get_place_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.place_id
    }
    /// Consumes the builder and constructs a [`SearchForTextResult`](crate::types::SearchForTextResult).
    pub fn build(self) -> crate::types::SearchForTextResult {
        crate::types::SearchForTextResult {
            place: self.place,
            distance: self.distance,
            relevance: self.relevance,
            place_id: self.place_id,
        }
    }
}
