// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the geofence geometry details.</p>
/// <p>A geofence geometry is made up of either a polygon or a circle. Can be either a polygon or a circle. Including both will return a validation error.</p> <note>
/// <p>Amazon Location doesn't currently support polygons with holes, multipolygons, polygons that are wound clockwise, or that cross the antimeridian. </p>
/// </note>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GeofenceGeometry {
    /// <p>A polygon is a list of linear rings which are each made up of a list of vertices.</p>
    /// <p>Each vertex is a 2-dimensional point of the form: <code>[longitude, latitude]</code>. This is represented as an array of doubles of length 2 (so <code>[double, double]</code>).</p>
    /// <p>An array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary), is called a linear ring. The linear ring vertices must be listed in counter-clockwise order around the ring’s interior. The linear ring is represented as an array of vertices, or an array of arrays of doubles (<code>[[double, double], ...]</code>).</p>
    /// <p>A geofence consists of a single linear ring. To allow for future expansion, the Polygon parameter takes an array of linear rings, which is represented as an array of arrays of arrays of doubles (<code>[[[double, double], ...], ...]</code>).</p>
    /// <p>A linear ring for use in geofences can consist of between 4 and 1,000 vertices.</p>
    pub polygon: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>,
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub circle: ::std::option::Option<crate::types::Circle>,
}
impl GeofenceGeometry {
    /// <p>A polygon is a list of linear rings which are each made up of a list of vertices.</p>
    /// <p>Each vertex is a 2-dimensional point of the form: <code>[longitude, latitude]</code>. This is represented as an array of doubles of length 2 (so <code>[double, double]</code>).</p>
    /// <p>An array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary), is called a linear ring. The linear ring vertices must be listed in counter-clockwise order around the ring’s interior. The linear ring is represented as an array of vertices, or an array of arrays of doubles (<code>[[double, double], ...]</code>).</p>
    /// <p>A geofence consists of a single linear ring. To allow for future expansion, the Polygon parameter takes an array of linear rings, which is represented as an array of arrays of arrays of doubles (<code>[[[double, double], ...], ...]</code>).</p>
    /// <p>A linear ring for use in geofences can consist of between 4 and 1,000 vertices.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.polygon.is_none()`.
    pub fn polygon(&self) -> &[::std::vec::Vec<::std::vec::Vec<f64>>] {
        self.polygon.as_deref().unwrap_or_default()
    }
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub fn circle(&self) -> ::std::option::Option<&crate::types::Circle> {
        self.circle.as_ref()
    }
}
impl ::std::fmt::Debug for GeofenceGeometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeofenceGeometry");
        formatter.field("polygon", &self.polygon);
        formatter.field("circle", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl GeofenceGeometry {
    /// Creates a new builder-style object to manufacture [`GeofenceGeometry`](crate::types::GeofenceGeometry).
    pub fn builder() -> crate::types::builders::GeofenceGeometryBuilder {
        crate::types::builders::GeofenceGeometryBuilder::default()
    }
}

/// A builder for [`GeofenceGeometry`](crate::types::GeofenceGeometry).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GeofenceGeometryBuilder {
    pub(crate) polygon: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>,
    pub(crate) circle: ::std::option::Option<crate::types::Circle>,
}
impl GeofenceGeometryBuilder {
    /// Appends an item to `polygon`.
    ///
    /// To override the contents of this collection use [`set_polygon`](Self::set_polygon).
    ///
    /// <p>A polygon is a list of linear rings which are each made up of a list of vertices.</p>
    /// <p>Each vertex is a 2-dimensional point of the form: <code>[longitude, latitude]</code>. This is represented as an array of doubles of length 2 (so <code>[double, double]</code>).</p>
    /// <p>An array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary), is called a linear ring. The linear ring vertices must be listed in counter-clockwise order around the ring’s interior. The linear ring is represented as an array of vertices, or an array of arrays of doubles (<code>[[double, double], ...]</code>).</p>
    /// <p>A geofence consists of a single linear ring. To allow for future expansion, the Polygon parameter takes an array of linear rings, which is represented as an array of arrays of arrays of doubles (<code>[[[double, double], ...], ...]</code>).</p>
    /// <p>A linear ring for use in geofences can consist of between 4 and 1,000 vertices.</p>
    pub fn polygon(mut self, input: ::std::vec::Vec<::std::vec::Vec<f64>>) -> Self {
        let mut v = self.polygon.unwrap_or_default();
        v.push(input);
        self.polygon = ::std::option::Option::Some(v);
        self
    }
    /// <p>A polygon is a list of linear rings which are each made up of a list of vertices.</p>
    /// <p>Each vertex is a 2-dimensional point of the form: <code>[longitude, latitude]</code>. This is represented as an array of doubles of length 2 (so <code>[double, double]</code>).</p>
    /// <p>An array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary), is called a linear ring. The linear ring vertices must be listed in counter-clockwise order around the ring’s interior. The linear ring is represented as an array of vertices, or an array of arrays of doubles (<code>[[double, double], ...]</code>).</p>
    /// <p>A geofence consists of a single linear ring. To allow for future expansion, the Polygon parameter takes an array of linear rings, which is represented as an array of arrays of arrays of doubles (<code>[[[double, double], ...], ...]</code>).</p>
    /// <p>A linear ring for use in geofences can consist of between 4 and 1,000 vertices.</p>
    pub fn set_polygon(mut self, input: ::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>>) -> Self {
        self.polygon = input;
        self
    }
    /// <p>A polygon is a list of linear rings which are each made up of a list of vertices.</p>
    /// <p>Each vertex is a 2-dimensional point of the form: <code>[longitude, latitude]</code>. This is represented as an array of doubles of length 2 (so <code>[double, double]</code>).</p>
    /// <p>An array of 4 or more vertices, where the first and last vertex are the same (to form a closed boundary), is called a linear ring. The linear ring vertices must be listed in counter-clockwise order around the ring’s interior. The linear ring is represented as an array of vertices, or an array of arrays of doubles (<code>[[double, double], ...]</code>).</p>
    /// <p>A geofence consists of a single linear ring. To allow for future expansion, the Polygon parameter takes an array of linear rings, which is represented as an array of arrays of arrays of doubles (<code>[[[double, double], ...], ...]</code>).</p>
    /// <p>A linear ring for use in geofences can consist of between 4 and 1,000 vertices.</p>
    pub fn get_polygon(&self) -> &::std::option::Option<::std::vec::Vec<::std::vec::Vec<::std::vec::Vec<f64>>>> {
        &self.polygon
    }
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub fn circle(mut self, input: crate::types::Circle) -> Self {
        self.circle = ::std::option::Option::Some(input);
        self
    }
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub fn set_circle(mut self, input: ::std::option::Option<crate::types::Circle>) -> Self {
        self.circle = input;
        self
    }
    /// <p>A circle on the earth, as defined by a center point and a radius.</p>
    pub fn get_circle(&self) -> &::std::option::Option<crate::types::Circle> {
        &self.circle
    }
    /// Consumes the builder and constructs a [`GeofenceGeometry`](crate::types::GeofenceGeometry).
    pub fn build(self) -> crate::types::GeofenceGeometry {
        crate::types::GeofenceGeometry {
            polygon: self.polygon,
            circle: self.circle,
        }
    }
}
impl ::std::fmt::Debug for GeofenceGeometryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GeofenceGeometryBuilder");
        formatter.field("polygon", &self.polygon);
        formatter.field("circle", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
