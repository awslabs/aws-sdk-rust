// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about additional route preferences for requests that specify <code>TravelMode</code> as <code>Car</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CalculateRouteCarModeOptions {
    /// <p>Avoids ferries when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub avoid_ferries: ::std::option::Option<bool>,
    /// <p>Avoids tolls when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub avoid_tolls: ::std::option::Option<bool>,
}
impl CalculateRouteCarModeOptions {
    /// <p>Avoids ferries when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub fn avoid_ferries(&self) -> ::std::option::Option<bool> {
        self.avoid_ferries
    }
    /// <p>Avoids tolls when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub fn avoid_tolls(&self) -> ::std::option::Option<bool> {
        self.avoid_tolls
    }
}
impl ::std::fmt::Debug for CalculateRouteCarModeOptions {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculateRouteCarModeOptions");
        formatter.field("avoid_ferries", &"*** Sensitive Data Redacted ***");
        formatter.field("avoid_tolls", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CalculateRouteCarModeOptions {
    /// Creates a new builder-style object to manufacture [`CalculateRouteCarModeOptions`](crate::types::CalculateRouteCarModeOptions).
    pub fn builder() -> crate::types::builders::CalculateRouteCarModeOptionsBuilder {
        crate::types::builders::CalculateRouteCarModeOptionsBuilder::default()
    }
}

/// A builder for [`CalculateRouteCarModeOptions`](crate::types::CalculateRouteCarModeOptions).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct CalculateRouteCarModeOptionsBuilder {
    pub(crate) avoid_ferries: ::std::option::Option<bool>,
    pub(crate) avoid_tolls: ::std::option::Option<bool>,
}
impl CalculateRouteCarModeOptionsBuilder {
    /// <p>Avoids ferries when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub fn avoid_ferries(mut self, input: bool) -> Self {
        self.avoid_ferries = ::std::option::Option::Some(input);
        self
    }
    /// <p>Avoids ferries when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub fn set_avoid_ferries(mut self, input: ::std::option::Option<bool>) -> Self {
        self.avoid_ferries = input;
        self
    }
    /// <p>Avoids ferries when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub fn get_avoid_ferries(&self) -> &::std::option::Option<bool> {
        &self.avoid_ferries
    }
    /// <p>Avoids tolls when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub fn avoid_tolls(mut self, input: bool) -> Self {
        self.avoid_tolls = ::std::option::Option::Some(input);
        self
    }
    /// <p>Avoids tolls when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub fn set_avoid_tolls(mut self, input: ::std::option::Option<bool>) -> Self {
        self.avoid_tolls = input;
        self
    }
    /// <p>Avoids tolls when calculating routes.</p>
    /// <p>Default Value: <code>false</code></p>
    /// <p>Valid Values: <code>false</code> | <code>true</code></p>
    pub fn get_avoid_tolls(&self) -> &::std::option::Option<bool> {
        &self.avoid_tolls
    }
    /// Consumes the builder and constructs a [`CalculateRouteCarModeOptions`](crate::types::CalculateRouteCarModeOptions).
    pub fn build(self) -> crate::types::CalculateRouteCarModeOptions {
        crate::types::CalculateRouteCarModeOptions {
            avoid_ferries: self.avoid_ferries,
            avoid_tolls: self.avoid_tolls,
        }
    }
}
impl ::std::fmt::Debug for CalculateRouteCarModeOptionsBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CalculateRouteCarModeOptionsBuilder");
        formatter.field("avoid_ferries", &"*** Sensitive Data Redacted ***");
        formatter.field("avoid_tolls", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
