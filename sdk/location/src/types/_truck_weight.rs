// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the truck's weight specifications. Used to avoid roads that can't support or allow the total weight for requests that specify <code>TravelMode</code> as <code>Truck</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TruckWeight {
    /// <p>The total weight of the truck. </p>
    /// <ul>
    /// <li> <p>For example, <code>3500</code>.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub total: std::option::Option<f64>,
    /// <p>The unit of measurement to use for the truck weight.</p>
    /// <p>Default Value: <code>Kilograms</code> </p>
    #[doc(hidden)]
    pub unit: std::option::Option<crate::types::VehicleWeightUnit>,
}
impl TruckWeight {
    /// <p>The total weight of the truck. </p>
    /// <ul>
    /// <li> <p>For example, <code>3500</code>.</p> </li>
    /// </ul>
    pub fn total(&self) -> std::option::Option<f64> {
        self.total
    }
    /// <p>The unit of measurement to use for the truck weight.</p>
    /// <p>Default Value: <code>Kilograms</code> </p>
    pub fn unit(&self) -> std::option::Option<&crate::types::VehicleWeightUnit> {
        self.unit.as_ref()
    }
}
impl TruckWeight {
    /// Creates a new builder-style object to manufacture [`TruckWeight`](crate::types::TruckWeight).
    pub fn builder() -> crate::types::builders::TruckWeightBuilder {
        crate::types::builders::TruckWeightBuilder::default()
    }
}

/// A builder for [`TruckWeight`](crate::types::TruckWeight).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TruckWeightBuilder {
    pub(crate) total: std::option::Option<f64>,
    pub(crate) unit: std::option::Option<crate::types::VehicleWeightUnit>,
}
impl TruckWeightBuilder {
    /// <p>The total weight of the truck. </p>
    /// <ul>
    /// <li> <p>For example, <code>3500</code>.</p> </li>
    /// </ul>
    pub fn total(mut self, input: f64) -> Self {
        self.total = Some(input);
        self
    }
    /// <p>The total weight of the truck. </p>
    /// <ul>
    /// <li> <p>For example, <code>3500</code>.</p> </li>
    /// </ul>
    pub fn set_total(mut self, input: std::option::Option<f64>) -> Self {
        self.total = input;
        self
    }
    /// <p>The unit of measurement to use for the truck weight.</p>
    /// <p>Default Value: <code>Kilograms</code> </p>
    pub fn unit(mut self, input: crate::types::VehicleWeightUnit) -> Self {
        self.unit = Some(input);
        self
    }
    /// <p>The unit of measurement to use for the truck weight.</p>
    /// <p>Default Value: <code>Kilograms</code> </p>
    pub fn set_unit(mut self, input: std::option::Option<crate::types::VehicleWeightUnit>) -> Self {
        self.unit = input;
        self
    }
    /// Consumes the builder and constructs a [`TruckWeight`](crate::types::TruckWeight).
    pub fn build(self) -> crate::types::TruckWeight {
        crate::types::TruckWeight {
            total: self.total,
            unit: self.unit,
        }
    }
}
