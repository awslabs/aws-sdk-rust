// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains error details for each geofence that failed to be stored in a given geofence collection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchPutGeofenceError {
    /// <p>The geofence associated with the error message.</p>
    pub geofence_id: ::std::string::String,
    /// <p>Contains details associated to the batch error.</p>
    pub error: ::std::option::Option<crate::types::BatchItemError>,
}
impl BatchPutGeofenceError {
    /// <p>The geofence associated with the error message.</p>
    pub fn geofence_id(&self) -> &str {
        use std::ops::Deref;
        self.geofence_id.deref()
    }
    /// <p>Contains details associated to the batch error.</p>
    pub fn error(&self) -> ::std::option::Option<&crate::types::BatchItemError> {
        self.error.as_ref()
    }
}
impl BatchPutGeofenceError {
    /// Creates a new builder-style object to manufacture [`BatchPutGeofenceError`](crate::types::BatchPutGeofenceError).
    pub fn builder() -> crate::types::builders::BatchPutGeofenceErrorBuilder {
        crate::types::builders::BatchPutGeofenceErrorBuilder::default()
    }
}

/// A builder for [`BatchPutGeofenceError`](crate::types::BatchPutGeofenceError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchPutGeofenceErrorBuilder {
    pub(crate) geofence_id: ::std::option::Option<::std::string::String>,
    pub(crate) error: ::std::option::Option<crate::types::BatchItemError>,
}
impl BatchPutGeofenceErrorBuilder {
    /// <p>The geofence associated with the error message.</p>
    /// This field is required.
    pub fn geofence_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.geofence_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The geofence associated with the error message.</p>
    pub fn set_geofence_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.geofence_id = input;
        self
    }
    /// <p>The geofence associated with the error message.</p>
    pub fn get_geofence_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.geofence_id
    }
    /// <p>Contains details associated to the batch error.</p>
    /// This field is required.
    pub fn error(mut self, input: crate::types::BatchItemError) -> Self {
        self.error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details associated to the batch error.</p>
    pub fn set_error(mut self, input: ::std::option::Option<crate::types::BatchItemError>) -> Self {
        self.error = input;
        self
    }
    /// <p>Contains details associated to the batch error.</p>
    pub fn get_error(&self) -> &::std::option::Option<crate::types::BatchItemError> {
        &self.error
    }
    /// Consumes the builder and constructs a [`BatchPutGeofenceError`](crate::types::BatchPutGeofenceError).
    /// This method will fail if any of the following fields are not set:
    /// - [`geofence_id`](crate::types::builders::BatchPutGeofenceErrorBuilder::geofence_id)
    pub fn build(self) -> ::std::result::Result<crate::types::BatchPutGeofenceError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BatchPutGeofenceError {
            geofence_id: self.geofence_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "geofence_id",
                    "geofence_id was not specified but it is required when building BatchPutGeofenceError",
                )
            })?,
            error: self.error,
        })
    }
}
