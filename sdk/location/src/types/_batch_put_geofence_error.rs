// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains error details for each geofence that failed to be stored in a given geofence collection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchPutGeofenceError {
    /// <p>The geofence associated with the error message.</p>
    #[doc(hidden)]
    pub geofence_id: std::option::Option<std::string::String>,
    /// <p>Contains details associated to the batch error.</p>
    #[doc(hidden)]
    pub error: std::option::Option<crate::types::BatchItemError>,
}
impl BatchPutGeofenceError {
    /// <p>The geofence associated with the error message.</p>
    pub fn geofence_id(&self) -> std::option::Option<&str> {
        self.geofence_id.as_deref()
    }
    /// <p>Contains details associated to the batch error.</p>
    pub fn error(&self) -> std::option::Option<&crate::types::BatchItemError> {
        self.error.as_ref()
    }
}
impl BatchPutGeofenceError {
    /// Creates a new builder-style object to manufacture [`BatchPutGeofenceError`](crate::types::BatchPutGeofenceError).
    pub fn builder() -> crate::types::builders::BatchPutGeofenceErrorBuilder {
        crate::types::builders::BatchPutGeofenceErrorBuilder::default()
    }
}

/// A builder for [`BatchPutGeofenceError`](crate::types::BatchPutGeofenceError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchPutGeofenceErrorBuilder {
    pub(crate) geofence_id: std::option::Option<std::string::String>,
    pub(crate) error: std::option::Option<crate::types::BatchItemError>,
}
impl BatchPutGeofenceErrorBuilder {
    /// <p>The geofence associated with the error message.</p>
    pub fn geofence_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.geofence_id = Some(input.into());
        self
    }
    /// <p>The geofence associated with the error message.</p>
    pub fn set_geofence_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.geofence_id = input;
        self
    }
    /// <p>Contains details associated to the batch error.</p>
    pub fn error(mut self, input: crate::types::BatchItemError) -> Self {
        self.error = Some(input);
        self
    }
    /// <p>Contains details associated to the batch error.</p>
    pub fn set_error(mut self, input: std::option::Option<crate::types::BatchItemError>) -> Self {
        self.error = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchPutGeofenceError`](crate::types::BatchPutGeofenceError).
    pub fn build(self) -> crate::types::BatchPutGeofenceError {
        crate::types::BatchPutGeofenceError {
            geofence_id: self.geofence_id,
            error: self.error,
        }
    }
}
