// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the level of certainty of the position.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PositionalAccuracy {
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    #[doc(hidden)]
    pub horizontal: std::option::Option<f64>,
}
impl PositionalAccuracy {
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    pub fn horizontal(&self) -> std::option::Option<f64> {
        self.horizontal
    }
}
impl PositionalAccuracy {
    /// Creates a new builder-style object to manufacture [`PositionalAccuracy`](crate::types::PositionalAccuracy).
    pub fn builder() -> crate::types::builders::PositionalAccuracyBuilder {
        crate::types::builders::PositionalAccuracyBuilder::default()
    }
}

/// A builder for [`PositionalAccuracy`](crate::types::PositionalAccuracy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PositionalAccuracyBuilder {
    pub(crate) horizontal: std::option::Option<f64>,
}
impl PositionalAccuracyBuilder {
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    pub fn horizontal(mut self, input: f64) -> Self {
        self.horizontal = Some(input);
        self
    }
    /// <p>Estimated maximum distance, in meters, between the measured position and the true position of a device, along the Earth's surface.</p>
    pub fn set_horizontal(mut self, input: std::option::Option<f64>) -> Self {
        self.horizontal = input;
        self
    }
    /// Consumes the builder and constructs a [`PositionalAccuracy`](crate::types::PositionalAccuracy).
    pub fn build(self) -> crate::types::PositionalAccuracy {
        crate::types::PositionalAccuracy {
            horizontal: self.horizontal,
        }
    }
}
