// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a list of geofences stored in a given geofence collection.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListGeofenceResponseEntry {
    /// <p>The geofence identifier.</p>
    #[doc(hidden)]
    pub geofence_id: std::option::Option<std::string::String>,
    /// <p>Contains the geofence geometry details describing a polygon or a circle.</p>
    #[doc(hidden)]
    pub geometry: std::option::Option<crate::types::GeofenceGeometry>,
    /// <p>Identifies the state of the geofence. A geofence will hold one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> — The geofence has been indexed by the system. </p> </li>
    /// <li> <p> <code>PENDING</code> — The geofence is being processed by the system.</p> </li>
    /// <li> <p> <code>FAILED</code> — The geofence failed to be indexed by the system.</p> </li>
    /// <li> <p> <code>DELETED</code> — The geofence has been deleted from the system index.</p> </li>
    /// <li> <p> <code>DELETING</code> — The geofence is being deleted from the system index.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<std::string::String>,
    /// <p>The timestamp for when the geofence was stored in a geofence collection in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    #[doc(hidden)]
    pub create_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The timestamp for when the geofence was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    #[doc(hidden)]
    pub update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListGeofenceResponseEntry {
    /// <p>The geofence identifier.</p>
    pub fn geofence_id(&self) -> std::option::Option<&str> {
        self.geofence_id.as_deref()
    }
    /// <p>Contains the geofence geometry details describing a polygon or a circle.</p>
    pub fn geometry(&self) -> std::option::Option<&crate::types::GeofenceGeometry> {
        self.geometry.as_ref()
    }
    /// <p>Identifies the state of the geofence. A geofence will hold one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> — The geofence has been indexed by the system. </p> </li>
    /// <li> <p> <code>PENDING</code> — The geofence is being processed by the system.</p> </li>
    /// <li> <p> <code>FAILED</code> — The geofence failed to be indexed by the system.</p> </li>
    /// <li> <p> <code>DELETED</code> — The geofence has been deleted from the system index.</p> </li>
    /// <li> <p> <code>DELETING</code> — The geofence is being deleted from the system index.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&str> {
        self.status.as_deref()
    }
    /// <p>The timestamp for when the geofence was stored in a geofence collection in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    pub fn create_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The timestamp for when the geofence was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    pub fn update_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.update_time.as_ref()
    }
}
impl ListGeofenceResponseEntry {
    /// Creates a new builder-style object to manufacture [`ListGeofenceResponseEntry`](crate::types::ListGeofenceResponseEntry).
    pub fn builder() -> crate::types::builders::ListGeofenceResponseEntryBuilder {
        crate::types::builders::ListGeofenceResponseEntryBuilder::default()
    }
}

/// A builder for [`ListGeofenceResponseEntry`](crate::types::ListGeofenceResponseEntry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListGeofenceResponseEntryBuilder {
    pub(crate) geofence_id: std::option::Option<std::string::String>,
    pub(crate) geometry: std::option::Option<crate::types::GeofenceGeometry>,
    pub(crate) status: std::option::Option<std::string::String>,
    pub(crate) create_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) update_time: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListGeofenceResponseEntryBuilder {
    /// <p>The geofence identifier.</p>
    pub fn geofence_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.geofence_id = Some(input.into());
        self
    }
    /// <p>The geofence identifier.</p>
    pub fn set_geofence_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.geofence_id = input;
        self
    }
    /// <p>Contains the geofence geometry details describing a polygon or a circle.</p>
    pub fn geometry(mut self, input: crate::types::GeofenceGeometry) -> Self {
        self.geometry = Some(input);
        self
    }
    /// <p>Contains the geofence geometry details describing a polygon or a circle.</p>
    pub fn set_geometry(
        mut self,
        input: std::option::Option<crate::types::GeofenceGeometry>,
    ) -> Self {
        self.geometry = input;
        self
    }
    /// <p>Identifies the state of the geofence. A geofence will hold one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> — The geofence has been indexed by the system. </p> </li>
    /// <li> <p> <code>PENDING</code> — The geofence is being processed by the system.</p> </li>
    /// <li> <p> <code>FAILED</code> — The geofence failed to be indexed by the system.</p> </li>
    /// <li> <p> <code>DELETED</code> — The geofence has been deleted from the system index.</p> </li>
    /// <li> <p> <code>DELETING</code> — The geofence is being deleted from the system index.</p> </li>
    /// </ul>
    pub fn status(mut self, input: impl Into<std::string::String>) -> Self {
        self.status = Some(input.into());
        self
    }
    /// <p>Identifies the state of the geofence. A geofence will hold one of the following states:</p>
    /// <ul>
    /// <li> <p> <code>ACTIVE</code> — The geofence has been indexed by the system. </p> </li>
    /// <li> <p> <code>PENDING</code> — The geofence is being processed by the system.</p> </li>
    /// <li> <p> <code>FAILED</code> — The geofence failed to be indexed by the system.</p> </li>
    /// <li> <p> <code>DELETED</code> — The geofence has been deleted from the system index.</p> </li>
    /// <li> <p> <code>DELETING</code> — The geofence is being deleted from the system index.</p> </li>
    /// </ul>
    pub fn set_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status = input;
        self
    }
    /// <p>The timestamp for when the geofence was stored in a geofence collection in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    pub fn create_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.create_time = Some(input);
        self
    }
    /// <p>The timestamp for when the geofence was stored in a geofence collection in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    pub fn set_create_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The timestamp for when the geofence was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    pub fn update_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.update_time = Some(input);
        self
    }
    /// <p>The timestamp for when the geofence was last updated in <a href="https://www.iso.org/iso-8601-date-and-time-format.html">ISO 8601</a> format: <code>YYYY-MM-DDThh:mm:ss.sssZ</code> </p>
    pub fn set_update_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.update_time = input;
        self
    }
    /// Consumes the builder and constructs a [`ListGeofenceResponseEntry`](crate::types::ListGeofenceResponseEntry).
    pub fn build(self) -> crate::types::ListGeofenceResponseEntry {
        crate::types::ListGeofenceResponseEntry {
            geofence_id: self.geofence_id,
            geometry: self.geometry,
            status: self.status,
            create_time: self.create_time,
            update_time: self.update_time,
        }
    }
}
