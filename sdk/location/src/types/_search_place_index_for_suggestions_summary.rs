// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the request sent by using <code>SearchPlaceIndexForSuggestions</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SearchPlaceIndexForSuggestionsSummary {
    /// <p>The free-form partial text input specified in the request.</p>
    pub text: ::std::string::String,
    /// <p>Contains the coordinates for the optional bias position specified in the request.</p>
    /// <p>This parameter contains a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p>
    /// <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub bias_position: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Contains the coordinates for the optional bounding box specified in the request.</p>
    pub filter_b_box: ::std::option::Option<::std::vec::Vec<f64>>,
    /// <p>Contains the optional country filter specified in the request.</p>
    pub filter_countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Contains the optional result count limit specified in the request.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub data_source: ::std::string::String,
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub language: ::std::option::Option<::std::string::String>,
    /// <p>The optional category filter specified in the request.</p>
    pub filter_categories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SearchPlaceIndexForSuggestionsSummary {
    /// <p>The free-form partial text input specified in the request.</p>
    pub fn text(&self) -> &str {
        use std::ops::Deref;
        self.text.deref()
    }
    /// <p>Contains the coordinates for the optional bias position specified in the request.</p>
    /// <p>This parameter contains a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p>
    /// <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.bias_position.is_none()`.
    pub fn bias_position(&self) -> &[f64] {
        self.bias_position.as_deref().unwrap_or_default()
    }
    /// <p>Contains the coordinates for the optional bounding box specified in the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_b_box.is_none()`.
    pub fn filter_b_box(&self) -> &[f64] {
        self.filter_b_box.as_deref().unwrap_or_default()
    }
    /// <p>Contains the optional country filter specified in the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_countries.is_none()`.
    pub fn filter_countries(&self) -> &[::std::string::String] {
        self.filter_countries.as_deref().unwrap_or_default()
    }
    /// <p>Contains the optional result count limit specified in the request.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn data_source(&self) -> &str {
        use std::ops::Deref;
        self.data_source.deref()
    }
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>The optional category filter specified in the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.filter_categories.is_none()`.
    pub fn filter_categories(&self) -> &[::std::string::String] {
        self.filter_categories.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for SearchPlaceIndexForSuggestionsSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchPlaceIndexForSuggestionsSummary");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("bias_position", &"*** Sensitive Data Redacted ***");
        formatter.field("filter_b_box", &"*** Sensitive Data Redacted ***");
        formatter.field("filter_countries", &self.filter_countries);
        formatter.field("max_results", &self.max_results);
        formatter.field("data_source", &self.data_source);
        formatter.field("language", &self.language);
        formatter.field("filter_categories", &self.filter_categories);
        formatter.finish()
    }
}
impl SearchPlaceIndexForSuggestionsSummary {
    /// Creates a new builder-style object to manufacture [`SearchPlaceIndexForSuggestionsSummary`](crate::types::SearchPlaceIndexForSuggestionsSummary).
    pub fn builder() -> crate::types::builders::SearchPlaceIndexForSuggestionsSummaryBuilder {
        crate::types::builders::SearchPlaceIndexForSuggestionsSummaryBuilder::default()
    }
}

/// A builder for [`SearchPlaceIndexForSuggestionsSummary`](crate::types::SearchPlaceIndexForSuggestionsSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SearchPlaceIndexForSuggestionsSummaryBuilder {
    pub(crate) text: ::std::option::Option<::std::string::String>,
    pub(crate) bias_position: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) filter_b_box: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) filter_countries: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) data_source: ::std::option::Option<::std::string::String>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
    pub(crate) filter_categories: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SearchPlaceIndexForSuggestionsSummaryBuilder {
    /// <p>The free-form partial text input specified in the request.</p>
    /// This field is required.
    pub fn text(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.text = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The free-form partial text input specified in the request.</p>
    pub fn set_text(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.text = input;
        self
    }
    /// <p>The free-form partial text input specified in the request.</p>
    pub fn get_text(&self) -> &::std::option::Option<::std::string::String> {
        &self.text
    }
    /// Appends an item to `bias_position`.
    ///
    /// To override the contents of this collection use [`set_bias_position`](Self::set_bias_position).
    ///
    /// <p>Contains the coordinates for the optional bias position specified in the request.</p>
    /// <p>This parameter contains a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p>
    /// <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub fn bias_position(mut self, input: f64) -> Self {
        let mut v = self.bias_position.unwrap_or_default();
        v.push(input);
        self.bias_position = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the coordinates for the optional bias position specified in the request.</p>
    /// <p>This parameter contains a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p>
    /// <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub fn set_bias_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.bias_position = input;
        self
    }
    /// <p>Contains the coordinates for the optional bias position specified in the request.</p>
    /// <p>This parameter contains a pair of numbers. The first number represents the X coordinate, or longitude; the second number represents the Y coordinate, or latitude.</p>
    /// <p>For example, <code>[-123.1174, 49.2847]</code> represents the position with longitude <code>-123.1174</code> and latitude <code>49.2847</code>.</p>
    pub fn get_bias_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.bias_position
    }
    /// Appends an item to `filter_b_box`.
    ///
    /// To override the contents of this collection use [`set_filter_b_box`](Self::set_filter_b_box).
    ///
    /// <p>Contains the coordinates for the optional bounding box specified in the request.</p>
    pub fn filter_b_box(mut self, input: f64) -> Self {
        let mut v = self.filter_b_box.unwrap_or_default();
        v.push(input);
        self.filter_b_box = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the coordinates for the optional bounding box specified in the request.</p>
    pub fn set_filter_b_box(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.filter_b_box = input;
        self
    }
    /// <p>Contains the coordinates for the optional bounding box specified in the request.</p>
    pub fn get_filter_b_box(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.filter_b_box
    }
    /// Appends an item to `filter_countries`.
    ///
    /// To override the contents of this collection use [`set_filter_countries`](Self::set_filter_countries).
    ///
    /// <p>Contains the optional country filter specified in the request.</p>
    pub fn filter_countries(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.filter_countries.unwrap_or_default();
        v.push(input.into());
        self.filter_countries = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains the optional country filter specified in the request.</p>
    pub fn set_filter_countries(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.filter_countries = input;
        self
    }
    /// <p>Contains the optional country filter specified in the request.</p>
    pub fn get_filter_countries(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.filter_countries
    }
    /// <p>Contains the optional result count limit specified in the request.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the optional result count limit specified in the request.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Contains the optional result count limit specified in the request.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    /// This field is required.
    pub fn data_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source
    }
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// Appends an item to `filter_categories`.
    ///
    /// To override the contents of this collection use [`set_filter_categories`](Self::set_filter_categories).
    ///
    /// <p>The optional category filter specified in the request.</p>
    pub fn filter_categories(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.filter_categories.unwrap_or_default();
        v.push(input.into());
        self.filter_categories = ::std::option::Option::Some(v);
        self
    }
    /// <p>The optional category filter specified in the request.</p>
    pub fn set_filter_categories(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.filter_categories = input;
        self
    }
    /// <p>The optional category filter specified in the request.</p>
    pub fn get_filter_categories(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.filter_categories
    }
    /// Consumes the builder and constructs a [`SearchPlaceIndexForSuggestionsSummary`](crate::types::SearchPlaceIndexForSuggestionsSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`text`](crate::types::builders::SearchPlaceIndexForSuggestionsSummaryBuilder::text)
    /// - [`data_source`](crate::types::builders::SearchPlaceIndexForSuggestionsSummaryBuilder::data_source)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::SearchPlaceIndexForSuggestionsSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchPlaceIndexForSuggestionsSummary {
            text: self.text.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "text",
                    "text was not specified but it is required when building SearchPlaceIndexForSuggestionsSummary",
                )
            })?,
            bias_position: self.bias_position,
            filter_b_box: self.filter_b_box,
            filter_countries: self.filter_countries,
            max_results: self.max_results,
            data_source: self.data_source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_source",
                    "data_source was not specified but it is required when building SearchPlaceIndexForSuggestionsSummary",
                )
            })?,
            language: self.language,
            filter_categories: self.filter_categories,
        })
    }
}
impl ::std::fmt::Debug for SearchPlaceIndexForSuggestionsSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchPlaceIndexForSuggestionsSummaryBuilder");
        formatter.field("text", &"*** Sensitive Data Redacted ***");
        formatter.field("bias_position", &"*** Sensitive Data Redacted ***");
        formatter.field("filter_b_box", &"*** Sensitive Data Redacted ***");
        formatter.field("filter_countries", &self.filter_countries);
        formatter.field("max_results", &self.max_results);
        formatter.field("data_source", &self.data_source);
        formatter.field("language", &self.language);
        formatter.field("filter_categories", &self.filter_categories);
        formatter.finish()
    }
}
