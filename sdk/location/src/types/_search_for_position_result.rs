// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains a search result from a position search query that is run on a place index resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchForPositionResult {
    /// <p>Details about the search result, such as its address and position.</p>
    pub place: ::std::option::Option<crate::types::Place>,
    /// <p>The distance in meters of a great-circle arc between the query position and the result.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub distance: f64,
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForPosition</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub place_id: ::std::option::Option<::std::string::String>,
}
impl SearchForPositionResult {
    /// <p>Details about the search result, such as its address and position.</p>
    pub fn place(&self) -> ::std::option::Option<&crate::types::Place> {
        self.place.as_ref()
    }
    /// <p>The distance in meters of a great-circle arc between the query position and the result.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub fn distance(&self) -> f64 {
        self.distance
    }
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForPosition</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub fn place_id(&self) -> ::std::option::Option<&str> {
        self.place_id.as_deref()
    }
}
impl SearchForPositionResult {
    /// Creates a new builder-style object to manufacture [`SearchForPositionResult`](crate::types::SearchForPositionResult).
    pub fn builder() -> crate::types::builders::SearchForPositionResultBuilder {
        crate::types::builders::SearchForPositionResultBuilder::default()
    }
}

/// A builder for [`SearchForPositionResult`](crate::types::SearchForPositionResult).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchForPositionResultBuilder {
    pub(crate) place: ::std::option::Option<crate::types::Place>,
    pub(crate) distance: ::std::option::Option<f64>,
    pub(crate) place_id: ::std::option::Option<::std::string::String>,
}
impl SearchForPositionResultBuilder {
    /// <p>Details about the search result, such as its address and position.</p>
    /// This field is required.
    pub fn place(mut self, input: crate::types::Place) -> Self {
        self.place = ::std::option::Option::Some(input);
        self
    }
    /// <p>Details about the search result, such as its address and position.</p>
    pub fn set_place(mut self, input: ::std::option::Option<crate::types::Place>) -> Self {
        self.place = input;
        self
    }
    /// <p>Details about the search result, such as its address and position.</p>
    pub fn get_place(&self) -> &::std::option::Option<crate::types::Place> {
        &self.place
    }
    /// <p>The distance in meters of a great-circle arc between the query position and the result.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    /// This field is required.
    pub fn distance(mut self, input: f64) -> Self {
        self.distance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The distance in meters of a great-circle arc between the query position and the result.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub fn set_distance(mut self, input: ::std::option::Option<f64>) -> Self {
        self.distance = input;
        self
    }
    /// <p>The distance in meters of a great-circle arc between the query position and the result.</p> <note>
    /// <p>A great-circle arc is the shortest path on a sphere, in this case the Earth. This returns the shortest distance between two locations.</p>
    /// </note>
    pub fn get_distance(&self) -> &::std::option::Option<f64> {
        &self.distance
    }
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForPosition</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub fn place_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.place_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForPosition</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub fn set_place_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.place_id = input;
        self
    }
    /// <p>The unique identifier of the place. You can use this with the <code>GetPlace</code> operation to find the place again later.</p> <note>
    /// <p>For <code>SearchPlaceIndexForPosition</code> operations, the <code>PlaceId</code> is returned only by place indexes that use HERE or Grab as a data provider.</p>
    /// </note>
    pub fn get_place_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.place_id
    }
    /// Consumes the builder and constructs a [`SearchForPositionResult`](crate::types::SearchForPositionResult).
    /// This method will fail if any of the following fields are not set:
    /// - [`distance`](crate::types::builders::SearchForPositionResultBuilder::distance)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchForPositionResult, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchForPositionResult {
            place: self.place,
            distance: self.distance.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "distance",
                    "distance was not specified but it is required when building SearchForPositionResult",
                )
            })?,
            place_id: self.place_id,
        })
    }
}
