// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An error corresponding to the calculation of a route between the <code>DeparturePosition</code> and <code>DestinationPosition</code>.</p>
/// <p>The error code can be one of the following:</p>
/// <ul>
/// <li> <p> <code>RouteNotFound</code> - Unable to find a valid route with the given parameters.</p> </li>
/// </ul>
/// <ul>
/// <li> <p> <code>RouteTooLong</code> - Route calculation went beyond the maximum size of a route and was terminated before completion.</p> </li>
/// </ul>
/// <ul>
/// <li> <p> <code>PositionsNotFound</code> - One or more of the input positions were not found on the route network.</p> </li>
/// </ul>
/// <ul>
/// <li> <p> <code>DestinationPositionNotFound</code> - The destination position was not found on the route network.</p> </li>
/// </ul>
/// <ul>
/// <li> <p> <code>DeparturePositionNotFound</code> - The departure position was not found on the route network.</p> </li>
/// </ul>
/// <ul>
/// <li> <p> <code>OtherValidationError</code> - The given inputs were not valid or a route was not found. More information is given in the error <code>Message</code> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RouteMatrixEntryError {
    /// <p>The type of error which occurred for the route calculation.</p>
    pub code: crate::types::RouteMatrixErrorCode,
    /// <p>A message about the error that occurred for the route calculation.</p>
    pub message: ::std::option::Option<::std::string::String>,
}
impl RouteMatrixEntryError {
    /// <p>The type of error which occurred for the route calculation.</p>
    pub fn code(&self) -> &crate::types::RouteMatrixErrorCode {
        &self.code
    }
    /// <p>A message about the error that occurred for the route calculation.</p>
    pub fn message(&self) -> ::std::option::Option<&str> {
        self.message.as_deref()
    }
}
impl RouteMatrixEntryError {
    /// Creates a new builder-style object to manufacture [`RouteMatrixEntryError`](crate::types::RouteMatrixEntryError).
    pub fn builder() -> crate::types::builders::RouteMatrixEntryErrorBuilder {
        crate::types::builders::RouteMatrixEntryErrorBuilder::default()
    }
}

/// A builder for [`RouteMatrixEntryError`](crate::types::RouteMatrixEntryError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RouteMatrixEntryErrorBuilder {
    pub(crate) code: ::std::option::Option<crate::types::RouteMatrixErrorCode>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
}
impl RouteMatrixEntryErrorBuilder {
    /// <p>The type of error which occurred for the route calculation.</p>
    /// This field is required.
    pub fn code(mut self, input: crate::types::RouteMatrixErrorCode) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of error which occurred for the route calculation.</p>
    pub fn set_code(mut self, input: ::std::option::Option<crate::types::RouteMatrixErrorCode>) -> Self {
        self.code = input;
        self
    }
    /// <p>The type of error which occurred for the route calculation.</p>
    pub fn get_code(&self) -> &::std::option::Option<crate::types::RouteMatrixErrorCode> {
        &self.code
    }
    /// <p>A message about the error that occurred for the route calculation.</p>
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A message about the error that occurred for the route calculation.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>A message about the error that occurred for the route calculation.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// Consumes the builder and constructs a [`RouteMatrixEntryError`](crate::types::RouteMatrixEntryError).
    /// This method will fail if any of the following fields are not set:
    /// - [`code`](crate::types::builders::RouteMatrixEntryErrorBuilder::code)
    pub fn build(self) -> ::std::result::Result<crate::types::RouteMatrixEntryError, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RouteMatrixEntryError {
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building RouteMatrixEntryError",
                )
            })?,
            message: self.message,
        })
    }
}
