// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of the request sent by using <code>SearchPlaceIndexForPosition</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct SearchPlaceIndexForPositionSummary {
    /// <p>The position specified in the request.</p>
    pub position: ::std::vec::Vec<f64>,
    /// <p>Contains the optional result count limit that is specified in the request.</p>
    /// <p>Default value: <code>50</code> </p>
    pub max_results: i32,
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub data_source: ::std::string::String,
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub language: ::std::option::Option<::std::string::String>,
}
impl SearchPlaceIndexForPositionSummary {
    /// <p>The position specified in the request.</p>
    pub fn position(&self) -> &[f64] {
        use std::ops::Deref;
        self.position.deref()
    }
    /// <p>Contains the optional result count limit that is specified in the request.</p>
    /// <p>Default value: <code>50</code> </p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn data_source(&self) -> &str {
        use std::ops::Deref;
        self.data_source.deref()
    }
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub fn language(&self) -> ::std::option::Option<&str> {
        self.language.as_deref()
    }
}
impl ::std::fmt::Debug for SearchPlaceIndexForPositionSummary {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchPlaceIndexForPositionSummary");
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.field("data_source", &self.data_source);
        formatter.field("language", &self.language);
        formatter.finish()
    }
}
impl SearchPlaceIndexForPositionSummary {
    /// Creates a new builder-style object to manufacture [`SearchPlaceIndexForPositionSummary`](crate::types::SearchPlaceIndexForPositionSummary).
    pub fn builder() -> crate::types::builders::SearchPlaceIndexForPositionSummaryBuilder {
        crate::types::builders::SearchPlaceIndexForPositionSummaryBuilder::default()
    }
}

/// A builder for [`SearchPlaceIndexForPositionSummary`](crate::types::SearchPlaceIndexForPositionSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct SearchPlaceIndexForPositionSummaryBuilder {
    pub(crate) position: ::std::option::Option<::std::vec::Vec<f64>>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) data_source: ::std::option::Option<::std::string::String>,
    pub(crate) language: ::std::option::Option<::std::string::String>,
}
impl SearchPlaceIndexForPositionSummaryBuilder {
    /// Appends an item to `position`.
    ///
    /// To override the contents of this collection use [`set_position`](Self::set_position).
    ///
    /// <p>The position specified in the request.</p>
    pub fn position(mut self, input: f64) -> Self {
        let mut v = self.position.unwrap_or_default();
        v.push(input);
        self.position = ::std::option::Option::Some(v);
        self
    }
    /// <p>The position specified in the request.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::vec::Vec<f64>>) -> Self {
        self.position = input;
        self
    }
    /// <p>The position specified in the request.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::vec::Vec<f64>> {
        &self.position
    }
    /// <p>Contains the optional result count limit that is specified in the request.</p>
    /// <p>Default value: <code>50</code> </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the optional result count limit that is specified in the request.</p>
    /// <p>Default value: <code>50</code> </p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>Contains the optional result count limit that is specified in the request.</p>
    /// <p>Default value: <code>50</code> </p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    /// This field is required.
    pub fn data_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.data_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn set_data_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.data_source = input;
        self
    }
    /// <p>The geospatial data provider attached to the place index resource specified in the request. Values can be one of the following:</p>
    /// <ul>
    /// <li> <p>Esri</p> </li>
    /// <li> <p>Grab</p> </li>
    /// <li> <p>Here</p> </li>
    /// </ul>
    /// <p>For more information about data providers, see <a href="https://docs.aws.amazon.com/location/latest/developerguide/what-is-data-provider.html">Amazon Location Service data providers</a>.</p>
    pub fn get_data_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.data_source
    }
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub fn language(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.language = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub fn set_language(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>The preferred language used to return results. Matches the language in the request. The value is a valid <a href="https://tools.ietf.org/search/bcp47">BCP 47</a> language tag, for example, <code>en</code> for English.</p>
    pub fn get_language(&self) -> &::std::option::Option<::std::string::String> {
        &self.language
    }
    /// Consumes the builder and constructs a [`SearchPlaceIndexForPositionSummary`](crate::types::SearchPlaceIndexForPositionSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`position`](crate::types::builders::SearchPlaceIndexForPositionSummaryBuilder::position)
    /// - [`data_source`](crate::types::builders::SearchPlaceIndexForPositionSummaryBuilder::data_source)
    pub fn build(self) -> ::std::result::Result<crate::types::SearchPlaceIndexForPositionSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::SearchPlaceIndexForPositionSummary {
            position: self.position.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "position",
                    "position was not specified but it is required when building SearchPlaceIndexForPositionSummary",
                )
            })?,
            max_results: self.max_results.unwrap_or_default(),
            data_source: self.data_source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data_source",
                    "data_source was not specified but it is required when building SearchPlaceIndexForPositionSummary",
                )
            })?,
            language: self.language,
        })
    }
}
impl ::std::fmt::Debug for SearchPlaceIndexForPositionSummaryBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("SearchPlaceIndexForPositionSummaryBuilder");
        formatter.field("position", &"*** Sensitive Data Redacted ***");
        formatter.field("max_results", &self.max_results);
        formatter.field("data_source", &self.data_source);
        formatter.field("language", &self.language);
        formatter.finish()
    }
}
