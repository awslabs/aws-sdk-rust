// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>API Restrictions on the allowed actions, resources, and referers for an API key resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ApiKeyRestrictions {
    /// <p>A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.</p>
    /// <p>The following are valid values for the actions.</p>
    /// <ul>
    /// <li> <p> <b>Map actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:GetMap*</code> - Allows all actions needed for map rendering.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Place actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:SearchPlaceIndexForText</code> - Allows geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForPosition</code> - Allows reverse geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForSuggestions</code> - Allows generating suggestions from text.</p> </li>
    /// <li> <p> <code>GetPlace</code> - Allows finding a place by place ID.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Route actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:CalculateRoute</code> - Allows point to point routing.</p> </li>
    /// <li> <p> <code>geo:CalculateRouteMatrix</code> - Allows calculating a matrix of routes.</p> </li>
    /// </ul> </li>
    /// </ul> <note>
    /// <p>You must use these strings exactly. For example, to provide access to map rendering, the only valid action is <code>geo:GetMap*</code> as an input to the list. <code>["geo:GetMap*"]</code> is valid but <code>["geo:GetMapTile"]</code> is not. Similarly, you cannot use <code>["geo:SearchPlaceIndexFor*"]</code> - you must list each of the Place actions separately.</p>
    /// </note>
    pub allow_actions: ::std::vec::Vec<::std::string::String>,
    /// <p>A list of allowed resource ARNs that a API key bearer can perform actions on.</p>
    /// <ul>
    /// <li> <p>The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.</p> </li>
    /// <li> <p>The resources must be in the same <code>partition</code>, <code>region</code>, and <code>account-id</code> as the key that is being created.</p> </li>
    /// <li> <p>Other than wildcards, you must include the full ARN, including the <code>arn</code>, <code>partition</code>, <code>service</code>, <code>region</code>, <code>account-id</code> and <code>resource-id</code>, delimited by colons (:).</p> </li>
    /// <li> <p>No spaces allowed, even with wildcards. For example, <code>arn:aws:geo:region:<i>account-id</i>:map/ExampleMap*</code>.</p> </li>
    /// </ul>
    /// <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    pub allow_resources: ::std::vec::Vec<::std::string::String>,
    /// <p>An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.</p>
    /// <p>Requirements:</p>
    /// <ul>
    /// <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list <code>$\-._+!*`(),;/?:@=&amp;</code> </p> </li>
    /// <li> <p>May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.</p> </li>
    /// <li> <p>May contain wildcard characters question mark (?) and asterisk (*).</p> <p>Question mark (?) will replace any single character (including hexadecimal digits).</p> <p>Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).</p> </li>
    /// <li> <p>No spaces allowed. For example, <code>https://example.com</code>.</p> </li>
    /// </ul>
    pub allow_referers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ApiKeyRestrictions {
    /// <p>A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.</p>
    /// <p>The following are valid values for the actions.</p>
    /// <ul>
    /// <li> <p> <b>Map actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:GetMap*</code> - Allows all actions needed for map rendering.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Place actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:SearchPlaceIndexForText</code> - Allows geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForPosition</code> - Allows reverse geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForSuggestions</code> - Allows generating suggestions from text.</p> </li>
    /// <li> <p> <code>GetPlace</code> - Allows finding a place by place ID.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Route actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:CalculateRoute</code> - Allows point to point routing.</p> </li>
    /// <li> <p> <code>geo:CalculateRouteMatrix</code> - Allows calculating a matrix of routes.</p> </li>
    /// </ul> </li>
    /// </ul> <note>
    /// <p>You must use these strings exactly. For example, to provide access to map rendering, the only valid action is <code>geo:GetMap*</code> as an input to the list. <code>["geo:GetMap*"]</code> is valid but <code>["geo:GetMapTile"]</code> is not. Similarly, you cannot use <code>["geo:SearchPlaceIndexFor*"]</code> - you must list each of the Place actions separately.</p>
    /// </note>
    pub fn allow_actions(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.allow_actions.deref()
    }
    /// <p>A list of allowed resource ARNs that a API key bearer can perform actions on.</p>
    /// <ul>
    /// <li> <p>The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.</p> </li>
    /// <li> <p>The resources must be in the same <code>partition</code>, <code>region</code>, and <code>account-id</code> as the key that is being created.</p> </li>
    /// <li> <p>Other than wildcards, you must include the full ARN, including the <code>arn</code>, <code>partition</code>, <code>service</code>, <code>region</code>, <code>account-id</code> and <code>resource-id</code>, delimited by colons (:).</p> </li>
    /// <li> <p>No spaces allowed, even with wildcards. For example, <code>arn:aws:geo:region:<i>account-id</i>:map/ExampleMap*</code>.</p> </li>
    /// </ul>
    /// <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    pub fn allow_resources(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.allow_resources.deref()
    }
    /// <p>An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.</p>
    /// <p>Requirements:</p>
    /// <ul>
    /// <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list <code>$\-._+!*`(),;/?:@=&amp;</code> </p> </li>
    /// <li> <p>May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.</p> </li>
    /// <li> <p>May contain wildcard characters question mark (?) and asterisk (*).</p> <p>Question mark (?) will replace any single character (including hexadecimal digits).</p> <p>Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).</p> </li>
    /// <li> <p>No spaces allowed. For example, <code>https://example.com</code>.</p> </li>
    /// </ul>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.allow_referers.is_none()`.
    pub fn allow_referers(&self) -> &[::std::string::String] {
        self.allow_referers.as_deref().unwrap_or_default()
    }
}
impl ApiKeyRestrictions {
    /// Creates a new builder-style object to manufacture [`ApiKeyRestrictions`](crate::types::ApiKeyRestrictions).
    pub fn builder() -> crate::types::builders::ApiKeyRestrictionsBuilder {
        crate::types::builders::ApiKeyRestrictionsBuilder::default()
    }
}

/// A builder for [`ApiKeyRestrictions`](crate::types::ApiKeyRestrictions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ApiKeyRestrictionsBuilder {
    pub(crate) allow_actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allow_resources: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) allow_referers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl ApiKeyRestrictionsBuilder {
    /// Appends an item to `allow_actions`.
    ///
    /// To override the contents of this collection use [`set_allow_actions`](Self::set_allow_actions).
    ///
    /// <p>A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.</p>
    /// <p>The following are valid values for the actions.</p>
    /// <ul>
    /// <li> <p> <b>Map actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:GetMap*</code> - Allows all actions needed for map rendering.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Place actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:SearchPlaceIndexForText</code> - Allows geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForPosition</code> - Allows reverse geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForSuggestions</code> - Allows generating suggestions from text.</p> </li>
    /// <li> <p> <code>GetPlace</code> - Allows finding a place by place ID.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Route actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:CalculateRoute</code> - Allows point to point routing.</p> </li>
    /// <li> <p> <code>geo:CalculateRouteMatrix</code> - Allows calculating a matrix of routes.</p> </li>
    /// </ul> </li>
    /// </ul> <note>
    /// <p>You must use these strings exactly. For example, to provide access to map rendering, the only valid action is <code>geo:GetMap*</code> as an input to the list. <code>["geo:GetMap*"]</code> is valid but <code>["geo:GetMapTile"]</code> is not. Similarly, you cannot use <code>["geo:SearchPlaceIndexFor*"]</code> - you must list each of the Place actions separately.</p>
    /// </note>
    pub fn allow_actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allow_actions.unwrap_or_default();
        v.push(input.into());
        self.allow_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.</p>
    /// <p>The following are valid values for the actions.</p>
    /// <ul>
    /// <li> <p> <b>Map actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:GetMap*</code> - Allows all actions needed for map rendering.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Place actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:SearchPlaceIndexForText</code> - Allows geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForPosition</code> - Allows reverse geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForSuggestions</code> - Allows generating suggestions from text.</p> </li>
    /// <li> <p> <code>GetPlace</code> - Allows finding a place by place ID.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Route actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:CalculateRoute</code> - Allows point to point routing.</p> </li>
    /// <li> <p> <code>geo:CalculateRouteMatrix</code> - Allows calculating a matrix of routes.</p> </li>
    /// </ul> </li>
    /// </ul> <note>
    /// <p>You must use these strings exactly. For example, to provide access to map rendering, the only valid action is <code>geo:GetMap*</code> as an input to the list. <code>["geo:GetMap*"]</code> is valid but <code>["geo:GetMapTile"]</code> is not. Similarly, you cannot use <code>["geo:SearchPlaceIndexFor*"]</code> - you must list each of the Place actions separately.</p>
    /// </note>
    pub fn set_allow_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allow_actions = input;
        self
    }
    /// <p>A list of allowed actions that an API key resource grants permissions to perform. You must have at least one action for each type of resource. For example, if you have a place resource, you must include at least one place action.</p>
    /// <p>The following are valid values for the actions.</p>
    /// <ul>
    /// <li> <p> <b>Map actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:GetMap*</code> - Allows all actions needed for map rendering.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Place actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:SearchPlaceIndexForText</code> - Allows geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForPosition</code> - Allows reverse geocoding.</p> </li>
    /// <li> <p> <code>geo:SearchPlaceIndexForSuggestions</code> - Allows generating suggestions from text.</p> </li>
    /// <li> <p> <code>GetPlace</code> - Allows finding a place by place ID.</p> </li>
    /// </ul> </li>
    /// <li> <p> <b>Route actions</b> </p>
    /// <ul>
    /// <li> <p> <code>geo:CalculateRoute</code> - Allows point to point routing.</p> </li>
    /// <li> <p> <code>geo:CalculateRouteMatrix</code> - Allows calculating a matrix of routes.</p> </li>
    /// </ul> </li>
    /// </ul> <note>
    /// <p>You must use these strings exactly. For example, to provide access to map rendering, the only valid action is <code>geo:GetMap*</code> as an input to the list. <code>["geo:GetMap*"]</code> is valid but <code>["geo:GetMapTile"]</code> is not. Similarly, you cannot use <code>["geo:SearchPlaceIndexFor*"]</code> - you must list each of the Place actions separately.</p>
    /// </note>
    pub fn get_allow_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allow_actions
    }
    /// Appends an item to `allow_resources`.
    ///
    /// To override the contents of this collection use [`set_allow_resources`](Self::set_allow_resources).
    ///
    /// <p>A list of allowed resource ARNs that a API key bearer can perform actions on.</p>
    /// <ul>
    /// <li> <p>The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.</p> </li>
    /// <li> <p>The resources must be in the same <code>partition</code>, <code>region</code>, and <code>account-id</code> as the key that is being created.</p> </li>
    /// <li> <p>Other than wildcards, you must include the full ARN, including the <code>arn</code>, <code>partition</code>, <code>service</code>, <code>region</code>, <code>account-id</code> and <code>resource-id</code>, delimited by colons (:).</p> </li>
    /// <li> <p>No spaces allowed, even with wildcards. For example, <code>arn:aws:geo:region:<i>account-id</i>:map/ExampleMap*</code>.</p> </li>
    /// </ul>
    /// <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    pub fn allow_resources(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allow_resources.unwrap_or_default();
        v.push(input.into());
        self.allow_resources = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of allowed resource ARNs that a API key bearer can perform actions on.</p>
    /// <ul>
    /// <li> <p>The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.</p> </li>
    /// <li> <p>The resources must be in the same <code>partition</code>, <code>region</code>, and <code>account-id</code> as the key that is being created.</p> </li>
    /// <li> <p>Other than wildcards, you must include the full ARN, including the <code>arn</code>, <code>partition</code>, <code>service</code>, <code>region</code>, <code>account-id</code> and <code>resource-id</code>, delimited by colons (:).</p> </li>
    /// <li> <p>No spaces allowed, even with wildcards. For example, <code>arn:aws:geo:region:<i>account-id</i>:map/ExampleMap*</code>.</p> </li>
    /// </ul>
    /// <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    pub fn set_allow_resources(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allow_resources = input;
        self
    }
    /// <p>A list of allowed resource ARNs that a API key bearer can perform actions on.</p>
    /// <ul>
    /// <li> <p>The ARN must be the correct ARN for a map, place, or route ARN. You may include wildcards in the resource-id to match multiple resources of the same type.</p> </li>
    /// <li> <p>The resources must be in the same <code>partition</code>, <code>region</code>, and <code>account-id</code> as the key that is being created.</p> </li>
    /// <li> <p>Other than wildcards, you must include the full ARN, including the <code>arn</code>, <code>partition</code>, <code>service</code>, <code>region</code>, <code>account-id</code> and <code>resource-id</code>, delimited by colons (:).</p> </li>
    /// <li> <p>No spaces allowed, even with wildcards. For example, <code>arn:aws:geo:region:<i>account-id</i>:map/ExampleMap*</code>.</p> </li>
    /// </ul>
    /// <p>For more information about ARN format, see <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a>.</p>
    pub fn get_allow_resources(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allow_resources
    }
    /// Appends an item to `allow_referers`.
    ///
    /// To override the contents of this collection use [`set_allow_referers`](Self::set_allow_referers).
    ///
    /// <p>An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.</p>
    /// <p>Requirements:</p>
    /// <ul>
    /// <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list <code>$\-._+!*`(),;/?:@=&amp;</code> </p> </li>
    /// <li> <p>May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.</p> </li>
    /// <li> <p>May contain wildcard characters question mark (?) and asterisk (*).</p> <p>Question mark (?) will replace any single character (including hexadecimal digits).</p> <p>Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).</p> </li>
    /// <li> <p>No spaces allowed. For example, <code>https://example.com</code>.</p> </li>
    /// </ul>
    pub fn allow_referers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.allow_referers.unwrap_or_default();
        v.push(input.into());
        self.allow_referers = ::std::option::Option::Some(v);
        self
    }
    /// <p>An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.</p>
    /// <p>Requirements:</p>
    /// <ul>
    /// <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list <code>$\-._+!*`(),;/?:@=&amp;</code> </p> </li>
    /// <li> <p>May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.</p> </li>
    /// <li> <p>May contain wildcard characters question mark (?) and asterisk (*).</p> <p>Question mark (?) will replace any single character (including hexadecimal digits).</p> <p>Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).</p> </li>
    /// <li> <p>No spaces allowed. For example, <code>https://example.com</code>.</p> </li>
    /// </ul>
    pub fn set_allow_referers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.allow_referers = input;
        self
    }
    /// <p>An optional list of allowed HTTP referers for which requests must originate from. Requests using this API key from other domains will not be allowed.</p>
    /// <p>Requirements:</p>
    /// <ul>
    /// <li> <p>Contain only alphanumeric characters (A–Z, a–z, 0–9) or any symbols in this list <code>$\-._+!*`(),;/?:@=&amp;</code> </p> </li>
    /// <li> <p>May contain a percent (%) if followed by 2 hexadecimal digits (A-F, a-f, 0-9); this is used for URL encoding purposes.</p> </li>
    /// <li> <p>May contain wildcard characters question mark (?) and asterisk (*).</p> <p>Question mark (?) will replace any single character (including hexadecimal digits).</p> <p>Asterisk (*) will replace any multiple characters (including multiple hexadecimal digits).</p> </li>
    /// <li> <p>No spaces allowed. For example, <code>https://example.com</code>.</p> </li>
    /// </ul>
    pub fn get_allow_referers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.allow_referers
    }
    /// Consumes the builder and constructs a [`ApiKeyRestrictions`](crate::types::ApiKeyRestrictions).
    /// This method will fail if any of the following fields are not set:
    /// - [`allow_actions`](crate::types::builders::ApiKeyRestrictionsBuilder::allow_actions)
    /// - [`allow_resources`](crate::types::builders::ApiKeyRestrictionsBuilder::allow_resources)
    pub fn build(self) -> ::std::result::Result<crate::types::ApiKeyRestrictions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ApiKeyRestrictions {
            allow_actions: self.allow_actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "allow_actions",
                    "allow_actions was not specified but it is required when building ApiKeyRestrictions",
                )
            })?,
            allow_resources: self.allow_resources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "allow_resources",
                    "allow_resources was not specified but it is required when building ApiKeyRestrictions",
                )
            })?,
            allow_referers: self.allow_referers,
        })
    }
}
