// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_claim_devices_by_claim_code;

pub(crate) mod shape_describe_device;

pub(crate) mod shape_finalize_device_claim;

pub(crate) mod shape_get_device_methods;

pub(crate) mod shape_initiate_device_claim;

pub(crate) mod shape_invoke_device_method;

pub(crate) mod shape_list_device_events;

pub(crate) mod shape_list_devices;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_unclaim_device;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_device_state;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_finalize_device_claim_input;

pub(crate) mod shape_forbidden_exception;

pub(crate) mod shape_internal_failure_exception;

pub(crate) mod shape_invalid_request_exception;

pub(crate) mod shape_invoke_device_method_input;

pub(crate) mod shape_precondition_failed_exception;

pub(crate) mod shape_range_not_satisfiable_exception;

pub(crate) mod shape_resource_conflict_exception;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_update_device_state_input;

pub(crate) mod shape_device_description;

pub(crate) mod shape_device_method;

pub(crate) mod shape_list_of_device_description;

pub(crate) mod shape_list_of_device_event;

pub(crate) mod shape_list_of_device_method;

pub(crate) mod shape_map_of_string;

pub(crate) mod shape_device_attributes;

pub(crate) mod shape_device_event;

pub(crate) mod shape_device;

pub(crate) mod shape_attributes;
