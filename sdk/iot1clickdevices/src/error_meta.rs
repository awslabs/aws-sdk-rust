// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    #[allow(missing_docs)] // documentation missing in model
    ForbiddenException(crate::types::error::ForbiddenException),
    #[allow(missing_docs)] // documentation missing in model
    InternalFailureException(crate::types::error::InternalFailureException),
    #[allow(missing_docs)] // documentation missing in model
    InvalidRequestException(crate::types::error::InvalidRequestException),
    #[allow(missing_docs)] // documentation missing in model
    PreconditionFailedException(crate::types::error::PreconditionFailedException),
    #[allow(missing_docs)] // documentation missing in model
    RangeNotSatisfiableException(crate::types::error::RangeNotSatisfiableException),
    #[allow(missing_docs)] // documentation missing in model
    ResourceConflictException(crate::types::error::ResourceConflictException),
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::InternalFailureException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::PreconditionFailedException(inner) => inner.fmt(f),
            Error::RangeNotSatisfiableException(inner) => inner.fmt(f),
            Error::ResourceConflictException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::claim_devices_by_claim_code::ClaimDevicesByClaimCodeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::claim_devices_by_claim_code::ClaimDevicesByClaimCodeError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::claim_devices_by_claim_code::ClaimDevicesByClaimCodeError> for Error {
    fn from(err: crate::operation::claim_devices_by_claim_code::ClaimDevicesByClaimCodeError) -> Self {
        match err {
            crate::operation::claim_devices_by_claim_code::ClaimDevicesByClaimCodeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::operation::claim_devices_by_claim_code::ClaimDevicesByClaimCodeError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::claim_devices_by_claim_code::ClaimDevicesByClaimCodeError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::claim_devices_by_claim_code::ClaimDevicesByClaimCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_device::DescribeDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_device::DescribeDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_device::DescribeDeviceError> for Error {
    fn from(err: crate::operation::describe_device::DescribeDeviceError) -> Self {
        match err {
            crate::operation::describe_device::DescribeDeviceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::describe_device::DescribeDeviceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::describe_device::DescribeDeviceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_device::DescribeDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::finalize_device_claim::FinalizeDeviceClaimError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::finalize_device_claim::FinalizeDeviceClaimError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::finalize_device_claim::FinalizeDeviceClaimError> for Error {
    fn from(err: crate::operation::finalize_device_claim::FinalizeDeviceClaimError) -> Self {
        match err {
            crate::operation::finalize_device_claim::FinalizeDeviceClaimError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::finalize_device_claim::FinalizeDeviceClaimError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::finalize_device_claim::FinalizeDeviceClaimError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::operation::finalize_device_claim::FinalizeDeviceClaimError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::operation::finalize_device_claim::FinalizeDeviceClaimError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::finalize_device_claim::FinalizeDeviceClaimError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_methods::GetDeviceMethodsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_device_methods::GetDeviceMethodsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_device_methods::GetDeviceMethodsError> for Error {
    fn from(err: crate::operation::get_device_methods::GetDeviceMethodsError) -> Self {
        match err {
            crate::operation::get_device_methods::GetDeviceMethodsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::get_device_methods::GetDeviceMethodsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::get_device_methods::GetDeviceMethodsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_device_methods::GetDeviceMethodsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::initiate_device_claim::InitiateDeviceClaimError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::initiate_device_claim::InitiateDeviceClaimError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::initiate_device_claim::InitiateDeviceClaimError> for Error {
    fn from(err: crate::operation::initiate_device_claim::InitiateDeviceClaimError) -> Self {
        match err {
            crate::operation::initiate_device_claim::InitiateDeviceClaimError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::initiate_device_claim::InitiateDeviceClaimError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::operation::initiate_device_claim::InitiateDeviceClaimError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::operation::initiate_device_claim::InitiateDeviceClaimError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::initiate_device_claim::InitiateDeviceClaimError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::invoke_device_method::InvokeDeviceMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::invoke_device_method::InvokeDeviceMethodError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::invoke_device_method::InvokeDeviceMethodError> for Error {
    fn from(err: crate::operation::invoke_device_method::InvokeDeviceMethodError) -> Self {
        match err {
            crate::operation::invoke_device_method::InvokeDeviceMethodError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::invoke_device_method::InvokeDeviceMethodError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::invoke_device_method::InvokeDeviceMethodError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::operation::invoke_device_method::InvokeDeviceMethodError::RangeNotSatisfiableException(inner) => {
                Error::RangeNotSatisfiableException(inner)
            }
            crate::operation::invoke_device_method::InvokeDeviceMethodError::ResourceConflictException(inner) => {
                Error::ResourceConflictException(inner)
            }
            crate::operation::invoke_device_method::InvokeDeviceMethodError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::invoke_device_method::InvokeDeviceMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_device_events::ListDeviceEventsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_device_events::ListDeviceEventsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_device_events::ListDeviceEventsError> for Error {
    fn from(err: crate::operation::list_device_events::ListDeviceEventsError) -> Self {
        match err {
            crate::operation::list_device_events::ListDeviceEventsError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_device_events::ListDeviceEventsError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_device_events::ListDeviceEventsError::RangeNotSatisfiableException(inner) => {
                Error::RangeNotSatisfiableException(inner)
            }
            crate::operation::list_device_events::ListDeviceEventsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_device_events::ListDeviceEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_devices::ListDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_devices::ListDevicesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_devices::ListDevicesError> for Error {
    fn from(err: crate::operation::list_devices::ListDevicesError) -> Self {
        match err {
            crate::operation::list_devices::ListDevicesError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::list_devices::ListDevicesError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::list_devices::ListDevicesError::RangeNotSatisfiableException(inner) => Error::RangeNotSatisfiableException(inner),
            crate::operation::list_devices::ListDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalFailureException(inner) => {
                Error::InternalFailureException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::unclaim_device::UnclaimDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::unclaim_device::UnclaimDeviceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::unclaim_device::UnclaimDeviceError> for Error {
    fn from(err: crate::operation::unclaim_device::UnclaimDeviceError) -> Self {
        match err {
            crate::operation::unclaim_device::UnclaimDeviceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::unclaim_device::UnclaimDeviceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::unclaim_device::UnclaimDeviceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::unclaim_device::UnclaimDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_device_state::UpdateDeviceStateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_device_state::UpdateDeviceStateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_device_state::UpdateDeviceStateError> for Error {
    fn from(err: crate::operation::update_device_state::UpdateDeviceStateError) -> Self {
        match err {
            crate::operation::update_device_state::UpdateDeviceStateError::InternalFailureException(inner) => Error::InternalFailureException(inner),
            crate::operation::update_device_state::UpdateDeviceStateError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::operation::update_device_state::UpdateDeviceStateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_device_state::UpdateDeviceStateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::ForbiddenException(inner) => inner.source(),
            Error::InternalFailureException(inner) => inner.source(),
            Error::InvalidRequestException(inner) => inner.source(),
            Error::PreconditionFailedException(inner) => inner.source(),
            Error::RangeNotSatisfiableException(inner) => inner.source(),
            Error::ResourceConflictException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ForbiddenException(e) => e.request_id(),
            Self::InternalFailureException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::PreconditionFailedException(e) => e.request_id(),
            Self::RangeNotSatisfiableException(e) => e.request_id(),
            Self::ResourceConflictException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
