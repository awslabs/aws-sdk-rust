// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeviceMethodsOutput {
    /// <p>List of available device APIs.</p>
    #[doc(hidden)]
    pub device_methods: std::option::Option<std::vec::Vec<crate::types::DeviceMethod>>,
    _request_id: Option<String>,
}
impl GetDeviceMethodsOutput {
    /// <p>List of available device APIs.</p>
    pub fn device_methods(&self) -> std::option::Option<&[crate::types::DeviceMethod]> {
        self.device_methods.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetDeviceMethodsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeviceMethodsOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceMethodsOutput`](crate::operation::get_device_methods::GetDeviceMethodsOutput).
    pub fn builder() -> crate::operation::get_device_methods::builders::GetDeviceMethodsOutputBuilder
    {
        crate::operation::get_device_methods::builders::GetDeviceMethodsOutputBuilder::default()
    }
}

/// A builder for [`GetDeviceMethodsOutput`](crate::operation::get_device_methods::GetDeviceMethodsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDeviceMethodsOutputBuilder {
    pub(crate) device_methods: std::option::Option<std::vec::Vec<crate::types::DeviceMethod>>,
    _request_id: Option<String>,
}
impl GetDeviceMethodsOutputBuilder {
    /// Appends an item to `device_methods`.
    ///
    /// To override the contents of this collection use [`set_device_methods`](Self::set_device_methods).
    ///
    /// <p>List of available device APIs.</p>
    pub fn device_methods(mut self, input: crate::types::DeviceMethod) -> Self {
        let mut v = self.device_methods.unwrap_or_default();
        v.push(input);
        self.device_methods = Some(v);
        self
    }
    /// <p>List of available device APIs.</p>
    pub fn set_device_methods(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeviceMethod>>,
    ) -> Self {
        self.device_methods = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeviceMethodsOutput`](crate::operation::get_device_methods::GetDeviceMethodsOutput).
    pub fn build(self) -> crate::operation::get_device_methods::GetDeviceMethodsOutput {
        crate::operation::get_device_methods::GetDeviceMethodsOutput {
            device_methods: self.device_methods,
            _request_id: self._request_id,
        }
    }
}
