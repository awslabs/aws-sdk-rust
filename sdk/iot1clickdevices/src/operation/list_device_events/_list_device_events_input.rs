// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDeviceEventsInput {
    /// <p>The unique identifier of the device.</p>
    #[doc(hidden)]
    pub device_id: std::option::Option<std::string::String>,
    /// <p>The start date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    #[doc(hidden)]
    pub from_time_stamp: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The maximum number of results to return per request. If not set, a default value of 100 is used.</p>
    #[doc(hidden)]
    pub max_results: i32,
    /// <p>The token to retrieve the next set of results.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The end date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    #[doc(hidden)]
    pub to_time_stamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListDeviceEventsInput {
    /// <p>The unique identifier of the device.</p>
    pub fn device_id(&self) -> std::option::Option<&str> {
        self.device_id.as_deref()
    }
    /// <p>The start date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    pub fn from_time_stamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.from_time_stamp.as_ref()
    }
    /// <p>The maximum number of results to return per request. If not set, a default value of 100 is used.</p>
    pub fn max_results(&self) -> i32 {
        self.max_results
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The end date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    pub fn to_time_stamp(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.to_time_stamp.as_ref()
    }
}
impl ListDeviceEventsInput {
    /// Creates a new builder-style object to manufacture [`ListDeviceEventsInput`](crate::operation::list_device_events::ListDeviceEventsInput).
    pub fn builder() -> crate::operation::list_device_events::builders::ListDeviceEventsInputBuilder
    {
        crate::operation::list_device_events::builders::ListDeviceEventsInputBuilder::default()
    }
}

/// A builder for [`ListDeviceEventsInput`](crate::operation::list_device_events::ListDeviceEventsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDeviceEventsInputBuilder {
    pub(crate) device_id: std::option::Option<std::string::String>,
    pub(crate) from_time_stamp: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) to_time_stamp: std::option::Option<aws_smithy_types::DateTime>,
}
impl ListDeviceEventsInputBuilder {
    /// <p>The unique identifier of the device.</p>
    pub fn device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the device.</p>
    pub fn set_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>The start date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    pub fn from_time_stamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.from_time_stamp = Some(input);
        self
    }
    /// <p>The start date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    pub fn set_from_time_stamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.from_time_stamp = input;
        self
    }
    /// <p>The maximum number of results to return per request. If not set, a default value of 100 is used.</p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p>The maximum number of results to return per request. If not set, a default value of 100 is used.</p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token to retrieve the next set of results.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The end date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    pub fn to_time_stamp(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.to_time_stamp = Some(input);
        self
    }
    /// <p>The end date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    pub fn set_to_time_stamp(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.to_time_stamp = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDeviceEventsInput`](crate::operation::list_device_events::ListDeviceEventsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_device_events::ListDeviceEventsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_device_events::ListDeviceEventsInput {
                device_id: self.device_id,
                from_time_stamp: self.from_time_stamp,
                max_results: self.max_results.unwrap_or_default(),
                next_token: self.next_token,
                to_time_stamp: self.to_time_stamp,
            },
        )
    }
}
