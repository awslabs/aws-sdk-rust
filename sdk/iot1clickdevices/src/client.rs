// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for AWS IoT 1-Click Devices Service
///
/// Client for invoking operations on AWS IoT 1-Click Devices Service. Each operation on AWS IoT 1-Click Devices Service is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_iot1clickdevices::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_iot1clickdevices::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_iot1clickdevices::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`ClaimDevicesByClaimCode`](crate::client::fluent_builders::ClaimDevicesByClaimCode) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`claim_code(impl Into<String>)`](crate::client::fluent_builders::ClaimDevicesByClaimCode::claim_code) / [`set_claim_code(Option<String>)`](crate::client::fluent_builders::ClaimDevicesByClaimCode::set_claim_code): <p>The claim code, starting with "C-", as provided by the device manufacturer.</p>
    /// - On success, responds with [`ClaimDevicesByClaimCodeOutput`](crate::output::ClaimDevicesByClaimCodeOutput) with field(s):
    ///   - [`claim_code(Option<String>)`](crate::output::ClaimDevicesByClaimCodeOutput::claim_code): <p>The claim code provided by the device manufacturer.</p>
    ///   - [`total(i32)`](crate::output::ClaimDevicesByClaimCodeOutput::total): <p>The total number of devices associated with the claim code that has been processed in the claim request.</p>
    /// - On failure, responds with [`SdkError<ClaimDevicesByClaimCodeError>`](crate::error::ClaimDevicesByClaimCodeError)
    pub fn claim_devices_by_claim_code(
        &self,
    ) -> crate::client::fluent_builders::ClaimDevicesByClaimCode {
        crate::client::fluent_builders::ClaimDevicesByClaimCode::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDevice`](crate::client::fluent_builders::DescribeDevice) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::DescribeDevice::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::DescribeDevice::set_device_id): <p>The unique identifier of the device.</p>
    /// - On success, responds with [`DescribeDeviceOutput`](crate::output::DescribeDeviceOutput) with field(s):
    ///   - [`device_description(Option<DeviceDescription>)`](crate::output::DescribeDeviceOutput::device_description): <p>Device details.</p>
    /// - On failure, responds with [`SdkError<DescribeDeviceError>`](crate::error::DescribeDeviceError)
    pub fn describe_device(&self) -> crate::client::fluent_builders::DescribeDevice {
        crate::client::fluent_builders::DescribeDevice::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`FinalizeDeviceClaim`](crate::client::fluent_builders::FinalizeDeviceClaim) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::FinalizeDeviceClaim::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::FinalizeDeviceClaim::set_device_id): <p>The unique identifier of the device.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::FinalizeDeviceClaim::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::FinalizeDeviceClaim::set_tags): <p>A collection of key/value pairs defining the resource tags. For example, { "tags": {"key1": "value1", "key2": "value2"} }. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS Tagging Strategies</a>.</p> <p> </p>
    /// - On success, responds with [`FinalizeDeviceClaimOutput`](crate::output::FinalizeDeviceClaimOutput) with field(s):
    ///   - [`state(Option<String>)`](crate::output::FinalizeDeviceClaimOutput::state): <p>The device's final claim state.</p>
    /// - On failure, responds with [`SdkError<FinalizeDeviceClaimError>`](crate::error::FinalizeDeviceClaimError)
    pub fn finalize_device_claim(&self) -> crate::client::fluent_builders::FinalizeDeviceClaim {
        crate::client::fluent_builders::FinalizeDeviceClaim::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDeviceMethods`](crate::client::fluent_builders::GetDeviceMethods) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::GetDeviceMethods::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::GetDeviceMethods::set_device_id): <p>The unique identifier of the device.</p>
    /// - On success, responds with [`GetDeviceMethodsOutput`](crate::output::GetDeviceMethodsOutput) with field(s):
    ///   - [`device_methods(Option<Vec<DeviceMethod>>)`](crate::output::GetDeviceMethodsOutput::device_methods): <p>List of available device APIs.</p>
    /// - On failure, responds with [`SdkError<GetDeviceMethodsError>`](crate::error::GetDeviceMethodsError)
    pub fn get_device_methods(&self) -> crate::client::fluent_builders::GetDeviceMethods {
        crate::client::fluent_builders::GetDeviceMethods::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`InitiateDeviceClaim`](crate::client::fluent_builders::InitiateDeviceClaim) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::InitiateDeviceClaim::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::InitiateDeviceClaim::set_device_id): <p>The unique identifier of the device.</p>
    /// - On success, responds with [`InitiateDeviceClaimOutput`](crate::output::InitiateDeviceClaimOutput) with field(s):
    ///   - [`state(Option<String>)`](crate::output::InitiateDeviceClaimOutput::state): <p>The device's final claim state.</p>
    /// - On failure, responds with [`SdkError<InitiateDeviceClaimError>`](crate::error::InitiateDeviceClaimError)
    pub fn initiate_device_claim(&self) -> crate::client::fluent_builders::InitiateDeviceClaim {
        crate::client::fluent_builders::InitiateDeviceClaim::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`InvokeDeviceMethod`](crate::client::fluent_builders::InvokeDeviceMethod) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::InvokeDeviceMethod::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::InvokeDeviceMethod::set_device_id): <p>The unique identifier of the device.</p>
    ///   - [`device_method(DeviceMethod)`](crate::client::fluent_builders::InvokeDeviceMethod::device_method) / [`set_device_method(Option<DeviceMethod>)`](crate::client::fluent_builders::InvokeDeviceMethod::set_device_method): <p>The device method to invoke.</p>
    ///   - [`device_method_parameters(impl Into<String>)`](crate::client::fluent_builders::InvokeDeviceMethod::device_method_parameters) / [`set_device_method_parameters(Option<String>)`](crate::client::fluent_builders::InvokeDeviceMethod::set_device_method_parameters): <p>A JSON encoded string containing the device method request parameters.</p>
    /// - On success, responds with [`InvokeDeviceMethodOutput`](crate::output::InvokeDeviceMethodOutput) with field(s):
    ///   - [`device_method_response(Option<String>)`](crate::output::InvokeDeviceMethodOutput::device_method_response): <p>A JSON encoded string containing the device method response.</p>
    /// - On failure, responds with [`SdkError<InvokeDeviceMethodError>`](crate::error::InvokeDeviceMethodError)
    pub fn invoke_device_method(&self) -> crate::client::fluent_builders::InvokeDeviceMethod {
        crate::client::fluent_builders::InvokeDeviceMethod::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDeviceEvents`](crate::client::fluent_builders::ListDeviceEvents) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::ListDeviceEvents::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::ListDeviceEvents::set_device_id): <p>The unique identifier of the device.</p>
    ///   - [`from_time_stamp(DateTime)`](crate::client::fluent_builders::ListDeviceEvents::from_time_stamp) / [`set_from_time_stamp(Option<DateTime>)`](crate::client::fluent_builders::ListDeviceEvents::set_from_time_stamp): <p>The start date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDeviceEvents::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListDeviceEvents::set_max_results): <p>The maximum number of results to return per request. If not set, a default value of 100 is used.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDeviceEvents::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDeviceEvents::set_next_token): <p>The token to retrieve the next set of results.</p>
    ///   - [`to_time_stamp(DateTime)`](crate::client::fluent_builders::ListDeviceEvents::to_time_stamp) / [`set_to_time_stamp(Option<DateTime>)`](crate::client::fluent_builders::ListDeviceEvents::set_to_time_stamp): <p>The end date for the device event query, in ISO8061 format. For example, 2018-03-28T15:45:12.880Z </p>
    /// - On success, responds with [`ListDeviceEventsOutput`](crate::output::ListDeviceEventsOutput) with field(s):
    ///   - [`events(Option<Vec<DeviceEvent>>)`](crate::output::ListDeviceEventsOutput::events): <p>An array of zero or more elements describing the event(s) associated with the device.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDeviceEventsOutput::next_token): <p>The token to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListDeviceEventsError>`](crate::error::ListDeviceEventsError)
    pub fn list_device_events(&self) -> crate::client::fluent_builders::ListDeviceEvents {
        crate::client::fluent_builders::ListDeviceEvents::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDevices`](crate::client::fluent_builders::ListDevices) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_type(impl Into<String>)`](crate::client::fluent_builders::ListDevices::device_type) / [`set_device_type(Option<String>)`](crate::client::fluent_builders::ListDevices::set_device_type): <p>The type of the device, such as "button".</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDevices::max_results) / [`set_max_results(i32)`](crate::client::fluent_builders::ListDevices::set_max_results): <p>The maximum number of results to return per request. If not set, a default value of 100 is used.</p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDevices::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDevices::set_next_token): <p>The token to retrieve the next set of results.</p>
    /// - On success, responds with [`ListDevicesOutput`](crate::output::ListDevicesOutput) with field(s):
    ///   - [`devices(Option<Vec<DeviceDescription>>)`](crate::output::ListDevicesOutput::devices): <p>A list of devices.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDevicesOutput::next_token): <p>The token to retrieve the next set of results.</p>
    /// - On failure, responds with [`SdkError<ListDevicesError>`](crate::error::ListDevicesError)
    pub fn list_devices(&self) -> crate::client::fluent_builders::ListDevices {
        crate::client::fluent_builders::ListDevices::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::ListTagsForResourceOutput::tags): <p>A collection of key/value pairs defining the resource tags. For example, { "tags": {"key1": "value1", "key2": "value2"} }. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS Tagging Strategies</a>.</p> <p> </p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>A collection of key/value pairs defining the resource tags. For example, { "tags": {"key1": "value1", "key2": "value2"} }. For more information, see <a href="https://aws.amazon.com/answers/account-management/aws-tagging-strategies/">AWS Tagging Strategies</a>.</p> <p> </p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UnclaimDevice`](crate::client::fluent_builders::UnclaimDevice) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::UnclaimDevice::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::UnclaimDevice::set_device_id): <p>The unique identifier of the device.</p>
    /// - On success, responds with [`UnclaimDeviceOutput`](crate::output::UnclaimDeviceOutput) with field(s):
    ///   - [`state(Option<String>)`](crate::output::UnclaimDeviceOutput::state): <p>The device's final claim state.</p>
    /// - On failure, responds with [`SdkError<UnclaimDeviceError>`](crate::error::UnclaimDeviceError)
    pub fn unclaim_device(&self) -> crate::client::fluent_builders::UnclaimDevice {
        crate::client::fluent_builders::UnclaimDevice::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A collections of tag keys. For example, {"key1","key2"}</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateDeviceState`](crate::client::fluent_builders::UpdateDeviceState) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`device_id(impl Into<String>)`](crate::client::fluent_builders::UpdateDeviceState::device_id) / [`set_device_id(Option<String>)`](crate::client::fluent_builders::UpdateDeviceState::set_device_id): <p>The unique identifier of the device.</p>
    ///   - [`enabled(bool)`](crate::client::fluent_builders::UpdateDeviceState::enabled) / [`set_enabled(bool)`](crate::client::fluent_builders::UpdateDeviceState::set_enabled): <p>If true, the device is enabled. If false, the device is disabled.</p>
    /// - On success, responds with [`UpdateDeviceStateOutput`](crate::output::UpdateDeviceStateOutput)

    /// - On failure, responds with [`SdkError<UpdateDeviceStateError>`](crate::error::UpdateDeviceStateError)
    pub fn update_device_state(&self) -> crate::client::fluent_builders::UpdateDeviceState {
        crate::client::fluent_builders::UpdateDeviceState::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
