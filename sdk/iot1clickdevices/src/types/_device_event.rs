// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceEvent {
    /// <p>An object representing the device associated with the event.</p>
    #[doc(hidden)]
    pub device: std::option::Option<crate::types::Device>,
    /// <p>A serialized JSON object representing the device-type specific event.</p>
    #[doc(hidden)]
    pub std_event: std::option::Option<std::string::String>,
}
impl DeviceEvent {
    /// <p>An object representing the device associated with the event.</p>
    pub fn device(&self) -> std::option::Option<&crate::types::Device> {
        self.device.as_ref()
    }
    /// <p>A serialized JSON object representing the device-type specific event.</p>
    pub fn std_event(&self) -> std::option::Option<&str> {
        self.std_event.as_deref()
    }
}
impl DeviceEvent {
    /// Creates a new builder-style object to manufacture [`DeviceEvent`](crate::types::DeviceEvent).
    pub fn builder() -> crate::types::builders::DeviceEventBuilder {
        crate::types::builders::DeviceEventBuilder::default()
    }
}

/// A builder for [`DeviceEvent`](crate::types::DeviceEvent).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceEventBuilder {
    pub(crate) device: std::option::Option<crate::types::Device>,
    pub(crate) std_event: std::option::Option<std::string::String>,
}
impl DeviceEventBuilder {
    /// <p>An object representing the device associated with the event.</p>
    pub fn device(mut self, input: crate::types::Device) -> Self {
        self.device = Some(input);
        self
    }
    /// <p>An object representing the device associated with the event.</p>
    pub fn set_device(mut self, input: std::option::Option<crate::types::Device>) -> Self {
        self.device = input;
        self
    }
    /// <p>A serialized JSON object representing the device-type specific event.</p>
    pub fn std_event(mut self, input: impl Into<std::string::String>) -> Self {
        self.std_event = Some(input.into());
        self
    }
    /// <p>A serialized JSON object representing the device-type specific event.</p>
    pub fn set_std_event(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.std_event = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceEvent`](crate::types::DeviceEvent).
    pub fn build(self) -> crate::types::DeviceEvent {
        crate::types::DeviceEvent {
            device: self.device,
            std_event: self.std_event,
        }
    }
}
