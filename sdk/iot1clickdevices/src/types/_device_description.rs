// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceDescription {
    /// <p>The ARN of the device.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>An array of zero or more elements of DeviceAttribute objects providing user specified device attributes.</p>
    #[doc(hidden)]
    pub attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The unique identifier of the device.</p>
    #[doc(hidden)]
    pub device_id: std::option::Option<std::string::String>,
    /// <p>A Boolean value indicating whether or not the device is enabled.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>A value between 0 and 1 inclusive, representing the fraction of life remaining for the device.</p>
    #[doc(hidden)]
    pub remaining_life: f64,
    /// <p>The type of the device, such as "button".</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
    /// <p>The tags currently associated with the AWS IoT 1-Click device.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DeviceDescription {
    /// <p>The ARN of the device.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>An array of zero or more elements of DeviceAttribute objects providing user specified device attributes.</p>
    pub fn attributes(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attributes.as_ref()
    }
    /// <p>The unique identifier of the device.</p>
    pub fn device_id(&self) -> std::option::Option<&str> {
        self.device_id.as_deref()
    }
    /// <p>A Boolean value indicating whether or not the device is enabled.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>A value between 0 and 1 inclusive, representing the fraction of life remaining for the device.</p>
    pub fn remaining_life(&self) -> f64 {
        self.remaining_life
    }
    /// <p>The type of the device, such as "button".</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
    /// <p>The tags currently associated with the AWS IoT 1-Click device.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl DeviceDescription {
    /// Creates a new builder-style object to manufacture [`DeviceDescription`](crate::types::DeviceDescription).
    pub fn builder() -> crate::types::builders::DeviceDescriptionBuilder {
        crate::types::builders::DeviceDescriptionBuilder::default()
    }
}

/// A builder for [`DeviceDescription`](crate::types::DeviceDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceDescriptionBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) attributes:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) device_id: std::option::Option<std::string::String>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) remaining_life: std::option::Option<f64>,
    pub(crate) r#type: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DeviceDescriptionBuilder {
    /// <p>The ARN of the device.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The ARN of the device.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// Adds a key-value pair to `attributes`.
    ///
    /// To override the contents of this collection use [`set_attributes`](Self::set_attributes).
    ///
    /// <p>An array of zero or more elements of DeviceAttribute objects providing user specified device attributes.</p>
    pub fn attributes(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attributes.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attributes = Some(hash_map);
        self
    }
    /// <p>An array of zero or more elements of DeviceAttribute objects providing user specified device attributes.</p>
    pub fn set_attributes(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The unique identifier of the device.</p>
    pub fn device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the device.</p>
    pub fn set_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>A Boolean value indicating whether or not the device is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>A Boolean value indicating whether or not the device is enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>A value between 0 and 1 inclusive, representing the fraction of life remaining for the device.</p>
    pub fn remaining_life(mut self, input: f64) -> Self {
        self.remaining_life = Some(input);
        self
    }
    /// <p>A value between 0 and 1 inclusive, representing the fraction of life remaining for the device.</p>
    pub fn set_remaining_life(mut self, input: std::option::Option<f64>) -> Self {
        self.remaining_life = input;
        self
    }
    /// <p>The type of the device, such as "button".</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The type of the device, such as "button".</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags currently associated with the AWS IoT 1-Click device.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags currently associated with the AWS IoT 1-Click device.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceDescription`](crate::types::DeviceDescription).
    pub fn build(self) -> crate::types::DeviceDescription {
        crate::types::DeviceDescription {
            arn: self.arn,
            attributes: self.attributes,
            device_id: self.device_id,
            enabled: self.enabled.unwrap_or_default(),
            remaining_life: self.remaining_life.unwrap_or_default(),
            r#type: self.r#type,
            tags: self.tags,
        }
    }
}
