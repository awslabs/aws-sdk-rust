// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Device {
    /// <p>The user specified attributes associated with the device for an event.</p>
    #[doc(hidden)]
    pub attributes: std::option::Option<crate::types::Attributes>,
    /// <p>The unique identifier of the device.</p>
    #[doc(hidden)]
    pub device_id: std::option::Option<std::string::String>,
    /// <p>The device type, such as "button".</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<std::string::String>,
}
impl Device {
    /// <p>The user specified attributes associated with the device for an event.</p>
    pub fn attributes(&self) -> std::option::Option<&crate::types::Attributes> {
        self.attributes.as_ref()
    }
    /// <p>The unique identifier of the device.</p>
    pub fn device_id(&self) -> std::option::Option<&str> {
        self.device_id.as_deref()
    }
    /// <p>The device type, such as "button".</p>
    pub fn r#type(&self) -> std::option::Option<&str> {
        self.r#type.as_deref()
    }
}
impl Device {
    /// Creates a new builder-style object to manufacture [`Device`](crate::types::Device).
    pub fn builder() -> crate::types::builders::DeviceBuilder {
        crate::types::builders::DeviceBuilder::default()
    }
}

/// A builder for [`Device`](crate::types::Device).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceBuilder {
    pub(crate) attributes: std::option::Option<crate::types::Attributes>,
    pub(crate) device_id: std::option::Option<std::string::String>,
    pub(crate) r#type: std::option::Option<std::string::String>,
}
impl DeviceBuilder {
    /// <p>The user specified attributes associated with the device for an event.</p>
    pub fn attributes(mut self, input: crate::types::Attributes) -> Self {
        self.attributes = Some(input);
        self
    }
    /// <p>The user specified attributes associated with the device for an event.</p>
    pub fn set_attributes(mut self, input: std::option::Option<crate::types::Attributes>) -> Self {
        self.attributes = input;
        self
    }
    /// <p>The unique identifier of the device.</p>
    pub fn device_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the device.</p>
    pub fn set_device_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_id = input;
        self
    }
    /// <p>The device type, such as "button".</p>
    pub fn r#type(mut self, input: impl Into<std::string::String>) -> Self {
        self.r#type = Some(input.into());
        self
    }
    /// <p>The device type, such as "button".</p>
    pub fn set_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`Device`](crate::types::Device).
    pub fn build(self) -> crate::types::Device {
        crate::types::Device {
            attributes: self.attributes,
            device_id: self.device_id,
            r#type: self.r#type,
        }
    }
}
