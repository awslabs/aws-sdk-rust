// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeviceMethod {
    /// <p>The type of the device, such as "button".</p>
    #[doc(hidden)]
    pub device_type: std::option::Option<std::string::String>,
    /// <p>The name of the method applicable to the deviceType.</p>
    #[doc(hidden)]
    pub method_name: std::option::Option<std::string::String>,
}
impl DeviceMethod {
    /// <p>The type of the device, such as "button".</p>
    pub fn device_type(&self) -> std::option::Option<&str> {
        self.device_type.as_deref()
    }
    /// <p>The name of the method applicable to the deviceType.</p>
    pub fn method_name(&self) -> std::option::Option<&str> {
        self.method_name.as_deref()
    }
}
impl DeviceMethod {
    /// Creates a new builder-style object to manufacture [`DeviceMethod`](crate::types::DeviceMethod).
    pub fn builder() -> crate::types::builders::DeviceMethodBuilder {
        crate::types::builders::DeviceMethodBuilder::default()
    }
}

/// A builder for [`DeviceMethod`](crate::types::DeviceMethod).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeviceMethodBuilder {
    pub(crate) device_type: std::option::Option<std::string::String>,
    pub(crate) method_name: std::option::Option<std::string::String>,
}
impl DeviceMethodBuilder {
    /// <p>The type of the device, such as "button".</p>
    pub fn device_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_type = Some(input.into());
        self
    }
    /// <p>The type of the device, such as "button".</p>
    pub fn set_device_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_type = input;
        self
    }
    /// <p>The name of the method applicable to the deviceType.</p>
    pub fn method_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.method_name = Some(input.into());
        self
    }
    /// <p>The name of the method applicable to the deviceType.</p>
    pub fn set_method_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.method_name = input;
        self
    }
    /// Consumes the builder and constructs a [`DeviceMethod`](crate::types::DeviceMethod).
    pub fn build(self) -> crate::types::DeviceMethod {
        crate::types::DeviceMethod {
            device_type: self.device_type,
            method_name: self.method_name,
        }
    }
}
