// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Adds device(s) to your account (i.e., claim one or more devices) if and only if you
/// received a claim code with the device(s).</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ClaimDevicesByClaimCode {
    _private: (),
}
impl ClaimDevicesByClaimCode {
    /// Creates a new builder-style object to manufacture [`ClaimDevicesByClaimCodeInput`](crate::input::ClaimDevicesByClaimCodeInput)
    pub fn builder() -> crate::input::claim_devices_by_claim_code_input::Builder {
        crate::input::claim_devices_by_claim_code_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ClaimDevicesByClaimCode {
    type Output = std::result::Result<
        crate::output::ClaimDevicesByClaimCodeOutput,
        crate::error::ClaimDevicesByClaimCodeError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_claim_devices_by_claim_code_error(response)
        } else {
            crate::operation_deser::parse_claim_devices_by_claim_code_response(response)
        }
    }
}

/// <p>Given a device ID, returns a DescribeDeviceResponse object describing the
/// details of the device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DescribeDevice {
    _private: (),
}
impl DescribeDevice {
    /// Creates a new builder-style object to manufacture [`DescribeDeviceInput`](crate::input::DescribeDeviceInput)
    pub fn builder() -> crate::input::describe_device_input::Builder {
        crate::input::describe_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DescribeDevice {
    type Output =
        std::result::Result<crate::output::DescribeDeviceOutput, crate::error::DescribeDeviceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_describe_device_error(response)
        } else {
            crate::operation_deser::parse_describe_device_response(response)
        }
    }
}

/// <p>Given a device ID, finalizes the claim request for the associated device.</p><note>
/// <p>Claiming a device consists of initiating a claim, then publishing a device event,
/// and finalizing the claim. For a device of type button, a device event can
/// be published by simply clicking the device.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct FinalizeDeviceClaim {
    _private: (),
}
impl FinalizeDeviceClaim {
    /// Creates a new builder-style object to manufacture [`FinalizeDeviceClaimInput`](crate::input::FinalizeDeviceClaimInput)
    pub fn builder() -> crate::input::finalize_device_claim_input::Builder {
        crate::input::finalize_device_claim_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for FinalizeDeviceClaim {
    type Output = std::result::Result<
        crate::output::FinalizeDeviceClaimOutput,
        crate::error::FinalizeDeviceClaimError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_finalize_device_claim_error(response)
        } else {
            crate::operation_deser::parse_finalize_device_claim_response(response)
        }
    }
}

/// <p>Given a device ID, returns the invokable methods associated with the device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetDeviceMethods {
    _private: (),
}
impl GetDeviceMethods {
    /// Creates a new builder-style object to manufacture [`GetDeviceMethodsInput`](crate::input::GetDeviceMethodsInput)
    pub fn builder() -> crate::input::get_device_methods_input::Builder {
        crate::input::get_device_methods_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetDeviceMethods {
    type Output = std::result::Result<
        crate::output::GetDeviceMethodsOutput,
        crate::error::GetDeviceMethodsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_device_methods_error(response)
        } else {
            crate::operation_deser::parse_get_device_methods_response(response)
        }
    }
}

/// <p>Given a device ID, initiates a claim request for the associated device.</p><note>
/// <p>Claiming a device consists of initiating a claim, then publishing a device event,
/// and finalizing the claim. For a device of type button, a device event can
/// be published by simply clicking the device.</p>
/// </note>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct InitiateDeviceClaim {
    _private: (),
}
impl InitiateDeviceClaim {
    /// Creates a new builder-style object to manufacture [`InitiateDeviceClaimInput`](crate::input::InitiateDeviceClaimInput)
    pub fn builder() -> crate::input::initiate_device_claim_input::Builder {
        crate::input::initiate_device_claim_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for InitiateDeviceClaim {
    type Output = std::result::Result<
        crate::output::InitiateDeviceClaimOutput,
        crate::error::InitiateDeviceClaimError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_initiate_device_claim_error(response)
        } else {
            crate::operation_deser::parse_initiate_device_claim_response(response)
        }
    }
}

/// <p>Given a device ID, issues a request to invoke a named device method (with possible
/// parameters). See the "Example POST" code snippet below.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct InvokeDeviceMethod {
    _private: (),
}
impl InvokeDeviceMethod {
    /// Creates a new builder-style object to manufacture [`InvokeDeviceMethodInput`](crate::input::InvokeDeviceMethodInput)
    pub fn builder() -> crate::input::invoke_device_method_input::Builder {
        crate::input::invoke_device_method_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for InvokeDeviceMethod {
    type Output = std::result::Result<
        crate::output::InvokeDeviceMethodOutput,
        crate::error::InvokeDeviceMethodError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_invoke_device_method_error(response)
        } else {
            crate::operation_deser::parse_invoke_device_method_response(response)
        }
    }
}

/// <p>Using a device ID, returns a DeviceEventsResponse object containing an
/// array of events for the device.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDeviceEvents {
    _private: (),
}
impl ListDeviceEvents {
    /// Creates a new builder-style object to manufacture [`ListDeviceEventsInput`](crate::input::ListDeviceEventsInput)
    pub fn builder() -> crate::input::list_device_events_input::Builder {
        crate::input::list_device_events_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDeviceEvents {
    type Output = std::result::Result<
        crate::output::ListDeviceEventsOutput,
        crate::error::ListDeviceEventsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_device_events_error(response)
        } else {
            crate::operation_deser::parse_list_device_events_response(response)
        }
    }
}

/// <p>Lists the 1-Click compatible devices associated with your AWS account.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListDevices {
    _private: (),
}
impl ListDevices {
    /// Creates a new builder-style object to manufacture [`ListDevicesInput`](crate::input::ListDevicesInput)
    pub fn builder() -> crate::input::list_devices_input::Builder {
        crate::input::list_devices_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListDevices {
    type Output =
        std::result::Result<crate::output::ListDevicesOutput, crate::error::ListDevicesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_devices_error(response)
        } else {
            crate::operation_deser::parse_list_devices_response(response)
        }
    }
}

/// <p>Lists the tags associated with the specified resource ARN.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput)
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_list_tags_for_resource_error(response)
        } else {
            crate::operation_deser::parse_list_tags_for_resource_response(response)
        }
    }
}

/// <p>Adds or updates the tags associated with the resource ARN. See <a href="https://docs.aws.amazon.com/iot-1-click/latest/developerguide/1click-appendix.html#1click-limits">AWS IoT 1-Click Service Limits</a> for the maximum number of tags allowed per
/// resource.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput)
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_tag_resource_error(response)
        } else {
            crate::operation_deser::parse_tag_resource_response(response)
        }
    }
}

/// <p>Disassociates a device from your AWS account using its device ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UnclaimDevice {
    _private: (),
}
impl UnclaimDevice {
    /// Creates a new builder-style object to manufacture [`UnclaimDeviceInput`](crate::input::UnclaimDeviceInput)
    pub fn builder() -> crate::input::unclaim_device_input::Builder {
        crate::input::unclaim_device_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UnclaimDevice {
    type Output =
        std::result::Result<crate::output::UnclaimDeviceOutput, crate::error::UnclaimDeviceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_unclaim_device_error(response)
        } else {
            crate::operation_deser::parse_unclaim_device_response(response)
        }
    }
}

/// <p>Using tag keys, deletes the tags (key/value pairs) associated with the specified
/// resource ARN.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput)
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::operation_deser::parse_untag_resource_error(response)
        } else {
            crate::operation_deser::parse_untag_resource_response(response)
        }
    }
}

/// <p>Using a Boolean value (true or false), this operation
/// enables or disables the device given a device ID.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateDeviceState {
    _private: (),
}
impl UpdateDeviceState {
    /// Creates a new builder-style object to manufacture [`UpdateDeviceStateInput`](crate::input::UpdateDeviceStateInput)
    pub fn builder() -> crate::input::update_device_state_input::Builder {
        crate::input::update_device_state_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for UpdateDeviceState {
    type Output = std::result::Result<
        crate::output::UpdateDeviceStateOutput,
        crate::error::UpdateDeviceStateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_update_device_state_error(response)
        } else {
            crate::operation_deser::parse_update_device_state_response(response)
        }
    }
}
