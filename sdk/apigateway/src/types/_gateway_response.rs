// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A gateway response of a given response type and status code, with optional response parameters and mapping templates.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GatewayResponse {
    /// <p>The response type of the associated GatewayResponse.</p>
    #[doc(hidden)]
    pub response_type: std::option::Option<crate::types::GatewayResponseType>,
    /// <p>The HTTP status code for this GatewayResponse.</p>
    #[doc(hidden)]
    pub status_code: std::option::Option<std::string::String>,
    /// <p>Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.</p>
    #[doc(hidden)]
    pub response_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Response templates of the GatewayResponse as a string-to-string map of key-value pairs.</p>
    #[doc(hidden)]
    pub response_templates:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. </p>
    #[doc(hidden)]
    pub default_response: bool,
}
impl GatewayResponse {
    /// <p>The response type of the associated GatewayResponse.</p>
    pub fn response_type(&self) -> std::option::Option<&crate::types::GatewayResponseType> {
        self.response_type.as_ref()
    }
    /// <p>The HTTP status code for this GatewayResponse.</p>
    pub fn status_code(&self) -> std::option::Option<&str> {
        self.status_code.as_deref()
    }
    /// <p>Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.</p>
    pub fn response_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.response_parameters.as_ref()
    }
    /// <p>Response templates of the GatewayResponse as a string-to-string map of key-value pairs.</p>
    pub fn response_templates(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.response_templates.as_ref()
    }
    /// <p>A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. </p>
    pub fn default_response(&self) -> bool {
        self.default_response
    }
}
impl GatewayResponse {
    /// Creates a new builder-style object to manufacture [`GatewayResponse`](crate::types::GatewayResponse).
    pub fn builder() -> crate::types::builders::GatewayResponseBuilder {
        crate::types::builders::GatewayResponseBuilder::default()
    }
}

/// A builder for [`GatewayResponse`](crate::types::GatewayResponse).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GatewayResponseBuilder {
    pub(crate) response_type: std::option::Option<crate::types::GatewayResponseType>,
    pub(crate) status_code: std::option::Option<std::string::String>,
    pub(crate) response_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) response_templates:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) default_response: std::option::Option<bool>,
}
impl GatewayResponseBuilder {
    /// <p>The response type of the associated GatewayResponse.</p>
    pub fn response_type(mut self, input: crate::types::GatewayResponseType) -> Self {
        self.response_type = Some(input);
        self
    }
    /// <p>The response type of the associated GatewayResponse.</p>
    pub fn set_response_type(
        mut self,
        input: std::option::Option<crate::types::GatewayResponseType>,
    ) -> Self {
        self.response_type = input;
        self
    }
    /// <p>The HTTP status code for this GatewayResponse.</p>
    pub fn status_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_code = Some(input.into());
        self
    }
    /// <p>The HTTP status code for this GatewayResponse.</p>
    pub fn set_status_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_code = input;
        self
    }
    /// Adds a key-value pair to `response_parameters`.
    ///
    /// To override the contents of this collection use [`set_response_parameters`](Self::set_response_parameters).
    ///
    /// <p>Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.</p>
    pub fn response_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.response_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.response_parameters = Some(hash_map);
        self
    }
    /// <p>Response parameters (paths, query strings and headers) of the GatewayResponse as a string-to-string map of key-value pairs.</p>
    pub fn set_response_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.response_parameters = input;
        self
    }
    /// Adds a key-value pair to `response_templates`.
    ///
    /// To override the contents of this collection use [`set_response_templates`](Self::set_response_templates).
    ///
    /// <p>Response templates of the GatewayResponse as a string-to-string map of key-value pairs.</p>
    pub fn response_templates(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.response_templates.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.response_templates = Some(hash_map);
        self
    }
    /// <p>Response templates of the GatewayResponse as a string-to-string map of key-value pairs.</p>
    pub fn set_response_templates(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.response_templates = input;
        self
    }
    /// <p>A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. </p>
    pub fn default_response(mut self, input: bool) -> Self {
        self.default_response = Some(input);
        self
    }
    /// <p>A Boolean flag to indicate whether this GatewayResponse is the default gateway response (<code>true</code>) or not (<code>false</code>). A default gateway response is one generated by API Gateway without any customization by an API developer. </p>
    pub fn set_default_response(mut self, input: std::option::Option<bool>) -> Self {
        self.default_response = input;
        self
    }
    /// Consumes the builder and constructs a [`GatewayResponse`](crate::types::GatewayResponse).
    pub fn build(self) -> crate::types::GatewayResponse {
        crate::types::GatewayResponse {
            response_type: self.response_type,
            status_code: self.status_code,
            response_parameters: self.response_parameters,
            response_templates: self.response_templates,
            default_response: self.default_response.unwrap_or_default(),
        }
    }
}
