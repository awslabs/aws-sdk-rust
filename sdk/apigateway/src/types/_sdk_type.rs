// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A type of SDK that API Gateway can generate.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SdkType {
    /// <p>The identifier of an SdkType instance.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The user-friendly name of an SdkType instance.</p>
    #[doc(hidden)]
    pub friendly_name: std::option::Option<std::string::String>,
    /// <p>The description of an SdkType.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A list of configuration properties of an SdkType.</p>
    #[doc(hidden)]
    pub configuration_properties:
        std::option::Option<std::vec::Vec<crate::types::SdkConfigurationProperty>>,
}
impl SdkType {
    /// <p>The identifier of an SdkType instance.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The user-friendly name of an SdkType instance.</p>
    pub fn friendly_name(&self) -> std::option::Option<&str> {
        self.friendly_name.as_deref()
    }
    /// <p>The description of an SdkType.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A list of configuration properties of an SdkType.</p>
    pub fn configuration_properties(
        &self,
    ) -> std::option::Option<&[crate::types::SdkConfigurationProperty]> {
        self.configuration_properties.as_deref()
    }
}
impl SdkType {
    /// Creates a new builder-style object to manufacture [`SdkType`](crate::types::SdkType).
    pub fn builder() -> crate::types::builders::SdkTypeBuilder {
        crate::types::builders::SdkTypeBuilder::default()
    }
}

/// A builder for [`SdkType`](crate::types::SdkType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SdkTypeBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) friendly_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) configuration_properties:
        std::option::Option<std::vec::Vec<crate::types::SdkConfigurationProperty>>,
}
impl SdkTypeBuilder {
    /// <p>The identifier of an SdkType instance.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The identifier of an SdkType instance.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The user-friendly name of an SdkType instance.</p>
    pub fn friendly_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.friendly_name = Some(input.into());
        self
    }
    /// <p>The user-friendly name of an SdkType instance.</p>
    pub fn set_friendly_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.friendly_name = input;
        self
    }
    /// <p>The description of an SdkType.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of an SdkType.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Appends an item to `configuration_properties`.
    ///
    /// To override the contents of this collection use [`set_configuration_properties`](Self::set_configuration_properties).
    ///
    /// <p>A list of configuration properties of an SdkType.</p>
    pub fn configuration_properties(
        mut self,
        input: crate::types::SdkConfigurationProperty,
    ) -> Self {
        let mut v = self.configuration_properties.unwrap_or_default();
        v.push(input);
        self.configuration_properties = Some(v);
        self
    }
    /// <p>A list of configuration properties of an SdkType.</p>
    pub fn set_configuration_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SdkConfigurationProperty>>,
    ) -> Self {
        self.configuration_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`SdkType`](crate::types::SdkType).
    pub fn build(self) -> crate::types::SdkType {
        crate::types::SdkType {
            id: self.id,
            friendly_name: self.friendly_name,
            description: self.description,
            configuration_properties: self.configuration_properties,
        }
    }
}
