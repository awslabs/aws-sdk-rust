// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A configuration property of an SDK type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SdkConfigurationProperty {
    /// <p>The name of a an SdkType configuration property.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The user-friendly name of an SdkType configuration property.</p>
    #[doc(hidden)]
    pub friendly_name: std::option::Option<std::string::String>,
    /// <p>The description of an SdkType configuration property.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (<code>true</code>) or not (<code>false</code>).</p>
    #[doc(hidden)]
    pub required: bool,
    /// <p>The default value of an SdkType configuration property.</p>
    #[doc(hidden)]
    pub default_value: std::option::Option<std::string::String>,
}
impl SdkConfigurationProperty {
    /// <p>The name of a an SdkType configuration property.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The user-friendly name of an SdkType configuration property.</p>
    pub fn friendly_name(&self) -> std::option::Option<&str> {
        self.friendly_name.as_deref()
    }
    /// <p>The description of an SdkType configuration property.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (<code>true</code>) or not (<code>false</code>).</p>
    pub fn required(&self) -> bool {
        self.required
    }
    /// <p>The default value of an SdkType configuration property.</p>
    pub fn default_value(&self) -> std::option::Option<&str> {
        self.default_value.as_deref()
    }
}
impl SdkConfigurationProperty {
    /// Creates a new builder-style object to manufacture [`SdkConfigurationProperty`](crate::types::SdkConfigurationProperty).
    pub fn builder() -> crate::types::builders::SdkConfigurationPropertyBuilder {
        crate::types::builders::SdkConfigurationPropertyBuilder::default()
    }
}

/// A builder for [`SdkConfigurationProperty`](crate::types::SdkConfigurationProperty).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SdkConfigurationPropertyBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) friendly_name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) required: std::option::Option<bool>,
    pub(crate) default_value: std::option::Option<std::string::String>,
}
impl SdkConfigurationPropertyBuilder {
    /// <p>The name of a an SdkType configuration property.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of a an SdkType configuration property.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The user-friendly name of an SdkType configuration property.</p>
    pub fn friendly_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.friendly_name = Some(input.into());
        self
    }
    /// <p>The user-friendly name of an SdkType configuration property.</p>
    pub fn set_friendly_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.friendly_name = input;
        self
    }
    /// <p>The description of an SdkType configuration property.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of an SdkType configuration property.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (<code>true</code>) or not (<code>false</code>).</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = Some(input);
        self
    }
    /// <p>A boolean flag of an SdkType configuration property to indicate if the associated SDK configuration property is required (<code>true</code>) or not (<code>false</code>).</p>
    pub fn set_required(mut self, input: std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>The default value of an SdkType configuration property.</p>
    pub fn default_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_value = Some(input.into());
        self
    }
    /// <p>The default value of an SdkType configuration property.</p>
    pub fn set_default_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.default_value = input;
        self
    }
    /// Consumes the builder and constructs a [`SdkConfigurationProperty`](crate::types::SdkConfigurationProperty).
    pub fn build(self) -> crate::types::SdkConfigurationProperty {
        crate::types::SdkConfigurationProperty {
            name: self.name,
            friendly_name: self.friendly_name,
            description: self.description,
            required: self.required.unwrap_or_default(),
            default_value: self.default_value,
        }
    }
}
