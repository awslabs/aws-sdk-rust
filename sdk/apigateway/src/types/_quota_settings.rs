// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Quotas configured for a usage plan.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct QuotaSettings {
    /// <p>The target maximum number of requests that can be made in a given time period.</p>
    #[doc(hidden)]
    pub limit: i32,
    /// <p>The number of requests subtracted from the given limit in the initial time period.</p>
    #[doc(hidden)]
    pub offset: i32,
    /// <p>The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".</p>
    #[doc(hidden)]
    pub period: std::option::Option<crate::types::QuotaPeriodType>,
}
impl QuotaSettings {
    /// <p>The target maximum number of requests that can be made in a given time period.</p>
    pub fn limit(&self) -> i32 {
        self.limit
    }
    /// <p>The number of requests subtracted from the given limit in the initial time period.</p>
    pub fn offset(&self) -> i32 {
        self.offset
    }
    /// <p>The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".</p>
    pub fn period(&self) -> std::option::Option<&crate::types::QuotaPeriodType> {
        self.period.as_ref()
    }
}
impl QuotaSettings {
    /// Creates a new builder-style object to manufacture [`QuotaSettings`](crate::types::QuotaSettings).
    pub fn builder() -> crate::types::builders::QuotaSettingsBuilder {
        crate::types::builders::QuotaSettingsBuilder::default()
    }
}

/// A builder for [`QuotaSettings`](crate::types::QuotaSettings).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct QuotaSettingsBuilder {
    pub(crate) limit: std::option::Option<i32>,
    pub(crate) offset: std::option::Option<i32>,
    pub(crate) period: std::option::Option<crate::types::QuotaPeriodType>,
}
impl QuotaSettingsBuilder {
    /// <p>The target maximum number of requests that can be made in a given time period.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>The target maximum number of requests that can be made in a given time period.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The number of requests subtracted from the given limit in the initial time period.</p>
    pub fn offset(mut self, input: i32) -> Self {
        self.offset = Some(input);
        self
    }
    /// <p>The number of requests subtracted from the given limit in the initial time period.</p>
    pub fn set_offset(mut self, input: std::option::Option<i32>) -> Self {
        self.offset = input;
        self
    }
    /// <p>The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".</p>
    pub fn period(mut self, input: crate::types::QuotaPeriodType) -> Self {
        self.period = Some(input);
        self
    }
    /// <p>The time period in which the limit applies. Valid values are "DAY", "WEEK" or "MONTH".</p>
    pub fn set_period(mut self, input: std::option::Option<crate::types::QuotaPeriodType>) -> Self {
        self.period = input;
        self
    }
    /// Consumes the builder and constructs a [`QuotaSettings`](crate::types::QuotaSettings).
    pub fn build(self) -> crate::types::QuotaSettings {
        crate::types::QuotaSettings {
            limit: self.limit.unwrap_or_default(),
            offset: self.offset.unwrap_or_default(),
            period: self.period,
        }
    }
}
