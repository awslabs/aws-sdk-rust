// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `GatewayResponseType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let gatewayresponsetype = unimplemented!();
/// match gatewayresponsetype {
///     GatewayResponseType::AccessDenied => { /* ... */ },
///     GatewayResponseType::ApiConfigurationError => { /* ... */ },
///     GatewayResponseType::AuthorizerConfigurationError => { /* ... */ },
///     GatewayResponseType::AuthorizerFailure => { /* ... */ },
///     GatewayResponseType::BadRequestBody => { /* ... */ },
///     GatewayResponseType::BadRequestParameters => { /* ... */ },
///     GatewayResponseType::Default4Xx => { /* ... */ },
///     GatewayResponseType::Default5Xx => { /* ... */ },
///     GatewayResponseType::ExpiredToken => { /* ... */ },
///     GatewayResponseType::IntegrationFailure => { /* ... */ },
///     GatewayResponseType::IntegrationTimeout => { /* ... */ },
///     GatewayResponseType::InvalidApiKey => { /* ... */ },
///     GatewayResponseType::InvalidSignature => { /* ... */ },
///     GatewayResponseType::MissingAuthenticationToken => { /* ... */ },
///     GatewayResponseType::QuotaExceeded => { /* ... */ },
///     GatewayResponseType::RequestTooLarge => { /* ... */ },
///     GatewayResponseType::ResourceNotFound => { /* ... */ },
///     GatewayResponseType::Throttled => { /* ... */ },
///     GatewayResponseType::Unauthorized => { /* ... */ },
///     GatewayResponseType::UnsupportedMediaType => { /* ... */ },
///     GatewayResponseType::WafFiltered => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `gatewayresponsetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `GatewayResponseType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `GatewayResponseType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `GatewayResponseType::NewFeature` is defined.
/// Specifically, when `gatewayresponsetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `GatewayResponseType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum GatewayResponseType {
    #[allow(missing_docs)] // documentation missing in model
    AccessDenied,
    #[allow(missing_docs)] // documentation missing in model
    ApiConfigurationError,
    #[allow(missing_docs)] // documentation missing in model
    AuthorizerConfigurationError,
    #[allow(missing_docs)] // documentation missing in model
    AuthorizerFailure,
    #[allow(missing_docs)] // documentation missing in model
    BadRequestBody,
    #[allow(missing_docs)] // documentation missing in model
    BadRequestParameters,
    #[allow(missing_docs)] // documentation missing in model
    Default4Xx,
    #[allow(missing_docs)] // documentation missing in model
    Default5Xx,
    #[allow(missing_docs)] // documentation missing in model
    ExpiredToken,
    #[allow(missing_docs)] // documentation missing in model
    IntegrationFailure,
    #[allow(missing_docs)] // documentation missing in model
    IntegrationTimeout,
    #[allow(missing_docs)] // documentation missing in model
    InvalidApiKey,
    #[allow(missing_docs)] // documentation missing in model
    InvalidSignature,
    #[allow(missing_docs)] // documentation missing in model
    MissingAuthenticationToken,
    #[allow(missing_docs)] // documentation missing in model
    QuotaExceeded,
    #[allow(missing_docs)] // documentation missing in model
    RequestTooLarge,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    Throttled,
    #[allow(missing_docs)] // documentation missing in model
    Unauthorized,
    #[allow(missing_docs)] // documentation missing in model
    UnsupportedMediaType,
    #[allow(missing_docs)] // documentation missing in model
    WafFiltered,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for GatewayResponseType {
    fn from(s: &str) -> Self {
        match s {
            "ACCESS_DENIED" => GatewayResponseType::AccessDenied,
            "API_CONFIGURATION_ERROR" => GatewayResponseType::ApiConfigurationError,
            "AUTHORIZER_CONFIGURATION_ERROR" => GatewayResponseType::AuthorizerConfigurationError,
            "AUTHORIZER_FAILURE" => GatewayResponseType::AuthorizerFailure,
            "BAD_REQUEST_BODY" => GatewayResponseType::BadRequestBody,
            "BAD_REQUEST_PARAMETERS" => GatewayResponseType::BadRequestParameters,
            "DEFAULT_4XX" => GatewayResponseType::Default4Xx,
            "DEFAULT_5XX" => GatewayResponseType::Default5Xx,
            "EXPIRED_TOKEN" => GatewayResponseType::ExpiredToken,
            "INTEGRATION_FAILURE" => GatewayResponseType::IntegrationFailure,
            "INTEGRATION_TIMEOUT" => GatewayResponseType::IntegrationTimeout,
            "INVALID_API_KEY" => GatewayResponseType::InvalidApiKey,
            "INVALID_SIGNATURE" => GatewayResponseType::InvalidSignature,
            "MISSING_AUTHENTICATION_TOKEN" => GatewayResponseType::MissingAuthenticationToken,
            "QUOTA_EXCEEDED" => GatewayResponseType::QuotaExceeded,
            "REQUEST_TOO_LARGE" => GatewayResponseType::RequestTooLarge,
            "RESOURCE_NOT_FOUND" => GatewayResponseType::ResourceNotFound,
            "THROTTLED" => GatewayResponseType::Throttled,
            "UNAUTHORIZED" => GatewayResponseType::Unauthorized,
            "UNSUPPORTED_MEDIA_TYPE" => GatewayResponseType::UnsupportedMediaType,
            "WAF_FILTERED" => GatewayResponseType::WafFiltered,
            other => GatewayResponseType::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for GatewayResponseType {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(GatewayResponseType::from(s))
    }
}
impl GatewayResponseType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            GatewayResponseType::AccessDenied => "ACCESS_DENIED",
            GatewayResponseType::ApiConfigurationError => "API_CONFIGURATION_ERROR",
            GatewayResponseType::AuthorizerConfigurationError => "AUTHORIZER_CONFIGURATION_ERROR",
            GatewayResponseType::AuthorizerFailure => "AUTHORIZER_FAILURE",
            GatewayResponseType::BadRequestBody => "BAD_REQUEST_BODY",
            GatewayResponseType::BadRequestParameters => "BAD_REQUEST_PARAMETERS",
            GatewayResponseType::Default4Xx => "DEFAULT_4XX",
            GatewayResponseType::Default5Xx => "DEFAULT_5XX",
            GatewayResponseType::ExpiredToken => "EXPIRED_TOKEN",
            GatewayResponseType::IntegrationFailure => "INTEGRATION_FAILURE",
            GatewayResponseType::IntegrationTimeout => "INTEGRATION_TIMEOUT",
            GatewayResponseType::InvalidApiKey => "INVALID_API_KEY",
            GatewayResponseType::InvalidSignature => "INVALID_SIGNATURE",
            GatewayResponseType::MissingAuthenticationToken => "MISSING_AUTHENTICATION_TOKEN",
            GatewayResponseType::QuotaExceeded => "QUOTA_EXCEEDED",
            GatewayResponseType::RequestTooLarge => "REQUEST_TOO_LARGE",
            GatewayResponseType::ResourceNotFound => "RESOURCE_NOT_FOUND",
            GatewayResponseType::Throttled => "THROTTLED",
            GatewayResponseType::Unauthorized => "UNAUTHORIZED",
            GatewayResponseType::UnsupportedMediaType => "UNSUPPORTED_MEDIA_TYPE",
            GatewayResponseType::WafFiltered => "WAF_FILTERED",
            GatewayResponseType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ACCESS_DENIED",
            "API_CONFIGURATION_ERROR",
            "AUTHORIZER_CONFIGURATION_ERROR",
            "AUTHORIZER_FAILURE",
            "BAD_REQUEST_BODY",
            "BAD_REQUEST_PARAMETERS",
            "DEFAULT_4XX",
            "DEFAULT_5XX",
            "EXPIRED_TOKEN",
            "INTEGRATION_FAILURE",
            "INTEGRATION_TIMEOUT",
            "INVALID_API_KEY",
            "INVALID_SIGNATURE",
            "MISSING_AUTHENTICATION_TOKEN",
            "QUOTA_EXCEEDED",
            "REQUEST_TOO_LARGE",
            "RESOURCE_NOT_FOUND",
            "THROTTLED",
            "UNAUTHORIZED",
            "UNSUPPORTED_MEDIA_TYPE",
            "WAF_FILTERED",
        ]
    }
}
impl AsRef<str> for GatewayResponseType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
