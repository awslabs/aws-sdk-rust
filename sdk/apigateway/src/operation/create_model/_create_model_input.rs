// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request to add a new Model to an existing RestApi resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateModelInput {
    /// <p>The RestApi identifier under which the Model will be created.</p>
    #[doc(hidden)]
    pub rest_api_id: std::option::Option<std::string::String>,
    /// <p>The name of the model. Must be alphanumeric.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The description of the model.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.</p>
    #[doc(hidden)]
    pub schema: std::option::Option<std::string::String>,
    /// <p>The content-type for the model.</p>
    #[doc(hidden)]
    pub content_type: std::option::Option<std::string::String>,
}
impl CreateModelInput {
    /// <p>The RestApi identifier under which the Model will be created.</p>
    pub fn rest_api_id(&self) -> std::option::Option<&str> {
        self.rest_api_id.as_deref()
    }
    /// <p>The name of the model. Must be alphanumeric.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the model.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.</p>
    pub fn schema(&self) -> std::option::Option<&str> {
        self.schema.as_deref()
    }
    /// <p>The content-type for the model.</p>
    pub fn content_type(&self) -> std::option::Option<&str> {
        self.content_type.as_deref()
    }
}
impl CreateModelInput {
    /// Creates a new builder-style object to manufacture [`CreateModelInput`](crate::operation::create_model::CreateModelInput).
    pub fn builder() -> crate::operation::create_model::builders::CreateModelInputBuilder {
        crate::operation::create_model::builders::CreateModelInputBuilder::default()
    }
}

/// A builder for [`CreateModelInput`](crate::operation::create_model::CreateModelInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateModelInputBuilder {
    pub(crate) rest_api_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) schema: std::option::Option<std::string::String>,
    pub(crate) content_type: std::option::Option<std::string::String>,
}
impl CreateModelInputBuilder {
    /// <p>The RestApi identifier under which the Model will be created.</p>
    pub fn rest_api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rest_api_id = Some(input.into());
        self
    }
    /// <p>The RestApi identifier under which the Model will be created.</p>
    pub fn set_rest_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rest_api_id = input;
        self
    }
    /// <p>The name of the model. Must be alphanumeric.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the model. Must be alphanumeric.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The description of the model.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description of the model.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.</p>
    pub fn schema(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema = Some(input.into());
        self
    }
    /// <p>The schema for the model. For <code>application/json</code> models, this should be JSON schema draft 4 model.</p>
    pub fn set_schema(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema = input;
        self
    }
    /// <p>The content-type for the model.</p>
    pub fn content_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.content_type = Some(input.into());
        self
    }
    /// <p>The content-type for the model.</p>
    pub fn set_content_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateModelInput`](crate::operation::create_model::CreateModelInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_model::CreateModelInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_model::CreateModelInput {
            rest_api_id: self.rest_api_id,
            name: self.name,
            description: self.description,
            schema: self.schema,
            content_type: self.content_type,
        })
    }
}
