// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to get information about the current ApiKeys resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetApiKeysInput {
    /// <p>The current pagination position in the paged result set.</p>
    pub position: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>The name of queried API keys.</p>
    pub name_query: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of a customer in Amazon Web Services Marketplace or an external system, such as a developer portal.</p>
    pub customer_id: ::std::option::Option<::std::string::String>,
    /// <p>A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.</p>
    pub include_values: ::std::option::Option<bool>,
}
impl GetApiKeysInput {
    /// <p>The current pagination position in the paged result set.</p>
    pub fn position(&self) -> ::std::option::Option<&str> {
        self.position.as_deref()
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>The name of queried API keys.</p>
    pub fn name_query(&self) -> ::std::option::Option<&str> {
        self.name_query.as_deref()
    }
    /// <p>The identifier of a customer in Amazon Web Services Marketplace or an external system, such as a developer portal.</p>
    pub fn customer_id(&self) -> ::std::option::Option<&str> {
        self.customer_id.as_deref()
    }
    /// <p>A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.</p>
    pub fn include_values(&self) -> ::std::option::Option<bool> {
        self.include_values
    }
}
impl GetApiKeysInput {
    /// Creates a new builder-style object to manufacture [`GetApiKeysInput`](crate::operation::get_api_keys::GetApiKeysInput).
    pub fn builder() -> crate::operation::get_api_keys::builders::GetApiKeysInputBuilder {
        crate::operation::get_api_keys::builders::GetApiKeysInputBuilder::default()
    }
}

/// A builder for [`GetApiKeysInput`](crate::operation::get_api_keys::GetApiKeysInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetApiKeysInputBuilder {
    pub(crate) position: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) name_query: ::std::option::Option<::std::string::String>,
    pub(crate) customer_id: ::std::option::Option<::std::string::String>,
    pub(crate) include_values: ::std::option::Option<bool>,
}
impl GetApiKeysInputBuilder {
    /// <p>The current pagination position in the paged result set.</p>
    pub fn position(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.position = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.position = input;
        self
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::string::String> {
        &self.position
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>The name of queried API keys.</p>
    pub fn name_query(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name_query = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of queried API keys.</p>
    pub fn set_name_query(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name_query = input;
        self
    }
    /// <p>The name of queried API keys.</p>
    pub fn get_name_query(&self) -> &::std::option::Option<::std::string::String> {
        &self.name_query
    }
    /// <p>The identifier of a customer in Amazon Web Services Marketplace or an external system, such as a developer portal.</p>
    pub fn customer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a customer in Amazon Web Services Marketplace or an external system, such as a developer portal.</p>
    pub fn set_customer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_id = input;
        self
    }
    /// <p>The identifier of a customer in Amazon Web Services Marketplace or an external system, such as a developer portal.</p>
    pub fn get_customer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_id
    }
    /// <p>A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.</p>
    pub fn include_values(mut self, input: bool) -> Self {
        self.include_values = ::std::option::Option::Some(input);
        self
    }
    /// <p>A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.</p>
    pub fn set_include_values(mut self, input: ::std::option::Option<bool>) -> Self {
        self.include_values = input;
        self
    }
    /// <p>A boolean flag to specify whether (<code>true</code>) or not (<code>false</code>) the result contains key values.</p>
    pub fn get_include_values(&self) -> &::std::option::Option<bool> {
        &self.include_values
    }
    /// Consumes the builder and constructs a [`GetApiKeysInput`](crate::operation::get_api_keys::GetApiKeysInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::get_api_keys::GetApiKeysInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_api_keys::GetApiKeysInput {
            position: self.position,
            limit: self.limit,
            name_query: self.name_query,
            customer_id: self.customer_id,
            include_values: self.include_values,
        })
    }
}
