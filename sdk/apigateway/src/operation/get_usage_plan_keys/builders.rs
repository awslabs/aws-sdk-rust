// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_usage_plan_keys::_get_usage_plan_keys_output::GetUsagePlanKeysOutputBuilder;

pub use crate::operation::get_usage_plan_keys::_get_usage_plan_keys_input::GetUsagePlanKeysInputBuilder;

/// Fluent builder constructing a request to `GetUsagePlanKeys`.
///
/// <p>Gets all the usage plan keys representing the API keys added to a specified usage plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetUsagePlanKeysFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_usage_plan_keys::builders::GetUsagePlanKeysInputBuilder,
}
impl GetUsagePlanKeysFluentBuilder {
    /// Creates a new `GetUsagePlanKeys`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_usage_plan_keys::GetUsagePlanKeys,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_usage_plan_keys::GetUsagePlanKeysError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_usage_plan_keys::GetUsagePlanKeysOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_usage_plan_keys::GetUsagePlanKeysError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::get_usage_plan_keys::paginator::GetUsagePlanKeysPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::get_usage_plan_keys::paginator::GetUsagePlanKeysPaginator {
        crate::operation::get_usage_plan_keys::paginator::GetUsagePlanKeysPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p>The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.</p>
    pub fn usage_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.usage_plan_id(input.into());
        self
    }
    /// <p>The Id of the UsagePlan resource representing the usage plan containing the to-be-retrieved UsagePlanKey resource representing a plan customer.</p>
    pub fn set_usage_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_usage_plan_id(input);
        self
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn position(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.position(input.into());
        self
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn set_position(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_position(input);
        self
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>The maximum number of returned results per page. The default value is 25 and the maximum value is 500.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>A query parameter specifying the name of the to-be-returned usage plan keys.</p>
    pub fn name_query(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.name_query(input.into());
        self
    }
    /// <p>A query parameter specifying the name of the to-be-returned usage plan keys.</p>
    pub fn set_name_query(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_name_query(input);
        self
    }
}
