// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a collection of ClientCertificate resources.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetClientCertificatesOutput {
    /// <p>The current page of elements from this collection.</p>
    pub items: ::std::option::Option<::std::vec::Vec<crate::types::ClientCertificate>>,
    /// <p>The current pagination position in the paged result set.</p>
    pub position: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetClientCertificatesOutput {
    /// <p>The current page of elements from this collection.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.items.is_none()`.
    pub fn items(&self) -> &[crate::types::ClientCertificate] {
        self.items.as_deref().unwrap_or_default()
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn position(&self) -> ::std::option::Option<&str> {
        self.position.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for GetClientCertificatesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetClientCertificatesOutput {
    /// Creates a new builder-style object to manufacture [`GetClientCertificatesOutput`](crate::operation::get_client_certificates::GetClientCertificatesOutput).
    pub fn builder() -> crate::operation::get_client_certificates::builders::GetClientCertificatesOutputBuilder {
        crate::operation::get_client_certificates::builders::GetClientCertificatesOutputBuilder::default()
    }
}

/// A builder for [`GetClientCertificatesOutput`](crate::operation::get_client_certificates::GetClientCertificatesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetClientCertificatesOutputBuilder {
    pub(crate) items: ::std::option::Option<::std::vec::Vec<crate::types::ClientCertificate>>,
    pub(crate) position: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetClientCertificatesOutputBuilder {
    /// Appends an item to `items`.
    ///
    /// To override the contents of this collection use [`set_items`](Self::set_items).
    ///
    /// <p>The current page of elements from this collection.</p>
    pub fn items(mut self, input: crate::types::ClientCertificate) -> Self {
        let mut v = self.items.unwrap_or_default();
        v.push(input);
        self.items = ::std::option::Option::Some(v);
        self
    }
    /// <p>The current page of elements from this collection.</p>
    pub fn set_items(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ClientCertificate>>) -> Self {
        self.items = input;
        self
    }
    /// <p>The current page of elements from this collection.</p>
    pub fn get_items(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ClientCertificate>> {
        &self.items
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn position(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.position = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn set_position(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.position = input;
        self
    }
    /// <p>The current pagination position in the paged result set.</p>
    pub fn get_position(&self) -> &::std::option::Option<::std::string::String> {
        &self.position
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetClientCertificatesOutput`](crate::operation::get_client_certificates::GetClientCertificatesOutput).
    pub fn build(self) -> crate::operation::get_client_certificates::GetClientCertificatesOutput {
        crate::operation::get_client_certificates::GetClientCertificatesOutput {
            items: self.items,
            position: self.position,
            _request_id: self._request_id,
        }
    }
}
