// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Requests API Gateway to create a Stage resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateStageInput {
    /// <p>The string identifier of the associated RestApi.</p>
    pub rest_api_id: ::std::option::Option<::std::string::String>,
    /// <p>The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
    pub stage_name: ::std::option::Option<::std::string::String>,
    /// <p>The identifier of the Deployment resource for the Stage resource.</p>
    pub deployment_id: ::std::option::Option<::std::string::String>,
    /// <p>The description of the Stage resource.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Whether cache clustering is enabled for the stage.</p>
    pub cache_cluster_enabled: ::std::option::Option<bool>,
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    pub cache_cluster_size: ::std::option::Option<crate::types::CacheClusterSize>,
    /// <p>A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    pub variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The version of the associated API documentation.</p>
    pub documentation_version: ::std::option::Option<::std::string::String>,
    /// <p>The canary deployment settings of this stage.</p>
    pub canary_settings: ::std::option::Option<crate::types::CanarySettings>,
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    pub tracing_enabled: ::std::option::Option<bool>,
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateStageInput {
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(&self) -> ::std::option::Option<&str> {
        self.rest_api_id.as_deref()
    }
    /// <p>The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
    pub fn stage_name(&self) -> ::std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>The identifier of the Deployment resource for the Stage resource.</p>
    pub fn deployment_id(&self) -> ::std::option::Option<&str> {
        self.deployment_id.as_deref()
    }
    /// <p>The description of the Stage resource.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Whether cache clustering is enabled for the stage.</p>
    pub fn cache_cluster_enabled(&self) -> ::std::option::Option<bool> {
        self.cache_cluster_enabled
    }
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    pub fn cache_cluster_size(&self) -> ::std::option::Option<&crate::types::CacheClusterSize> {
        self.cache_cluster_size.as_ref()
    }
    /// <p>A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    pub fn variables(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.variables.as_ref()
    }
    /// <p>The version of the associated API documentation.</p>
    pub fn documentation_version(&self) -> ::std::option::Option<&str> {
        self.documentation_version.as_deref()
    }
    /// <p>The canary deployment settings of this stage.</p>
    pub fn canary_settings(&self) -> ::std::option::Option<&crate::types::CanarySettings> {
        self.canary_settings.as_ref()
    }
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    pub fn tracing_enabled(&self) -> ::std::option::Option<bool> {
        self.tracing_enabled
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateStageInput {
    /// Creates a new builder-style object to manufacture [`CreateStageInput`](crate::operation::create_stage::CreateStageInput).
    pub fn builder() -> crate::operation::create_stage::builders::CreateStageInputBuilder {
        crate::operation::create_stage::builders::CreateStageInputBuilder::default()
    }
}

/// A builder for [`CreateStageInput`](crate::operation::create_stage::CreateStageInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateStageInputBuilder {
    pub(crate) rest_api_id: ::std::option::Option<::std::string::String>,
    pub(crate) stage_name: ::std::option::Option<::std::string::String>,
    pub(crate) deployment_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) cache_cluster_enabled: ::std::option::Option<bool>,
    pub(crate) cache_cluster_size: ::std::option::Option<crate::types::CacheClusterSize>,
    pub(crate) variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) documentation_version: ::std::option::Option<::std::string::String>,
    pub(crate) canary_settings: ::std::option::Option<crate::types::CanarySettings>,
    pub(crate) tracing_enabled: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateStageInputBuilder {
    /// <p>The string identifier of the associated RestApi.</p>
    /// This field is required.
    pub fn rest_api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rest_api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn set_rest_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rest_api_id = input;
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn get_rest_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rest_api_id
    }
    /// <p>The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
    /// This field is required.
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>The name for the Stage resource. Stage names can only contain alphanumeric characters, hyphens, and underscores. Maximum length is 128 characters.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_name
    }
    /// <p>The identifier of the Deployment resource for the Stage resource.</p>
    /// This field is required.
    pub fn deployment_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the Deployment resource for the Stage resource.</p>
    pub fn set_deployment_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_id = input;
        self
    }
    /// <p>The identifier of the Deployment resource for the Stage resource.</p>
    pub fn get_deployment_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_id
    }
    /// <p>The description of the Stage resource.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the Stage resource.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the Stage resource.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Whether cache clustering is enabled for the stage.</p>
    pub fn cache_cluster_enabled(mut self, input: bool) -> Self {
        self.cache_cluster_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether cache clustering is enabled for the stage.</p>
    pub fn set_cache_cluster_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.cache_cluster_enabled = input;
        self
    }
    /// <p>Whether cache clustering is enabled for the stage.</p>
    pub fn get_cache_cluster_enabled(&self) -> &::std::option::Option<bool> {
        &self.cache_cluster_enabled
    }
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    pub fn cache_cluster_size(mut self, input: crate::types::CacheClusterSize) -> Self {
        self.cache_cluster_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    pub fn set_cache_cluster_size(mut self, input: ::std::option::Option<crate::types::CacheClusterSize>) -> Self {
        self.cache_cluster_size = input;
        self
    }
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    pub fn get_cache_cluster_size(&self) -> &::std::option::Option<crate::types::CacheClusterSize> {
        &self.cache_cluster_size
    }
    /// Adds a key-value pair to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    pub fn variables(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    pub fn set_variables(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.variables = input;
        self
    }
    /// <p>A map that defines the stage variables for the new Stage resource. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    pub fn get_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.variables
    }
    /// <p>The version of the associated API documentation.</p>
    pub fn documentation_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.documentation_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the associated API documentation.</p>
    pub fn set_documentation_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.documentation_version = input;
        self
    }
    /// <p>The version of the associated API documentation.</p>
    pub fn get_documentation_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.documentation_version
    }
    /// <p>The canary deployment settings of this stage.</p>
    pub fn canary_settings(mut self, input: crate::types::CanarySettings) -> Self {
        self.canary_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The canary deployment settings of this stage.</p>
    pub fn set_canary_settings(mut self, input: ::std::option::Option<crate::types::CanarySettings>) -> Self {
        self.canary_settings = input;
        self
    }
    /// <p>The canary deployment settings of this stage.</p>
    pub fn get_canary_settings(&self) -> &::std::option::Option<crate::types::CanarySettings> {
        &self.canary_settings
    }
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    pub fn tracing_enabled(mut self, input: bool) -> Self {
        self.tracing_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    pub fn set_tracing_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.tracing_enabled = input;
        self
    }
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    pub fn get_tracing_enabled(&self) -> &::std::option::Option<bool> {
        &self.tracing_enabled
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateStageInput`](crate::operation::create_stage::CreateStageInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::create_stage::CreateStageInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_stage::CreateStageInput {
            rest_api_id: self.rest_api_id,
            stage_name: self.stage_name,
            deployment_id: self.deployment_id,
            description: self.description,
            cache_cluster_enabled: self.cache_cluster_enabled,
            cache_cluster_size: self.cache_cluster_size,
            variables: self.variables,
            documentation_version: self.documentation_version,
            canary_settings: self.canary_settings,
            tracing_enabled: self.tracing_enabled,
            tags: self.tags,
        })
    }
}
