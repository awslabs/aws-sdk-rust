// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The POST request to create a usage plan with the name, description, throttle limits and quota limits, as well as the associated API stages, specified in the payload.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateUsagePlanInput {
    /// <p>The name of the usage plan.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the usage plan.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The associated API stages of the usage plan.</p>
    pub api_stages: ::std::option::Option<::std::vec::Vec<crate::types::ApiStage>>,
    /// <p>The throttling limits of the usage plan.</p>
    pub throttle: ::std::option::Option<crate::types::ThrottleSettings>,
    /// <p>The quota of the usage plan.</p>
    pub quota: ::std::option::Option<crate::types::QuotaSettings>,
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateUsagePlanInput {
    /// <p>The name of the usage plan.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the usage plan.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The associated API stages of the usage plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.api_stages.is_none()`.
    pub fn api_stages(&self) -> &[crate::types::ApiStage] {
        self.api_stages.as_deref().unwrap_or_default()
    }
    /// <p>The throttling limits of the usage plan.</p>
    pub fn throttle(&self) -> ::std::option::Option<&crate::types::ThrottleSettings> {
        self.throttle.as_ref()
    }
    /// <p>The quota of the usage plan.</p>
    pub fn quota(&self) -> ::std::option::Option<&crate::types::QuotaSettings> {
        self.quota.as_ref()
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateUsagePlanInput {
    /// Creates a new builder-style object to manufacture [`CreateUsagePlanInput`](crate::operation::create_usage_plan::CreateUsagePlanInput).
    pub fn builder() -> crate::operation::create_usage_plan::builders::CreateUsagePlanInputBuilder {
        crate::operation::create_usage_plan::builders::CreateUsagePlanInputBuilder::default()
    }
}

/// A builder for [`CreateUsagePlanInput`](crate::operation::create_usage_plan::CreateUsagePlanInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateUsagePlanInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) api_stages: ::std::option::Option<::std::vec::Vec<crate::types::ApiStage>>,
    pub(crate) throttle: ::std::option::Option<crate::types::ThrottleSettings>,
    pub(crate) quota: ::std::option::Option<crate::types::QuotaSettings>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateUsagePlanInputBuilder {
    /// <p>The name of the usage plan.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the usage plan.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the usage plan.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the usage plan.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the usage plan.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the usage plan.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `api_stages`.
    ///
    /// To override the contents of this collection use [`set_api_stages`](Self::set_api_stages).
    ///
    /// <p>The associated API stages of the usage plan.</p>
    pub fn api_stages(mut self, input: crate::types::ApiStage) -> Self {
        let mut v = self.api_stages.unwrap_or_default();
        v.push(input);
        self.api_stages = ::std::option::Option::Some(v);
        self
    }
    /// <p>The associated API stages of the usage plan.</p>
    pub fn set_api_stages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApiStage>>) -> Self {
        self.api_stages = input;
        self
    }
    /// <p>The associated API stages of the usage plan.</p>
    pub fn get_api_stages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApiStage>> {
        &self.api_stages
    }
    /// <p>The throttling limits of the usage plan.</p>
    pub fn throttle(mut self, input: crate::types::ThrottleSettings) -> Self {
        self.throttle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The throttling limits of the usage plan.</p>
    pub fn set_throttle(mut self, input: ::std::option::Option<crate::types::ThrottleSettings>) -> Self {
        self.throttle = input;
        self
    }
    /// <p>The throttling limits of the usage plan.</p>
    pub fn get_throttle(&self) -> &::std::option::Option<crate::types::ThrottleSettings> {
        &self.throttle
    }
    /// <p>The quota of the usage plan.</p>
    pub fn quota(mut self, input: crate::types::QuotaSettings) -> Self {
        self.quota = ::std::option::Option::Some(input);
        self
    }
    /// <p>The quota of the usage plan.</p>
    pub fn set_quota(mut self, input: ::std::option::Option<crate::types::QuotaSettings>) -> Self {
        self.quota = input;
        self
    }
    /// <p>The quota of the usage plan.</p>
    pub fn get_quota(&self) -> &::std::option::Option<crate::types::QuotaSettings> {
        &self.quota
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateUsagePlanInput`](crate::operation::create_usage_plan::CreateUsagePlanInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_usage_plan::CreateUsagePlanInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_usage_plan::CreateUsagePlanInput {
            name: self.name,
            description: self.description,
            api_stages: self.api_stages,
            throttle: self.throttle,
            quota: self.quota,
            tags: self.tags,
        })
    }
}
