// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The POST Request to add a new RestApi resource to your collection.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRestApiInput {
    /// <p>The name of the RestApi.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of the RestApi.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A version identifier for the API.</p>
    pub version: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the RestApi that you want to clone from.</p>
    pub clone_from: ::std::option::Option<::std::string::String>,
    /// <p>The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.</p>
    pub binary_media_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.</p>
    pub minimum_compression_size: ::std::option::Option<i32>,
    /// <p>The source of the API key for metering requests according to a usage plan. Valid values are: <code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    pub api_key_source: ::std::option::Option<crate::types::ApiKeySourceType>,
    /// <p>The endpoint configuration of this RestApi showing the endpoint types of the API. </p>
    pub endpoint_configuration: ::std::option::Option<crate::types::EndpointConfiguration>,
    /// <p>A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.</p>
    pub policy: ::std::option::Option<::std::string::String>,
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint</p>
    pub disable_execute_api_endpoint: ::std::option::Option<bool>,
}
impl CreateRestApiInput {
    /// <p>The name of the RestApi.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of the RestApi.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A version identifier for the API.</p>
    pub fn version(&self) -> ::std::option::Option<&str> {
        self.version.as_deref()
    }
    /// <p>The ID of the RestApi that you want to clone from.</p>
    pub fn clone_from(&self) -> ::std::option::Option<&str> {
        self.clone_from.as_deref()
    }
    /// <p>The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.binary_media_types.is_none()`.
    pub fn binary_media_types(&self) -> &[::std::string::String] {
        self.binary_media_types.as_deref().unwrap_or_default()
    }
    /// <p>A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.</p>
    pub fn minimum_compression_size(&self) -> ::std::option::Option<i32> {
        self.minimum_compression_size
    }
    /// <p>The source of the API key for metering requests according to a usage plan. Valid values are: <code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    pub fn api_key_source(&self) -> ::std::option::Option<&crate::types::ApiKeySourceType> {
        self.api_key_source.as_ref()
    }
    /// <p>The endpoint configuration of this RestApi showing the endpoint types of the API. </p>
    pub fn endpoint_configuration(&self) -> ::std::option::Option<&crate::types::EndpointConfiguration> {
        self.endpoint_configuration.as_ref()
    }
    /// <p>A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.</p>
    pub fn policy(&self) -> ::std::option::Option<&str> {
        self.policy.as_deref()
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint</p>
    pub fn disable_execute_api_endpoint(&self) -> ::std::option::Option<bool> {
        self.disable_execute_api_endpoint
    }
}
impl CreateRestApiInput {
    /// Creates a new builder-style object to manufacture [`CreateRestApiInput`](crate::operation::create_rest_api::CreateRestApiInput).
    pub fn builder() -> crate::operation::create_rest_api::builders::CreateRestApiInputBuilder {
        crate::operation::create_rest_api::builders::CreateRestApiInputBuilder::default()
    }
}

/// A builder for [`CreateRestApiInput`](crate::operation::create_rest_api::CreateRestApiInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateRestApiInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) clone_from: ::std::option::Option<::std::string::String>,
    pub(crate) binary_media_types: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) minimum_compression_size: ::std::option::Option<i32>,
    pub(crate) api_key_source: ::std::option::Option<crate::types::ApiKeySourceType>,
    pub(crate) endpoint_configuration: ::std::option::Option<crate::types::EndpointConfiguration>,
    pub(crate) policy: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) disable_execute_api_endpoint: ::std::option::Option<bool>,
}
impl CreateRestApiInputBuilder {
    /// <p>The name of the RestApi.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the RestApi.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the RestApi.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the RestApi.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the RestApi.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the RestApi.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A version identifier for the API.</p>
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A version identifier for the API.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>A version identifier for the API.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The ID of the RestApi that you want to clone from.</p>
    pub fn clone_from(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.clone_from = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the RestApi that you want to clone from.</p>
    pub fn set_clone_from(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.clone_from = input;
        self
    }
    /// <p>The ID of the RestApi that you want to clone from.</p>
    pub fn get_clone_from(&self) -> &::std::option::Option<::std::string::String> {
        &self.clone_from
    }
    /// Appends an item to `binary_media_types`.
    ///
    /// To override the contents of this collection use [`set_binary_media_types`](Self::set_binary_media_types).
    ///
    /// <p>The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.</p>
    pub fn binary_media_types(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.binary_media_types.unwrap_or_default();
        v.push(input.into());
        self.binary_media_types = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.</p>
    pub fn set_binary_media_types(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.binary_media_types = input;
        self
    }
    /// <p>The list of binary media types supported by the RestApi. By default, the RestApi supports only UTF-8-encoded text payloads.</p>
    pub fn get_binary_media_types(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.binary_media_types
    }
    /// <p>A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.</p>
    pub fn minimum_compression_size(mut self, input: i32) -> Self {
        self.minimum_compression_size = ::std::option::Option::Some(input);
        self
    }
    /// <p>A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.</p>
    pub fn set_minimum_compression_size(mut self, input: ::std::option::Option<i32>) -> Self {
        self.minimum_compression_size = input;
        self
    }
    /// <p>A nullable integer that is used to enable compression (with non-negative between 0 and 10485760 (10M) bytes, inclusive) or disable compression (with a null value) on an API. When compression is enabled, compression or decompression is not applied on the payload if the payload size is smaller than this value. Setting it to zero allows compression for any payload size.</p>
    pub fn get_minimum_compression_size(&self) -> &::std::option::Option<i32> {
        &self.minimum_compression_size
    }
    /// <p>The source of the API key for metering requests according to a usage plan. Valid values are: <code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    pub fn api_key_source(mut self, input: crate::types::ApiKeySourceType) -> Self {
        self.api_key_source = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source of the API key for metering requests according to a usage plan. Valid values are: <code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    pub fn set_api_key_source(mut self, input: ::std::option::Option<crate::types::ApiKeySourceType>) -> Self {
        self.api_key_source = input;
        self
    }
    /// <p>The source of the API key for metering requests according to a usage plan. Valid values are: <code>HEADER</code> to read the API key from the <code>X-API-Key</code> header of a request. <code>AUTHORIZER</code> to read the API key from the <code>UsageIdentifierKey</code> from a custom authorizer.</p>
    pub fn get_api_key_source(&self) -> &::std::option::Option<crate::types::ApiKeySourceType> {
        &self.api_key_source
    }
    /// <p>The endpoint configuration of this RestApi showing the endpoint types of the API. </p>
    pub fn endpoint_configuration(mut self, input: crate::types::EndpointConfiguration) -> Self {
        self.endpoint_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The endpoint configuration of this RestApi showing the endpoint types of the API. </p>
    pub fn set_endpoint_configuration(mut self, input: ::std::option::Option<crate::types::EndpointConfiguration>) -> Self {
        self.endpoint_configuration = input;
        self
    }
    /// <p>The endpoint configuration of this RestApi showing the endpoint types of the API. </p>
    pub fn get_endpoint_configuration(&self) -> &::std::option::Option<crate::types::EndpointConfiguration> {
        &self.endpoint_configuration
    }
    /// <p>A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.</p>
    pub fn policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.</p>
    pub fn set_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy = input;
        self
    }
    /// <p>A stringified JSON policy document that applies to this RestApi regardless of the caller and Method configuration.</p>
    pub fn get_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The key-value map of strings. The valid character set is [a-zA-Z+-=._:/]. The tag key can be up to 128 characters and must not start with <code>aws:</code>. The tag value can be up to 256 characters.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint</p>
    pub fn disable_execute_api_endpoint(mut self, input: bool) -> Self {
        self.disable_execute_api_endpoint = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint</p>
    pub fn set_disable_execute_api_endpoint(mut self, input: ::std::option::Option<bool>) -> Self {
        self.disable_execute_api_endpoint = input;
        self
    }
    /// <p>Specifies whether clients can invoke your API by using the default <code>execute-api</code> endpoint. By default, clients can invoke your API with the default <code>https://{api_id}.execute-api.{region}.amazonaws.com</code> endpoint. To require that clients use a custom domain name to invoke your API, disable the default endpoint</p>
    pub fn get_disable_execute_api_endpoint(&self) -> &::std::option::Option<bool> {
        &self.disable_execute_api_endpoint
    }
    /// Consumes the builder and constructs a [`CreateRestApiInput`](crate::operation::create_rest_api::CreateRestApiInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_rest_api::CreateRestApiInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_rest_api::CreateRestApiInput {
            name: self.name,
            description: self.description,
            version: self.version,
            clone_from: self.clone_from,
            binary_media_types: self.binary_media_types,
            minimum_compression_size: self.minimum_compression_size,
            api_key_source: self.api_key_source,
            endpoint_configuration: self.endpoint_configuration,
            policy: self.policy,
            tags: self.tags,
            disable_execute_api_endpoint: self.disable_execute_api_endpoint,
        })
    }
}
