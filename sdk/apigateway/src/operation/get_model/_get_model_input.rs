// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request to list information about a model in an existing RestApi resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetModelInput {
    /// <p>The RestApi identifier under which the Model exists.</p>
    #[doc(hidden)]
    pub rest_api_id: std::option::Option<std::string::String>,
    /// <p>The name of the model as an identifier.</p>
    #[doc(hidden)]
    pub model_name: std::option::Option<std::string::String>,
    /// <p>A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.</p>
    #[doc(hidden)]
    pub flatten: bool,
}
impl GetModelInput {
    /// <p>The RestApi identifier under which the Model exists.</p>
    pub fn rest_api_id(&self) -> std::option::Option<&str> {
        self.rest_api_id.as_deref()
    }
    /// <p>The name of the model as an identifier.</p>
    pub fn model_name(&self) -> std::option::Option<&str> {
        self.model_name.as_deref()
    }
    /// <p>A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.</p>
    pub fn flatten(&self) -> bool {
        self.flatten
    }
}
impl GetModelInput {
    /// Creates a new builder-style object to manufacture [`GetModelInput`](crate::operation::get_model::GetModelInput).
    pub fn builder() -> crate::operation::get_model::builders::GetModelInputBuilder {
        crate::operation::get_model::builders::GetModelInputBuilder::default()
    }
}

/// A builder for [`GetModelInput`](crate::operation::get_model::GetModelInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetModelInputBuilder {
    pub(crate) rest_api_id: std::option::Option<std::string::String>,
    pub(crate) model_name: std::option::Option<std::string::String>,
    pub(crate) flatten: std::option::Option<bool>,
}
impl GetModelInputBuilder {
    /// <p>The RestApi identifier under which the Model exists.</p>
    pub fn rest_api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rest_api_id = Some(input.into());
        self
    }
    /// <p>The RestApi identifier under which the Model exists.</p>
    pub fn set_rest_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rest_api_id = input;
        self
    }
    /// <p>The name of the model as an identifier.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_name = Some(input.into());
        self
    }
    /// <p>The name of the model as an identifier.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// <p>A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.</p>
    pub fn flatten(mut self, input: bool) -> Self {
        self.flatten = Some(input);
        self
    }
    /// <p>A query parameter of a Boolean value to resolve (<code>true</code>) all external model references and returns a flattened model schema or not (<code>false</code>) The default is <code>false</code>.</p>
    pub fn set_flatten(mut self, input: std::option::Option<bool>) -> Self {
        self.flatten = input;
        self
    }
    /// Consumes the builder and constructs a [`GetModelInput`](crate::operation::get_model::GetModelInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_model::GetModelInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_model::GetModelInput {
            rest_api_id: self.rest_api_id,
            model_name: self.model_name,
            flatten: self.flatten.unwrap_or_default(),
        })
    }
}
