// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The DELETE request to delete a usage plan of a given plan Id.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteUsagePlanInput {
    /// <p>The Id of the to-be-deleted usage plan.</p>
    #[doc(hidden)]
    pub usage_plan_id: std::option::Option<std::string::String>,
}
impl DeleteUsagePlanInput {
    /// <p>The Id of the to-be-deleted usage plan.</p>
    pub fn usage_plan_id(&self) -> std::option::Option<&str> {
        self.usage_plan_id.as_deref()
    }
}
impl DeleteUsagePlanInput {
    /// Creates a new builder-style object to manufacture [`DeleteUsagePlanInput`](crate::operation::delete_usage_plan::DeleteUsagePlanInput).
    pub fn builder() -> crate::operation::delete_usage_plan::builders::DeleteUsagePlanInputBuilder {
        crate::operation::delete_usage_plan::builders::DeleteUsagePlanInputBuilder::default()
    }
}

/// A builder for [`DeleteUsagePlanInput`](crate::operation::delete_usage_plan::DeleteUsagePlanInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteUsagePlanInputBuilder {
    pub(crate) usage_plan_id: std::option::Option<std::string::String>,
}
impl DeleteUsagePlanInputBuilder {
    /// <p>The Id of the to-be-deleted usage plan.</p>
    pub fn usage_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.usage_plan_id = Some(input.into());
        self
    }
    /// <p>The Id of the to-be-deleted usage plan.</p>
    pub fn set_usage_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.usage_plan_id = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteUsagePlanInput`](crate::operation::delete_usage_plan::DeleteUsagePlanInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_usage_plan::DeleteUsagePlanInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_usage_plan::DeleteUsagePlanInput {
            usage_plan_id: self.usage_plan_id,
        })
    }
}
