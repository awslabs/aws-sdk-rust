// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::test_invoke_authorizer::_test_invoke_authorizer_output::TestInvokeAuthorizerOutputBuilder;

pub use crate::operation::test_invoke_authorizer::_test_invoke_authorizer_input::TestInvokeAuthorizerInputBuilder;

impl TestInvokeAuthorizerInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::test_invoke_authorizer::TestInvokeAuthorizerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.test_invoke_authorizer();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `TestInvokeAuthorizer`.
///
/// <p>Simulate the execution of an Authorizer in your RestApi with headers, parameters, and an incoming request body.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct TestInvokeAuthorizerFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::test_invoke_authorizer::builders::TestInvokeAuthorizerInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::test_invoke_authorizer::TestInvokeAuthorizerOutput,
        crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError,
    > for TestInvokeAuthorizerFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerOutput,
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl TestInvokeAuthorizerFluentBuilder {
    /// Creates a new `TestInvokeAuthorizer`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the TestInvokeAuthorizer as a reference.
    pub fn as_input(&self) -> &crate::operation::test_invoke_authorizer::builders::TestInvokeAuthorizerInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::test_invoke_authorizer::TestInvokeAuthorizerOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::test_invoke_authorizer::TestInvokeAuthorizer::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::test_invoke_authorizer::TestInvokeAuthorizer::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::test_invoke_authorizer::TestInvokeAuthorizerOutput,
        crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.rest_api_id(input.into());
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn set_rest_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_rest_api_id(input);
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn get_rest_api_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_rest_api_id()
    }
    /// <p>Specifies a test invoke authorizer request's Authorizer ID.</p>
    pub fn authorizer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.authorizer_id(input.into());
        self
    }
    /// <p>Specifies a test invoke authorizer request's Authorizer ID.</p>
    pub fn set_authorizer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_authorizer_id(input);
        self
    }
    /// <p>Specifies a test invoke authorizer request's Authorizer ID.</p>
    pub fn get_authorizer_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_authorizer_id()
    }
    /// Adds a key-value pair to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.</p>
    pub fn headers(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.headers(k.into(), v.into());
        self
    }
    /// <p>A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.</p>
    pub fn set_headers(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.inner = self.inner.set_headers(input);
        self
    }
    /// <p>A key-value map of headers to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, should be specified.</p>
    pub fn get_headers(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_headers()
    }
    /// Adds a key-value pair to `multiValueHeaders`.
    ///
    /// To override the contents of this collection use [`set_multi_value_headers`](Self::set_multi_value_headers).
    ///
    /// <p>The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.</p>
    pub fn multi_value_headers(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        self.inner = self.inner.multi_value_headers(k.into(), v);
        self
    }
    /// <p>The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.</p>
    pub fn set_multi_value_headers(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.inner = self.inner.set_multi_value_headers(input);
        self
    }
    /// <p>The headers as a map from string to list of values to simulate an incoming invocation request. This is where the incoming authorization token, or identity source, may be specified.</p>
    pub fn get_multi_value_headers(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.inner.get_multi_value_headers()
    }
    /// <p>The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.</p>
    pub fn path_with_query_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.path_with_query_string(input.into());
        self
    }
    /// <p>The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.</p>
    pub fn set_path_with_query_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_path_with_query_string(input);
        self
    }
    /// <p>The URI path, including query string, of the simulated invocation request. Use this to specify path parameters and query string parameters.</p>
    pub fn get_path_with_query_string(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_path_with_query_string()
    }
    /// <p>The simulated request body of an incoming invocation request.</p>
    pub fn body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.body(input.into());
        self
    }
    /// <p>The simulated request body of an incoming invocation request.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_body(input);
        self
    }
    /// <p>The simulated request body of an incoming invocation request.</p>
    pub fn get_body(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_body()
    }
    /// Adds a key-value pair to `stageVariables`.
    ///
    /// To override the contents of this collection use [`set_stage_variables`](Self::set_stage_variables).
    ///
    /// <p>A key-value map of stage variables to simulate an invocation on a deployed Stage.</p>
    pub fn stage_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.stage_variables(k.into(), v.into());
        self
    }
    /// <p>A key-value map of stage variables to simulate an invocation on a deployed Stage.</p>
    pub fn set_stage_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_stage_variables(input);
        self
    }
    /// <p>A key-value map of stage variables to simulate an invocation on a deployed Stage.</p>
    pub fn get_stage_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_stage_variables()
    }
    /// Adds a key-value pair to `additionalContext`.
    ///
    /// To override the contents of this collection use [`set_additional_context`](Self::set_additional_context).
    ///
    /// <p>A key-value map of additional context variables.</p>
    pub fn additional_context(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.additional_context(k.into(), v.into());
        self
    }
    /// <p>A key-value map of additional context variables.</p>
    pub fn set_additional_context(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_additional_context(input);
        self
    }
    /// <p>A key-value map of additional context variables.</p>
    pub fn get_additional_context(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_additional_context()
    }
}
