// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to delete the BasePathMapping resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteBasePathMappingInput {
    /// <p>The domain name of the BasePathMapping resource to delete.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The base path name of the BasePathMapping resource to delete.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    #[doc(hidden)]
    pub base_path: std::option::Option<std::string::String>,
}
impl DeleteBasePathMappingInput {
    /// <p>The domain name of the BasePathMapping resource to delete.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The base path name of the BasePathMapping resource to delete.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub fn base_path(&self) -> std::option::Option<&str> {
        self.base_path.as_deref()
    }
}
impl DeleteBasePathMappingInput {
    /// Creates a new builder-style object to manufacture [`DeleteBasePathMappingInput`](crate::operation::delete_base_path_mapping::DeleteBasePathMappingInput).
    pub fn builder(
    ) -> crate::operation::delete_base_path_mapping::builders::DeleteBasePathMappingInputBuilder
    {
        crate::operation::delete_base_path_mapping::builders::DeleteBasePathMappingInputBuilder::default()
    }
}

/// A builder for [`DeleteBasePathMappingInput`](crate::operation::delete_base_path_mapping::DeleteBasePathMappingInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteBasePathMappingInputBuilder {
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) base_path: std::option::Option<std::string::String>,
}
impl DeleteBasePathMappingInputBuilder {
    /// <p>The domain name of the BasePathMapping resource to delete.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The domain name of the BasePathMapping resource to delete.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The base path name of the BasePathMapping resource to delete.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub fn base_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_path = Some(input.into());
        self
    }
    /// <p>The base path name of the BasePathMapping resource to delete.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub fn set_base_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.base_path = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteBasePathMappingInput`](crate::operation::delete_base_path_mapping::DeleteBasePathMappingInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_base_path_mapping::DeleteBasePathMappingInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_base_path_mapping::DeleteBasePathMappingInput {
                domain_name: self.domain_name,
                base_path: self.base_path,
            },
        )
    }
}
