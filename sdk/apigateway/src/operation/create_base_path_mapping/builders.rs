// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_base_path_mapping::_create_base_path_mapping_output::CreateBasePathMappingOutputBuilder;

pub use crate::operation::create_base_path_mapping::_create_base_path_mapping_input::CreateBasePathMappingInputBuilder;

/// Fluent builder constructing a request to `CreateBasePathMapping`.
///
/// <p>Creates a new BasePathMapping resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateBasePathMappingFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_base_path_mapping::builders::CreateBasePathMappingInputBuilder,
}
impl CreateBasePathMappingFluentBuilder {
    /// Creates a new `CreateBasePathMapping`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_base_path_mapping::CreateBasePathMapping,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_base_path_mapping::CreateBasePathMappingError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_base_path_mapping::CreateBasePathMappingOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_base_path_mapping::CreateBasePathMappingError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain name of the BasePathMapping resource to create.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The domain name of the BasePathMapping resource to create.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.</p>
    pub fn base_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.base_path(input.into());
        self
    }
    /// <p>The base path name that callers of the API must provide as part of the URL after the domain name. This value must be unique for all of the mappings across a single API. Specify '(none)' if you do not want callers to specify a base path name after the domain name.</p>
    pub fn set_base_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_base_path(input);
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.rest_api_id(input.into());
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn set_rest_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_rest_api_id(input);
        self
    }
    /// <p>The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.</p>
    pub fn stage(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.stage(input.into());
        self
    }
    /// <p>The name of the API's stage that you want to use for this mapping. Specify '(none)' if you want callers to explicitly specify the stage name after any base path name.</p>
    pub fn set_stage(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_stage(input);
        self
    }
}
