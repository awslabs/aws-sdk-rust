// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the base path that callers of the API must provide as part of the URL after the domain name.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateBasePathMappingOutput {
    /// <p>The base path name that callers of the API must provide as part of the URL after the domain name.</p>
    #[doc(hidden)]
    pub base_path: std::option::Option<std::string::String>,
    /// <p>The string identifier of the associated RestApi.</p>
    #[doc(hidden)]
    pub rest_api_id: std::option::Option<std::string::String>,
    /// <p>The name of the associated stage.</p>
    #[doc(hidden)]
    pub stage: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateBasePathMappingOutput {
    /// <p>The base path name that callers of the API must provide as part of the URL after the domain name.</p>
    pub fn base_path(&self) -> std::option::Option<&str> {
        self.base_path.as_deref()
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(&self) -> std::option::Option<&str> {
        self.rest_api_id.as_deref()
    }
    /// <p>The name of the associated stage.</p>
    pub fn stage(&self) -> std::option::Option<&str> {
        self.stage.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateBasePathMappingOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateBasePathMappingOutput {
    /// Creates a new builder-style object to manufacture [`CreateBasePathMappingOutput`](crate::operation::create_base_path_mapping::CreateBasePathMappingOutput).
    pub fn builder(
    ) -> crate::operation::create_base_path_mapping::builders::CreateBasePathMappingOutputBuilder
    {
        crate::operation::create_base_path_mapping::builders::CreateBasePathMappingOutputBuilder::default()
    }
}

/// A builder for [`CreateBasePathMappingOutput`](crate::operation::create_base_path_mapping::CreateBasePathMappingOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateBasePathMappingOutputBuilder {
    pub(crate) base_path: std::option::Option<std::string::String>,
    pub(crate) rest_api_id: std::option::Option<std::string::String>,
    pub(crate) stage: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateBasePathMappingOutputBuilder {
    /// <p>The base path name that callers of the API must provide as part of the URL after the domain name.</p>
    pub fn base_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.base_path = Some(input.into());
        self
    }
    /// <p>The base path name that callers of the API must provide as part of the URL after the domain name.</p>
    pub fn set_base_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.base_path = input;
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rest_api_id = Some(input.into());
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn set_rest_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rest_api_id = input;
        self
    }
    /// <p>The name of the associated stage.</p>
    pub fn stage(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage = Some(input.into());
        self
    }
    /// <p>The name of the associated stage.</p>
    pub fn set_stage(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateBasePathMappingOutput`](crate::operation::create_base_path_mapping::CreateBasePathMappingOutput).
    pub fn build(self) -> crate::operation::create_base_path_mapping::CreateBasePathMappingOutput {
        crate::operation::create_base_path_mapping::CreateBasePathMappingOutput {
            base_path: self.base_path,
            rest_api_id: self.rest_api_id,
            stage: self.stage,
            _request_id: self._request_id,
        }
    }
}
