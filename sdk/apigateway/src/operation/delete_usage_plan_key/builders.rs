// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_usage_plan_key::_delete_usage_plan_key_output::DeleteUsagePlanKeyOutputBuilder;

pub use crate::operation::delete_usage_plan_key::_delete_usage_plan_key_input::DeleteUsagePlanKeyInputBuilder;

/// Fluent builder constructing a request to `DeleteUsagePlanKey`.
///
/// <p>Deletes a usage plan key and remove the underlying API key from the associated usage plan.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteUsagePlanKeyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_usage_plan_key::builders::DeleteUsagePlanKeyInputBuilder,
}
impl DeleteUsagePlanKeyFluentBuilder {
    /// Creates a new `DeleteUsagePlanKey`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKey,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.</p>
    pub fn usage_plan_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.usage_plan_id(input.into());
        self
    }
    /// <p>The Id of the UsagePlan resource representing the usage plan containing the to-be-deleted UsagePlanKey resource representing a plan customer.</p>
    pub fn set_usage_plan_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_usage_plan_id(input);
        self
    }
    /// <p>The Id of the UsagePlanKey resource to be deleted.</p>
    pub fn key_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.key_id(input.into());
        self
    }
    /// <p>The Id of the UsagePlanKey resource to be deleted.</p>
    pub fn set_key_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_key_id(input);
        self
    }
}
