// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Requests API Gateway to create a Deployment resource.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDeploymentInput {
    /// <p>The string identifier of the associated RestApi.</p>
    #[doc(hidden)]
    pub rest_api_id: std::option::Option<std::string::String>,
    /// <p>The name of the Stage resource for the Deployment resource to create.</p>
    #[doc(hidden)]
    pub stage_name: std::option::Option<std::string::String>,
    /// <p>The description of the Stage resource for the Deployment resource to create.</p>
    #[doc(hidden)]
    pub stage_description: std::option::Option<std::string::String>,
    /// <p>The description for the Deployment resource to create.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>Enables a cache cluster for the Stage resource specified in the input.</p>
    #[doc(hidden)]
    pub cache_cluster_enabled: std::option::Option<bool>,
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    #[doc(hidden)]
    pub cache_cluster_size: std::option::Option<crate::types::CacheClusterSize>,
    /// <p>A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    #[doc(hidden)]
    pub variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The input configuration for the canary deployment when the deployment is a canary release deployment. </p>
    #[doc(hidden)]
    pub canary_settings: std::option::Option<crate::types::DeploymentCanarySettings>,
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    #[doc(hidden)]
    pub tracing_enabled: std::option::Option<bool>,
}
impl CreateDeploymentInput {
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(&self) -> std::option::Option<&str> {
        self.rest_api_id.as_deref()
    }
    /// <p>The name of the Stage resource for the Deployment resource to create.</p>
    pub fn stage_name(&self) -> std::option::Option<&str> {
        self.stage_name.as_deref()
    }
    /// <p>The description of the Stage resource for the Deployment resource to create.</p>
    pub fn stage_description(&self) -> std::option::Option<&str> {
        self.stage_description.as_deref()
    }
    /// <p>The description for the Deployment resource to create.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Enables a cache cluster for the Stage resource specified in the input.</p>
    pub fn cache_cluster_enabled(&self) -> std::option::Option<bool> {
        self.cache_cluster_enabled
    }
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    pub fn cache_cluster_size(&self) -> std::option::Option<&crate::types::CacheClusterSize> {
        self.cache_cluster_size.as_ref()
    }
    /// <p>A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    pub fn variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.variables.as_ref()
    }
    /// <p>The input configuration for the canary deployment when the deployment is a canary release deployment. </p>
    pub fn canary_settings(&self) -> std::option::Option<&crate::types::DeploymentCanarySettings> {
        self.canary_settings.as_ref()
    }
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    pub fn tracing_enabled(&self) -> std::option::Option<bool> {
        self.tracing_enabled
    }
}
impl CreateDeploymentInput {
    /// Creates a new builder-style object to manufacture [`CreateDeploymentInput`](crate::operation::create_deployment::CreateDeploymentInput).
    pub fn builder() -> crate::operation::create_deployment::builders::CreateDeploymentInputBuilder
    {
        crate::operation::create_deployment::builders::CreateDeploymentInputBuilder::default()
    }
}

/// A builder for [`CreateDeploymentInput`](crate::operation::create_deployment::CreateDeploymentInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDeploymentInputBuilder {
    pub(crate) rest_api_id: std::option::Option<std::string::String>,
    pub(crate) stage_name: std::option::Option<std::string::String>,
    pub(crate) stage_description: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) cache_cluster_enabled: std::option::Option<bool>,
    pub(crate) cache_cluster_size: std::option::Option<crate::types::CacheClusterSize>,
    pub(crate) variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) canary_settings: std::option::Option<crate::types::DeploymentCanarySettings>,
    pub(crate) tracing_enabled: std::option::Option<bool>,
}
impl CreateDeploymentInputBuilder {
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rest_api_id = Some(input.into());
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn set_rest_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rest_api_id = input;
        self
    }
    /// <p>The name of the Stage resource for the Deployment resource to create.</p>
    pub fn stage_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage_name = Some(input.into());
        self
    }
    /// <p>The name of the Stage resource for the Deployment resource to create.</p>
    pub fn set_stage_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>The description of the Stage resource for the Deployment resource to create.</p>
    pub fn stage_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.stage_description = Some(input.into());
        self
    }
    /// <p>The description of the Stage resource for the Deployment resource to create.</p>
    pub fn set_stage_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.stage_description = input;
        self
    }
    /// <p>The description for the Deployment resource to create.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>The description for the Deployment resource to create.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Enables a cache cluster for the Stage resource specified in the input.</p>
    pub fn cache_cluster_enabled(mut self, input: bool) -> Self {
        self.cache_cluster_enabled = Some(input);
        self
    }
    /// <p>Enables a cache cluster for the Stage resource specified in the input.</p>
    pub fn set_cache_cluster_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.cache_cluster_enabled = input;
        self
    }
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    pub fn cache_cluster_size(mut self, input: crate::types::CacheClusterSize) -> Self {
        self.cache_cluster_size = Some(input);
        self
    }
    /// <p>The stage's cache capacity in GB. For more information about choosing a cache size, see <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/api-gateway-caching.html">Enabling API caching to enhance responsiveness</a>.</p>
    pub fn set_cache_cluster_size(
        mut self,
        input: std::option::Option<crate::types::CacheClusterSize>,
    ) -> Self {
        self.cache_cluster_size = input;
        self
    }
    /// Adds a key-value pair to `variables`.
    ///
    /// To override the contents of this collection use [`set_variables`](Self::set_variables).
    ///
    /// <p>A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    pub fn variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.variables = Some(hash_map);
        self
    }
    /// <p>A map that defines the stage variables for the Stage resource that is associated with the new deployment. Variable names can have alphanumeric and underscore characters, and the values must match <code>[A-Za-z0-9-._~:/?#&amp;=,]+</code>.</p>
    pub fn set_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.variables = input;
        self
    }
    /// <p>The input configuration for the canary deployment when the deployment is a canary release deployment. </p>
    pub fn canary_settings(mut self, input: crate::types::DeploymentCanarySettings) -> Self {
        self.canary_settings = Some(input);
        self
    }
    /// <p>The input configuration for the canary deployment when the deployment is a canary release deployment. </p>
    pub fn set_canary_settings(
        mut self,
        input: std::option::Option<crate::types::DeploymentCanarySettings>,
    ) -> Self {
        self.canary_settings = input;
        self
    }
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    pub fn tracing_enabled(mut self, input: bool) -> Self {
        self.tracing_enabled = Some(input);
        self
    }
    /// <p>Specifies whether active tracing with X-ray is enabled for the Stage.</p>
    pub fn set_tracing_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.tracing_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDeploymentInput`](crate::operation::create_deployment::CreateDeploymentInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_deployment::CreateDeploymentInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_deployment::CreateDeploymentInput {
            rest_api_id: self.rest_api_id,
            stage_name: self.stage_name,
            stage_description: self.stage_description,
            description: self.description,
            cache_cluster_enabled: self.cache_cluster_enabled,
            cache_cluster_size: self.cache_cluster_size,
            variables: self.variables,
            canary_settings: self.canary_settings,
            tracing_enabled: self.tracing_enabled,
        })
    }
}
