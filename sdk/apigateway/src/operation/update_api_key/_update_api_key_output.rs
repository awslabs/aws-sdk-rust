// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A resource that can be distributed to callers for executing Method resources that require an API key. API keys can be mapped to any Stage on any RestApi, which indicates that the callers with the API key can make requests to that stage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateApiKeyOutput {
    /// <p>The identifier of the API Key.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The value of the API Key.</p>
    pub value: ::std::option::Option<::std::string::String>,
    /// <p>The name of the API Key.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.</p>
    pub customer_id: ::std::option::Option<::std::string::String>,
    /// <p>The description of the API Key.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the API Key can be used by callers.</p>
    pub enabled: bool,
    /// <p>The timestamp when the API Key was created.</p>
    pub created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The timestamp when the API Key was last updated.</p>
    pub last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>A list of Stage resources that are associated with the ApiKey resource.</p>
    pub stage_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateApiKeyOutput {
    /// <p>The identifier of the API Key.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The value of the API Key.</p>
    pub fn value(&self) -> ::std::option::Option<&str> {
        self.value.as_deref()
    }
    /// <p>The name of the API Key.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.</p>
    pub fn customer_id(&self) -> ::std::option::Option<&str> {
        self.customer_id.as_deref()
    }
    /// <p>The description of the API Key.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Specifies whether the API Key can be used by callers.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The timestamp when the API Key was created.</p>
    pub fn created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The timestamp when the API Key was last updated.</p>
    pub fn last_updated_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_date.as_ref()
    }
    /// <p>A list of Stage resources that are associated with the ApiKey resource.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.stage_keys.is_none()`.
    pub fn stage_keys(&self) -> &[::std::string::String] {
        self.stage_keys.as_deref().unwrap_or_default()
    }
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateApiKeyOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateApiKeyOutput {
    /// Creates a new builder-style object to manufacture [`UpdateApiKeyOutput`](crate::operation::update_api_key::UpdateApiKeyOutput).
    pub fn builder() -> crate::operation::update_api_key::builders::UpdateApiKeyOutputBuilder {
        crate::operation::update_api_key::builders::UpdateApiKeyOutputBuilder::default()
    }
}

/// A builder for [`UpdateApiKeyOutput`](crate::operation::update_api_key::UpdateApiKeyOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateApiKeyOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) value: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) customer_id: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) stage_keys: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateApiKeyOutputBuilder {
    /// <p>The identifier of the API Key.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of the API Key.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of the API Key.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The value of the API Key.</p>
    pub fn value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the API Key.</p>
    pub fn set_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value = input;
        self
    }
    /// <p>The value of the API Key.</p>
    pub fn get_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.value
    }
    /// <p>The name of the API Key.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the API Key.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the API Key.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.</p>
    pub fn customer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.</p>
    pub fn set_customer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_id = input;
        self
    }
    /// <p>An Amazon Web Services Marketplace customer identifier, when integrating with the Amazon Web Services SaaS Marketplace.</p>
    pub fn get_customer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_id
    }
    /// <p>The description of the API Key.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the API Key.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the API Key.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Specifies whether the API Key can be used by callers.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the API Key can be used by callers.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether the API Key can be used by callers.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The timestamp when the API Key was created.</p>
    pub fn created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the API Key was created.</p>
    pub fn set_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The timestamp when the API Key was created.</p>
    pub fn get_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_date
    }
    /// <p>The timestamp when the API Key was last updated.</p>
    pub fn last_updated_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp when the API Key was last updated.</p>
    pub fn set_last_updated_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_date = input;
        self
    }
    /// <p>The timestamp when the API Key was last updated.</p>
    pub fn get_last_updated_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_date
    }
    /// Appends an item to `stage_keys`.
    ///
    /// To override the contents of this collection use [`set_stage_keys`](Self::set_stage_keys).
    ///
    /// <p>A list of Stage resources that are associated with the ApiKey resource.</p>
    pub fn stage_keys(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.stage_keys.unwrap_or_default();
        v.push(input.into());
        self.stage_keys = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Stage resources that are associated with the ApiKey resource.</p>
    pub fn set_stage_keys(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.stage_keys = input;
        self
    }
    /// <p>A list of Stage resources that are associated with the ApiKey resource.</p>
    pub fn get_stage_keys(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.stage_keys
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateApiKeyOutput`](crate::operation::update_api_key::UpdateApiKeyOutput).
    pub fn build(self) -> crate::operation::update_api_key::UpdateApiKeyOutput {
        crate::operation::update_api_key::UpdateApiKeyOutput {
            id: self.id,
            value: self.value,
            name: self.name,
            customer_id: self.customer_id,
            description: self.description,
            enabled: self.enabled.unwrap_or_default(),
            created_date: self.created_date,
            last_updated_date: self.last_updated_date,
            stage_keys: self.stage_keys,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
