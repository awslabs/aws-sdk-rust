// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The POST request to import API keys from an external source, such as a CSV-formatted file.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImportApiKeysInput {
    /// <p>The payload of the POST request to import API keys. For the payload format, see API Key File Format.</p>
    pub body: ::std::option::Option<::aws_smithy_types::Blob>,
    /// <p>A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.</p>
    pub format: ::std::option::Option<crate::types::ApiKeysFormat>,
    /// <p>A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.</p>
    pub fail_on_warnings: ::std::option::Option<bool>,
}
impl ImportApiKeysInput {
    /// <p>The payload of the POST request to import API keys. For the payload format, see API Key File Format.</p>
    pub fn body(&self) -> ::std::option::Option<&::aws_smithy_types::Blob> {
        self.body.as_ref()
    }
    /// <p>A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.</p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::ApiKeysFormat> {
        self.format.as_ref()
    }
    /// <p>A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.</p>
    pub fn fail_on_warnings(&self) -> ::std::option::Option<bool> {
        self.fail_on_warnings
    }
}
impl ImportApiKeysInput {
    /// Creates a new builder-style object to manufacture [`ImportApiKeysInput`](crate::operation::import_api_keys::ImportApiKeysInput).
    pub fn builder() -> crate::operation::import_api_keys::builders::ImportApiKeysInputBuilder {
        crate::operation::import_api_keys::builders::ImportApiKeysInputBuilder::default()
    }
}

/// A builder for [`ImportApiKeysInput`](crate::operation::import_api_keys::ImportApiKeysInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImportApiKeysInputBuilder {
    pub(crate) body: ::std::option::Option<::aws_smithy_types::Blob>,
    pub(crate) format: ::std::option::Option<crate::types::ApiKeysFormat>,
    pub(crate) fail_on_warnings: ::std::option::Option<bool>,
}
impl ImportApiKeysInputBuilder {
    /// <p>The payload of the POST request to import API keys. For the payload format, see API Key File Format.</p>
    /// This field is required.
    pub fn body(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.body = ::std::option::Option::Some(input);
        self
    }
    /// <p>The payload of the POST request to import API keys. For the payload format, see API Key File Format.</p>
    pub fn set_body(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.body = input;
        self
    }
    /// <p>The payload of the POST request to import API keys. For the payload format, see API Key File Format.</p>
    pub fn get_body(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.body
    }
    /// <p>A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.</p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::ApiKeysFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p>A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::ApiKeysFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>A query parameter to specify the input format to imported API keys. Currently, only the <code>csv</code> format is supported.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::ApiKeysFormat> {
        &self.format
    }
    /// <p>A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.</p>
    pub fn fail_on_warnings(mut self, input: bool) -> Self {
        self.fail_on_warnings = ::std::option::Option::Some(input);
        self
    }
    /// <p>A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.</p>
    pub fn set_fail_on_warnings(mut self, input: ::std::option::Option<bool>) -> Self {
        self.fail_on_warnings = input;
        self
    }
    /// <p>A query parameter to indicate whether to rollback ApiKey importation (<code>true</code>) or not (<code>false</code>) when error is encountered.</p>
    pub fn get_fail_on_warnings(&self) -> &::std::option::Option<bool> {
        &self.fail_on_warnings
    }
    /// Consumes the builder and constructs a [`ImportApiKeysInput`](crate::operation::import_api_keys::ImportApiKeysInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::import_api_keys::ImportApiKeysInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::import_api_keys::ImportApiKeysInput {
            body: self.body,
            format: self.format,
            fail_on_warnings: self.fail_on_warnings,
        })
    }
}
