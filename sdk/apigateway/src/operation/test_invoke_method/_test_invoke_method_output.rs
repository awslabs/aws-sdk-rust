// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the response of the test invoke request in the HTTP method.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct TestInvokeMethodOutput {
    /// <p>The HTTP status code.</p>
    #[doc(hidden)]
    pub status: i32,
    /// <p>The body of the HTTP response.</p>
    #[doc(hidden)]
    pub body: std::option::Option<std::string::String>,
    /// <p>The headers of the HTTP response.</p>
    #[doc(hidden)]
    pub headers:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The headers of the HTTP response as a map from string to list of values.</p>
    #[doc(hidden)]
    pub multi_value_headers: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    /// <p>The API Gateway execution log for the test invoke request.</p>
    #[doc(hidden)]
    pub log: std::option::Option<std::string::String>,
    /// <p>The execution latency of the test invoke request.</p>
    #[doc(hidden)]
    pub latency: i64,
    _request_id: Option<String>,
}
impl TestInvokeMethodOutput {
    /// <p>The HTTP status code.</p>
    pub fn status(&self) -> i32 {
        self.status
    }
    /// <p>The body of the HTTP response.</p>
    pub fn body(&self) -> std::option::Option<&str> {
        self.body.as_deref()
    }
    /// <p>The headers of the HTTP response.</p>
    pub fn headers(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.headers.as_ref()
    }
    /// <p>The headers of the HTTP response as a map from string to list of values.</p>
    pub fn multi_value_headers(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    > {
        self.multi_value_headers.as_ref()
    }
    /// <p>The API Gateway execution log for the test invoke request.</p>
    pub fn log(&self) -> std::option::Option<&str> {
        self.log.as_deref()
    }
    /// <p>The execution latency of the test invoke request.</p>
    pub fn latency(&self) -> i64 {
        self.latency
    }
}
impl aws_http::request_id::RequestId for TestInvokeMethodOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl TestInvokeMethodOutput {
    /// Creates a new builder-style object to manufacture [`TestInvokeMethodOutput`](crate::operation::test_invoke_method::TestInvokeMethodOutput).
    pub fn builder() -> crate::operation::test_invoke_method::builders::TestInvokeMethodOutputBuilder
    {
        crate::operation::test_invoke_method::builders::TestInvokeMethodOutputBuilder::default()
    }
}

/// A builder for [`TestInvokeMethodOutput`](crate::operation::test_invoke_method::TestInvokeMethodOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct TestInvokeMethodOutputBuilder {
    pub(crate) status: std::option::Option<i32>,
    pub(crate) body: std::option::Option<std::string::String>,
    pub(crate) headers:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) multi_value_headers: std::option::Option<
        std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
    >,
    pub(crate) log: std::option::Option<std::string::String>,
    pub(crate) latency: std::option::Option<i64>,
    _request_id: Option<String>,
}
impl TestInvokeMethodOutputBuilder {
    /// <p>The HTTP status code.</p>
    pub fn status(mut self, input: i32) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The HTTP status code.</p>
    pub fn set_status(mut self, input: std::option::Option<i32>) -> Self {
        self.status = input;
        self
    }
    /// <p>The body of the HTTP response.</p>
    pub fn body(mut self, input: impl Into<std::string::String>) -> Self {
        self.body = Some(input.into());
        self
    }
    /// <p>The body of the HTTP response.</p>
    pub fn set_body(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.body = input;
        self
    }
    /// Adds a key-value pair to `headers`.
    ///
    /// To override the contents of this collection use [`set_headers`](Self::set_headers).
    ///
    /// <p>The headers of the HTTP response.</p>
    pub fn headers(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.headers.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.headers = Some(hash_map);
        self
    }
    /// <p>The headers of the HTTP response.</p>
    pub fn set_headers(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.headers = input;
        self
    }
    /// Adds a key-value pair to `multi_value_headers`.
    ///
    /// To override the contents of this collection use [`set_multi_value_headers`](Self::set_multi_value_headers).
    ///
    /// <p>The headers of the HTTP response as a map from string to list of values.</p>
    pub fn multi_value_headers(
        mut self,
        k: impl Into<std::string::String>,
        v: std::vec::Vec<std::string::String>,
    ) -> Self {
        let mut hash_map = self.multi_value_headers.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.multi_value_headers = Some(hash_map);
        self
    }
    /// <p>The headers of the HTTP response as a map from string to list of values.</p>
    pub fn set_multi_value_headers(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::vec::Vec<std::string::String>>,
        >,
    ) -> Self {
        self.multi_value_headers = input;
        self
    }
    /// <p>The API Gateway execution log for the test invoke request.</p>
    pub fn log(mut self, input: impl Into<std::string::String>) -> Self {
        self.log = Some(input.into());
        self
    }
    /// <p>The API Gateway execution log for the test invoke request.</p>
    pub fn set_log(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.log = input;
        self
    }
    /// <p>The execution latency of the test invoke request.</p>
    pub fn latency(mut self, input: i64) -> Self {
        self.latency = Some(input);
        self
    }
    /// <p>The execution latency of the test invoke request.</p>
    pub fn set_latency(mut self, input: std::option::Option<i64>) -> Self {
        self.latency = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`TestInvokeMethodOutput`](crate::operation::test_invoke_method::TestInvokeMethodOutput).
    pub fn build(self) -> crate::operation::test_invoke_method::TestInvokeMethodOutput {
        crate::operation::test_invoke_method::TestInvokeMethodOutput {
            status: self.status.unwrap_or_default(),
            body: self.body,
            headers: self.headers,
            multi_value_headers: self.multi_value_headers,
            log: self.log,
            latency: self.latency.unwrap_or_default(),
            _request_id: self._request_id,
        }
    }
}
