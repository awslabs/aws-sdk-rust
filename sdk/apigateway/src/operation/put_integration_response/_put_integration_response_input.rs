// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a put integration response request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutIntegrationResponseInput {
    /// <p>The string identifier of the associated RestApi.</p>
    #[doc(hidden)]
    pub rest_api_id: std::option::Option<std::string::String>,
    /// <p>Specifies a put integration response request's resource identifier.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>Specifies a put integration response request's HTTP method.</p>
    #[doc(hidden)]
    pub http_method: std::option::Option<std::string::String>,
    /// <p>Specifies the status code that is used to map the integration response to an existing MethodResponse.</p>
    #[doc(hidden)]
    pub status_code: std::option::Option<std::string::String>,
    /// <p>Specifies the selection pattern of a put integration response.</p>
    #[doc(hidden)]
    pub selection_pattern: std::option::Option<std::string::String>,
    /// <p>A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.</p>
    #[doc(hidden)]
    pub response_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Specifies a put integration response's templates.</p>
    #[doc(hidden)]
    pub response_templates:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
    /// <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
    #[doc(hidden)]
    pub content_handling: std::option::Option<crate::types::ContentHandlingStrategy>,
}
impl PutIntegrationResponseInput {
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(&self) -> std::option::Option<&str> {
        self.rest_api_id.as_deref()
    }
    /// <p>Specifies a put integration response request's resource identifier.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>Specifies a put integration response request's HTTP method.</p>
    pub fn http_method(&self) -> std::option::Option<&str> {
        self.http_method.as_deref()
    }
    /// <p>Specifies the status code that is used to map the integration response to an existing MethodResponse.</p>
    pub fn status_code(&self) -> std::option::Option<&str> {
        self.status_code.as_deref()
    }
    /// <p>Specifies the selection pattern of a put integration response.</p>
    pub fn selection_pattern(&self) -> std::option::Option<&str> {
        self.selection_pattern.as_deref()
    }
    /// <p>A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.</p>
    pub fn response_parameters(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.response_parameters.as_ref()
    }
    /// <p>Specifies a put integration response's templates.</p>
    pub fn response_templates(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.response_templates.as_ref()
    }
    /// <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
    /// <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
    pub fn content_handling(&self) -> std::option::Option<&crate::types::ContentHandlingStrategy> {
        self.content_handling.as_ref()
    }
}
impl PutIntegrationResponseInput {
    /// Creates a new builder-style object to manufacture [`PutIntegrationResponseInput`](crate::operation::put_integration_response::PutIntegrationResponseInput).
    pub fn builder(
    ) -> crate::operation::put_integration_response::builders::PutIntegrationResponseInputBuilder
    {
        crate::operation::put_integration_response::builders::PutIntegrationResponseInputBuilder::default()
    }
}

/// A builder for [`PutIntegrationResponseInput`](crate::operation::put_integration_response::PutIntegrationResponseInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutIntegrationResponseInputBuilder {
    pub(crate) rest_api_id: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) http_method: std::option::Option<std::string::String>,
    pub(crate) status_code: std::option::Option<std::string::String>,
    pub(crate) selection_pattern: std::option::Option<std::string::String>,
    pub(crate) response_parameters:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) response_templates:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) content_handling: std::option::Option<crate::types::ContentHandlingStrategy>,
}
impl PutIntegrationResponseInputBuilder {
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.rest_api_id = Some(input.into());
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn set_rest_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rest_api_id = input;
        self
    }
    /// <p>Specifies a put integration response request's resource identifier.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>Specifies a put integration response request's resource identifier.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>Specifies a put integration response request's HTTP method.</p>
    pub fn http_method(mut self, input: impl Into<std::string::String>) -> Self {
        self.http_method = Some(input.into());
        self
    }
    /// <p>Specifies a put integration response request's HTTP method.</p>
    pub fn set_http_method(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.http_method = input;
        self
    }
    /// <p>Specifies the status code that is used to map the integration response to an existing MethodResponse.</p>
    pub fn status_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.status_code = Some(input.into());
        self
    }
    /// <p>Specifies the status code that is used to map the integration response to an existing MethodResponse.</p>
    pub fn set_status_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.status_code = input;
        self
    }
    /// <p>Specifies the selection pattern of a put integration response.</p>
    pub fn selection_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.selection_pattern = Some(input.into());
        self
    }
    /// <p>Specifies the selection pattern of a put integration response.</p>
    pub fn set_selection_pattern(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.selection_pattern = input;
        self
    }
    /// Adds a key-value pair to `response_parameters`.
    ///
    /// To override the contents of this collection use [`set_response_parameters`](Self::set_response_parameters).
    ///
    /// <p>A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.</p>
    pub fn response_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.response_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.response_parameters = Some(hash_map);
        self
    }
    /// <p>A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.</p>
    pub fn set_response_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.response_parameters = input;
        self
    }
    /// Adds a key-value pair to `response_templates`.
    ///
    /// To override the contents of this collection use [`set_response_templates`](Self::set_response_templates).
    ///
    /// <p>Specifies a put integration response's templates.</p>
    pub fn response_templates(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.response_templates.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.response_templates = Some(hash_map);
        self
    }
    /// <p>Specifies a put integration response's templates.</p>
    pub fn set_response_templates(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.response_templates = input;
        self
    }
    /// <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
    /// <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
    pub fn content_handling(mut self, input: crate::types::ContentHandlingStrategy) -> Self {
        self.content_handling = Some(input);
        self
    }
    /// <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
    /// <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
    pub fn set_content_handling(
        mut self,
        input: std::option::Option<crate::types::ContentHandlingStrategy>,
    ) -> Self {
        self.content_handling = input;
        self
    }
    /// Consumes the builder and constructs a [`PutIntegrationResponseInput`](crate::operation::put_integration_response::PutIntegrationResponseInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_integration_response::PutIntegrationResponseInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::put_integration_response::PutIntegrationResponseInput {
                rest_api_id: self.rest_api_id,
                resource_id: self.resource_id,
                http_method: self.http_method,
                status_code: self.status_code,
                selection_pattern: self.selection_pattern,
                response_parameters: self.response_parameters,
                response_templates: self.response_templates,
                content_handling: self.content_handling,
            },
        )
    }
}
