// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_integration_response::_put_integration_response_output::PutIntegrationResponseOutputBuilder;

pub use crate::operation::put_integration_response::_put_integration_response_input::PutIntegrationResponseInputBuilder;

/// Fluent builder constructing a request to `PutIntegrationResponse`.
///
/// <p>Represents a put integration.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutIntegrationResponseFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_integration_response::builders::PutIntegrationResponseInputBuilder,
}
impl PutIntegrationResponseFluentBuilder {
    /// Creates a new `PutIntegrationResponse`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_integration_response::PutIntegrationResponse,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::put_integration_response::PutIntegrationResponseError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_integration_response::PutIntegrationResponseOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::put_integration_response::PutIntegrationResponseError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.rest_api_id(input.into());
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn set_rest_api_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_rest_api_id(input);
        self
    }
    /// <p>Specifies a put integration response request's resource identifier.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.resource_id(input.into());
        self
    }
    /// <p>Specifies a put integration response request's resource identifier.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_resource_id(input);
        self
    }
    /// <p>Specifies a put integration response request's HTTP method.</p>
    pub fn http_method(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.http_method(input.into());
        self
    }
    /// <p>Specifies a put integration response request's HTTP method.</p>
    pub fn set_http_method(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_http_method(input);
        self
    }
    /// <p>Specifies the status code that is used to map the integration response to an existing MethodResponse.</p>
    pub fn status_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.status_code(input.into());
        self
    }
    /// <p>Specifies the status code that is used to map the integration response to an existing MethodResponse.</p>
    pub fn set_status_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_status_code(input);
        self
    }
    /// <p>Specifies the selection pattern of a put integration response.</p>
    pub fn selection_pattern(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.selection_pattern(input.into());
        self
    }
    /// <p>Specifies the selection pattern of a put integration response.</p>
    pub fn set_selection_pattern(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_selection_pattern(input);
        self
    }
    /// Adds a key-value pair to `responseParameters`.
    ///
    /// To override the contents of this collection use [`set_response_parameters`](Self::set_response_parameters).
    ///
    /// <p>A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.</p>
    pub fn response_parameters(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.response_parameters(k.into(), v.into());
        self
    }
    /// <p>A key-value map specifying response parameters that are passed to the method response from the back end. The key is a method response header parameter name and the mapped value is an integration response header value, a static value enclosed within a pair of single quotes, or a JSON expression from the integration response body. The mapping key must match the pattern of <code>method.response.header.{name}</code>, where <code>name</code> is a valid and unique header name. The mapped non-static value must match the pattern of <code>integration.response.header.{name}</code> or <code>integration.response.body.{JSON-expression}</code>, where <code>name</code> must be a valid and unique response header name and <code>JSON-expression</code> a valid JSON expression without the <code>$</code> prefix.</p>
    pub fn set_response_parameters(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_response_parameters(input);
        self
    }
    /// Adds a key-value pair to `responseTemplates`.
    ///
    /// To override the contents of this collection use [`set_response_templates`](Self::set_response_templates).
    ///
    /// <p>Specifies a put integration response's templates.</p>
    pub fn response_templates(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.response_templates(k.into(), v.into());
        self
    }
    /// <p>Specifies a put integration response's templates.</p>
    pub fn set_response_templates(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_response_templates(input);
        self
    }
    /// <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
    /// <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
    pub fn content_handling(mut self, input: crate::types::ContentHandlingStrategy) -> Self {
        self.inner = self.inner.content_handling(input);
        self
    }
    /// <p>Specifies how to handle response payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>
    /// <p>If this property is not defined, the response payload will be passed through from the integration response to the method response without modification.</p>
    pub fn set_content_handling(
        mut self,
        input: std::option::Option<crate::types::ContentHandlingStrategy>,
    ) -> Self {
        self.inner = self.inner.set_content_handling(input);
        self
    }
}
