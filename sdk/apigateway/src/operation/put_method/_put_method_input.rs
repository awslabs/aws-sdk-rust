// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Request to add a method to an existing Resource resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutMethodInput {
    /// <p>The string identifier of the associated RestApi.</p>
    pub rest_api_id: ::std::option::Option<::std::string::String>,
    /// <p>The Resource identifier for the new Method resource.</p>
    pub resource_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the method request's HTTP method type.</p>
    pub http_method: ::std::option::Option<::std::string::String>,
    /// <p>The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.</p>
    pub authorization_type: ::std::option::Option<::std::string::String>,
    /// <p>Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
    pub authorizer_id: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether the method required a valid ApiKey.</p>
    pub api_key_required: ::std::option::Option<bool>,
    /// <p>A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.</p>
    pub operation_name: ::std::option::Option<::std::string::String>,
    /// <p>A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.</p>
    pub request_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, bool>>,
    /// <p>Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.</p>
    pub request_models: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The identifier of a RequestValidator for validating the method request.</p>
    pub request_validator_id: ::std::option::Option<::std::string::String>,
    /// <p>A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
    pub authorization_scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PutMethodInput {
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn rest_api_id(&self) -> ::std::option::Option<&str> {
        self.rest_api_id.as_deref()
    }
    /// <p>The Resource identifier for the new Method resource.</p>
    pub fn resource_id(&self) -> ::std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>Specifies the method request's HTTP method type.</p>
    pub fn http_method(&self) -> ::std::option::Option<&str> {
        self.http_method.as_deref()
    }
    /// <p>The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.</p>
    pub fn authorization_type(&self) -> ::std::option::Option<&str> {
        self.authorization_type.as_deref()
    }
    /// <p>Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
    pub fn authorizer_id(&self) -> ::std::option::Option<&str> {
        self.authorizer_id.as_deref()
    }
    /// <p>Specifies whether the method required a valid ApiKey.</p>
    pub fn api_key_required(&self) -> ::std::option::Option<bool> {
        self.api_key_required
    }
    /// <p>A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.</p>
    pub fn operation_name(&self) -> ::std::option::Option<&str> {
        self.operation_name.as_deref()
    }
    /// <p>A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.</p>
    pub fn request_parameters(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, bool>> {
        self.request_parameters.as_ref()
    }
    /// <p>Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.</p>
    pub fn request_models(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.request_models.as_ref()
    }
    /// <p>The identifier of a RequestValidator for validating the method request.</p>
    pub fn request_validator_id(&self) -> ::std::option::Option<&str> {
        self.request_validator_id.as_deref()
    }
    /// <p>A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.authorization_scopes.is_none()`.
    pub fn authorization_scopes(&self) -> &[::std::string::String] {
        self.authorization_scopes.as_deref().unwrap_or_default()
    }
}
impl PutMethodInput {
    /// Creates a new builder-style object to manufacture [`PutMethodInput`](crate::operation::put_method::PutMethodInput).
    pub fn builder() -> crate::operation::put_method::builders::PutMethodInputBuilder {
        crate::operation::put_method::builders::PutMethodInputBuilder::default()
    }
}

/// A builder for [`PutMethodInput`](crate::operation::put_method::PutMethodInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutMethodInputBuilder {
    pub(crate) rest_api_id: ::std::option::Option<::std::string::String>,
    pub(crate) resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) http_method: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_type: ::std::option::Option<::std::string::String>,
    pub(crate) authorizer_id: ::std::option::Option<::std::string::String>,
    pub(crate) api_key_required: ::std::option::Option<bool>,
    pub(crate) operation_name: ::std::option::Option<::std::string::String>,
    pub(crate) request_parameters: ::std::option::Option<::std::collections::HashMap<::std::string::String, bool>>,
    pub(crate) request_models: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) request_validator_id: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_scopes: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl PutMethodInputBuilder {
    /// <p>The string identifier of the associated RestApi.</p>
    /// This field is required.
    pub fn rest_api_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rest_api_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn set_rest_api_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rest_api_id = input;
        self
    }
    /// <p>The string identifier of the associated RestApi.</p>
    pub fn get_rest_api_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.rest_api_id
    }
    /// <p>The Resource identifier for the new Method resource.</p>
    /// This field is required.
    pub fn resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Resource identifier for the new Method resource.</p>
    pub fn set_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>The Resource identifier for the new Method resource.</p>
    pub fn get_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_id
    }
    /// <p>Specifies the method request's HTTP method type.</p>
    /// This field is required.
    pub fn http_method(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.http_method = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the method request's HTTP method type.</p>
    pub fn set_http_method(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.http_method = input;
        self
    }
    /// <p>Specifies the method request's HTTP method type.</p>
    pub fn get_http_method(&self) -> &::std::option::Option<::std::string::String> {
        &self.http_method
    }
    /// <p>The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.</p>
    /// This field is required.
    pub fn authorization_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.</p>
    pub fn set_authorization_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_type = input;
        self
    }
    /// <p>The method's authorization type. Valid values are <code>NONE</code> for open access, <code>AWS_IAM</code> for using AWS IAM permissions, <code>CUSTOM</code> for using a custom authorizer, or <code>COGNITO_USER_POOLS</code> for using a Cognito user pool.</p>
    pub fn get_authorization_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_type
    }
    /// <p>Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
    pub fn authorizer_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorizer_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
    pub fn set_authorizer_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorizer_id = input;
        self
    }
    /// <p>Specifies the identifier of an Authorizer to use on this Method, if the type is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by API Gateway when you created the authorizer.</p>
    pub fn get_authorizer_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorizer_id
    }
    /// <p>Specifies whether the method required a valid ApiKey.</p>
    pub fn api_key_required(mut self, input: bool) -> Self {
        self.api_key_required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether the method required a valid ApiKey.</p>
    pub fn set_api_key_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.api_key_required = input;
        self
    }
    /// <p>Specifies whether the method required a valid ApiKey.</p>
    pub fn get_api_key_required(&self) -> &::std::option::Option<bool> {
        &self.api_key_required
    }
    /// <p>A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.</p>
    pub fn operation_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.operation_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.</p>
    pub fn set_operation_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.operation_name = input;
        self
    }
    /// <p>A human-friendly operation identifier for the method. For example, you can assign the <code>operationName</code> of <code>ListPets</code> for the <code>GET /pets</code> method in the <code>PetStore</code> example.</p>
    pub fn get_operation_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.operation_name
    }
    /// Adds a key-value pair to `request_parameters`.
    ///
    /// To override the contents of this collection use [`set_request_parameters`](Self::set_request_parameters).
    ///
    /// <p>A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.</p>
    pub fn request_parameters(mut self, k: impl ::std::convert::Into<::std::string::String>, v: bool) -> Self {
        let mut hash_map = self.request_parameters.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.request_parameters = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.</p>
    pub fn set_request_parameters(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, bool>>) -> Self {
        self.request_parameters = input;
        self
    }
    /// <p>A key-value map defining required or optional method request parameters that can be accepted by API Gateway. A key defines a method request parameter name matching the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> is a valid and unique parameter name. The value associated with the key is a Boolean flag indicating whether the parameter is required (<code>true</code>) or optional (<code>false</code>). The method request parameter names defined here are available in Integration to be mapped to integration request parameters or body-mapping templates.</p>
    pub fn get_request_parameters(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, bool>> {
        &self.request_parameters
    }
    /// Adds a key-value pair to `request_models`.
    ///
    /// To override the contents of this collection use [`set_request_models`](Self::set_request_models).
    ///
    /// <p>Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.</p>
    pub fn request_models(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.request_models.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.request_models = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.</p>
    pub fn set_request_models(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.request_models = input;
        self
    }
    /// <p>Specifies the Model resources used for the request's content type. Request models are represented as a key/value map, with a content type as the key and a Model name as the value.</p>
    pub fn get_request_models(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.request_models
    }
    /// <p>The identifier of a RequestValidator for validating the method request.</p>
    pub fn request_validator_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.request_validator_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a RequestValidator for validating the method request.</p>
    pub fn set_request_validator_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.request_validator_id = input;
        self
    }
    /// <p>The identifier of a RequestValidator for validating the method request.</p>
    pub fn get_request_validator_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.request_validator_id
    }
    /// Appends an item to `authorization_scopes`.
    ///
    /// To override the contents of this collection use [`set_authorization_scopes`](Self::set_authorization_scopes).
    ///
    /// <p>A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
    pub fn authorization_scopes(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.authorization_scopes.unwrap_or_default();
        v.push(input.into());
        self.authorization_scopes = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
    pub fn set_authorization_scopes(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.authorization_scopes = input;
        self
    }
    /// <p>A list of authorization scopes configured on the method. The scopes are used with a <code>COGNITO_USER_POOLS</code> authorizer to authorize the method invocation. The authorization works by matching the method scopes against the scopes parsed from the access token in the incoming request. The method invocation is authorized if any method scopes matches a claimed scope in the access token. Otherwise, the invocation is not authorized. When the method scope is configured, the client must provide an access token instead of an identity token for authorization purposes.</p>
    pub fn get_authorization_scopes(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.authorization_scopes
    }
    /// Consumes the builder and constructs a [`PutMethodInput`](crate::operation::put_method::PutMethodInput).
    pub fn build(self) -> ::std::result::Result<crate::operation::put_method::PutMethodInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::put_method::PutMethodInput {
            rest_api_id: self.rest_api_id,
            resource_id: self.resource_id,
            http_method: self.http_method,
            authorization_type: self.authorization_type,
            authorizer_id: self.authorizer_id,
            api_key_required: self.api_key_required,
            operation_name: self.operation_name,
            request_parameters: self.request_parameters,
            request_models: self.request_models,
            request_validator_id: self.request_validator_id,
            authorization_scopes: self.authorization_scopes,
        })
    }
}
