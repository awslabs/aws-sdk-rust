// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_base_path_mapping::_update_base_path_mapping_output::UpdateBasePathMappingOutputBuilder;

pub use crate::operation::update_base_path_mapping::_update_base_path_mapping_input::UpdateBasePathMappingInputBuilder;

/// Fluent builder constructing a request to `UpdateBasePathMapping`.
///
/// <p>Changes information about the BasePathMapping resource.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBasePathMappingFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_base_path_mapping::builders::UpdateBasePathMappingInputBuilder,
}
impl UpdateBasePathMappingFluentBuilder {
    /// Creates a new `UpdateBasePathMapping`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_base_path_mapping::UpdateBasePathMapping,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_base_path_mapping::UpdateBasePathMappingOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The domain name of the BasePathMapping resource to change.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_name(input.into());
        self
    }
    /// <p>The domain name of the BasePathMapping resource to change.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_name(input);
        self
    }
    /// <p>The base path of the BasePathMapping resource to change.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub fn base_path(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.base_path(input.into());
        self
    }
    /// <p>The base path of the BasePathMapping resource to change.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub fn set_base_path(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_base_path(input);
        self
    }
    /// Appends an item to `patchOperations`.
    ///
    /// To override the contents of this collection use [`set_patch_operations`](Self::set_patch_operations).
    ///
    /// <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
    pub fn patch_operations(mut self, input: crate::types::PatchOperation) -> Self {
        self.inner = self.inner.patch_operations(input);
        self
    }
    /// <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
    pub fn set_patch_operations(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PatchOperation>>,
    ) -> Self {
        self.inner = self.inner.set_patch_operations(input);
        self
    }
}
