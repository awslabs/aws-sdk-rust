// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A request to change information about the BasePathMapping resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateBasePathMappingInput {
    /// <p>The domain name of the BasePathMapping resource to change.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The base path of the BasePathMapping resource to change.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub base_path: ::std::option::Option<::std::string::String>,
    /// <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
    pub patch_operations: ::std::option::Option<::std::vec::Vec<crate::types::PatchOperation>>,
}
impl UpdateBasePathMappingInput {
    /// <p>The domain name of the BasePathMapping resource to change.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The base path of the BasePathMapping resource to change.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub fn base_path(&self) -> ::std::option::Option<&str> {
        self.base_path.as_deref()
    }
    /// <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.patch_operations.is_none()`.
    pub fn patch_operations(&self) -> &[crate::types::PatchOperation] {
        self.patch_operations.as_deref().unwrap_or_default()
    }
}
impl UpdateBasePathMappingInput {
    /// Creates a new builder-style object to manufacture [`UpdateBasePathMappingInput`](crate::operation::update_base_path_mapping::UpdateBasePathMappingInput).
    pub fn builder() -> crate::operation::update_base_path_mapping::builders::UpdateBasePathMappingInputBuilder {
        crate::operation::update_base_path_mapping::builders::UpdateBasePathMappingInputBuilder::default()
    }
}

/// A builder for [`UpdateBasePathMappingInput`](crate::operation::update_base_path_mapping::UpdateBasePathMappingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateBasePathMappingInputBuilder {
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) base_path: ::std::option::Option<::std::string::String>,
    pub(crate) patch_operations: ::std::option::Option<::std::vec::Vec<crate::types::PatchOperation>>,
}
impl UpdateBasePathMappingInputBuilder {
    /// <p>The domain name of the BasePathMapping resource to change.</p>
    /// This field is required.
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name of the BasePathMapping resource to change.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name of the BasePathMapping resource to change.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The base path of the BasePathMapping resource to change.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    /// This field is required.
    pub fn base_path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.base_path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The base path of the BasePathMapping resource to change.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub fn set_base_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.base_path = input;
        self
    }
    /// <p>The base path of the BasePathMapping resource to change.</p>
    /// <p>To specify an empty base path, set this parameter to <code>'(none)'</code>.</p>
    pub fn get_base_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.base_path
    }
    /// Appends an item to `patch_operations`.
    ///
    /// To override the contents of this collection use [`set_patch_operations`](Self::set_patch_operations).
    ///
    /// <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
    pub fn patch_operations(mut self, input: crate::types::PatchOperation) -> Self {
        let mut v = self.patch_operations.unwrap_or_default();
        v.push(input);
        self.patch_operations = ::std::option::Option::Some(v);
        self
    }
    /// <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
    pub fn set_patch_operations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PatchOperation>>) -> Self {
        self.patch_operations = input;
        self
    }
    /// <p>For more information about supported patch operations, see <a href="https://docs.aws.amazon.com/apigateway/latest/api/patch-operations.html">Patch Operations</a>.</p>
    pub fn get_patch_operations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PatchOperation>> {
        &self.patch_operations
    }
    /// Consumes the builder and constructs a [`UpdateBasePathMappingInput`](crate::operation::update_base_path_mapping::UpdateBasePathMappingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_base_path_mapping::UpdateBasePathMappingInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_base_path_mapping::UpdateBasePathMappingInput {
            domain_name: self.domain_name,
            base_path: self.base_path,
            patch_operations: self.patch_operations,
        })
    }
}
