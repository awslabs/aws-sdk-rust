// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a usage plan used to specify who can assess associated API stages. Optionally, target request rate and quota limits can be set. In some cases clients can exceed the targets that you set. Donâ€™t rely on usage plans to control costs. Consider using <a href="https://docs.aws.amazon.com/cost-management/latest/userguide/budgets-managing-costs.html">Amazon Web Services Budgets</a> to monitor costs and <a href="https://docs.aws.amazon.com/waf/latest/developerguide/waf-chapter.html">WAF</a> to manage API requests.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateUsagePlanOutput {
    /// <p>The identifier of a UsagePlan resource.</p>
    pub id: ::std::option::Option<::std::string::String>,
    /// <p>The name of a usage plan.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The description of a usage plan.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The associated API stages of a usage plan.</p>
    pub api_stages: ::std::option::Option<::std::vec::Vec<crate::types::ApiStage>>,
    /// <p>A map containing method level throttling information for API stage in a usage plan.</p>
    pub throttle: ::std::option::Option<crate::types::ThrottleSettings>,
    /// <p>The target maximum number of permitted requests per a given unit time interval.</p>
    pub quota: ::std::option::Option<crate::types::QuotaSettings>,
    /// <p>The Amazon Web Services Marketplace product identifier to associate with the usage plan as a SaaS product on the Amazon Web Services Marketplace.</p>
    pub product_code: ::std::option::Option<::std::string::String>,
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateUsagePlanOutput {
    /// <p>The identifier of a UsagePlan resource.</p>
    pub fn id(&self) -> ::std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of a usage plan.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The description of a usage plan.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The associated API stages of a usage plan.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.api_stages.is_none()`.
    pub fn api_stages(&self) -> &[crate::types::ApiStage] {
        self.api_stages.as_deref().unwrap_or_default()
    }
    /// <p>A map containing method level throttling information for API stage in a usage plan.</p>
    pub fn throttle(&self) -> ::std::option::Option<&crate::types::ThrottleSettings> {
        self.throttle.as_ref()
    }
    /// <p>The target maximum number of permitted requests per a given unit time interval.</p>
    pub fn quota(&self) -> ::std::option::Option<&crate::types::QuotaSettings> {
        self.quota.as_ref()
    }
    /// <p>The Amazon Web Services Marketplace product identifier to associate with the usage plan as a SaaS product on the Amazon Web Services Marketplace.</p>
    pub fn product_code(&self) -> ::std::option::Option<&str> {
        self.product_code.as_deref()
    }
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for UpdateUsagePlanOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl UpdateUsagePlanOutput {
    /// Creates a new builder-style object to manufacture [`UpdateUsagePlanOutput`](crate::operation::update_usage_plan::UpdateUsagePlanOutput).
    pub fn builder() -> crate::operation::update_usage_plan::builders::UpdateUsagePlanOutputBuilder {
        crate::operation::update_usage_plan::builders::UpdateUsagePlanOutputBuilder::default()
    }
}

/// A builder for [`UpdateUsagePlanOutput`](crate::operation::update_usage_plan::UpdateUsagePlanOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateUsagePlanOutputBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) api_stages: ::std::option::Option<::std::vec::Vec<crate::types::ApiStage>>,
    pub(crate) throttle: ::std::option::Option<crate::types::ThrottleSettings>,
    pub(crate) quota: ::std::option::Option<crate::types::QuotaSettings>,
    pub(crate) product_code: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl UpdateUsagePlanOutputBuilder {
    /// <p>The identifier of a UsagePlan resource.</p>
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The identifier of a UsagePlan resource.</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The identifier of a UsagePlan resource.</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The name of a usage plan.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a usage plan.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of a usage plan.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of a usage plan.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of a usage plan.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of a usage plan.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `api_stages`.
    ///
    /// To override the contents of this collection use [`set_api_stages`](Self::set_api_stages).
    ///
    /// <p>The associated API stages of a usage plan.</p>
    pub fn api_stages(mut self, input: crate::types::ApiStage) -> Self {
        let mut v = self.api_stages.unwrap_or_default();
        v.push(input);
        self.api_stages = ::std::option::Option::Some(v);
        self
    }
    /// <p>The associated API stages of a usage plan.</p>
    pub fn set_api_stages(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ApiStage>>) -> Self {
        self.api_stages = input;
        self
    }
    /// <p>The associated API stages of a usage plan.</p>
    pub fn get_api_stages(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ApiStage>> {
        &self.api_stages
    }
    /// <p>A map containing method level throttling information for API stage in a usage plan.</p>
    pub fn throttle(mut self, input: crate::types::ThrottleSettings) -> Self {
        self.throttle = ::std::option::Option::Some(input);
        self
    }
    /// <p>A map containing method level throttling information for API stage in a usage plan.</p>
    pub fn set_throttle(mut self, input: ::std::option::Option<crate::types::ThrottleSettings>) -> Self {
        self.throttle = input;
        self
    }
    /// <p>A map containing method level throttling information for API stage in a usage plan.</p>
    pub fn get_throttle(&self) -> &::std::option::Option<crate::types::ThrottleSettings> {
        &self.throttle
    }
    /// <p>The target maximum number of permitted requests per a given unit time interval.</p>
    pub fn quota(mut self, input: crate::types::QuotaSettings) -> Self {
        self.quota = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target maximum number of permitted requests per a given unit time interval.</p>
    pub fn set_quota(mut self, input: ::std::option::Option<crate::types::QuotaSettings>) -> Self {
        self.quota = input;
        self
    }
    /// <p>The target maximum number of permitted requests per a given unit time interval.</p>
    pub fn get_quota(&self) -> &::std::option::Option<crate::types::QuotaSettings> {
        &self.quota
    }
    /// <p>The Amazon Web Services Marketplace product identifier to associate with the usage plan as a SaaS product on the Amazon Web Services Marketplace.</p>
    pub fn product_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.product_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services Marketplace product identifier to associate with the usage plan as a SaaS product on the Amazon Web Services Marketplace.</p>
    pub fn set_product_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.product_code = input;
        self
    }
    /// <p>The Amazon Web Services Marketplace product identifier to associate with the usage plan as a SaaS product on the Amazon Web Services Marketplace.</p>
    pub fn get_product_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.product_code
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The collection of tags. Each tag element is associated with a given resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`UpdateUsagePlanOutput`](crate::operation::update_usage_plan::UpdateUsagePlanOutput).
    pub fn build(self) -> crate::operation::update_usage_plan::UpdateUsagePlanOutput {
        crate::operation::update_usage_plan::UpdateUsagePlanOutput {
            id: self.id,
            name: self.name,
            description: self.description,
            api_stages: self.api_stages,
            throttle: self.throttle,
            quota: self.quota,
            product_code: self.product_code,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
