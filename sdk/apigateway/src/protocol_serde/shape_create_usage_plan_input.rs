// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_usage_plan_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_usage_plan::CreateUsagePlanInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.api_stages {
        let mut array_2 = object.key("apiStages").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_api_stage::ser_api_stage(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.quota {
        #[allow(unused_mut)]
        let mut object_8 = object.key("quota").start_object();
        crate::protocol_serde::shape_quota_settings::ser_quota_settings(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        #[allow(unused_mut)]
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    if let Some(var_13) = &input.throttle {
        #[allow(unused_mut)]
        let mut object_14 = object.key("throttle").start_object();
        crate::protocol_serde::shape_throttle_settings::ser_throttle_settings(&mut object_14, var_13)?;
        object_14.finish();
    }
    Ok(())
}
