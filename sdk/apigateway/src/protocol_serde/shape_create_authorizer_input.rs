// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_authorizer_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_authorizer::CreateAuthorizerInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.auth_type {
        object.key("authType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.authorizer_credentials {
        object.key("authorizerCredentials").string(var_2.as_str());
    }
    if let Some(var_3) = &input.authorizer_result_ttl_in_seconds {
        object.key("authorizerResultTtlInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.authorizer_uri {
        object.key("authorizerUri").string(var_4.as_str());
    }
    if let Some(var_5) = &input.identity_source {
        object.key("identitySource").string(var_5.as_str());
    }
    if let Some(var_6) = &input.identity_validation_expression {
        object.key("identityValidationExpression").string(var_6.as_str());
    }
    if let Some(var_7) = &input.name {
        object.key("name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.provider_arns {
        let mut array_9 = object.key("providerARNs").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.r#type {
        object.key("type").string(var_11.as_str());
    }
    Ok(())
}
