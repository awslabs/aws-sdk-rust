// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_stage_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_stage::CreateStageInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if input.cache_cluster_enabled {
        object
            .key("cacheClusterEnabled")
            .boolean(input.cache_cluster_enabled);
    }
    if let Some(var_1) = &input.cache_cluster_size {
        object.key("cacheClusterSize").string(var_1.as_str());
    }
    if let Some(var_2) = &input.canary_settings {
        #[allow(unused_mut)]
        let mut object_3 = object.key("canarySettings").start_object();
        crate::protocol_serde::shape_canary_settings::ser_canary_settings(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.deployment_id {
        object.key("deploymentId").string(var_4.as_str());
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.documentation_version {
        object.key("documentationVersion").string(var_6.as_str());
    }
    if let Some(var_7) = &input.stage_name {
        object.key("stageName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        #[allow(unused_mut)]
        let mut object_9 = object.key("tags").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if input.tracing_enabled {
        object.key("tracingEnabled").boolean(input.tracing_enabled);
    }
    if let Some(var_12) = &input.variables {
        #[allow(unused_mut)]
        let mut object_13 = object.key("variables").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}
