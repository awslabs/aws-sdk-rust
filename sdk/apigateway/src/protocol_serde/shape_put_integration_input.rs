// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_integration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_integration::PutIntegrationInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.cache_key_parameters {
        let mut array_2 = object.key("cacheKeyParameters").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3.as_str());
            }
        }
        array_2.finish();
    }
    if let Some(var_4) = &input.cache_namespace {
        object.key("cacheNamespace").string(var_4.as_str());
    }
    if let Some(var_5) = &input.connection_id {
        object.key("connectionId").string(var_5.as_str());
    }
    if let Some(var_6) = &input.connection_type {
        object.key("connectionType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.content_handling {
        object.key("contentHandling").string(var_7.as_str());
    }
    if let Some(var_8) = &input.credentials {
        object.key("credentials").string(var_8.as_str());
    }
    if let Some(var_9) = &input.integration_http_method {
        object.key("httpMethod").string(var_9.as_str());
    }
    if let Some(var_10) = &input.passthrough_behavior {
        object.key("passthroughBehavior").string(var_10.as_str());
    }
    if let Some(var_11) = &input.request_parameters {
        #[allow(unused_mut)]
        let mut object_12 = object.key("requestParameters").start_object();
        for (key_13, value_14) in var_11 {
            {
                object_12.key(key_13.as_str()).string(value_14.as_str());
            }
        }
        object_12.finish();
    }
    if let Some(var_15) = &input.request_templates {
        #[allow(unused_mut)]
        let mut object_16 = object.key("requestTemplates").start_object();
        for (key_17, value_18) in var_15 {
            {
                object_16.key(key_17.as_str()).string(value_18.as_str());
            }
        }
        object_16.finish();
    }
    if let Some(var_19) = &input.timeout_in_millis {
        object.key("timeoutInMillis").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_19).into()),
        );
    }
    if let Some(var_20) = &input.tls_config {
        #[allow(unused_mut)]
        let mut object_21 = object.key("tlsConfig").start_object();
        crate::protocol_serde::shape_tls_config::ser_tls_config(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.r#type {
        object.key("type").string(var_22.as_str());
    }
    if let Some(var_23) = &input.uri {
        object.key("uri").string(var_23.as_str());
    }
    Ok(())
}
