// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_deployment_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_deployment::CreateDeploymentInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.cache_cluster_enabled {
        object.key("cacheClusterEnabled").boolean(*var_1);
    }
    if let Some(var_2) = &input.cache_cluster_size {
        object.key("cacheClusterSize").string(var_2.as_str());
    }
    if let Some(var_3) = &input.canary_settings {
        #[allow(unused_mut)]
        let mut object_4 = object.key("canarySettings").start_object();
        crate::protocol_serde::shape_deployment_canary_settings::ser_deployment_canary_settings(
            &mut object_4,
            var_3,
        )?;
        object_4.finish();
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.stage_description {
        object.key("stageDescription").string(var_6.as_str());
    }
    if let Some(var_7) = &input.stage_name {
        object.key("stageName").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tracing_enabled {
        object.key("tracingEnabled").boolean(*var_8);
    }
    if let Some(var_9) = &input.variables {
        #[allow(unused_mut)]
        let mut object_10 = object.key("variables").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
