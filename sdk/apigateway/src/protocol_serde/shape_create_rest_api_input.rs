// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_rest_api_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_rest_api::CreateRestApiInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.api_key_source {
        object.key("apiKeySource").string(var_1.as_str());
    }
    if let Some(var_2) = &input.binary_media_types {
        let mut array_3 = object.key("binaryMediaTypes").start_array();
        for item_4 in var_2 {
            {
                array_3.value().string(item_4.as_str());
            }
        }
        array_3.finish();
    }
    if let Some(var_5) = &input.clone_from {
        object.key("cloneFrom").string(var_5.as_str());
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if input.disable_execute_api_endpoint {
        object
            .key("disableExecuteApiEndpoint")
            .boolean(input.disable_execute_api_endpoint);
    }
    if let Some(var_7) = &input.endpoint_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("endpointConfiguration").start_object();
        crate::protocol_serde::shape_endpoint_configuration::ser_endpoint_configuration(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.minimum_compression_size {
        object.key("minimumCompressionSize").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.name {
        object.key("name").string(var_10.as_str());
    }
    if let Some(var_11) = &input.policy {
        object.key("policy").string(var_11.as_str());
    }
    if let Some(var_12) = &input.tags {
        #[allow(unused_mut)]
        let mut object_13 = object.key("tags").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    if let Some(var_16) = &input.version {
        object.key("version").string(var_16.as_str());
    }
    Ok(())
}
