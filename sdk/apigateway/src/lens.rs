// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_get_api_keys_output_position(
    input: &crate::operation::get_api_keys::GetApiKeysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_base_path_mappings_output_position(
    input: &crate::operation::get_base_path_mappings::GetBasePathMappingsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_client_certificates_output_position(
    input: &crate::operation::get_client_certificates::GetClientCertificatesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_deployments_output_position(
    input: &crate::operation::get_deployments::GetDeploymentsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_domain_names_output_position(
    input: &crate::operation::get_domain_names::GetDomainNamesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_models_output_position(
    input: &crate::operation::get_models::GetModelsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_resources_output_position(
    input: &crate::operation::get_resources::GetResourcesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_rest_apis_output_position(
    input: &crate::operation::get_rest_apis::GetRestApisOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_usage_output_position(
    input: &crate::operation::get_usage::GetUsageOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_usage_plan_keys_output_position(
    input: &crate::operation::get_usage_plan_keys::GetUsagePlanKeysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_usage_plans_output_position(
    input: &crate::operation::get_usage_plans::GetUsagePlansOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_get_vpc_links_output_position(
    input: &crate::operation::get_vpc_links::GetVpcLinksOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.position {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_api_keys_output_items(
    input: crate::operation::get_api_keys::GetApiKeysOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ApiKey>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_base_path_mappings_output_items(
    input: crate::operation::get_base_path_mappings::GetBasePathMappingsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::BasePathMapping>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_client_certificates_output_items(
    input: crate::operation::get_client_certificates::GetClientCertificatesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ClientCertificate>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_deployments_output_items(
    input: crate::operation::get_deployments::GetDeploymentsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Deployment>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_domain_names_output_items(
    input: crate::operation::get_domain_names::GetDomainNamesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::DomainName>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_models_output_items(
    input: crate::operation::get_models::GetModelsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Model>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_resources_output_items(
    input: crate::operation::get_resources::GetResourcesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::Resource>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_rest_apis_output_items(
    input: crate::operation::get_rest_apis::GetRestApisOutput,
) -> std::option::Option<std::vec::Vec<crate::types::RestApi>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_usage_output_items(
    input: crate::operation::get_usage::GetUsageOutput,
) -> std::option::Option<
    std::collections::HashMap<std::string::String, std::vec::Vec<std::vec::Vec<i64>>>,
> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_usage_plan_keys_output_items(
    input: crate::operation::get_usage_plan_keys::GetUsagePlanKeysOutput,
) -> std::option::Option<std::vec::Vec<crate::types::UsagePlanKey>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_usage_plans_output_items(
    input: crate::operation::get_usage_plans::GetUsagePlansOutput,
) -> std::option::Option<std::vec::Vec<crate::types::UsagePlan>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_get_vpc_links_output_items(
    input: crate::operation::get_vpc_links::GetVpcLinksOutput,
) -> std::option::Option<std::vec::Vec<crate::types::VpcLink>> {
    let input = match input.items {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
