// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.</p>
    BadRequestException(crate::error::BadRequestException),
    /// <p>The request configuration has conflicts. For details, see the accompanying error message.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The request exceeded the rate limit. Retry after the specified time period.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The requested resource is not found. Make sure that the request URI is correct.</p>
    NotFoundException(crate::error::NotFoundException),
    /// <p>The requested service is not available. For details see the accompanying error message. Retry after the specified time period.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p>The request has reached its throttling limit. Retry after the specified time period.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>The request is denied because the caller has insufficient permissions.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateApiKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateApiKeyError> for Error {
    fn from(err: crate::error::CreateApiKeyError) -> Self {
        match err {
            crate::error::CreateApiKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateApiKeyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateApiKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateApiKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateApiKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateApiKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateAuthorizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateAuthorizerError> for Error {
    fn from(err: crate::error::CreateAuthorizerError) -> Self {
        match err {
            crate::error::CreateAuthorizerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateAuthorizerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateAuthorizerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateAuthorizerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateAuthorizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateAuthorizerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateBasePathMappingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateBasePathMappingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateBasePathMappingError> for Error {
    fn from(err: crate::error::CreateBasePathMappingError) -> Self {
        match err {
            crate::error::CreateBasePathMappingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateBasePathMappingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateBasePathMappingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateBasePathMappingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateBasePathMappingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateBasePathMappingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateBasePathMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDeploymentError> for Error {
    fn from(err: crate::error::CreateDeploymentError) -> Self {
        match err {
            crate::error::CreateDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDeploymentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDeploymentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDeploymentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateDeploymentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateDeploymentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDocumentationPartError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDocumentationPartError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDocumentationPartError> for Error {
    fn from(err: crate::error::CreateDocumentationPartError) -> Self {
        match err {
            crate::error::CreateDocumentationPartError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateDocumentationPartError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDocumentationPartError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDocumentationPartError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDocumentationPartError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateDocumentationPartError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateDocumentationPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDocumentationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDocumentationVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDocumentationVersionError> for Error {
    fn from(err: crate::error::CreateDocumentationVersionError) -> Self {
        match err {
            crate::error::CreateDocumentationVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateDocumentationVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDocumentationVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDocumentationVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateDocumentationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateDocumentationVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateDocumentationVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDomainNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDomainNameError> for Error {
    fn from(err: crate::error::CreateDomainNameError) -> Self {
        match err {
            crate::error::CreateDomainNameError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateDomainNameError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateDomainNameError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDomainNameError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateDomainNameError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateModelError> for Error {
    fn from(err: crate::error::CreateModelError) -> Self {
        match err {
            crate::error::CreateModelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateModelError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateModelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateModelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateModelError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRequestValidatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRequestValidatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRequestValidatorError> for Error {
    fn from(err: crate::error::CreateRequestValidatorError) -> Self {
        match err {
            crate::error::CreateRequestValidatorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateRequestValidatorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateRequestValidatorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRequestValidatorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateRequestValidatorError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateRequestValidatorError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateRequestValidatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResourceError> for Error {
    fn from(err: crate::error::CreateResourceError) -> Self {
        match err {
            crate::error::CreateResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRestApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRestApiError> for Error {
    fn from(err: crate::error::CreateRestApiError) -> Self {
        match err {
            crate::error::CreateRestApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateRestApiError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateRestApiError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRestApiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateRestApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateStageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateStageError> for Error {
    fn from(err: crate::error::CreateStageError) -> Self {
        match err {
            crate::error::CreateStageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateStageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateStageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateStageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateStageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateStageError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUsagePlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUsagePlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUsagePlanError> for Error {
    fn from(err: crate::error::CreateUsagePlanError) -> Self {
        match err {
            crate::error::CreateUsagePlanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateUsagePlanError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateUsagePlanError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUsagePlanError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateUsagePlanError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateUsagePlanError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateUsagePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUsagePlanKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateUsagePlanKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUsagePlanKeyError> for Error {
    fn from(err: crate::error::CreateUsagePlanKeyError) -> Self {
        match err {
            crate::error::CreateUsagePlanKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateUsagePlanKeyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateUsagePlanKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUsagePlanKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::CreateUsagePlanKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateUsagePlanKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateUsagePlanKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateVpcLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateVpcLinkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateVpcLinkError> for Error {
    fn from(err: crate::error::CreateVpcLinkError) -> Self {
        match err {
            crate::error::CreateVpcLinkError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::CreateVpcLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::CreateVpcLinkError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateVpcLinkError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateVpcLinkError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateVpcLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteApiKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteApiKeyError> for Error {
    fn from(err: crate::error::DeleteApiKeyError) -> Self {
        match err {
            crate::error::DeleteApiKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteApiKeyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteApiKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteApiKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteApiKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteAuthorizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAuthorizerError> for Error {
    fn from(err: crate::error::DeleteAuthorizerError) -> Self {
        match err {
            crate::error::DeleteAuthorizerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteAuthorizerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteAuthorizerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteAuthorizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteAuthorizerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBasePathMappingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBasePathMappingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBasePathMappingError> for Error {
    fn from(err: crate::error::DeleteBasePathMappingError) -> Self {
        match err {
            crate::error::DeleteBasePathMappingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteBasePathMappingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteBasePathMappingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteBasePathMappingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteBasePathMappingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteBasePathMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteClientCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteClientCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteClientCertificateError> for Error {
    fn from(err: crate::error::DeleteClientCertificateError) -> Self {
        match err {
            crate::error::DeleteClientCertificateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteClientCertificateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteClientCertificateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteClientCertificateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteClientCertificateError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteClientCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDeploymentError> for Error {
    fn from(err: crate::error::DeleteDeploymentError) -> Self {
        match err {
            crate::error::DeleteDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDeploymentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteDeploymentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDeploymentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteDeploymentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDocumentationPartError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDocumentationPartError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDocumentationPartError> for Error {
    fn from(err: crate::error::DeleteDocumentationPartError) -> Self {
        match err {
            crate::error::DeleteDocumentationPartError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteDocumentationPartError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDocumentationPartError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDocumentationPartError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteDocumentationPartError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteDocumentationPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDocumentationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDocumentationVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDocumentationVersionError> for Error {
    fn from(err: crate::error::DeleteDocumentationVersionError) -> Self {
        match err {
            crate::error::DeleteDocumentationVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteDocumentationVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDocumentationVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDocumentationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteDocumentationVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteDocumentationVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteDomainNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteDomainNameError> for Error {
    fn from(err: crate::error::DeleteDomainNameError) -> Self {
        match err {
            crate::error::DeleteDomainNameError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteDomainNameError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteDomainNameError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteDomainNameError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteDomainNameError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGatewayResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteGatewayResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGatewayResponseError> for Error {
    fn from(err: crate::error::DeleteGatewayResponseError) -> Self {
        match err {
            crate::error::DeleteGatewayResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteGatewayResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteGatewayResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteGatewayResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteGatewayResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteGatewayResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteIntegrationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIntegrationError> for Error {
    fn from(err: crate::error::DeleteIntegrationError) -> Self {
        match err {
            crate::error::DeleteIntegrationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteIntegrationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteIntegrationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteIntegrationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteIntegrationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIntegrationResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteIntegrationResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIntegrationResponseError> for Error {
    fn from(err: crate::error::DeleteIntegrationResponseError) -> Self {
        match err {
            crate::error::DeleteIntegrationResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteIntegrationResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteIntegrationResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteIntegrationResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteIntegrationResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteIntegrationResponseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteMethodError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMethodError> for Error {
    fn from(err: crate::error::DeleteMethodError) -> Self {
        match err {
            crate::error::DeleteMethodError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteMethodError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteMethodError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteMethodError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteMethodResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteMethodResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteMethodResponseError> for Error {
    fn from(err: crate::error::DeleteMethodResponseError) -> Self {
        match err {
            crate::error::DeleteMethodResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteMethodResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteMethodResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteMethodResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteMethodResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteMethodResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteModelError> for Error {
    fn from(err: crate::error::DeleteModelError) -> Self {
        match err {
            crate::error::DeleteModelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteModelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteModelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteModelError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRequestValidatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRequestValidatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRequestValidatorError> for Error {
    fn from(err: crate::error::DeleteRequestValidatorError) -> Self {
        match err {
            crate::error::DeleteRequestValidatorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteRequestValidatorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteRequestValidatorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRequestValidatorError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteRequestValidatorError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteRequestValidatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourceError> for Error {
    fn from(err: crate::error::DeleteResourceError) -> Self {
        match err {
            crate::error::DeleteResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRestApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRestApiError> for Error {
    fn from(err: crate::error::DeleteRestApiError) -> Self {
        match err {
            crate::error::DeleteRestApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteRestApiError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteRestApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteRestApiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteRestApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteStageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteStageError> for Error {
    fn from(err: crate::error::DeleteStageError) -> Self {
        match err {
            crate::error::DeleteStageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteStageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteStageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeleteStageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteStageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteStageError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUsagePlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUsagePlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUsagePlanError> for Error {
    fn from(err: crate::error::DeleteUsagePlanError) -> Self {
        match err {
            crate::error::DeleteUsagePlanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteUsagePlanError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteUsagePlanError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteUsagePlanError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteUsagePlanError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteUsagePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUsagePlanKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUsagePlanKeyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUsagePlanKeyError> for Error {
    fn from(err: crate::error::DeleteUsagePlanKeyError) -> Self {
        match err {
            crate::error::DeleteUsagePlanKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteUsagePlanKeyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteUsagePlanKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteUsagePlanKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteUsagePlanKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteUsagePlanKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVpcLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVpcLinkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVpcLinkError> for Error {
    fn from(err: crate::error::DeleteVpcLinkError) -> Self {
        match err {
            crate::error::DeleteVpcLinkError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::DeleteVpcLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteVpcLinkError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::DeleteVpcLinkError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteVpcLinkError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteVpcLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FlushStageAuthorizersCacheError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::FlushStageAuthorizersCacheError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FlushStageAuthorizersCacheError> for Error {
    fn from(err: crate::error::FlushStageAuthorizersCacheError) -> Self {
        match err {
            crate::error::FlushStageAuthorizersCacheError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::FlushStageAuthorizersCacheError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::FlushStageAuthorizersCacheError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::FlushStageAuthorizersCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::FlushStageAuthorizersCacheError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::FlushStageAuthorizersCacheError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::FlushStageAuthorizersCacheError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::FlushStageCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::FlushStageCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::FlushStageCacheError> for Error {
    fn from(err: crate::error::FlushStageCacheError) -> Self {
        match err {
            crate::error::FlushStageCacheError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::FlushStageCacheError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::FlushStageCacheError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::FlushStageCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::FlushStageCacheError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::FlushStageCacheError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::FlushStageCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GenerateClientCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GenerateClientCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GenerateClientCertificateError> for Error {
    fn from(err: crate::error::GenerateClientCertificateError) -> Self {
        match err {
            crate::error::GenerateClientCertificateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GenerateClientCertificateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GenerateClientCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GenerateClientCertificateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GenerateClientCertificateError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GenerateClientCertificateError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAccountError> for Error {
    fn from(err: crate::error::GetAccountError) -> Self {
        match err {
            crate::error::GetAccountError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAccountError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAccountError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetAccountError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetApiKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApiKeyError> for Error {
    fn from(err: crate::error::GetApiKeyError) -> Self {
        match err {
            crate::error::GetApiKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApiKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApiKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApiKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetApiKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetApiKeysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetApiKeysError> for Error {
    fn from(err: crate::error::GetApiKeysError) -> Self {
        match err {
            crate::error::GetApiKeysError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetApiKeysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetApiKeysError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetApiKeysError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetApiKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAuthorizerError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAuthorizerError> for Error {
    fn from(err: crate::error::GetAuthorizerError) -> Self {
        match err {
            crate::error::GetAuthorizerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAuthorizerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAuthorizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetAuthorizerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAuthorizersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAuthorizersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAuthorizersError> for Error {
    fn from(err: crate::error::GetAuthorizersError) -> Self {
        match err {
            crate::error::GetAuthorizersError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetAuthorizersError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetAuthorizersError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetAuthorizersError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetAuthorizersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBasePathMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBasePathMappingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBasePathMappingError> for Error {
    fn from(err: crate::error::GetBasePathMappingError) -> Self {
        match err {
            crate::error::GetBasePathMappingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBasePathMappingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBasePathMappingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBasePathMappingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetBasePathMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetBasePathMappingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetBasePathMappingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetBasePathMappingsError> for Error {
    fn from(err: crate::error::GetBasePathMappingsError) -> Self {
        match err {
            crate::error::GetBasePathMappingsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetBasePathMappingsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetBasePathMappingsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetBasePathMappingsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetBasePathMappingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetClientCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetClientCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetClientCertificateError> for Error {
    fn from(err: crate::error::GetClientCertificateError) -> Self {
        match err {
            crate::error::GetClientCertificateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetClientCertificateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetClientCertificateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetClientCertificateError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetClientCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetClientCertificatesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetClientCertificatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetClientCertificatesError> for Error {
    fn from(err: crate::error::GetClientCertificatesError) -> Self {
        match err {
            crate::error::GetClientCertificatesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetClientCertificatesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetClientCertificatesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetClientCertificatesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetClientCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDeploymentError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDeploymentError> for Error {
    fn from(err: crate::error::GetDeploymentError) -> Self {
        match err {
            crate::error::GetDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDeploymentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDeploymentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetDeploymentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDeploymentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDeploymentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDeploymentsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDeploymentsError> for Error {
    fn from(err: crate::error::GetDeploymentsError) -> Self {
        match err {
            crate::error::GetDeploymentsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDeploymentsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDeploymentsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::GetDeploymentsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDeploymentsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDeploymentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDocumentationPartError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDocumentationPartError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDocumentationPartError> for Error {
    fn from(err: crate::error::GetDocumentationPartError) -> Self {
        match err {
            crate::error::GetDocumentationPartError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDocumentationPartError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDocumentationPartError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDocumentationPartError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDocumentationPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDocumentationPartsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDocumentationPartsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDocumentationPartsError> for Error {
    fn from(err: crate::error::GetDocumentationPartsError) -> Self {
        match err {
            crate::error::GetDocumentationPartsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDocumentationPartsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDocumentationPartsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDocumentationPartsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDocumentationPartsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDocumentationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDocumentationVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDocumentationVersionError> for Error {
    fn from(err: crate::error::GetDocumentationVersionError) -> Self {
        match err {
            crate::error::GetDocumentationVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDocumentationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDocumentationVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDocumentationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDocumentationVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetDocumentationVersionsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDocumentationVersionsError> for Error {
    fn from(err: crate::error::GetDocumentationVersionsError) -> Self {
        match err {
            crate::error::GetDocumentationVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDocumentationVersionsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDocumentationVersionsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDocumentationVersionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDocumentationVersionsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDomainNameError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDomainNameError> for Error {
    fn from(err: crate::error::GetDomainNameError) -> Self {
        match err {
            crate::error::GetDomainNameError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDomainNameError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDomainNameError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDomainNameError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDomainNamesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDomainNamesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDomainNamesError> for Error {
    fn from(err: crate::error::GetDomainNamesError) -> Self {
        match err {
            crate::error::GetDomainNamesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetDomainNamesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetDomainNamesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDomainNamesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetDomainNamesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetExportError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetExportError> for Error {
    fn from(err: crate::error::GetExportError) -> Self {
        match err {
            crate::error::GetExportError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetExportError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetExportError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetExportError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetExportError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetExportError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGatewayResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetGatewayResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGatewayResponseError> for Error {
    fn from(err: crate::error::GetGatewayResponseError) -> Self {
        match err {
            crate::error::GetGatewayResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGatewayResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetGatewayResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetGatewayResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetGatewayResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGatewayResponsesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetGatewayResponsesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGatewayResponsesError> for Error {
    fn from(err: crate::error::GetGatewayResponsesError) -> Self {
        match err {
            crate::error::GetGatewayResponsesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetGatewayResponsesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetGatewayResponsesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetGatewayResponsesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetGatewayResponsesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetIntegrationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIntegrationError> for Error {
    fn from(err: crate::error::GetIntegrationError) -> Self {
        match err {
            crate::error::GetIntegrationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetIntegrationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetIntegrationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetIntegrationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetIntegrationResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetIntegrationResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIntegrationResponseError> for Error {
    fn from(err: crate::error::GetIntegrationResponseError) -> Self {
        match err {
            crate::error::GetIntegrationResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetIntegrationResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetIntegrationResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetIntegrationResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetIntegrationResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetMethodError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMethodError> for Error {
    fn from(err: crate::error::GetMethodError) -> Self {
        match err {
            crate::error::GetMethodError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetMethodError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetMethodError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetMethodResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetMethodResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetMethodResponseError> for Error {
    fn from(err: crate::error::GetMethodResponseError) -> Self {
        match err {
            crate::error::GetMethodResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetMethodResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetMethodResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetMethodResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetModelError> for Error {
    fn from(err: crate::error::GetModelError) -> Self {
        match err {
            crate::error::GetModelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetModelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetModelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetModelError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetModelsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetModelsError> for Error {
    fn from(err: crate::error::GetModelsError) -> Self {
        match err {
            crate::error::GetModelsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetModelsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetModelsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetModelsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetModelTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetModelTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetModelTemplateError> for Error {
    fn from(err: crate::error::GetModelTemplateError) -> Self {
        match err {
            crate::error::GetModelTemplateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetModelTemplateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetModelTemplateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetModelTemplateError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetModelTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRequestValidatorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRequestValidatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRequestValidatorError> for Error {
    fn from(err: crate::error::GetRequestValidatorError) -> Self {
        match err {
            crate::error::GetRequestValidatorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetRequestValidatorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRequestValidatorError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetRequestValidatorError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetRequestValidatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRequestValidatorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRequestValidatorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRequestValidatorsError> for Error {
    fn from(err: crate::error::GetRequestValidatorsError) -> Self {
        match err {
            crate::error::GetRequestValidatorsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetRequestValidatorsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRequestValidatorsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetRequestValidatorsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetRequestValidatorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourceError> for Error {
    fn from(err: crate::error::GetResourceError) -> Self {
        match err {
            crate::error::GetResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetResourcesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourcesError> for Error {
    fn from(err: crate::error::GetResourcesError) -> Self {
        match err {
            crate::error::GetResourcesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetResourcesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetResourcesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetResourcesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRestApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRestApiError> for Error {
    fn from(err: crate::error::GetRestApiError) -> Self {
        match err {
            crate::error::GetRestApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetRestApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRestApiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetRestApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRestApisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRestApisError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRestApisError> for Error {
    fn from(err: crate::error::GetRestApisError) -> Self {
        match err {
            crate::error::GetRestApisError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetRestApisError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetRestApisError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetRestApisError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetRestApisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSdkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSdkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSdkError> for Error {
    fn from(err: crate::error::GetSdkError) -> Self {
        match err {
            crate::error::GetSdkError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSdkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::GetSdkError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetSdkError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetSdkError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSdkError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetSdkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSdkTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSdkTypeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSdkTypeError> for Error {
    fn from(err: crate::error::GetSdkTypeError) -> Self {
        match err {
            crate::error::GetSdkTypeError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSdkTypeError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSdkTypeError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSdkTypeError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetSdkTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSdkTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetSdkTypesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSdkTypesError> for Error {
    fn from(err: crate::error::GetSdkTypesError) -> Self {
        match err {
            crate::error::GetSdkTypesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetSdkTypesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetSdkTypesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetSdkTypesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetSdkTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetStageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetStageError> for Error {
    fn from(err: crate::error::GetStageError) -> Self {
        match err {
            crate::error::GetStageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetStageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetStageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetStageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetStageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetStageError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetStagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetStagesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetStagesError> for Error {
    fn from(err: crate::error::GetStagesError) -> Self {
        match err {
            crate::error::GetStagesError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetStagesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::GetStagesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::GetStagesError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetStagesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetStagesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetStagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetTagsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetTagsError> for Error {
    fn from(err: crate::error::GetTagsError) -> Self {
        match err {
            crate::error::GetTagsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetTagsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::error::GetTagsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetTagsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUsageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUsageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUsageError> for Error {
    fn from(err: crate::error::GetUsageError) -> Self {
        match err {
            crate::error::GetUsageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUsageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetUsageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUsageError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUsagePlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUsagePlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUsagePlanError> for Error {
    fn from(err: crate::error::GetUsagePlanError) -> Self {
        match err {
            crate::error::GetUsagePlanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUsagePlanError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetUsagePlanError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUsagePlanError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetUsagePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUsagePlanKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUsagePlanKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUsagePlanKeyError> for Error {
    fn from(err: crate::error::GetUsagePlanKeyError) -> Self {
        match err {
            crate::error::GetUsagePlanKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUsagePlanKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetUsagePlanKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUsagePlanKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetUsagePlanKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUsagePlanKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUsagePlanKeysError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUsagePlanKeysError> for Error {
    fn from(err: crate::error::GetUsagePlanKeysError) -> Self {
        match err {
            crate::error::GetUsagePlanKeysError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUsagePlanKeysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetUsagePlanKeysError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUsagePlanKeysError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetUsagePlanKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUsagePlansError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUsagePlansError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUsagePlansError> for Error {
    fn from(err: crate::error::GetUsagePlansError) -> Self {
        match err {
            crate::error::GetUsagePlansError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetUsagePlansError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetUsagePlansError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUsagePlansError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetUsagePlansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVpcLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVpcLinkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVpcLinkError> for Error {
    fn from(err: crate::error::GetVpcLinkError) -> Self {
        match err {
            crate::error::GetVpcLinkError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVpcLinkError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVpcLinkError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetVpcLinkError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetVpcLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetVpcLinksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetVpcLinksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetVpcLinksError> for Error {
    fn from(err: crate::error::GetVpcLinksError) -> Self {
        match err {
            crate::error::GetVpcLinksError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::GetVpcLinksError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::GetVpcLinksError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetVpcLinksError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::GetVpcLinksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportApiKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ImportApiKeysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportApiKeysError> for Error {
    fn from(err: crate::error::ImportApiKeysError) -> Self {
        match err {
            crate::error::ImportApiKeysError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ImportApiKeysError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ImportApiKeysError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ImportApiKeysError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ImportApiKeysError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ImportApiKeysError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ImportApiKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportDocumentationPartsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ImportDocumentationPartsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportDocumentationPartsError> for Error {
    fn from(err: crate::error::ImportDocumentationPartsError) -> Self {
        match err {
            crate::error::ImportDocumentationPartsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ImportDocumentationPartsError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ImportDocumentationPartsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ImportDocumentationPartsError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ImportDocumentationPartsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ImportDocumentationPartsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ImportDocumentationPartsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ImportRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ImportRestApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ImportRestApiError> for Error {
    fn from(err: crate::error::ImportRestApiError) -> Self {
        match err {
            crate::error::ImportRestApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::ImportRestApiError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ImportRestApiError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ImportRestApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::ImportRestApiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ImportRestApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ImportRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutGatewayResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutGatewayResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutGatewayResponseError> for Error {
    fn from(err: crate::error::PutGatewayResponseError) -> Self {
        match err {
            crate::error::PutGatewayResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutGatewayResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutGatewayResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutGatewayResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutGatewayResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutGatewayResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::PutGatewayResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutIntegrationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutIntegrationError> for Error {
    fn from(err: crate::error::PutIntegrationError) -> Self {
        match err {
            crate::error::PutIntegrationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutIntegrationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutIntegrationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutIntegrationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutIntegrationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutIntegrationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::PutIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutIntegrationResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutIntegrationResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutIntegrationResponseError> for Error {
    fn from(err: crate::error::PutIntegrationResponseError) -> Self {
        match err {
            crate::error::PutIntegrationResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutIntegrationResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutIntegrationResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutIntegrationResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutIntegrationResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutIntegrationResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::PutIntegrationResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutMethodError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutMethodError> for Error {
    fn from(err: crate::error::PutMethodError) -> Self {
        match err {
            crate::error::PutMethodError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutMethodError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutMethodError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutMethodError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutMethodError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutMethodError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::PutMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutMethodResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutMethodResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutMethodResponseError> for Error {
    fn from(err: crate::error::PutMethodResponseError) -> Self {
        match err {
            crate::error::PutMethodResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutMethodResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutMethodResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutMethodResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutMethodResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutMethodResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::PutMethodResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutRestApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRestApiError> for Error {
    fn from(err: crate::error::PutRestApiError) -> Self {
        match err {
            crate::error::PutRestApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::PutRestApiError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::PutRestApiError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutRestApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::PutRestApiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::PutRestApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::PutRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::TagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TagResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::TagResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestInvokeAuthorizerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TestInvokeAuthorizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestInvokeAuthorizerError> for Error {
    fn from(err: crate::error::TestInvokeAuthorizerError) -> Self {
        match err {
            crate::error::TestInvokeAuthorizerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TestInvokeAuthorizerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TestInvokeAuthorizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::TestInvokeAuthorizerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::TestInvokeAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TestInvokeMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TestInvokeMethodError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TestInvokeMethodError> for Error {
    fn from(err: crate::error::TestInvokeMethodError) -> Self {
        match err {
            crate::error::TestInvokeMethodError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::TestInvokeMethodError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::TestInvokeMethodError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::TestInvokeMethodError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::TestInvokeMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UntagResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UntagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UntagResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UntagResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UntagResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAccountError> for Error {
    fn from(err: crate::error::UpdateAccountError) -> Self {
        match err {
            crate::error::UpdateAccountError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAccountError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateAccountError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateAccountError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateAccountError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateApiKeyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateApiKeyError> for Error {
    fn from(err: crate::error::UpdateApiKeyError) -> Self {
        match err {
            crate::error::UpdateApiKeyError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateApiKeyError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateApiKeyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateApiKeyError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateApiKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateApiKeyError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAuthorizerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAuthorizerError> for Error {
    fn from(err: crate::error::UpdateAuthorizerError) -> Self {
        match err {
            crate::error::UpdateAuthorizerError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateAuthorizerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateAuthorizerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateAuthorizerError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateAuthorizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateAuthorizerError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBasePathMappingError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBasePathMappingError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBasePathMappingError> for Error {
    fn from(err: crate::error::UpdateBasePathMappingError) -> Self {
        match err {
            crate::error::UpdateBasePathMappingError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateBasePathMappingError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateBasePathMappingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateBasePathMappingError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateBasePathMappingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateBasePathMappingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateBasePathMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateClientCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateClientCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateClientCertificateError> for Error {
    fn from(err: crate::error::UpdateClientCertificateError) -> Self {
        match err {
            crate::error::UpdateClientCertificateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateClientCertificateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateClientCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateClientCertificateError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateClientCertificateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateClientCertificateError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateClientCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDeploymentError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDeploymentError> for Error {
    fn from(err: crate::error::UpdateDeploymentError) -> Self {
        match err {
            crate::error::UpdateDeploymentError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateDeploymentError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDeploymentError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDeploymentError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDeploymentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::UpdateDeploymentError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateDeploymentError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDocumentationPartError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDocumentationPartError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDocumentationPartError> for Error {
    fn from(err: crate::error::UpdateDocumentationPartError) -> Self {
        match err {
            crate::error::UpdateDocumentationPartError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateDocumentationPartError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDocumentationPartError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDocumentationPartError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDocumentationPartError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateDocumentationPartError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateDocumentationPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDocumentationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDocumentationVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDocumentationVersionError> for Error {
    fn from(err: crate::error::UpdateDocumentationVersionError) -> Self {
        match err {
            crate::error::UpdateDocumentationVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateDocumentationVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDocumentationVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDocumentationVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDocumentationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateDocumentationVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateDocumentationVersionError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDomainNameError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDomainNameError> for Error {
    fn from(err: crate::error::UpdateDomainNameError) -> Self {
        match err {
            crate::error::UpdateDomainNameError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateDomainNameError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateDomainNameError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateDomainNameError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateDomainNameError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateDomainNameError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGatewayResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGatewayResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGatewayResponseError> for Error {
    fn from(err: crate::error::UpdateGatewayResponseError) -> Self {
        match err {
            crate::error::UpdateGatewayResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateGatewayResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateGatewayResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateGatewayResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateGatewayResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateGatewayResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateGatewayResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateIntegrationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIntegrationError> for Error {
    fn from(err: crate::error::UpdateIntegrationError) -> Self {
        match err {
            crate::error::UpdateIntegrationError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateIntegrationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateIntegrationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateIntegrationError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateIntegrationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateIntegrationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIntegrationResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateIntegrationResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIntegrationResponseError> for Error {
    fn from(err: crate::error::UpdateIntegrationResponseError) -> Self {
        match err {
            crate::error::UpdateIntegrationResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateIntegrationResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateIntegrationResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateIntegrationResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateIntegrationResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateIntegrationResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateIntegrationResponseError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateMethodError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMethodError> for Error {
    fn from(err: crate::error::UpdateMethodError) -> Self {
        match err {
            crate::error::UpdateMethodError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateMethodError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateMethodError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateMethodError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateMethodError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMethodResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMethodResponseError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMethodResponseError> for Error {
    fn from(err: crate::error::UpdateMethodResponseError) -> Self {
        match err {
            crate::error::UpdateMethodResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateMethodResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateMethodResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateMethodResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateMethodResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateMethodResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateMethodResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateModelError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateModelError> for Error {
    fn from(err: crate::error::UpdateModelError) -> Self {
        match err {
            crate::error::UpdateModelError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateModelError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateModelError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateModelError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateModelError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateModelError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRequestValidatorError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRequestValidatorError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRequestValidatorError> for Error {
    fn from(err: crate::error::UpdateRequestValidatorError) -> Self {
        match err {
            crate::error::UpdateRequestValidatorError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateRequestValidatorError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateRequestValidatorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateRequestValidatorError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateRequestValidatorError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateRequestValidatorError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateRequestValidatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResourceError> for Error {
    fn from(err: crate::error::UpdateResourceError) -> Self {
        match err {
            crate::error::UpdateResourceError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateResourceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateResourceError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateResourceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateRestApiError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRestApiError> for Error {
    fn from(err: crate::error::UpdateRestApiError) -> Self {
        match err {
            crate::error::UpdateRestApiError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateRestApiError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateRestApiError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateRestApiError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateRestApiError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateRestApiError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateStageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateStageError> for Error {
    fn from(err: crate::error::UpdateStageError) -> Self {
        match err {
            crate::error::UpdateStageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateStageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateStageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateStageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateStageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateStageError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUsageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUsageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUsageError> for Error {
    fn from(err: crate::error::UpdateUsageError) -> Self {
        match err {
            crate::error::UpdateUsageError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateUsageError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateUsageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateUsageError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateUsageError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateUsageError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUsagePlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUsagePlanError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUsagePlanError> for Error {
    fn from(err: crate::error::UpdateUsagePlanError) -> Self {
        match err {
            crate::error::UpdateUsagePlanError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateUsagePlanError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateUsagePlanError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateUsagePlanError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateUsagePlanError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateUsagePlanError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateUsagePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVpcLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateVpcLinkError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVpcLinkError> for Error {
    fn from(err: crate::error::UpdateVpcLinkError) -> Self {
        match err {
            crate::error::UpdateVpcLinkError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::error::UpdateVpcLinkError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateVpcLinkError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateVpcLinkError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::error::UpdateVpcLinkError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateVpcLinkError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateVpcLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
