// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The submitted request is not valid, for example, the input is incomplete or incorrect. See the accompanying error message for details.</p>
    BadRequestException(crate::types::error::BadRequestException),
    /// <p>The request configuration has conflicts. For details, see the accompanying error message.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request exceeded the rate limit. Retry after the specified time period.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The requested resource is not found. Make sure that the request URI is correct.</p>
    NotFoundException(crate::types::error::NotFoundException),
    /// <p>The requested service is not available. For details see the accompanying error message. Retry after the specified time period.</p>
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    /// <p>The request has reached its throttling limit. Retry after the specified time period.</p>
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    /// <p>The request is denied because the caller has insufficient permissions.</p>
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_api_key::CreateApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_api_key::CreateApiKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_api_key::CreateApiKeyError> for Error {
    fn from(err: crate::operation::create_api_key::CreateApiKeyError) -> Self {
        match err {
            crate::operation::create_api_key::CreateApiKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_api_key::CreateApiKeyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_api_key::CreateApiKeyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_api_key::CreateApiKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_api_key::CreateApiKeyError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_api_key::CreateApiKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_api_key::CreateApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_authorizer::CreateAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_authorizer::CreateAuthorizerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_authorizer::CreateAuthorizerError> for Error {
    fn from(err: crate::operation::create_authorizer::CreateAuthorizerError) -> Self {
        match err {
            crate::operation::create_authorizer::CreateAuthorizerError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_authorizer::CreateAuthorizerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_authorizer::CreateAuthorizerError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_authorizer::CreateAuthorizerError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_authorizer::CreateAuthorizerError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_authorizer::CreateAuthorizerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_authorizer::CreateAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_base_path_mapping::CreateBasePathMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_base_path_mapping::CreateBasePathMappingError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_base_path_mapping::CreateBasePathMappingError> for Error {
    fn from(err: crate::operation::create_base_path_mapping::CreateBasePathMappingError) -> Self {
        match err {
            crate::operation::create_base_path_mapping::CreateBasePathMappingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_base_path_mapping::CreateBasePathMappingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_base_path_mapping::CreateBasePathMappingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_base_path_mapping::CreateBasePathMappingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_base_path_mapping::CreateBasePathMappingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_base_path_mapping::CreateBasePathMappingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_base_path_mapping::CreateBasePathMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_deployment::CreateDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_deployment::CreateDeploymentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_deployment::CreateDeploymentError> for Error {
    fn from(err: crate::operation::create_deployment::CreateDeploymentError) -> Self {
        match err {
            crate::operation::create_deployment::CreateDeploymentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_deployment::CreateDeploymentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_deployment::CreateDeploymentError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_deployment::CreateDeploymentError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_deployment::CreateDeploymentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_deployment::CreateDeploymentError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_deployment::CreateDeploymentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_deployment::CreateDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_documentation_part::CreateDocumentationPartError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_documentation_part::CreateDocumentationPartError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_documentation_part::CreateDocumentationPartError> for Error {
    fn from(err: crate::operation::create_documentation_part::CreateDocumentationPartError) -> Self {
        match err {
            crate::operation::create_documentation_part::CreateDocumentationPartError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_documentation_part::CreateDocumentationPartError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_documentation_part::CreateDocumentationPartError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_documentation_part::CreateDocumentationPartError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_documentation_part::CreateDocumentationPartError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_documentation_part::CreateDocumentationPartError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_documentation_part::CreateDocumentationPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_documentation_version::CreateDocumentationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_documentation_version::CreateDocumentationVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_documentation_version::CreateDocumentationVersionError> for Error {
    fn from(err: crate::operation::create_documentation_version::CreateDocumentationVersionError) -> Self {
        match err {
            crate::operation::create_documentation_version::CreateDocumentationVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::create_documentation_version::CreateDocumentationVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_documentation_version::CreateDocumentationVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_documentation_version::CreateDocumentationVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::create_documentation_version::CreateDocumentationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_documentation_version::CreateDocumentationVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_documentation_version::CreateDocumentationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain_name::CreateDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_domain_name::CreateDomainNameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_domain_name::CreateDomainNameError> for Error {
    fn from(err: crate::operation::create_domain_name::CreateDomainNameError) -> Self {
        match err {
            crate::operation::create_domain_name::CreateDomainNameError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_domain_name::CreateDomainNameError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_domain_name::CreateDomainNameError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_domain_name::CreateDomainNameError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_domain_name::CreateDomainNameError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_domain_name::CreateDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model::CreateModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_model::CreateModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_model::CreateModelError> for Error {
    fn from(err: crate::operation::create_model::CreateModelError) -> Self {
        match err {
            crate::operation::create_model::CreateModelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_model::CreateModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_model::CreateModelError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_model::CreateModelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_model::CreateModelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_model::CreateModelError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_model::CreateModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_request_validator::CreateRequestValidatorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_request_validator::CreateRequestValidatorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_request_validator::CreateRequestValidatorError> for Error {
    fn from(err: crate::operation::create_request_validator::CreateRequestValidatorError) -> Self {
        match err {
            crate::operation::create_request_validator::CreateRequestValidatorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_request_validator::CreateRequestValidatorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_request_validator::CreateRequestValidatorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::create_request_validator::CreateRequestValidatorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_request_validator::CreateRequestValidatorError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_request_validator::CreateRequestValidatorError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::create_request_validator::CreateRequestValidatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resource::CreateResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_resource::CreateResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_resource::CreateResourceError> for Error {
    fn from(err: crate::operation::create_resource::CreateResourceError) -> Self {
        match err {
            crate::operation::create_resource::CreateResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_resource::CreateResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_resource::CreateResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_resource::CreateResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_resource::CreateResourceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_resource::CreateResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_resource::CreateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rest_api::CreateRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_rest_api::CreateRestApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_rest_api::CreateRestApiError> for Error {
    fn from(err: crate::operation::create_rest_api::CreateRestApiError) -> Self {
        match err {
            crate::operation::create_rest_api::CreateRestApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_rest_api::CreateRestApiError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_rest_api::CreateRestApiError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_rest_api::CreateRestApiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_rest_api::CreateRestApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_rest_api::CreateRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stage::CreateStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_stage::CreateStageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_stage::CreateStageError> for Error {
    fn from(err: crate::operation::create_stage::CreateStageError) -> Self {
        match err {
            crate::operation::create_stage::CreateStageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_stage::CreateStageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_stage::CreateStageError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_stage::CreateStageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_stage::CreateStageError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_stage::CreateStageError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_stage::CreateStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_usage_plan::CreateUsagePlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_usage_plan::CreateUsagePlanError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_usage_plan::CreateUsagePlanError> for Error {
    fn from(err: crate::operation::create_usage_plan::CreateUsagePlanError) -> Self {
        match err {
            crate::operation::create_usage_plan::CreateUsagePlanError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_usage_plan::CreateUsagePlanError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_usage_plan::CreateUsagePlanError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_usage_plan::CreateUsagePlanError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_usage_plan::CreateUsagePlanError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_usage_plan::CreateUsagePlanError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_usage_plan::CreateUsagePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_usage_plan_key::CreateUsagePlanKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_usage_plan_key::CreateUsagePlanKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_usage_plan_key::CreateUsagePlanKeyError> for Error {
    fn from(err: crate::operation::create_usage_plan_key::CreateUsagePlanKeyError) -> Self {
        match err {
            crate::operation::create_usage_plan_key::CreateUsagePlanKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_usage_plan_key::CreateUsagePlanKeyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_usage_plan_key::CreateUsagePlanKeyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_usage_plan_key::CreateUsagePlanKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::create_usage_plan_key::CreateUsagePlanKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::create_usage_plan_key::CreateUsagePlanKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_usage_plan_key::CreateUsagePlanKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_vpc_link::CreateVpcLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_vpc_link::CreateVpcLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_vpc_link::CreateVpcLinkError> for Error {
    fn from(err: crate::operation::create_vpc_link::CreateVpcLinkError) -> Self {
        match err {
            crate::operation::create_vpc_link::CreateVpcLinkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_vpc_link::CreateVpcLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_vpc_link::CreateVpcLinkError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::create_vpc_link::CreateVpcLinkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::create_vpc_link::CreateVpcLinkError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_vpc_link::CreateVpcLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_api_key::DeleteApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_api_key::DeleteApiKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_api_key::DeleteApiKeyError> for Error {
    fn from(err: crate::operation::delete_api_key::DeleteApiKeyError) -> Self {
        match err {
            crate::operation::delete_api_key::DeleteApiKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_api_key::DeleteApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_authorizer::DeleteAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_authorizer::DeleteAuthorizerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_authorizer::DeleteAuthorizerError> for Error {
    fn from(err: crate::operation::delete_authorizer::DeleteAuthorizerError) -> Self {
        match err {
            crate::operation::delete_authorizer::DeleteAuthorizerError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_authorizer::DeleteAuthorizerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_authorizer::DeleteAuthorizerError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_authorizer::DeleteAuthorizerError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_authorizer::DeleteAuthorizerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_authorizer::DeleteAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_base_path_mapping::DeleteBasePathMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_base_path_mapping::DeleteBasePathMappingError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_base_path_mapping::DeleteBasePathMappingError> for Error {
    fn from(err: crate::operation::delete_base_path_mapping::DeleteBasePathMappingError) -> Self {
        match err {
            crate::operation::delete_base_path_mapping::DeleteBasePathMappingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_base_path_mapping::DeleteBasePathMappingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_base_path_mapping::DeleteBasePathMappingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_base_path_mapping::DeleteBasePathMappingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_base_path_mapping::DeleteBasePathMappingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_base_path_mapping::DeleteBasePathMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_client_certificate::DeleteClientCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_client_certificate::DeleteClientCertificateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_client_certificate::DeleteClientCertificateError> for Error {
    fn from(err: crate::operation::delete_client_certificate::DeleteClientCertificateError) -> Self {
        match err {
            crate::operation::delete_client_certificate::DeleteClientCertificateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_client_certificate::DeleteClientCertificateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_client_certificate::DeleteClientCertificateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_client_certificate::DeleteClientCertificateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_client_certificate::DeleteClientCertificateError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_client_certificate::DeleteClientCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_deployment::DeleteDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_deployment::DeleteDeploymentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_deployment::DeleteDeploymentError> for Error {
    fn from(err: crate::operation::delete_deployment::DeleteDeploymentError) -> Self {
        match err {
            crate::operation::delete_deployment::DeleteDeploymentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_deployment::DeleteDeploymentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_deployment::DeleteDeploymentError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_deployment::DeleteDeploymentError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_deployment::DeleteDeploymentError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_deployment::DeleteDeploymentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_deployment::DeleteDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_documentation_part::DeleteDocumentationPartError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_documentation_part::DeleteDocumentationPartError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_documentation_part::DeleteDocumentationPartError> for Error {
    fn from(err: crate::operation::delete_documentation_part::DeleteDocumentationPartError) -> Self {
        match err {
            crate::operation::delete_documentation_part::DeleteDocumentationPartError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_documentation_part::DeleteDocumentationPartError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_documentation_part::DeleteDocumentationPartError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_documentation_part::DeleteDocumentationPartError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_documentation_part::DeleteDocumentationPartError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_documentation_part::DeleteDocumentationPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_documentation_version::DeleteDocumentationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_documentation_version::DeleteDocumentationVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_documentation_version::DeleteDocumentationVersionError> for Error {
    fn from(err: crate::operation::delete_documentation_version::DeleteDocumentationVersionError) -> Self {
        match err {
            crate::operation::delete_documentation_version::DeleteDocumentationVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_documentation_version::DeleteDocumentationVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_documentation_version::DeleteDocumentationVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_documentation_version::DeleteDocumentationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_documentation_version::DeleteDocumentationVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_documentation_version::DeleteDocumentationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain_name::DeleteDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_domain_name::DeleteDomainNameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_domain_name::DeleteDomainNameError> for Error {
    fn from(err: crate::operation::delete_domain_name::DeleteDomainNameError) -> Self {
        match err {
            crate::operation::delete_domain_name::DeleteDomainNameError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_domain_name::DeleteDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_gateway_response::DeleteGatewayResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_gateway_response::DeleteGatewayResponseError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_gateway_response::DeleteGatewayResponseError> for Error {
    fn from(err: crate::operation::delete_gateway_response::DeleteGatewayResponseError) -> Self {
        match err {
            crate::operation::delete_gateway_response::DeleteGatewayResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_gateway_response::DeleteGatewayResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_gateway_response::DeleteGatewayResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_gateway_response::DeleteGatewayResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_gateway_response::DeleteGatewayResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_gateway_response::DeleteGatewayResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_integration::DeleteIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_integration::DeleteIntegrationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_integration::DeleteIntegrationError> for Error {
    fn from(err: crate::operation::delete_integration::DeleteIntegrationError) -> Self {
        match err {
            crate::operation::delete_integration::DeleteIntegrationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_integration::DeleteIntegrationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_integration::DeleteIntegrationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_integration::DeleteIntegrationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_integration::DeleteIntegrationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_integration::DeleteIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_integration_response::DeleteIntegrationResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_integration_response::DeleteIntegrationResponseError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_integration_response::DeleteIntegrationResponseError> for Error {
    fn from(err: crate::operation::delete_integration_response::DeleteIntegrationResponseError) -> Self {
        match err {
            crate::operation::delete_integration_response::DeleteIntegrationResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::delete_integration_response::DeleteIntegrationResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_integration_response::DeleteIntegrationResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::delete_integration_response::DeleteIntegrationResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_integration_response::DeleteIntegrationResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_integration_response::DeleteIntegrationResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_method::DeleteMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_method::DeleteMethodError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_method::DeleteMethodError> for Error {
    fn from(err: crate::operation::delete_method::DeleteMethodError) -> Self {
        match err {
            crate::operation::delete_method::DeleteMethodError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_method::DeleteMethodError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_method::DeleteMethodError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_method::DeleteMethodError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_method::DeleteMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_method_response::DeleteMethodResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_method_response::DeleteMethodResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_method_response::DeleteMethodResponseError> for Error {
    fn from(err: crate::operation::delete_method_response::DeleteMethodResponseError) -> Self {
        match err {
            crate::operation::delete_method_response::DeleteMethodResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_method_response::DeleteMethodResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_method_response::DeleteMethodResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_method_response::DeleteMethodResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_method_response::DeleteMethodResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_method_response::DeleteMethodResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_model::DeleteModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_model::DeleteModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_model::DeleteModelError> for Error {
    fn from(err: crate::operation::delete_model::DeleteModelError) -> Self {
        match err {
            crate::operation::delete_model::DeleteModelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_model::DeleteModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_model::DeleteModelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_model::DeleteModelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_model::DeleteModelError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_model::DeleteModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_request_validator::DeleteRequestValidatorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_request_validator::DeleteRequestValidatorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_request_validator::DeleteRequestValidatorError> for Error {
    fn from(err: crate::operation::delete_request_validator::DeleteRequestValidatorError) -> Self {
        match err {
            crate::operation::delete_request_validator::DeleteRequestValidatorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_request_validator::DeleteRequestValidatorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_request_validator::DeleteRequestValidatorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_request_validator::DeleteRequestValidatorError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_request_validator::DeleteRequestValidatorError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::delete_request_validator::DeleteRequestValidatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource::DeleteResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource::DeleteResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource::DeleteResourceError> for Error {
    fn from(err: crate::operation::delete_resource::DeleteResourceError) -> Self {
        match err {
            crate::operation::delete_resource::DeleteResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_resource::DeleteResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_resource::DeleteResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_resource::DeleteResourceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_resource::DeleteResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_resource::DeleteResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rest_api::DeleteRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_rest_api::DeleteRestApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_rest_api::DeleteRestApiError> for Error {
    fn from(err: crate::operation::delete_rest_api::DeleteRestApiError) -> Self {
        match err {
            crate::operation::delete_rest_api::DeleteRestApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_rest_api::DeleteRestApiError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_rest_api::DeleteRestApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_rest_api::DeleteRestApiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_rest_api::DeleteRestApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_rest_api::DeleteRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_stage::DeleteStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_stage::DeleteStageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_stage::DeleteStageError> for Error {
    fn from(err: crate::operation::delete_stage::DeleteStageError) -> Self {
        match err {
            crate::operation::delete_stage::DeleteStageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_stage::DeleteStageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_stage::DeleteStageError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_stage::DeleteStageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_stage::DeleteStageError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_stage::DeleteStageError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_stage::DeleteStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_usage_plan::DeleteUsagePlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_usage_plan::DeleteUsagePlanError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_usage_plan::DeleteUsagePlanError> for Error {
    fn from(err: crate::operation::delete_usage_plan::DeleteUsagePlanError) -> Self {
        match err {
            crate::operation::delete_usage_plan::DeleteUsagePlanError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_usage_plan::DeleteUsagePlanError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_usage_plan::DeleteUsagePlanError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_usage_plan::DeleteUsagePlanError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_usage_plan::DeleteUsagePlanError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_usage_plan::DeleteUsagePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError> for Error {
    fn from(err: crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError) -> Self {
        match err {
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_usage_plan_key::DeleteUsagePlanKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vpc_link::DeleteVpcLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_vpc_link::DeleteVpcLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_vpc_link::DeleteVpcLinkError> for Error {
    fn from(err: crate::operation::delete_vpc_link::DeleteVpcLinkError) -> Self {
        match err {
            crate::operation::delete_vpc_link::DeleteVpcLinkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_vpc_link::DeleteVpcLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_vpc_link::DeleteVpcLinkError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_vpc_link::DeleteVpcLinkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::delete_vpc_link::DeleteVpcLinkError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_vpc_link::DeleteVpcLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError> for Error {
    fn from(err: crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError) -> Self {
        match err {
            crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::flush_stage_authorizers_cache::FlushStageAuthorizersCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::flush_stage_cache::FlushStageCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::flush_stage_cache::FlushStageCacheError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::flush_stage_cache::FlushStageCacheError> for Error {
    fn from(err: crate::operation::flush_stage_cache::FlushStageCacheError) -> Self {
        match err {
            crate::operation::flush_stage_cache::FlushStageCacheError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::flush_stage_cache::FlushStageCacheError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::flush_stage_cache::FlushStageCacheError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::flush_stage_cache::FlushStageCacheError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::flush_stage_cache::FlushStageCacheError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::flush_stage_cache::FlushStageCacheError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::flush_stage_cache::FlushStageCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::generate_client_certificate::GenerateClientCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::generate_client_certificate::GenerateClientCertificateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::generate_client_certificate::GenerateClientCertificateError> for Error {
    fn from(err: crate::operation::generate_client_certificate::GenerateClientCertificateError) -> Self {
        match err {
            crate::operation::generate_client_certificate::GenerateClientCertificateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::generate_client_certificate::GenerateClientCertificateError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::generate_client_certificate::GenerateClientCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::generate_client_certificate::GenerateClientCertificateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::generate_client_certificate::GenerateClientCertificateError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::generate_client_certificate::GenerateClientCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account::GetAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_account::GetAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_account::GetAccountError> for Error {
    fn from(err: crate::operation::get_account::GetAccountError) -> Self {
        match err {
            crate::operation::get_account::GetAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_account::GetAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_account::GetAccountError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_account::GetAccountError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_account::GetAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_key::GetApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_key::GetApiKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_api_key::GetApiKeyError> for Error {
    fn from(err: crate::operation::get_api_key::GetApiKeyError) -> Self {
        match err {
            crate::operation::get_api_key::GetApiKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_api_key::GetApiKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_api_key::GetApiKeyError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_api_key::GetApiKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_api_key::GetApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_keys::GetApiKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_api_keys::GetApiKeysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_api_keys::GetApiKeysError> for Error {
    fn from(err: crate::operation::get_api_keys::GetApiKeysError) -> Self {
        match err {
            crate::operation::get_api_keys::GetApiKeysError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_api_keys::GetApiKeysError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_api_keys::GetApiKeysError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_api_keys::GetApiKeysError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_api_keys::GetApiKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_authorizer::GetAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_authorizer::GetAuthorizerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_authorizer::GetAuthorizerError> for Error {
    fn from(err: crate::operation::get_authorizer::GetAuthorizerError) -> Self {
        match err {
            crate::operation::get_authorizer::GetAuthorizerError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_authorizer::GetAuthorizerError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_authorizer::GetAuthorizerError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_authorizer::GetAuthorizerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_authorizer::GetAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_authorizers::GetAuthorizersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_authorizers::GetAuthorizersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_authorizers::GetAuthorizersError> for Error {
    fn from(err: crate::operation::get_authorizers::GetAuthorizersError) -> Self {
        match err {
            crate::operation::get_authorizers::GetAuthorizersError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_authorizers::GetAuthorizersError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_authorizers::GetAuthorizersError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_authorizers::GetAuthorizersError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_authorizers::GetAuthorizersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_base_path_mapping::GetBasePathMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_base_path_mapping::GetBasePathMappingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_base_path_mapping::GetBasePathMappingError> for Error {
    fn from(err: crate::operation::get_base_path_mapping::GetBasePathMappingError) -> Self {
        match err {
            crate::operation::get_base_path_mapping::GetBasePathMappingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_base_path_mapping::GetBasePathMappingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_base_path_mapping::GetBasePathMappingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_base_path_mapping::GetBasePathMappingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_base_path_mapping::GetBasePathMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_base_path_mappings::GetBasePathMappingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_base_path_mappings::GetBasePathMappingsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_base_path_mappings::GetBasePathMappingsError> for Error {
    fn from(err: crate::operation::get_base_path_mappings::GetBasePathMappingsError) -> Self {
        match err {
            crate::operation::get_base_path_mappings::GetBasePathMappingsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_base_path_mappings::GetBasePathMappingsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_base_path_mappings::GetBasePathMappingsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_base_path_mappings::GetBasePathMappingsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_base_path_mappings::GetBasePathMappingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_client_certificate::GetClientCertificateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_client_certificate::GetClientCertificateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_client_certificate::GetClientCertificateError> for Error {
    fn from(err: crate::operation::get_client_certificate::GetClientCertificateError) -> Self {
        match err {
            crate::operation::get_client_certificate::GetClientCertificateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_client_certificate::GetClientCertificateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_client_certificate::GetClientCertificateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_client_certificate::GetClientCertificateError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_client_certificate::GetClientCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_client_certificates::GetClientCertificatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_client_certificates::GetClientCertificatesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_client_certificates::GetClientCertificatesError> for Error {
    fn from(err: crate::operation::get_client_certificates::GetClientCertificatesError) -> Self {
        match err {
            crate::operation::get_client_certificates::GetClientCertificatesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_client_certificates::GetClientCertificatesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_client_certificates::GetClientCertificatesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_client_certificates::GetClientCertificatesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_client_certificates::GetClientCertificatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_deployment::GetDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_deployment::GetDeploymentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_deployment::GetDeploymentError> for Error {
    fn from(err: crate::operation::get_deployment::GetDeploymentError) -> Self {
        match err {
            crate::operation::get_deployment::GetDeploymentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_deployment::GetDeploymentError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_deployment::GetDeploymentError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_deployment::GetDeploymentError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_deployment::GetDeploymentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_deployment::GetDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_deployments::GetDeploymentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_deployments::GetDeploymentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_deployments::GetDeploymentsError> for Error {
    fn from(err: crate::operation::get_deployments::GetDeploymentsError) -> Self {
        match err {
            crate::operation::get_deployments::GetDeploymentsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_deployments::GetDeploymentsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_deployments::GetDeploymentsError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::get_deployments::GetDeploymentsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_deployments::GetDeploymentsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_deployments::GetDeploymentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_documentation_part::GetDocumentationPartError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_documentation_part::GetDocumentationPartError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_documentation_part::GetDocumentationPartError> for Error {
    fn from(err: crate::operation::get_documentation_part::GetDocumentationPartError) -> Self {
        match err {
            crate::operation::get_documentation_part::GetDocumentationPartError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_documentation_part::GetDocumentationPartError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_documentation_part::GetDocumentationPartError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_documentation_part::GetDocumentationPartError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_documentation_part::GetDocumentationPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_documentation_parts::GetDocumentationPartsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_documentation_parts::GetDocumentationPartsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_documentation_parts::GetDocumentationPartsError> for Error {
    fn from(err: crate::operation::get_documentation_parts::GetDocumentationPartsError) -> Self {
        match err {
            crate::operation::get_documentation_parts::GetDocumentationPartsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_documentation_parts::GetDocumentationPartsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_documentation_parts::GetDocumentationPartsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_documentation_parts::GetDocumentationPartsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_documentation_parts::GetDocumentationPartsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_documentation_version::GetDocumentationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_documentation_version::GetDocumentationVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_documentation_version::GetDocumentationVersionError> for Error {
    fn from(err: crate::operation::get_documentation_version::GetDocumentationVersionError) -> Self {
        match err {
            crate::operation::get_documentation_version::GetDocumentationVersionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_documentation_version::GetDocumentationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_documentation_version::GetDocumentationVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_documentation_version::GetDocumentationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_documentation_versions::GetDocumentationVersionsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_documentation_versions::GetDocumentationVersionsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_documentation_versions::GetDocumentationVersionsError> for Error {
    fn from(err: crate::operation::get_documentation_versions::GetDocumentationVersionsError) -> Self {
        match err {
            crate::operation::get_documentation_versions::GetDocumentationVersionsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::get_documentation_versions::GetDocumentationVersionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_documentation_versions::GetDocumentationVersionsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_documentation_versions::GetDocumentationVersionsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_documentation_versions::GetDocumentationVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain_name::GetDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain_name::GetDomainNameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_domain_name::GetDomainNameError> for Error {
    fn from(err: crate::operation::get_domain_name::GetDomainNameError) -> Self {
        match err {
            crate::operation::get_domain_name::GetDomainNameError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_domain_name::GetDomainNameError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_domain_name::GetDomainNameError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_domain_name::GetDomainNameError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_domain_name::GetDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain_names::GetDomainNamesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_domain_names::GetDomainNamesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_domain_names::GetDomainNamesError> for Error {
    fn from(err: crate::operation::get_domain_names::GetDomainNamesError) -> Self {
        match err {
            crate::operation::get_domain_names::GetDomainNamesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_domain_names::GetDomainNamesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_domain_names::GetDomainNamesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_domain_names::GetDomainNamesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_domain_names::GetDomainNamesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_export::GetExportError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_export::GetExportError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_export::GetExportError> for Error {
    fn from(err: crate::operation::get_export::GetExportError) -> Self {
        match err {
            crate::operation::get_export::GetExportError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_export::GetExportError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_export::GetExportError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_export::GetExportError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_export::GetExportError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_export::GetExportError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_export::GetExportError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_gateway_response::GetGatewayResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_gateway_response::GetGatewayResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_gateway_response::GetGatewayResponseError> for Error {
    fn from(err: crate::operation::get_gateway_response::GetGatewayResponseError) -> Self {
        match err {
            crate::operation::get_gateway_response::GetGatewayResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_gateway_response::GetGatewayResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_gateway_response::GetGatewayResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_gateway_response::GetGatewayResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_gateway_response::GetGatewayResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_gateway_responses::GetGatewayResponsesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_gateway_responses::GetGatewayResponsesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_gateway_responses::GetGatewayResponsesError> for Error {
    fn from(err: crate::operation::get_gateway_responses::GetGatewayResponsesError) -> Self {
        match err {
            crate::operation::get_gateway_responses::GetGatewayResponsesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_gateway_responses::GetGatewayResponsesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_gateway_responses::GetGatewayResponsesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_gateway_responses::GetGatewayResponsesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_gateway_responses::GetGatewayResponsesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_integration::GetIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_integration::GetIntegrationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_integration::GetIntegrationError> for Error {
    fn from(err: crate::operation::get_integration::GetIntegrationError) -> Self {
        match err {
            crate::operation::get_integration::GetIntegrationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_integration::GetIntegrationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_integration::GetIntegrationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_integration::GetIntegrationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_integration::GetIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_integration_response::GetIntegrationResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_integration_response::GetIntegrationResponseError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_integration_response::GetIntegrationResponseError> for Error {
    fn from(err: crate::operation::get_integration_response::GetIntegrationResponseError) -> Self {
        match err {
            crate::operation::get_integration_response::GetIntegrationResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_integration_response::GetIntegrationResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_integration_response::GetIntegrationResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_integration_response::GetIntegrationResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::get_integration_response::GetIntegrationResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_method::GetMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_method::GetMethodError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_method::GetMethodError> for Error {
    fn from(err: crate::operation::get_method::GetMethodError) -> Self {
        match err {
            crate::operation::get_method::GetMethodError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_method::GetMethodError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_method::GetMethodError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_method::GetMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_method_response::GetMethodResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_method_response::GetMethodResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_method_response::GetMethodResponseError> for Error {
    fn from(err: crate::operation::get_method_response::GetMethodResponseError) -> Self {
        match err {
            crate::operation::get_method_response::GetMethodResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_method_response::GetMethodResponseError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_method_response::GetMethodResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_method_response::GetMethodResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model::GetModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model::GetModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_model::GetModelError> for Error {
    fn from(err: crate::operation::get_model::GetModelError) -> Self {
        match err {
            crate::operation::get_model::GetModelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_model::GetModelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_model::GetModelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_model::GetModelError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_model::GetModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_models::GetModelsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_models::GetModelsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_models::GetModelsError> for Error {
    fn from(err: crate::operation::get_models::GetModelsError) -> Self {
        match err {
            crate::operation::get_models::GetModelsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_models::GetModelsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_models::GetModelsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_models::GetModelsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_models::GetModelsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_template::GetModelTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_model_template::GetModelTemplateError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_model_template::GetModelTemplateError> for Error {
    fn from(err: crate::operation::get_model_template::GetModelTemplateError) -> Self {
        match err {
            crate::operation::get_model_template::GetModelTemplateError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_model_template::GetModelTemplateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_model_template::GetModelTemplateError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_model_template::GetModelTemplateError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_model_template::GetModelTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_request_validator::GetRequestValidatorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_request_validator::GetRequestValidatorError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_request_validator::GetRequestValidatorError> for Error {
    fn from(err: crate::operation::get_request_validator::GetRequestValidatorError) -> Self {
        match err {
            crate::operation::get_request_validator::GetRequestValidatorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_request_validator::GetRequestValidatorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_request_validator::GetRequestValidatorError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_request_validator::GetRequestValidatorError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_request_validator::GetRequestValidatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_request_validators::GetRequestValidatorsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_request_validators::GetRequestValidatorsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_request_validators::GetRequestValidatorsError> for Error {
    fn from(err: crate::operation::get_request_validators::GetRequestValidatorsError) -> Self {
        match err {
            crate::operation::get_request_validators::GetRequestValidatorsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_request_validators::GetRequestValidatorsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_request_validators::GetRequestValidatorsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_request_validators::GetRequestValidatorsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_request_validators::GetRequestValidatorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource::GetResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource::GetResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource::GetResourceError> for Error {
    fn from(err: crate::operation::get_resource::GetResourceError) -> Self {
        match err {
            crate::operation::get_resource::GetResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_resource::GetResourceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_resource::GetResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_resource::GetResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resources::GetResourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resources::GetResourcesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resources::GetResourcesError> for Error {
    fn from(err: crate::operation::get_resources::GetResourcesError) -> Self {
        match err {
            crate::operation::get_resources::GetResourcesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_resources::GetResourcesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_resources::GetResourcesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_resources::GetResourcesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_resources::GetResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rest_api::GetRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rest_api::GetRestApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_rest_api::GetRestApiError> for Error {
    fn from(err: crate::operation::get_rest_api::GetRestApiError) -> Self {
        match err {
            crate::operation::get_rest_api::GetRestApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_rest_api::GetRestApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_rest_api::GetRestApiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_rest_api::GetRestApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_rest_api::GetRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rest_apis::GetRestApisError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_rest_apis::GetRestApisError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_rest_apis::GetRestApisError> for Error {
    fn from(err: crate::operation::get_rest_apis::GetRestApisError) -> Self {
        match err {
            crate::operation::get_rest_apis::GetRestApisError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_rest_apis::GetRestApisError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_rest_apis::GetRestApisError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_rest_apis::GetRestApisError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_rest_apis::GetRestApisError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sdk::GetSdkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sdk::GetSdkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sdk::GetSdkError> for Error {
    fn from(err: crate::operation::get_sdk::GetSdkError) -> Self {
        match err {
            crate::operation::get_sdk::GetSdkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_sdk::GetSdkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_sdk::GetSdkError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_sdk::GetSdkError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_sdk::GetSdkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_sdk::GetSdkError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_sdk::GetSdkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sdk_type::GetSdkTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sdk_type::GetSdkTypeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sdk_type::GetSdkTypeError> for Error {
    fn from(err: crate::operation::get_sdk_type::GetSdkTypeError) -> Self {
        match err {
            crate::operation::get_sdk_type::GetSdkTypeError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_sdk_type::GetSdkTypeError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_sdk_type::GetSdkTypeError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_sdk_type::GetSdkTypeError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_sdk_type::GetSdkTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sdk_types::GetSdkTypesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_sdk_types::GetSdkTypesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_sdk_types::GetSdkTypesError> for Error {
    fn from(err: crate::operation::get_sdk_types::GetSdkTypesError) -> Self {
        match err {
            crate::operation::get_sdk_types::GetSdkTypesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_sdk_types::GetSdkTypesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_sdk_types::GetSdkTypesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_sdk_types::GetSdkTypesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_sdk_types::GetSdkTypesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stage::GetStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stage::GetStageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_stage::GetStageError> for Error {
    fn from(err: crate::operation::get_stage::GetStageError) -> Self {
        match err {
            crate::operation::get_stage::GetStageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_stage::GetStageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_stage::GetStageError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_stage::GetStageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_stage::GetStageError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_stage::GetStageError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_stage::GetStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stages::GetStagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_stages::GetStagesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_stages::GetStagesError> for Error {
    fn from(err: crate::operation::get_stages::GetStagesError) -> Self {
        match err {
            crate::operation::get_stages::GetStagesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_stages::GetStagesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_stages::GetStagesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_stages::GetStagesError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_stages::GetStagesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_stages::GetStagesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_stages::GetStagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_tags::GetTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_tags::GetTagsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_tags::GetTagsError> for Error {
    fn from(err: crate::operation::get_tags::GetTagsError) -> Self {
        match err {
            crate::operation::get_tags::GetTagsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_tags::GetTagsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_tags::GetTagsError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_tags::GetTagsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_tags::GetTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage::GetUsageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage::GetUsageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_usage::GetUsageError> for Error {
    fn from(err: crate::operation::get_usage::GetUsageError) -> Self {
        match err {
            crate::operation::get_usage::GetUsageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_usage::GetUsageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_usage::GetUsageError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_usage::GetUsageError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_usage::GetUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_plan::GetUsagePlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_plan::GetUsagePlanError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_usage_plan::GetUsagePlanError> for Error {
    fn from(err: crate::operation::get_usage_plan::GetUsagePlanError) -> Self {
        match err {
            crate::operation::get_usage_plan::GetUsagePlanError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_usage_plan::GetUsagePlanError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_usage_plan::GetUsagePlanError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_usage_plan::GetUsagePlanError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_usage_plan::GetUsagePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_plan_key::GetUsagePlanKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_plan_key::GetUsagePlanKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_usage_plan_key::GetUsagePlanKeyError> for Error {
    fn from(err: crate::operation::get_usage_plan_key::GetUsagePlanKeyError) -> Self {
        match err {
            crate::operation::get_usage_plan_key::GetUsagePlanKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_usage_plan_key::GetUsagePlanKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_usage_plan_key::GetUsagePlanKeyError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_usage_plan_key::GetUsagePlanKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_usage_plan_key::GetUsagePlanKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_plan_keys::GetUsagePlanKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_plan_keys::GetUsagePlanKeysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_usage_plan_keys::GetUsagePlanKeysError> for Error {
    fn from(err: crate::operation::get_usage_plan_keys::GetUsagePlanKeysError) -> Self {
        match err {
            crate::operation::get_usage_plan_keys::GetUsagePlanKeysError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_usage_plan_keys::GetUsagePlanKeysError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_usage_plan_keys::GetUsagePlanKeysError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_usage_plan_keys::GetUsagePlanKeysError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_usage_plan_keys::GetUsagePlanKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_plans::GetUsagePlansError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_usage_plans::GetUsagePlansError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_usage_plans::GetUsagePlansError> for Error {
    fn from(err: crate::operation::get_usage_plans::GetUsagePlansError) -> Self {
        match err {
            crate::operation::get_usage_plans::GetUsagePlansError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_usage_plans::GetUsagePlansError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_usage_plans::GetUsagePlansError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_usage_plans::GetUsagePlansError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_usage_plans::GetUsagePlansError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vpc_link::GetVpcLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vpc_link::GetVpcLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vpc_link::GetVpcLinkError> for Error {
    fn from(err: crate::operation::get_vpc_link::GetVpcLinkError) -> Self {
        match err {
            crate::operation::get_vpc_link::GetVpcLinkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_vpc_link::GetVpcLinkError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_vpc_link::GetVpcLinkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_vpc_link::GetVpcLinkError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_vpc_link::GetVpcLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vpc_links::GetVpcLinksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_vpc_links::GetVpcLinksError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_vpc_links::GetVpcLinksError> for Error {
    fn from(err: crate::operation::get_vpc_links::GetVpcLinksError) -> Self {
        match err {
            crate::operation::get_vpc_links::GetVpcLinksError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_vpc_links::GetVpcLinksError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_vpc_links::GetVpcLinksError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::get_vpc_links::GetVpcLinksError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_vpc_links::GetVpcLinksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_api_keys::ImportApiKeysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_api_keys::ImportApiKeysError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_api_keys::ImportApiKeysError> for Error {
    fn from(err: crate::operation::import_api_keys::ImportApiKeysError) -> Self {
        match err {
            crate::operation::import_api_keys::ImportApiKeysError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::import_api_keys::ImportApiKeysError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_api_keys::ImportApiKeysError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::import_api_keys::ImportApiKeysError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::import_api_keys::ImportApiKeysError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::import_api_keys::ImportApiKeysError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::import_api_keys::ImportApiKeysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_documentation_parts::ImportDocumentationPartsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_documentation_parts::ImportDocumentationPartsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_documentation_parts::ImportDocumentationPartsError> for Error {
    fn from(err: crate::operation::import_documentation_parts::ImportDocumentationPartsError) -> Self {
        match err {
            crate::operation::import_documentation_parts::ImportDocumentationPartsError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::import_documentation_parts::ImportDocumentationPartsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_documentation_parts::ImportDocumentationPartsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::import_documentation_parts::ImportDocumentationPartsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::import_documentation_parts::ImportDocumentationPartsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::import_documentation_parts::ImportDocumentationPartsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::import_documentation_parts::ImportDocumentationPartsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_rest_api::ImportRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::import_rest_api::ImportRestApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::import_rest_api::ImportRestApiError> for Error {
    fn from(err: crate::operation::import_rest_api::ImportRestApiError) -> Self {
        match err {
            crate::operation::import_rest_api::ImportRestApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::import_rest_api::ImportRestApiError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::import_rest_api::ImportRestApiError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::import_rest_api::ImportRestApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::import_rest_api::ImportRestApiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::import_rest_api::ImportRestApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::import_rest_api::ImportRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_gateway_response::PutGatewayResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_gateway_response::PutGatewayResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_gateway_response::PutGatewayResponseError> for Error {
    fn from(err: crate::operation::put_gateway_response::PutGatewayResponseError) -> Self {
        match err {
            crate::operation::put_gateway_response::PutGatewayResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_gateway_response::PutGatewayResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_gateway_response::PutGatewayResponseError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_gateway_response::PutGatewayResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_gateway_response::PutGatewayResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::put_gateway_response::PutGatewayResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_gateway_response::PutGatewayResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_integration::PutIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_integration::PutIntegrationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_integration::PutIntegrationError> for Error {
    fn from(err: crate::operation::put_integration::PutIntegrationError) -> Self {
        match err {
            crate::operation::put_integration::PutIntegrationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_integration::PutIntegrationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_integration::PutIntegrationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_integration::PutIntegrationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_integration::PutIntegrationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_integration::PutIntegrationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_integration::PutIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_integration_response::PutIntegrationResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_integration_response::PutIntegrationResponseError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_integration_response::PutIntegrationResponseError> for Error {
    fn from(err: crate::operation::put_integration_response::PutIntegrationResponseError) -> Self {
        match err {
            crate::operation::put_integration_response::PutIntegrationResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_integration_response::PutIntegrationResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_integration_response::PutIntegrationResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::put_integration_response::PutIntegrationResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_integration_response::PutIntegrationResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::put_integration_response::PutIntegrationResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::put_integration_response::PutIntegrationResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_method::PutMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_method::PutMethodError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_method::PutMethodError> for Error {
    fn from(err: crate::operation::put_method::PutMethodError) -> Self {
        match err {
            crate::operation::put_method::PutMethodError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_method::PutMethodError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_method::PutMethodError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_method::PutMethodError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_method::PutMethodError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_method::PutMethodError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_method::PutMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_method_response::PutMethodResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_method_response::PutMethodResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_method_response::PutMethodResponseError> for Error {
    fn from(err: crate::operation::put_method_response::PutMethodResponseError) -> Self {
        match err {
            crate::operation::put_method_response::PutMethodResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_method_response::PutMethodResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_method_response::PutMethodResponseError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_method_response::PutMethodResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_method_response::PutMethodResponseError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_method_response::PutMethodResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_method_response::PutMethodResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_rest_api::PutRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_rest_api::PutRestApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_rest_api::PutRestApiError> for Error {
    fn from(err: crate::operation::put_rest_api::PutRestApiError) -> Self {
        match err {
            crate::operation::put_rest_api::PutRestApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_rest_api::PutRestApiError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_rest_api::PutRestApiError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_rest_api::PutRestApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_rest_api::PutRestApiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_rest_api::PutRestApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_rest_api::PutRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::tag_resource::TagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::tag_resource::TagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::tag_resource::TagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError> for Error {
    fn from(err: crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError) -> Self {
        match err {
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::test_invoke_authorizer::TestInvokeAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_invoke_method::TestInvokeMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::test_invoke_method::TestInvokeMethodError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::test_invoke_method::TestInvokeMethodError> for Error {
    fn from(err: crate::operation::test_invoke_method::TestInvokeMethodError) -> Self {
        match err {
            crate::operation::test_invoke_method::TestInvokeMethodError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::test_invoke_method::TestInvokeMethodError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::test_invoke_method::TestInvokeMethodError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::test_invoke_method::TestInvokeMethodError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::test_invoke_method::TestInvokeMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::untag_resource::UntagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::untag_resource::UntagResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account::UpdateAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account::UpdateAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_account::UpdateAccountError> for Error {
    fn from(err: crate::operation::update_account::UpdateAccountError) -> Self {
        match err {
            crate::operation::update_account::UpdateAccountError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_account::UpdateAccountError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_account::UpdateAccountError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_account::UpdateAccountError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_account::UpdateAccountError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_account::UpdateAccountError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_account::UpdateAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_api_key::UpdateApiKeyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_api_key::UpdateApiKeyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_api_key::UpdateApiKeyError> for Error {
    fn from(err: crate::operation::update_api_key::UpdateApiKeyError) -> Self {
        match err {
            crate::operation::update_api_key::UpdateApiKeyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_api_key::UpdateApiKeyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_authorizer::UpdateAuthorizerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_authorizer::UpdateAuthorizerError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_authorizer::UpdateAuthorizerError> for Error {
    fn from(err: crate::operation::update_authorizer::UpdateAuthorizerError) -> Self {
        match err {
            crate::operation::update_authorizer::UpdateAuthorizerError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_authorizer::UpdateAuthorizerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_authorizer::UpdateAuthorizerError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_authorizer::UpdateAuthorizerError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_authorizer::UpdateAuthorizerError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_authorizer::UpdateAuthorizerError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_authorizer::UpdateAuthorizerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_base_path_mapping::UpdateBasePathMappingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_base_path_mapping::UpdateBasePathMappingError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_base_path_mapping::UpdateBasePathMappingError> for Error {
    fn from(err: crate::operation::update_base_path_mapping::UpdateBasePathMappingError) -> Self {
        match err {
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_base_path_mapping::UpdateBasePathMappingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_client_certificate::UpdateClientCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_client_certificate::UpdateClientCertificateError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_client_certificate::UpdateClientCertificateError> for Error {
    fn from(err: crate::operation::update_client_certificate::UpdateClientCertificateError) -> Self {
        match err {
            crate::operation::update_client_certificate::UpdateClientCertificateError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_client_certificate::UpdateClientCertificateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_client_certificate::UpdateClientCertificateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_client_certificate::UpdateClientCertificateError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_client_certificate::UpdateClientCertificateError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_client_certificate::UpdateClientCertificateError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_client_certificate::UpdateClientCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_deployment::UpdateDeploymentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_deployment::UpdateDeploymentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_deployment::UpdateDeploymentError> for Error {
    fn from(err: crate::operation::update_deployment::UpdateDeploymentError) -> Self {
        match err {
            crate::operation::update_deployment::UpdateDeploymentError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_deployment::UpdateDeploymentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_deployment::UpdateDeploymentError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_deployment::UpdateDeploymentError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_deployment::UpdateDeploymentError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_deployment::UpdateDeploymentError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_deployment::UpdateDeploymentError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_deployment::UpdateDeploymentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_documentation_part::UpdateDocumentationPartError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_documentation_part::UpdateDocumentationPartError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_documentation_part::UpdateDocumentationPartError> for Error {
    fn from(err: crate::operation::update_documentation_part::UpdateDocumentationPartError) -> Self {
        match err {
            crate::operation::update_documentation_part::UpdateDocumentationPartError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_documentation_part::UpdateDocumentationPartError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_documentation_part::UpdateDocumentationPartError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_documentation_part::UpdateDocumentationPartError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_documentation_part::UpdateDocumentationPartError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_documentation_part::UpdateDocumentationPartError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_documentation_part::UpdateDocumentationPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_documentation_version::UpdateDocumentationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_documentation_version::UpdateDocumentationVersionError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_documentation_version::UpdateDocumentationVersionError> for Error {
    fn from(err: crate::operation::update_documentation_version::UpdateDocumentationVersionError) -> Self {
        match err {
            crate::operation::update_documentation_version::UpdateDocumentationVersionError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_documentation_version::UpdateDocumentationVersionError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_documentation_version::UpdateDocumentationVersionError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_documentation_version::UpdateDocumentationVersionError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_documentation_version::UpdateDocumentationVersionError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_documentation_version::UpdateDocumentationVersionError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_documentation_version::UpdateDocumentationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain_name::UpdateDomainNameError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_domain_name::UpdateDomainNameError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_domain_name::UpdateDomainNameError> for Error {
    fn from(err: crate::operation::update_domain_name::UpdateDomainNameError) -> Self {
        match err {
            crate::operation::update_domain_name::UpdateDomainNameError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_domain_name::UpdateDomainNameError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_gateway_response::UpdateGatewayResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_gateway_response::UpdateGatewayResponseError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_gateway_response::UpdateGatewayResponseError> for Error {
    fn from(err: crate::operation::update_gateway_response::UpdateGatewayResponseError) -> Self {
        match err {
            crate::operation::update_gateway_response::UpdateGatewayResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_gateway_response::UpdateGatewayResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_gateway_response::UpdateGatewayResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_gateway_response::UpdateGatewayResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_gateway_response::UpdateGatewayResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_gateway_response::UpdateGatewayResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_gateway_response::UpdateGatewayResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_integration::UpdateIntegrationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_integration::UpdateIntegrationError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_integration::UpdateIntegrationError> for Error {
    fn from(err: crate::operation::update_integration::UpdateIntegrationError) -> Self {
        match err {
            crate::operation::update_integration::UpdateIntegrationError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_integration::UpdateIntegrationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_integration::UpdateIntegrationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_integration::UpdateIntegrationError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_integration::UpdateIntegrationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_integration::UpdateIntegrationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_integration::UpdateIntegrationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_integration_response::UpdateIntegrationResponseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_integration_response::UpdateIntegrationResponseError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_integration_response::UpdateIntegrationResponseError> for Error {
    fn from(err: crate::operation::update_integration_response::UpdateIntegrationResponseError) -> Self {
        match err {
            crate::operation::update_integration_response::UpdateIntegrationResponseError::BadRequestException(inner) => {
                Error::BadRequestException(inner)
            }
            crate::operation::update_integration_response::UpdateIntegrationResponseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::update_integration_response::UpdateIntegrationResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_integration_response::UpdateIntegrationResponseError::NotFoundException(inner) => {
                Error::NotFoundException(inner)
            }
            crate::operation::update_integration_response::UpdateIntegrationResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_integration_response::UpdateIntegrationResponseError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_integration_response::UpdateIntegrationResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_method::UpdateMethodError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_method::UpdateMethodError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_method::UpdateMethodError> for Error {
    fn from(err: crate::operation::update_method::UpdateMethodError) -> Self {
        match err {
            crate::operation::update_method::UpdateMethodError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_method::UpdateMethodError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_method::UpdateMethodError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_method::UpdateMethodError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_method::UpdateMethodError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_method::UpdateMethodError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_method_response::UpdateMethodResponseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_method_response::UpdateMethodResponseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_method_response::UpdateMethodResponseError> for Error {
    fn from(err: crate::operation::update_method_response::UpdateMethodResponseError) -> Self {
        match err {
            crate::operation::update_method_response::UpdateMethodResponseError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_method_response::UpdateMethodResponseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_method_response::UpdateMethodResponseError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_method_response::UpdateMethodResponseError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_method_response::UpdateMethodResponseError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_method_response::UpdateMethodResponseError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_method_response::UpdateMethodResponseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_model::UpdateModelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_model::UpdateModelError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_model::UpdateModelError> for Error {
    fn from(err: crate::operation::update_model::UpdateModelError) -> Self {
        match err {
            crate::operation::update_model::UpdateModelError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_model::UpdateModelError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_model::UpdateModelError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_model::UpdateModelError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_model::UpdateModelError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_model::UpdateModelError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_model::UpdateModelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_request_validator::UpdateRequestValidatorError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_request_validator::UpdateRequestValidatorError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_request_validator::UpdateRequestValidatorError> for Error {
    fn from(err: crate::operation::update_request_validator::UpdateRequestValidatorError) -> Self {
        match err {
            crate::operation::update_request_validator::UpdateRequestValidatorError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_request_validator::UpdateRequestValidatorError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_request_validator::UpdateRequestValidatorError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::update_request_validator::UpdateRequestValidatorError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_request_validator::UpdateRequestValidatorError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::update_request_validator::UpdateRequestValidatorError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::operation::update_request_validator::UpdateRequestValidatorError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resource::UpdateResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_resource::UpdateResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_resource::UpdateResourceError> for Error {
    fn from(err: crate::operation::update_resource::UpdateResourceError) -> Self {
        match err {
            crate::operation::update_resource::UpdateResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_resource::UpdateResourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_resource::UpdateResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_resource::UpdateResourceError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_resource::UpdateResourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_resource::UpdateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rest_api::UpdateRestApiError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_rest_api::UpdateRestApiError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_rest_api::UpdateRestApiError> for Error {
    fn from(err: crate::operation::update_rest_api::UpdateRestApiError) -> Self {
        match err {
            crate::operation::update_rest_api::UpdateRestApiError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_rest_api::UpdateRestApiError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_rest_api::UpdateRestApiError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_rest_api::UpdateRestApiError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_rest_api::UpdateRestApiError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_rest_api::UpdateRestApiError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_rest_api::UpdateRestApiError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_stage::UpdateStageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_stage::UpdateStageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_stage::UpdateStageError> for Error {
    fn from(err: crate::operation::update_stage::UpdateStageError) -> Self {
        match err {
            crate::operation::update_stage::UpdateStageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_stage::UpdateStageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_stage::UpdateStageError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_stage::UpdateStageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_stage::UpdateStageError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_stage::UpdateStageError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_stage::UpdateStageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_usage::UpdateUsageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_usage::UpdateUsageError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_usage::UpdateUsageError> for Error {
    fn from(err: crate::operation::update_usage::UpdateUsageError) -> Self {
        match err {
            crate::operation::update_usage::UpdateUsageError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_usage::UpdateUsageError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_usage::UpdateUsageError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_usage::UpdateUsageError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_usage::UpdateUsageError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_usage::UpdateUsageError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_usage::UpdateUsageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_usage_plan::UpdateUsagePlanError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_usage_plan::UpdateUsagePlanError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_usage_plan::UpdateUsagePlanError> for Error {
    fn from(err: crate::operation::update_usage_plan::UpdateUsagePlanError) -> Self {
        match err {
            crate::operation::update_usage_plan::UpdateUsagePlanError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_usage_plan::UpdateUsagePlanError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_usage_plan::UpdateUsagePlanError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_usage_plan::UpdateUsagePlanError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_usage_plan::UpdateUsagePlanError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_usage_plan::UpdateUsagePlanError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_usage_plan::UpdateUsagePlanError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_vpc_link::UpdateVpcLinkError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_vpc_link::UpdateVpcLinkError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_vpc_link::UpdateVpcLinkError> for Error {
    fn from(err: crate::operation::update_vpc_link::UpdateVpcLinkError) -> Self {
        match err {
            crate::operation::update_vpc_link::UpdateVpcLinkError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_vpc_link::UpdateVpcLinkError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_vpc_link::UpdateVpcLinkError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::update_vpc_link::UpdateVpcLinkError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_vpc_link::UpdateVpcLinkError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::update_vpc_link::UpdateVpcLinkError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_vpc_link::UpdateVpcLinkError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::BadRequestException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::TooManyRequestsException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
