// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetExport`](crate::operation::get_export::builders::GetExportFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rest_api_id(impl Into<String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::rest_api_id) / [`set_rest_api_id(Option<String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::set_rest_api_id): <p>The string identifier of the associated RestApi.</p>
    ///   - [`stage_name(impl Into<String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::stage_name) / [`set_stage_name(Option<String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::set_stage_name): <p>The name of the Stage that will be exported.</p>
    ///   - [`export_type(impl Into<String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::export_type) / [`set_export_type(Option<String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::set_export_type): <p>The type of export. Acceptable values are 'oas30' for OpenAPI 3.0.x and 'swagger' for Swagger/OpenAPI 2.0.</p>
    ///   - [`parameters(HashMap<String, String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::parameters) / [`set_parameters(Option<HashMap<String, String>>)`](crate::operation::get_export::builders::GetExportFluentBuilder::set_parameters): <p>A key-value map of query string parameters that specify properties of the export, depending on the requested <code>exportType</code>. For <code>exportType</code> <code>oas30</code> and <code>swagger</code>, any combination of the following parameters are supported: <code>extensions='integrations'</code> or <code>extensions='apigateway'</code> will export the API with x-amazon-apigateway-integration extensions. <code>extensions='authorizers'</code> will export the API with x-amazon-apigateway-authorizer extensions. <code>postman</code> will export the API with Postman extensions, allowing for import to the Postman tool</p>
    ///   - [`accepts(impl Into<String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::accepts) / [`set_accepts(Option<String>)`](crate::operation::get_export::builders::GetExportFluentBuilder::set_accepts): <p>The content-type of the export, for example <code>application/json</code>. Currently <code>application/json</code> and <code>application/yaml</code> are supported for <code>exportType</code> of<code>oas30</code> and <code>swagger</code>. This should be specified in the <code>Accept</code> header for direct API requests.</p>
    /// - On success, responds with [`GetExportOutput`](crate::operation::get_export::GetExportOutput) with field(s):
    ///   - [`content_type(Option<String>)`](crate::operation::get_export::GetExportOutput::content_type): <p>The content-type header value in the HTTP response. This will correspond to a valid 'accept' type in the request.</p>
    ///   - [`content_disposition(Option<String>)`](crate::operation::get_export::GetExportOutput::content_disposition): <p>The content-disposition header value in the HTTP response.</p>
    ///   - [`body(Option<Blob>)`](crate::operation::get_export::GetExportOutput::body): <p>The binary blob response to GetExport, which contains the export.</p>
    /// - On failure, responds with [`SdkError<GetExportError>`](crate::operation::get_export::GetExportError)
    pub fn get_export(&self) -> crate::operation::get_export::builders::GetExportFluentBuilder {
        crate::operation::get_export::builders::GetExportFluentBuilder::new(self.handle.clone())
    }
}
