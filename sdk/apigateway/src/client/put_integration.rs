// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutIntegration`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`rest_api_id(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::rest_api_id) / [`set_rest_api_id(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_rest_api_id): <p>The string identifier of the associated RestApi.</p>
    ///   - [`resource_id(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::resource_id) / [`set_resource_id(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_resource_id): <p>Specifies a put integration request's resource ID.</p>
    ///   - [`http_method(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::http_method) / [`set_http_method(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_http_method): <p>Specifies the HTTP method for the integration.</p>
    ///   - [`r#type(IntegrationType)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::type) / [`set_type(Option<IntegrationType>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_type): <p>Specifies a put integration input's type.</p>
    ///   - [`integration_http_method(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::integration_http_method) / [`set_integration_http_method(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_integration_http_method): <p>The HTTP method for the integration.</p>
    ///   - [`uri(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::uri) / [`set_uri(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_uri): <p>Specifies Uniform Resource Identifier (URI) of the integration endpoint. For HTTP or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api</code>}. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an Amazon Web Services service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of <code>GetObject</code>, the <code>uri</code> can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code>.</p>
    ///   - [`connection_type(ConnectionType)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::connection_type) / [`set_connection_type(Option<ConnectionType>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_connection_type): <p>The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.</p>
    ///   - [`connection_id(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::connection_id) / [`set_connection_id(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_connection_id): <p>The ID of the VpcLink used for the integration. Specify this value only if you specify <code>VPC_LINK</code> as the connection type.</p>
    ///   - [`credentials(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::credentials) / [`set_credentials(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_credentials): <p>Specifies whether credentials are required for a put integration.</p>
    ///   - [`request_parameters(HashMap<String, String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::request_parameters) / [`set_request_parameters(Option<HashMap<String, String>>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_request_parameters): <p>A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.</p>
    ///   - [`request_templates(HashMap<String, String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::request_templates) / [`set_request_templates(Option<HashMap<String, String>>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_request_templates): <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.</p>
    ///   - [`passthrough_behavior(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::passthrough_behavior) / [`set_passthrough_behavior(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_passthrough_behavior): <p>Specifies the pass-through behavior for incoming requests based on the Content-Type header in the request, and the available mapping templates specified as the <code>requestTemplates</code> property on the Integration resource. There are three valid values: <code>WHEN_NO_MATCH</code>, <code>WHEN_NO_TEMPLATES</code>, and <code>NEVER</code>. </p>
    ///   - [`cache_namespace(impl Into<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::cache_namespace) / [`set_cache_namespace(Option<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_cache_namespace): <p>Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.</p>
    ///   - [`cache_key_parameters(Vec<String>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::cache_key_parameters) / [`set_cache_key_parameters(Option<Vec<String>>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_cache_key_parameters): <p>A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.</p>
    ///   - [`content_handling(ContentHandlingStrategy)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::content_handling) / [`set_content_handling(Option<ContentHandlingStrategy>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_content_handling): <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>  <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>
    ///   - [`timeout_in_millis(i32)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::timeout_in_millis) / [`set_timeout_in_millis(Option<i32>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_timeout_in_millis): <p>Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.</p>
    ///   - [`tls_config(TlsConfig)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::tls_config) / [`set_tls_config(Option<TlsConfig>)`](crate::operation::put_integration::builders::PutIntegrationFluentBuilder::set_tls_config): <p>Specifies the TLS configuration for an integration.</p>
    /// - On success, responds with [`PutIntegrationOutput`](crate::operation::put_integration::PutIntegrationOutput) with field(s):
    ///   - [`r#type(Option<IntegrationType>)`](crate::operation::put_integration::PutIntegrationOutput::type): <p>Specifies an API method integration type. The valid value is one of the following:</p>  <p>For the HTTP and HTTP proxy integrations, each integration can specify a protocol (<code>http/https</code>), port and path. Standard 80 and 443 ports are supported as well as custom ports above 1024. An HTTP or HTTP proxy integration with a <code>connectionType</code> of <code>VPC_LINK</code> is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.</p>
    ///   - [`http_method(Option<String>)`](crate::operation::put_integration::PutIntegrationOutput::http_method): <p>Specifies the integration's HTTP method type.</p>
    ///   - [`uri(Option<String>)`](crate::operation::put_integration::PutIntegrationOutput::uri): <p>Specifies Uniform Resource Identifier (URI) of the integration endpoint.</p>  <p>For <code>HTTP</code> or <code>HTTP_PROXY</code> integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification, for either standard integration, where <code>connectionType</code> is not <code>VPC_LINK</code>, or private integration, where <code>connectionType</code> is <code>VPC_LINK</code>. For a private HTTP integration, the URI is not used for routing. For <code>AWS</code> or <code>AWS_PROXY</code> integrations, the URI is of the form <code>arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}</code>. Here, {Region} is the API Gateway region (e.g., us-east-1); {service} is the name of the integrated Amazon Web Services service (e.g., s3); and {subdomain} is a designated subdomain supported by certain Amazon Web Services service for fast host-name lookup. action can be used for an Amazon Web Services service action-based API, using an Action={name}&amp;{p1}={v1}&amp;p2={v2}... query string. The ensuing {service_api} refers to a supported action {name} plus any required input parameters. Alternatively, path can be used for an AWS service path-based API. The ensuing service_api refers to the path to an Amazon Web Services service resource, including the region of the integrated Amazon Web Services service, if applicable. For example, for integration with the S3 API of GetObject, the uri can be either <code>arn:aws:apigateway:us-west-2:s3:action/GetObject&amp;Bucket={bucket}&amp;Key={key}</code> or <code>arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}</code> </p>
    ///   - [`connection_type(Option<ConnectionType>)`](crate::operation::put_integration::PutIntegrationOutput::connection_type): <p>The type of the network connection to the integration endpoint. The valid value is <code>INTERNET</code> for connections through the public routable internet or <code>VPC_LINK</code> for private connections between API Gateway and a network load balancer in a VPC. The default value is <code>INTERNET</code>.</p>
    ///   - [`connection_id(Option<String>)`](crate::operation::put_integration::PutIntegrationOutput::connection_id): <p>The ID of the VpcLink used for the integration when <code>connectionType=VPC_LINK</code> and undefined, otherwise.</p>
    ///   - [`credentials(Option<String>)`](crate::operation::put_integration::PutIntegrationOutput::credentials): <p>Specifies the credentials required for the integration, if any. For AWS integrations, three options are available. To specify an IAM Role for API Gateway to assume, use the role's Amazon Resource Name (ARN). To require that the caller's identity be passed through from the request, specify the string <code>arn:aws:iam::\*:user/\*</code>. To use resource-based permissions on supported AWS services, specify null.</p>
    ///   - [`request_parameters(Option<HashMap<String, String>>)`](crate::operation::put_integration::PutIntegrationOutput::request_parameters): <p>A key-value map specifying request parameters that are passed from the method request to the back end. The key is an integration request parameter name and the associated value is a method request parameter value or static value that must be enclosed within single quotes and pre-encoded as required by the back end. The method request parameter value must match the pattern of <code>method.request.{location}.{name}</code>, where <code>location</code> is <code>querystring</code>, <code>path</code>, or <code>header</code> and <code>name</code> must be a valid and unique method request parameter name.</p>
    ///   - [`request_templates(Option<HashMap<String, String>>)`](crate::operation::put_integration::PutIntegrationOutput::request_templates): <p>Represents a map of Velocity templates that are applied on the request payload based on the value of the Content-Type header sent by the client. The content type value is the key in this map, and the template (as a String) is the value.</p>
    ///   - [`passthrough_behavior(Option<String>)`](crate::operation::put_integration::PutIntegrationOutput::passthrough_behavior): <p>Specifies how the method request body of an unmapped content type will be passed through the integration request to the back end without transformation. A content type is unmapped if no mapping template is defined in the integration or the content type does not match any of the mapped content types, as specified in <code>requestTemplates</code>. The valid value is one of the following: <code>WHEN_NO_MATCH</code>: passes the method request body through the integration request to the back end without transformation when the method request content type does not match any content type associated with the mapping templates defined in the integration request. <code>WHEN_NO_TEMPLATES</code>: passes the method request body through the integration request to the back end without transformation when no mapping template is defined in the integration request. If a template is defined when this option is selected, the method request of an unmapped content-type will be rejected with an HTTP 415 Unsupported Media Type response. <code>NEVER</code>: rejects the method request with an HTTP 415 Unsupported Media Type response when either the method request content type does not match any content type associated with the mapping templates defined in the integration request or no mapping template is defined in the integration request.</p>
    ///   - [`content_handling(Option<ContentHandlingStrategy>)`](crate::operation::put_integration::PutIntegrationOutput::content_handling): <p>Specifies how to handle request payload content type conversions. Supported values are <code>CONVERT_TO_BINARY</code> and <code>CONVERT_TO_TEXT</code>, with the following behaviors:</p>  <p>If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the <code>passthroughBehavior</code> is configured to support payload pass-through.</p>
    ///   - [`timeout_in_millis(i32)`](crate::operation::put_integration::PutIntegrationOutput::timeout_in_millis): <p>Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds or 29 seconds.</p>
    ///   - [`cache_namespace(Option<String>)`](crate::operation::put_integration::PutIntegrationOutput::cache_namespace): <p>Specifies a group of related cached parameters. By default, API Gateway uses the resource ID as the <code>cacheNamespace</code>. You can specify the same <code>cacheNamespace</code> across resources to return the same cached data for requests to different resources.</p>
    ///   - [`cache_key_parameters(Option<Vec<String>>)`](crate::operation::put_integration::PutIntegrationOutput::cache_key_parameters): <p>A list of request parameters whose values API Gateway caches. To be valid values for <code>cacheKeyParameters</code>, these parameters must also be specified for Method <code>requestParameters</code>.</p>
    ///   - [`integration_responses(Option<HashMap<String, IntegrationResponse>>)`](crate::operation::put_integration::PutIntegrationOutput::integration_responses): <p>Specifies the integration's responses.</p>
    ///   - [`tls_config(Option<TlsConfig>)`](crate::operation::put_integration::PutIntegrationOutput::tls_config): <p>Specifies the TLS configuration for an integration.</p>
    /// - On failure, responds with [`SdkError<PutIntegrationError>`](crate::operation::put_integration::PutIntegrationError)
    pub fn put_integration(
        &self,
    ) -> crate::operation::put_integration::builders::PutIntegrationFluentBuilder {
        crate::operation::put_integration::builders::PutIntegrationFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
