// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_create_api_key_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_1: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_1.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_1 = var_1;
        Ok(var_1.pop())
    }
}

pub fn deser_header_create_authorizer_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_2: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_2.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_2 = var_2;
        Ok(var_2.pop())
    }
}

pub fn deser_header_create_base_path_mapping_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_3: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_3.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_3 = var_3;
        Ok(var_3.pop())
    }
}

pub fn deser_header_create_deployment_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_4: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_4.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_4 = var_4;
        Ok(var_4.pop())
    }
}

pub fn deser_header_create_documentation_part_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_5: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_5.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_5 = var_5;
        Ok(var_5.pop())
    }
}

pub fn deser_header_create_documentation_version_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_6: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_6.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_6 = var_6;
        Ok(var_6.pop())
    }
}

pub fn deser_header_create_domain_name_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_7: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_7.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_7 = var_7;
        Ok(var_7.pop())
    }
}

pub fn deser_header_create_model_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_8: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_8.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_8 = var_8;
        Ok(var_8.pop())
    }
}

pub fn deser_header_create_request_validator_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_9: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_9.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_9 = var_9;
        Ok(var_9.pop())
    }
}

pub fn deser_header_create_resource_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_10: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_10.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_10 = var_10;
        Ok(var_10.pop())
    }
}

pub fn deser_header_create_rest_api_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_11: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_11.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_11 = var_11;
        Ok(var_11.pop())
    }
}

pub fn deser_header_create_stage_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_12: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_12.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_12 = var_12;
        Ok(var_12.pop())
    }
}

pub fn deser_header_create_usage_plan_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_13: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_13.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_13 = var_13;
        Ok(var_13.pop())
    }
}

pub fn deser_header_create_usage_plan_key_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_14: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_14.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_14 = var_14;
        Ok(var_14.pop())
    }
}

pub fn deser_header_create_vpc_link_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_15: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_15.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_15 = var_15;
        Ok(var_15.pop())
    }
}

pub fn deser_header_delete_api_key_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_16: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_16.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_16 = var_16;
        Ok(var_16.pop())
    }
}

pub fn deser_header_delete_authorizer_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_17: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_17.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_17 = var_17;
        Ok(var_17.pop())
    }
}

pub fn deser_header_delete_base_path_mapping_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_18: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_18.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_18 = var_18;
        Ok(var_18.pop())
    }
}

pub fn deser_header_delete_client_certificate_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_19: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_19.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_19 = var_19;
        Ok(var_19.pop())
    }
}

pub fn deser_header_delete_deployment_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_20: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_20.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_20 = var_20;
        Ok(var_20.pop())
    }
}

pub fn deser_header_delete_documentation_part_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_21: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_21.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_21 = var_21;
        Ok(var_21.pop())
    }
}

pub fn deser_header_delete_documentation_version_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_22: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_22.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_22 = var_22;
        Ok(var_22.pop())
    }
}

pub fn deser_header_delete_domain_name_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_23: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_23.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_23 = var_23;
        Ok(var_23.pop())
    }
}

pub fn deser_header_delete_gateway_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_24: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_24.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_24 = var_24;
        Ok(var_24.pop())
    }
}

pub fn deser_header_delete_integration_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_25: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_25.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_25 = var_25;
        Ok(var_25.pop())
    }
}

pub fn deser_header_delete_integration_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_26: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_26.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_26 = var_26;
        Ok(var_26.pop())
    }
}

pub fn deser_header_delete_method_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_27: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_27.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_27 = var_27;
        Ok(var_27.pop())
    }
}

pub fn deser_header_delete_method_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_28: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_28.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_28 = var_28;
        Ok(var_28.pop())
    }
}

pub fn deser_header_delete_model_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_29: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_29.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_29 = var_29;
        Ok(var_29.pop())
    }
}

pub fn deser_header_delete_request_validator_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_30: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_30.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_30 = var_30;
        Ok(var_30.pop())
    }
}

pub fn deser_header_delete_resource_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_31: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_31.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_31 = var_31;
        Ok(var_31.pop())
    }
}

pub fn deser_header_delete_rest_api_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_32: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_32.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_32 = var_32;
        Ok(var_32.pop())
    }
}

pub fn deser_header_delete_stage_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_33: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_33.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_33 = var_33;
        Ok(var_33.pop())
    }
}

pub fn deser_header_delete_usage_plan_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_34: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_34.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_34 = var_34;
        Ok(var_34.pop())
    }
}

pub fn deser_header_delete_usage_plan_key_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_35: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_35.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_35 = var_35;
        Ok(var_35.pop())
    }
}

pub fn deser_header_delete_vpc_link_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_36: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_36.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_36 = var_36;
        Ok(var_36.pop())
    }
}

pub fn deser_header_flush_stage_authorizers_cache_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_37: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_37.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_37 = var_37;
        Ok(var_37.pop())
    }
}

pub fn deser_header_flush_stage_cache_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_38: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_38.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_38 = var_38;
        Ok(var_38.pop())
    }
}

pub fn deser_header_generate_client_certificate_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_39: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_39.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_39 = var_39;
        Ok(var_39.pop())
    }
}

pub fn deser_header_get_account_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_40: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_40.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_40 = var_40;
        Ok(var_40.pop())
    }
}

pub fn deser_header_get_api_key_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_41: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_41.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_41 = var_41;
        Ok(var_41.pop())
    }
}

pub fn deser_header_get_api_keys_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_42: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_42.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_42 = var_42;
        Ok(var_42.pop())
    }
}

pub fn deser_header_get_authorizer_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_43: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_43.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_43 = var_43;
        Ok(var_43.pop())
    }
}

pub fn deser_header_get_authorizers_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_44: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_44.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_44 = var_44;
        Ok(var_44.pop())
    }
}

pub fn deser_header_get_base_path_mapping_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_45: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_45.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_45 = var_45;
        Ok(var_45.pop())
    }
}

pub fn deser_header_get_base_path_mappings_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_46: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_46.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_46 = var_46;
        Ok(var_46.pop())
    }
}

pub fn deser_header_get_client_certificate_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_47: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_47.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_47 = var_47;
        Ok(var_47.pop())
    }
}

pub fn deser_header_get_client_certificates_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_48: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_48.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_48 = var_48;
        Ok(var_48.pop())
    }
}

pub fn deser_header_get_deployment_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_49: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_49.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_49 = var_49;
        Ok(var_49.pop())
    }
}

pub fn deser_header_get_deployments_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_50: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_50.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_50 = var_50;
        Ok(var_50.pop())
    }
}

pub fn deser_header_get_documentation_part_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_51: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_51.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_51 = var_51;
        Ok(var_51.pop())
    }
}

pub fn deser_header_get_documentation_parts_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_52: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_52.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_52 = var_52;
        Ok(var_52.pop())
    }
}

pub fn deser_header_get_documentation_version_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_53: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_53.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_53 = var_53;
        Ok(var_53.pop())
    }
}

pub fn deser_header_get_documentation_versions_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_54: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_54.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_54 = var_54;
        Ok(var_54.pop())
    }
}

pub fn deser_header_get_domain_name_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_55: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_55.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_55 = var_55;
        Ok(var_55.pop())
    }
}

pub fn deser_header_get_domain_names_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_56: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_56.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_56 = var_56;
        Ok(var_56.pop())
    }
}

pub fn deser_header_get_export_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_57: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_57.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_57 = var_57;
        Ok(var_57.pop())
    }
}

pub fn deser_header_get_export_content_type(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Type").iter();
    let var_58: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_58.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_58 = var_58;
        Ok(var_58.pop())
    }
}

pub fn deser_header_get_export_content_disposition(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Disposition").iter();
    let var_59: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_59.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_59 = var_59;
        Ok(var_59.pop())
    }
}

pub fn deser_payload_get_export_body(
    body: &[u8],
) -> Result<std::option::Option<smithy_types::Blob>, crate::error::GetExportError> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_get_gateway_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_60: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_60.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_60 = var_60;
        Ok(var_60.pop())
    }
}

pub fn deser_header_get_gateway_responses_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_61: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_61.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_61 = var_61;
        Ok(var_61.pop())
    }
}

pub fn deser_header_get_integration_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_62: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_62.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_62 = var_62;
        Ok(var_62.pop())
    }
}

pub fn deser_header_get_integration_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_63: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_63.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_63 = var_63;
        Ok(var_63.pop())
    }
}

pub fn deser_header_get_method_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_64: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_64.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_64 = var_64;
        Ok(var_64.pop())
    }
}

pub fn deser_header_get_method_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_65: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_65.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_65 = var_65;
        Ok(var_65.pop())
    }
}

pub fn deser_header_get_model_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_66: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_66.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_66 = var_66;
        Ok(var_66.pop())
    }
}

pub fn deser_header_get_models_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_67: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_67.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_67 = var_67;
        Ok(var_67.pop())
    }
}

pub fn deser_header_get_model_template_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_68: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_68.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_68 = var_68;
        Ok(var_68.pop())
    }
}

pub fn deser_header_get_request_validator_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_69: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_69.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_69 = var_69;
        Ok(var_69.pop())
    }
}

pub fn deser_header_get_request_validators_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_70: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_70.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_70 = var_70;
        Ok(var_70.pop())
    }
}

pub fn deser_header_get_resource_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_71: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_71.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_71 = var_71;
        Ok(var_71.pop())
    }
}

pub fn deser_header_get_resources_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_72: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_72.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_72 = var_72;
        Ok(var_72.pop())
    }
}

pub fn deser_header_get_rest_api_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_73: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_73.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_73 = var_73;
        Ok(var_73.pop())
    }
}

pub fn deser_header_get_rest_apis_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_74: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_74.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_74 = var_74;
        Ok(var_74.pop())
    }
}

pub fn deser_header_get_sdk_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_75: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_75.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_75 = var_75;
        Ok(var_75.pop())
    }
}

pub fn deser_header_get_sdk_content_type(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Type").iter();
    let var_76: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_76.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_76 = var_76;
        Ok(var_76.pop())
    }
}

pub fn deser_header_get_sdk_content_disposition(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Content-Disposition").iter();
    let var_77: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_77.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_77 = var_77;
        Ok(var_77.pop())
    }
}

pub fn deser_payload_get_sdk_body(
    body: &[u8],
) -> Result<std::option::Option<smithy_types::Blob>, crate::error::GetSdkError> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_get_sdk_type_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_78: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_78.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_78 = var_78;
        Ok(var_78.pop())
    }
}

pub fn deser_header_get_sdk_types_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_79: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_79.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_79 = var_79;
        Ok(var_79.pop())
    }
}

pub fn deser_header_get_stage_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_80: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_80.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_80 = var_80;
        Ok(var_80.pop())
    }
}

pub fn deser_header_get_stages_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_81: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_81.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_81 = var_81;
        Ok(var_81.pop())
    }
}

pub fn deser_header_get_tags_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_82: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_82.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_82 = var_82;
        Ok(var_82.pop())
    }
}

pub fn deser_header_get_usage_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_83: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_83.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_83 = var_83;
        Ok(var_83.pop())
    }
}

pub fn deser_header_get_usage_plan_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_84: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_84.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_84 = var_84;
        Ok(var_84.pop())
    }
}

pub fn deser_header_get_usage_plan_key_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_85: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_85.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_85 = var_85;
        Ok(var_85.pop())
    }
}

pub fn deser_header_get_usage_plan_keys_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_86: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_86.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_86 = var_86;
        Ok(var_86.pop())
    }
}

pub fn deser_header_get_usage_plans_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_87: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_87.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_87 = var_87;
        Ok(var_87.pop())
    }
}

pub fn deser_header_get_vpc_link_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_88: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_88.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_88 = var_88;
        Ok(var_88.pop())
    }
}

pub fn deser_header_get_vpc_links_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_89: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_89.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_89 = var_89;
        Ok(var_89.pop())
    }
}

pub fn deser_header_import_api_keys_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_90: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_90.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_90 = var_90;
        Ok(var_90.pop())
    }
}

pub fn deser_header_import_documentation_parts_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_91: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_91.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_91 = var_91;
        Ok(var_91.pop())
    }
}

pub fn deser_header_import_rest_api_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_92: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_92.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_92 = var_92;
        Ok(var_92.pop())
    }
}

pub fn deser_header_put_gateway_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_93: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_93.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_93 = var_93;
        Ok(var_93.pop())
    }
}

pub fn deser_header_put_integration_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_94: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_94.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_94 = var_94;
        Ok(var_94.pop())
    }
}

pub fn deser_header_put_integration_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_95: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_95.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_95 = var_95;
        Ok(var_95.pop())
    }
}

pub fn deser_header_put_method_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_96: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_96.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_96 = var_96;
        Ok(var_96.pop())
    }
}

pub fn deser_header_put_method_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_97: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_97.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_97 = var_97;
        Ok(var_97.pop())
    }
}

pub fn deser_header_put_rest_api_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_98: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_98.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_98 = var_98;
        Ok(var_98.pop())
    }
}

pub fn deser_header_tag_resource_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_99: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_99.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_99 = var_99;
        Ok(var_99.pop())
    }
}

pub fn deser_header_test_invoke_authorizer_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_100: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_100.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_100 = var_100;
        Ok(var_100.pop())
    }
}

pub fn deser_header_test_invoke_method_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_101: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_101.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_101 = var_101;
        Ok(var_101.pop())
    }
}

pub fn deser_header_untag_resource_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_102: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_102.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_102 = var_102;
        Ok(var_102.pop())
    }
}

pub fn deser_header_update_account_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_103: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_103.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_103 = var_103;
        Ok(var_103.pop())
    }
}

pub fn deser_header_update_api_key_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_104: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_104.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_104 = var_104;
        Ok(var_104.pop())
    }
}

pub fn deser_header_update_authorizer_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_105: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_105.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_105 = var_105;
        Ok(var_105.pop())
    }
}

pub fn deser_header_update_base_path_mapping_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_106: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_106.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_106 = var_106;
        Ok(var_106.pop())
    }
}

pub fn deser_header_update_client_certificate_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_107: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_107.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_107 = var_107;
        Ok(var_107.pop())
    }
}

pub fn deser_header_update_deployment_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_108: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_108.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_108 = var_108;
        Ok(var_108.pop())
    }
}

pub fn deser_header_update_documentation_part_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_109: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_109.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_109 = var_109;
        Ok(var_109.pop())
    }
}

pub fn deser_header_update_documentation_version_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_110: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_110.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_110 = var_110;
        Ok(var_110.pop())
    }
}

pub fn deser_header_update_domain_name_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_111: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_111.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_111 = var_111;
        Ok(var_111.pop())
    }
}

pub fn deser_header_update_gateway_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_112: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_112.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_112 = var_112;
        Ok(var_112.pop())
    }
}

pub fn deser_header_update_integration_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_113: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_113.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_113 = var_113;
        Ok(var_113.pop())
    }
}

pub fn deser_header_update_integration_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_114: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_114.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_114 = var_114;
        Ok(var_114.pop())
    }
}

pub fn deser_header_update_method_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_115: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_115.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_115 = var_115;
        Ok(var_115.pop())
    }
}

pub fn deser_header_update_method_response_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_116: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_116.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_116 = var_116;
        Ok(var_116.pop())
    }
}

pub fn deser_header_update_model_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_117: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_117.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_117 = var_117;
        Ok(var_117.pop())
    }
}

pub fn deser_header_update_request_validator_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_118: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_118.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_118 = var_118;
        Ok(var_118.pop())
    }
}

pub fn deser_header_update_resource_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_119: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_119.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_119 = var_119;
        Ok(var_119.pop())
    }
}

pub fn deser_header_update_rest_api_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_120: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_120.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_120 = var_120;
        Ok(var_120.pop())
    }
}

pub fn deser_header_update_stage_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_121: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_121.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_121 = var_121;
        Ok(var_121.pop())
    }
}

pub fn deser_header_update_usage_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_122: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_122.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_122 = var_122;
        Ok(var_122.pop())
    }
}

pub fn deser_header_update_usage_plan_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_123: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_123.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_123 = var_123;
        Ok(var_123.pop())
    }
}

pub fn deser_header_update_vpc_link_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> Result<std::option::Option<std::string::String>, smithy_http::header::ParseError> {
    let headers = header_map.get_all("Retry-After").iter();
    let var_124: Vec<std::string::String> = smithy_http::header::read_many(headers)?;
    if var_124.len() > 1 {
        Err(smithy_http::header::ParseError)
    } else {
        let mut var_124 = var_124;
        Ok(var_124.pop())
    }
}
