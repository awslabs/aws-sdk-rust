// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn deser_header_create_api_key_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_api_key_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_authorizer_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_authorizer_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_base_path_mapping_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_base_path_mapping_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_deployment_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_deployment_service_unavailable_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_deployment_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_documentation_part_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_documentation_part_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_documentation_version_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_documentation_version_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_domain_name_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_domain_name_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_model_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_model_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_request_validator_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_request_validator_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_resource_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_resource_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_rest_api_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_rest_api_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_stage_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_stage_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_usage_plan_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_usage_plan_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_usage_plan_key_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_usage_plan_key_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_vpc_link_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_create_vpc_link_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_api_key_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_authorizer_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_base_path_mapping_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_client_certificate_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_deployment_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_deployment_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_documentation_part_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_documentation_version_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_domain_name_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_gateway_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_integration_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_integration_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_method_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_method_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_model_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_request_validator_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_resource_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_rest_api_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_stage_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_stage_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_usage_plan_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_usage_plan_key_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_delete_vpc_link_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_flush_stage_authorizers_cache_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_flush_stage_authorizers_cache_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_flush_stage_cache_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_flush_stage_cache_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_generate_client_certificate_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_generate_client_certificate_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_account_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_api_key_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_api_keys_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_authorizer_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_authorizers_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_base_path_mapping_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_base_path_mappings_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_client_certificate_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_client_certificates_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_deployment_service_unavailable_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_deployment_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_deployments_service_unavailable_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_deployments_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_documentation_part_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_documentation_parts_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_documentation_version_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_documentation_versions_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_domain_name_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_domain_names_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_export_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_export_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_export_get_export_output_body(
    body: &[u8],
) -> std::result::Result<std::option::Option<smithy_types::Blob>, crate::error::GetExportError> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_get_export_get_export_output_content_disposition(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Disposition").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_export_get_export_output_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Type").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_gateway_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_gateway_responses_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_integration_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_integration_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_method_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_method_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_model_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_models_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_model_template_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_request_validator_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_request_validators_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_resource_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_resources_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_rest_api_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_rest_apis_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_sdk_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_sdk_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_payload_get_sdk_get_sdk_output_body(
    body: &[u8],
) -> std::result::Result<std::option::Option<smithy_types::Blob>, crate::error::GetSdkError> {
    (!body.is_empty())
        .then(|| Ok(smithy_types::Blob::new(body)))
        .transpose()
}

pub fn deser_header_get_sdk_get_sdk_output_content_disposition(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Disposition").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_sdk_get_sdk_output_content_type(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Content-Type").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_sdk_type_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_sdk_types_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_stage_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_stage_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_stages_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_stages_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_tags_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_usage_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_usage_plan_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_usage_plan_key_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_usage_plan_keys_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_usage_plans_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_vpc_link_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_get_vpc_links_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_import_api_keys_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_import_api_keys_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_import_documentation_parts_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_import_documentation_parts_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_import_rest_api_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_import_rest_api_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_gateway_response_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_gateway_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_integration_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_integration_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_integration_response_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_integration_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_method_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_method_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_method_response_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_method_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_rest_api_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_put_rest_api_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_tag_resource_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_tag_resource_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_test_invoke_authorizer_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_test_invoke_method_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_untag_resource_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_untag_resource_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_account_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_account_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_api_key_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_api_key_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_authorizer_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_authorizer_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_base_path_mapping_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_base_path_mapping_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_client_certificate_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_client_certificate_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_deployment_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_deployment_service_unavailable_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_deployment_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_documentation_part_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_documentation_part_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_documentation_version_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_documentation_version_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_domain_name_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_domain_name_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_gateway_response_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_gateway_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_integration_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_integration_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_integration_response_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_integration_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_method_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_method_response_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_method_response_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_model_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_model_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_request_validator_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_request_validator_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_resource_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_rest_api_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_rest_api_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_stage_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_stage_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_usage_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_usage_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_usage_plan_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_usage_plan_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_vpc_link_limit_exceeded_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}

pub fn deser_header_update_vpc_link_too_many_requests_exception_retry_after_seconds(
    header_map: &http::HeaderMap,
) -> std::result::Result<std::option::Option<std::string::String>, smithy_http::header::ParseError>
{
    let headers = header_map.get_all("Retry-After").iter();
    smithy_http::header::one_or_none(headers)
}
