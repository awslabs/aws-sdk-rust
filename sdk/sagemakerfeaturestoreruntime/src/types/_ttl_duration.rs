// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Time to live duration, where the record is hard deleted after the expiration time is reached; <code>ExpiresAt</code> = <code>EventTime</code> + <code>TtlDuration</code>. For information on HardDelete, see the <a href="https://docs.aws.amazon.com/sagemaker/latest/APIReference/API_feature_store_DeleteRecord.html">DeleteRecord</a> API in the Amazon SageMaker API Reference guide.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TtlDuration {
    /// <p> <code>TtlDuration</code> time unit.</p>
    pub unit: ::std::option::Option<crate::types::TtlDurationUnit>,
    /// <p> <code>TtlDuration</code> time value.</p>
    pub value: ::std::option::Option<i32>,
}
impl TtlDuration {
    /// <p> <code>TtlDuration</code> time unit.</p>
    pub fn unit(&self) -> ::std::option::Option<&crate::types::TtlDurationUnit> {
        self.unit.as_ref()
    }
    /// <p> <code>TtlDuration</code> time value.</p>
    pub fn value(&self) -> ::std::option::Option<i32> {
        self.value
    }
}
impl TtlDuration {
    /// Creates a new builder-style object to manufacture [`TtlDuration`](crate::types::TtlDuration).
    pub fn builder() -> crate::types::builders::TtlDurationBuilder {
        crate::types::builders::TtlDurationBuilder::default()
    }
}

/// A builder for [`TtlDuration`](crate::types::TtlDuration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TtlDurationBuilder {
    pub(crate) unit: ::std::option::Option<crate::types::TtlDurationUnit>,
    pub(crate) value: ::std::option::Option<i32>,
}
impl TtlDurationBuilder {
    /// <p> <code>TtlDuration</code> time unit.</p>
    /// This field is required.
    pub fn unit(mut self, input: crate::types::TtlDurationUnit) -> Self {
        self.unit = ::std::option::Option::Some(input);
        self
    }
    /// <p> <code>TtlDuration</code> time unit.</p>
    pub fn set_unit(mut self, input: ::std::option::Option<crate::types::TtlDurationUnit>) -> Self {
        self.unit = input;
        self
    }
    /// <p> <code>TtlDuration</code> time unit.</p>
    pub fn get_unit(&self) -> &::std::option::Option<crate::types::TtlDurationUnit> {
        &self.unit
    }
    /// <p> <code>TtlDuration</code> time value.</p>
    /// This field is required.
    pub fn value(mut self, input: i32) -> Self {
        self.value = ::std::option::Option::Some(input);
        self
    }
    /// <p> <code>TtlDuration</code> time value.</p>
    pub fn set_value(mut self, input: ::std::option::Option<i32>) -> Self {
        self.value = input;
        self
    }
    /// <p> <code>TtlDuration</code> time value.</p>
    pub fn get_value(&self) -> &::std::option::Option<i32> {
        &self.value
    }
    /// Consumes the builder and constructs a [`TtlDuration`](crate::types::TtlDuration).
    pub fn build(self) -> crate::types::TtlDuration {
        crate::types::TtlDuration {
            unit: self.unit,
            value: self.value,
        }
    }
}
