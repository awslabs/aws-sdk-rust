// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output of Records that have been retrieved in a batch.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchGetRecordResultDetail {
    /// <p>The <code>FeatureGroupName</code> containing Records you retrieved in a batch.</p>
    #[doc(hidden)]
    pub feature_group_name: std::option::Option<std::string::String>,
    /// <p>The value of the record identifer in string format.</p>
    #[doc(hidden)]
    pub record_identifier_value_as_string: std::option::Option<std::string::String>,
    /// <p>The <code>Record</code> retrieved.</p>
    #[doc(hidden)]
    pub record: std::option::Option<std::vec::Vec<crate::types::FeatureValue>>,
}
impl BatchGetRecordResultDetail {
    /// <p>The <code>FeatureGroupName</code> containing Records you retrieved in a batch.</p>
    pub fn feature_group_name(&self) -> std::option::Option<&str> {
        self.feature_group_name.as_deref()
    }
    /// <p>The value of the record identifer in string format.</p>
    pub fn record_identifier_value_as_string(&self) -> std::option::Option<&str> {
        self.record_identifier_value_as_string.as_deref()
    }
    /// <p>The <code>Record</code> retrieved.</p>
    pub fn record(&self) -> std::option::Option<&[crate::types::FeatureValue]> {
        self.record.as_deref()
    }
}
impl BatchGetRecordResultDetail {
    /// Creates a new builder-style object to manufacture [`BatchGetRecordResultDetail`](crate::types::BatchGetRecordResultDetail).
    pub fn builder() -> crate::types::builders::BatchGetRecordResultDetailBuilder {
        crate::types::builders::BatchGetRecordResultDetailBuilder::default()
    }
}

/// A builder for [`BatchGetRecordResultDetail`](crate::types::BatchGetRecordResultDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchGetRecordResultDetailBuilder {
    pub(crate) feature_group_name: std::option::Option<std::string::String>,
    pub(crate) record_identifier_value_as_string: std::option::Option<std::string::String>,
    pub(crate) record: std::option::Option<std::vec::Vec<crate::types::FeatureValue>>,
}
impl BatchGetRecordResultDetailBuilder {
    /// <p>The <code>FeatureGroupName</code> containing Records you retrieved in a batch.</p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature_group_name = Some(input.into());
        self
    }
    /// <p>The <code>FeatureGroupName</code> containing Records you retrieved in a batch.</p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.feature_group_name = input;
        self
    }
    /// <p>The value of the record identifer in string format.</p>
    pub fn record_identifier_value_as_string(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.record_identifier_value_as_string = Some(input.into());
        self
    }
    /// <p>The value of the record identifer in string format.</p>
    pub fn set_record_identifier_value_as_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.record_identifier_value_as_string = input;
        self
    }
    /// Appends an item to `record`.
    ///
    /// To override the contents of this collection use [`set_record`](Self::set_record).
    ///
    /// <p>The <code>Record</code> retrieved.</p>
    pub fn record(mut self, input: crate::types::FeatureValue) -> Self {
        let mut v = self.record.unwrap_or_default();
        v.push(input);
        self.record = Some(v);
        self
    }
    /// <p>The <code>Record</code> retrieved.</p>
    pub fn set_record(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FeatureValue>>,
    ) -> Self {
        self.record = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchGetRecordResultDetail`](crate::types::BatchGetRecordResultDetail).
    pub fn build(self) -> crate::types::BatchGetRecordResultDetail {
        crate::types::BatchGetRecordResultDetail {
            feature_group_name: self.feature_group_name,
            record_identifier_value_as_string: self.record_identifier_value_as_string,
            record: self.record,
        }
    }
}
