// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The identifier that identifies the batch of Records you are retrieving in a batch.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchGetRecordIdentifier {
    /// <p>The name or Amazon Resource Name (ARN) of the <code>FeatureGroup</code> containing the records you are retrieving in a batch.</p>
    pub feature_group_name: ::std::option::Option<::std::string::String>,
    /// <p>The value for a list of record identifiers in string format.</p>
    pub record_identifiers_value_as_string: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub feature_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchGetRecordIdentifier {
    /// <p>The name or Amazon Resource Name (ARN) of the <code>FeatureGroup</code> containing the records you are retrieving in a batch.</p>
    pub fn feature_group_name(&self) -> ::std::option::Option<&str> {
        self.feature_group_name.as_deref()
    }
    /// <p>The value for a list of record identifiers in string format.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.record_identifiers_value_as_string.is_none()`.
    pub fn record_identifiers_value_as_string(&self) -> &[::std::string::String] {
        self.record_identifiers_value_as_string.as_deref().unwrap_or_default()
    }
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.feature_names.is_none()`.
    pub fn feature_names(&self) -> &[::std::string::String] {
        self.feature_names.as_deref().unwrap_or_default()
    }
}
impl BatchGetRecordIdentifier {
    /// Creates a new builder-style object to manufacture [`BatchGetRecordIdentifier`](crate::types::BatchGetRecordIdentifier).
    pub fn builder() -> crate::types::builders::BatchGetRecordIdentifierBuilder {
        crate::types::builders::BatchGetRecordIdentifierBuilder::default()
    }
}

/// A builder for [`BatchGetRecordIdentifier`](crate::types::BatchGetRecordIdentifier).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchGetRecordIdentifierBuilder {
    pub(crate) feature_group_name: ::std::option::Option<::std::string::String>,
    pub(crate) record_identifiers_value_as_string: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) feature_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchGetRecordIdentifierBuilder {
    /// <p>The name or Amazon Resource Name (ARN) of the <code>FeatureGroup</code> containing the records you are retrieving in a batch.</p>
    /// This field is required.
    pub fn feature_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature_group_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the <code>FeatureGroup</code> containing the records you are retrieving in a batch.</p>
    pub fn set_feature_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature_group_name = input;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the <code>FeatureGroup</code> containing the records you are retrieving in a batch.</p>
    pub fn get_feature_group_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature_group_name
    }
    /// Appends an item to `record_identifiers_value_as_string`.
    ///
    /// To override the contents of this collection use [`set_record_identifiers_value_as_string`](Self::set_record_identifiers_value_as_string).
    ///
    /// <p>The value for a list of record identifiers in string format.</p>
    pub fn record_identifiers_value_as_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.record_identifiers_value_as_string.unwrap_or_default();
        v.push(input.into());
        self.record_identifiers_value_as_string = ::std::option::Option::Some(v);
        self
    }
    /// <p>The value for a list of record identifiers in string format.</p>
    pub fn set_record_identifiers_value_as_string(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.record_identifiers_value_as_string = input;
        self
    }
    /// <p>The value for a list of record identifiers in string format.</p>
    pub fn get_record_identifiers_value_as_string(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.record_identifiers_value_as_string
    }
    /// Appends an item to `feature_names`.
    ///
    /// To override the contents of this collection use [`set_feature_names`](Self::set_feature_names).
    ///
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn feature_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.feature_names.unwrap_or_default();
        v.push(input.into());
        self.feature_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn set_feature_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.feature_names = input;
        self
    }
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn get_feature_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.feature_names
    }
    /// Consumes the builder and constructs a [`BatchGetRecordIdentifier`](crate::types::BatchGetRecordIdentifier).
    pub fn build(self) -> crate::types::BatchGetRecordIdentifier {
        crate::types::BatchGetRecordIdentifier {
            feature_group_name: self.feature_group_name,
            record_identifiers_value_as_string: self.record_identifiers_value_as_string,
            feature_names: self.feature_names,
        }
    }
}
