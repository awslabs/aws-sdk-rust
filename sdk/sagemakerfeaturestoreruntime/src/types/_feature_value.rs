// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The value associated with a feature.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FeatureValue {
    /// <p>The name of a feature that a feature value corresponds to.</p>
    pub feature_name: ::std::option::Option<::std::string::String>,
    /// <p>The value in string format associated with a feature. Used when your <code>CollectionType</code> is <code>None</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. This value represents all three types as a string.</p>
    pub value_as_string: ::std::option::Option<::std::string::String>,
    /// <p>The list of values in string format associated with a feature. Used when your <code>CollectionType</code> is a <code>List</code>, <code>Set</code>, or <code>Vector</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. These values represents all three types as a string.</p>
    pub value_as_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FeatureValue {
    /// <p>The name of a feature that a feature value corresponds to.</p>
    pub fn feature_name(&self) -> ::std::option::Option<&str> {
        self.feature_name.as_deref()
    }
    /// <p>The value in string format associated with a feature. Used when your <code>CollectionType</code> is <code>None</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. This value represents all three types as a string.</p>
    pub fn value_as_string(&self) -> ::std::option::Option<&str> {
        self.value_as_string.as_deref()
    }
    /// <p>The list of values in string format associated with a feature. Used when your <code>CollectionType</code> is a <code>List</code>, <code>Set</code>, or <code>Vector</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. These values represents all three types as a string.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.value_as_string_list.is_none()`.
    pub fn value_as_string_list(&self) -> &[::std::string::String] {
        self.value_as_string_list.as_deref().unwrap_or_default()
    }
}
impl FeatureValue {
    /// Creates a new builder-style object to manufacture [`FeatureValue`](crate::types::FeatureValue).
    pub fn builder() -> crate::types::builders::FeatureValueBuilder {
        crate::types::builders::FeatureValueBuilder::default()
    }
}

/// A builder for [`FeatureValue`](crate::types::FeatureValue).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FeatureValueBuilder {
    pub(crate) feature_name: ::std::option::Option<::std::string::String>,
    pub(crate) value_as_string: ::std::option::Option<::std::string::String>,
    pub(crate) value_as_string_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl FeatureValueBuilder {
    /// <p>The name of a feature that a feature value corresponds to.</p>
    /// This field is required.
    pub fn feature_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.feature_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of a feature that a feature value corresponds to.</p>
    pub fn set_feature_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.feature_name = input;
        self
    }
    /// <p>The name of a feature that a feature value corresponds to.</p>
    pub fn get_feature_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.feature_name
    }
    /// <p>The value in string format associated with a feature. Used when your <code>CollectionType</code> is <code>None</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. This value represents all three types as a string.</p>
    pub fn value_as_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.value_as_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value in string format associated with a feature. Used when your <code>CollectionType</code> is <code>None</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. This value represents all three types as a string.</p>
    pub fn set_value_as_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.value_as_string = input;
        self
    }
    /// <p>The value in string format associated with a feature. Used when your <code>CollectionType</code> is <code>None</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. This value represents all three types as a string.</p>
    pub fn get_value_as_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.value_as_string
    }
    /// Appends an item to `value_as_string_list`.
    ///
    /// To override the contents of this collection use [`set_value_as_string_list`](Self::set_value_as_string_list).
    ///
    /// <p>The list of values in string format associated with a feature. Used when your <code>CollectionType</code> is a <code>List</code>, <code>Set</code>, or <code>Vector</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. These values represents all three types as a string.</p>
    pub fn value_as_string_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.value_as_string_list.unwrap_or_default();
        v.push(input.into());
        self.value_as_string_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of values in string format associated with a feature. Used when your <code>CollectionType</code> is a <code>List</code>, <code>Set</code>, or <code>Vector</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. These values represents all three types as a string.</p>
    pub fn set_value_as_string_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.value_as_string_list = input;
        self
    }
    /// <p>The list of values in string format associated with a feature. Used when your <code>CollectionType</code> is a <code>List</code>, <code>Set</code>, or <code>Vector</code>. Note that features types can be <code>String</code>, <code>Integral</code>, or <code>Fractional</code>. These values represents all three types as a string.</p>
    pub fn get_value_as_string_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.value_as_string_list
    }
    /// Consumes the builder and constructs a [`FeatureValue`](crate::types::FeatureValue).
    pub fn build(self) -> crate::types::FeatureValue {
        crate::types::FeatureValue {
            feature_name: self.feature_name,
            value_as_string: self.value_as_string,
            value_as_string_list: self.value_as_string_list,
        }
    }
}
