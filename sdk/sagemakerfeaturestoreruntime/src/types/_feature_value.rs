// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The value associated with a feature.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FeatureValue {
    /// <p>The name of a feature that a feature value corresponds to.</p>
    #[doc(hidden)]
    pub feature_name: std::option::Option<std::string::String>,
    /// <p>The value associated with a feature, in string format. Note that features types can be String, Integral, or Fractional. This value represents all three types as a string.</p>
    #[doc(hidden)]
    pub value_as_string: std::option::Option<std::string::String>,
}
impl FeatureValue {
    /// <p>The name of a feature that a feature value corresponds to.</p>
    pub fn feature_name(&self) -> std::option::Option<&str> {
        self.feature_name.as_deref()
    }
    /// <p>The value associated with a feature, in string format. Note that features types can be String, Integral, or Fractional. This value represents all three types as a string.</p>
    pub fn value_as_string(&self) -> std::option::Option<&str> {
        self.value_as_string.as_deref()
    }
}
impl FeatureValue {
    /// Creates a new builder-style object to manufacture [`FeatureValue`](crate::types::FeatureValue).
    pub fn builder() -> crate::types::builders::FeatureValueBuilder {
        crate::types::builders::FeatureValueBuilder::default()
    }
}

/// A builder for [`FeatureValue`](crate::types::FeatureValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FeatureValueBuilder {
    pub(crate) feature_name: std::option::Option<std::string::String>,
    pub(crate) value_as_string: std::option::Option<std::string::String>,
}
impl FeatureValueBuilder {
    /// <p>The name of a feature that a feature value corresponds to.</p>
    pub fn feature_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature_name = Some(input.into());
        self
    }
    /// <p>The name of a feature that a feature value corresponds to.</p>
    pub fn set_feature_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.feature_name = input;
        self
    }
    /// <p>The value associated with a feature, in string format. Note that features types can be String, Integral, or Fractional. This value represents all three types as a string.</p>
    pub fn value_as_string(mut self, input: impl Into<std::string::String>) -> Self {
        self.value_as_string = Some(input.into());
        self
    }
    /// <p>The value associated with a feature, in string format. Note that features types can be String, Integral, or Fractional. This value represents all three types as a string.</p>
    pub fn set_value_as_string(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.value_as_string = input;
        self
    }
    /// Consumes the builder and constructs a [`FeatureValue`](crate::types::FeatureValue).
    pub fn build(self) -> crate::types::FeatureValue {
        crate::types::FeatureValue {
            feature_name: self.feature_name,
            value_as_string: self.value_as_string,
        }
    }
}
