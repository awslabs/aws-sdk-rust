// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_generic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<smithy_types::Error, serde_json::Error> {
    let body =
        serde_json::from_slice(response.body().as_ref()).unwrap_or_else(|_| serde_json::json!({}));
    Ok(crate::aws_json_errors::parse_generic_error(
        &response, &body,
    ))
}

pub fn access_forbidden(
    input: &[u8],
    mut builder: crate::error::access_forbidden::Builder,
) -> std::result::Result<crate::error::access_forbidden::Builder, serde_json::Error> {
    let parsed_body: crate::error::AccessForbidden = if input.is_empty() {
        // To enable JSON parsing to succeed, replace an empty body
        // with an empty JSON body. If a member was required, it will fail slightly later
        // during the operation construction phase.
        serde_json::from_slice(b"{}")?
    } else {
        serde_json::from_slice(input)?
    };
    builder = builder.set_message(parsed_body.message);
    Ok(builder)
}

pub fn internal_failure(
    input: &[u8],
    mut builder: crate::error::internal_failure::Builder,
) -> std::result::Result<crate::error::internal_failure::Builder, serde_json::Error> {
    let parsed_body: crate::error::InternalFailure = if input.is_empty() {
        // To enable JSON parsing to succeed, replace an empty body
        // with an empty JSON body. If a member was required, it will fail slightly later
        // during the operation construction phase.
        serde_json::from_slice(b"{}")?
    } else {
        serde_json::from_slice(input)?
    };
    builder = builder.set_message(parsed_body.message);
    Ok(builder)
}

pub fn service_unavailable(
    input: &[u8],
    mut builder: crate::error::service_unavailable::Builder,
) -> std::result::Result<crate::error::service_unavailable::Builder, serde_json::Error> {
    let parsed_body: crate::error::ServiceUnavailable = if input.is_empty() {
        // To enable JSON parsing to succeed, replace an empty body
        // with an empty JSON body. If a member was required, it will fail slightly later
        // during the operation construction phase.
        serde_json::from_slice(b"{}")?
    } else {
        serde_json::from_slice(input)?
    };
    builder = builder.set_message(parsed_body.message);
    Ok(builder)
}

pub fn validation_error(
    input: &[u8],
    mut builder: crate::error::validation_error::Builder,
) -> std::result::Result<crate::error::validation_error::Builder, serde_json::Error> {
    let parsed_body: crate::error::ValidationError = if input.is_empty() {
        // To enable JSON parsing to succeed, replace an empty body
        // with an empty JSON body. If a member was required, it will fail slightly later
        // during the operation construction phase.
        serde_json::from_slice(b"{}")?
    } else {
        serde_json::from_slice(input)?
    };
    builder = builder.set_message(parsed_body.message);
    Ok(builder)
}

pub fn batch_get_record_deser_operation(
    input: &[u8],
    mut builder: crate::output::batch_get_record_output::Builder,
) -> std::result::Result<crate::output::batch_get_record_output::Builder, serde_json::Error> {
    let parsed_body: crate::serializer::BatchGetRecordOutputBody = if input.is_empty() {
        // To enable JSON parsing to succeed, replace an empty body
        // with an empty JSON body. If a member was required, it will fail slightly later
        // during the operation construction phase when a required field was missing.
        serde_json::from_slice(b"{}")?
    } else {
        serde_json::from_slice(input)?
    };
    builder = builder.set_records(parsed_body.records);
    builder = builder.set_errors(parsed_body.errors);
    builder = builder.set_unprocessed_identifiers(parsed_body.unprocessed_identifiers);
    Ok(builder)
}

pub fn resource_not_found(
    input: &[u8],
    mut builder: crate::error::resource_not_found::Builder,
) -> std::result::Result<crate::error::resource_not_found::Builder, serde_json::Error> {
    let parsed_body: crate::error::ResourceNotFound = if input.is_empty() {
        // To enable JSON parsing to succeed, replace an empty body
        // with an empty JSON body. If a member was required, it will fail slightly later
        // during the operation construction phase.
        serde_json::from_slice(b"{}")?
    } else {
        serde_json::from_slice(input)?
    };
    builder = builder.set_message(parsed_body.message);
    Ok(builder)
}

pub fn get_record_deser_operation(
    input: &[u8],
    mut builder: crate::output::get_record_output::Builder,
) -> std::result::Result<crate::output::get_record_output::Builder, serde_json::Error> {
    let parsed_body: crate::serializer::GetRecordOutputBody = if input.is_empty() {
        // To enable JSON parsing to succeed, replace an empty body
        // with an empty JSON body. If a member was required, it will fail slightly later
        // during the operation construction phase when a required field was missing.
        serde_json::from_slice(b"{}")?
    } else {
        serde_json::from_slice(input)?
    };
    builder = builder.set_record(parsed_body.record);
    Ok(builder)
}
