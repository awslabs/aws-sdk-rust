// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn batch_get_record(&self) -> fluent_builders::BatchGetRecord<C> {
        fluent_builders::BatchGetRecord::new(self.handle.clone())
    }
    pub fn delete_record(&self) -> fluent_builders::DeleteRecord<C> {
        fluent_builders::DeleteRecord::new(self.handle.clone())
    }
    pub fn get_record(&self) -> fluent_builders::GetRecord<C> {
        fluent_builders::GetRecord::new(self.handle.clone())
    }
    pub fn put_record(&self) -> fluent_builders::PutRecord<C> {
        fluent_builders::PutRecord::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct BatchGetRecord<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::batch_get_record_input::Builder,
    }
    impl<C> BatchGetRecord<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::BatchGetRecordOutput,
            smithy_http::result::SdkError<crate::error::BatchGetRecordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A list of <code>FeatureGroup</code> names, with their corresponding <code>RecordIdentifier</code> value, and Feature name
        /// that have been requested to be retrieved in batch.</p>
        pub fn identifiers(
            mut self,
            inp: impl Into<crate::model::BatchGetRecordIdentifier>,
        ) -> Self {
            self.inner = self.inner.identifiers(inp);
            self
        }
        pub fn set_identifiers(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::BatchGetRecordIdentifier>>,
        ) -> Self {
            self.inner = self.inner.set_identifiers(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteRecord<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_record_input::Builder,
    }
    impl<C> DeleteRecord<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::DeleteRecordOutput,
            smithy_http::result::SdkError<crate::error::DeleteRecordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the feature group to delete the record from. </p>
        pub fn feature_group_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.feature_group_name(inp);
            self
        }
        pub fn set_feature_group_name(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_feature_group_name(inp);
            self
        }
        /// <p>The value for the <code>RecordIdentifier</code> that uniquely identifies the record, in
        /// string format. </p>
        pub fn record_identifier_value_as_string(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.record_identifier_value_as_string(inp);
            self
        }
        pub fn set_record_identifier_value_as_string(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_record_identifier_value_as_string(inp);
            self
        }
        /// <p>Timestamp indicating when the deletion event occurred. <code>EventTime</code> can be
        /// used to query data at a certain point in time.</p>
        pub fn event_time(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.event_time(inp);
            self
        }
        pub fn set_event_time(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_event_time(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetRecord<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_record_input::Builder,
    }
    impl<C> GetRecord<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::GetRecordOutput,
            smithy_http::result::SdkError<crate::error::GetRecordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the feature group in which you want to put the records.</p>
        pub fn feature_group_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.feature_group_name(inp);
            self
        }
        pub fn set_feature_group_name(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_feature_group_name(inp);
            self
        }
        /// <p>The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies
        /// the record in the <code>FeatureGroup</code>. </p>
        pub fn record_identifier_value_as_string(
            mut self,
            inp: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.record_identifier_value_as_string(inp);
            self
        }
        pub fn set_record_identifier_value_as_string(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_record_identifier_value_as_string(inp);
            self
        }
        /// <p>List of names of Features to be retrieved. If not specified, the latest value for all
        /// the Features are returned.</p>
        pub fn feature_names(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.feature_names(inp);
            self
        }
        pub fn set_feature_names(
            mut self,
            inp: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_feature_names(inp);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct PutRecord<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::put_record_input::Builder,
    }
    impl<C> PutRecord<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> Result<
            crate::output::PutRecordOutput,
            smithy_http::result::SdkError<crate::error::PutRecordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the feature group that you want to insert the record into.</p>
        pub fn feature_group_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.feature_group_name(inp);
            self
        }
        pub fn set_feature_group_name(mut self, inp: std::string::String) -> Self {
            self.inner = self.inner.set_feature_group_name(inp);
            self
        }
        /// <p>List of FeatureValues to be inserted. This will be a full over-write. If you only want
        /// to update few of the feature values, do the following:</p>
        /// <ul>
        /// <li>
        /// <p>Use <code>GetRecord</code> to retrieve the latest record.</p>
        /// </li>
        /// <li>
        /// <p>Update the record returned from <code>GetRecord</code>. </p>
        /// </li>
        /// <li>
        /// <p>Use <code>PutRecord</code> to update feature values.</p>
        /// </li>
        /// </ul>
        pub fn record(mut self, inp: impl Into<crate::model::FeatureValue>) -> Self {
            self.inner = self.inner.record(inp);
            self
        }
        pub fn set_record(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::FeatureValue>>,
        ) -> Self {
            self.inner = self.inner.set_record(inp);
            self
        }
    }
}
