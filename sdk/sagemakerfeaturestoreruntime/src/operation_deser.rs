// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_get_record_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::BatchGetRecordOutput, crate::error::BatchGetRecordError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::BatchGetRecordError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::BatchGetRecordError::unhandled(generic)),
    };
    Err(match error_code {
        "AccessForbidden" => crate::error::BatchGetRecordError {
            meta: generic,
            kind: crate::error::BatchGetRecordErrorKind::AccessForbidden({
                #[allow(unused_mut)]
                let mut output = crate::error::access_forbidden::Builder::default();
                let _ = response;
                output = crate::json_deser::access_forbidden(response.body().as_ref(), output)
                    .map_err(crate::error::BatchGetRecordError::unhandled)?;
                output.build()
            }),
        },
        "InternalFailure" => crate::error::BatchGetRecordError {
            meta: generic,
            kind: crate::error::BatchGetRecordErrorKind::InternalFailure({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_failure::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_failure(response.body().as_ref(), output)
                    .map_err(crate::error::BatchGetRecordError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailable" => crate::error::BatchGetRecordError {
            meta: generic,
            kind: crate::error::BatchGetRecordErrorKind::ServiceUnavailable({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable(response.body().as_ref(), output)
                    .map_err(crate::error::BatchGetRecordError::unhandled)?;
                output.build()
            }),
        },
        "ValidationError" => crate::error::BatchGetRecordError {
            meta: generic,
            kind: crate::error::BatchGetRecordErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_error(response.body().as_ref(), output)
                    .map_err(crate::error::BatchGetRecordError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::BatchGetRecordError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_batch_get_record_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::BatchGetRecordOutput, crate::error::BatchGetRecordError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::batch_get_record_output::Builder::default();
        let _ = response;
        output =
            crate::json_deser::batch_get_record_deser_operation(response.body().as_ref(), output)
                .map_err(crate::error::BatchGetRecordError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_record_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteRecordOutput, crate::error::DeleteRecordError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::DeleteRecordError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::DeleteRecordError::unhandled(generic)),
    };
    Err(match error_code {
        "AccessForbidden" => crate::error::DeleteRecordError {
            meta: generic,
            kind: crate::error::DeleteRecordErrorKind::AccessForbidden({
                #[allow(unused_mut)]
                let mut output = crate::error::access_forbidden::Builder::default();
                let _ = response;
                output = crate::json_deser::access_forbidden(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteRecordError::unhandled)?;
                output.build()
            }),
        },
        "InternalFailure" => crate::error::DeleteRecordError {
            meta: generic,
            kind: crate::error::DeleteRecordErrorKind::InternalFailure({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_failure::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_failure(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteRecordError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailable" => crate::error::DeleteRecordError {
            meta: generic,
            kind: crate::error::DeleteRecordErrorKind::ServiceUnavailable({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteRecordError::unhandled)?;
                output.build()
            }),
        },
        "ValidationError" => crate::error::DeleteRecordError {
            meta: generic,
            kind: crate::error::DeleteRecordErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_error(response.body().as_ref(), output)
                    .map_err(crate::error::DeleteRecordError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::DeleteRecordError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_delete_record_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::DeleteRecordOutput, crate::error::DeleteRecordError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::delete_record_output::Builder::default();
        let _ = response;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_record_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetRecordOutput, crate::error::GetRecordError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetRecordError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetRecordError::unhandled(generic)),
    };
    Err(match error_code {
        "AccessForbidden" => crate::error::GetRecordError {
            meta: generic,
            kind: crate::error::GetRecordErrorKind::AccessForbidden({
                #[allow(unused_mut)]
                let mut output = crate::error::access_forbidden::Builder::default();
                let _ = response;
                output = crate::json_deser::access_forbidden(response.body().as_ref(), output)
                    .map_err(crate::error::GetRecordError::unhandled)?;
                output.build()
            }),
        },
        "InternalFailure" => crate::error::GetRecordError {
            meta: generic,
            kind: crate::error::GetRecordErrorKind::InternalFailure({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_failure::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_failure(response.body().as_ref(), output)
                    .map_err(crate::error::GetRecordError::unhandled)?;
                output.build()
            }),
        },
        "ResourceNotFound" => crate::error::GetRecordError {
            meta: generic,
            kind: crate::error::GetRecordErrorKind::ResourceNotFound({
                #[allow(unused_mut)]
                let mut output = crate::error::resource_not_found::Builder::default();
                let _ = response;
                output = crate::json_deser::resource_not_found(response.body().as_ref(), output)
                    .map_err(crate::error::GetRecordError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailable" => crate::error::GetRecordError {
            meta: generic,
            kind: crate::error::GetRecordErrorKind::ServiceUnavailable({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable(response.body().as_ref(), output)
                    .map_err(crate::error::GetRecordError::unhandled)?;
                output.build()
            }),
        },
        "ValidationError" => crate::error::GetRecordError {
            meta: generic,
            kind: crate::error::GetRecordErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_error(response.body().as_ref(), output)
                    .map_err(crate::error::GetRecordError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetRecordError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_record_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::GetRecordOutput, crate::error::GetRecordError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_record_output::Builder::default();
        let _ = response;
        output = crate::json_deser::get_record_deser_operation(response.body().as_ref(), output)
            .map_err(crate::error::GetRecordError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_record_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::PutRecordOutput, crate::error::PutRecordError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::PutRecordError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PutRecordError::unhandled(generic)),
    };
    Err(match error_code {
        "AccessForbidden" => crate::error::PutRecordError {
            meta: generic,
            kind: crate::error::PutRecordErrorKind::AccessForbidden({
                #[allow(unused_mut)]
                let mut output = crate::error::access_forbidden::Builder::default();
                let _ = response;
                output = crate::json_deser::access_forbidden(response.body().as_ref(), output)
                    .map_err(crate::error::PutRecordError::unhandled)?;
                output.build()
            }),
        },
        "InternalFailure" => crate::error::PutRecordError {
            meta: generic,
            kind: crate::error::PutRecordErrorKind::InternalFailure({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_failure::Builder::default();
                let _ = response;
                output = crate::json_deser::internal_failure(response.body().as_ref(), output)
                    .map_err(crate::error::PutRecordError::unhandled)?;
                output.build()
            }),
        },
        "ServiceUnavailable" => crate::error::PutRecordError {
            meta: generic,
            kind: crate::error::PutRecordErrorKind::ServiceUnavailable({
                #[allow(unused_mut)]
                let mut output = crate::error::service_unavailable::Builder::default();
                let _ = response;
                output = crate::json_deser::service_unavailable(response.body().as_ref(), output)
                    .map_err(crate::error::PutRecordError::unhandled)?;
                output.build()
            }),
        },
        "ValidationError" => crate::error::PutRecordError {
            meta: generic,
            kind: crate::error::PutRecordErrorKind::ValidationError({
                #[allow(unused_mut)]
                let mut output = crate::error::validation_error::Builder::default();
                let _ = response;
                output = crate::json_deser::validation_error(response.body().as_ref(), output)
                    .map_err(crate::error::PutRecordError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::PutRecordError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_record_response(
    response: &http::Response<bytes::Bytes>,
) -> Result<crate::output::PutRecordOutput, crate::error::PutRecordError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::put_record_output::Builder::default();
        let _ = response;
        output.build()
    })
}
