// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have permission to perform an action.</p>
    AccessForbidden(crate::error::AccessForbidden),
    /// <p>An internal failure occurred. Try your request again. If the problem persists, contact Amazon Web Services customer support.</p>
    InternalFailure(crate::error::InternalFailure),
    /// <p>A resource that is required to perform an action was not found.</p>
    ResourceNotFound(crate::error::ResourceNotFound),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailable(crate::error::ServiceUnavailable),
    /// <p>There was an error validating your request.</p>
    ValidationError(crate::error::ValidationError),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessForbidden(inner) => inner.fmt(f),
            Error::InternalFailure(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::ServiceUnavailable(inner) => inner.fmt(f),
            Error::ValidationError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchGetRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::BatchGetRecordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchGetRecordError> for Error {
    fn from(err: crate::error::BatchGetRecordError) -> Self {
        match err {
            crate::error::BatchGetRecordError::AccessForbidden(inner) => {
                Error::AccessForbidden(inner)
            }
            crate::error::BatchGetRecordError::InternalFailure(inner) => {
                Error::InternalFailure(inner)
            }
            crate::error::BatchGetRecordError::ServiceUnavailable(inner) => {
                Error::ServiceUnavailable(inner)
            }
            crate::error::BatchGetRecordError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::error::BatchGetRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRecordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRecordError> for Error {
    fn from(err: crate::error::DeleteRecordError) -> Self {
        match err {
            crate::error::DeleteRecordError::AccessForbidden(inner) => {
                Error::AccessForbidden(inner)
            }
            crate::error::DeleteRecordError::InternalFailure(inner) => {
                Error::InternalFailure(inner)
            }
            crate::error::DeleteRecordError::ServiceUnavailable(inner) => {
                Error::ServiceUnavailable(inner)
            }
            crate::error::DeleteRecordError::ValidationError(inner) => {
                Error::ValidationError(inner)
            }
            crate::error::DeleteRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetRecordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRecordError> for Error {
    fn from(err: crate::error::GetRecordError) -> Self {
        match err {
            crate::error::GetRecordError::AccessForbidden(inner) => Error::AccessForbidden(inner),
            crate::error::GetRecordError::InternalFailure(inner) => Error::InternalFailure(inner),
            crate::error::GetRecordError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::error::GetRecordError::ServiceUnavailable(inner) => {
                Error::ServiceUnavailable(inner)
            }
            crate::error::GetRecordError::ValidationError(inner) => Error::ValidationError(inner),
            crate::error::GetRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutRecordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRecordError> for Error {
    fn from(err: crate::error::PutRecordError) -> Self {
        match err {
            crate::error::PutRecordError::AccessForbidden(inner) => Error::AccessForbidden(inner),
            crate::error::PutRecordError::InternalFailure(inner) => Error::InternalFailure(inner),
            crate::error::PutRecordError::ServiceUnavailable(inner) => {
                Error::ServiceUnavailable(inner)
            }
            crate::error::PutRecordError::ValidationError(inner) => Error::ValidationError(inner),
            crate::error::PutRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessForbidden(e) => e.request_id(),
            Self::InternalFailure(e) => e.request_id(),
            Self::ResourceNotFound(e) => e.request_id(),
            Self::ServiceUnavailable(e) => e.request_id(),
            Self::ValidationError(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
