// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have permission to perform an action.</p>
    AccessForbidden(crate::types::error::AccessForbidden),
    /// <p>An internal failure occurred. Try your request again. If the problem persists, contact Amazon Web Services customer support.</p>
    InternalFailure(crate::types::error::InternalFailure),
    /// <p>A resource that is required to perform an action was not found.</p>
    ResourceNotFound(crate::types::error::ResourceNotFound),
    /// <p>The service is currently unavailable.</p>
    ServiceUnavailable(crate::types::error::ServiceUnavailable),
    /// <p>There was an error validating your request.</p>
    ValidationError(crate::types::error::ValidationError),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessForbidden(inner) => inner.fmt(f),
            Error::InternalFailure(inner) => inner.fmt(f),
            Error::ResourceNotFound(inner) => inner.fmt(f),
            Error::ServiceUnavailable(inner) => inner.fmt(f),
            Error::ValidationError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_record::BatchGetRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_get_record::BatchGetRecordError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_get_record::BatchGetRecordError> for Error {
    fn from(err: crate::operation::batch_get_record::BatchGetRecordError) -> Self {
        match err {
            crate::operation::batch_get_record::BatchGetRecordError::AccessForbidden(inner) => Error::AccessForbidden(inner),
            crate::operation::batch_get_record::BatchGetRecordError::InternalFailure(inner) => Error::InternalFailure(inner),
            crate::operation::batch_get_record::BatchGetRecordError::ServiceUnavailable(inner) => Error::ServiceUnavailable(inner),
            crate::operation::batch_get_record::BatchGetRecordError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::batch_get_record::BatchGetRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_record::DeleteRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_record::DeleteRecordError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_record::DeleteRecordError> for Error {
    fn from(err: crate::operation::delete_record::DeleteRecordError) -> Self {
        match err {
            crate::operation::delete_record::DeleteRecordError::AccessForbidden(inner) => Error::AccessForbidden(inner),
            crate::operation::delete_record::DeleteRecordError::InternalFailure(inner) => Error::InternalFailure(inner),
            crate::operation::delete_record::DeleteRecordError::ServiceUnavailable(inner) => Error::ServiceUnavailable(inner),
            crate::operation::delete_record::DeleteRecordError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::delete_record::DeleteRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_record::GetRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_record::GetRecordError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_record::GetRecordError> for Error {
    fn from(err: crate::operation::get_record::GetRecordError) -> Self {
        match err {
            crate::operation::get_record::GetRecordError::AccessForbidden(inner) => Error::AccessForbidden(inner),
            crate::operation::get_record::GetRecordError::InternalFailure(inner) => Error::InternalFailure(inner),
            crate::operation::get_record::GetRecordError::ResourceNotFound(inner) => Error::ResourceNotFound(inner),
            crate::operation::get_record::GetRecordError::ServiceUnavailable(inner) => Error::ServiceUnavailable(inner),
            crate::operation::get_record::GetRecordError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::get_record::GetRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_record::PutRecordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_record::PutRecordError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_record::PutRecordError> for Error {
    fn from(err: crate::operation::put_record::PutRecordError) -> Self {
        match err {
            crate::operation::put_record::PutRecordError::AccessForbidden(inner) => Error::AccessForbidden(inner),
            crate::operation::put_record::PutRecordError::InternalFailure(inner) => Error::InternalFailure(inner),
            crate::operation::put_record::PutRecordError::ServiceUnavailable(inner) => Error::ServiceUnavailable(inner),
            crate::operation::put_record::PutRecordError::ValidationError(inner) => Error::ValidationError(inner),
            crate::operation::put_record::PutRecordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessForbidden(inner) => inner.source(),
            Error::InternalFailure(inner) => inner.source(),
            Error::ResourceNotFound(inner) => inner.source(),
            Error::ServiceUnavailable(inner) => inner.source(),
            Error::ValidationError(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessForbidden(e) => e.request_id(),
            Self::InternalFailure(e) => e.request_id(),
            Self::ResourceNotFound(e) => e.request_id(),
            Self::ServiceUnavailable(e) => e.request_id(),
            Self::ValidationError(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
