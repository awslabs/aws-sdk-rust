// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRecordOutput {
    /// <p>The record you requested. A list of <code>FeatureValues</code>.</p>
    #[doc(hidden)]
    pub record: std::option::Option<std::vec::Vec<crate::types::FeatureValue>>,
    _request_id: Option<String>,
}
impl GetRecordOutput {
    /// <p>The record you requested. A list of <code>FeatureValues</code>.</p>
    pub fn record(&self) -> std::option::Option<&[crate::types::FeatureValue]> {
        self.record.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetRecordOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetRecordOutput {
    /// Creates a new builder-style object to manufacture [`GetRecordOutput`](crate::operation::get_record::GetRecordOutput).
    pub fn builder() -> crate::operation::get_record::builders::GetRecordOutputBuilder {
        crate::operation::get_record::builders::GetRecordOutputBuilder::default()
    }
}

/// A builder for [`GetRecordOutput`](crate::operation::get_record::GetRecordOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRecordOutputBuilder {
    pub(crate) record: std::option::Option<std::vec::Vec<crate::types::FeatureValue>>,
    _request_id: Option<String>,
}
impl GetRecordOutputBuilder {
    /// Appends an item to `record`.
    ///
    /// To override the contents of this collection use [`set_record`](Self::set_record).
    ///
    /// <p>The record you requested. A list of <code>FeatureValues</code>.</p>
    pub fn record(mut self, input: crate::types::FeatureValue) -> Self {
        let mut v = self.record.unwrap_or_default();
        v.push(input);
        self.record = Some(v);
        self
    }
    /// <p>The record you requested. A list of <code>FeatureValues</code>.</p>
    pub fn set_record(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::FeatureValue>>,
    ) -> Self {
        self.record = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetRecordOutput`](crate::operation::get_record::GetRecordOutput).
    pub fn build(self) -> crate::operation::get_record::GetRecordOutput {
        crate::operation::get_record::GetRecordOutput {
            record: self.record,
            _request_id: self._request_id,
        }
    }
}
