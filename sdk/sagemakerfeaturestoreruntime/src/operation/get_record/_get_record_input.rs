// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetRecordInput {
    /// <p>The name of the feature group from which you want to retrieve a record.</p>
    #[doc(hidden)]
    pub feature_group_name: std::option::Option<std::string::String>,
    /// <p>The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>. </p>
    #[doc(hidden)]
    pub record_identifier_value_as_string: std::option::Option<std::string::String>,
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    #[doc(hidden)]
    pub feature_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GetRecordInput {
    /// <p>The name of the feature group from which you want to retrieve a record.</p>
    pub fn feature_group_name(&self) -> std::option::Option<&str> {
        self.feature_group_name.as_deref()
    }
    /// <p>The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>. </p>
    pub fn record_identifier_value_as_string(&self) -> std::option::Option<&str> {
        self.record_identifier_value_as_string.as_deref()
    }
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn feature_names(&self) -> std::option::Option<&[std::string::String]> {
        self.feature_names.as_deref()
    }
}
impl GetRecordInput {
    /// Creates a new builder-style object to manufacture [`GetRecordInput`](crate::operation::get_record::GetRecordInput).
    pub fn builder() -> crate::operation::get_record::builders::GetRecordInputBuilder {
        crate::operation::get_record::builders::GetRecordInputBuilder::default()
    }
}

/// A builder for [`GetRecordInput`](crate::operation::get_record::GetRecordInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetRecordInputBuilder {
    pub(crate) feature_group_name: std::option::Option<std::string::String>,
    pub(crate) record_identifier_value_as_string: std::option::Option<std::string::String>,
    pub(crate) feature_names: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl GetRecordInputBuilder {
    /// <p>The name of the feature group from which you want to retrieve a record.</p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature_group_name = Some(input.into());
        self
    }
    /// <p>The name of the feature group from which you want to retrieve a record.</p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.feature_group_name = input;
        self
    }
    /// <p>The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>. </p>
    pub fn record_identifier_value_as_string(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.record_identifier_value_as_string = Some(input.into());
        self
    }
    /// <p>The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>. </p>
    pub fn set_record_identifier_value_as_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.record_identifier_value_as_string = input;
        self
    }
    /// Appends an item to `feature_names`.
    ///
    /// To override the contents of this collection use [`set_feature_names`](Self::set_feature_names).
    ///
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn feature_names(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.feature_names.unwrap_or_default();
        v.push(input.into());
        self.feature_names = Some(v);
        self
    }
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn set_feature_names(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.feature_names = input;
        self
    }
    /// Consumes the builder and constructs a [`GetRecordInput`](crate::operation::get_record::GetRecordInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_record::GetRecordInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::get_record::GetRecordInput {
            feature_group_name: self.feature_group_name,
            record_identifier_value_as_string: self.record_identifier_value_as_string,
            feature_names: self.feature_names,
        })
    }
}
