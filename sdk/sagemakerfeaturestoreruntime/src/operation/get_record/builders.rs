// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_record::_get_record_output::GetRecordOutputBuilder;

pub use crate::operation::get_record::_get_record_input::GetRecordInputBuilder;

impl crate::operation::get_record::builders::GetRecordInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::get_record::GetRecordOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_record::GetRecordError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.get_record();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `GetRecord`.
///
/// <p>Use for <code>OnlineStore</code> serving from a <code>FeatureStore</code>. Only the latest records stored in the <code>OnlineStore</code> can be retrieved. If no Record with <code>RecordIdentifierValue</code> is found, then an empty result is returned.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct GetRecordFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_record::builders::GetRecordInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::get_record::GetRecordOutput, crate::operation::get_record::GetRecordError>
    for GetRecordFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::get_record::GetRecordOutput, crate::operation::get_record::GetRecordError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl GetRecordFluentBuilder {
    /// Creates a new `GetRecord`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the GetRecord as a reference.
    pub fn as_input(&self) -> &crate::operation::get_record::builders::GetRecordInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_record::GetRecordOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_record::GetRecordError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::get_record::GetRecord::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::get_record::GetRecord::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::get_record::GetRecordOutput,
        crate::operation::get_record::GetRecordError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the feature group from which you want to retrieve a record.</p>
    pub fn feature_group_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.feature_group_name(input.into());
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the feature group from which you want to retrieve a record.</p>
    pub fn set_feature_group_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_feature_group_name(input);
        self
    }
    /// <p>The name or Amazon Resource Name (ARN) of the feature group from which you want to retrieve a record.</p>
    pub fn get_feature_group_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_feature_group_name()
    }
    /// <p>The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>.</p>
    pub fn record_identifier_value_as_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.record_identifier_value_as_string(input.into());
        self
    }
    /// <p>The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>.</p>
    pub fn set_record_identifier_value_as_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_record_identifier_value_as_string(input);
        self
    }
    /// <p>The value that corresponds to <code>RecordIdentifier</code> type and uniquely identifies the record in the <code>FeatureGroup</code>.</p>
    pub fn get_record_identifier_value_as_string(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_record_identifier_value_as_string()
    }
    ///
    /// Appends an item to `FeatureNames`.
    ///
    /// To override the contents of this collection use [`set_feature_names`](Self::set_feature_names).
    ///
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn feature_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.feature_names(input.into());
        self
    }
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn set_feature_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_feature_names(input);
        self
    }
    /// <p>List of names of Features to be retrieved. If not specified, the latest value for all the Features are returned.</p>
    pub fn get_feature_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_feature_names()
    }
    /// <p>Parameter to request <code>ExpiresAt</code> in response. If <code>Enabled</code>, <code>GetRecord</code> will return the value of <code>ExpiresAt</code>, if it is not null. If <code>Disabled</code> and null, <code>GetRecord</code> will return null.</p>
    pub fn expiration_time_response(mut self, input: crate::types::ExpirationTimeResponse) -> Self {
        self.inner = self.inner.expiration_time_response(input);
        self
    }
    /// <p>Parameter to request <code>ExpiresAt</code> in response. If <code>Enabled</code>, <code>GetRecord</code> will return the value of <code>ExpiresAt</code>, if it is not null. If <code>Disabled</code> and null, <code>GetRecord</code> will return null.</p>
    pub fn set_expiration_time_response(mut self, input: ::std::option::Option<crate::types::ExpirationTimeResponse>) -> Self {
        self.inner = self.inner.set_expiration_time_response(input);
        self
    }
    /// <p>Parameter to request <code>ExpiresAt</code> in response. If <code>Enabled</code>, <code>GetRecord</code> will return the value of <code>ExpiresAt</code>, if it is not null. If <code>Disabled</code> and null, <code>GetRecord</code> will return null.</p>
    pub fn get_expiration_time_response(&self) -> &::std::option::Option<crate::types::ExpirationTimeResponse> {
        self.inner.get_expiration_time_response()
    }
}
