// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_record::_delete_record_output::DeleteRecordOutputBuilder;

pub use crate::operation::delete_record::_delete_record_input::DeleteRecordInputBuilder;

/// Fluent builder constructing a request to `DeleteRecord`.
///
/// <p>Deletes a <code>Record</code> from a <code>FeatureGroup</code>. When the <code>DeleteRecord</code> API is called a new record will be added to the <code>OfflineStore</code> and the <code>Record</code> will be removed from the <code>OnlineStore</code>. This record will have a value of <code>True</code> in the <code>is_deleted</code> column.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRecordFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::delete_record::builders::DeleteRecordInputBuilder,
}
impl DeleteRecordFluentBuilder {
    /// Creates a new `DeleteRecord`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_record::DeleteRecord,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::delete_record::DeleteRecordError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_record::DeleteRecordOutput,
        aws_smithy_http::result::SdkError<crate::operation::delete_record::DeleteRecordError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The name of the feature group to delete the record from. </p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.feature_group_name(input.into());
        self
    }
    /// <p>The name of the feature group to delete the record from. </p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_feature_group_name(input);
        self
    }
    /// <p>The value for the <code>RecordIdentifier</code> that uniquely identifies the record, in string format. </p>
    pub fn record_identifier_value_as_string(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.record_identifier_value_as_string(input.into());
        self
    }
    /// <p>The value for the <code>RecordIdentifier</code> that uniquely identifies the record, in string format. </p>
    pub fn set_record_identifier_value_as_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_record_identifier_value_as_string(input);
        self
    }
    /// <p>Timestamp indicating when the deletion event occurred. <code>EventTime</code> can be used to query data at a certain point in time.</p>
    pub fn event_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.event_time(input.into());
        self
    }
    /// <p>Timestamp indicating when the deletion event occurred. <code>EventTime</code> can be used to query data at a certain point in time.</p>
    pub fn set_event_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_event_time(input);
        self
    }
    /// Appends an item to `TargetStores`.
    ///
    /// To override the contents of this collection use [`set_target_stores`](Self::set_target_stores).
    ///
    /// <p>A list of stores from which you're deleting the record. By default, Feature Store deletes the record from all of the stores that you're using for the <code>FeatureGroup</code>.</p>
    pub fn target_stores(mut self, input: crate::types::TargetStore) -> Self {
        self.inner = self.inner.target_stores(input);
        self
    }
    /// <p>A list of stores from which you're deleting the record. By default, Feature Store deletes the record from all of the stores that you're using for the <code>FeatureGroup</code>.</p>
    pub fn set_target_stores(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TargetStore>>,
    ) -> Self {
        self.inner = self.inner.set_target_stores(input);
        self
    }
}
