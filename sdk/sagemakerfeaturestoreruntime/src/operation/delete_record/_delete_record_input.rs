// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteRecordInput {
    /// <p>The name of the feature group to delete the record from. </p>
    #[doc(hidden)]
    pub feature_group_name: std::option::Option<std::string::String>,
    /// <p>The value for the <code>RecordIdentifier</code> that uniquely identifies the record, in string format. </p>
    #[doc(hidden)]
    pub record_identifier_value_as_string: std::option::Option<std::string::String>,
    /// <p>Timestamp indicating when the deletion event occurred. <code>EventTime</code> can be used to query data at a certain point in time.</p>
    #[doc(hidden)]
    pub event_time: std::option::Option<std::string::String>,
    /// <p>A list of stores from which you're deleting the record. By default, Feature Store deletes the record from all of the stores that you're using for the <code>FeatureGroup</code>.</p>
    #[doc(hidden)]
    pub target_stores: std::option::Option<std::vec::Vec<crate::types::TargetStore>>,
}
impl DeleteRecordInput {
    /// <p>The name of the feature group to delete the record from. </p>
    pub fn feature_group_name(&self) -> std::option::Option<&str> {
        self.feature_group_name.as_deref()
    }
    /// <p>The value for the <code>RecordIdentifier</code> that uniquely identifies the record, in string format. </p>
    pub fn record_identifier_value_as_string(&self) -> std::option::Option<&str> {
        self.record_identifier_value_as_string.as_deref()
    }
    /// <p>Timestamp indicating when the deletion event occurred. <code>EventTime</code> can be used to query data at a certain point in time.</p>
    pub fn event_time(&self) -> std::option::Option<&str> {
        self.event_time.as_deref()
    }
    /// <p>A list of stores from which you're deleting the record. By default, Feature Store deletes the record from all of the stores that you're using for the <code>FeatureGroup</code>.</p>
    pub fn target_stores(&self) -> std::option::Option<&[crate::types::TargetStore]> {
        self.target_stores.as_deref()
    }
}
impl DeleteRecordInput {
    /// Creates a new builder-style object to manufacture [`DeleteRecordInput`](crate::operation::delete_record::DeleteRecordInput).
    pub fn builder() -> crate::operation::delete_record::builders::DeleteRecordInputBuilder {
        crate::operation::delete_record::builders::DeleteRecordInputBuilder::default()
    }
}

/// A builder for [`DeleteRecordInput`](crate::operation::delete_record::DeleteRecordInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteRecordInputBuilder {
    pub(crate) feature_group_name: std::option::Option<std::string::String>,
    pub(crate) record_identifier_value_as_string: std::option::Option<std::string::String>,
    pub(crate) event_time: std::option::Option<std::string::String>,
    pub(crate) target_stores: std::option::Option<std::vec::Vec<crate::types::TargetStore>>,
}
impl DeleteRecordInputBuilder {
    /// <p>The name of the feature group to delete the record from. </p>
    pub fn feature_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.feature_group_name = Some(input.into());
        self
    }
    /// <p>The name of the feature group to delete the record from. </p>
    pub fn set_feature_group_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.feature_group_name = input;
        self
    }
    /// <p>The value for the <code>RecordIdentifier</code> that uniquely identifies the record, in string format. </p>
    pub fn record_identifier_value_as_string(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.record_identifier_value_as_string = Some(input.into());
        self
    }
    /// <p>The value for the <code>RecordIdentifier</code> that uniquely identifies the record, in string format. </p>
    pub fn set_record_identifier_value_as_string(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.record_identifier_value_as_string = input;
        self
    }
    /// <p>Timestamp indicating when the deletion event occurred. <code>EventTime</code> can be used to query data at a certain point in time.</p>
    pub fn event_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_time = Some(input.into());
        self
    }
    /// <p>Timestamp indicating when the deletion event occurred. <code>EventTime</code> can be used to query data at a certain point in time.</p>
    pub fn set_event_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_time = input;
        self
    }
    /// Appends an item to `target_stores`.
    ///
    /// To override the contents of this collection use [`set_target_stores`](Self::set_target_stores).
    ///
    /// <p>A list of stores from which you're deleting the record. By default, Feature Store deletes the record from all of the stores that you're using for the <code>FeatureGroup</code>.</p>
    pub fn target_stores(mut self, input: crate::types::TargetStore) -> Self {
        let mut v = self.target_stores.unwrap_or_default();
        v.push(input);
        self.target_stores = Some(v);
        self
    }
    /// <p>A list of stores from which you're deleting the record. By default, Feature Store deletes the record from all of the stores that you're using for the <code>FeatureGroup</code>.</p>
    pub fn set_target_stores(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TargetStore>>,
    ) -> Self {
        self.target_stores = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteRecordInput`](crate::operation::delete_record::DeleteRecordInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_record::DeleteRecordInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::delete_record::DeleteRecordInput {
            feature_group_name: self.feature_group_name,
            record_identifier_value_as_string: self.record_identifier_value_as_string,
            event_time: self.event_time,
            target_stores: self.target_stores,
        })
    }
}
