// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// <p>Retrieves a batch of <code>Records</code> from a <code>FeatureGroup</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct BatchGetRecord {
    _private: (),
}
impl BatchGetRecord {
    /// Creates a new builder-style object to manufacture [`BatchGetRecordInput`](crate::input::BatchGetRecordInput)
    pub fn builder() -> crate::input::batch_get_record_input::Builder {
        crate::input::batch_get_record_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for BatchGetRecord {
    type Output =
        std::result::Result<crate::output::BatchGetRecordOutput, crate::error::BatchGetRecordError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_batch_get_record_error(response)
        } else {
            crate::operation_deser::parse_batch_get_record_response(response)
        }
    }
}

/// <p>Deletes a <code>Record</code> from a <code>FeatureGroup</code>. A new record will show
/// up in the <code>OfflineStore</code> when the <code>DeleteRecord</code> API is called. This
/// record will have a value of <code>True</code> in the <code>is_deleted</code> column.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteRecord {
    _private: (),
}
impl DeleteRecord {
    /// Creates a new builder-style object to manufacture [`DeleteRecordInput`](crate::input::DeleteRecordInput)
    pub fn builder() -> crate::input::delete_record_input::Builder {
        crate::input::delete_record_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for DeleteRecord {
    type Output =
        std::result::Result<crate::output::DeleteRecordOutput, crate::error::DeleteRecordError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_delete_record_error(response)
        } else {
            crate::operation_deser::parse_delete_record_response(response)
        }
    }
}

/// <p>Use for <code>OnlineStore</code> serving from a <code>FeatureStore</code>. Only the
/// latest records stored in the <code>OnlineStore</code> can be retrieved. If no Record with
/// <code>RecordIdentifierValue</code> is found, then an empty result is returned. </p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRecord {
    _private: (),
}
impl GetRecord {
    /// Creates a new builder-style object to manufacture [`GetRecordInput`](crate::input::GetRecordInput)
    pub fn builder() -> crate::input::get_record_input::Builder {
        crate::input::get_record_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for GetRecord {
    type Output = std::result::Result<crate::output::GetRecordOutput, crate::error::GetRecordError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_get_record_error(response)
        } else {
            crate::operation_deser::parse_get_record_response(response)
        }
    }
}

/// <p>Used for data ingestion into the <code>FeatureStore</code>. The <code>PutRecord</code>
/// API writes to both the <code>OnlineStore</code> and <code>OfflineStore</code>. If the
/// record is the latest record for the <code>recordIdentifier</code>, the record is written to
/// both the <code>OnlineStore</code> and <code>OfflineStore</code>. If the record is a
/// historic record, it is written only to the <code>OfflineStore</code>.</p>
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct PutRecord {
    _private: (),
}
impl PutRecord {
    /// Creates a new builder-style object to manufacture [`PutRecordInput`](crate::input::PutRecordInput)
    pub fn builder() -> crate::input::put_record_input::Builder {
        crate::input::put_record_input::Builder::default()
    }
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl smithy_http::response::ParseStrictResponse for PutRecord {
    type Output = std::result::Result<crate::output::PutRecordOutput, crate::error::PutRecordError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::operation_deser::parse_put_record_error(response)
        } else {
            crate::operation_deser::parse_put_record_response(response)
        }
    }
}
