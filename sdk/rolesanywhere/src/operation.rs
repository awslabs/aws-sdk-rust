// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_profile`](crate::client::fluent_builders::CreateProfile).
///
/// `ParseStrictResponse` impl for `CreateProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateProfile {
    _private: (),
}
impl CreateProfile {
    /// Creates a new builder-style object to manufacture [`CreateProfileInput`](crate::input::CreateProfileInput).
    pub fn builder() -> crate::input::create_profile_input::Builder {
        crate::input::create_profile_input::Builder::default()
    }
    /// Creates a new `CreateProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateProfile {
    type Output =
        std::result::Result<crate::output::CreateProfileOutput, crate::error::CreateProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_profile::de_create_profile_http_error(response)
        } else {
            crate::protocol_serde::shape_create_profile::de_create_profile_http_response(response)
        }
    }
}

/// Operation shape for `CreateTrustAnchor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_trust_anchor`](crate::client::fluent_builders::CreateTrustAnchor).
///
/// `ParseStrictResponse` impl for `CreateTrustAnchor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateTrustAnchor {
    _private: (),
}
impl CreateTrustAnchor {
    /// Creates a new builder-style object to manufacture [`CreateTrustAnchorInput`](crate::input::CreateTrustAnchorInput).
    pub fn builder() -> crate::input::create_trust_anchor_input::Builder {
        crate::input::create_trust_anchor_input::Builder::default()
    }
    /// Creates a new `CreateTrustAnchor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateTrustAnchor {
    type Output = std::result::Result<
        crate::output::CreateTrustAnchorOutput,
        crate::error::CreateTrustAnchorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_trust_anchor::de_create_trust_anchor_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_create_trust_anchor::de_create_trust_anchor_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DeleteCrl`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_crl`](crate::client::fluent_builders::DeleteCrl).
///
/// `ParseStrictResponse` impl for `DeleteCrl`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteCrl {
    _private: (),
}
impl DeleteCrl {
    /// Creates a new builder-style object to manufacture [`DeleteCrlInput`](crate::input::DeleteCrlInput).
    pub fn builder() -> crate::input::delete_crl_input::Builder {
        crate::input::delete_crl_input::Builder::default()
    }
    /// Creates a new `DeleteCrl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteCrl {
    type Output = std::result::Result<crate::output::DeleteCrlOutput, crate::error::DeleteCrlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_crl::de_delete_crl_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_crl::de_delete_crl_http_response(response)
        }
    }
}

/// Operation shape for `DeleteProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_profile`](crate::client::fluent_builders::DeleteProfile).
///
/// `ParseStrictResponse` impl for `DeleteProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteProfile {
    _private: (),
}
impl DeleteProfile {
    /// Creates a new builder-style object to manufacture [`DeleteProfileInput`](crate::input::DeleteProfileInput).
    pub fn builder() -> crate::input::delete_profile_input::Builder {
        crate::input::delete_profile_input::Builder::default()
    }
    /// Creates a new `DeleteProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteProfile {
    type Output =
        std::result::Result<crate::output::DeleteProfileOutput, crate::error::DeleteProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_profile::de_delete_profile_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_profile::de_delete_profile_http_response(response)
        }
    }
}

/// Operation shape for `DeleteTrustAnchor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_trust_anchor`](crate::client::fluent_builders::DeleteTrustAnchor).
///
/// `ParseStrictResponse` impl for `DeleteTrustAnchor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteTrustAnchor {
    _private: (),
}
impl DeleteTrustAnchor {
    /// Creates a new builder-style object to manufacture [`DeleteTrustAnchorInput`](crate::input::DeleteTrustAnchorInput).
    pub fn builder() -> crate::input::delete_trust_anchor_input::Builder {
        crate::input::delete_trust_anchor_input::Builder::default()
    }
    /// Creates a new `DeleteTrustAnchor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteTrustAnchor {
    type Output = std::result::Result<
        crate::output::DeleteTrustAnchorOutput,
        crate::error::DeleteTrustAnchorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_trust_anchor::de_delete_trust_anchor_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_trust_anchor::de_delete_trust_anchor_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DisableCrl`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_crl`](crate::client::fluent_builders::DisableCrl).
///
/// `ParseStrictResponse` impl for `DisableCrl`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableCrl {
    _private: (),
}
impl DisableCrl {
    /// Creates a new builder-style object to manufacture [`DisableCrlInput`](crate::input::DisableCrlInput).
    pub fn builder() -> crate::input::disable_crl_input::Builder {
        crate::input::disable_crl_input::Builder::default()
    }
    /// Creates a new `DisableCrl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableCrl {
    type Output =
        std::result::Result<crate::output::DisableCrlOutput, crate::error::DisableCrlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_crl::de_disable_crl_http_error(response)
        } else {
            crate::protocol_serde::shape_disable_crl::de_disable_crl_http_response(response)
        }
    }
}

/// Operation shape for `DisableProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_profile`](crate::client::fluent_builders::DisableProfile).
///
/// `ParseStrictResponse` impl for `DisableProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableProfile {
    _private: (),
}
impl DisableProfile {
    /// Creates a new builder-style object to manufacture [`DisableProfileInput`](crate::input::DisableProfileInput).
    pub fn builder() -> crate::input::disable_profile_input::Builder {
        crate::input::disable_profile_input::Builder::default()
    }
    /// Creates a new `DisableProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableProfile {
    type Output =
        std::result::Result<crate::output::DisableProfileOutput, crate::error::DisableProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_profile::de_disable_profile_http_error(response)
        } else {
            crate::protocol_serde::shape_disable_profile::de_disable_profile_http_response(response)
        }
    }
}

/// Operation shape for `DisableTrustAnchor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disable_trust_anchor`](crate::client::fluent_builders::DisableTrustAnchor).
///
/// `ParseStrictResponse` impl for `DisableTrustAnchor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisableTrustAnchor {
    _private: (),
}
impl DisableTrustAnchor {
    /// Creates a new builder-style object to manufacture [`DisableTrustAnchorInput`](crate::input::DisableTrustAnchorInput).
    pub fn builder() -> crate::input::disable_trust_anchor_input::Builder {
        crate::input::disable_trust_anchor_input::Builder::default()
    }
    /// Creates a new `DisableTrustAnchor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisableTrustAnchor {
    type Output = std::result::Result<
        crate::output::DisableTrustAnchorOutput,
        crate::error::DisableTrustAnchorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disable_trust_anchor::de_disable_trust_anchor_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_disable_trust_anchor::de_disable_trust_anchor_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `EnableCrl`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_crl`](crate::client::fluent_builders::EnableCrl).
///
/// `ParseStrictResponse` impl for `EnableCrl`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableCrl {
    _private: (),
}
impl EnableCrl {
    /// Creates a new builder-style object to manufacture [`EnableCrlInput`](crate::input::EnableCrlInput).
    pub fn builder() -> crate::input::enable_crl_input::Builder {
        crate::input::enable_crl_input::Builder::default()
    }
    /// Creates a new `EnableCrl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableCrl {
    type Output = std::result::Result<crate::output::EnableCrlOutput, crate::error::EnableCrlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_crl::de_enable_crl_http_error(response)
        } else {
            crate::protocol_serde::shape_enable_crl::de_enable_crl_http_response(response)
        }
    }
}

/// Operation shape for `EnableProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_profile`](crate::client::fluent_builders::EnableProfile).
///
/// `ParseStrictResponse` impl for `EnableProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableProfile {
    _private: (),
}
impl EnableProfile {
    /// Creates a new builder-style object to manufacture [`EnableProfileInput`](crate::input::EnableProfileInput).
    pub fn builder() -> crate::input::enable_profile_input::Builder {
        crate::input::enable_profile_input::Builder::default()
    }
    /// Creates a new `EnableProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableProfile {
    type Output =
        std::result::Result<crate::output::EnableProfileOutput, crate::error::EnableProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_profile::de_enable_profile_http_error(response)
        } else {
            crate::protocol_serde::shape_enable_profile::de_enable_profile_http_response(response)
        }
    }
}

/// Operation shape for `EnableTrustAnchor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`enable_trust_anchor`](crate::client::fluent_builders::EnableTrustAnchor).
///
/// `ParseStrictResponse` impl for `EnableTrustAnchor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct EnableTrustAnchor {
    _private: (),
}
impl EnableTrustAnchor {
    /// Creates a new builder-style object to manufacture [`EnableTrustAnchorInput`](crate::input::EnableTrustAnchorInput).
    pub fn builder() -> crate::input::enable_trust_anchor_input::Builder {
        crate::input::enable_trust_anchor_input::Builder::default()
    }
    /// Creates a new `EnableTrustAnchor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for EnableTrustAnchor {
    type Output = std::result::Result<
        crate::output::EnableTrustAnchorOutput,
        crate::error::EnableTrustAnchorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_enable_trust_anchor::de_enable_trust_anchor_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_enable_trust_anchor::de_enable_trust_anchor_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `GetCrl`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_crl`](crate::client::fluent_builders::GetCrl).
///
/// `ParseStrictResponse` impl for `GetCrl`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetCrl {
    _private: (),
}
impl GetCrl {
    /// Creates a new builder-style object to manufacture [`GetCrlInput`](crate::input::GetCrlInput).
    pub fn builder() -> crate::input::get_crl_input::Builder {
        crate::input::get_crl_input::Builder::default()
    }
    /// Creates a new `GetCrl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetCrl {
    type Output = std::result::Result<crate::output::GetCrlOutput, crate::error::GetCrlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_crl::de_get_crl_http_error(response)
        } else {
            crate::protocol_serde::shape_get_crl::de_get_crl_http_response(response)
        }
    }
}

/// Operation shape for `GetProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_profile`](crate::client::fluent_builders::GetProfile).
///
/// `ParseStrictResponse` impl for `GetProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetProfile {
    _private: (),
}
impl GetProfile {
    /// Creates a new builder-style object to manufacture [`GetProfileInput`](crate::input::GetProfileInput).
    pub fn builder() -> crate::input::get_profile_input::Builder {
        crate::input::get_profile_input::Builder::default()
    }
    /// Creates a new `GetProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetProfile {
    type Output =
        std::result::Result<crate::output::GetProfileOutput, crate::error::GetProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_profile::de_get_profile_http_error(response)
        } else {
            crate::protocol_serde::shape_get_profile::de_get_profile_http_response(response)
        }
    }
}

/// Operation shape for `GetSubject`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_subject`](crate::client::fluent_builders::GetSubject).
///
/// `ParseStrictResponse` impl for `GetSubject`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetSubject {
    _private: (),
}
impl GetSubject {
    /// Creates a new builder-style object to manufacture [`GetSubjectInput`](crate::input::GetSubjectInput).
    pub fn builder() -> crate::input::get_subject_input::Builder {
        crate::input::get_subject_input::Builder::default()
    }
    /// Creates a new `GetSubject` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetSubject {
    type Output =
        std::result::Result<crate::output::GetSubjectOutput, crate::error::GetSubjectError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_subject::de_get_subject_http_error(response)
        } else {
            crate::protocol_serde::shape_get_subject::de_get_subject_http_response(response)
        }
    }
}

/// Operation shape for `GetTrustAnchor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_trust_anchor`](crate::client::fluent_builders::GetTrustAnchor).
///
/// `ParseStrictResponse` impl for `GetTrustAnchor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetTrustAnchor {
    _private: (),
}
impl GetTrustAnchor {
    /// Creates a new builder-style object to manufacture [`GetTrustAnchorInput`](crate::input::GetTrustAnchorInput).
    pub fn builder() -> crate::input::get_trust_anchor_input::Builder {
        crate::input::get_trust_anchor_input::Builder::default()
    }
    /// Creates a new `GetTrustAnchor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetTrustAnchor {
    type Output =
        std::result::Result<crate::output::GetTrustAnchorOutput, crate::error::GetTrustAnchorError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_trust_anchor::de_get_trust_anchor_http_error(response)
        } else {
            crate::protocol_serde::shape_get_trust_anchor::de_get_trust_anchor_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ImportCrl`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`import_crl`](crate::client::fluent_builders::ImportCrl).
///
/// `ParseStrictResponse` impl for `ImportCrl`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ImportCrl {
    _private: (),
}
impl ImportCrl {
    /// Creates a new builder-style object to manufacture [`ImportCrlInput`](crate::input::ImportCrlInput).
    pub fn builder() -> crate::input::import_crl_input::Builder {
        crate::input::import_crl_input::Builder::default()
    }
    /// Creates a new `ImportCrl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ImportCrl {
    type Output = std::result::Result<crate::output::ImportCrlOutput, crate::error::ImportCrlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_import_crl::de_import_crl_http_error(response)
        } else {
            crate::protocol_serde::shape_import_crl::de_import_crl_http_response(response)
        }
    }
}

/// Operation shape for `ListCrls`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_crls`](crate::client::fluent_builders::ListCrls).
///
/// `ParseStrictResponse` impl for `ListCrls`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListCrls {
    _private: (),
}
impl ListCrls {
    /// Creates a new builder-style object to manufacture [`ListCrlsInput`](crate::input::ListCrlsInput).
    pub fn builder() -> crate::input::list_crls_input::Builder {
        crate::input::list_crls_input::Builder::default()
    }
    /// Creates a new `ListCrls` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListCrls {
    type Output = std::result::Result<crate::output::ListCrlsOutput, crate::error::ListCrlsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_crls::de_list_crls_http_error(response)
        } else {
            crate::protocol_serde::shape_list_crls::de_list_crls_http_response(response)
        }
    }
}

/// Operation shape for `ListProfiles`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_profiles`](crate::client::fluent_builders::ListProfiles).
///
/// `ParseStrictResponse` impl for `ListProfiles`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListProfiles {
    _private: (),
}
impl ListProfiles {
    /// Creates a new builder-style object to manufacture [`ListProfilesInput`](crate::input::ListProfilesInput).
    pub fn builder() -> crate::input::list_profiles_input::Builder {
        crate::input::list_profiles_input::Builder::default()
    }
    /// Creates a new `ListProfiles` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListProfiles {
    type Output =
        std::result::Result<crate::output::ListProfilesOutput, crate::error::ListProfilesError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_profiles::de_list_profiles_http_error(response)
        } else {
            crate::protocol_serde::shape_list_profiles::de_list_profiles_http_response(response)
        }
    }
}

/// Operation shape for `ListSubjects`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_subjects`](crate::client::fluent_builders::ListSubjects).
///
/// `ParseStrictResponse` impl for `ListSubjects`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListSubjects {
    _private: (),
}
impl ListSubjects {
    /// Creates a new builder-style object to manufacture [`ListSubjectsInput`](crate::input::ListSubjectsInput).
    pub fn builder() -> crate::input::list_subjects_input::Builder {
        crate::input::list_subjects_input::Builder::default()
    }
    /// Creates a new `ListSubjects` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListSubjects {
    type Output =
        std::result::Result<crate::output::ListSubjectsOutput, crate::error::ListSubjectsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_subjects::de_list_subjects_http_error(response)
        } else {
            crate::protocol_serde::shape_list_subjects::de_list_subjects_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `ListTrustAnchors`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_trust_anchors`](crate::client::fluent_builders::ListTrustAnchors).
///
/// `ParseStrictResponse` impl for `ListTrustAnchors`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTrustAnchors {
    _private: (),
}
impl ListTrustAnchors {
    /// Creates a new builder-style object to manufacture [`ListTrustAnchorsInput`](crate::input::ListTrustAnchorsInput).
    pub fn builder() -> crate::input::list_trust_anchors_input::Builder {
        crate::input::list_trust_anchors_input::Builder::default()
    }
    /// Creates a new `ListTrustAnchors` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTrustAnchors {
    type Output = std::result::Result<
        crate::output::ListTrustAnchorsOutput,
        crate::error::ListTrustAnchorsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_trust_anchors::de_list_trust_anchors_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_trust_anchors::de_list_trust_anchors_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateCrl`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_crl`](crate::client::fluent_builders::UpdateCrl).
///
/// `ParseStrictResponse` impl for `UpdateCrl`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateCrl {
    _private: (),
}
impl UpdateCrl {
    /// Creates a new builder-style object to manufacture [`UpdateCrlInput`](crate::input::UpdateCrlInput).
    pub fn builder() -> crate::input::update_crl_input::Builder {
        crate::input::update_crl_input::Builder::default()
    }
    /// Creates a new `UpdateCrl` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateCrl {
    type Output = std::result::Result<crate::output::UpdateCrlOutput, crate::error::UpdateCrlError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_crl::de_update_crl_http_error(response)
        } else {
            crate::protocol_serde::shape_update_crl::de_update_crl_http_response(response)
        }
    }
}

/// Operation shape for `UpdateProfile`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_profile`](crate::client::fluent_builders::UpdateProfile).
///
/// `ParseStrictResponse` impl for `UpdateProfile`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateProfile {
    _private: (),
}
impl UpdateProfile {
    /// Creates a new builder-style object to manufacture [`UpdateProfileInput`](crate::input::UpdateProfileInput).
    pub fn builder() -> crate::input::update_profile_input::Builder {
        crate::input::update_profile_input::Builder::default()
    }
    /// Creates a new `UpdateProfile` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateProfile {
    type Output =
        std::result::Result<crate::output::UpdateProfileOutput, crate::error::UpdateProfileError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_profile::de_update_profile_http_error(response)
        } else {
            crate::protocol_serde::shape_update_profile::de_update_profile_http_response(response)
        }
    }
}

/// Operation shape for `UpdateTrustAnchor`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_trust_anchor`](crate::client::fluent_builders::UpdateTrustAnchor).
///
/// `ParseStrictResponse` impl for `UpdateTrustAnchor`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateTrustAnchor {
    _private: (),
}
impl UpdateTrustAnchor {
    /// Creates a new builder-style object to manufacture [`UpdateTrustAnchorInput`](crate::input::UpdateTrustAnchorInput).
    pub fn builder() -> crate::input::update_trust_anchor_input::Builder {
        crate::input::update_trust_anchor_input::Builder::default()
    }
    /// Creates a new `UpdateTrustAnchor` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateTrustAnchor {
    type Output = std::result::Result<
        crate::output::UpdateTrustAnchorOutput,
        crate::error::UpdateTrustAnchorError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_trust_anchor::de_update_trust_anchor_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_update_trust_anchor::de_update_trust_anchor_http_response(
                response,
            )
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
