// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The state of the subject after a read or write operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SubjectDetail {
    /// <p>The ARN of the resource.</p>
    #[doc(hidden)]
    pub subject_arn: std::option::Option<std::string::String>,
    /// <p>The id of the resource</p>
    #[doc(hidden)]
    pub subject_id: std::option::Option<std::string::String>,
    /// <p>The enabled status of the subject.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>The x509 principal identifier of the authenticating certificate.</p>
    #[doc(hidden)]
    pub x509_subject: std::option::Option<std::string::String>,
    /// <p>The ISO-8601 timestamp of the last time this Subject requested temporary session credentials.</p>
    #[doc(hidden)]
    pub last_seen_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ISO-8601 timestamp when the subject was created. </p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The ISO-8601 timestamp when the subject was last updated.</p>
    #[doc(hidden)]
    pub updated_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The temporary session credentials vended at the last authenticating call with this Subject.</p>
    #[doc(hidden)]
    pub credentials: std::option::Option<std::vec::Vec<crate::types::CredentialSummary>>,
    /// <p>The specified instance properties associated with the request.</p>
    #[doc(hidden)]
    pub instance_properties: std::option::Option<std::vec::Vec<crate::types::InstanceProperty>>,
}
impl SubjectDetail {
    /// <p>The ARN of the resource.</p>
    pub fn subject_arn(&self) -> std::option::Option<&str> {
        self.subject_arn.as_deref()
    }
    /// <p>The id of the resource</p>
    pub fn subject_id(&self) -> std::option::Option<&str> {
        self.subject_id.as_deref()
    }
    /// <p>The enabled status of the subject.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>The x509 principal identifier of the authenticating certificate.</p>
    pub fn x509_subject(&self) -> std::option::Option<&str> {
        self.x509_subject.as_deref()
    }
    /// <p>The ISO-8601 timestamp of the last time this Subject requested temporary session credentials.</p>
    pub fn last_seen_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_seen_at.as_ref()
    }
    /// <p>The ISO-8601 timestamp when the subject was created. </p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The ISO-8601 timestamp when the subject was last updated.</p>
    pub fn updated_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p>The temporary session credentials vended at the last authenticating call with this Subject.</p>
    pub fn credentials(&self) -> std::option::Option<&[crate::types::CredentialSummary]> {
        self.credentials.as_deref()
    }
    /// <p>The specified instance properties associated with the request.</p>
    pub fn instance_properties(&self) -> std::option::Option<&[crate::types::InstanceProperty]> {
        self.instance_properties.as_deref()
    }
}
impl SubjectDetail {
    /// Creates a new builder-style object to manufacture [`SubjectDetail`](crate::types::SubjectDetail).
    pub fn builder() -> crate::types::builders::SubjectDetailBuilder {
        crate::types::builders::SubjectDetailBuilder::default()
    }
}

/// A builder for [`SubjectDetail`](crate::types::SubjectDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SubjectDetailBuilder {
    pub(crate) subject_arn: std::option::Option<std::string::String>,
    pub(crate) subject_id: std::option::Option<std::string::String>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) x509_subject: std::option::Option<std::string::String>,
    pub(crate) last_seen_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) updated_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) credentials: std::option::Option<std::vec::Vec<crate::types::CredentialSummary>>,
    pub(crate) instance_properties:
        std::option::Option<std::vec::Vec<crate::types::InstanceProperty>>,
}
impl SubjectDetailBuilder {
    /// <p>The ARN of the resource.</p>
    pub fn subject_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.subject_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the resource.</p>
    pub fn set_subject_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subject_arn = input;
        self
    }
    /// <p>The id of the resource</p>
    pub fn subject_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.subject_id = Some(input.into());
        self
    }
    /// <p>The id of the resource</p>
    pub fn set_subject_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.subject_id = input;
        self
    }
    /// <p>The enabled status of the subject.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>The enabled status of the subject.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The x509 principal identifier of the authenticating certificate.</p>
    pub fn x509_subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.x509_subject = Some(input.into());
        self
    }
    /// <p>The x509 principal identifier of the authenticating certificate.</p>
    pub fn set_x509_subject(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.x509_subject = input;
        self
    }
    /// <p>The ISO-8601 timestamp of the last time this Subject requested temporary session credentials.</p>
    pub fn last_seen_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_seen_at = Some(input);
        self
    }
    /// <p>The ISO-8601 timestamp of the last time this Subject requested temporary session credentials.</p>
    pub fn set_last_seen_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_seen_at = input;
        self
    }
    /// <p>The ISO-8601 timestamp when the subject was created. </p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The ISO-8601 timestamp when the subject was created. </p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The ISO-8601 timestamp when the subject was last updated.</p>
    pub fn updated_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.updated_at = Some(input);
        self
    }
    /// <p>The ISO-8601 timestamp when the subject was last updated.</p>
    pub fn set_updated_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.updated_at = input;
        self
    }
    /// Appends an item to `credentials`.
    ///
    /// To override the contents of this collection use [`set_credentials`](Self::set_credentials).
    ///
    /// <p>The temporary session credentials vended at the last authenticating call with this Subject.</p>
    pub fn credentials(mut self, input: crate::types::CredentialSummary) -> Self {
        let mut v = self.credentials.unwrap_or_default();
        v.push(input);
        self.credentials = Some(v);
        self
    }
    /// <p>The temporary session credentials vended at the last authenticating call with this Subject.</p>
    pub fn set_credentials(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::CredentialSummary>>,
    ) -> Self {
        self.credentials = input;
        self
    }
    /// Appends an item to `instance_properties`.
    ///
    /// To override the contents of this collection use [`set_instance_properties`](Self::set_instance_properties).
    ///
    /// <p>The specified instance properties associated with the request.</p>
    pub fn instance_properties(mut self, input: crate::types::InstanceProperty) -> Self {
        let mut v = self.instance_properties.unwrap_or_default();
        v.push(input);
        self.instance_properties = Some(v);
        self
    }
    /// <p>The specified instance properties associated with the request.</p>
    pub fn set_instance_properties(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::InstanceProperty>>,
    ) -> Self {
        self.instance_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`SubjectDetail`](crate::types::SubjectDetail).
    pub fn build(self) -> crate::types::SubjectDetail {
        crate::types::SubjectDetail {
            subject_arn: self.subject_arn,
            subject_id: self.subject_id,
            enabled: self.enabled,
            x509_subject: self.x509_subject,
            last_seen_at: self.last_seen_at,
            created_at: self.created_at,
            updated_at: self.updated_at,
            credentials: self.credentials,
            instance_properties: self.instance_properties,
        }
    }
}
