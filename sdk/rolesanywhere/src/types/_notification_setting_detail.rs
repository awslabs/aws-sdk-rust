// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The state of a notification setting.</p>
/// <p>A notification setting includes information such as event name, threshold, status of the notification setting, and the channel to notify.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotificationSettingDetail {
    /// <p>Indicates whether the notification setting is enabled.</p>
    pub enabled: bool,
    /// <p>The event to which this notification setting is applied.</p>
    pub event: crate::types::NotificationEvent,
    /// <p>The number of days before a notification event.</p>
    pub threshold: ::std::option::Option<i32>,
    /// <p>The specified channel of notification. IAM Roles Anywhere uses CloudWatch metrics, EventBridge, and Health Dashboard to notify for an event.</p> <note>
    /// <p>In the absence of a specific channel, IAM Roles Anywhere applies this setting to 'ALL' channels.</p>
    /// </note>
    pub channel: ::std::option::Option<crate::types::NotificationChannel>,
    /// <p>The principal that configured the notification setting. For default settings configured by IAM Roles Anywhere, the value is <code>rolesanywhere.amazonaws.com</code>, and for customized notifications settings, it is the respective account ID. </p>
    pub configured_by: ::std::option::Option<::std::string::String>,
}
impl NotificationSettingDetail {
    /// <p>Indicates whether the notification setting is enabled.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The event to which this notification setting is applied.</p>
    pub fn event(&self) -> &crate::types::NotificationEvent {
        &self.event
    }
    /// <p>The number of days before a notification event.</p>
    pub fn threshold(&self) -> ::std::option::Option<i32> {
        self.threshold
    }
    /// <p>The specified channel of notification. IAM Roles Anywhere uses CloudWatch metrics, EventBridge, and Health Dashboard to notify for an event.</p> <note>
    /// <p>In the absence of a specific channel, IAM Roles Anywhere applies this setting to 'ALL' channels.</p>
    /// </note>
    pub fn channel(&self) -> ::std::option::Option<&crate::types::NotificationChannel> {
        self.channel.as_ref()
    }
    /// <p>The principal that configured the notification setting. For default settings configured by IAM Roles Anywhere, the value is <code>rolesanywhere.amazonaws.com</code>, and for customized notifications settings, it is the respective account ID. </p>
    pub fn configured_by(&self) -> ::std::option::Option<&str> {
        self.configured_by.as_deref()
    }
}
impl NotificationSettingDetail {
    /// Creates a new builder-style object to manufacture [`NotificationSettingDetail`](crate::types::NotificationSettingDetail).
    pub fn builder() -> crate::types::builders::NotificationSettingDetailBuilder {
        crate::types::builders::NotificationSettingDetailBuilder::default()
    }
}

/// A builder for [`NotificationSettingDetail`](crate::types::NotificationSettingDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NotificationSettingDetailBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) event: ::std::option::Option<crate::types::NotificationEvent>,
    pub(crate) threshold: ::std::option::Option<i32>,
    pub(crate) channel: ::std::option::Option<crate::types::NotificationChannel>,
    pub(crate) configured_by: ::std::option::Option<::std::string::String>,
}
impl NotificationSettingDetailBuilder {
    /// <p>Indicates whether the notification setting is enabled.</p>
    /// This field is required.
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the notification setting is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether the notification setting is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The event to which this notification setting is applied.</p>
    /// This field is required.
    pub fn event(mut self, input: crate::types::NotificationEvent) -> Self {
        self.event = ::std::option::Option::Some(input);
        self
    }
    /// <p>The event to which this notification setting is applied.</p>
    pub fn set_event(mut self, input: ::std::option::Option<crate::types::NotificationEvent>) -> Self {
        self.event = input;
        self
    }
    /// <p>The event to which this notification setting is applied.</p>
    pub fn get_event(&self) -> &::std::option::Option<crate::types::NotificationEvent> {
        &self.event
    }
    /// <p>The number of days before a notification event.</p>
    pub fn threshold(mut self, input: i32) -> Self {
        self.threshold = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of days before a notification event.</p>
    pub fn set_threshold(mut self, input: ::std::option::Option<i32>) -> Self {
        self.threshold = input;
        self
    }
    /// <p>The number of days before a notification event.</p>
    pub fn get_threshold(&self) -> &::std::option::Option<i32> {
        &self.threshold
    }
    /// <p>The specified channel of notification. IAM Roles Anywhere uses CloudWatch metrics, EventBridge, and Health Dashboard to notify for an event.</p> <note>
    /// <p>In the absence of a specific channel, IAM Roles Anywhere applies this setting to 'ALL' channels.</p>
    /// </note>
    pub fn channel(mut self, input: crate::types::NotificationChannel) -> Self {
        self.channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specified channel of notification. IAM Roles Anywhere uses CloudWatch metrics, EventBridge, and Health Dashboard to notify for an event.</p> <note>
    /// <p>In the absence of a specific channel, IAM Roles Anywhere applies this setting to 'ALL' channels.</p>
    /// </note>
    pub fn set_channel(mut self, input: ::std::option::Option<crate::types::NotificationChannel>) -> Self {
        self.channel = input;
        self
    }
    /// <p>The specified channel of notification. IAM Roles Anywhere uses CloudWatch metrics, EventBridge, and Health Dashboard to notify for an event.</p> <note>
    /// <p>In the absence of a specific channel, IAM Roles Anywhere applies this setting to 'ALL' channels.</p>
    /// </note>
    pub fn get_channel(&self) -> &::std::option::Option<crate::types::NotificationChannel> {
        &self.channel
    }
    /// <p>The principal that configured the notification setting. For default settings configured by IAM Roles Anywhere, the value is <code>rolesanywhere.amazonaws.com</code>, and for customized notifications settings, it is the respective account ID. </p>
    pub fn configured_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.configured_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The principal that configured the notification setting. For default settings configured by IAM Roles Anywhere, the value is <code>rolesanywhere.amazonaws.com</code>, and for customized notifications settings, it is the respective account ID. </p>
    pub fn set_configured_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.configured_by = input;
        self
    }
    /// <p>The principal that configured the notification setting. For default settings configured by IAM Roles Anywhere, the value is <code>rolesanywhere.amazonaws.com</code>, and for customized notifications settings, it is the respective account ID. </p>
    pub fn get_configured_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.configured_by
    }
    /// Consumes the builder and constructs a [`NotificationSettingDetail`](crate::types::NotificationSettingDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`enabled`](crate::types::builders::NotificationSettingDetailBuilder::enabled)
    /// - [`event`](crate::types::builders::NotificationSettingDetailBuilder::event)
    pub fn build(self) -> ::std::result::Result<crate::types::NotificationSettingDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NotificationSettingDetail {
            enabled: self.enabled.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "enabled",
                    "enabled was not specified but it is required when building NotificationSettingDetail",
                )
            })?,
            event: self.event.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event",
                    "event was not specified but it is required when building NotificationSettingDetail",
                )
            })?,
            threshold: self.threshold,
            channel: self.channel,
            configured_by: self.configured_by,
        })
    }
}
