// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The state of the profile after a read or write operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProfileDetail {
    /// <p>The unique identifier of the profile.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the profile.</p>
    pub profile_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the profile.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Specifies whether instance properties are required in temporary credential requests with this profile. </p>
    pub require_instance_properties: ::std::option::Option<bool>,
    /// <p>Indicates whether the profile is enabled.</p>
    pub enabled: ::std::option::Option<bool>,
    /// <p>The Amazon Web Services account that created the profile.</p>
    pub created_by: ::std::option::Option<::std::string::String>,
    /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
    pub session_policy: ::std::option::Option<::std::string::String>,
    /// <p>A list of IAM roles that this profile can assume in a temporary credential request.</p>
    pub role_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
    pub managed_policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The ISO-8601 timestamp when the profile was created. </p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The ISO-8601 timestamp when the profile was last updated. </p>
    pub updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p> The number of seconds the vended session credentials are valid for. </p>
    pub duration_seconds: ::std::option::Option<i32>,
}
impl ProfileDetail {
    /// <p>The unique identifier of the profile.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>The ARN of the profile.</p>
    pub fn profile_arn(&self) -> ::std::option::Option<&str> {
        self.profile_arn.as_deref()
    }
    /// <p>The name of the profile.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Specifies whether instance properties are required in temporary credential requests with this profile. </p>
    pub fn require_instance_properties(&self) -> ::std::option::Option<bool> {
        self.require_instance_properties
    }
    /// <p>Indicates whether the profile is enabled.</p>
    pub fn enabled(&self) -> ::std::option::Option<bool> {
        self.enabled
    }
    /// <p>The Amazon Web Services account that created the profile.</p>
    pub fn created_by(&self) -> ::std::option::Option<&str> {
        self.created_by.as_deref()
    }
    /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
    pub fn session_policy(&self) -> ::std::option::Option<&str> {
        self.session_policy.as_deref()
    }
    /// <p>A list of IAM roles that this profile can assume in a temporary credential request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.role_arns.is_none()`.
    pub fn role_arns(&self) -> &[::std::string::String] {
        self.role_arns.as_deref().unwrap_or_default()
    }
    /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.managed_policy_arns.is_none()`.
    pub fn managed_policy_arns(&self) -> &[::std::string::String] {
        self.managed_policy_arns.as_deref().unwrap_or_default()
    }
    /// <p>The ISO-8601 timestamp when the profile was created. </p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The ISO-8601 timestamp when the profile was last updated. </p>
    pub fn updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.updated_at.as_ref()
    }
    /// <p> The number of seconds the vended session credentials are valid for. </p>
    pub fn duration_seconds(&self) -> ::std::option::Option<i32> {
        self.duration_seconds
    }
}
impl ProfileDetail {
    /// Creates a new builder-style object to manufacture [`ProfileDetail`](crate::types::ProfileDetail).
    pub fn builder() -> crate::types::builders::ProfileDetailBuilder {
        crate::types::builders::ProfileDetailBuilder::default()
    }
}

/// A builder for [`ProfileDetail`](crate::types::ProfileDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProfileDetailBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) profile_arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) require_instance_properties: ::std::option::Option<bool>,
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) created_by: ::std::option::Option<::std::string::String>,
    pub(crate) session_policy: ::std::option::Option<::std::string::String>,
    pub(crate) role_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) managed_policy_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) duration_seconds: ::std::option::Option<i32>,
}
impl ProfileDetailBuilder {
    /// <p>The unique identifier of the profile.</p>
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the profile.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The unique identifier of the profile.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>The ARN of the profile.</p>
    pub fn profile_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the profile.</p>
    pub fn set_profile_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_arn = input;
        self
    }
    /// <p>The ARN of the profile.</p>
    pub fn get_profile_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_arn
    }
    /// <p>The name of the profile.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the profile.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the profile.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Specifies whether instance properties are required in temporary credential requests with this profile. </p>
    pub fn require_instance_properties(mut self, input: bool) -> Self {
        self.require_instance_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether instance properties are required in temporary credential requests with this profile. </p>
    pub fn set_require_instance_properties(mut self, input: ::std::option::Option<bool>) -> Self {
        self.require_instance_properties = input;
        self
    }
    /// <p>Specifies whether instance properties are required in temporary credential requests with this profile. </p>
    pub fn get_require_instance_properties(&self) -> &::std::option::Option<bool> {
        &self.require_instance_properties
    }
    /// <p>Indicates whether the profile is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether the profile is enabled.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Indicates whether the profile is enabled.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>The Amazon Web Services account that created the profile.</p>
    pub fn created_by(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.created_by = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account that created the profile.</p>
    pub fn set_created_by(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.created_by = input;
        self
    }
    /// <p>The Amazon Web Services account that created the profile.</p>
    pub fn get_created_by(&self) -> &::std::option::Option<::std::string::String> {
        &self.created_by
    }
    /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
    pub fn session_policy(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.session_policy = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
    pub fn set_session_policy(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.session_policy = input;
        self
    }
    /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
    pub fn get_session_policy(&self) -> &::std::option::Option<::std::string::String> {
        &self.session_policy
    }
    /// Appends an item to `role_arns`.
    ///
    /// To override the contents of this collection use [`set_role_arns`](Self::set_role_arns).
    ///
    /// <p>A list of IAM roles that this profile can assume in a temporary credential request.</p>
    pub fn role_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.role_arns.unwrap_or_default();
        v.push(input.into());
        self.role_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of IAM roles that this profile can assume in a temporary credential request.</p>
    pub fn set_role_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.role_arns = input;
        self
    }
    /// <p>A list of IAM roles that this profile can assume in a temporary credential request.</p>
    pub fn get_role_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.role_arns
    }
    /// Appends an item to `managed_policy_arns`.
    ///
    /// To override the contents of this collection use [`set_managed_policy_arns`](Self::set_managed_policy_arns).
    ///
    /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
    pub fn managed_policy_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.managed_policy_arns.unwrap_or_default();
        v.push(input.into());
        self.managed_policy_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
    pub fn set_managed_policy_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.managed_policy_arns = input;
        self
    }
    /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
    pub fn get_managed_policy_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.managed_policy_arns
    }
    /// <p>The ISO-8601 timestamp when the profile was created. </p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ISO-8601 timestamp when the profile was created. </p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The ISO-8601 timestamp when the profile was created. </p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The ISO-8601 timestamp when the profile was last updated. </p>
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ISO-8601 timestamp when the profile was last updated. </p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The ISO-8601 timestamp when the profile was last updated. </p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// <p> The number of seconds the vended session credentials are valid for. </p>
    pub fn duration_seconds(mut self, input: i32) -> Self {
        self.duration_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p> The number of seconds the vended session credentials are valid for. </p>
    pub fn set_duration_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.duration_seconds = input;
        self
    }
    /// <p> The number of seconds the vended session credentials are valid for. </p>
    pub fn get_duration_seconds(&self) -> &::std::option::Option<i32> {
        &self.duration_seconds
    }
    /// Consumes the builder and constructs a [`ProfileDetail`](crate::types::ProfileDetail).
    pub fn build(self) -> crate::types::ProfileDetail {
        crate::types::ProfileDetail {
            profile_id: self.profile_id,
            profile_arn: self.profile_arn,
            name: self.name,
            require_instance_properties: self.require_instance_properties,
            enabled: self.enabled,
            created_by: self.created_by,
            session_policy: self.session_policy,
            role_arns: self.role_arns,
            managed_policy_arns: self.managed_policy_arns,
            created_at: self.created_at,
            updated_at: self.updated_at,
            duration_seconds: self.duration_seconds,
        }
    }
}
