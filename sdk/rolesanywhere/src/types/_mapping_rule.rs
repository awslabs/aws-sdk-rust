// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A single mapping entry for each supported specifier or sub-field.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MappingRule {
    /// <p>Specifier within a certificate field, such as CN, OU, or UID from the Subject field.</p>
    pub specifier: ::std::string::String,
}
impl MappingRule {
    /// <p>Specifier within a certificate field, such as CN, OU, or UID from the Subject field.</p>
    pub fn specifier(&self) -> &str {
        use std::ops::Deref;
        self.specifier.deref()
    }
}
impl MappingRule {
    /// Creates a new builder-style object to manufacture [`MappingRule`](crate::types::MappingRule).
    pub fn builder() -> crate::types::builders::MappingRuleBuilder {
        crate::types::builders::MappingRuleBuilder::default()
    }
}

/// A builder for [`MappingRule`](crate::types::MappingRule).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MappingRuleBuilder {
    pub(crate) specifier: ::std::option::Option<::std::string::String>,
}
impl MappingRuleBuilder {
    /// <p>Specifier within a certificate field, such as CN, OU, or UID from the Subject field.</p>
    /// This field is required.
    pub fn specifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.specifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Specifier within a certificate field, such as CN, OU, or UID from the Subject field.</p>
    pub fn set_specifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.specifier = input;
        self
    }
    /// <p>Specifier within a certificate field, such as CN, OU, or UID from the Subject field.</p>
    pub fn get_specifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.specifier
    }
    /// Consumes the builder and constructs a [`MappingRule`](crate::types::MappingRule).
    /// This method will fail if any of the following fields are not set:
    /// - [`specifier`](crate::types::builders::MappingRuleBuilder::specifier)
    pub fn build(self) -> ::std::result::Result<crate::types::MappingRule, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MappingRule {
            specifier: self.specifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "specifier",
                    "specifier was not specified but it is required when building MappingRule",
                )
            })?,
        })
    }
}
