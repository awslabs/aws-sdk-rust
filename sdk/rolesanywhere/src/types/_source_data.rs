// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The data field of the trust anchor depending on its type. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub enum SourceData {
    /// <p>The root certificate of the Certificate Manager Private Certificate Authority specified by this ARN is used in trust validation for <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> operations. Included for trust anchors of type <code>AWS_ACM_PCA</code>. </p>
    AcmPcaArn(std::string::String),
    /// <p>The PEM-encoded data for the certificate anchor. Included for trust anchors of type <code>CERTIFICATE_BUNDLE</code>. </p>
    X509CertificateData(std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl SourceData {
    /// Tries to convert the enum instance into [`AcmPcaArn`](crate::types::SourceData::AcmPcaArn), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_acm_pca_arn(&self) -> std::result::Result<&std::string::String, &Self> {
        if let SourceData::AcmPcaArn(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`AcmPcaArn`](crate::types::SourceData::AcmPcaArn).
    pub fn is_acm_pca_arn(&self) -> bool {
        self.as_acm_pca_arn().is_ok()
    }
    /// Tries to convert the enum instance into [`X509CertificateData`](crate::types::SourceData::X509CertificateData), extracting the inner [`String`](std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_x509_certificate_data(&self) -> std::result::Result<&std::string::String, &Self> {
        if let SourceData::X509CertificateData(val) = &self {
            Ok(val)
        } else {
            Err(self)
        }
    }
    /// Returns true if this is a [`X509CertificateData`](crate::types::SourceData::X509CertificateData).
    pub fn is_x509_certificate_data(&self) -> bool {
        self.as_x509_certificate_data().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
