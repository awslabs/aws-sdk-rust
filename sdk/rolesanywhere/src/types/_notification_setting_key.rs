// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A notification setting key to reset. A notification setting key includes the event and the channel. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NotificationSettingKey {
    /// <p>The notification setting event to reset.</p>
    pub event: crate::types::NotificationEvent,
    /// <p>The specified channel of notification.</p>
    pub channel: ::std::option::Option<crate::types::NotificationChannel>,
}
impl NotificationSettingKey {
    /// <p>The notification setting event to reset.</p>
    pub fn event(&self) -> &crate::types::NotificationEvent {
        &self.event
    }
    /// <p>The specified channel of notification.</p>
    pub fn channel(&self) -> ::std::option::Option<&crate::types::NotificationChannel> {
        self.channel.as_ref()
    }
}
impl NotificationSettingKey {
    /// Creates a new builder-style object to manufacture [`NotificationSettingKey`](crate::types::NotificationSettingKey).
    pub fn builder() -> crate::types::builders::NotificationSettingKeyBuilder {
        crate::types::builders::NotificationSettingKeyBuilder::default()
    }
}

/// A builder for [`NotificationSettingKey`](crate::types::NotificationSettingKey).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NotificationSettingKeyBuilder {
    pub(crate) event: ::std::option::Option<crate::types::NotificationEvent>,
    pub(crate) channel: ::std::option::Option<crate::types::NotificationChannel>,
}
impl NotificationSettingKeyBuilder {
    /// <p>The notification setting event to reset.</p>
    /// This field is required.
    pub fn event(mut self, input: crate::types::NotificationEvent) -> Self {
        self.event = ::std::option::Option::Some(input);
        self
    }
    /// <p>The notification setting event to reset.</p>
    pub fn set_event(mut self, input: ::std::option::Option<crate::types::NotificationEvent>) -> Self {
        self.event = input;
        self
    }
    /// <p>The notification setting event to reset.</p>
    pub fn get_event(&self) -> &::std::option::Option<crate::types::NotificationEvent> {
        &self.event
    }
    /// <p>The specified channel of notification.</p>
    pub fn channel(mut self, input: crate::types::NotificationChannel) -> Self {
        self.channel = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specified channel of notification.</p>
    pub fn set_channel(mut self, input: ::std::option::Option<crate::types::NotificationChannel>) -> Self {
        self.channel = input;
        self
    }
    /// <p>The specified channel of notification.</p>
    pub fn get_channel(&self) -> &::std::option::Option<crate::types::NotificationChannel> {
        &self.channel
    }
    /// Consumes the builder and constructs a [`NotificationSettingKey`](crate::types::NotificationSettingKey).
    /// This method will fail if any of the following fields are not set:
    /// - [`event`](crate::types::builders::NotificationSettingKeyBuilder::event)
    pub fn build(self) -> ::std::result::Result<crate::types::NotificationSettingKey, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NotificationSettingKey {
            event: self.event.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "event",
                    "event was not specified but it is required when building NotificationSettingKey",
                )
            })?,
            channel: self.channel,
        })
    }
}
