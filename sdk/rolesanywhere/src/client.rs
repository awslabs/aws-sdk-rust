// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for IAM Roles Anywhere
///
/// Client for invoking operations on IAM Roles Anywhere. Each operation on IAM Roles Anywhere is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_rolesanywhere::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_rolesanywhere::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_rolesanywhere::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`CreateProfile`](crate::client::fluent_builders::CreateProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateProfile::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateProfile::set_name): <p>The name of the profile.</p>
    ///   - [`require_instance_properties(bool)`](crate::client::fluent_builders::CreateProfile::require_instance_properties) / [`set_require_instance_properties(Option<bool>)`](crate::client::fluent_builders::CreateProfile::set_require_instance_properties): <p>Specifies whether instance properties are required in <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> requests with this profile. </p>
    ///   - [`session_policy(impl Into<String>)`](crate::client::fluent_builders::CreateProfile::session_policy) / [`set_session_policy(Option<String>)`](crate::client::fluent_builders::CreateProfile::set_session_policy): <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
    ///   - [`role_arns(Vec<String>)`](crate::client::fluent_builders::CreateProfile::role_arns) / [`set_role_arns(Option<Vec<String>>)`](crate::client::fluent_builders::CreateProfile::set_role_arns): <p>A list of IAM roles that this profile can assume in a <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> operation.</p>
    ///   - [`managed_policy_arns(Vec<String>)`](crate::client::fluent_builders::CreateProfile::managed_policy_arns) / [`set_managed_policy_arns(Option<Vec<String>>)`](crate::client::fluent_builders::CreateProfile::set_managed_policy_arns): <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
    ///   - [`duration_seconds(i32)`](crate::client::fluent_builders::CreateProfile::duration_seconds) / [`set_duration_seconds(Option<i32>)`](crate::client::fluent_builders::CreateProfile::set_duration_seconds): <p> The number of seconds the vended session credentials are valid for. </p>
    ///   - [`enabled(bool)`](crate::client::fluent_builders::CreateProfile::enabled) / [`set_enabled(Option<bool>)`](crate::client::fluent_builders::CreateProfile::set_enabled): <p>Specifies whether the profile is enabled.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateProfile::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateProfile::set_tags): <p>The tags to attach to the profile.</p>
    /// - On success, responds with [`CreateProfileOutput`](crate::output::CreateProfileOutput) with field(s):
    ///   - [`profile(Option<ProfileDetail>)`](crate::output::CreateProfileOutput::profile): <p>The state of the profile after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<CreateProfileError>`](crate::error::CreateProfileError)
    pub fn create_profile(&self) -> fluent_builders::CreateProfile {
        fluent_builders::CreateProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateTrustAnchor`](crate::client::fluent_builders::CreateTrustAnchor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::CreateTrustAnchor::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::CreateTrustAnchor::set_name): <p>The name of the trust anchor.</p>
    ///   - [`source(Source)`](crate::client::fluent_builders::CreateTrustAnchor::source) / [`set_source(Option<Source>)`](crate::client::fluent_builders::CreateTrustAnchor::set_source): <p>The trust anchor type and its related certificate data.</p>
    ///   - [`enabled(bool)`](crate::client::fluent_builders::CreateTrustAnchor::enabled) / [`set_enabled(Option<bool>)`](crate::client::fluent_builders::CreateTrustAnchor::set_enabled): <p>Specifies whether the trust anchor is enabled.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateTrustAnchor::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateTrustAnchor::set_tags): <p>The tags to attach to the trust anchor.</p>
    /// - On success, responds with [`CreateTrustAnchorOutput`](crate::output::CreateTrustAnchorOutput) with field(s):
    ///   - [`trust_anchor(Option<TrustAnchorDetail>)`](crate::output::CreateTrustAnchorOutput::trust_anchor): <p>The state of the trust anchor after a read or write operation. </p>
    /// - On failure, responds with [`SdkError<CreateTrustAnchorError>`](crate::error::CreateTrustAnchorError)
    pub fn create_trust_anchor(&self) -> fluent_builders::CreateTrustAnchor {
        fluent_builders::CreateTrustAnchor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteCrl`](crate::client::fluent_builders::DeleteCrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`crl_id(impl Into<String>)`](crate::client::fluent_builders::DeleteCrl::crl_id) / [`set_crl_id(Option<String>)`](crate::client::fluent_builders::DeleteCrl::set_crl_id): <p>The unique identifier of the certificate revocation list (CRL).</p>
    /// - On success, responds with [`DeleteCrlOutput`](crate::output::DeleteCrlOutput) with field(s):
    ///   - [`crl(Option<CrlDetail>)`](crate::output::DeleteCrlOutput::crl): <p>The state of the certificate revocation list (CRL) after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<DeleteCrlError>`](crate::error::DeleteCrlError)
    pub fn delete_crl(&self) -> fluent_builders::DeleteCrl {
        fluent_builders::DeleteCrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteProfile`](crate::client::fluent_builders::DeleteProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profile_id(impl Into<String>)`](crate::client::fluent_builders::DeleteProfile::profile_id) / [`set_profile_id(Option<String>)`](crate::client::fluent_builders::DeleteProfile::set_profile_id): <p>The unique identifier of the profile.</p>
    /// - On success, responds with [`DeleteProfileOutput`](crate::output::DeleteProfileOutput) with field(s):
    ///   - [`profile(Option<ProfileDetail>)`](crate::output::DeleteProfileOutput::profile): <p>The state of the profile after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<DeleteProfileError>`](crate::error::DeleteProfileError)
    pub fn delete_profile(&self) -> fluent_builders::DeleteProfile {
        fluent_builders::DeleteProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteTrustAnchor`](crate::client::fluent_builders::DeleteTrustAnchor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_anchor_id(impl Into<String>)`](crate::client::fluent_builders::DeleteTrustAnchor::trust_anchor_id) / [`set_trust_anchor_id(Option<String>)`](crate::client::fluent_builders::DeleteTrustAnchor::set_trust_anchor_id): <p>The unique identifier of the trust anchor.</p>
    /// - On success, responds with [`DeleteTrustAnchorOutput`](crate::output::DeleteTrustAnchorOutput) with field(s):
    ///   - [`trust_anchor(Option<TrustAnchorDetail>)`](crate::output::DeleteTrustAnchorOutput::trust_anchor): <p>The state of the trust anchor after a read or write operation. </p>
    /// - On failure, responds with [`SdkError<DeleteTrustAnchorError>`](crate::error::DeleteTrustAnchorError)
    pub fn delete_trust_anchor(&self) -> fluent_builders::DeleteTrustAnchor {
        fluent_builders::DeleteTrustAnchor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableCrl`](crate::client::fluent_builders::DisableCrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`crl_id(impl Into<String>)`](crate::client::fluent_builders::DisableCrl::crl_id) / [`set_crl_id(Option<String>)`](crate::client::fluent_builders::DisableCrl::set_crl_id): <p>The unique identifier of the certificate revocation list (CRL).</p>
    /// - On success, responds with [`DisableCrlOutput`](crate::output::DisableCrlOutput) with field(s):
    ///   - [`crl(Option<CrlDetail>)`](crate::output::DisableCrlOutput::crl): <p>The state of the certificate revocation list (CRL) after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<DisableCrlError>`](crate::error::DisableCrlError)
    pub fn disable_crl(&self) -> fluent_builders::DisableCrl {
        fluent_builders::DisableCrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableProfile`](crate::client::fluent_builders::DisableProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profile_id(impl Into<String>)`](crate::client::fluent_builders::DisableProfile::profile_id) / [`set_profile_id(Option<String>)`](crate::client::fluent_builders::DisableProfile::set_profile_id): <p>The unique identifier of the profile.</p>
    /// - On success, responds with [`DisableProfileOutput`](crate::output::DisableProfileOutput) with field(s):
    ///   - [`profile(Option<ProfileDetail>)`](crate::output::DisableProfileOutput::profile): <p>The state of the profile after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<DisableProfileError>`](crate::error::DisableProfileError)
    pub fn disable_profile(&self) -> fluent_builders::DisableProfile {
        fluent_builders::DisableProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisableTrustAnchor`](crate::client::fluent_builders::DisableTrustAnchor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_anchor_id(impl Into<String>)`](crate::client::fluent_builders::DisableTrustAnchor::trust_anchor_id) / [`set_trust_anchor_id(Option<String>)`](crate::client::fluent_builders::DisableTrustAnchor::set_trust_anchor_id): <p>The unique identifier of the trust anchor.</p>
    /// - On success, responds with [`DisableTrustAnchorOutput`](crate::output::DisableTrustAnchorOutput) with field(s):
    ///   - [`trust_anchor(Option<TrustAnchorDetail>)`](crate::output::DisableTrustAnchorOutput::trust_anchor): <p>The state of the trust anchor after a read or write operation. </p>
    /// - On failure, responds with [`SdkError<DisableTrustAnchorError>`](crate::error::DisableTrustAnchorError)
    pub fn disable_trust_anchor(&self) -> fluent_builders::DisableTrustAnchor {
        fluent_builders::DisableTrustAnchor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableCrl`](crate::client::fluent_builders::EnableCrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`crl_id(impl Into<String>)`](crate::client::fluent_builders::EnableCrl::crl_id) / [`set_crl_id(Option<String>)`](crate::client::fluent_builders::EnableCrl::set_crl_id): <p>The unique identifier of the certificate revocation list (CRL).</p>
    /// - On success, responds with [`EnableCrlOutput`](crate::output::EnableCrlOutput) with field(s):
    ///   - [`crl(Option<CrlDetail>)`](crate::output::EnableCrlOutput::crl): <p>The state of the certificate revocation list (CRL) after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<EnableCrlError>`](crate::error::EnableCrlError)
    pub fn enable_crl(&self) -> fluent_builders::EnableCrl {
        fluent_builders::EnableCrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableProfile`](crate::client::fluent_builders::EnableProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profile_id(impl Into<String>)`](crate::client::fluent_builders::EnableProfile::profile_id) / [`set_profile_id(Option<String>)`](crate::client::fluent_builders::EnableProfile::set_profile_id): <p>The unique identifier of the profile.</p>
    /// - On success, responds with [`EnableProfileOutput`](crate::output::EnableProfileOutput) with field(s):
    ///   - [`profile(Option<ProfileDetail>)`](crate::output::EnableProfileOutput::profile): <p>The state of the profile after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<EnableProfileError>`](crate::error::EnableProfileError)
    pub fn enable_profile(&self) -> fluent_builders::EnableProfile {
        fluent_builders::EnableProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`EnableTrustAnchor`](crate::client::fluent_builders::EnableTrustAnchor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_anchor_id(impl Into<String>)`](crate::client::fluent_builders::EnableTrustAnchor::trust_anchor_id) / [`set_trust_anchor_id(Option<String>)`](crate::client::fluent_builders::EnableTrustAnchor::set_trust_anchor_id): <p>The unique identifier of the trust anchor.</p>
    /// - On success, responds with [`EnableTrustAnchorOutput`](crate::output::EnableTrustAnchorOutput) with field(s):
    ///   - [`trust_anchor(Option<TrustAnchorDetail>)`](crate::output::EnableTrustAnchorOutput::trust_anchor): <p>The state of the trust anchor after a read or write operation. </p>
    /// - On failure, responds with [`SdkError<EnableTrustAnchorError>`](crate::error::EnableTrustAnchorError)
    pub fn enable_trust_anchor(&self) -> fluent_builders::EnableTrustAnchor {
        fluent_builders::EnableTrustAnchor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetCrl`](crate::client::fluent_builders::GetCrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`crl_id(impl Into<String>)`](crate::client::fluent_builders::GetCrl::crl_id) / [`set_crl_id(Option<String>)`](crate::client::fluent_builders::GetCrl::set_crl_id): <p>The unique identifier of the certificate revocation list (CRL).</p>
    /// - On success, responds with [`GetCrlOutput`](crate::output::GetCrlOutput) with field(s):
    ///   - [`crl(Option<CrlDetail>)`](crate::output::GetCrlOutput::crl): <p>The state of the certificate revocation list (CRL) after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<GetCrlError>`](crate::error::GetCrlError)
    pub fn get_crl(&self) -> fluent_builders::GetCrl {
        fluent_builders::GetCrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetProfile`](crate::client::fluent_builders::GetProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profile_id(impl Into<String>)`](crate::client::fluent_builders::GetProfile::profile_id) / [`set_profile_id(Option<String>)`](crate::client::fluent_builders::GetProfile::set_profile_id): <p>The unique identifier of the profile.</p>
    /// - On success, responds with [`GetProfileOutput`](crate::output::GetProfileOutput) with field(s):
    ///   - [`profile(Option<ProfileDetail>)`](crate::output::GetProfileOutput::profile): <p>The state of the profile after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<GetProfileError>`](crate::error::GetProfileError)
    pub fn get_profile(&self) -> fluent_builders::GetProfile {
        fluent_builders::GetProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetSubject`](crate::client::fluent_builders::GetSubject) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`subject_id(impl Into<String>)`](crate::client::fluent_builders::GetSubject::subject_id) / [`set_subject_id(Option<String>)`](crate::client::fluent_builders::GetSubject::set_subject_id): <p>The unique identifier of the subject. </p>
    /// - On success, responds with [`GetSubjectOutput`](crate::output::GetSubjectOutput) with field(s):
    ///   - [`subject(Option<SubjectDetail>)`](crate::output::GetSubjectOutput::subject): <p>The state of the subject after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<GetSubjectError>`](crate::error::GetSubjectError)
    pub fn get_subject(&self) -> fluent_builders::GetSubject {
        fluent_builders::GetSubject::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetTrustAnchor`](crate::client::fluent_builders::GetTrustAnchor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_anchor_id(impl Into<String>)`](crate::client::fluent_builders::GetTrustAnchor::trust_anchor_id) / [`set_trust_anchor_id(Option<String>)`](crate::client::fluent_builders::GetTrustAnchor::set_trust_anchor_id): <p>The unique identifier of the trust anchor.</p>
    /// - On success, responds with [`GetTrustAnchorOutput`](crate::output::GetTrustAnchorOutput) with field(s):
    ///   - [`trust_anchor(Option<TrustAnchorDetail>)`](crate::output::GetTrustAnchorOutput::trust_anchor): <p>The state of the trust anchor after a read or write operation. </p>
    /// - On failure, responds with [`SdkError<GetTrustAnchorError>`](crate::error::GetTrustAnchorError)
    pub fn get_trust_anchor(&self) -> fluent_builders::GetTrustAnchor {
        fluent_builders::GetTrustAnchor::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ImportCrl`](crate::client::fluent_builders::ImportCrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::ImportCrl::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::ImportCrl::set_name): <p>The name of the certificate revocation list (CRL).</p>
    ///   - [`crl_data(Blob)`](crate::client::fluent_builders::ImportCrl::crl_data) / [`set_crl_data(Option<Blob>)`](crate::client::fluent_builders::ImportCrl::set_crl_data): <p>The x509 v3 specified certificate revocation list</p>
    ///   - [`enabled(bool)`](crate::client::fluent_builders::ImportCrl::enabled) / [`set_enabled(Option<bool>)`](crate::client::fluent_builders::ImportCrl::set_enabled): <p>Specifies whether the certificate revocation list (CRL) is enabled.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::ImportCrl::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::ImportCrl::set_tags): <p>A list of tags to attach to the certificate revocation list (CRL).</p>
    ///   - [`trust_anchor_arn(impl Into<String>)`](crate::client::fluent_builders::ImportCrl::trust_anchor_arn) / [`set_trust_anchor_arn(Option<String>)`](crate::client::fluent_builders::ImportCrl::set_trust_anchor_arn): <p>The ARN of the TrustAnchor the certificate revocation list (CRL) will provide revocation for.</p>
    /// - On success, responds with [`ImportCrlOutput`](crate::output::ImportCrlOutput) with field(s):
    ///   - [`crl(Option<CrlDetail>)`](crate::output::ImportCrlOutput::crl): <p>The state of the certificate revocation list (CRL) after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<ImportCrlError>`](crate::error::ImportCrlError)
    pub fn import_crl(&self) -> fluent_builders::ImportCrl {
        fluent_builders::ImportCrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListCrls`](crate::client::fluent_builders::ListCrls) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListCrls::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListCrls::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListCrls::set_next_token): <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::ListCrls::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::ListCrls::set_page_size): <p>The number of resources in the paginated list. </p>
    /// - On success, responds with [`ListCrlsOutput`](crate::output::ListCrlsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListCrlsOutput::next_token): <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
    ///   - [`crls(Option<Vec<CrlDetail>>)`](crate::output::ListCrlsOutput::crls): <p>A list of certificate revocation lists (CRL). </p>
    /// - On failure, responds with [`SdkError<ListCrlsError>`](crate::error::ListCrlsError)
    pub fn list_crls(&self) -> fluent_builders::ListCrls {
        fluent_builders::ListCrls::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListProfiles`](crate::client::fluent_builders::ListProfiles) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListProfiles::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListProfiles::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListProfiles::set_next_token): <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::ListProfiles::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::ListProfiles::set_page_size): <p>The number of resources in the paginated list. </p>
    /// - On success, responds with [`ListProfilesOutput`](crate::output::ListProfilesOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListProfilesOutput::next_token): <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
    ///   - [`profiles(Option<Vec<ProfileDetail>>)`](crate::output::ListProfilesOutput::profiles): <p>A list of profiles.</p>
    /// - On failure, responds with [`SdkError<ListProfilesError>`](crate::error::ListProfilesError)
    pub fn list_profiles(&self) -> fluent_builders::ListProfiles {
        fluent_builders::ListProfiles::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListSubjects`](crate::client::fluent_builders::ListSubjects) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListSubjects::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListSubjects::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListSubjects::set_next_token): <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::ListSubjects::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::ListSubjects::set_page_size): <p>The number of resources in the paginated list. </p>
    /// - On success, responds with [`ListSubjectsOutput`](crate::output::ListSubjectsOutput) with field(s):
    ///   - [`subjects(Option<Vec<SubjectSummary>>)`](crate::output::ListSubjectsOutput::subjects): <p>A list of subjects.</p>
    ///   - [`next_token(Option<String>)`](crate::output::ListSubjectsOutput::next_token): <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
    /// - On failure, responds with [`SdkError<ListSubjectsError>`](crate::error::ListSubjectsError)
    pub fn list_subjects(&self) -> fluent_builders::ListSubjects {
        fluent_builders::ListSubjects::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The ARN of the resource.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>A list of tags attached to the resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTrustAnchors`](crate::client::fluent_builders::ListTrustAnchors) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTrustAnchors::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListTrustAnchors::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListTrustAnchors::set_next_token): <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
    ///   - [`page_size(i32)`](crate::client::fluent_builders::ListTrustAnchors::page_size) / [`set_page_size(Option<i32>)`](crate::client::fluent_builders::ListTrustAnchors::set_page_size): <p>The number of resources in the paginated list. </p>
    /// - On success, responds with [`ListTrustAnchorsOutput`](crate::output::ListTrustAnchorsOutput) with field(s):
    ///   - [`next_token(Option<String>)`](crate::output::ListTrustAnchorsOutput::next_token): <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
    ///   - [`trust_anchors(Option<Vec<TrustAnchorDetail>>)`](crate::output::ListTrustAnchorsOutput::trust_anchors): <p>A list of trust anchors.</p>
    /// - On failure, responds with [`SdkError<ListTrustAnchorsError>`](crate::error::ListTrustAnchorsError)
    pub fn list_trust_anchors(&self) -> fluent_builders::ListTrustAnchors {
        fluent_builders::ListTrustAnchors::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags to attach to the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> fluent_builders::TagResource {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The ARN of the resource.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>A list of keys. Tag keys are the unique identifiers of tags. </p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> fluent_builders::UntagResource {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateCrl`](crate::client::fluent_builders::UpdateCrl) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`crl_id(impl Into<String>)`](crate::client::fluent_builders::UpdateCrl::crl_id) / [`set_crl_id(Option<String>)`](crate::client::fluent_builders::UpdateCrl::set_crl_id): <p>The unique identifier of the certificate revocation list (CRL).</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateCrl::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateCrl::set_name): <p>The name of the Crl.</p>
    ///   - [`crl_data(Blob)`](crate::client::fluent_builders::UpdateCrl::crl_data) / [`set_crl_data(Option<Blob>)`](crate::client::fluent_builders::UpdateCrl::set_crl_data): <p>The x509 v3 specified certificate revocation list</p>
    /// - On success, responds with [`UpdateCrlOutput`](crate::output::UpdateCrlOutput) with field(s):
    ///   - [`crl(Option<CrlDetail>)`](crate::output::UpdateCrlOutput::crl): <p>The state of the certificate revocation list (CRL) after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<UpdateCrlError>`](crate::error::UpdateCrlError)
    pub fn update_crl(&self) -> fluent_builders::UpdateCrl {
        fluent_builders::UpdateCrl::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateProfile`](crate::client::fluent_builders::UpdateProfile) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`profile_id(impl Into<String>)`](crate::client::fluent_builders::UpdateProfile::profile_id) / [`set_profile_id(Option<String>)`](crate::client::fluent_builders::UpdateProfile::set_profile_id): <p>The unique identifier of the profile.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateProfile::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateProfile::set_name): <p>The name of the profile.</p>
    ///   - [`session_policy(impl Into<String>)`](crate::client::fluent_builders::UpdateProfile::session_policy) / [`set_session_policy(Option<String>)`](crate::client::fluent_builders::UpdateProfile::set_session_policy): <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
    ///   - [`role_arns(Vec<String>)`](crate::client::fluent_builders::UpdateProfile::role_arns) / [`set_role_arns(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateProfile::set_role_arns): <p>A list of IAM roles that this profile can assume in a <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> operation.</p>
    ///   - [`managed_policy_arns(Vec<String>)`](crate::client::fluent_builders::UpdateProfile::managed_policy_arns) / [`set_managed_policy_arns(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateProfile::set_managed_policy_arns): <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
    ///   - [`duration_seconds(i32)`](crate::client::fluent_builders::UpdateProfile::duration_seconds) / [`set_duration_seconds(Option<i32>)`](crate::client::fluent_builders::UpdateProfile::set_duration_seconds): <p> The number of seconds the vended session credentials are valid for. </p>
    /// - On success, responds with [`UpdateProfileOutput`](crate::output::UpdateProfileOutput) with field(s):
    ///   - [`profile(Option<ProfileDetail>)`](crate::output::UpdateProfileOutput::profile): <p>The state of the profile after a read or write operation.</p>
    /// - On failure, responds with [`SdkError<UpdateProfileError>`](crate::error::UpdateProfileError)
    pub fn update_profile(&self) -> fluent_builders::UpdateProfile {
        fluent_builders::UpdateProfile::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateTrustAnchor`](crate::client::fluent_builders::UpdateTrustAnchor) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_anchor_id(impl Into<String>)`](crate::client::fluent_builders::UpdateTrustAnchor::trust_anchor_id) / [`set_trust_anchor_id(Option<String>)`](crate::client::fluent_builders::UpdateTrustAnchor::set_trust_anchor_id): <p>The unique identifier of the trust anchor.</p>
    ///   - [`name(impl Into<String>)`](crate::client::fluent_builders::UpdateTrustAnchor::name) / [`set_name(Option<String>)`](crate::client::fluent_builders::UpdateTrustAnchor::set_name): <p>The name of the trust anchor.</p>
    ///   - [`source(Source)`](crate::client::fluent_builders::UpdateTrustAnchor::source) / [`set_source(Option<Source>)`](crate::client::fluent_builders::UpdateTrustAnchor::set_source): <p>The trust anchor type and its related certificate data.</p>
    /// - On success, responds with [`UpdateTrustAnchorOutput`](crate::output::UpdateTrustAnchorOutput) with field(s):
    ///   - [`trust_anchor(Option<TrustAnchorDetail>)`](crate::output::UpdateTrustAnchorOutput::trust_anchor): <p>The state of the trust anchor after a read or write operation. </p>
    /// - On failure, responds with [`SdkError<UpdateTrustAnchorError>`](crate::error::UpdateTrustAnchorError)
    pub fn update_trust_anchor(&self) -> fluent_builders::UpdateTrustAnchor {
        fluent_builders::UpdateTrustAnchor::new(self.handle.clone())
    }
}
pub mod fluent_builders {

    //! Utilities to ergonomically construct a request to the service.
    //!
    //! Fluent builders are created through the [`Client`](crate::client::Client) by calling
    //! one if its operation methods. After parameters are set using the builder methods,
    //! the `send` method can be called to initiate the request.
    /// Fluent builder constructing a request to `CreateProfile`.
    ///
    /// <p>Creates a profile. A profile is configuration resource to list the roles that RolesAnywhere service is trusted to assume. In addition, by applying a profile you can intersect permissions with IAM managed policies.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:CreateProfile</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateProfile {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_profile_input::Builder,
    }
    impl CreateProfile {
        /// Creates a new `CreateProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateProfile,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateProfileError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateProfileError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the profile.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the profile.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>Specifies whether instance properties are required in <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> requests with this profile. </p>
        pub fn require_instance_properties(mut self, input: bool) -> Self {
            self.inner = self.inner.require_instance_properties(input);
            self
        }
        /// <p>Specifies whether instance properties are required in <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> requests with this profile. </p>
        pub fn set_require_instance_properties(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_require_instance_properties(input);
            self
        }
        /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
        pub fn session_policy(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session_policy(input.into());
            self
        }
        /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
        pub fn set_session_policy(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_session_policy(input);
            self
        }
        /// Appends an item to `roleArns`.
        ///
        /// To override the contents of this collection use [`set_role_arns`](Self::set_role_arns).
        ///
        /// <p>A list of IAM roles that this profile can assume in a <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> operation.</p>
        pub fn role_arns(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arns(input.into());
            self
        }
        /// <p>A list of IAM roles that this profile can assume in a <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> operation.</p>
        pub fn set_role_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_role_arns(input);
            self
        }
        /// Appends an item to `managedPolicyArns`.
        ///
        /// To override the contents of this collection use [`set_managed_policy_arns`](Self::set_managed_policy_arns).
        ///
        /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
        pub fn managed_policy_arns(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.managed_policy_arns(input.into());
            self
        }
        /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
        pub fn set_managed_policy_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_managed_policy_arns(input);
            self
        }
        /// <p> The number of seconds the vended session credentials are valid for. </p>
        pub fn duration_seconds(mut self, input: i32) -> Self {
            self.inner = self.inner.duration_seconds(input);
            self
        }
        /// <p> The number of seconds the vended session credentials are valid for. </p>
        pub fn set_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_duration_seconds(input);
            self
        }
        /// <p>Specifies whether the profile is enabled.</p>
        pub fn enabled(mut self, input: bool) -> Self {
            self.inner = self.inner.enabled(input);
            self
        }
        /// <p>Specifies whether the profile is enabled.</p>
        pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enabled(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags to attach to the profile.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags to attach to the profile.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `CreateTrustAnchor`.
    ///
    /// <p>Creates a trust anchor. You establish trust between IAM Roles Anywhere and your certificate authority (CA) by configuring a trust anchor. A Trust Anchor is defined either as a reference to a AWS Certificate Manager Private Certificate Authority (ACM PCA), or by uploading a Certificate Authority (CA) certificate. Your AWS workloads can authenticate with the trust anchor using certificates issued by the trusted Certificate Authority (CA) in exchange for temporary AWS credentials.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:CreateTrustAnchor</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct CreateTrustAnchor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::create_trust_anchor_input::Builder,
    }
    impl CreateTrustAnchor {
        /// Creates a new `CreateTrustAnchor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::CreateTrustAnchor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::CreateTrustAnchorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateTrustAnchorOutput,
            aws_smithy_http::result::SdkError<crate::error::CreateTrustAnchorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the trust anchor.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the trust anchor.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The trust anchor type and its related certificate data.</p>
        pub fn source(mut self, input: crate::model::Source) -> Self {
            self.inner = self.inner.source(input);
            self
        }
        /// <p>The trust anchor type and its related certificate data.</p>
        pub fn set_source(mut self, input: std::option::Option<crate::model::Source>) -> Self {
            self.inner = self.inner.set_source(input);
            self
        }
        /// <p>Specifies whether the trust anchor is enabled.</p>
        pub fn enabled(mut self, input: bool) -> Self {
            self.inner = self.inner.enabled(input);
            self
        }
        /// <p>Specifies whether the trust anchor is enabled.</p>
        pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enabled(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags to attach to the trust anchor.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags to attach to the trust anchor.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteCrl`.
    ///
    /// <p>Deletes a certificate revocation list (CRL).</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:DeleteCrl</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteCrl {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_crl_input::Builder,
    }
    impl DeleteCrl {
        /// Creates a new `DeleteCrl`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteCrl,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteCrlError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteCrlOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteCrlError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn crl_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.crl_id(input.into());
            self
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn set_crl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_crl_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteProfile`.
    ///
    /// <p>Deletes a profile.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:DeleteProfile</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteProfile {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_profile_input::Builder,
    }
    impl DeleteProfile {
        /// Creates a new `DeleteProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteProfile,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteProfileError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteProfileError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.profile_id(input.into());
            self
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_profile_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DeleteTrustAnchor`.
    ///
    /// <p>Deletes a trust anchor.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:DeleteTrustAnchor</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DeleteTrustAnchor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::delete_trust_anchor_input::Builder,
    }
    impl DeleteTrustAnchor {
        /// Creates a new `DeleteTrustAnchor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DeleteTrustAnchor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DeleteTrustAnchorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteTrustAnchorOutput,
            aws_smithy_http::result::SdkError<crate::error::DeleteTrustAnchorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn trust_anchor_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.trust_anchor_id(input.into());
            self
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn set_trust_anchor_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_trust_anchor_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DisableCrl`.
    ///
    /// <p>Disables a certificate revocation list (CRL).</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:DisableCrl</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DisableCrl {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::disable_crl_input::Builder,
    }
    impl DisableCrl {
        /// Creates a new `DisableCrl`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DisableCrl,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DisableCrlError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisableCrlOutput,
            aws_smithy_http::result::SdkError<crate::error::DisableCrlError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn crl_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.crl_id(input.into());
            self
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn set_crl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_crl_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DisableProfile`.
    ///
    /// <p>Disables a profile. When disabled, <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> requests with this profile fail.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:DisableProfile</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DisableProfile {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::disable_profile_input::Builder,
    }
    impl DisableProfile {
        /// Creates a new `DisableProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DisableProfile,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DisableProfileError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisableProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::DisableProfileError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.profile_id(input.into());
            self
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_profile_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `DisableTrustAnchor`.
    ///
    /// <p>Disables a trust anchor. When disabled, <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> requests specifying this trust anchor are unauthorized.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:DisableTrustAnchor</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct DisableTrustAnchor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::disable_trust_anchor_input::Builder,
    }
    impl DisableTrustAnchor {
        /// Creates a new `DisableTrustAnchor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::DisableTrustAnchor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::DisableTrustAnchorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DisableTrustAnchorOutput,
            aws_smithy_http::result::SdkError<crate::error::DisableTrustAnchorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn trust_anchor_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.trust_anchor_id(input.into());
            self
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn set_trust_anchor_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_trust_anchor_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `EnableCrl`.
    ///
    /// <p>Enables a certificate revocation list (CRL). When enabled, certificates stored in the CRL are unauthorized to receive session credentials.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:EnableCrl</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct EnableCrl {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::enable_crl_input::Builder,
    }
    impl EnableCrl {
        /// Creates a new `EnableCrl`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::EnableCrl,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::EnableCrlError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::EnableCrlOutput,
            aws_smithy_http::result::SdkError<crate::error::EnableCrlError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn crl_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.crl_id(input.into());
            self
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn set_crl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_crl_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `EnableProfile`.
    ///
    /// <p>Enables the roles in a profile to receive session credentials in <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a>. </p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:EnableProfile</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct EnableProfile {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::enable_profile_input::Builder,
    }
    impl EnableProfile {
        /// Creates a new `EnableProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::EnableProfile,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::EnableProfileError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::EnableProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::EnableProfileError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.profile_id(input.into());
            self
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_profile_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `EnableTrustAnchor`.
    ///
    /// <p>Enables a trust anchor. When enabled, certificates in the trust anchor chain are authorized for trust validation. </p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:EnableTrustAnchor</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct EnableTrustAnchor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::enable_trust_anchor_input::Builder,
    }
    impl EnableTrustAnchor {
        /// Creates a new `EnableTrustAnchor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::EnableTrustAnchor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::EnableTrustAnchorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::EnableTrustAnchorOutput,
            aws_smithy_http::result::SdkError<crate::error::EnableTrustAnchorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn trust_anchor_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.trust_anchor_id(input.into());
            self
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn set_trust_anchor_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_trust_anchor_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetCrl`.
    ///
    /// <p>Gets a certificate revocation list (CRL).</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:GetCrl</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetCrl {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_crl_input::Builder,
    }
    impl GetCrl {
        /// Creates a new `GetCrl`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetCrl,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetCrlError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetCrlOutput,
            aws_smithy_http::result::SdkError<crate::error::GetCrlError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn crl_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.crl_id(input.into());
            self
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn set_crl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_crl_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetProfile`.
    ///
    /// <p>Gets a profile.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:GetProfile</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetProfile {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_profile_input::Builder,
    }
    impl GetProfile {
        /// Creates a new `GetProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetProfile,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetProfileError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::GetProfileError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.profile_id(input.into());
            self
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_profile_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetSubject`.
    ///
    /// <p>Gets a Subject. A Subject associates a certificate identity with authentication attempts by CreateSession. The Subject resources stores audit information such as status of the last authentication attempt, the certificate data used in the attempt, and the last time the associated identity attempted authentication. </p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:GetSubject</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetSubject {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_subject_input::Builder,
    }
    impl GetSubject {
        /// Creates a new `GetSubject`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetSubject,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetSubjectError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetSubjectOutput,
            aws_smithy_http::result::SdkError<crate::error::GetSubjectError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the subject. </p>
        pub fn subject_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.subject_id(input.into());
            self
        }
        /// <p>The unique identifier of the subject. </p>
        pub fn set_subject_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_subject_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `GetTrustAnchor`.
    ///
    /// <p>Gets a trust anchor.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:GetTrustAnchor</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct GetTrustAnchor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::get_trust_anchor_input::Builder,
    }
    impl GetTrustAnchor {
        /// Creates a new `GetTrustAnchor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::GetTrustAnchor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::GetTrustAnchorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetTrustAnchorOutput,
            aws_smithy_http::result::SdkError<crate::error::GetTrustAnchorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn trust_anchor_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.trust_anchor_id(input.into());
            self
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn set_trust_anchor_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_trust_anchor_id(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ImportCrl`.
    ///
    /// <p>Imports the certificate revocation list (CRL). CRl is a list of certificates that have been revoked by the issuing certificate Authority (CA). IAM Roles Anywhere validates against the crl list before issuing credentials. </p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:ImportCrl</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ImportCrl {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::import_crl_input::Builder,
    }
    impl ImportCrl {
        /// Creates a new `ImportCrl`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ImportCrl,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ImportCrlError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ImportCrlOutput,
            aws_smithy_http::result::SdkError<crate::error::ImportCrlError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the certificate revocation list (CRL).</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the certificate revocation list (CRL).</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The x509 v3 specified certificate revocation list</p>
        pub fn crl_data(mut self, input: aws_smithy_types::Blob) -> Self {
            self.inner = self.inner.crl_data(input);
            self
        }
        /// <p>The x509 v3 specified certificate revocation list</p>
        pub fn set_crl_data(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
            self.inner = self.inner.set_crl_data(input);
            self
        }
        /// <p>Specifies whether the certificate revocation list (CRL) is enabled.</p>
        pub fn enabled(mut self, input: bool) -> Self {
            self.inner = self.inner.enabled(input);
            self
        }
        /// <p>Specifies whether the certificate revocation list (CRL) is enabled.</p>
        pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enabled(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>A list of tags to attach to the certificate revocation list (CRL).</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>A list of tags to attach to the certificate revocation list (CRL).</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
        /// <p>The ARN of the TrustAnchor the certificate revocation list (CRL) will provide revocation for.</p>
        pub fn trust_anchor_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.trust_anchor_arn(input.into());
            self
        }
        /// <p>The ARN of the TrustAnchor the certificate revocation list (CRL) will provide revocation for.</p>
        pub fn set_trust_anchor_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_trust_anchor_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListCrls`.
    ///
    /// <p>Lists all Crls in the authenticated account and Amazon Web Services Region.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:ListCrls</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListCrls {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_crls_input::Builder,
    }
    impl ListCrls {
        /// Creates a new `ListCrls`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListCrls,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListCrlsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListCrlsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListCrlsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListCrlsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListCrlsPaginator {
            crate::paginator::ListCrlsPaginator::new(self.handle, self.inner)
        }
        /// <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of resources in the paginated list. </p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        /// <p>The number of resources in the paginated list. </p>
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListProfiles`.
    ///
    /// <p>Lists all profiles in the authenticated account and Amazon Web Services Region.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:ListProfiles</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListProfiles {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_profiles_input::Builder,
    }
    impl ListProfiles {
        /// Creates a new `ListProfiles`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListProfiles,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListProfilesError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListProfilesOutput,
            aws_smithy_http::result::SdkError<crate::error::ListProfilesError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListProfilesPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListProfilesPaginator {
            crate::paginator::ListProfilesPaginator::new(self.handle, self.inner)
        }
        /// <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of resources in the paginated list. </p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        /// <p>The number of resources in the paginated list. </p>
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListSubjects`.
    ///
    /// <p>Lists the subjects in the authenticated account and Amazon Web Services Region.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:ListSubjects</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListSubjects {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_subjects_input::Builder,
    }
    impl ListSubjects {
        /// Creates a new `ListSubjects`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListSubjects,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListSubjectsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListSubjectsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListSubjectsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListSubjectsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListSubjectsPaginator {
            crate::paginator::ListSubjectsPaginator::new(self.handle, self.inner)
        }
        /// <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of resources in the paginated list. </p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        /// <p>The number of resources in the paginated list. </p>
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTagsForResource`.
    ///
    /// <p>Lists the tags attached to the resource.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:ListTagsForResource</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListTagsForResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl ListTagsForResource {
        /// Creates a new `ListTagsForResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListTagsForResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the resource.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The ARN of the resource.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    /// Fluent builder constructing a request to `ListTrustAnchors`.
    ///
    /// <p>Lists the trust anchors in the authenticated account and Amazon Web Services Region.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:ListTrustAnchors</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct ListTrustAnchors {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::list_trust_anchors_input::Builder,
    }
    impl ListTrustAnchors {
        /// Creates a new `ListTrustAnchors`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::ListTrustAnchors,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::ListTrustAnchorsError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTrustAnchorsOutput,
            aws_smithy_http::result::SdkError<crate::error::ListTrustAnchorsError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// Create a paginator for this request
        ///
        /// Paginators are used by calling [`send().await`](crate::paginator::ListTrustAnchorsPaginator::send) which returns a `Stream`.
        pub fn into_paginator(self) -> crate::paginator::ListTrustAnchorsPaginator {
            crate::paginator::ListTrustAnchorsPaginator::new(self.handle, self.inner)
        }
        /// <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input.into());
            self
        }
        /// <p>A token that indicates where the output should continue from, if a previous operation did not show all results. To get the next results, call the operation again with this value.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The number of resources in the paginated list. </p>
        pub fn page_size(mut self, input: i32) -> Self {
            self.inner = self.inner.page_size(input);
            self
        }
        /// <p>The number of resources in the paginated list. </p>
        pub fn set_page_size(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_page_size(input);
            self
        }
    }
    /// Fluent builder constructing a request to `TagResource`.
    ///
    /// <p>Attaches tags to a resource.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:TagResource</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct TagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl TagResource {
        /// Creates a new `TagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::TagResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::TagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the resource.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The ARN of the resource.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `tags`.
        ///
        /// To override the contents of this collection use [`set_tags`](Self::set_tags).
        ///
        /// <p>The tags to attach to the resource.</p>
        pub fn tags(mut self, input: crate::model::Tag) -> Self {
            self.inner = self.inner.tags(input);
            self
        }
        /// <p>The tags to attach to the resource.</p>
        pub fn set_tags(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UntagResource`.
    ///
    /// <p>Removes tags from the resource.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:UntagResource</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UntagResource {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl UntagResource {
        /// Creates a new `UntagResource`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UntagResource,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            aws_smithy_http::result::SdkError<crate::error::UntagResourceError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The ARN of the resource.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input.into());
            self
        }
        /// <p>The ARN of the resource.</p>
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// Appends an item to `tagKeys`.
        ///
        /// To override the contents of this collection use [`set_tag_keys`](Self::set_tag_keys).
        ///
        /// <p>A list of keys. Tag keys are the unique identifiers of tags. </p>
        pub fn tag_keys(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(input.into());
            self
        }
        /// <p>A list of keys. Tag keys are the unique identifiers of tags. </p>
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateCrl`.
    ///
    /// <p>Updates the certificate revocation list (CRL). CRl is a list of certificates that have been revoked by the issuing certificate Authority (CA). IAM Roles Anywhere validates against the crl list before issuing credentials.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:UpdateCrl</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateCrl {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_crl_input::Builder,
    }
    impl UpdateCrl {
        /// Creates a new `UpdateCrl`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UpdateCrl,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UpdateCrlError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateCrlOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateCrlError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn crl_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.crl_id(input.into());
            self
        }
        /// <p>The unique identifier of the certificate revocation list (CRL).</p>
        pub fn set_crl_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_crl_id(input);
            self
        }
        /// <p>The name of the Crl.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the Crl.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The x509 v3 specified certificate revocation list</p>
        pub fn crl_data(mut self, input: aws_smithy_types::Blob) -> Self {
            self.inner = self.inner.crl_data(input);
            self
        }
        /// <p>The x509 v3 specified certificate revocation list</p>
        pub fn set_crl_data(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
            self.inner = self.inner.set_crl_data(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateProfile`.
    ///
    /// <p>Updates the profile. A profile is configuration resource to list the roles that RolesAnywhere service is trusted to assume. In addition, by applying a profile you can scope-down permissions with IAM managed policies.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:UpdateProfile</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateProfile {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_profile_input::Builder,
    }
    impl UpdateProfile {
        /// Creates a new `UpdateProfile`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UpdateProfile,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UpdateProfileError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateProfileOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateProfileError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn profile_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.profile_id(input.into());
            self
        }
        /// <p>The unique identifier of the profile.</p>
        pub fn set_profile_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_profile_id(input);
            self
        }
        /// <p>The name of the profile.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the profile.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
        pub fn session_policy(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session_policy(input.into());
            self
        }
        /// <p>A session policy that applies to the trust boundary of the vended session credentials. </p>
        pub fn set_session_policy(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_session_policy(input);
            self
        }
        /// Appends an item to `roleArns`.
        ///
        /// To override the contents of this collection use [`set_role_arns`](Self::set_role_arns).
        ///
        /// <p>A list of IAM roles that this profile can assume in a <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> operation.</p>
        pub fn role_arns(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arns(input.into());
            self
        }
        /// <p>A list of IAM roles that this profile can assume in a <a href="https://docs.aws.amazon.com/rolesanywhere/latest/APIReference/API_CreateSession.html">CreateSession</a> operation.</p>
        pub fn set_role_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_role_arns(input);
            self
        }
        /// Appends an item to `managedPolicyArns`.
        ///
        /// To override the contents of this collection use [`set_managed_policy_arns`](Self::set_managed_policy_arns).
        ///
        /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
        pub fn managed_policy_arns(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.managed_policy_arns(input.into());
            self
        }
        /// <p>A list of managed policy ARNs that apply to the vended session credentials. </p>
        pub fn set_managed_policy_arns(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_managed_policy_arns(input);
            self
        }
        /// <p> The number of seconds the vended session credentials are valid for. </p>
        pub fn duration_seconds(mut self, input: i32) -> Self {
            self.inner = self.inner.duration_seconds(input);
            self
        }
        /// <p> The number of seconds the vended session credentials are valid for. </p>
        pub fn set_duration_seconds(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_duration_seconds(input);
            self
        }
    }
    /// Fluent builder constructing a request to `UpdateTrustAnchor`.
    ///
    /// <p>Updates the trust anchor.You establish trust between IAM Roles Anywhere and your certificate authority (CA) by configuring a trust anchor. A Trust Anchor is defined either as a reference to a AWS Certificate Manager Private Certificate Authority (ACM PCA), or by uploading a Certificate Authority (CA) certificate. Your AWS workloads can authenticate with the trust anchor using certificates issued by the trusted Certificate Authority (CA) in exchange for temporary AWS credentials.</p>
    /// <p> <b>Required permissions: </b> <code>rolesanywhere:UpdateTrustAnchor</code>. </p>
    #[derive(std::clone::Clone, std::fmt::Debug)]
    pub struct UpdateTrustAnchor {
        handle: std::sync::Arc<super::Handle>,
        inner: crate::input::update_trust_anchor_input::Builder,
    }
    impl UpdateTrustAnchor {
        /// Creates a new `UpdateTrustAnchor`.
        pub(crate) fn new(handle: std::sync::Arc<super::Handle>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        /// Consume this builder, creating a customizable operation that can be modified before being
        /// sent. The operation's inner [http::Request] can be modified as well.
        pub async fn customize(
            self,
        ) -> std::result::Result<
            crate::operation::customize::CustomizableOperation<
                crate::operation::UpdateTrustAnchor,
                aws_http::retry::AwsResponseRetryClassifier,
            >,
            aws_smithy_http::result::SdkError<crate::error::UpdateTrustAnchorError>,
        > {
            let handle = self.handle.clone();
            let operation = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            Ok(crate::operation::customize::CustomizableOperation { handle, operation })
        }

        /// Sends the request and returns the response.
        ///
        /// If an error occurs, an `SdkError` will be returned with additional details that
        /// can be matched against.
        ///
        /// By default, any retryable failures will be retried twice. Retry behavior
        /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
        /// set when configuring the client.
        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateTrustAnchorOutput,
            aws_smithy_http::result::SdkError<crate::error::UpdateTrustAnchorError>,
        > {
            let op = self
                .inner
                .build()
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?
                .make_operation(&self.handle.conf)
                .await
                .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
            self.handle.client.call(op).await
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn trust_anchor_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.trust_anchor_id(input.into());
            self
        }
        /// <p>The unique identifier of the trust anchor.</p>
        pub fn set_trust_anchor_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_trust_anchor_id(input);
            self
        }
        /// <p>The name of the trust anchor.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input.into());
            self
        }
        /// <p>The name of the trust anchor.</p>
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The trust anchor type and its related certificate data.</p>
        pub fn source(mut self, input: crate::model::Source) -> Self {
            self.inner = self.inner.source(input);
            self
        }
        /// <p>The trust anchor type and its related certificate data.</p>
        pub fn set_source(mut self, input: std::option::Option<crate::model::Source>) -> Self {
            self.inner = self.inner.set_source(input);
            self
        }
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
