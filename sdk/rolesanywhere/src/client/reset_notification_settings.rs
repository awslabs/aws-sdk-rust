// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ResetNotificationSettings`](crate::operation::reset_notification_settings::builders::ResetNotificationSettingsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`trust_anchor_id(impl Into<String>)`](crate::operation::reset_notification_settings::builders::ResetNotificationSettingsFluentBuilder::trust_anchor_id) / [`set_trust_anchor_id(Option<String>)`](crate::operation::reset_notification_settings::builders::ResetNotificationSettingsFluentBuilder::set_trust_anchor_id):<br>required: **true**<br><p>The unique identifier of the trust anchor.</p><br>
    ///   - [`notification_setting_keys(NotificationSettingKey)`](crate::operation::reset_notification_settings::builders::ResetNotificationSettingsFluentBuilder::notification_setting_keys) / [`set_notification_setting_keys(Option<Vec::<NotificationSettingKey>>)`](crate::operation::reset_notification_settings::builders::ResetNotificationSettingsFluentBuilder::set_notification_setting_keys):<br>required: **true**<br><p>A list of notification setting keys to reset. A notification setting key includes the event and the channel. </p><br>
    /// - On success, responds with [`ResetNotificationSettingsOutput`](crate::operation::reset_notification_settings::ResetNotificationSettingsOutput) with field(s):
    ///   - [`trust_anchor(Option<TrustAnchorDetail>)`](crate::operation::reset_notification_settings::ResetNotificationSettingsOutput::trust_anchor): <p>The state of the trust anchor after a read or write operation. </p>
    /// - On failure, responds with [`SdkError<ResetNotificationSettingsError>`](crate::operation::reset_notification_settings::ResetNotificationSettingsError)
    pub fn reset_notification_settings(&self) -> crate::operation::reset_notification_settings::builders::ResetNotificationSettingsFluentBuilder {
        crate::operation::reset_notification_settings::builders::ResetNotificationSettingsFluentBuilder::new(self.handle.clone())
    }
}
