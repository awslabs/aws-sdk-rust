// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ImportCrlInput {
    /// <p>The name of the certificate revocation list (CRL).</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The x509 v3 specified certificate revocation list</p>
    #[doc(hidden)]
    pub crl_data: std::option::Option<aws_smithy_types::Blob>,
    /// <p>Specifies whether the certificate revocation list (CRL) is enabled.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
    /// <p>A list of tags to attach to the certificate revocation list (CRL).</p>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    /// <p>The ARN of the TrustAnchor the certificate revocation list (CRL) will provide revocation for.</p>
    #[doc(hidden)]
    pub trust_anchor_arn: std::option::Option<std::string::String>,
}
impl ImportCrlInput {
    /// <p>The name of the certificate revocation list (CRL).</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The x509 v3 specified certificate revocation list</p>
    pub fn crl_data(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.crl_data.as_ref()
    }
    /// <p>Specifies whether the certificate revocation list (CRL) is enabled.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
    /// <p>A list of tags to attach to the certificate revocation list (CRL).</p>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
    /// <p>The ARN of the TrustAnchor the certificate revocation list (CRL) will provide revocation for.</p>
    pub fn trust_anchor_arn(&self) -> std::option::Option<&str> {
        self.trust_anchor_arn.as_deref()
    }
}
impl ImportCrlInput {
    /// Creates a new builder-style object to manufacture [`ImportCrlInput`](crate::operation::import_crl::ImportCrlInput).
    pub fn builder() -> crate::operation::import_crl::builders::ImportCrlInputBuilder {
        crate::operation::import_crl::builders::ImportCrlInputBuilder::default()
    }
}

/// A builder for [`ImportCrlInput`](crate::operation::import_crl::ImportCrlInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImportCrlInputBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) crl_data: std::option::Option<aws_smithy_types::Blob>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    pub(crate) trust_anchor_arn: std::option::Option<std::string::String>,
}
impl ImportCrlInputBuilder {
    /// <p>The name of the certificate revocation list (CRL).</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the certificate revocation list (CRL).</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The x509 v3 specified certificate revocation list</p>
    pub fn crl_data(mut self, input: aws_smithy_types::Blob) -> Self {
        self.crl_data = Some(input);
        self
    }
    /// <p>The x509 v3 specified certificate revocation list</p>
    pub fn set_crl_data(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.crl_data = input;
        self
    }
    /// <p>Specifies whether the certificate revocation list (CRL) is enabled.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Specifies whether the certificate revocation list (CRL) is enabled.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags to attach to the certificate revocation list (CRL).</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of tags to attach to the certificate revocation list (CRL).</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// <p>The ARN of the TrustAnchor the certificate revocation list (CRL) will provide revocation for.</p>
    pub fn trust_anchor_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.trust_anchor_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the TrustAnchor the certificate revocation list (CRL) will provide revocation for.</p>
    pub fn set_trust_anchor_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.trust_anchor_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`ImportCrlInput`](crate::operation::import_crl::ImportCrlInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::import_crl::ImportCrlInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::import_crl::ImportCrlInput {
            name: self.name,
            crl_data: self.crl_data,
            enabled: self.enabled,
            tags: self.tags,
            trust_anchor_arn: self.trust_anchor_arn,
        })
    }
}
