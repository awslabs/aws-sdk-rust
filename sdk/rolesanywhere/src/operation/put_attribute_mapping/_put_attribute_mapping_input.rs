// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutAttributeMappingInput {
    /// <p>The unique identifier of the profile.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    pub certificate_field: ::std::option::Option<crate::types::CertificateField>,
    /// <p>A list of mapping entries for every supported specifier or sub-field.</p>
    pub mapping_rules: ::std::option::Option<::std::vec::Vec<crate::types::MappingRule>>,
}
impl PutAttributeMappingInput {
    /// <p>The unique identifier of the profile.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    pub fn certificate_field(&self) -> ::std::option::Option<&crate::types::CertificateField> {
        self.certificate_field.as_ref()
    }
    /// <p>A list of mapping entries for every supported specifier or sub-field.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.mapping_rules.is_none()`.
    pub fn mapping_rules(&self) -> &[crate::types::MappingRule] {
        self.mapping_rules.as_deref().unwrap_or_default()
    }
}
impl PutAttributeMappingInput {
    /// Creates a new builder-style object to manufacture [`PutAttributeMappingInput`](crate::operation::put_attribute_mapping::PutAttributeMappingInput).
    pub fn builder() -> crate::operation::put_attribute_mapping::builders::PutAttributeMappingInputBuilder {
        crate::operation::put_attribute_mapping::builders::PutAttributeMappingInputBuilder::default()
    }
}

/// A builder for [`PutAttributeMappingInput`](crate::operation::put_attribute_mapping::PutAttributeMappingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutAttributeMappingInputBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_field: ::std::option::Option<crate::types::CertificateField>,
    pub(crate) mapping_rules: ::std::option::Option<::std::vec::Vec<crate::types::MappingRule>>,
}
impl PutAttributeMappingInputBuilder {
    /// <p>The unique identifier of the profile.</p>
    /// This field is required.
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the profile.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The unique identifier of the profile.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    /// This field is required.
    pub fn certificate_field(mut self, input: crate::types::CertificateField) -> Self {
        self.certificate_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    pub fn set_certificate_field(mut self, input: ::std::option::Option<crate::types::CertificateField>) -> Self {
        self.certificate_field = input;
        self
    }
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    pub fn get_certificate_field(&self) -> &::std::option::Option<crate::types::CertificateField> {
        &self.certificate_field
    }
    /// Appends an item to `mapping_rules`.
    ///
    /// To override the contents of this collection use [`set_mapping_rules`](Self::set_mapping_rules).
    ///
    /// <p>A list of mapping entries for every supported specifier or sub-field.</p>
    pub fn mapping_rules(mut self, input: crate::types::MappingRule) -> Self {
        let mut v = self.mapping_rules.unwrap_or_default();
        v.push(input);
        self.mapping_rules = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of mapping entries for every supported specifier or sub-field.</p>
    pub fn set_mapping_rules(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MappingRule>>) -> Self {
        self.mapping_rules = input;
        self
    }
    /// <p>A list of mapping entries for every supported specifier or sub-field.</p>
    pub fn get_mapping_rules(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MappingRule>> {
        &self.mapping_rules
    }
    /// Consumes the builder and constructs a [`PutAttributeMappingInput`](crate::operation::put_attribute_mapping::PutAttributeMappingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::put_attribute_mapping::PutAttributeMappingInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::put_attribute_mapping::PutAttributeMappingInput {
            profile_id: self.profile_id,
            certificate_field: self.certificate_field,
            mapping_rules: self.mapping_rules,
        })
    }
}
