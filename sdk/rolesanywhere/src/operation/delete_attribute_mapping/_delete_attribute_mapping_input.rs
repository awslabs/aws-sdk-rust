// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteAttributeMappingInput {
    /// <p>The unique identifier of the profile.</p>
    pub profile_id: ::std::option::Option<::std::string::String>,
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    pub certificate_field: ::std::option::Option<crate::types::CertificateField>,
    /// <p>A list of specifiers of a certificate field; for example, CN, OU, UID from a Subject.</p>
    pub specifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DeleteAttributeMappingInput {
    /// <p>The unique identifier of the profile.</p>
    pub fn profile_id(&self) -> ::std::option::Option<&str> {
        self.profile_id.as_deref()
    }
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    pub fn certificate_field(&self) -> ::std::option::Option<&crate::types::CertificateField> {
        self.certificate_field.as_ref()
    }
    /// <p>A list of specifiers of a certificate field; for example, CN, OU, UID from a Subject.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.specifiers.is_none()`.
    pub fn specifiers(&self) -> &[::std::string::String] {
        self.specifiers.as_deref().unwrap_or_default()
    }
}
impl DeleteAttributeMappingInput {
    /// Creates a new builder-style object to manufacture [`DeleteAttributeMappingInput`](crate::operation::delete_attribute_mapping::DeleteAttributeMappingInput).
    pub fn builder() -> crate::operation::delete_attribute_mapping::builders::DeleteAttributeMappingInputBuilder {
        crate::operation::delete_attribute_mapping::builders::DeleteAttributeMappingInputBuilder::default()
    }
}

/// A builder for [`DeleteAttributeMappingInput`](crate::operation::delete_attribute_mapping::DeleteAttributeMappingInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteAttributeMappingInputBuilder {
    pub(crate) profile_id: ::std::option::Option<::std::string::String>,
    pub(crate) certificate_field: ::std::option::Option<crate::types::CertificateField>,
    pub(crate) specifiers: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl DeleteAttributeMappingInputBuilder {
    /// <p>The unique identifier of the profile.</p>
    /// This field is required.
    pub fn profile_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.profile_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the profile.</p>
    pub fn set_profile_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.profile_id = input;
        self
    }
    /// <p>The unique identifier of the profile.</p>
    pub fn get_profile_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.profile_id
    }
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    /// This field is required.
    pub fn certificate_field(mut self, input: crate::types::CertificateField) -> Self {
        self.certificate_field = ::std::option::Option::Some(input);
        self
    }
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    pub fn set_certificate_field(mut self, input: ::std::option::Option<crate::types::CertificateField>) -> Self {
        self.certificate_field = input;
        self
    }
    /// <p>Fields (x509Subject, x509Issuer and x509SAN) within X.509 certificates.</p>
    pub fn get_certificate_field(&self) -> &::std::option::Option<crate::types::CertificateField> {
        &self.certificate_field
    }
    /// Appends an item to `specifiers`.
    ///
    /// To override the contents of this collection use [`set_specifiers`](Self::set_specifiers).
    ///
    /// <p>A list of specifiers of a certificate field; for example, CN, OU, UID from a Subject.</p>
    pub fn specifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.specifiers.unwrap_or_default();
        v.push(input.into());
        self.specifiers = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of specifiers of a certificate field; for example, CN, OU, UID from a Subject.</p>
    pub fn set_specifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.specifiers = input;
        self
    }
    /// <p>A list of specifiers of a certificate field; for example, CN, OU, UID from a Subject.</p>
    pub fn get_specifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.specifiers
    }
    /// Consumes the builder and constructs a [`DeleteAttributeMappingInput`](crate::operation::delete_attribute_mapping::DeleteAttributeMappingInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::delete_attribute_mapping::DeleteAttributeMappingInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::delete_attribute_mapping::DeleteAttributeMappingInput {
            profile_id: self.profile_id,
            certificate_field: self.certificate_field,
            specifiers: self.specifiers,
        })
    }
}
