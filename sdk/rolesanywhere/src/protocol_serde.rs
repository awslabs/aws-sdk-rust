// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::aws_smithy_runtime_api::http::Headers,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_profile;

pub(crate) mod shape_create_trust_anchor;

pub(crate) mod shape_delete_attribute_mapping;

pub(crate) mod shape_delete_crl;

pub(crate) mod shape_delete_profile;

pub(crate) mod shape_delete_trust_anchor;

pub(crate) mod shape_disable_crl;

pub(crate) mod shape_disable_profile;

pub(crate) mod shape_disable_trust_anchor;

pub(crate) mod shape_enable_crl;

pub(crate) mod shape_enable_profile;

pub(crate) mod shape_enable_trust_anchor;

pub(crate) mod shape_get_crl;

pub(crate) mod shape_get_profile;

pub(crate) mod shape_get_subject;

pub(crate) mod shape_get_trust_anchor;

pub(crate) mod shape_import_crl;

pub(crate) mod shape_list_crls;

pub(crate) mod shape_list_profiles;

pub(crate) mod shape_list_subjects;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_list_trust_anchors;

pub(crate) mod shape_put_attribute_mapping;

pub(crate) mod shape_put_notification_settings;

pub(crate) mod shape_reset_notification_settings;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_crl;

pub(crate) mod shape_update_profile;

pub(crate) mod shape_update_trust_anchor;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_access_denied_exception;

pub(crate) mod shape_create_profile_input;

pub(crate) mod shape_create_trust_anchor_input;

pub(crate) mod shape_import_crl_input;

pub(crate) mod shape_put_attribute_mapping_input;

pub(crate) mod shape_put_notification_settings_input;

pub(crate) mod shape_reset_notification_settings_input;

pub(crate) mod shape_resource_not_found_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_too_many_tags_exception;

pub(crate) mod shape_untag_resource_input;

pub(crate) mod shape_update_crl_input;

pub(crate) mod shape_update_profile_input;

pub(crate) mod shape_update_trust_anchor_input;

pub(crate) mod shape_validation_exception;

pub(crate) mod shape_crl_detail;

pub(crate) mod shape_crl_details;

pub(crate) mod shape_mapping_rule;

pub(crate) mod shape_notification_setting;

pub(crate) mod shape_notification_setting_key;

pub(crate) mod shape_profile_detail;

pub(crate) mod shape_profile_details;

pub(crate) mod shape_source;

pub(crate) mod shape_subject_detail;

pub(crate) mod shape_subject_summaries;

pub(crate) mod shape_tag;

pub(crate) mod shape_tag_list;

pub(crate) mod shape_trust_anchor_detail;

pub(crate) mod shape_trust_anchor_details;

pub(crate) mod shape_attribute_mappings;

pub(crate) mod shape_credential_summaries;

pub(crate) mod shape_instance_properties;

pub(crate) mod shape_managed_policy_list;

pub(crate) mod shape_notification_setting_details;

pub(crate) mod shape_role_arn_list;

pub(crate) mod shape_source_data;

pub(crate) mod shape_subject_summary;

pub(crate) mod shape_attribute_mapping;

pub(crate) mod shape_credential_summary;

pub(crate) mod shape_instance_property;

pub(crate) mod shape_notification_setting_detail;

pub(crate) mod shape_instance_property_map;

pub(crate) mod shape_mapping_rules;
