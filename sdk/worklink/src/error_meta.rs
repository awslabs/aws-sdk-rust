// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The service is temporarily unavailable.</p>
    InternalServerErrorException(crate::error::InternalServerErrorException),
    /// <p>The request is not valid.</p>
    InvalidRequestException(crate::error::InvalidRequestException),
    /// <p>The resource already exists.</p>
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    /// <p>The requested resource was not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The number of requests exceeds the limit.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>You are not authorized to perform this action.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::InvalidRequestException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssociateDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateDomainError> for Error {
    fn from(err: crate::error::AssociateDomainError) -> Self {
        match err {
            crate::error::AssociateDomainError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::AssociateDomainError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::AssociateDomainError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::AssociateDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateDomainError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AssociateDomainError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::AssociateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociateWebsiteAuthorizationProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateWebsiteAuthorizationProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateWebsiteAuthorizationProviderError> for Error {
    fn from(err: crate::error::AssociateWebsiteAuthorizationProviderError) -> Self {
        match err {
            crate::error::AssociateWebsiteAuthorizationProviderError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::AssociateWebsiteAuthorizationProviderError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::AssociateWebsiteAuthorizationProviderError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::AssociateWebsiteAuthorizationProviderError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AssociateWebsiteAuthorizationProviderError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::AssociateWebsiteAuthorizationProviderError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::AssociateWebsiteAuthorizationProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::AssociateWebsiteCertificateAuthorityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::AssociateWebsiteCertificateAuthorityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateWebsiteCertificateAuthorityError> for Error {
    fn from(err: crate::error::AssociateWebsiteCertificateAuthorityError) -> Self {
        match err {
            crate::error::AssociateWebsiteCertificateAuthorityError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::AssociateWebsiteCertificateAuthorityError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::AssociateWebsiteCertificateAuthorityError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::AssociateWebsiteCertificateAuthorityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AssociateWebsiteCertificateAuthorityError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::AssociateWebsiteCertificateAuthorityError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::AssociateWebsiteCertificateAuthorityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFleetError> for Error {
    fn from(err: crate::error::CreateFleetError) -> Self {
        match err {
            crate::error::CreateFleetError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::CreateFleetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::CreateFleetError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateFleetError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateFleetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::CreateFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFleetError> for Error {
    fn from(err: crate::error::DeleteFleetError) -> Self {
        match err {
            crate::error::DeleteFleetError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DeleteFleetError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DeleteFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteFleetError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteFleetError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DeleteFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeAuditStreamConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAuditStreamConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAuditStreamConfigurationError> for Error {
    fn from(err: crate::error::DescribeAuditStreamConfigurationError) -> Self {
        match err {
            crate::error::DescribeAuditStreamConfigurationError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::DescribeAuditStreamConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeAuditStreamConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeAuditStreamConfigurationError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::DescribeAuditStreamConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeAuditStreamConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeCompanyNetworkConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeCompanyNetworkConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCompanyNetworkConfigurationError> for Error {
    fn from(err: crate::error::DescribeCompanyNetworkConfigurationError) -> Self {
        match err {
            crate::error::DescribeCompanyNetworkConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DescribeCompanyNetworkConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeCompanyNetworkConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeCompanyNetworkConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::DescribeCompanyNetworkConfigurationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::DescribeCompanyNetworkConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDeviceError> for Error {
    fn from(err: crate::error::DescribeDeviceError) -> Self {
        match err {
            crate::error::DescribeDeviceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeDeviceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeDeviceError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeDevicePolicyConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeDevicePolicyConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDevicePolicyConfigurationError> for Error {
    fn from(err: crate::error::DescribeDevicePolicyConfigurationError) -> Self {
        match err {
            crate::error::DescribeDevicePolicyConfigurationError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::DescribeDevicePolicyConfigurationError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::DescribeDevicePolicyConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeDevicePolicyConfigurationError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::DescribeDevicePolicyConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeDevicePolicyConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDomainError> for Error {
    fn from(err: crate::error::DescribeDomainError) -> Self {
        match err {
            crate::error::DescribeDomainError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeDomainError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDomainError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeDomainError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetMetadataError> for Error {
    fn from(err: crate::error::DescribeFleetMetadataError) -> Self {
        match err {
            crate::error::DescribeFleetMetadataError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DescribeFleetMetadataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DescribeFleetMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeFleetMetadataError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeFleetMetadataError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DescribeFleetMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeIdentityProviderConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeIdentityProviderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIdentityProviderConfigurationError> for Error {
    fn from(err: crate::error::DescribeIdentityProviderConfigurationError) -> Self {
        match err {
            crate::error::DescribeIdentityProviderConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DescribeIdentityProviderConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeIdentityProviderConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeIdentityProviderConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::DescribeIdentityProviderConfigurationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::DescribeIdentityProviderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeWebsiteCertificateAuthorityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeWebsiteCertificateAuthorityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWebsiteCertificateAuthorityError> for Error {
    fn from(err: crate::error::DescribeWebsiteCertificateAuthorityError) -> Self {
        match err {
            crate::error::DescribeWebsiteCertificateAuthorityError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DescribeWebsiteCertificateAuthorityError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DescribeWebsiteCertificateAuthorityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeWebsiteCertificateAuthorityError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::DescribeWebsiteCertificateAuthorityError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::DescribeWebsiteCertificateAuthorityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateDomainError> for Error {
    fn from(err: crate::error::DisassociateDomainError) -> Self {
        match err {
            crate::error::DisassociateDomainError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::DisassociateDomainError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::DisassociateDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateDomainError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DisassociateDomainError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::DisassociateDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateWebsiteAuthorizationProviderError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateWebsiteAuthorizationProviderError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateWebsiteAuthorizationProviderError> for Error {
    fn from(err: crate::error::DisassociateWebsiteAuthorizationProviderError) -> Self {
        match err {
            crate::error::DisassociateWebsiteAuthorizationProviderError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DisassociateWebsiteAuthorizationProviderError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DisassociateWebsiteAuthorizationProviderError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::DisassociateWebsiteAuthorizationProviderError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateWebsiteAuthorizationProviderError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::DisassociateWebsiteAuthorizationProviderError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::DisassociateWebsiteAuthorizationProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DisassociateWebsiteCertificateAuthorityError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateWebsiteCertificateAuthorityError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateWebsiteCertificateAuthorityError> for Error {
    fn from(err: crate::error::DisassociateWebsiteCertificateAuthorityError) -> Self {
        match err {
            crate::error::DisassociateWebsiteCertificateAuthorityError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::DisassociateWebsiteCertificateAuthorityError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::DisassociateWebsiteCertificateAuthorityError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DisassociateWebsiteCertificateAuthorityError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::DisassociateWebsiteCertificateAuthorityError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::DisassociateWebsiteCertificateAuthorityError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDevicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDevicesError> for Error {
    fn from(err: crate::error::ListDevicesError) -> Self {
        match err {
            crate::error::ListDevicesError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListDevicesError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListDevicesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDevicesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListDevicesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDomainsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDomainsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDomainsError> for Error {
    fn from(err: crate::error::ListDomainsError) -> Self {
        match err {
            crate::error::ListDomainsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListDomainsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListDomainsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDomainsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListDomainsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListDomainsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFleetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFleetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFleetsError> for Error {
    fn from(err: crate::error::ListFleetsError) -> Self {
        match err {
            crate::error::ListFleetsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::ListFleetsError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListFleetsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListFleetsError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListFleetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListWebsiteAuthorizationProvidersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListWebsiteAuthorizationProvidersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWebsiteAuthorizationProvidersError> for Error {
    fn from(err: crate::error::ListWebsiteAuthorizationProvidersError) -> Self {
        match err {
            crate::error::ListWebsiteAuthorizationProvidersError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::ListWebsiteAuthorizationProvidersError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::ListWebsiteAuthorizationProvidersError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::ListWebsiteAuthorizationProvidersError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::ListWebsiteAuthorizationProvidersError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListWebsiteAuthorizationProvidersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListWebsiteCertificateAuthoritiesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListWebsiteCertificateAuthoritiesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWebsiteCertificateAuthoritiesError> for Error {
    fn from(err: crate::error::ListWebsiteCertificateAuthoritiesError) -> Self {
        match err {
            crate::error::ListWebsiteCertificateAuthoritiesError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::ListWebsiteCertificateAuthoritiesError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::ListWebsiteCertificateAuthoritiesError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::ListWebsiteCertificateAuthoritiesError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::ListWebsiteCertificateAuthoritiesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestoreDomainAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestoreDomainAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestoreDomainAccessError> for Error {
    fn from(err: crate::error::RestoreDomainAccessError) -> Self {
        match err {
            crate::error::RestoreDomainAccessError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::RestoreDomainAccessError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::RestoreDomainAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RestoreDomainAccessError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::RestoreDomainAccessError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::RestoreDomainAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RevokeDomainAccessError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RevokeDomainAccessError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RevokeDomainAccessError> for Error {
    fn from(err: crate::error::RevokeDomainAccessError) -> Self {
        match err {
            crate::error::RevokeDomainAccessError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::RevokeDomainAccessError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::RevokeDomainAccessError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RevokeDomainAccessError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::RevokeDomainAccessError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::RevokeDomainAccessError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SignOutUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SignOutUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SignOutUserError> for Error {
    fn from(err: crate::error::SignOutUserError) -> Self {
        match err {
            crate::error::SignOutUserError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::SignOutUserError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::SignOutUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SignOutUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SignOutUserError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::SignOutUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateAuditStreamConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateAuditStreamConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAuditStreamConfigurationError> for Error {
    fn from(err: crate::error::UpdateAuditStreamConfigurationError) -> Self {
        match err {
            crate::error::UpdateAuditStreamConfigurationError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::UpdateAuditStreamConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateAuditStreamConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAuditStreamConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateAuditStreamConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateAuditStreamConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateCompanyNetworkConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateCompanyNetworkConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateCompanyNetworkConfigurationError> for Error {
    fn from(err: crate::error::UpdateCompanyNetworkConfigurationError) -> Self {
        match err {
            crate::error::UpdateCompanyNetworkConfigurationError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::UpdateCompanyNetworkConfigurationError::InvalidRequestException(
                inner,
            ) => Error::InvalidRequestException(inner),
            crate::error::UpdateCompanyNetworkConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateCompanyNetworkConfigurationError::TooManyRequestsException(
                inner,
            ) => Error::TooManyRequestsException(inner),
            crate::error::UpdateCompanyNetworkConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateCompanyNetworkConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateDevicePolicyConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateDevicePolicyConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDevicePolicyConfigurationError> for Error {
    fn from(err: crate::error::UpdateDevicePolicyConfigurationError) -> Self {
        match err {
            crate::error::UpdateDevicePolicyConfigurationError::InternalServerErrorException(
                inner,
            ) => Error::InternalServerErrorException(inner),
            crate::error::UpdateDevicePolicyConfigurationError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateDevicePolicyConfigurationError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateDevicePolicyConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateDevicePolicyConfigurationError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateDevicePolicyConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDomainMetadataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDomainMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDomainMetadataError> for Error {
    fn from(err: crate::error::UpdateDomainMetadataError) -> Self {
        match err {
            crate::error::UpdateDomainMetadataError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateDomainMetadataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateDomainMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDomainMetadataError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateDomainMetadataError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateDomainMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFleetMetadataError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFleetMetadataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFleetMetadataError> for Error {
    fn from(err: crate::error::UpdateFleetMetadataError) -> Self {
        match err {
            crate::error::UpdateFleetMetadataError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::error::UpdateFleetMetadataError::InvalidRequestException(inner) => {
                Error::InvalidRequestException(inner)
            }
            crate::error::UpdateFleetMetadataError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateFleetMetadataError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateFleetMetadataError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::UpdateFleetMetadataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateIdentityProviderConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateIdentityProviderConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIdentityProviderConfigurationError> for Error {
    fn from(err: crate::error::UpdateIdentityProviderConfigurationError) -> Self {
        match err {
            crate::error::UpdateIdentityProviderConfigurationError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::error::UpdateIdentityProviderConfigurationError::InvalidRequestException(inner) => Error::InvalidRequestException(inner),
            crate::error::UpdateIdentityProviderConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateIdentityProviderConfigurationError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::UpdateIdentityProviderConfigurationError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::error::UpdateIdentityProviderConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::InvalidRequestException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
