// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateWebsiteAuthorizationProviderInput {
    /// <p>The ARN of the fleet.</p>
    #[doc(hidden)]
    pub fleet_arn: std::option::Option<std::string::String>,
    /// <p>The authorization provider type.</p>
    #[doc(hidden)]
    pub authorization_provider_type: std::option::Option<crate::types::AuthorizationProviderType>,
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
}
impl AssociateWebsiteAuthorizationProviderInput {
    /// <p>The ARN of the fleet.</p>
    pub fn fleet_arn(&self) -> std::option::Option<&str> {
        self.fleet_arn.as_deref()
    }
    /// <p>The authorization provider type.</p>
    pub fn authorization_provider_type(
        &self,
    ) -> std::option::Option<&crate::types::AuthorizationProviderType> {
        self.authorization_provider_type.as_ref()
    }
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
}
impl AssociateWebsiteAuthorizationProviderInput {
    /// Creates a new builder-style object to manufacture [`AssociateWebsiteAuthorizationProviderInput`](crate::operation::associate_website_authorization_provider::AssociateWebsiteAuthorizationProviderInput).
    pub fn builder() -> crate::operation::associate_website_authorization_provider::builders::AssociateWebsiteAuthorizationProviderInputBuilder{
        crate::operation::associate_website_authorization_provider::builders::AssociateWebsiteAuthorizationProviderInputBuilder::default()
    }
}

/// A builder for [`AssociateWebsiteAuthorizationProviderInput`](crate::operation::associate_website_authorization_provider::AssociateWebsiteAuthorizationProviderInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateWebsiteAuthorizationProviderInputBuilder {
    pub(crate) fleet_arn: std::option::Option<std::string::String>,
    pub(crate) authorization_provider_type:
        std::option::Option<crate::types::AuthorizationProviderType>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
}
impl AssociateWebsiteAuthorizationProviderInputBuilder {
    /// <p>The ARN of the fleet.</p>
    pub fn fleet_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the fleet.</p>
    pub fn set_fleet_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet_arn = input;
        self
    }
    /// <p>The authorization provider type.</p>
    pub fn authorization_provider_type(
        mut self,
        input: crate::types::AuthorizationProviderType,
    ) -> Self {
        self.authorization_provider_type = Some(input);
        self
    }
    /// <p>The authorization provider type.</p>
    pub fn set_authorization_provider_type(
        mut self,
        input: std::option::Option<crate::types::AuthorizationProviderType>,
    ) -> Self {
        self.authorization_provider_type = input;
        self
    }
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateWebsiteAuthorizationProviderInput`](crate::operation::associate_website_authorization_provider::AssociateWebsiteAuthorizationProviderInput).
    pub fn build(self) -> Result<crate::operation::associate_website_authorization_provider::AssociateWebsiteAuthorizationProviderInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::associate_website_authorization_provider::AssociateWebsiteAuthorizationProviderInput {
                fleet_arn: self.fleet_arn
                ,
                authorization_provider_type: self.authorization_provider_type
                ,
                domain_name: self.domain_name
                ,
            }
        )
    }
}
