// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AssociateDomainInput {
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    #[doc(hidden)]
    pub fleet_arn: std::option::Option<std::string::String>,
    /// <p>The fully qualified domain name (FQDN).</p>
    #[doc(hidden)]
    pub domain_name: std::option::Option<std::string::String>,
    /// <p>The name to display.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The ARN of an issued ACM certificate that is valid for the domain being associated.</p>
    #[doc(hidden)]
    pub acm_certificate_arn: std::option::Option<std::string::String>,
}
impl AssociateDomainInput {
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn fleet_arn(&self) -> std::option::Option<&str> {
        self.fleet_arn.as_deref()
    }
    /// <p>The fully qualified domain name (FQDN).</p>
    pub fn domain_name(&self) -> std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The name to display.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The ARN of an issued ACM certificate that is valid for the domain being associated.</p>
    pub fn acm_certificate_arn(&self) -> std::option::Option<&str> {
        self.acm_certificate_arn.as_deref()
    }
}
impl AssociateDomainInput {
    /// Creates a new builder-style object to manufacture [`AssociateDomainInput`](crate::operation::associate_domain::AssociateDomainInput).
    pub fn builder() -> crate::operation::associate_domain::builders::AssociateDomainInputBuilder {
        crate::operation::associate_domain::builders::AssociateDomainInputBuilder::default()
    }
}

/// A builder for [`AssociateDomainInput`](crate::operation::associate_domain::AssociateDomainInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AssociateDomainInputBuilder {
    pub(crate) fleet_arn: std::option::Option<std::string::String>,
    pub(crate) domain_name: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) acm_certificate_arn: std::option::Option<std::string::String>,
}
impl AssociateDomainInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn fleet_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn set_fleet_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet_arn = input;
        self
    }
    /// <p>The fully qualified domain name (FQDN).</p>
    pub fn domain_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_name = Some(input.into());
        self
    }
    /// <p>The fully qualified domain name (FQDN).</p>
    pub fn set_domain_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The name to display.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The name to display.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The ARN of an issued ACM certificate that is valid for the domain being associated.</p>
    pub fn acm_certificate_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.acm_certificate_arn = Some(input.into());
        self
    }
    /// <p>The ARN of an issued ACM certificate that is valid for the domain being associated.</p>
    pub fn set_acm_certificate_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.acm_certificate_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`AssociateDomainInput`](crate::operation::associate_domain::AssociateDomainInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::associate_domain::AssociateDomainInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::associate_domain::AssociateDomainInput {
            fleet_arn: self.fleet_arn,
            domain_name: self.domain_name,
            display_name: self.display_name,
            acm_certificate_arn: self.acm_certificate_arn,
        })
    }
}
