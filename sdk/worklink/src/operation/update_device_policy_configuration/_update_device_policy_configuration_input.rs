// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateDevicePolicyConfigurationInput {
    /// <p>The ARN of the fleet.</p>
    pub fleet_arn: ::std::option::Option<::std::string::String>,
    /// <p>The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.</p>
    pub device_ca_certificate: ::std::option::Option<::std::string::String>,
}
impl UpdateDevicePolicyConfigurationInput {
    /// <p>The ARN of the fleet.</p>
    pub fn fleet_arn(&self) -> ::std::option::Option<&str> {
        self.fleet_arn.as_deref()
    }
    /// <p>The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.</p>
    pub fn device_ca_certificate(&self) -> ::std::option::Option<&str> {
        self.device_ca_certificate.as_deref()
    }
}
impl UpdateDevicePolicyConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateDevicePolicyConfigurationInput`](crate::operation::update_device_policy_configuration::UpdateDevicePolicyConfigurationInput).
    pub fn builder() -> crate::operation::update_device_policy_configuration::builders::UpdateDevicePolicyConfigurationInputBuilder {
        crate::operation::update_device_policy_configuration::builders::UpdateDevicePolicyConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateDevicePolicyConfigurationInput`](crate::operation::update_device_policy_configuration::UpdateDevicePolicyConfigurationInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateDevicePolicyConfigurationInputBuilder {
    pub(crate) fleet_arn: ::std::option::Option<::std::string::String>,
    pub(crate) device_ca_certificate: ::std::option::Option<::std::string::String>,
}
impl UpdateDevicePolicyConfigurationInputBuilder {
    /// <p>The ARN of the fleet.</p>
    /// This field is required.
    pub fn fleet_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the fleet.</p>
    pub fn set_fleet_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet_arn = input;
        self
    }
    /// <p>The ARN of the fleet.</p>
    pub fn get_fleet_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet_arn
    }
    /// <p>The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.</p>
    pub fn device_ca_certificate(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.device_ca_certificate = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.</p>
    pub fn set_device_ca_certificate(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.device_ca_certificate = input;
        self
    }
    /// <p>The certificate chain, including intermediate certificates and the root certificate authority certificate used to issue device certificates.</p>
    pub fn get_device_ca_certificate(&self) -> &::std::option::Option<::std::string::String> {
        &self.device_ca_certificate
    }
    /// Consumes the builder and constructs a [`UpdateDevicePolicyConfigurationInput`](crate::operation::update_device_policy_configuration::UpdateDevicePolicyConfigurationInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_device_policy_configuration::UpdateDevicePolicyConfigurationInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_device_policy_configuration::UpdateDevicePolicyConfigurationInput {
                fleet_arn: self.fleet_arn,
                device_ca_certificate: self.device_ca_certificate,
            },
        )
    }
}
