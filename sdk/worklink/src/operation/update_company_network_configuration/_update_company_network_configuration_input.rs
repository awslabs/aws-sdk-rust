// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateCompanyNetworkConfigurationInput {
    /// <p>The ARN of the fleet.</p>
    #[doc(hidden)]
    pub fleet_arn: std::option::Option<std::string::String>,
    /// <p>The VPC with connectivity to associated websites.</p>
    #[doc(hidden)]
    pub vpc_id: std::option::Option<std::string::String>,
    /// <p>The subnets used for X-ENI connections from Amazon WorkLink rendering containers.</p>
    #[doc(hidden)]
    pub subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The security groups associated with access to the provided subnets.</p>
    #[doc(hidden)]
    pub security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpdateCompanyNetworkConfigurationInput {
    /// <p>The ARN of the fleet.</p>
    pub fn fleet_arn(&self) -> std::option::Option<&str> {
        self.fleet_arn.as_deref()
    }
    /// <p>The VPC with connectivity to associated websites.</p>
    pub fn vpc_id(&self) -> std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>The subnets used for X-ENI connections from Amazon WorkLink rendering containers.</p>
    pub fn subnet_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.subnet_ids.as_deref()
    }
    /// <p>The security groups associated with access to the provided subnets.</p>
    pub fn security_group_ids(&self) -> std::option::Option<&[std::string::String]> {
        self.security_group_ids.as_deref()
    }
}
impl UpdateCompanyNetworkConfigurationInput {
    /// Creates a new builder-style object to manufacture [`UpdateCompanyNetworkConfigurationInput`](crate::operation::update_company_network_configuration::UpdateCompanyNetworkConfigurationInput).
    pub fn builder() -> crate::operation::update_company_network_configuration::builders::UpdateCompanyNetworkConfigurationInputBuilder{
        crate::operation::update_company_network_configuration::builders::UpdateCompanyNetworkConfigurationInputBuilder::default()
    }
}

/// A builder for [`UpdateCompanyNetworkConfigurationInput`](crate::operation::update_company_network_configuration::UpdateCompanyNetworkConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateCompanyNetworkConfigurationInputBuilder {
    pub(crate) fleet_arn: std::option::Option<std::string::String>,
    pub(crate) vpc_id: std::option::Option<std::string::String>,
    pub(crate) subnet_ids: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) security_group_ids: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpdateCompanyNetworkConfigurationInputBuilder {
    /// <p>The ARN of the fleet.</p>
    pub fn fleet_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet_arn = Some(input.into());
        self
    }
    /// <p>The ARN of the fleet.</p>
    pub fn set_fleet_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet_arn = input;
        self
    }
    /// <p>The VPC with connectivity to associated websites.</p>
    pub fn vpc_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc_id = Some(input.into());
        self
    }
    /// <p>The VPC with connectivity to associated websites.</p>
    pub fn set_vpc_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// Appends an item to `subnet_ids`.
    ///
    /// To override the contents of this collection use [`set_subnet_ids`](Self::set_subnet_ids).
    ///
    /// <p>The subnets used for X-ENI connections from Amazon WorkLink rendering containers.</p>
    pub fn subnet_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.subnet_ids.unwrap_or_default();
        v.push(input.into());
        self.subnet_ids = Some(v);
        self
    }
    /// <p>The subnets used for X-ENI connections from Amazon WorkLink rendering containers.</p>
    pub fn set_subnet_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.subnet_ids = input;
        self
    }
    /// Appends an item to `security_group_ids`.
    ///
    /// To override the contents of this collection use [`set_security_group_ids`](Self::set_security_group_ids).
    ///
    /// <p>The security groups associated with access to the provided subnets.</p>
    pub fn security_group_ids(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.security_group_ids.unwrap_or_default();
        v.push(input.into());
        self.security_group_ids = Some(v);
        self
    }
    /// <p>The security groups associated with access to the provided subnets.</p>
    pub fn set_security_group_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.security_group_ids = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateCompanyNetworkConfigurationInput`](crate::operation::update_company_network_configuration::UpdateCompanyNetworkConfigurationInput).
    pub fn build(self) -> Result<crate::operation::update_company_network_configuration::UpdateCompanyNetworkConfigurationInput, aws_smithy_http::operation::error::BuildError>{
        Ok(
            crate::operation::update_company_network_configuration::UpdateCompanyNetworkConfigurationInput {
                fleet_arn: self.fleet_arn
                ,
                vpc_id: self.vpc_id
                ,
                subnet_ids: self.subnet_ids
                ,
                security_group_ids: self.security_group_ids
                ,
            }
        )
    }
}
