// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the fleet.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FleetSummary {
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    #[doc(hidden)]
    pub fleet_arn: std::option::Option<std::string::String>,
    /// <p>The time when the fleet was created.</p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The time when the fleet was last updated.</p>
    #[doc(hidden)]
    pub last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The name of the fleet.</p>
    #[doc(hidden)]
    pub fleet_name: std::option::Option<std::string::String>,
    /// <p>The name of the fleet to display.</p>
    #[doc(hidden)]
    pub display_name: std::option::Option<std::string::String>,
    /// <p>The identifier used by users to sign into the Amazon WorkLink app.</p>
    #[doc(hidden)]
    pub company_code: std::option::Option<std::string::String>,
    /// <p>The status of the fleet.</p>
    #[doc(hidden)]
    pub fleet_status: std::option::Option<crate::types::FleetStatus>,
    /// <p>The tags attached to the resource. A tag is a key-value pair.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl FleetSummary {
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn fleet_arn(&self) -> std::option::Option<&str> {
        self.fleet_arn.as_deref()
    }
    /// <p>The time when the fleet was created.</p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p>The time when the fleet was last updated.</p>
    pub fn last_updated_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_updated_time.as_ref()
    }
    /// <p>The name of the fleet.</p>
    pub fn fleet_name(&self) -> std::option::Option<&str> {
        self.fleet_name.as_deref()
    }
    /// <p>The name of the fleet to display.</p>
    pub fn display_name(&self) -> std::option::Option<&str> {
        self.display_name.as_deref()
    }
    /// <p>The identifier used by users to sign into the Amazon WorkLink app.</p>
    pub fn company_code(&self) -> std::option::Option<&str> {
        self.company_code.as_deref()
    }
    /// <p>The status of the fleet.</p>
    pub fn fleet_status(&self) -> std::option::Option<&crate::types::FleetStatus> {
        self.fleet_status.as_ref()
    }
    /// <p>The tags attached to the resource. A tag is a key-value pair.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl FleetSummary {
    /// Creates a new builder-style object to manufacture [`FleetSummary`](crate::types::FleetSummary).
    pub fn builder() -> crate::types::builders::FleetSummaryBuilder {
        crate::types::builders::FleetSummaryBuilder::default()
    }
}

/// A builder for [`FleetSummary`](crate::types::FleetSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FleetSummaryBuilder {
    pub(crate) fleet_arn: std::option::Option<std::string::String>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) last_updated_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) fleet_name: std::option::Option<std::string::String>,
    pub(crate) display_name: std::option::Option<std::string::String>,
    pub(crate) company_code: std::option::Option<std::string::String>,
    pub(crate) fleet_status: std::option::Option<crate::types::FleetStatus>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl FleetSummaryBuilder {
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn fleet_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn set_fleet_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet_arn = input;
        self
    }
    /// <p>The time when the fleet was created.</p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p>The time when the fleet was created.</p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time when the fleet was last updated.</p>
    pub fn last_updated_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_updated_time = Some(input);
        self
    }
    /// <p>The time when the fleet was last updated.</p>
    pub fn set_last_updated_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_updated_time = input;
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet_name = Some(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_fleet_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet_name = input;
        self
    }
    /// <p>The name of the fleet to display.</p>
    pub fn display_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.display_name = Some(input.into());
        self
    }
    /// <p>The name of the fleet to display.</p>
    pub fn set_display_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.display_name = input;
        self
    }
    /// <p>The identifier used by users to sign into the Amazon WorkLink app.</p>
    pub fn company_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.company_code = Some(input.into());
        self
    }
    /// <p>The identifier used by users to sign into the Amazon WorkLink app.</p>
    pub fn set_company_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.company_code = input;
        self
    }
    /// <p>The status of the fleet.</p>
    pub fn fleet_status(mut self, input: crate::types::FleetStatus) -> Self {
        self.fleet_status = Some(input);
        self
    }
    /// <p>The status of the fleet.</p>
    pub fn set_fleet_status(
        mut self,
        input: std::option::Option<crate::types::FleetStatus>,
    ) -> Self {
        self.fleet_status = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags attached to the resource. A tag is a key-value pair.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The tags attached to the resource. A tag is a key-value pair.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`FleetSummary`](crate::types::FleetSummary).
    pub fn build(self) -> crate::types::FleetSummary {
        crate::types::FleetSummary {
            fleet_arn: self.fleet_arn,
            created_time: self.created_time,
            last_updated_time: self.last_updated_time,
            fleet_name: self.fleet_name,
            display_name: self.display_name,
            company_code: self.company_code,
            fleet_status: self.fleet_status,
            tags: self.tags,
        }
    }
}
