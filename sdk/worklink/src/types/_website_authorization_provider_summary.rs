// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The summary of the website authorization provider.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct WebsiteAuthorizationProviderSummary {
    /// <p>A unique identifier for the authorization provider.</p>
    pub authorization_provider_id: ::std::option::Option<::std::string::String>,
    /// <p>The authorization provider type.</p>
    pub authorization_provider_type: crate::types::AuthorizationProviderType,
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    pub domain_name: ::std::option::Option<::std::string::String>,
    /// <p>The time of creation.</p>
    pub created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl WebsiteAuthorizationProviderSummary {
    /// <p>A unique identifier for the authorization provider.</p>
    pub fn authorization_provider_id(&self) -> ::std::option::Option<&str> {
        self.authorization_provider_id.as_deref()
    }
    /// <p>The authorization provider type.</p>
    pub fn authorization_provider_type(&self) -> &crate::types::AuthorizationProviderType {
        &self.authorization_provider_type
    }
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    pub fn domain_name(&self) -> ::std::option::Option<&str> {
        self.domain_name.as_deref()
    }
    /// <p>The time of creation.</p>
    pub fn created_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
}
impl WebsiteAuthorizationProviderSummary {
    /// Creates a new builder-style object to manufacture [`WebsiteAuthorizationProviderSummary`](crate::types::WebsiteAuthorizationProviderSummary).
    pub fn builder() -> crate::types::builders::WebsiteAuthorizationProviderSummaryBuilder {
        crate::types::builders::WebsiteAuthorizationProviderSummaryBuilder::default()
    }
}

/// A builder for [`WebsiteAuthorizationProviderSummary`](crate::types::WebsiteAuthorizationProviderSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct WebsiteAuthorizationProviderSummaryBuilder {
    pub(crate) authorization_provider_id: ::std::option::Option<::std::string::String>,
    pub(crate) authorization_provider_type: ::std::option::Option<crate::types::AuthorizationProviderType>,
    pub(crate) domain_name: ::std::option::Option<::std::string::String>,
    pub(crate) created_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl WebsiteAuthorizationProviderSummaryBuilder {
    /// <p>A unique identifier for the authorization provider.</p>
    pub fn authorization_provider_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorization_provider_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for the authorization provider.</p>
    pub fn set_authorization_provider_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorization_provider_id = input;
        self
    }
    /// <p>A unique identifier for the authorization provider.</p>
    pub fn get_authorization_provider_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorization_provider_id
    }
    /// <p>The authorization provider type.</p>
    /// This field is required.
    pub fn authorization_provider_type(mut self, input: crate::types::AuthorizationProviderType) -> Self {
        self.authorization_provider_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The authorization provider type.</p>
    pub fn set_authorization_provider_type(mut self, input: ::std::option::Option<crate::types::AuthorizationProviderType>) -> Self {
        self.authorization_provider_type = input;
        self
    }
    /// <p>The authorization provider type.</p>
    pub fn get_authorization_provider_type(&self) -> &::std::option::Option<crate::types::AuthorizationProviderType> {
        &self.authorization_provider_type
    }
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    pub fn domain_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    pub fn set_domain_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_name = input;
        self
    }
    /// <p>The domain name of the authorization provider. This applies only to SAML-based authorization providers.</p>
    pub fn get_domain_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_name
    }
    /// <p>The time of creation.</p>
    pub fn created_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of creation.</p>
    pub fn set_created_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_time = input;
        self
    }
    /// <p>The time of creation.</p>
    pub fn get_created_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_time
    }
    /// Consumes the builder and constructs a [`WebsiteAuthorizationProviderSummary`](crate::types::WebsiteAuthorizationProviderSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`authorization_provider_type`](crate::types::builders::WebsiteAuthorizationProviderSummaryBuilder::authorization_provider_type)
    pub fn build(self) -> ::std::result::Result<crate::types::WebsiteAuthorizationProviderSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::WebsiteAuthorizationProviderSummary {
            authorization_provider_id: self.authorization_provider_id,
            authorization_provider_type: self.authorization_provider_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "authorization_provider_type",
                    "authorization_provider_type was not specified but it is required when building WebsiteAuthorizationProviderSummary",
                )
            })?,
            domain_name: self.domain_name,
            created_time: self.created_time,
        })
    }
}
