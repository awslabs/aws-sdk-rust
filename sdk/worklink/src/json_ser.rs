// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_associate_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_1) = &input.acm_certificate_arn {
        object.key("AcmCertificateArn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.display_name {
        object.key("DisplayName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.domain_name {
        object.key("DomainName").string(var_3.as_str());
    }
    if let Some(var_4) = &input.fleet_arn {
        object.key("FleetArn").string(var_4.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_website_authorization_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWebsiteAuthorizationProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_5) = &input.authorization_provider_type {
        object
            .key("AuthorizationProviderType")
            .string(var_5.as_str());
    }
    if let Some(var_6) = &input.domain_name {
        object.key("DomainName").string(var_6.as_str());
    }
    if let Some(var_7) = &input.fleet_arn {
        object.key("FleetArn").string(var_7.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_associate_website_certificate_authority_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateWebsiteCertificateAuthorityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_8) = &input.certificate {
        object.key("Certificate").string(var_8.as_str());
    }
    if let Some(var_9) = &input.display_name {
        object.key("DisplayName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.fleet_arn {
        object.key("FleetArn").string(var_10.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_create_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_11) = &input.display_name {
        object.key("DisplayName").string(var_11.as_str());
    }
    if let Some(var_12) = &input.fleet_name {
        object.key("FleetName").string(var_12.as_str());
    }
    if let Some(var_13) = &input.optimize_for_end_user_location {
        object.key("OptimizeForEndUserLocation").boolean(*var_13);
    }
    if let Some(var_14) = &input.tags {
        let mut object_15 = object.key("Tags").start_object();
        for (key_16, value_17) in var_14 {
            {
                object_15.key(key_16).string(value_17.as_str());
            }
        }
        object_15.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_delete_fleet_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFleetInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_18) = &input.fleet_arn {
        object.key("FleetArn").string(var_18.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_audit_stream_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAuditStreamConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_19) = &input.fleet_arn {
        object.key("FleetArn").string(var_19.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_company_network_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCompanyNetworkConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_20) = &input.fleet_arn {
        object.key("FleetArn").string(var_20.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeviceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_21) = &input.device_id {
        object.key("DeviceId").string(var_21.as_str());
    }
    if let Some(var_22) = &input.fleet_arn {
        object.key("FleetArn").string(var_22.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_device_policy_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDevicePolicyConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_23) = &input.fleet_arn {
        object.key("FleetArn").string(var_23.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_24) = &input.domain_name {
        object.key("DomainName").string(var_24.as_str());
    }
    if let Some(var_25) = &input.fleet_arn {
        object.key("FleetArn").string(var_25.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_fleet_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_26) = &input.fleet_arn {
        object.key("FleetArn").string(var_26.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_identity_provider_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIdentityProviderConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_27) = &input.fleet_arn {
        object.key("FleetArn").string(var_27.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_describe_website_certificate_authority_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWebsiteCertificateAuthorityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_28) = &input.fleet_arn {
        object.key("FleetArn").string(var_28.as_str());
    }
    if let Some(var_29) = &input.website_ca_id {
        object.key("WebsiteCaId").string(var_29.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_domain_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateDomainInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_30) = &input.domain_name {
        object.key("DomainName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.fleet_arn {
        object.key("FleetArn").string(var_31.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_website_authorization_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateWebsiteAuthorizationProviderInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_32) = &input.authorization_provider_id {
        object
            .key("AuthorizationProviderId")
            .string(var_32.as_str());
    }
    if let Some(var_33) = &input.fleet_arn {
        object.key("FleetArn").string(var_33.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_disassociate_website_certificate_authority_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateWebsiteCertificateAuthorityInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_34) = &input.fleet_arn {
        object.key("FleetArn").string(var_34.as_str());
    }
    if let Some(var_35) = &input.website_ca_id {
        object.key("WebsiteCaId").string(var_35.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_devices_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDevicesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_36) = &input.fleet_arn {
        object.key("FleetArn").string(var_36.as_str());
    }
    if let Some(var_37) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    if let Some(var_38) = &input.next_token {
        object.key("NextToken").string(var_38.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_domains_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDomainsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_39) = &input.fleet_arn {
        object.key("FleetArn").string(var_39.as_str());
    }
    if let Some(var_40) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_40).into()),
        );
    }
    if let Some(var_41) = &input.next_token {
        object.key("NextToken").string(var_41.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_fleets_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFleetsInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_42) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_42).into()),
        );
    }
    if let Some(var_43) = &input.next_token {
        object.key("NextToken").string(var_43.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_website_authorization_providers_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWebsiteAuthorizationProvidersInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_44) = &input.fleet_arn {
        object.key("FleetArn").string(var_44.as_str());
    }
    if let Some(var_45) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_45).into()),
        );
    }
    if let Some(var_46) = &input.next_token {
        object.key("NextToken").string(var_46.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_list_website_certificate_authorities_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWebsiteCertificateAuthoritiesInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_47) = &input.fleet_arn {
        object.key("FleetArn").string(var_47.as_str());
    }
    if let Some(var_48) = &input.max_results {
        object.key("MaxResults").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_48).into()),
        );
    }
    if let Some(var_49) = &input.next_token {
        object.key("NextToken").string(var_49.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_restore_domain_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RestoreDomainAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_50) = &input.domain_name {
        object.key("DomainName").string(var_50.as_str());
    }
    if let Some(var_51) = &input.fleet_arn {
        object.key("FleetArn").string(var_51.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_revoke_domain_access_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RevokeDomainAccessInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_52) = &input.domain_name {
        object.key("DomainName").string(var_52.as_str());
    }
    if let Some(var_53) = &input.fleet_arn {
        object.key("FleetArn").string(var_53.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_sign_out_user_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SignOutUserInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_54) = &input.fleet_arn {
        object.key("FleetArn").string(var_54.as_str());
    }
    if let Some(var_55) = &input.username {
        object.key("Username").string(var_55.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_56) = &input.tags {
        let mut object_57 = object.key("Tags").start_object();
        for (key_58, value_59) in var_56 {
            {
                object_57.key(key_58).string(value_59.as_str());
            }
        }
        object_57.finish();
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_audit_stream_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAuditStreamConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_60) = &input.audit_stream_arn {
        object.key("AuditStreamArn").string(var_60.as_str());
    }
    if let Some(var_61) = &input.fleet_arn {
        object.key("FleetArn").string(var_61.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_company_network_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateCompanyNetworkConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_62) = &input.fleet_arn {
        object.key("FleetArn").string(var_62.as_str());
    }
    if let Some(var_63) = &input.security_group_ids {
        let mut array_64 = object.key("SecurityGroupIds").start_array();
        for item_65 in var_63 {
            {
                array_64.value().string(item_65.as_str());
            }
        }
        array_64.finish();
    }
    if let Some(var_66) = &input.subnet_ids {
        let mut array_67 = object.key("SubnetIds").start_array();
        for item_68 in var_66 {
            {
                array_67.value().string(item_68.as_str());
            }
        }
        array_67.finish();
    }
    if let Some(var_69) = &input.vpc_id {
        object.key("VpcId").string(var_69.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_device_policy_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDevicePolicyConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_70) = &input.device_ca_certificate {
        object.key("DeviceCaCertificate").string(var_70.as_str());
    }
    if let Some(var_71) = &input.fleet_arn {
        object.key("FleetArn").string(var_71.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_domain_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateDomainMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_72) = &input.display_name {
        object.key("DisplayName").string(var_72.as_str());
    }
    if let Some(var_73) = &input.domain_name {
        object.key("DomainName").string(var_73.as_str());
    }
    if let Some(var_74) = &input.fleet_arn {
        object.key("FleetArn").string(var_74.as_str());
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_fleet_metadata_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFleetMetadataInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_75) = &input.display_name {
        object.key("DisplayName").string(var_75.as_str());
    }
    if let Some(var_76) = &input.fleet_arn {
        object.key("FleetArn").string(var_76.as_str());
    }
    if let Some(var_77) = &input.optimize_for_end_user_location {
        object.key("OptimizeForEndUserLocation").boolean(*var_77);
    }
    Ok(())
}

pub fn serialize_structure_crate_input_update_identity_provider_configuration_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateIdentityProviderConfigurationInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
    if let Some(var_78) = &input.fleet_arn {
        object.key("FleetArn").string(var_78.as_str());
    }
    if let Some(var_79) = &input.identity_provider_saml_metadata {
        object
            .key("IdentityProviderSamlMetadata")
            .string(var_79.as_str());
    }
    if let Some(var_80) = &input.identity_provider_type {
        object.key("IdentityProviderType").string(var_80.as_str());
    }
    Ok(())
}
