// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetNotificationChannelOutput {
    /// <p>The SNS topic that records Firewall Manager activity. </p>
    #[doc(hidden)]
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
    #[doc(hidden)]
    pub sns_role_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetNotificationChannelOutput {
    /// <p>The SNS topic that records Firewall Manager activity. </p>
    pub fn sns_topic_arn(&self) -> std::option::Option<&str> {
        self.sns_topic_arn.as_deref()
    }
    /// <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
    pub fn sns_role_name(&self) -> std::option::Option<&str> {
        self.sns_role_name.as_deref()
    }
}
impl aws_http::request_id::RequestId for GetNotificationChannelOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetNotificationChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetNotificationChannelOutput`](crate::operation::get_notification_channel::GetNotificationChannelOutput).
    pub fn builder(
    ) -> crate::operation::get_notification_channel::builders::GetNotificationChannelOutputBuilder
    {
        crate::operation::get_notification_channel::builders::GetNotificationChannelOutputBuilder::default()
    }
}

/// A builder for [`GetNotificationChannelOutput`](crate::operation::get_notification_channel::GetNotificationChannelOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetNotificationChannelOutputBuilder {
    pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
    pub(crate) sns_role_name: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl GetNotificationChannelOutputBuilder {
    /// <p>The SNS topic that records Firewall Manager activity. </p>
    pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.sns_topic_arn = Some(input.into());
        self
    }
    /// <p>The SNS topic that records Firewall Manager activity. </p>
    pub fn set_sns_topic_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sns_topic_arn = input;
        self
    }
    /// <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
    pub fn sns_role_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.sns_role_name = Some(input.into());
        self
    }
    /// <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
    pub fn set_sns_role_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.sns_role_name = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetNotificationChannelOutput`](crate::operation::get_notification_channel::GetNotificationChannelOutput).
    pub fn build(self) -> crate::operation::get_notification_channel::GetNotificationChannelOutput {
        crate::operation::get_notification_channel::GetNotificationChannelOutput {
            sns_topic_arn: self.sns_topic_arn,
            sns_role_name: self.sns_role_name,
            _request_id: self._request_id,
        }
    }
}
