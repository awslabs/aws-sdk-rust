// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutNotificationChannelInput {
    /// <p>The Amazon Resource Name (ARN) of the SNS topic that collects notifications from Firewall Manager.</p>
    pub sns_topic_arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record Firewall Manager activity. </p>
    pub sns_role_name: ::std::option::Option<::std::string::String>,
}
impl PutNotificationChannelInput {
    /// <p>The Amazon Resource Name (ARN) of the SNS topic that collects notifications from Firewall Manager.</p>
    pub fn sns_topic_arn(&self) -> ::std::option::Option<&str> {
        self.sns_topic_arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record Firewall Manager activity. </p>
    pub fn sns_role_name(&self) -> ::std::option::Option<&str> {
        self.sns_role_name.as_deref()
    }
}
impl PutNotificationChannelInput {
    /// Creates a new builder-style object to manufacture [`PutNotificationChannelInput`](crate::operation::put_notification_channel::PutNotificationChannelInput).
    pub fn builder() -> crate::operation::put_notification_channel::builders::PutNotificationChannelInputBuilder {
        crate::operation::put_notification_channel::builders::PutNotificationChannelInputBuilder::default()
    }
}

/// A builder for [`PutNotificationChannelInput`](crate::operation::put_notification_channel::PutNotificationChannelInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutNotificationChannelInputBuilder {
    pub(crate) sns_topic_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sns_role_name: ::std::option::Option<::std::string::String>,
}
impl PutNotificationChannelInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the SNS topic that collects notifications from Firewall Manager.</p>
    /// This field is required.
    pub fn sns_topic_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sns_topic_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SNS topic that collects notifications from Firewall Manager.</p>
    pub fn set_sns_topic_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sns_topic_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the SNS topic that collects notifications from Firewall Manager.</p>
    pub fn get_sns_topic_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.sns_topic_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record Firewall Manager activity. </p>
    /// This field is required.
    pub fn sns_role_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.sns_role_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record Firewall Manager activity. </p>
    pub fn set_sns_role_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.sns_role_name = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role that allows Amazon SNS to record Firewall Manager activity. </p>
    pub fn get_sns_role_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.sns_role_name
    }
    /// Consumes the builder and constructs a [`PutNotificationChannelInput`](crate::operation::put_notification_channel::PutNotificationChannelInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_notification_channel::PutNotificationChannelInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_notification_channel::PutNotificationChannelInput {
            sns_topic_arn: self.sns_topic_arn,
            sns_role_name: self.sns_role_name,
        })
    }
}
