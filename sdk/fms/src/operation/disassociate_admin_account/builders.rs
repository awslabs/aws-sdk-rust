// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_admin_account::_disassociate_admin_account_output::DisassociateAdminAccountOutputBuilder;

pub use crate::operation::disassociate_admin_account::_disassociate_admin_account_input::DisassociateAdminAccountInputBuilder;

impl crate::operation::disassociate_admin_account::builders::DisassociateAdminAccountInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::disassociate_admin_account::DisassociateAdminAccountOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_admin_account::DisassociateAdminAccountError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.disassociate_admin_account();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `DisassociateAdminAccount`.
///
/// <p>Disassociates an Firewall Manager administrator account. To set a different account as an Firewall Manager administrator, submit a <code>PutAdminAccount</code> request. To set an account as a default administrator account, you must submit an <code>AssociateAdminAccount</code> request.</p>
/// <p>Disassociation of the default administrator account follows the first in, last out principle. If you are the default administrator, all Firewall Manager administrators within the organization must first disassociate their accounts before you can disassociate your account.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct DisassociateAdminAccountFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::disassociate_admin_account::builders::DisassociateAdminAccountInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::disassociate_admin_account::DisassociateAdminAccountOutput,
        crate::operation::disassociate_admin_account::DisassociateAdminAccountError,
    > for DisassociateAdminAccountFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::disassociate_admin_account::DisassociateAdminAccountOutput,
            crate::operation::disassociate_admin_account::DisassociateAdminAccountError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl DisassociateAdminAccountFluentBuilder {
    /// Creates a new `DisassociateAdminAccount`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the DisassociateAdminAccount as a reference.
    pub fn as_input(&self) -> &crate::operation::disassociate_admin_account::builders::DisassociateAdminAccountInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::disassociate_admin_account::DisassociateAdminAccountOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_admin_account::DisassociateAdminAccountError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::disassociate_admin_account::DisassociateAdminAccount::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::disassociate_admin_account::DisassociateAdminAccount::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::disassociate_admin_account::DisassociateAdminAccountOutput,
        crate::operation::disassociate_admin_account::DisassociateAdminAccountError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
}
