// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_policy::_put_policy_output::PutPolicyOutputBuilder;

pub use crate::operation::put_policy::_put_policy_input::PutPolicyInputBuilder;

/// Fluent builder constructing a request to `PutPolicy`.
///
/// <p>Creates an Firewall Manager policy.</p>
/// <p>Firewall Manager provides the following types of policies: </p>
/// <ul>
/// <li> <p>An WAF policy (type WAFV2), which defines rule groups to run first in the corresponding WAF web ACL and rule groups to run last in the web ACL.</p> </li>
/// <li> <p>An WAF Classic policy (type WAF), which defines a rule group. </p> </li>
/// <li> <p>A Shield Advanced policy, which applies Shield Advanced protection to specified accounts and resources.</p> </li>
/// <li> <p>A security group policy, which manages VPC security groups across your Amazon Web Services organization. </p> </li>
/// <li> <p>An Network Firewall policy, which provides firewall rules to filter network traffic in specified Amazon VPCs.</p> </li>
/// <li> <p>A DNS Firewall policy, which provides Route&nbsp;53 Resolver DNS Firewall rules to filter DNS queries for specified VPCs.</p> </li>
/// </ul>
/// <p>Each policy is specific to one of the types. If you want to enforce more than one policy type across accounts, create multiple policies. You can create multiple policies for each type.</p>
/// <p>You must be subscribed to Shield Advanced to create a Shield Advanced policy. For more information about subscribing to Shield Advanced, see <a href="https://docs.aws.amazon.com/waf/latest/DDOSAPIReference/API_CreateSubscription.html">CreateSubscription</a>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct PutPolicyFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_policy::builders::PutPolicyInputBuilder,
}
impl PutPolicyFluentBuilder {
    /// Creates a new `PutPolicy`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::put_policy::PutPolicy,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::put_policy::PutPolicyError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::put_policy::PutPolicyOutput,
        aws_smithy_http::result::SdkError<crate::operation::put_policy::PutPolicyError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The details of the Firewall Manager policy to be created.</p>
    pub fn policy(mut self, input: crate::types::Policy) -> Self {
        self.inner = self.inner.policy(input);
        self
    }
    /// <p>The details of the Firewall Manager policy to be created.</p>
    pub fn set_policy(mut self, input: std::option::Option<crate::types::Policy>) -> Self {
        self.inner = self.inner.set_policy(input);
        self
    }
    /// Appends an item to `TagList`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>The tags to add to the Amazon Web Services resource.</p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tag_list(input);
        self
    }
    /// <p>The tags to add to the Amazon Web Services resource.</p>
    pub fn set_tag_list(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tag_list(input);
        self
    }
}
