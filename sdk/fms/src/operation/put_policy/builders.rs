// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::put_policy::_put_policy_output::PutPolicyOutputBuilder;

pub use crate::operation::put_policy::_put_policy_input::PutPolicyInputBuilder;

impl crate::operation::put_policy::builders::PutPolicyInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::put_policy::PutPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_policy::PutPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.put_policy();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `PutPolicy`.
///
/// <p>Creates an Firewall Manager policy.</p>
/// <p>A Firewall Manager policy is specific to the individual policy type. If you want to enforce multiple policy types across accounts, you can create multiple policies. You can create more than one policy for each type.</p>
/// <p>If you add a new account to an organization that you created with Organizations, Firewall Manager automatically applies the policy to the resources in that account that are within scope of the policy.</p>
/// <p>Firewall Manager provides the following types of policies:</p>
/// <ul>
/// <li>
/// <p><b>Shield Advanced policy</b> - This policy applies Shield Advanced protection to specified accounts and resources.</p></li>
/// <li>
/// <p><b>Security Groups policy</b> - This type of policy gives you control over security groups that are in use throughout your organization in Organizations and lets you enforce a baseline set of rules across your organization.</p></li>
/// <li>
/// <p><b>Network Firewall policy</b> - This policy applies Network Firewall protection to your organization's VPCs.</p></li>
/// <li>
/// <p><b>DNS Firewall policy</b> - This policy applies Amazon Route 53 Resolver DNS Firewall protections to your organization's VPCs.</p></li>
/// <li>
/// <p><b>Third-party firewall policy</b> - This policy applies third-party firewall protections. Third-party firewalls are available by subscription through the Amazon Web Services Marketplace console at <a href="https://aws.amazon.com/marketplace">Amazon Web Services Marketplace</a>.</p>
/// <ul>
/// <li>
/// <p><b>Palo Alto Networks Cloud NGFW policy</b> - This policy applies Palo Alto Networks Cloud Next Generation Firewall (NGFW) protections and Palo Alto Networks Cloud NGFW rulestacks to your organization's VPCs.</p></li>
/// <li>
/// <p><b>Fortigate CNF policy</b> - This policy applies Fortigate Cloud Native Firewall (CNF) protections. Fortigate CNF is a cloud-centered solution that blocks Zero-Day threats and secures cloud infrastructures with industry-leading advanced threat prevention, smart web application firewalls (WAF), and API protection.</p></li>
/// </ul></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct PutPolicyFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::put_policy::builders::PutPolicyInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl crate::client::customize::internal::CustomizableSend<crate::operation::put_policy::PutPolicyOutput, crate::operation::put_policy::PutPolicyError>
    for PutPolicyFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<crate::operation::put_policy::PutPolicyOutput, crate::operation::put_policy::PutPolicyError>,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl PutPolicyFluentBuilder {
    /// Creates a new `PutPolicy`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the PutPolicy as a reference.
    pub fn as_input(&self) -> &crate::operation::put_policy::builders::PutPolicyInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_policy::PutPolicyOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::put_policy::PutPolicyError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::put_policy::PutPolicy::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::put_policy::PutPolicy::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::put_policy::PutPolicyOutput,
        crate::operation::put_policy::PutPolicyError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The details of the Firewall Manager policy to be created.</p>
    pub fn policy(mut self, input: crate::types::Policy) -> Self {
        self.inner = self.inner.policy(input);
        self
    }
    /// <p>The details of the Firewall Manager policy to be created.</p>
    pub fn set_policy(mut self, input: ::std::option::Option<crate::types::Policy>) -> Self {
        self.inner = self.inner.set_policy(input);
        self
    }
    /// <p>The details of the Firewall Manager policy to be created.</p>
    pub fn get_policy(&self) -> &::std::option::Option<crate::types::Policy> {
        self.inner.get_policy()
    }
    ///
    /// Appends an item to `TagList`.
    ///
    /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
    ///
    /// <p>The tags to add to the Amazon Web Services resource.</p>
    pub fn tag_list(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tag_list(input);
        self
    }
    /// <p>The tags to add to the Amazon Web Services resource.</p>
    pub fn set_tag_list(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_tag_list(input);
        self
    }
    /// <p>The tags to add to the Amazon Web Services resource.</p>
    pub fn get_tag_list(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_tag_list()
    }
}
