// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetThirdPartyFirewallAssociationStatusOutput {
    /// <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub third_party_firewall_status:
        std::option::Option<crate::types::ThirdPartyFirewallAssociationStatus>,
    /// <p>The status for subscribing to the third-party firewall vendor in the Amazon Web Services Marketplace.</p>
    /// <ul>
    /// <li> <p> <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// <li> <p> <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p> </li>
    /// <li> <p> <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub marketplace_onboarding_status:
        std::option::Option<crate::types::MarketplaceSubscriptionOnboardingStatus>,
    _request_id: Option<String>,
}
impl GetThirdPartyFirewallAssociationStatusOutput {
    /// <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
    /// </ul>
    pub fn third_party_firewall_status(
        &self,
    ) -> std::option::Option<&crate::types::ThirdPartyFirewallAssociationStatus> {
        self.third_party_firewall_status.as_ref()
    }
    /// <p>The status for subscribing to the third-party firewall vendor in the Amazon Web Services Marketplace.</p>
    /// <ul>
    /// <li> <p> <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// <li> <p> <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p> </li>
    /// <li> <p> <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// </ul>
    pub fn marketplace_onboarding_status(
        &self,
    ) -> std::option::Option<&crate::types::MarketplaceSubscriptionOnboardingStatus> {
        self.marketplace_onboarding_status.as_ref()
    }
}
impl aws_http::request_id::RequestId for GetThirdPartyFirewallAssociationStatusOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetThirdPartyFirewallAssociationStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetThirdPartyFirewallAssociationStatusOutput`](crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusOutput).
    pub fn builder() -> crate::operation::get_third_party_firewall_association_status::builders::GetThirdPartyFirewallAssociationStatusOutputBuilder{
        crate::operation::get_third_party_firewall_association_status::builders::GetThirdPartyFirewallAssociationStatusOutputBuilder::default()
    }
}

/// A builder for [`GetThirdPartyFirewallAssociationStatusOutput`](crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetThirdPartyFirewallAssociationStatusOutputBuilder {
    pub(crate) third_party_firewall_status:
        std::option::Option<crate::types::ThirdPartyFirewallAssociationStatus>,
    pub(crate) marketplace_onboarding_status:
        std::option::Option<crate::types::MarketplaceSubscriptionOnboardingStatus>,
    _request_id: Option<String>,
}
impl GetThirdPartyFirewallAssociationStatusOutputBuilder {
    /// <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
    /// </ul>
    pub fn third_party_firewall_status(
        mut self,
        input: crate::types::ThirdPartyFirewallAssociationStatus,
    ) -> Self {
        self.third_party_firewall_status = Some(input);
        self
    }
    /// <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
    /// </ul>
    pub fn set_third_party_firewall_status(
        mut self,
        input: std::option::Option<crate::types::ThirdPartyFirewallAssociationStatus>,
    ) -> Self {
        self.third_party_firewall_status = input;
        self
    }
    /// <p>The status for subscribing to the third-party firewall vendor in the Amazon Web Services Marketplace.</p>
    /// <ul>
    /// <li> <p> <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// <li> <p> <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p> </li>
    /// <li> <p> <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// </ul>
    pub fn marketplace_onboarding_status(
        mut self,
        input: crate::types::MarketplaceSubscriptionOnboardingStatus,
    ) -> Self {
        self.marketplace_onboarding_status = Some(input);
        self
    }
    /// <p>The status for subscribing to the third-party firewall vendor in the Amazon Web Services Marketplace.</p>
    /// <ul>
    /// <li> <p> <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// <li> <p> <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p> </li>
    /// <li> <p> <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// </ul>
    pub fn set_marketplace_onboarding_status(
        mut self,
        input: std::option::Option<crate::types::MarketplaceSubscriptionOnboardingStatus>,
    ) -> Self {
        self.marketplace_onboarding_status = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetThirdPartyFirewallAssociationStatusOutput`](crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusOutput).
    pub fn build(self) -> crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusOutput{
        crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusOutput {
            third_party_firewall_status: self.third_party_firewall_status
            ,
            marketplace_onboarding_status: self.marketplace_onboarding_status
            ,
            _request_id: self._request_id,
        }
    }
}
