// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The action of associating an EC2 resource, such as a subnet or internet gateway, with a route table.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2AssociateRouteTableAction {
    /// <p>A description of the EC2 route table that is associated with the remediation action.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the EC2 route table that is associated with the remediation action.</p>
    pub route_table_id: ::std::option::Option<crate::types::ActionTarget>,
    /// <p>The ID of the subnet for the EC2 route table that is associated with the remediation action.</p>
    pub subnet_id: ::std::option::Option<crate::types::ActionTarget>,
    /// <p>The ID of the gateway to be used with the EC2 route table that is associated with the remediation action.</p>
    pub gateway_id: ::std::option::Option<crate::types::ActionTarget>,
}
impl Ec2AssociateRouteTableAction {
    /// <p>A description of the EC2 route table that is associated with the remediation action.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ID of the EC2 route table that is associated with the remediation action.</p>
    pub fn route_table_id(&self) -> ::std::option::Option<&crate::types::ActionTarget> {
        self.route_table_id.as_ref()
    }
    /// <p>The ID of the subnet for the EC2 route table that is associated with the remediation action.</p>
    pub fn subnet_id(&self) -> ::std::option::Option<&crate::types::ActionTarget> {
        self.subnet_id.as_ref()
    }
    /// <p>The ID of the gateway to be used with the EC2 route table that is associated with the remediation action.</p>
    pub fn gateway_id(&self) -> ::std::option::Option<&crate::types::ActionTarget> {
        self.gateway_id.as_ref()
    }
}
impl Ec2AssociateRouteTableAction {
    /// Creates a new builder-style object to manufacture [`Ec2AssociateRouteTableAction`](crate::types::Ec2AssociateRouteTableAction).
    pub fn builder() -> crate::types::builders::Ec2AssociateRouteTableActionBuilder {
        crate::types::builders::Ec2AssociateRouteTableActionBuilder::default()
    }
}

/// A builder for [`Ec2AssociateRouteTableAction`](crate::types::Ec2AssociateRouteTableAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Ec2AssociateRouteTableActionBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) route_table_id: ::std::option::Option<crate::types::ActionTarget>,
    pub(crate) subnet_id: ::std::option::Option<crate::types::ActionTarget>,
    pub(crate) gateway_id: ::std::option::Option<crate::types::ActionTarget>,
}
impl Ec2AssociateRouteTableActionBuilder {
    /// <p>A description of the EC2 route table that is associated with the remediation action.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the EC2 route table that is associated with the remediation action.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the EC2 route table that is associated with the remediation action.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ID of the EC2 route table that is associated with the remediation action.</p>
    /// This field is required.
    pub fn route_table_id(mut self, input: crate::types::ActionTarget) -> Self {
        self.route_table_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the EC2 route table that is associated with the remediation action.</p>
    pub fn set_route_table_id(mut self, input: ::std::option::Option<crate::types::ActionTarget>) -> Self {
        self.route_table_id = input;
        self
    }
    /// <p>The ID of the EC2 route table that is associated with the remediation action.</p>
    pub fn get_route_table_id(&self) -> &::std::option::Option<crate::types::ActionTarget> {
        &self.route_table_id
    }
    /// <p>The ID of the subnet for the EC2 route table that is associated with the remediation action.</p>
    pub fn subnet_id(mut self, input: crate::types::ActionTarget) -> Self {
        self.subnet_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the subnet for the EC2 route table that is associated with the remediation action.</p>
    pub fn set_subnet_id(mut self, input: ::std::option::Option<crate::types::ActionTarget>) -> Self {
        self.subnet_id = input;
        self
    }
    /// <p>The ID of the subnet for the EC2 route table that is associated with the remediation action.</p>
    pub fn get_subnet_id(&self) -> &::std::option::Option<crate::types::ActionTarget> {
        &self.subnet_id
    }
    /// <p>The ID of the gateway to be used with the EC2 route table that is associated with the remediation action.</p>
    pub fn gateway_id(mut self, input: crate::types::ActionTarget) -> Self {
        self.gateway_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ID of the gateway to be used with the EC2 route table that is associated with the remediation action.</p>
    pub fn set_gateway_id(mut self, input: ::std::option::Option<crate::types::ActionTarget>) -> Self {
        self.gateway_id = input;
        self
    }
    /// <p>The ID of the gateway to be used with the EC2 route table that is associated with the remediation action.</p>
    pub fn get_gateway_id(&self) -> &::std::option::Option<crate::types::ActionTarget> {
        &self.gateway_id
    }
    /// Consumes the builder and constructs a [`Ec2AssociateRouteTableAction`](crate::types::Ec2AssociateRouteTableAction).
    pub fn build(self) -> crate::types::Ec2AssociateRouteTableAction {
        crate::types::Ec2AssociateRouteTableAction {
            description: self.description,
            route_table_id: self.route_table_id,
            subnet_id: self.subnet_id,
            gateway_id: self.gateway_id,
        }
    }
}
