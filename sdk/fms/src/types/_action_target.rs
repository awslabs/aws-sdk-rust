// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a remediation action target.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ActionTarget {
    /// <p>The ID of the remediation target.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>A description of the remediation action target.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
}
impl ActionTarget {
    /// <p>The ID of the remediation target.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>A description of the remediation action target.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
}
impl ActionTarget {
    /// Creates a new builder-style object to manufacture [`ActionTarget`](crate::types::ActionTarget).
    pub fn builder() -> crate::types::builders::ActionTargetBuilder {
        crate::types::builders::ActionTargetBuilder::default()
    }
}

/// A builder for [`ActionTarget`](crate::types::ActionTarget).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ActionTargetBuilder {
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) description: std::option::Option<std::string::String>,
}
impl ActionTargetBuilder {
    /// <p>The ID of the remediation target.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The ID of the remediation target.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>A description of the remediation action target.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>A description of the remediation action target.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// Consumes the builder and constructs a [`ActionTarget`](crate::types::ActionTarget).
    pub fn build(self) -> crate::types::ActionTarget {
        crate::types::ActionTarget {
            resource_id: self.resource_id,
            description: self.description,
        }
    }
}
