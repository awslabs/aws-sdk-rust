// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Violation detail based on resource type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceViolation {
    /// <p>Violation detail for security groups.</p>
    #[doc(hidden)]
    pub aws_vpc_security_group_violation:
        std::option::Option<crate::types::AwsVpcSecurityGroupViolation>,
    /// <p>Violation detail for a network interface.</p>
    #[doc(hidden)]
    pub aws_ec2_network_interface_violation:
        std::option::Option<crate::types::AwsEc2NetworkInterfaceViolation>,
    /// <p>Violation detail for an EC2 instance.</p>
    #[doc(hidden)]
    pub aws_ec2_instance_violation: std::option::Option<crate::types::AwsEc2InstanceViolation>,
    /// <p>Violation detail for an Network Firewall policy that indicates that a subnet has no Firewall Manager managed firewall in its VPC. </p>
    #[doc(hidden)]
    pub network_firewall_missing_firewall_violation:
        std::option::Option<crate::types::NetworkFirewallMissingFirewallViolation>,
    /// <p>Violation detail for an Network Firewall policy that indicates that an Availability Zone is missing the expected Firewall Manager managed subnet.</p>
    #[doc(hidden)]
    pub network_firewall_missing_subnet_violation:
        std::option::Option<crate::types::NetworkFirewallMissingSubnetViolation>,
    /// <p>Violation detail for an Network Firewall policy that indicates that a subnet is not associated with the expected Firewall Manager managed route table. </p>
    #[doc(hidden)]
    pub network_firewall_missing_expected_rt_violation:
        std::option::Option<crate::types::NetworkFirewallMissingExpectedRtViolation>,
    /// <p>Violation detail for an Network Firewall policy that indicates that a firewall policy in an individual account has been modified in a way that makes it noncompliant. For example, the individual account owner might have deleted a rule group, changed the priority of a stateless rule group, or changed a policy default action.</p>
    #[doc(hidden)]
    pub network_firewall_policy_modified_violation:
        std::option::Option<crate::types::NetworkFirewallPolicyModifiedViolation>,
    /// <p>Violation detail for the subnet for which internet traffic hasn't been inspected.</p>
    #[doc(hidden)]
    pub network_firewall_internet_traffic_not_inspected_violation:
        std::option::Option<crate::types::NetworkFirewallInternetTrafficNotInspectedViolation>,
    /// <p>The route configuration is invalid.</p>
    #[doc(hidden)]
    pub network_firewall_invalid_route_configuration_violation:
        std::option::Option<crate::types::NetworkFirewallInvalidRouteConfigurationViolation>,
    /// <p>Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table.</p>
    #[doc(hidden)]
    pub network_firewall_black_hole_route_detected_violation:
        std::option::Option<crate::types::NetworkFirewallBlackHoleRouteDetectedViolation>,
    /// <p>There's an unexpected firewall route.</p>
    #[doc(hidden)]
    pub network_firewall_unexpected_firewall_routes_violation:
        std::option::Option<crate::types::NetworkFirewallUnexpectedFirewallRoutesViolation>,
    /// <p>There's an unexpected gateway route.</p>
    #[doc(hidden)]
    pub network_firewall_unexpected_gateway_routes_violation:
        std::option::Option<crate::types::NetworkFirewallUnexpectedGatewayRoutesViolation>,
    /// <p>Expected routes are missing from Network Firewall.</p>
    #[doc(hidden)]
    pub network_firewall_missing_expected_routes_violation:
        std::option::Option<crate::types::NetworkFirewallMissingExpectedRoutesViolation>,
    /// <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC has the same priority as a rule group that's already associated. </p>
    #[doc(hidden)]
    pub dns_rule_group_priority_conflict_violation:
        std::option::Option<crate::types::DnsRuleGroupPriorityConflictViolation>,
    /// <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC is already associated with the VPC and can't be associated again. </p>
    #[doc(hidden)]
    pub dns_duplicate_rule_group_violation:
        std::option::Option<crate::types::DnsDuplicateRuleGroupViolation>,
    /// <p>Violation detail for a DNS Firewall policy that indicates that the VPC reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed. </p>
    #[doc(hidden)]
    pub dns_rule_group_limit_exceeded_violation:
        std::option::Option<crate::types::DnsRuleGroupLimitExceededViolation>,
    /// <p>A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.</p>
    #[doc(hidden)]
    pub possible_remediation_actions: std::option::Option<crate::types::PossibleRemediationActions>,
    /// <p>Contains details about the firewall subnet that violates the policy scope.</p>
    #[doc(hidden)]
    pub firewall_subnet_is_out_of_scope_violation:
        std::option::Option<crate::types::FirewallSubnetIsOutOfScopeViolation>,
    /// <p>Contains details about the route endpoint that violates the policy scope.</p>
    #[doc(hidden)]
    pub route_has_out_of_scope_endpoint_violation:
        std::option::Option<crate::types::RouteHasOutOfScopeEndpointViolation>,
    /// <p>The violation details for a third-party firewall that's been deleted.</p>
    #[doc(hidden)]
    pub third_party_firewall_missing_firewall_violation:
        std::option::Option<crate::types::ThirdPartyFirewallMissingFirewallViolation>,
    /// <p>The violation details for a third-party firewall's subnet that's been deleted.</p>
    #[doc(hidden)]
    pub third_party_firewall_missing_subnet_violation:
        std::option::Option<crate::types::ThirdPartyFirewallMissingSubnetViolation>,
    /// <p>The violation details for a third-party firewall that has the Firewall Manager managed route table that was associated with the third-party firewall has been deleted.</p>
    #[doc(hidden)]
    pub third_party_firewall_missing_expected_route_table_violation:
        std::option::Option<crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation>,
    /// <p>The violation details for a third-party firewall's VPC endpoint subnet that was deleted.</p>
    #[doc(hidden)]
    pub firewall_subnet_missing_vpc_endpoint_violation:
        std::option::Option<crate::types::FirewallSubnetMissingVpcEndpointViolation>,
}
impl ResourceViolation {
    /// <p>Violation detail for security groups.</p>
    pub fn aws_vpc_security_group_violation(
        &self,
    ) -> std::option::Option<&crate::types::AwsVpcSecurityGroupViolation> {
        self.aws_vpc_security_group_violation.as_ref()
    }
    /// <p>Violation detail for a network interface.</p>
    pub fn aws_ec2_network_interface_violation(
        &self,
    ) -> std::option::Option<&crate::types::AwsEc2NetworkInterfaceViolation> {
        self.aws_ec2_network_interface_violation.as_ref()
    }
    /// <p>Violation detail for an EC2 instance.</p>
    pub fn aws_ec2_instance_violation(
        &self,
    ) -> std::option::Option<&crate::types::AwsEc2InstanceViolation> {
        self.aws_ec2_instance_violation.as_ref()
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a subnet has no Firewall Manager managed firewall in its VPC. </p>
    pub fn network_firewall_missing_firewall_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallMissingFirewallViolation> {
        self.network_firewall_missing_firewall_violation.as_ref()
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that an Availability Zone is missing the expected Firewall Manager managed subnet.</p>
    pub fn network_firewall_missing_subnet_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallMissingSubnetViolation> {
        self.network_firewall_missing_subnet_violation.as_ref()
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a subnet is not associated with the expected Firewall Manager managed route table. </p>
    pub fn network_firewall_missing_expected_rt_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallMissingExpectedRtViolation> {
        self.network_firewall_missing_expected_rt_violation.as_ref()
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a firewall policy in an individual account has been modified in a way that makes it noncompliant. For example, the individual account owner might have deleted a rule group, changed the priority of a stateless rule group, or changed a policy default action.</p>
    pub fn network_firewall_policy_modified_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallPolicyModifiedViolation> {
        self.network_firewall_policy_modified_violation.as_ref()
    }
    /// <p>Violation detail for the subnet for which internet traffic hasn't been inspected.</p>
    pub fn network_firewall_internet_traffic_not_inspected_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallInternetTrafficNotInspectedViolation>
    {
        self.network_firewall_internet_traffic_not_inspected_violation
            .as_ref()
    }
    /// <p>The route configuration is invalid.</p>
    pub fn network_firewall_invalid_route_configuration_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallInvalidRouteConfigurationViolation> {
        self.network_firewall_invalid_route_configuration_violation
            .as_ref()
    }
    /// <p>Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table.</p>
    pub fn network_firewall_black_hole_route_detected_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallBlackHoleRouteDetectedViolation> {
        self.network_firewall_black_hole_route_detected_violation
            .as_ref()
    }
    /// <p>There's an unexpected firewall route.</p>
    pub fn network_firewall_unexpected_firewall_routes_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallUnexpectedFirewallRoutesViolation> {
        self.network_firewall_unexpected_firewall_routes_violation
            .as_ref()
    }
    /// <p>There's an unexpected gateway route.</p>
    pub fn network_firewall_unexpected_gateway_routes_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallUnexpectedGatewayRoutesViolation> {
        self.network_firewall_unexpected_gateway_routes_violation
            .as_ref()
    }
    /// <p>Expected routes are missing from Network Firewall.</p>
    pub fn network_firewall_missing_expected_routes_violation(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallMissingExpectedRoutesViolation> {
        self.network_firewall_missing_expected_routes_violation
            .as_ref()
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC has the same priority as a rule group that's already associated. </p>
    pub fn dns_rule_group_priority_conflict_violation(
        &self,
    ) -> std::option::Option<&crate::types::DnsRuleGroupPriorityConflictViolation> {
        self.dns_rule_group_priority_conflict_violation.as_ref()
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC is already associated with the VPC and can't be associated again. </p>
    pub fn dns_duplicate_rule_group_violation(
        &self,
    ) -> std::option::Option<&crate::types::DnsDuplicateRuleGroupViolation> {
        self.dns_duplicate_rule_group_violation.as_ref()
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that the VPC reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed. </p>
    pub fn dns_rule_group_limit_exceeded_violation(
        &self,
    ) -> std::option::Option<&crate::types::DnsRuleGroupLimitExceededViolation> {
        self.dns_rule_group_limit_exceeded_violation.as_ref()
    }
    /// <p>A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.</p>
    pub fn possible_remediation_actions(
        &self,
    ) -> std::option::Option<&crate::types::PossibleRemediationActions> {
        self.possible_remediation_actions.as_ref()
    }
    /// <p>Contains details about the firewall subnet that violates the policy scope.</p>
    pub fn firewall_subnet_is_out_of_scope_violation(
        &self,
    ) -> std::option::Option<&crate::types::FirewallSubnetIsOutOfScopeViolation> {
        self.firewall_subnet_is_out_of_scope_violation.as_ref()
    }
    /// <p>Contains details about the route endpoint that violates the policy scope.</p>
    pub fn route_has_out_of_scope_endpoint_violation(
        &self,
    ) -> std::option::Option<&crate::types::RouteHasOutOfScopeEndpointViolation> {
        self.route_has_out_of_scope_endpoint_violation.as_ref()
    }
    /// <p>The violation details for a third-party firewall that's been deleted.</p>
    pub fn third_party_firewall_missing_firewall_violation(
        &self,
    ) -> std::option::Option<&crate::types::ThirdPartyFirewallMissingFirewallViolation> {
        self.third_party_firewall_missing_firewall_violation
            .as_ref()
    }
    /// <p>The violation details for a third-party firewall's subnet that's been deleted.</p>
    pub fn third_party_firewall_missing_subnet_violation(
        &self,
    ) -> std::option::Option<&crate::types::ThirdPartyFirewallMissingSubnetViolation> {
        self.third_party_firewall_missing_subnet_violation.as_ref()
    }
    /// <p>The violation details for a third-party firewall that has the Firewall Manager managed route table that was associated with the third-party firewall has been deleted.</p>
    pub fn third_party_firewall_missing_expected_route_table_violation(
        &self,
    ) -> std::option::Option<&crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation>
    {
        self.third_party_firewall_missing_expected_route_table_violation
            .as_ref()
    }
    /// <p>The violation details for a third-party firewall's VPC endpoint subnet that was deleted.</p>
    pub fn firewall_subnet_missing_vpc_endpoint_violation(
        &self,
    ) -> std::option::Option<&crate::types::FirewallSubnetMissingVpcEndpointViolation> {
        self.firewall_subnet_missing_vpc_endpoint_violation.as_ref()
    }
}
impl ResourceViolation {
    /// Creates a new builder-style object to manufacture [`ResourceViolation`](crate::types::ResourceViolation).
    pub fn builder() -> crate::types::builders::ResourceViolationBuilder {
        crate::types::builders::ResourceViolationBuilder::default()
    }
}

/// A builder for [`ResourceViolation`](crate::types::ResourceViolation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceViolationBuilder {
    pub(crate) aws_vpc_security_group_violation:
        std::option::Option<crate::types::AwsVpcSecurityGroupViolation>,
    pub(crate) aws_ec2_network_interface_violation:
        std::option::Option<crate::types::AwsEc2NetworkInterfaceViolation>,
    pub(crate) aws_ec2_instance_violation:
        std::option::Option<crate::types::AwsEc2InstanceViolation>,
    pub(crate) network_firewall_missing_firewall_violation:
        std::option::Option<crate::types::NetworkFirewallMissingFirewallViolation>,
    pub(crate) network_firewall_missing_subnet_violation:
        std::option::Option<crate::types::NetworkFirewallMissingSubnetViolation>,
    pub(crate) network_firewall_missing_expected_rt_violation:
        std::option::Option<crate::types::NetworkFirewallMissingExpectedRtViolation>,
    pub(crate) network_firewall_policy_modified_violation:
        std::option::Option<crate::types::NetworkFirewallPolicyModifiedViolation>,
    pub(crate) network_firewall_internet_traffic_not_inspected_violation:
        std::option::Option<crate::types::NetworkFirewallInternetTrafficNotInspectedViolation>,
    pub(crate) network_firewall_invalid_route_configuration_violation:
        std::option::Option<crate::types::NetworkFirewallInvalidRouteConfigurationViolation>,
    pub(crate) network_firewall_black_hole_route_detected_violation:
        std::option::Option<crate::types::NetworkFirewallBlackHoleRouteDetectedViolation>,
    pub(crate) network_firewall_unexpected_firewall_routes_violation:
        std::option::Option<crate::types::NetworkFirewallUnexpectedFirewallRoutesViolation>,
    pub(crate) network_firewall_unexpected_gateway_routes_violation:
        std::option::Option<crate::types::NetworkFirewallUnexpectedGatewayRoutesViolation>,
    pub(crate) network_firewall_missing_expected_routes_violation:
        std::option::Option<crate::types::NetworkFirewallMissingExpectedRoutesViolation>,
    pub(crate) dns_rule_group_priority_conflict_violation:
        std::option::Option<crate::types::DnsRuleGroupPriorityConflictViolation>,
    pub(crate) dns_duplicate_rule_group_violation:
        std::option::Option<crate::types::DnsDuplicateRuleGroupViolation>,
    pub(crate) dns_rule_group_limit_exceeded_violation:
        std::option::Option<crate::types::DnsRuleGroupLimitExceededViolation>,
    pub(crate) possible_remediation_actions:
        std::option::Option<crate::types::PossibleRemediationActions>,
    pub(crate) firewall_subnet_is_out_of_scope_violation:
        std::option::Option<crate::types::FirewallSubnetIsOutOfScopeViolation>,
    pub(crate) route_has_out_of_scope_endpoint_violation:
        std::option::Option<crate::types::RouteHasOutOfScopeEndpointViolation>,
    pub(crate) third_party_firewall_missing_firewall_violation:
        std::option::Option<crate::types::ThirdPartyFirewallMissingFirewallViolation>,
    pub(crate) third_party_firewall_missing_subnet_violation:
        std::option::Option<crate::types::ThirdPartyFirewallMissingSubnetViolation>,
    pub(crate) third_party_firewall_missing_expected_route_table_violation:
        std::option::Option<crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation>,
    pub(crate) firewall_subnet_missing_vpc_endpoint_violation:
        std::option::Option<crate::types::FirewallSubnetMissingVpcEndpointViolation>,
}
impl ResourceViolationBuilder {
    /// <p>Violation detail for security groups.</p>
    pub fn aws_vpc_security_group_violation(
        mut self,
        input: crate::types::AwsVpcSecurityGroupViolation,
    ) -> Self {
        self.aws_vpc_security_group_violation = Some(input);
        self
    }
    /// <p>Violation detail for security groups.</p>
    pub fn set_aws_vpc_security_group_violation(
        mut self,
        input: std::option::Option<crate::types::AwsVpcSecurityGroupViolation>,
    ) -> Self {
        self.aws_vpc_security_group_violation = input;
        self
    }
    /// <p>Violation detail for a network interface.</p>
    pub fn aws_ec2_network_interface_violation(
        mut self,
        input: crate::types::AwsEc2NetworkInterfaceViolation,
    ) -> Self {
        self.aws_ec2_network_interface_violation = Some(input);
        self
    }
    /// <p>Violation detail for a network interface.</p>
    pub fn set_aws_ec2_network_interface_violation(
        mut self,
        input: std::option::Option<crate::types::AwsEc2NetworkInterfaceViolation>,
    ) -> Self {
        self.aws_ec2_network_interface_violation = input;
        self
    }
    /// <p>Violation detail for an EC2 instance.</p>
    pub fn aws_ec2_instance_violation(
        mut self,
        input: crate::types::AwsEc2InstanceViolation,
    ) -> Self {
        self.aws_ec2_instance_violation = Some(input);
        self
    }
    /// <p>Violation detail for an EC2 instance.</p>
    pub fn set_aws_ec2_instance_violation(
        mut self,
        input: std::option::Option<crate::types::AwsEc2InstanceViolation>,
    ) -> Self {
        self.aws_ec2_instance_violation = input;
        self
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a subnet has no Firewall Manager managed firewall in its VPC. </p>
    pub fn network_firewall_missing_firewall_violation(
        mut self,
        input: crate::types::NetworkFirewallMissingFirewallViolation,
    ) -> Self {
        self.network_firewall_missing_firewall_violation = Some(input);
        self
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a subnet has no Firewall Manager managed firewall in its VPC. </p>
    pub fn set_network_firewall_missing_firewall_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallMissingFirewallViolation>,
    ) -> Self {
        self.network_firewall_missing_firewall_violation = input;
        self
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that an Availability Zone is missing the expected Firewall Manager managed subnet.</p>
    pub fn network_firewall_missing_subnet_violation(
        mut self,
        input: crate::types::NetworkFirewallMissingSubnetViolation,
    ) -> Self {
        self.network_firewall_missing_subnet_violation = Some(input);
        self
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that an Availability Zone is missing the expected Firewall Manager managed subnet.</p>
    pub fn set_network_firewall_missing_subnet_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallMissingSubnetViolation>,
    ) -> Self {
        self.network_firewall_missing_subnet_violation = input;
        self
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a subnet is not associated with the expected Firewall Manager managed route table. </p>
    pub fn network_firewall_missing_expected_rt_violation(
        mut self,
        input: crate::types::NetworkFirewallMissingExpectedRtViolation,
    ) -> Self {
        self.network_firewall_missing_expected_rt_violation = Some(input);
        self
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a subnet is not associated with the expected Firewall Manager managed route table. </p>
    pub fn set_network_firewall_missing_expected_rt_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallMissingExpectedRtViolation>,
    ) -> Self {
        self.network_firewall_missing_expected_rt_violation = input;
        self
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a firewall policy in an individual account has been modified in a way that makes it noncompliant. For example, the individual account owner might have deleted a rule group, changed the priority of a stateless rule group, or changed a policy default action.</p>
    pub fn network_firewall_policy_modified_violation(
        mut self,
        input: crate::types::NetworkFirewallPolicyModifiedViolation,
    ) -> Self {
        self.network_firewall_policy_modified_violation = Some(input);
        self
    }
    /// <p>Violation detail for an Network Firewall policy that indicates that a firewall policy in an individual account has been modified in a way that makes it noncompliant. For example, the individual account owner might have deleted a rule group, changed the priority of a stateless rule group, or changed a policy default action.</p>
    pub fn set_network_firewall_policy_modified_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallPolicyModifiedViolation>,
    ) -> Self {
        self.network_firewall_policy_modified_violation = input;
        self
    }
    /// <p>Violation detail for the subnet for which internet traffic hasn't been inspected.</p>
    pub fn network_firewall_internet_traffic_not_inspected_violation(
        mut self,
        input: crate::types::NetworkFirewallInternetTrafficNotInspectedViolation,
    ) -> Self {
        self.network_firewall_internet_traffic_not_inspected_violation = Some(input);
        self
    }
    /// <p>Violation detail for the subnet for which internet traffic hasn't been inspected.</p>
    pub fn set_network_firewall_internet_traffic_not_inspected_violation(
        mut self,
        input: std::option::Option<
            crate::types::NetworkFirewallInternetTrafficNotInspectedViolation,
        >,
    ) -> Self {
        self.network_firewall_internet_traffic_not_inspected_violation = input;
        self
    }
    /// <p>The route configuration is invalid.</p>
    pub fn network_firewall_invalid_route_configuration_violation(
        mut self,
        input: crate::types::NetworkFirewallInvalidRouteConfigurationViolation,
    ) -> Self {
        self.network_firewall_invalid_route_configuration_violation = Some(input);
        self
    }
    /// <p>The route configuration is invalid.</p>
    pub fn set_network_firewall_invalid_route_configuration_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallInvalidRouteConfigurationViolation>,
    ) -> Self {
        self.network_firewall_invalid_route_configuration_violation = input;
        self
    }
    /// <p>Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table.</p>
    pub fn network_firewall_black_hole_route_detected_violation(
        mut self,
        input: crate::types::NetworkFirewallBlackHoleRouteDetectedViolation,
    ) -> Self {
        self.network_firewall_black_hole_route_detected_violation = Some(input);
        self
    }
    /// <p>Violation detail for an internet gateway route with an inactive state in the customer subnet route table or Network Firewall subnet route table.</p>
    pub fn set_network_firewall_black_hole_route_detected_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallBlackHoleRouteDetectedViolation>,
    ) -> Self {
        self.network_firewall_black_hole_route_detected_violation = input;
        self
    }
    /// <p>There's an unexpected firewall route.</p>
    pub fn network_firewall_unexpected_firewall_routes_violation(
        mut self,
        input: crate::types::NetworkFirewallUnexpectedFirewallRoutesViolation,
    ) -> Self {
        self.network_firewall_unexpected_firewall_routes_violation = Some(input);
        self
    }
    /// <p>There's an unexpected firewall route.</p>
    pub fn set_network_firewall_unexpected_firewall_routes_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallUnexpectedFirewallRoutesViolation>,
    ) -> Self {
        self.network_firewall_unexpected_firewall_routes_violation = input;
        self
    }
    /// <p>There's an unexpected gateway route.</p>
    pub fn network_firewall_unexpected_gateway_routes_violation(
        mut self,
        input: crate::types::NetworkFirewallUnexpectedGatewayRoutesViolation,
    ) -> Self {
        self.network_firewall_unexpected_gateway_routes_violation = Some(input);
        self
    }
    /// <p>There's an unexpected gateway route.</p>
    pub fn set_network_firewall_unexpected_gateway_routes_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallUnexpectedGatewayRoutesViolation>,
    ) -> Self {
        self.network_firewall_unexpected_gateway_routes_violation = input;
        self
    }
    /// <p>Expected routes are missing from Network Firewall.</p>
    pub fn network_firewall_missing_expected_routes_violation(
        mut self,
        input: crate::types::NetworkFirewallMissingExpectedRoutesViolation,
    ) -> Self {
        self.network_firewall_missing_expected_routes_violation = Some(input);
        self
    }
    /// <p>Expected routes are missing from Network Firewall.</p>
    pub fn set_network_firewall_missing_expected_routes_violation(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallMissingExpectedRoutesViolation>,
    ) -> Self {
        self.network_firewall_missing_expected_routes_violation = input;
        self
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC has the same priority as a rule group that's already associated. </p>
    pub fn dns_rule_group_priority_conflict_violation(
        mut self,
        input: crate::types::DnsRuleGroupPriorityConflictViolation,
    ) -> Self {
        self.dns_rule_group_priority_conflict_violation = Some(input);
        self
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC has the same priority as a rule group that's already associated. </p>
    pub fn set_dns_rule_group_priority_conflict_violation(
        mut self,
        input: std::option::Option<crate::types::DnsRuleGroupPriorityConflictViolation>,
    ) -> Self {
        self.dns_rule_group_priority_conflict_violation = input;
        self
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC is already associated with the VPC and can't be associated again. </p>
    pub fn dns_duplicate_rule_group_violation(
        mut self,
        input: crate::types::DnsDuplicateRuleGroupViolation,
    ) -> Self {
        self.dns_duplicate_rule_group_violation = Some(input);
        self
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that a rule group that Firewall Manager tried to associate with a VPC is already associated with the VPC and can't be associated again. </p>
    pub fn set_dns_duplicate_rule_group_violation(
        mut self,
        input: std::option::Option<crate::types::DnsDuplicateRuleGroupViolation>,
    ) -> Self {
        self.dns_duplicate_rule_group_violation = input;
        self
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that the VPC reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed. </p>
    pub fn dns_rule_group_limit_exceeded_violation(
        mut self,
        input: crate::types::DnsRuleGroupLimitExceededViolation,
    ) -> Self {
        self.dns_rule_group_limit_exceeded_violation = Some(input);
        self
    }
    /// <p>Violation detail for a DNS Firewall policy that indicates that the VPC reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed. </p>
    pub fn set_dns_rule_group_limit_exceeded_violation(
        mut self,
        input: std::option::Option<crate::types::DnsRuleGroupLimitExceededViolation>,
    ) -> Self {
        self.dns_rule_group_limit_exceeded_violation = input;
        self
    }
    /// <p>A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.</p>
    pub fn possible_remediation_actions(
        mut self,
        input: crate::types::PossibleRemediationActions,
    ) -> Self {
        self.possible_remediation_actions = Some(input);
        self
    }
    /// <p>A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.</p>
    pub fn set_possible_remediation_actions(
        mut self,
        input: std::option::Option<crate::types::PossibleRemediationActions>,
    ) -> Self {
        self.possible_remediation_actions = input;
        self
    }
    /// <p>Contains details about the firewall subnet that violates the policy scope.</p>
    pub fn firewall_subnet_is_out_of_scope_violation(
        mut self,
        input: crate::types::FirewallSubnetIsOutOfScopeViolation,
    ) -> Self {
        self.firewall_subnet_is_out_of_scope_violation = Some(input);
        self
    }
    /// <p>Contains details about the firewall subnet that violates the policy scope.</p>
    pub fn set_firewall_subnet_is_out_of_scope_violation(
        mut self,
        input: std::option::Option<crate::types::FirewallSubnetIsOutOfScopeViolation>,
    ) -> Self {
        self.firewall_subnet_is_out_of_scope_violation = input;
        self
    }
    /// <p>Contains details about the route endpoint that violates the policy scope.</p>
    pub fn route_has_out_of_scope_endpoint_violation(
        mut self,
        input: crate::types::RouteHasOutOfScopeEndpointViolation,
    ) -> Self {
        self.route_has_out_of_scope_endpoint_violation = Some(input);
        self
    }
    /// <p>Contains details about the route endpoint that violates the policy scope.</p>
    pub fn set_route_has_out_of_scope_endpoint_violation(
        mut self,
        input: std::option::Option<crate::types::RouteHasOutOfScopeEndpointViolation>,
    ) -> Self {
        self.route_has_out_of_scope_endpoint_violation = input;
        self
    }
    /// <p>The violation details for a third-party firewall that's been deleted.</p>
    pub fn third_party_firewall_missing_firewall_violation(
        mut self,
        input: crate::types::ThirdPartyFirewallMissingFirewallViolation,
    ) -> Self {
        self.third_party_firewall_missing_firewall_violation = Some(input);
        self
    }
    /// <p>The violation details for a third-party firewall that's been deleted.</p>
    pub fn set_third_party_firewall_missing_firewall_violation(
        mut self,
        input: std::option::Option<crate::types::ThirdPartyFirewallMissingFirewallViolation>,
    ) -> Self {
        self.third_party_firewall_missing_firewall_violation = input;
        self
    }
    /// <p>The violation details for a third-party firewall's subnet that's been deleted.</p>
    pub fn third_party_firewall_missing_subnet_violation(
        mut self,
        input: crate::types::ThirdPartyFirewallMissingSubnetViolation,
    ) -> Self {
        self.third_party_firewall_missing_subnet_violation = Some(input);
        self
    }
    /// <p>The violation details for a third-party firewall's subnet that's been deleted.</p>
    pub fn set_third_party_firewall_missing_subnet_violation(
        mut self,
        input: std::option::Option<crate::types::ThirdPartyFirewallMissingSubnetViolation>,
    ) -> Self {
        self.third_party_firewall_missing_subnet_violation = input;
        self
    }
    /// <p>The violation details for a third-party firewall that has the Firewall Manager managed route table that was associated with the third-party firewall has been deleted.</p>
    pub fn third_party_firewall_missing_expected_route_table_violation(
        mut self,
        input: crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation,
    ) -> Self {
        self.third_party_firewall_missing_expected_route_table_violation = Some(input);
        self
    }
    /// <p>The violation details for a third-party firewall that has the Firewall Manager managed route table that was associated with the third-party firewall has been deleted.</p>
    pub fn set_third_party_firewall_missing_expected_route_table_violation(
        mut self,
        input: std::option::Option<
            crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation,
        >,
    ) -> Self {
        self.third_party_firewall_missing_expected_route_table_violation = input;
        self
    }
    /// <p>The violation details for a third-party firewall's VPC endpoint subnet that was deleted.</p>
    pub fn firewall_subnet_missing_vpc_endpoint_violation(
        mut self,
        input: crate::types::FirewallSubnetMissingVpcEndpointViolation,
    ) -> Self {
        self.firewall_subnet_missing_vpc_endpoint_violation = Some(input);
        self
    }
    /// <p>The violation details for a third-party firewall's VPC endpoint subnet that was deleted.</p>
    pub fn set_firewall_subnet_missing_vpc_endpoint_violation(
        mut self,
        input: std::option::Option<crate::types::FirewallSubnetMissingVpcEndpointViolation>,
    ) -> Self {
        self.firewall_subnet_missing_vpc_endpoint_violation = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceViolation`](crate::types::ResourceViolation).
    pub fn build(self) -> crate::types::ResourceViolation {
        crate::types::ResourceViolation {
            aws_vpc_security_group_violation: self.aws_vpc_security_group_violation,
            aws_ec2_network_interface_violation: self.aws_ec2_network_interface_violation,
            aws_ec2_instance_violation: self.aws_ec2_instance_violation,
            network_firewall_missing_firewall_violation: self
                .network_firewall_missing_firewall_violation,
            network_firewall_missing_subnet_violation: self
                .network_firewall_missing_subnet_violation,
            network_firewall_missing_expected_rt_violation: self
                .network_firewall_missing_expected_rt_violation,
            network_firewall_policy_modified_violation: self
                .network_firewall_policy_modified_violation,
            network_firewall_internet_traffic_not_inspected_violation: self
                .network_firewall_internet_traffic_not_inspected_violation,
            network_firewall_invalid_route_configuration_violation: self
                .network_firewall_invalid_route_configuration_violation,
            network_firewall_black_hole_route_detected_violation: self
                .network_firewall_black_hole_route_detected_violation,
            network_firewall_unexpected_firewall_routes_violation: self
                .network_firewall_unexpected_firewall_routes_violation,
            network_firewall_unexpected_gateway_routes_violation: self
                .network_firewall_unexpected_gateway_routes_violation,
            network_firewall_missing_expected_routes_violation: self
                .network_firewall_missing_expected_routes_violation,
            dns_rule_group_priority_conflict_violation: self
                .dns_rule_group_priority_conflict_violation,
            dns_duplicate_rule_group_violation: self.dns_duplicate_rule_group_violation,
            dns_rule_group_limit_exceeded_violation: self.dns_rule_group_limit_exceeded_violation,
            possible_remediation_actions: self.possible_remediation_actions,
            firewall_subnet_is_out_of_scope_violation: self
                .firewall_subnet_is_out_of_scope_violation,
            route_has_out_of_scope_endpoint_violation: self
                .route_has_out_of_scope_endpoint_violation,
            third_party_firewall_missing_firewall_violation: self
                .third_party_firewall_missing_firewall_violation,
            third_party_firewall_missing_subnet_violation: self
                .third_party_firewall_missing_subnet_violation,
            third_party_firewall_missing_expected_route_table_violation: self
                .third_party_firewall_missing_expected_route_table_violation,
            firewall_subnet_missing_vpc_endpoint_violation: self
                .firewall_subnet_missing_vpc_endpoint_violation,
        }
    }
}
