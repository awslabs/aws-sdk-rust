// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of remediation actions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PossibleRemediationAction {
    /// <p>A description of the list of remediation actions.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ordered list of remediation actions.</p>
    pub ordered_remediation_actions: ::std::vec::Vec<crate::types::RemediationActionWithOrder>,
    /// <p>Information about whether an action is taken by default.</p>
    pub is_default_action: bool,
}
impl PossibleRemediationAction {
    /// <p>A description of the list of remediation actions.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ordered list of remediation actions.</p>
    pub fn ordered_remediation_actions(&self) -> &[crate::types::RemediationActionWithOrder] {
        use std::ops::Deref;
        self.ordered_remediation_actions.deref()
    }
    /// <p>Information about whether an action is taken by default.</p>
    pub fn is_default_action(&self) -> bool {
        self.is_default_action
    }
}
impl PossibleRemediationAction {
    /// Creates a new builder-style object to manufacture [`PossibleRemediationAction`](crate::types::PossibleRemediationAction).
    pub fn builder() -> crate::types::builders::PossibleRemediationActionBuilder {
        crate::types::builders::PossibleRemediationActionBuilder::default()
    }
}

/// A builder for [`PossibleRemediationAction`](crate::types::PossibleRemediationAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PossibleRemediationActionBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) ordered_remediation_actions: ::std::option::Option<::std::vec::Vec<crate::types::RemediationActionWithOrder>>,
    pub(crate) is_default_action: ::std::option::Option<bool>,
}
impl PossibleRemediationActionBuilder {
    /// <p>A description of the list of remediation actions.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the list of remediation actions.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the list of remediation actions.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `ordered_remediation_actions`.
    ///
    /// To override the contents of this collection use [`set_ordered_remediation_actions`](Self::set_ordered_remediation_actions).
    ///
    /// <p>The ordered list of remediation actions.</p>
    pub fn ordered_remediation_actions(mut self, input: crate::types::RemediationActionWithOrder) -> Self {
        let mut v = self.ordered_remediation_actions.unwrap_or_default();
        v.push(input);
        self.ordered_remediation_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The ordered list of remediation actions.</p>
    pub fn set_ordered_remediation_actions(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RemediationActionWithOrder>>,
    ) -> Self {
        self.ordered_remediation_actions = input;
        self
    }
    /// <p>The ordered list of remediation actions.</p>
    pub fn get_ordered_remediation_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RemediationActionWithOrder>> {
        &self.ordered_remediation_actions
    }
    /// <p>Information about whether an action is taken by default.</p>
    pub fn is_default_action(mut self, input: bool) -> Self {
        self.is_default_action = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about whether an action is taken by default.</p>
    pub fn set_is_default_action(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_default_action = input;
        self
    }
    /// <p>Information about whether an action is taken by default.</p>
    pub fn get_is_default_action(&self) -> &::std::option::Option<bool> {
        &self.is_default_action
    }
    /// Consumes the builder and constructs a [`PossibleRemediationAction`](crate::types::PossibleRemediationAction).
    /// This method will fail if any of the following fields are not set:
    /// - [`ordered_remediation_actions`](crate::types::builders::PossibleRemediationActionBuilder::ordered_remediation_actions)
    pub fn build(self) -> ::std::result::Result<crate::types::PossibleRemediationAction, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PossibleRemediationAction {
            description: self.description,
            ordered_remediation_actions: self.ordered_remediation_actions.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "ordered_remediation_actions",
                    "ordered_remediation_actions was not specified but it is required when building PossibleRemediationAction",
                )
            })?,
            is_default_action: self.is_default_action.unwrap_or_default(),
        })
    }
}
