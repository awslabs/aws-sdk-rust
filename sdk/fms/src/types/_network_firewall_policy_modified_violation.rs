// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Violation detail for Network Firewall for a firewall policy that has a different <code>NetworkFirewallPolicyDescription</code> than is required by the Firewall Manager policy. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct NetworkFirewallPolicyModifiedViolation {
    /// <p>The ID of the Network Firewall or VPC resource that's in violation.</p>
    #[doc(hidden)]
    pub violation_target: std::option::Option<std::string::String>,
    /// <p>The policy that's currently in use in the individual account. </p>
    #[doc(hidden)]
    pub current_policy_description:
        std::option::Option<crate::types::NetworkFirewallPolicyDescription>,
    /// <p>The policy that should be in use in the individual account in order to be compliant. </p>
    #[doc(hidden)]
    pub expected_policy_description:
        std::option::Option<crate::types::NetworkFirewallPolicyDescription>,
}
impl NetworkFirewallPolicyModifiedViolation {
    /// <p>The ID of the Network Firewall or VPC resource that's in violation.</p>
    pub fn violation_target(&self) -> std::option::Option<&str> {
        self.violation_target.as_deref()
    }
    /// <p>The policy that's currently in use in the individual account. </p>
    pub fn current_policy_description(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallPolicyDescription> {
        self.current_policy_description.as_ref()
    }
    /// <p>The policy that should be in use in the individual account in order to be compliant. </p>
    pub fn expected_policy_description(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallPolicyDescription> {
        self.expected_policy_description.as_ref()
    }
}
impl NetworkFirewallPolicyModifiedViolation {
    /// Creates a new builder-style object to manufacture [`NetworkFirewallPolicyModifiedViolation`](crate::types::NetworkFirewallPolicyModifiedViolation).
    pub fn builder() -> crate::types::builders::NetworkFirewallPolicyModifiedViolationBuilder {
        crate::types::builders::NetworkFirewallPolicyModifiedViolationBuilder::default()
    }
}

/// A builder for [`NetworkFirewallPolicyModifiedViolation`](crate::types::NetworkFirewallPolicyModifiedViolation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct NetworkFirewallPolicyModifiedViolationBuilder {
    pub(crate) violation_target: std::option::Option<std::string::String>,
    pub(crate) current_policy_description:
        std::option::Option<crate::types::NetworkFirewallPolicyDescription>,
    pub(crate) expected_policy_description:
        std::option::Option<crate::types::NetworkFirewallPolicyDescription>,
}
impl NetworkFirewallPolicyModifiedViolationBuilder {
    /// <p>The ID of the Network Firewall or VPC resource that's in violation.</p>
    pub fn violation_target(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target = Some(input.into());
        self
    }
    /// <p>The ID of the Network Firewall or VPC resource that's in violation.</p>
    pub fn set_violation_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.violation_target = input;
        self
    }
    /// <p>The policy that's currently in use in the individual account. </p>
    pub fn current_policy_description(
        mut self,
        input: crate::types::NetworkFirewallPolicyDescription,
    ) -> Self {
        self.current_policy_description = Some(input);
        self
    }
    /// <p>The policy that's currently in use in the individual account. </p>
    pub fn set_current_policy_description(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallPolicyDescription>,
    ) -> Self {
        self.current_policy_description = input;
        self
    }
    /// <p>The policy that should be in use in the individual account in order to be compliant. </p>
    pub fn expected_policy_description(
        mut self,
        input: crate::types::NetworkFirewallPolicyDescription,
    ) -> Self {
        self.expected_policy_description = Some(input);
        self
    }
    /// <p>The policy that should be in use in the individual account in order to be compliant. </p>
    pub fn set_expected_policy_description(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallPolicyDescription>,
    ) -> Self {
        self.expected_policy_description = input;
        self
    }
    /// Consumes the builder and constructs a [`NetworkFirewallPolicyModifiedViolation`](crate::types::NetworkFirewallPolicyModifiedViolation).
    pub fn build(self) -> crate::types::NetworkFirewallPolicyModifiedViolation {
        crate::types::NetworkFirewallPolicyModifiedViolation {
            violation_target: self.violation_target,
            current_policy_description: self.current_policy_description,
            expected_policy_description: self.expected_policy_description,
        }
    }
}
