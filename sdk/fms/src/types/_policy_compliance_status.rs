// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Indicates whether the account is compliant with the specified policy. An account is considered noncompliant if it includes resources that are not protected by the policy, for WAF and Shield Advanced policies, or that are noncompliant with the policy, for security group policies.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PolicyComplianceStatus {
    /// <p>The Amazon Web Services account that created the Firewall Manager policy.</p>
    pub policy_owner: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Firewall Manager policy.</p>
    pub policy_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Firewall Manager policy.</p>
    pub policy_name: ::std::option::Option<::std::string::String>,
    /// <p>The member account ID.</p>
    pub member_account: ::std::option::Option<::std::string::String>,
    /// <p>An array of <code>EvaluationResult</code> objects.</p>
    pub evaluation_results: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationResult>>,
    /// <p>Timestamp of the last update to the <code>EvaluationResult</code> objects.</p>
    pub last_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Details about problems with dependent services, such as WAF or Config, and the error message received that indicates the problem with the service.</p>
    pub issue_info_map: ::std::option::Option<::std::collections::HashMap<crate::types::DependentServiceName, ::std::string::String>>,
}
impl PolicyComplianceStatus {
    /// <p>The Amazon Web Services account that created the Firewall Manager policy.</p>
    pub fn policy_owner(&self) -> ::std::option::Option<&str> {
        self.policy_owner.as_deref()
    }
    /// <p>The ID of the Firewall Manager policy.</p>
    pub fn policy_id(&self) -> ::std::option::Option<&str> {
        self.policy_id.as_deref()
    }
    /// <p>The name of the Firewall Manager policy.</p>
    pub fn policy_name(&self) -> ::std::option::Option<&str> {
        self.policy_name.as_deref()
    }
    /// <p>The member account ID.</p>
    pub fn member_account(&self) -> ::std::option::Option<&str> {
        self.member_account.as_deref()
    }
    /// <p>An array of <code>EvaluationResult</code> objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.evaluation_results.is_none()`.
    pub fn evaluation_results(&self) -> &[crate::types::EvaluationResult] {
        self.evaluation_results.as_deref().unwrap_or_default()
    }
    /// <p>Timestamp of the last update to the <code>EvaluationResult</code> objects.</p>
    pub fn last_updated(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated.as_ref()
    }
    /// <p>Details about problems with dependent services, such as WAF or Config, and the error message received that indicates the problem with the service.</p>
    pub fn issue_info_map(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::DependentServiceName, ::std::string::String>> {
        self.issue_info_map.as_ref()
    }
}
impl PolicyComplianceStatus {
    /// Creates a new builder-style object to manufacture [`PolicyComplianceStatus`](crate::types::PolicyComplianceStatus).
    pub fn builder() -> crate::types::builders::PolicyComplianceStatusBuilder {
        crate::types::builders::PolicyComplianceStatusBuilder::default()
    }
}

/// A builder for [`PolicyComplianceStatus`](crate::types::PolicyComplianceStatus).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PolicyComplianceStatusBuilder {
    pub(crate) policy_owner: ::std::option::Option<::std::string::String>,
    pub(crate) policy_id: ::std::option::Option<::std::string::String>,
    pub(crate) policy_name: ::std::option::Option<::std::string::String>,
    pub(crate) member_account: ::std::option::Option<::std::string::String>,
    pub(crate) evaluation_results: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationResult>>,
    pub(crate) last_updated: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) issue_info_map: ::std::option::Option<::std::collections::HashMap<crate::types::DependentServiceName, ::std::string::String>>,
}
impl PolicyComplianceStatusBuilder {
    /// <p>The Amazon Web Services account that created the Firewall Manager policy.</p>
    pub fn policy_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account that created the Firewall Manager policy.</p>
    pub fn set_policy_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_owner = input;
        self
    }
    /// <p>The Amazon Web Services account that created the Firewall Manager policy.</p>
    pub fn get_policy_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_owner
    }
    /// <p>The ID of the Firewall Manager policy.</p>
    pub fn policy_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Firewall Manager policy.</p>
    pub fn set_policy_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_id = input;
        self
    }
    /// <p>The ID of the Firewall Manager policy.</p>
    pub fn get_policy_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_id
    }
    /// <p>The name of the Firewall Manager policy.</p>
    pub fn policy_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Firewall Manager policy.</p>
    pub fn set_policy_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_name = input;
        self
    }
    /// <p>The name of the Firewall Manager policy.</p>
    pub fn get_policy_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_name
    }
    /// <p>The member account ID.</p>
    pub fn member_account(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.member_account = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The member account ID.</p>
    pub fn set_member_account(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.member_account = input;
        self
    }
    /// <p>The member account ID.</p>
    pub fn get_member_account(&self) -> &::std::option::Option<::std::string::String> {
        &self.member_account
    }
    /// Appends an item to `evaluation_results`.
    ///
    /// To override the contents of this collection use [`set_evaluation_results`](Self::set_evaluation_results).
    ///
    /// <p>An array of <code>EvaluationResult</code> objects.</p>
    pub fn evaluation_results(mut self, input: crate::types::EvaluationResult) -> Self {
        let mut v = self.evaluation_results.unwrap_or_default();
        v.push(input);
        self.evaluation_results = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>EvaluationResult</code> objects.</p>
    pub fn set_evaluation_results(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EvaluationResult>>) -> Self {
        self.evaluation_results = input;
        self
    }
    /// <p>An array of <code>EvaluationResult</code> objects.</p>
    pub fn get_evaluation_results(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EvaluationResult>> {
        &self.evaluation_results
    }
    /// <p>Timestamp of the last update to the <code>EvaluationResult</code> objects.</p>
    pub fn last_updated(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated = ::std::option::Option::Some(input);
        self
    }
    /// <p>Timestamp of the last update to the <code>EvaluationResult</code> objects.</p>
    pub fn set_last_updated(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated = input;
        self
    }
    /// <p>Timestamp of the last update to the <code>EvaluationResult</code> objects.</p>
    pub fn get_last_updated(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated
    }
    /// Adds a key-value pair to `issue_info_map`.
    ///
    /// To override the contents of this collection use [`set_issue_info_map`](Self::set_issue_info_map).
    ///
    /// <p>Details about problems with dependent services, such as WAF or Config, and the error message received that indicates the problem with the service.</p>
    pub fn issue_info_map(mut self, k: crate::types::DependentServiceName, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.issue_info_map.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.issue_info_map = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Details about problems with dependent services, such as WAF or Config, and the error message received that indicates the problem with the service.</p>
    pub fn set_issue_info_map(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::DependentServiceName, ::std::string::String>>,
    ) -> Self {
        self.issue_info_map = input;
        self
    }
    /// <p>Details about problems with dependent services, such as WAF or Config, and the error message received that indicates the problem with the service.</p>
    pub fn get_issue_info_map(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<crate::types::DependentServiceName, ::std::string::String>> {
        &self.issue_info_map
    }
    /// Consumes the builder and constructs a [`PolicyComplianceStatus`](crate::types::PolicyComplianceStatus).
    pub fn build(self) -> crate::types::PolicyComplianceStatus {
        crate::types::PolicyComplianceStatus {
            policy_owner: self.policy_owner,
            policy_id: self.policy_id,
            policy_name: self.policy_name,
            member_account: self.member_account,
            evaluation_results: self.evaluation_results,
            last_updated: self.last_updated,
            issue_info_map: self.issue_info_map,
        }
    }
}
