// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Remediation option for the rule specified in the <code>ViolationTarget</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityGroupRemediationAction {
    /// <p>The remediation action that will be performed.</p>
    #[doc(hidden)]
    pub remediation_action_type: std::option::Option<crate::types::RemediationActionType>,
    /// <p>Brief description of the action that will be performed.</p>
    #[doc(hidden)]
    pub description: std::option::Option<std::string::String>,
    /// <p>The final state of the rule specified in the <code>ViolationTarget</code> after it is remediated.</p>
    #[doc(hidden)]
    pub remediation_result: std::option::Option<crate::types::SecurityGroupRuleDescription>,
    /// <p>Indicates if the current action is the default action.</p>
    #[doc(hidden)]
    pub is_default_action: bool,
}
impl SecurityGroupRemediationAction {
    /// <p>The remediation action that will be performed.</p>
    pub fn remediation_action_type(
        &self,
    ) -> std::option::Option<&crate::types::RemediationActionType> {
        self.remediation_action_type.as_ref()
    }
    /// <p>Brief description of the action that will be performed.</p>
    pub fn description(&self) -> std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The final state of the rule specified in the <code>ViolationTarget</code> after it is remediated.</p>
    pub fn remediation_result(
        &self,
    ) -> std::option::Option<&crate::types::SecurityGroupRuleDescription> {
        self.remediation_result.as_ref()
    }
    /// <p>Indicates if the current action is the default action.</p>
    pub fn is_default_action(&self) -> bool {
        self.is_default_action
    }
}
impl SecurityGroupRemediationAction {
    /// Creates a new builder-style object to manufacture [`SecurityGroupRemediationAction`](crate::types::SecurityGroupRemediationAction).
    pub fn builder() -> crate::types::builders::SecurityGroupRemediationActionBuilder {
        crate::types::builders::SecurityGroupRemediationActionBuilder::default()
    }
}

/// A builder for [`SecurityGroupRemediationAction`](crate::types::SecurityGroupRemediationAction).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SecurityGroupRemediationActionBuilder {
    pub(crate) remediation_action_type: std::option::Option<crate::types::RemediationActionType>,
    pub(crate) description: std::option::Option<std::string::String>,
    pub(crate) remediation_result: std::option::Option<crate::types::SecurityGroupRuleDescription>,
    pub(crate) is_default_action: std::option::Option<bool>,
}
impl SecurityGroupRemediationActionBuilder {
    /// <p>The remediation action that will be performed.</p>
    pub fn remediation_action_type(mut self, input: crate::types::RemediationActionType) -> Self {
        self.remediation_action_type = Some(input);
        self
    }
    /// <p>The remediation action that will be performed.</p>
    pub fn set_remediation_action_type(
        mut self,
        input: std::option::Option<crate::types::RemediationActionType>,
    ) -> Self {
        self.remediation_action_type = input;
        self
    }
    /// <p>Brief description of the action that will be performed.</p>
    pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
        self.description = Some(input.into());
        self
    }
    /// <p>Brief description of the action that will be performed.</p>
    pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The final state of the rule specified in the <code>ViolationTarget</code> after it is remediated.</p>
    pub fn remediation_result(mut self, input: crate::types::SecurityGroupRuleDescription) -> Self {
        self.remediation_result = Some(input);
        self
    }
    /// <p>The final state of the rule specified in the <code>ViolationTarget</code> after it is remediated.</p>
    pub fn set_remediation_result(
        mut self,
        input: std::option::Option<crate::types::SecurityGroupRuleDescription>,
    ) -> Self {
        self.remediation_result = input;
        self
    }
    /// <p>Indicates if the current action is the default action.</p>
    pub fn is_default_action(mut self, input: bool) -> Self {
        self.is_default_action = Some(input);
        self
    }
    /// <p>Indicates if the current action is the default action.</p>
    pub fn set_is_default_action(mut self, input: std::option::Option<bool>) -> Self {
        self.is_default_action = input;
        self
    }
    /// Consumes the builder and constructs a [`SecurityGroupRemediationAction`](crate::types::SecurityGroupRemediationAction).
    pub fn build(self) -> crate::types::SecurityGroupRemediationAction {
        crate::types::SecurityGroupRemediationAction {
            remediation_action_type: self.remediation_action_type,
            description: self.description,
            remediation_result: self.remediation_result,
            is_default_action: self.is_default_action.unwrap_or_default(),
        }
    }
}
