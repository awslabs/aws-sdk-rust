// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of possible remediation action lists. Each individual possible remediation action is a list of individual remediation actions.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PossibleRemediationActions {
    /// <p>A description of the possible remediation actions list.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Information about the actions.</p>
    pub actions: ::std::option::Option<::std::vec::Vec<crate::types::PossibleRemediationAction>>,
}
impl PossibleRemediationActions {
    /// <p>A description of the possible remediation actions list.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Information about the actions.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.actions.is_none()`.
    pub fn actions(&self) -> &[crate::types::PossibleRemediationAction] {
        self.actions.as_deref().unwrap_or_default()
    }
}
impl PossibleRemediationActions {
    /// Creates a new builder-style object to manufacture [`PossibleRemediationActions`](crate::types::PossibleRemediationActions).
    pub fn builder() -> crate::types::builders::PossibleRemediationActionsBuilder {
        crate::types::builders::PossibleRemediationActionsBuilder::default()
    }
}

/// A builder for [`PossibleRemediationActions`](crate::types::PossibleRemediationActions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PossibleRemediationActionsBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) actions: ::std::option::Option<::std::vec::Vec<crate::types::PossibleRemediationAction>>,
}
impl PossibleRemediationActionsBuilder {
    /// <p>A description of the possible remediation actions list.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the possible remediation actions list.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the possible remediation actions list.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `actions`.
    ///
    /// To override the contents of this collection use [`set_actions`](Self::set_actions).
    ///
    /// <p>Information about the actions.</p>
    pub fn actions(mut self, input: crate::types::PossibleRemediationAction) -> Self {
        let mut v = self.actions.unwrap_or_default();
        v.push(input);
        self.actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the actions.</p>
    pub fn set_actions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PossibleRemediationAction>>) -> Self {
        self.actions = input;
        self
    }
    /// <p>Information about the actions.</p>
    pub fn get_actions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PossibleRemediationAction>> {
        &self.actions
    }
    /// Consumes the builder and constructs a [`PossibleRemediationActions`](crate::types::PossibleRemediationActions).
    pub fn build(self) -> crate::types::PossibleRemediationActions {
        crate::types::PossibleRemediationActions {
            description: self.description,
            actions: self.actions,
        }
    }
}
