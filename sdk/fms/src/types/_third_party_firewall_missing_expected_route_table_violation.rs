// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The violation details for a third-party firewall that's not associated with an Firewall Manager managed route table.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ThirdPartyFirewallMissingExpectedRouteTableViolation {
    /// <p>The ID of the third-party firewall or VPC resource that's causing the violation.</p>
    #[doc(hidden)]
    pub violation_target: std::option::Option<std::string::String>,
    /// <p>The resource ID of the VPC associated with a fireawll subnet that's causing the violation.</p>
    #[doc(hidden)]
    pub vpc: std::option::Option<std::string::String>,
    /// <p>The Availability Zone of the firewall subnet that's causing the violation.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The resource ID of the current route table that's associated with the subnet, if one is available.</p>
    #[doc(hidden)]
    pub current_route_table: std::option::Option<std::string::String>,
    /// <p>The resource ID of the route table that should be associated with the subnet.</p>
    #[doc(hidden)]
    pub expected_route_table: std::option::Option<std::string::String>,
}
impl ThirdPartyFirewallMissingExpectedRouteTableViolation {
    /// <p>The ID of the third-party firewall or VPC resource that's causing the violation.</p>
    pub fn violation_target(&self) -> std::option::Option<&str> {
        self.violation_target.as_deref()
    }
    /// <p>The resource ID of the VPC associated with a fireawll subnet that's causing the violation.</p>
    pub fn vpc(&self) -> std::option::Option<&str> {
        self.vpc.as_deref()
    }
    /// <p>The Availability Zone of the firewall subnet that's causing the violation.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The resource ID of the current route table that's associated with the subnet, if one is available.</p>
    pub fn current_route_table(&self) -> std::option::Option<&str> {
        self.current_route_table.as_deref()
    }
    /// <p>The resource ID of the route table that should be associated with the subnet.</p>
    pub fn expected_route_table(&self) -> std::option::Option<&str> {
        self.expected_route_table.as_deref()
    }
}
impl ThirdPartyFirewallMissingExpectedRouteTableViolation {
    /// Creates a new builder-style object to manufacture [`ThirdPartyFirewallMissingExpectedRouteTableViolation`](crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation).
    pub fn builder(
    ) -> crate::types::builders::ThirdPartyFirewallMissingExpectedRouteTableViolationBuilder {
        crate::types::builders::ThirdPartyFirewallMissingExpectedRouteTableViolationBuilder::default(
        )
    }
}

/// A builder for [`ThirdPartyFirewallMissingExpectedRouteTableViolation`](crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThirdPartyFirewallMissingExpectedRouteTableViolationBuilder {
    pub(crate) violation_target: std::option::Option<std::string::String>,
    pub(crate) vpc: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) current_route_table: std::option::Option<std::string::String>,
    pub(crate) expected_route_table: std::option::Option<std::string::String>,
}
impl ThirdPartyFirewallMissingExpectedRouteTableViolationBuilder {
    /// <p>The ID of the third-party firewall or VPC resource that's causing the violation.</p>
    pub fn violation_target(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target = Some(input.into());
        self
    }
    /// <p>The ID of the third-party firewall or VPC resource that's causing the violation.</p>
    pub fn set_violation_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.violation_target = input;
        self
    }
    /// <p>The resource ID of the VPC associated with a fireawll subnet that's causing the violation.</p>
    pub fn vpc(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc = Some(input.into());
        self
    }
    /// <p>The resource ID of the VPC associated with a fireawll subnet that's causing the violation.</p>
    pub fn set_vpc(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc = input;
        self
    }
    /// <p>The Availability Zone of the firewall subnet that's causing the violation.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone of the firewall subnet that's causing the violation.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The resource ID of the current route table that's associated with the subnet, if one is available.</p>
    pub fn current_route_table(mut self, input: impl Into<std::string::String>) -> Self {
        self.current_route_table = Some(input.into());
        self
    }
    /// <p>The resource ID of the current route table that's associated with the subnet, if one is available.</p>
    pub fn set_current_route_table(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.current_route_table = input;
        self
    }
    /// <p>The resource ID of the route table that should be associated with the subnet.</p>
    pub fn expected_route_table(mut self, input: impl Into<std::string::String>) -> Self {
        self.expected_route_table = Some(input.into());
        self
    }
    /// <p>The resource ID of the route table that should be associated with the subnet.</p>
    pub fn set_expected_route_table(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.expected_route_table = input;
        self
    }
    /// Consumes the builder and constructs a [`ThirdPartyFirewallMissingExpectedRouteTableViolation`](crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation).
    pub fn build(self) -> crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation {
        crate::types::ThirdPartyFirewallMissingExpectedRouteTableViolation {
            violation_target: self.violation_target,
            vpc: self.vpc,
            availability_zone: self.availability_zone,
            current_route_table: self.current_route_table,
            expected_route_table: self.expected_route_table,
        }
    }
}
