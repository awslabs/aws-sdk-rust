// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Violation detail for the rule violation in a security group when compared to the primary security group of the Firewall Manager policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AwsVpcSecurityGroupViolation {
    /// <p>The security group rule that is being evaluated.</p>
    #[doc(hidden)]
    pub violation_target: std::option::Option<std::string::String>,
    /// <p>A description of the security group that violates the policy.</p>
    #[doc(hidden)]
    pub violation_target_description: std::option::Option<std::string::String>,
    /// <p>List of rules specified in the security group of the Firewall Manager policy that partially match the <code>ViolationTarget</code> rule.</p>
    #[doc(hidden)]
    pub partial_matches: std::option::Option<std::vec::Vec<crate::types::PartialMatch>>,
    /// <p>Remediation options for the rule specified in the <code>ViolationTarget</code>.</p>
    #[doc(hidden)]
    pub possible_security_group_remediation_actions:
        std::option::Option<std::vec::Vec<crate::types::SecurityGroupRemediationAction>>,
}
impl AwsVpcSecurityGroupViolation {
    /// <p>The security group rule that is being evaluated.</p>
    pub fn violation_target(&self) -> std::option::Option<&str> {
        self.violation_target.as_deref()
    }
    /// <p>A description of the security group that violates the policy.</p>
    pub fn violation_target_description(&self) -> std::option::Option<&str> {
        self.violation_target_description.as_deref()
    }
    /// <p>List of rules specified in the security group of the Firewall Manager policy that partially match the <code>ViolationTarget</code> rule.</p>
    pub fn partial_matches(&self) -> std::option::Option<&[crate::types::PartialMatch]> {
        self.partial_matches.as_deref()
    }
    /// <p>Remediation options for the rule specified in the <code>ViolationTarget</code>.</p>
    pub fn possible_security_group_remediation_actions(
        &self,
    ) -> std::option::Option<&[crate::types::SecurityGroupRemediationAction]> {
        self.possible_security_group_remediation_actions.as_deref()
    }
}
impl AwsVpcSecurityGroupViolation {
    /// Creates a new builder-style object to manufacture [`AwsVpcSecurityGroupViolation`](crate::types::AwsVpcSecurityGroupViolation).
    pub fn builder() -> crate::types::builders::AwsVpcSecurityGroupViolationBuilder {
        crate::types::builders::AwsVpcSecurityGroupViolationBuilder::default()
    }
}

/// A builder for [`AwsVpcSecurityGroupViolation`](crate::types::AwsVpcSecurityGroupViolation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AwsVpcSecurityGroupViolationBuilder {
    pub(crate) violation_target: std::option::Option<std::string::String>,
    pub(crate) violation_target_description: std::option::Option<std::string::String>,
    pub(crate) partial_matches: std::option::Option<std::vec::Vec<crate::types::PartialMatch>>,
    pub(crate) possible_security_group_remediation_actions:
        std::option::Option<std::vec::Vec<crate::types::SecurityGroupRemediationAction>>,
}
impl AwsVpcSecurityGroupViolationBuilder {
    /// <p>The security group rule that is being evaluated.</p>
    pub fn violation_target(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target = Some(input.into());
        self
    }
    /// <p>The security group rule that is being evaluated.</p>
    pub fn set_violation_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.violation_target = input;
        self
    }
    /// <p>A description of the security group that violates the policy.</p>
    pub fn violation_target_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target_description = Some(input.into());
        self
    }
    /// <p>A description of the security group that violates the policy.</p>
    pub fn set_violation_target_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.violation_target_description = input;
        self
    }
    /// Appends an item to `partial_matches`.
    ///
    /// To override the contents of this collection use [`set_partial_matches`](Self::set_partial_matches).
    ///
    /// <p>List of rules specified in the security group of the Firewall Manager policy that partially match the <code>ViolationTarget</code> rule.</p>
    pub fn partial_matches(mut self, input: crate::types::PartialMatch) -> Self {
        let mut v = self.partial_matches.unwrap_or_default();
        v.push(input);
        self.partial_matches = Some(v);
        self
    }
    /// <p>List of rules specified in the security group of the Firewall Manager policy that partially match the <code>ViolationTarget</code> rule.</p>
    pub fn set_partial_matches(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PartialMatch>>,
    ) -> Self {
        self.partial_matches = input;
        self
    }
    /// Appends an item to `possible_security_group_remediation_actions`.
    ///
    /// To override the contents of this collection use [`set_possible_security_group_remediation_actions`](Self::set_possible_security_group_remediation_actions).
    ///
    /// <p>Remediation options for the rule specified in the <code>ViolationTarget</code>.</p>
    pub fn possible_security_group_remediation_actions(
        mut self,
        input: crate::types::SecurityGroupRemediationAction,
    ) -> Self {
        let mut v = self
            .possible_security_group_remediation_actions
            .unwrap_or_default();
        v.push(input);
        self.possible_security_group_remediation_actions = Some(v);
        self
    }
    /// <p>Remediation options for the rule specified in the <code>ViolationTarget</code>.</p>
    pub fn set_possible_security_group_remediation_actions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SecurityGroupRemediationAction>>,
    ) -> Self {
        self.possible_security_group_remediation_actions = input;
        self
    }
    /// Consumes the builder and constructs a [`AwsVpcSecurityGroupViolation`](crate::types::AwsVpcSecurityGroupViolation).
    pub fn build(self) -> crate::types::AwsVpcSecurityGroupViolation {
        crate::types::AwsVpcSecurityGroupViolation {
            violation_target: self.violation_target,
            violation_target_description: self.violation_target_description,
            partial_matches: self.partial_matches,
            possible_security_group_remediation_actions: self
                .possible_security_group_remediation_actions,
        }
    }
}
