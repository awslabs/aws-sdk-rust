// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ViolationReason`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let violationreason = unimplemented!();
/// match violationreason {
///     ViolationReason::BlackHoleRouteDetected => { /* ... */ },
///     ViolationReason::BlackHoleRouteDetectedInFirewallSubnet => { /* ... */ },
///     ViolationReason::FirewallSubnetIsOutOfScope => { /* ... */ },
///     ViolationReason::FirewallSubnetMissingExpectedRoute => { /* ... */ },
///     ViolationReason::FirewallSubnetMissingVpcEndpoint => { /* ... */ },
///     ViolationReason::FmsCreatedSecurityGroupEdited => { /* ... */ },
///     ViolationReason::InternetGatewayMissingExpectedRoute => { /* ... */ },
///     ViolationReason::InternetTrafficNotInspected => { /* ... */ },
///     ViolationReason::InvalidRouteConfiguration => { /* ... */ },
///     ViolationReason::MissingExpectedRouteTable => { /* ... */ },
///     ViolationReason::MissingFirewall => { /* ... */ },
///     ViolationReason::MissingFirewallSubnetInAz => { /* ... */ },
///     ViolationReason::MissingTargetGateway => { /* ... */ },
///     ViolationReason::NetworkFirewallPolicyModified => { /* ... */ },
///     ViolationReason::ResourceIncorrectWebAcl => { /* ... */ },
///     ViolationReason::ResourceMissingDnsFirewall => { /* ... */ },
///     ViolationReason::ResourceMissingSecurityGroup => { /* ... */ },
///     ViolationReason::ResourceMissingShieldProtection => { /* ... */ },
///     ViolationReason::ResourceMissingWebAcl => { /* ... */ },
///     ViolationReason::ResourceMissingWebaclOrShieldProtection => { /* ... */ },
///     ViolationReason::ResourceViolatesAuditSecurityGroup => { /* ... */ },
///     ViolationReason::RouteHasOutOfScopeEndpoint => { /* ... */ },
///     ViolationReason::SecurityGroupRedundant => { /* ... */ },
///     ViolationReason::SecurityGroupUnused => { /* ... */ },
///     ViolationReason::TrafficInspectionCrossesAzBoundary => { /* ... */ },
///     ViolationReason::UnexpectedFirewallRoutes => { /* ... */ },
///     ViolationReason::UnexpectedTargetGatewayRoutes => { /* ... */ },
///     ViolationReason::WebAclMissingRuleGroup => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `violationreason` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ViolationReason::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ViolationReason::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ViolationReason::NewFeature` is defined.
/// Specifically, when `violationreason` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ViolationReason::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ViolationReason {
    #[allow(missing_docs)] // documentation missing in model
    BlackHoleRouteDetected,
    #[allow(missing_docs)] // documentation missing in model
    BlackHoleRouteDetectedInFirewallSubnet,
    #[allow(missing_docs)] // documentation missing in model
    FirewallSubnetIsOutOfScope,
    #[allow(missing_docs)] // documentation missing in model
    FirewallSubnetMissingExpectedRoute,
    #[allow(missing_docs)] // documentation missing in model
    FirewallSubnetMissingVpcEndpoint,
    #[allow(missing_docs)] // documentation missing in model
    FmsCreatedSecurityGroupEdited,
    #[allow(missing_docs)] // documentation missing in model
    InternetGatewayMissingExpectedRoute,
    #[allow(missing_docs)] // documentation missing in model
    InternetTrafficNotInspected,
    #[allow(missing_docs)] // documentation missing in model
    InvalidRouteConfiguration,
    #[allow(missing_docs)] // documentation missing in model
    MissingExpectedRouteTable,
    #[allow(missing_docs)] // documentation missing in model
    MissingFirewall,
    #[allow(missing_docs)] // documentation missing in model
    MissingFirewallSubnetInAz,
    #[allow(missing_docs)] // documentation missing in model
    MissingTargetGateway,
    #[allow(missing_docs)] // documentation missing in model
    NetworkFirewallPolicyModified,
    #[allow(missing_docs)] // documentation missing in model
    ResourceIncorrectWebAcl,
    #[allow(missing_docs)] // documentation missing in model
    ResourceMissingDnsFirewall,
    #[allow(missing_docs)] // documentation missing in model
    ResourceMissingSecurityGroup,
    #[allow(missing_docs)] // documentation missing in model
    ResourceMissingShieldProtection,
    #[allow(missing_docs)] // documentation missing in model
    ResourceMissingWebAcl,
    #[allow(missing_docs)] // documentation missing in model
    ResourceMissingWebaclOrShieldProtection,
    #[allow(missing_docs)] // documentation missing in model
    ResourceViolatesAuditSecurityGroup,
    #[allow(missing_docs)] // documentation missing in model
    RouteHasOutOfScopeEndpoint,
    #[allow(missing_docs)] // documentation missing in model
    SecurityGroupRedundant,
    #[allow(missing_docs)] // documentation missing in model
    SecurityGroupUnused,
    #[allow(missing_docs)] // documentation missing in model
    TrafficInspectionCrossesAzBoundary,
    #[allow(missing_docs)] // documentation missing in model
    UnexpectedFirewallRoutes,
    #[allow(missing_docs)] // documentation missing in model
    UnexpectedTargetGatewayRoutes,
    #[allow(missing_docs)] // documentation missing in model
    WebAclMissingRuleGroup,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ViolationReason {
    fn from(s: &str) -> Self {
        match s {
            "BLACK_HOLE_ROUTE_DETECTED" => ViolationReason::BlackHoleRouteDetected,
            "BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET" => {
                ViolationReason::BlackHoleRouteDetectedInFirewallSubnet
            }
            "FIREWALL_SUBNET_IS_OUT_OF_SCOPE" => ViolationReason::FirewallSubnetIsOutOfScope,
            "FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE" => {
                ViolationReason::FirewallSubnetMissingExpectedRoute
            }
            "FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT" => {
                ViolationReason::FirewallSubnetMissingVpcEndpoint
            }
            "FMS_CREATED_SECURITY_GROUP_EDITED" => ViolationReason::FmsCreatedSecurityGroupEdited,
            "INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE" => {
                ViolationReason::InternetGatewayMissingExpectedRoute
            }
            "INTERNET_TRAFFIC_NOT_INSPECTED" => ViolationReason::InternetTrafficNotInspected,
            "INVALID_ROUTE_CONFIGURATION" => ViolationReason::InvalidRouteConfiguration,
            "MISSING_EXPECTED_ROUTE_TABLE" => ViolationReason::MissingExpectedRouteTable,
            "MISSING_FIREWALL" => ViolationReason::MissingFirewall,
            "MISSING_FIREWALL_SUBNET_IN_AZ" => ViolationReason::MissingFirewallSubnetInAz,
            "MISSING_TARGET_GATEWAY" => ViolationReason::MissingTargetGateway,
            "NETWORK_FIREWALL_POLICY_MODIFIED" => ViolationReason::NetworkFirewallPolicyModified,
            "RESOURCE_INCORRECT_WEB_ACL" => ViolationReason::ResourceIncorrectWebAcl,
            "RESOURCE_MISSING_DNS_FIREWALL" => ViolationReason::ResourceMissingDnsFirewall,
            "RESOURCE_MISSING_SECURITY_GROUP" => ViolationReason::ResourceMissingSecurityGroup,
            "RESOURCE_MISSING_SHIELD_PROTECTION" => {
                ViolationReason::ResourceMissingShieldProtection
            }
            "RESOURCE_MISSING_WEB_ACL" => ViolationReason::ResourceMissingWebAcl,
            "RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION" => {
                ViolationReason::ResourceMissingWebaclOrShieldProtection
            }
            "RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP" => {
                ViolationReason::ResourceViolatesAuditSecurityGroup
            }
            "ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT" => ViolationReason::RouteHasOutOfScopeEndpoint,
            "SECURITY_GROUP_REDUNDANT" => ViolationReason::SecurityGroupRedundant,
            "SECURITY_GROUP_UNUSED" => ViolationReason::SecurityGroupUnused,
            "TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY" => {
                ViolationReason::TrafficInspectionCrossesAzBoundary
            }
            "UNEXPECTED_FIREWALL_ROUTES" => ViolationReason::UnexpectedFirewallRoutes,
            "UNEXPECTED_TARGET_GATEWAY_ROUTES" => ViolationReason::UnexpectedTargetGatewayRoutes,
            "WEB_ACL_MISSING_RULE_GROUP" => ViolationReason::WebAclMissingRuleGroup,
            other => {
                ViolationReason::Unknown(crate::primitives::UnknownVariantValue(other.to_owned()))
            }
        }
    }
}
impl std::str::FromStr for ViolationReason {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ViolationReason::from(s))
    }
}
impl ViolationReason {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ViolationReason::BlackHoleRouteDetected => "BLACK_HOLE_ROUTE_DETECTED",
            ViolationReason::BlackHoleRouteDetectedInFirewallSubnet => {
                "BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET"
            }
            ViolationReason::FirewallSubnetIsOutOfScope => "FIREWALL_SUBNET_IS_OUT_OF_SCOPE",
            ViolationReason::FirewallSubnetMissingExpectedRoute => {
                "FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE"
            }
            ViolationReason::FirewallSubnetMissingVpcEndpoint => {
                "FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT"
            }
            ViolationReason::FmsCreatedSecurityGroupEdited => "FMS_CREATED_SECURITY_GROUP_EDITED",
            ViolationReason::InternetGatewayMissingExpectedRoute => {
                "INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE"
            }
            ViolationReason::InternetTrafficNotInspected => "INTERNET_TRAFFIC_NOT_INSPECTED",
            ViolationReason::InvalidRouteConfiguration => "INVALID_ROUTE_CONFIGURATION",
            ViolationReason::MissingExpectedRouteTable => "MISSING_EXPECTED_ROUTE_TABLE",
            ViolationReason::MissingFirewall => "MISSING_FIREWALL",
            ViolationReason::MissingFirewallSubnetInAz => "MISSING_FIREWALL_SUBNET_IN_AZ",
            ViolationReason::MissingTargetGateway => "MISSING_TARGET_GATEWAY",
            ViolationReason::NetworkFirewallPolicyModified => "NETWORK_FIREWALL_POLICY_MODIFIED",
            ViolationReason::ResourceIncorrectWebAcl => "RESOURCE_INCORRECT_WEB_ACL",
            ViolationReason::ResourceMissingDnsFirewall => "RESOURCE_MISSING_DNS_FIREWALL",
            ViolationReason::ResourceMissingSecurityGroup => "RESOURCE_MISSING_SECURITY_GROUP",
            ViolationReason::ResourceMissingShieldProtection => {
                "RESOURCE_MISSING_SHIELD_PROTECTION"
            }
            ViolationReason::ResourceMissingWebAcl => "RESOURCE_MISSING_WEB_ACL",
            ViolationReason::ResourceMissingWebaclOrShieldProtection => {
                "RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION"
            }
            ViolationReason::ResourceViolatesAuditSecurityGroup => {
                "RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP"
            }
            ViolationReason::RouteHasOutOfScopeEndpoint => "ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT",
            ViolationReason::SecurityGroupRedundant => "SECURITY_GROUP_REDUNDANT",
            ViolationReason::SecurityGroupUnused => "SECURITY_GROUP_UNUSED",
            ViolationReason::TrafficInspectionCrossesAzBoundary => {
                "TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY"
            }
            ViolationReason::UnexpectedFirewallRoutes => "UNEXPECTED_FIREWALL_ROUTES",
            ViolationReason::UnexpectedTargetGatewayRoutes => "UNEXPECTED_TARGET_GATEWAY_ROUTES",
            ViolationReason::WebAclMissingRuleGroup => "WEB_ACL_MISSING_RULE_GROUP",
            ViolationReason::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BLACK_HOLE_ROUTE_DETECTED",
            "BLACK_HOLE_ROUTE_DETECTED_IN_FIREWALL_SUBNET",
            "FIREWALL_SUBNET_IS_OUT_OF_SCOPE",
            "FIREWALL_SUBNET_MISSING_EXPECTED_ROUTE",
            "FIREWALL_SUBNET_MISSING_VPCE_ENDPOINT",
            "FMS_CREATED_SECURITY_GROUP_EDITED",
            "INTERNET_GATEWAY_MISSING_EXPECTED_ROUTE",
            "INTERNET_TRAFFIC_NOT_INSPECTED",
            "INVALID_ROUTE_CONFIGURATION",
            "MISSING_EXPECTED_ROUTE_TABLE",
            "MISSING_FIREWALL",
            "MISSING_FIREWALL_SUBNET_IN_AZ",
            "MISSING_TARGET_GATEWAY",
            "NETWORK_FIREWALL_POLICY_MODIFIED",
            "RESOURCE_INCORRECT_WEB_ACL",
            "RESOURCE_MISSING_DNS_FIREWALL",
            "RESOURCE_MISSING_SECURITY_GROUP",
            "RESOURCE_MISSING_SHIELD_PROTECTION",
            "RESOURCE_MISSING_WEB_ACL",
            "RESOURCE_MISSING_WEB_ACL_OR_SHIELD_PROTECTION",
            "RESOURCE_VIOLATES_AUDIT_SECURITY_GROUP",
            "ROUTE_HAS_OUT_OF_SCOPE_ENDPOINT",
            "SECURITY_GROUP_REDUNDANT",
            "SECURITY_GROUP_UNUSED",
            "TRAFFIC_INSPECTION_CROSSES_AZ_BOUNDARY",
            "UNEXPECTED_FIREWALL_ROUTES",
            "UNEXPECTED_TARGET_GATEWAY_ROUTES",
            "WEB_ACL_MISSING_RULE_GROUP",
        ]
    }
}
impl AsRef<str> for ViolationReason {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
