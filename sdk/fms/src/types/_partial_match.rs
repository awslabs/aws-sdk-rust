// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The reference rule that partially matches the <code>ViolationTarget</code> rule and violation reason.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PartialMatch {
    /// <p>The reference rule from the primary security group of the Firewall Manager policy.</p>
    #[doc(hidden)]
    pub reference: std::option::Option<std::string::String>,
    /// <p>The violation reason.</p>
    #[doc(hidden)]
    pub target_violation_reasons: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PartialMatch {
    /// <p>The reference rule from the primary security group of the Firewall Manager policy.</p>
    pub fn reference(&self) -> std::option::Option<&str> {
        self.reference.as_deref()
    }
    /// <p>The violation reason.</p>
    pub fn target_violation_reasons(&self) -> std::option::Option<&[std::string::String]> {
        self.target_violation_reasons.as_deref()
    }
}
impl PartialMatch {
    /// Creates a new builder-style object to manufacture [`PartialMatch`](crate::types::PartialMatch).
    pub fn builder() -> crate::types::builders::PartialMatchBuilder {
        crate::types::builders::PartialMatchBuilder::default()
    }
}

/// A builder for [`PartialMatch`](crate::types::PartialMatch).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PartialMatchBuilder {
    pub(crate) reference: std::option::Option<std::string::String>,
    pub(crate) target_violation_reasons: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl PartialMatchBuilder {
    /// <p>The reference rule from the primary security group of the Firewall Manager policy.</p>
    pub fn reference(mut self, input: impl Into<std::string::String>) -> Self {
        self.reference = Some(input.into());
        self
    }
    /// <p>The reference rule from the primary security group of the Firewall Manager policy.</p>
    pub fn set_reference(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.reference = input;
        self
    }
    /// Appends an item to `target_violation_reasons`.
    ///
    /// To override the contents of this collection use [`set_target_violation_reasons`](Self::set_target_violation_reasons).
    ///
    /// <p>The violation reason.</p>
    pub fn target_violation_reasons(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.target_violation_reasons.unwrap_or_default();
        v.push(input.into());
        self.target_violation_reasons = Some(v);
        self
    }
    /// <p>The violation reason.</p>
    pub fn set_target_violation_reasons(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.target_violation_reasons = input;
        self
    }
    /// Consumes the builder and constructs a [`PartialMatch`](crate::types::PartialMatch).
    pub fn build(self) -> crate::types::PartialMatch {
        crate::types::PartialMatch {
            reference: self.reference,
            target_violation_reasons: self.target_violation_reasons,
        }
    }
}
