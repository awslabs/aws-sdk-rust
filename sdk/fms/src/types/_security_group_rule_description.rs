// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a set of permissions for a security group rule.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SecurityGroupRuleDescription {
    /// <p>The IPv4 ranges for the security group rule.</p>
    #[doc(hidden)]
    pub ipv4_range: std::option::Option<std::string::String>,
    /// <p>The IPv6 ranges for the security group rule.</p>
    #[doc(hidden)]
    pub ipv6_range: std::option::Option<std::string::String>,
    /// <p>The ID of the prefix list for the security group rule.</p>
    #[doc(hidden)]
    pub prefix_list_id: std::option::Option<std::string::String>,
    /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number.</p>
    #[doc(hidden)]
    pub protocol: std::option::Option<std::string::String>,
    /// <p>The start of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of <code>-1</code> indicates all ICMP/ICMPv6 types.</p>
    #[doc(hidden)]
    pub from_port: std::option::Option<i64>,
    /// <p>The end of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of <code>-1</code> indicates all ICMP/ICMPv6 codes.</p>
    #[doc(hidden)]
    pub to_port: std::option::Option<i64>,
}
impl SecurityGroupRuleDescription {
    /// <p>The IPv4 ranges for the security group rule.</p>
    pub fn ipv4_range(&self) -> std::option::Option<&str> {
        self.ipv4_range.as_deref()
    }
    /// <p>The IPv6 ranges for the security group rule.</p>
    pub fn ipv6_range(&self) -> std::option::Option<&str> {
        self.ipv6_range.as_deref()
    }
    /// <p>The ID of the prefix list for the security group rule.</p>
    pub fn prefix_list_id(&self) -> std::option::Option<&str> {
        self.prefix_list_id.as_deref()
    }
    /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number.</p>
    pub fn protocol(&self) -> std::option::Option<&str> {
        self.protocol.as_deref()
    }
    /// <p>The start of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of <code>-1</code> indicates all ICMP/ICMPv6 types.</p>
    pub fn from_port(&self) -> std::option::Option<i64> {
        self.from_port
    }
    /// <p>The end of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of <code>-1</code> indicates all ICMP/ICMPv6 codes.</p>
    pub fn to_port(&self) -> std::option::Option<i64> {
        self.to_port
    }
}
impl SecurityGroupRuleDescription {
    /// Creates a new builder-style object to manufacture [`SecurityGroupRuleDescription`](crate::types::SecurityGroupRuleDescription).
    pub fn builder() -> crate::types::builders::SecurityGroupRuleDescriptionBuilder {
        crate::types::builders::SecurityGroupRuleDescriptionBuilder::default()
    }
}

/// A builder for [`SecurityGroupRuleDescription`](crate::types::SecurityGroupRuleDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SecurityGroupRuleDescriptionBuilder {
    pub(crate) ipv4_range: std::option::Option<std::string::String>,
    pub(crate) ipv6_range: std::option::Option<std::string::String>,
    pub(crate) prefix_list_id: std::option::Option<std::string::String>,
    pub(crate) protocol: std::option::Option<std::string::String>,
    pub(crate) from_port: std::option::Option<i64>,
    pub(crate) to_port: std::option::Option<i64>,
}
impl SecurityGroupRuleDescriptionBuilder {
    /// <p>The IPv4 ranges for the security group rule.</p>
    pub fn ipv4_range(mut self, input: impl Into<std::string::String>) -> Self {
        self.ipv4_range = Some(input.into());
        self
    }
    /// <p>The IPv4 ranges for the security group rule.</p>
    pub fn set_ipv4_range(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ipv4_range = input;
        self
    }
    /// <p>The IPv6 ranges for the security group rule.</p>
    pub fn ipv6_range(mut self, input: impl Into<std::string::String>) -> Self {
        self.ipv6_range = Some(input.into());
        self
    }
    /// <p>The IPv6 ranges for the security group rule.</p>
    pub fn set_ipv6_range(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.ipv6_range = input;
        self
    }
    /// <p>The ID of the prefix list for the security group rule.</p>
    pub fn prefix_list_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.prefix_list_id = Some(input.into());
        self
    }
    /// <p>The ID of the prefix list for the security group rule.</p>
    pub fn set_prefix_list_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.prefix_list_id = input;
        self
    }
    /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number.</p>
    pub fn protocol(mut self, input: impl Into<std::string::String>) -> Self {
        self.protocol = Some(input.into());
        self
    }
    /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>, <code>icmpv6</code>) or number.</p>
    pub fn set_protocol(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The start of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of <code>-1</code> indicates all ICMP/ICMPv6 types.</p>
    pub fn from_port(mut self, input: i64) -> Self {
        self.from_port = Some(input);
        self
    }
    /// <p>The start of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type number. A value of <code>-1</code> indicates all ICMP/ICMPv6 types.</p>
    pub fn set_from_port(mut self, input: std::option::Option<i64>) -> Self {
        self.from_port = input;
        self
    }
    /// <p>The end of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of <code>-1</code> indicates all ICMP/ICMPv6 codes.</p>
    pub fn to_port(mut self, input: i64) -> Self {
        self.to_port = Some(input);
        self
    }
    /// <p>The end of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code. A value of <code>-1</code> indicates all ICMP/ICMPv6 codes.</p>
    pub fn set_to_port(mut self, input: std::option::Option<i64>) -> Self {
        self.to_port = input;
        self
    }
    /// Consumes the builder and constructs a [`SecurityGroupRuleDescription`](crate::types::SecurityGroupRuleDescription).
    pub fn build(self) -> crate::types::SecurityGroupRuleDescription {
        crate::types::SecurityGroupRuleDescription {
            ipv4_range: self.ipv4_range,
            ipv6_range: self.ipv6_range,
            prefix_list_id: self.prefix_list_id,
            protocol: self.protocol,
            from_port: self.from_port,
            to_port: self.to_port,
        }
    }
}
