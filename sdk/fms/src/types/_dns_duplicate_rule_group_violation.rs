// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A DNS Firewall rule group that Firewall Manager tried to associate with a VPC is already associated with the VPC and can't be associated again. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DnsDuplicateRuleGroupViolation {
    /// <p>Information about the VPC ID. </p>
    #[doc(hidden)]
    pub violation_target: std::option::Option<std::string::String>,
    /// <p>A description of the violation that specifies the rule group and VPC.</p>
    #[doc(hidden)]
    pub violation_target_description: std::option::Option<std::string::String>,
}
impl DnsDuplicateRuleGroupViolation {
    /// <p>Information about the VPC ID. </p>
    pub fn violation_target(&self) -> std::option::Option<&str> {
        self.violation_target.as_deref()
    }
    /// <p>A description of the violation that specifies the rule group and VPC.</p>
    pub fn violation_target_description(&self) -> std::option::Option<&str> {
        self.violation_target_description.as_deref()
    }
}
impl DnsDuplicateRuleGroupViolation {
    /// Creates a new builder-style object to manufacture [`DnsDuplicateRuleGroupViolation`](crate::types::DnsDuplicateRuleGroupViolation).
    pub fn builder() -> crate::types::builders::DnsDuplicateRuleGroupViolationBuilder {
        crate::types::builders::DnsDuplicateRuleGroupViolationBuilder::default()
    }
}

/// A builder for [`DnsDuplicateRuleGroupViolation`](crate::types::DnsDuplicateRuleGroupViolation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DnsDuplicateRuleGroupViolationBuilder {
    pub(crate) violation_target: std::option::Option<std::string::String>,
    pub(crate) violation_target_description: std::option::Option<std::string::String>,
}
impl DnsDuplicateRuleGroupViolationBuilder {
    /// <p>Information about the VPC ID. </p>
    pub fn violation_target(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target = Some(input.into());
        self
    }
    /// <p>Information about the VPC ID. </p>
    pub fn set_violation_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.violation_target = input;
        self
    }
    /// <p>A description of the violation that specifies the rule group and VPC.</p>
    pub fn violation_target_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target_description = Some(input.into());
        self
    }
    /// <p>A description of the violation that specifies the rule group and VPC.</p>
    pub fn set_violation_target_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.violation_target_description = input;
        self
    }
    /// Consumes the builder and constructs a [`DnsDuplicateRuleGroupViolation`](crate::types::DnsDuplicateRuleGroupViolation).
    pub fn build(self) -> crate::types::DnsDuplicateRuleGroupViolation {
        crate::types::DnsDuplicateRuleGroupViolation {
            violation_target: self.violation_target,
            violation_target_description: self.violation_target_description,
        }
    }
}
