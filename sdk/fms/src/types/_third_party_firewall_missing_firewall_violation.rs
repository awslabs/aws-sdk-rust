// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The violation details about a third-party firewall's subnet that doesn't have a Firewall Manager managed firewall in its VPC.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ThirdPartyFirewallMissingFirewallViolation {
    /// <p>The ID of the third-party firewall that's causing the violation.</p>
    #[doc(hidden)]
    pub violation_target: std::option::Option<std::string::String>,
    /// <p>The resource ID of the VPC associated with a third-party firewall.</p>
    #[doc(hidden)]
    pub vpc: std::option::Option<std::string::String>,
    /// <p>The Availability Zone of the third-party firewall that's causing the violation.</p>
    #[doc(hidden)]
    pub availability_zone: std::option::Option<std::string::String>,
    /// <p>The reason the resource is causing this violation, if a reason is available.</p>
    #[doc(hidden)]
    pub target_violation_reason: std::option::Option<std::string::String>,
}
impl ThirdPartyFirewallMissingFirewallViolation {
    /// <p>The ID of the third-party firewall that's causing the violation.</p>
    pub fn violation_target(&self) -> std::option::Option<&str> {
        self.violation_target.as_deref()
    }
    /// <p>The resource ID of the VPC associated with a third-party firewall.</p>
    pub fn vpc(&self) -> std::option::Option<&str> {
        self.vpc.as_deref()
    }
    /// <p>The Availability Zone of the third-party firewall that's causing the violation.</p>
    pub fn availability_zone(&self) -> std::option::Option<&str> {
        self.availability_zone.as_deref()
    }
    /// <p>The reason the resource is causing this violation, if a reason is available.</p>
    pub fn target_violation_reason(&self) -> std::option::Option<&str> {
        self.target_violation_reason.as_deref()
    }
}
impl ThirdPartyFirewallMissingFirewallViolation {
    /// Creates a new builder-style object to manufacture [`ThirdPartyFirewallMissingFirewallViolation`](crate::types::ThirdPartyFirewallMissingFirewallViolation).
    pub fn builder() -> crate::types::builders::ThirdPartyFirewallMissingFirewallViolationBuilder {
        crate::types::builders::ThirdPartyFirewallMissingFirewallViolationBuilder::default()
    }
}

/// A builder for [`ThirdPartyFirewallMissingFirewallViolation`](crate::types::ThirdPartyFirewallMissingFirewallViolation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ThirdPartyFirewallMissingFirewallViolationBuilder {
    pub(crate) violation_target: std::option::Option<std::string::String>,
    pub(crate) vpc: std::option::Option<std::string::String>,
    pub(crate) availability_zone: std::option::Option<std::string::String>,
    pub(crate) target_violation_reason: std::option::Option<std::string::String>,
}
impl ThirdPartyFirewallMissingFirewallViolationBuilder {
    /// <p>The ID of the third-party firewall that's causing the violation.</p>
    pub fn violation_target(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target = Some(input.into());
        self
    }
    /// <p>The ID of the third-party firewall that's causing the violation.</p>
    pub fn set_violation_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.violation_target = input;
        self
    }
    /// <p>The resource ID of the VPC associated with a third-party firewall.</p>
    pub fn vpc(mut self, input: impl Into<std::string::String>) -> Self {
        self.vpc = Some(input.into());
        self
    }
    /// <p>The resource ID of the VPC associated with a third-party firewall.</p>
    pub fn set_vpc(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.vpc = input;
        self
    }
    /// <p>The Availability Zone of the third-party firewall that's causing the violation.</p>
    pub fn availability_zone(mut self, input: impl Into<std::string::String>) -> Self {
        self.availability_zone = Some(input.into());
        self
    }
    /// <p>The Availability Zone of the third-party firewall that's causing the violation.</p>
    pub fn set_availability_zone(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.availability_zone = input;
        self
    }
    /// <p>The reason the resource is causing this violation, if a reason is available.</p>
    pub fn target_violation_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_violation_reason = Some(input.into());
        self
    }
    /// <p>The reason the resource is causing this violation, if a reason is available.</p>
    pub fn set_target_violation_reason(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_violation_reason = input;
        self
    }
    /// Consumes the builder and constructs a [`ThirdPartyFirewallMissingFirewallViolation`](crate::types::ThirdPartyFirewallMissingFirewallViolation).
    pub fn build(self) -> crate::types::ThirdPartyFirewallMissingFirewallViolation {
        crate::types::ThirdPartyFirewallMissingFirewallViolation {
            violation_target: self.violation_target,
            vpc: self.vpc,
            availability_zone: self.availability_zone,
            target_violation_reason: self.target_violation_reason,
        }
    }
}
