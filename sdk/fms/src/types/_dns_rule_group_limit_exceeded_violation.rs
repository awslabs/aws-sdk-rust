// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The VPC that Firewall Manager was applying a DNS Fireall policy to reached the limit for associated DNS Firewall rule groups. Firewall Manager tried to associate another rule group with the VPC and failed due to the limit. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DnsRuleGroupLimitExceededViolation {
    /// <p>Information about the VPC ID. </p>
    #[doc(hidden)]
    pub violation_target: std::option::Option<std::string::String>,
    /// <p>A description of the violation that specifies the rule group and VPC.</p>
    #[doc(hidden)]
    pub violation_target_description: std::option::Option<std::string::String>,
    /// <p>The number of rule groups currently associated with the VPC. </p>
    #[doc(hidden)]
    pub number_of_rule_groups_already_associated: i32,
}
impl DnsRuleGroupLimitExceededViolation {
    /// <p>Information about the VPC ID. </p>
    pub fn violation_target(&self) -> std::option::Option<&str> {
        self.violation_target.as_deref()
    }
    /// <p>A description of the violation that specifies the rule group and VPC.</p>
    pub fn violation_target_description(&self) -> std::option::Option<&str> {
        self.violation_target_description.as_deref()
    }
    /// <p>The number of rule groups currently associated with the VPC. </p>
    pub fn number_of_rule_groups_already_associated(&self) -> i32 {
        self.number_of_rule_groups_already_associated
    }
}
impl DnsRuleGroupLimitExceededViolation {
    /// Creates a new builder-style object to manufacture [`DnsRuleGroupLimitExceededViolation`](crate::types::DnsRuleGroupLimitExceededViolation).
    pub fn builder() -> crate::types::builders::DnsRuleGroupLimitExceededViolationBuilder {
        crate::types::builders::DnsRuleGroupLimitExceededViolationBuilder::default()
    }
}

/// A builder for [`DnsRuleGroupLimitExceededViolation`](crate::types::DnsRuleGroupLimitExceededViolation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DnsRuleGroupLimitExceededViolationBuilder {
    pub(crate) violation_target: std::option::Option<std::string::String>,
    pub(crate) violation_target_description: std::option::Option<std::string::String>,
    pub(crate) number_of_rule_groups_already_associated: std::option::Option<i32>,
}
impl DnsRuleGroupLimitExceededViolationBuilder {
    /// <p>Information about the VPC ID. </p>
    pub fn violation_target(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target = Some(input.into());
        self
    }
    /// <p>Information about the VPC ID. </p>
    pub fn set_violation_target(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.violation_target = input;
        self
    }
    /// <p>A description of the violation that specifies the rule group and VPC.</p>
    pub fn violation_target_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.violation_target_description = Some(input.into());
        self
    }
    /// <p>A description of the violation that specifies the rule group and VPC.</p>
    pub fn set_violation_target_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.violation_target_description = input;
        self
    }
    /// <p>The number of rule groups currently associated with the VPC. </p>
    pub fn number_of_rule_groups_already_associated(mut self, input: i32) -> Self {
        self.number_of_rule_groups_already_associated = Some(input);
        self
    }
    /// <p>The number of rule groups currently associated with the VPC. </p>
    pub fn set_number_of_rule_groups_already_associated(
        mut self,
        input: std::option::Option<i32>,
    ) -> Self {
        self.number_of_rule_groups_already_associated = input;
        self
    }
    /// Consumes the builder and constructs a [`DnsRuleGroupLimitExceededViolation`](crate::types::DnsRuleGroupLimitExceededViolation).
    pub fn build(self) -> crate::types::DnsRuleGroupLimitExceededViolation {
        crate::types::DnsRuleGroupLimitExceededViolation {
            violation_target: self.violation_target,
            violation_target_description: self.violation_target_description,
            number_of_rule_groups_already_associated: self
                .number_of_rule_groups_already_associated
                .unwrap_or_default(),
        }
    }
}
