// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Network Firewall stateful rule group, used in a <code>NetworkFirewallPolicyDescription</code>. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StatefulRuleGroup {
    /// <p>The name of the rule group.</p>
    #[doc(hidden)]
    pub rule_group_name: std::option::Option<std::string::String>,
    /// <p>The resource ID of the rule group.</p>
    #[doc(hidden)]
    pub resource_id: std::option::Option<std::string::String>,
    /// <p>An integer setting that indicates the order in which to run the stateful rule groups in a single Network Firewall firewall policy. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
    /// <p> Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy. For information about </p>
    /// <p> You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on. </p>
    #[doc(hidden)]
    pub priority: std::option::Option<i32>,
    /// <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
    #[doc(hidden)]
    pub r#override: std::option::Option<crate::types::NetworkFirewallStatefulRuleGroupOverride>,
}
impl StatefulRuleGroup {
    /// <p>The name of the rule group.</p>
    pub fn rule_group_name(&self) -> std::option::Option<&str> {
        self.rule_group_name.as_deref()
    }
    /// <p>The resource ID of the rule group.</p>
    pub fn resource_id(&self) -> std::option::Option<&str> {
        self.resource_id.as_deref()
    }
    /// <p>An integer setting that indicates the order in which to run the stateful rule groups in a single Network Firewall firewall policy. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
    /// <p> Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy. For information about </p>
    /// <p> You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on. </p>
    pub fn priority(&self) -> std::option::Option<i32> {
        self.priority
    }
    /// <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
    pub fn r#override(
        &self,
    ) -> std::option::Option<&crate::types::NetworkFirewallStatefulRuleGroupOverride> {
        self.r#override.as_ref()
    }
}
impl StatefulRuleGroup {
    /// Creates a new builder-style object to manufacture [`StatefulRuleGroup`](crate::types::StatefulRuleGroup).
    pub fn builder() -> crate::types::builders::StatefulRuleGroupBuilder {
        crate::types::builders::StatefulRuleGroupBuilder::default()
    }
}

/// A builder for [`StatefulRuleGroup`](crate::types::StatefulRuleGroup).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StatefulRuleGroupBuilder {
    pub(crate) rule_group_name: std::option::Option<std::string::String>,
    pub(crate) resource_id: std::option::Option<std::string::String>,
    pub(crate) priority: std::option::Option<i32>,
    pub(crate) r#override:
        std::option::Option<crate::types::NetworkFirewallStatefulRuleGroupOverride>,
}
impl StatefulRuleGroupBuilder {
    /// <p>The name of the rule group.</p>
    pub fn rule_group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.rule_group_name = Some(input.into());
        self
    }
    /// <p>The name of the rule group.</p>
    pub fn set_rule_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.rule_group_name = input;
        self
    }
    /// <p>The resource ID of the rule group.</p>
    pub fn resource_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.resource_id = Some(input.into());
        self
    }
    /// <p>The resource ID of the rule group.</p>
    pub fn set_resource_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.resource_id = input;
        self
    }
    /// <p>An integer setting that indicates the order in which to run the stateful rule groups in a single Network Firewall firewall policy. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
    /// <p> Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy. For information about </p>
    /// <p> You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on. </p>
    pub fn priority(mut self, input: i32) -> Self {
        self.priority = Some(input);
        self
    }
    /// <p>An integer setting that indicates the order in which to run the stateful rule groups in a single Network Firewall firewall policy. This setting only applies to firewall policies that specify the <code>STRICT_ORDER</code> rule order in the stateful engine options settings.</p>
    /// <p> Network Firewall evalutes each stateful rule group against a packet starting with the group that has the lowest priority setting. You must ensure that the priority settings are unique within each policy. For information about </p>
    /// <p> You can change the priority settings of your rule groups at any time. To make it easier to insert rule groups later, number them so there's a wide range in between, for example use 100, 200, and so on. </p>
    pub fn set_priority(mut self, input: std::option::Option<i32>) -> Self {
        self.priority = input;
        self
    }
    /// <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
    pub fn r#override(
        mut self,
        input: crate::types::NetworkFirewallStatefulRuleGroupOverride,
    ) -> Self {
        self.r#override = Some(input);
        self
    }
    /// <p>The action that allows the policy owner to override the behavior of the rule group within a policy.</p>
    pub fn set_override(
        mut self,
        input: std::option::Option<crate::types::NetworkFirewallStatefulRuleGroupOverride>,
    ) -> Self {
        self.r#override = input;
        self
    }
    /// Consumes the builder and constructs a [`StatefulRuleGroup`](crate::types::StatefulRuleGroup).
    pub fn build(self) -> crate::types::StatefulRuleGroup {
        crate::types::StatefulRuleGroup {
            rule_group_name: self.rule_group_name,
            resource_id: self.resource_id,
            priority: self.priority,
            r#override: self.r#override,
        }
    }
}
