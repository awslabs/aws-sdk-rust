// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Defines the Amazon Web Services Regions that the specified Firewall Manager administrator can manage.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RegionScope {
    /// <p>The Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Allows the specified Firewall Manager administrator to manage all Amazon Web Services Regions.</p>
    pub all_regions_enabled: bool,
}
impl RegionScope {
    /// <p>The Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.regions.is_none()`.
    pub fn regions(&self) -> &[::std::string::String] {
        self.regions.as_deref().unwrap_or_default()
    }
    /// <p>Allows the specified Firewall Manager administrator to manage all Amazon Web Services Regions.</p>
    pub fn all_regions_enabled(&self) -> bool {
        self.all_regions_enabled
    }
}
impl RegionScope {
    /// Creates a new builder-style object to manufacture [`RegionScope`](crate::types::RegionScope).
    pub fn builder() -> crate::types::builders::RegionScopeBuilder {
        crate::types::builders::RegionScopeBuilder::default()
    }
}

/// A builder for [`RegionScope`](crate::types::RegionScope).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RegionScopeBuilder {
    pub(crate) regions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) all_regions_enabled: ::std::option::Option<bool>,
}
impl RegionScopeBuilder {
    /// Appends an item to `regions`.
    ///
    /// To override the contents of this collection use [`set_regions`](Self::set_regions).
    ///
    /// <p>The Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub fn regions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.regions.unwrap_or_default();
        v.push(input.into());
        self.regions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub fn set_regions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.regions = input;
        self
    }
    /// <p>The Amazon Web Services Regions that the specified Firewall Manager administrator can perform actions in.</p>
    pub fn get_regions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.regions
    }
    /// <p>Allows the specified Firewall Manager administrator to manage all Amazon Web Services Regions.</p>
    pub fn all_regions_enabled(mut self, input: bool) -> Self {
        self.all_regions_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Allows the specified Firewall Manager administrator to manage all Amazon Web Services Regions.</p>
    pub fn set_all_regions_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.all_regions_enabled = input;
        self
    }
    /// <p>Allows the specified Firewall Manager administrator to manage all Amazon Web Services Regions.</p>
    pub fn get_all_regions_enabled(&self) -> &::std::option::Option<bool> {
        &self.all_regions_enabled
    }
    /// Consumes the builder and constructs a [`RegionScope`](crate::types::RegionScope).
    pub fn build(self) -> crate::types::RegionScope {
        crate::types::RegionScope {
            regions: self.regions,
            all_regions_enabled: self.all_regions_enabled.unwrap_or_default(),
        }
    }
}
