// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An Firewall Manager protocols list.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProtocolsListData {
    /// <p>The ID of the Firewall Manager protocols list.</p>
    pub list_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the Firewall Manager protocols list.</p>
    pub list_name: ::std::string::String,
    /// <p>A unique identifier for each update to the list. When you update the list, the update token must match the token of the current version of the application list. You can retrieve the update token by getting the list. </p>
    pub list_update_token: ::std::option::Option<::std::string::String>,
    /// <p>The time that the Firewall Manager protocols list was created.</p>
    pub create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the Firewall Manager protocols list was last updated.</p>
    pub last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>An array of protocols in the Firewall Manager protocols list.</p>
    pub protocols_list: ::std::vec::Vec<::std::string::String>,
    /// <p>A map of previous version numbers to their corresponding protocol arrays.</p>
    pub previous_protocols_list: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
}
impl ProtocolsListData {
    /// <p>The ID of the Firewall Manager protocols list.</p>
    pub fn list_id(&self) -> ::std::option::Option<&str> {
        self.list_id.as_deref()
    }
    /// <p>The name of the Firewall Manager protocols list.</p>
    pub fn list_name(&self) -> &str {
        use std::ops::Deref;
        self.list_name.deref()
    }
    /// <p>A unique identifier for each update to the list. When you update the list, the update token must match the token of the current version of the application list. You can retrieve the update token by getting the list. </p>
    pub fn list_update_token(&self) -> ::std::option::Option<&str> {
        self.list_update_token.as_deref()
    }
    /// <p>The time that the Firewall Manager protocols list was created.</p>
    pub fn create_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.create_time.as_ref()
    }
    /// <p>The time that the Firewall Manager protocols list was last updated.</p>
    pub fn last_update_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_update_time.as_ref()
    }
    /// <p>An array of protocols in the Firewall Manager protocols list.</p>
    pub fn protocols_list(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.protocols_list.deref()
    }
    /// <p>A map of previous version numbers to their corresponding protocol arrays.</p>
    pub fn previous_protocols_list(
        &self,
    ) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        self.previous_protocols_list.as_ref()
    }
}
impl ProtocolsListData {
    /// Creates a new builder-style object to manufacture [`ProtocolsListData`](crate::types::ProtocolsListData).
    pub fn builder() -> crate::types::builders::ProtocolsListDataBuilder {
        crate::types::builders::ProtocolsListDataBuilder::default()
    }
}

/// A builder for [`ProtocolsListData`](crate::types::ProtocolsListData).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProtocolsListDataBuilder {
    pub(crate) list_id: ::std::option::Option<::std::string::String>,
    pub(crate) list_name: ::std::option::Option<::std::string::String>,
    pub(crate) list_update_token: ::std::option::Option<::std::string::String>,
    pub(crate) create_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_update_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) protocols_list: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) previous_protocols_list:
        ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
}
impl ProtocolsListDataBuilder {
    /// <p>The ID of the Firewall Manager protocols list.</p>
    pub fn list_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.list_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Firewall Manager protocols list.</p>
    pub fn set_list_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.list_id = input;
        self
    }
    /// <p>The ID of the Firewall Manager protocols list.</p>
    pub fn get_list_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.list_id
    }
    /// <p>The name of the Firewall Manager protocols list.</p>
    /// This field is required.
    pub fn list_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.list_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Firewall Manager protocols list.</p>
    pub fn set_list_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.list_name = input;
        self
    }
    /// <p>The name of the Firewall Manager protocols list.</p>
    pub fn get_list_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.list_name
    }
    /// <p>A unique identifier for each update to the list. When you update the list, the update token must match the token of the current version of the application list. You can retrieve the update token by getting the list. </p>
    pub fn list_update_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.list_update_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for each update to the list. When you update the list, the update token must match the token of the current version of the application list. You can retrieve the update token by getting the list. </p>
    pub fn set_list_update_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.list_update_token = input;
        self
    }
    /// <p>A unique identifier for each update to the list. When you update the list, the update token must match the token of the current version of the application list. You can retrieve the update token by getting the list. </p>
    pub fn get_list_update_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.list_update_token
    }
    /// <p>The time that the Firewall Manager protocols list was created.</p>
    pub fn create_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.create_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the Firewall Manager protocols list was created.</p>
    pub fn set_create_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.create_time = input;
        self
    }
    /// <p>The time that the Firewall Manager protocols list was created.</p>
    pub fn get_create_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.create_time
    }
    /// <p>The time that the Firewall Manager protocols list was last updated.</p>
    pub fn last_update_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_update_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the Firewall Manager protocols list was last updated.</p>
    pub fn set_last_update_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_update_time = input;
        self
    }
    /// <p>The time that the Firewall Manager protocols list was last updated.</p>
    pub fn get_last_update_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_update_time
    }
    /// Appends an item to `protocols_list`.
    ///
    /// To override the contents of this collection use [`set_protocols_list`](Self::set_protocols_list).
    ///
    /// <p>An array of protocols in the Firewall Manager protocols list.</p>
    pub fn protocols_list(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.protocols_list.unwrap_or_default();
        v.push(input.into());
        self.protocols_list = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of protocols in the Firewall Manager protocols list.</p>
    pub fn set_protocols_list(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.protocols_list = input;
        self
    }
    /// <p>An array of protocols in the Firewall Manager protocols list.</p>
    pub fn get_protocols_list(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.protocols_list
    }
    /// Adds a key-value pair to `previous_protocols_list`.
    ///
    /// To override the contents of this collection use [`set_previous_protocols_list`](Self::set_previous_protocols_list).
    ///
    /// <p>A map of previous version numbers to their corresponding protocol arrays.</p>
    pub fn previous_protocols_list(mut self, k: impl ::std::convert::Into<::std::string::String>, v: ::std::vec::Vec<::std::string::String>) -> Self {
        let mut hash_map = self.previous_protocols_list.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.previous_protocols_list = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map of previous version numbers to their corresponding protocol arrays.</p>
    pub fn set_previous_protocols_list(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>>,
    ) -> Self {
        self.previous_protocols_list = input;
        self
    }
    /// <p>A map of previous version numbers to their corresponding protocol arrays.</p>
    pub fn get_previous_protocols_list(
        &self,
    ) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::vec::Vec<::std::string::String>>> {
        &self.previous_protocols_list
    }
    /// Consumes the builder and constructs a [`ProtocolsListData`](crate::types::ProtocolsListData).
    /// This method will fail if any of the following fields are not set:
    /// - [`list_name`](crate::types::builders::ProtocolsListDataBuilder::list_name)
    /// - [`protocols_list`](crate::types::builders::ProtocolsListDataBuilder::protocols_list)
    pub fn build(self) -> ::std::result::Result<crate::types::ProtocolsListData, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProtocolsListData {
            list_id: self.list_id,
            list_name: self.list_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "list_name",
                    "list_name was not specified but it is required when building ProtocolsListData",
                )
            })?,
            list_update_token: self.list_update_token,
            create_time: self.create_time,
            last_update_time: self.last_update_time,
            protocols_list: self.protocols_list.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "protocols_list",
                    "protocols_list was not specified but it is required when building ProtocolsListData",
                )
            })?,
            previous_protocols_list: self.previous_protocols_list,
        })
    }
}
