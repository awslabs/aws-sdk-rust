// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The operation failed because of a system problem, even though the request was valid. Retry your request.</p>
    InternalErrorException(crate::types::error::InternalErrorException),
    /// <p>The parameters of the request were invalid.</p>
    InvalidInputException(crate::types::error::InvalidInputException),
    /// <p>The operation failed because there was nothing to do or the operation wasn't possible. For example, you might have submitted an <code>AssociateAdminAccount</code> request for an account ID that was already set as the Firewall Manager administrator. Or you might have tried to access a Region that's disabled by default, and that you need to enable for the Firewall Manager administrator account and for Organizations before you can access it.</p>
    InvalidOperationException(crate::types::error::InvalidOperationException),
    /// <p>The value of the <code>Type</code> parameter is invalid.</p>
    InvalidTypeException(crate::types::error::InvalidTypeException),
    /// <p>The operation exceeds a resource limit, for example, the maximum number of <code>policy</code> objects that you can create for an Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-limits.html">Firewall Manager Limits</a> in the <i>WAF Developer Guide</i>.</p>
    LimitExceededException(crate::types::error::LimitExceededException),
    /// <p>The specified resource was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalErrorException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::InvalidOperationException(inner) => inner.fmt(f),
            Error::InvalidTypeException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_admin_account::AssociateAdminAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_admin_account::AssociateAdminAccountError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_admin_account::AssociateAdminAccountError> for Error {
    fn from(err: crate::operation::associate_admin_account::AssociateAdminAccountError) -> Self {
        match err {
            crate::operation::associate_admin_account::AssociateAdminAccountError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::associate_admin_account::AssociateAdminAccountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::associate_admin_account::AssociateAdminAccountError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::associate_admin_account::AssociateAdminAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::associate_admin_account::AssociateAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_admin_account::AssociateAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError> for Error {
    fn from(err: crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError) -> Self {
        match err {
            crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_associate_resource::BatchAssociateResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_associate_resource::BatchAssociateResourceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_associate_resource::BatchAssociateResourceError> for Error {
    fn from(err: crate::operation::batch_associate_resource::BatchAssociateResourceError) -> Self {
        match err {
            crate::operation::batch_associate_resource::BatchAssociateResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::batch_associate_resource::BatchAssociateResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::batch_associate_resource::BatchAssociateResourceError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::batch_associate_resource::BatchAssociateResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::batch_associate_resource::BatchAssociateResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_associate_resource::BatchAssociateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_disassociate_resource::BatchDisassociateResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::batch_disassociate_resource::BatchDisassociateResourceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::batch_disassociate_resource::BatchDisassociateResourceError> for Error {
    fn from(err: crate::operation::batch_disassociate_resource::BatchDisassociateResourceError) -> Self {
        match err {
            crate::operation::batch_disassociate_resource::BatchDisassociateResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::batch_disassociate_resource::BatchDisassociateResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::batch_disassociate_resource::BatchDisassociateResourceError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::batch_disassociate_resource::BatchDisassociateResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::batch_disassociate_resource::BatchDisassociateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_apps_list::DeleteAppsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_apps_list::DeleteAppsListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_apps_list::DeleteAppsListError> for Error {
    fn from(err: crate::operation::delete_apps_list::DeleteAppsListError) -> Self {
        match err {
            crate::operation::delete_apps_list::DeleteAppsListError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::delete_apps_list::DeleteAppsListError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::delete_apps_list::DeleteAppsListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_apps_list::DeleteAppsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_notification_channel::DeleteNotificationChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_notification_channel::DeleteNotificationChannelError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_notification_channel::DeleteNotificationChannelError> for Error {
    fn from(err: crate::operation::delete_notification_channel::DeleteNotificationChannelError) -> Self {
        match err {
            crate::operation::delete_notification_channel::DeleteNotificationChannelError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::delete_notification_channel::DeleteNotificationChannelError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::delete_notification_channel::DeleteNotificationChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_notification_channel::DeleteNotificationChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_policy::DeletePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_policy::DeletePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_policy::DeletePolicyError> for Error {
    fn from(err: crate::operation::delete_policy::DeletePolicyError) -> Self {
        match err {
            crate::operation::delete_policy::DeletePolicyError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::delete_policy::DeletePolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_policy::DeletePolicyError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::delete_policy::DeletePolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::delete_policy::DeletePolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_policy::DeletePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_protocols_list::DeleteProtocolsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_protocols_list::DeleteProtocolsListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_protocols_list::DeleteProtocolsListError> for Error {
    fn from(err: crate::operation::delete_protocols_list::DeleteProtocolsListError) -> Self {
        match err {
            crate::operation::delete_protocols_list::DeleteProtocolsListError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::delete_protocols_list::DeleteProtocolsListError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::delete_protocols_list::DeleteProtocolsListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_protocols_list::DeleteProtocolsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_set::DeleteResourceSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_set::DeleteResourceSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource_set::DeleteResourceSetError> for Error {
    fn from(err: crate::operation::delete_resource_set::DeleteResourceSetError) -> Self {
        match err {
            crate::operation::delete_resource_set::DeleteResourceSetError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::delete_resource_set::DeleteResourceSetError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::delete_resource_set::DeleteResourceSetError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::delete_resource_set::DeleteResourceSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_resource_set::DeleteResourceSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_admin_account::DisassociateAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::disassociate_admin_account::DisassociateAdminAccountError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_admin_account::DisassociateAdminAccountError> for Error {
    fn from(err: crate::operation::disassociate_admin_account::DisassociateAdminAccountError) -> Self {
        match err {
            crate::operation::disassociate_admin_account::DisassociateAdminAccountError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::disassociate_admin_account::DisassociateAdminAccountError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::disassociate_admin_account::DisassociateAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_admin_account::DisassociateAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError> for Error {
    fn from(err: crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError) -> Self {
        match err {
            crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_third_party_firewall::DisassociateThirdPartyFirewallError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_admin_account::GetAdminAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_admin_account::GetAdminAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_admin_account::GetAdminAccountError> for Error {
    fn from(err: crate::operation::get_admin_account::GetAdminAccountError) -> Self {
        match err {
            crate::operation::get_admin_account::GetAdminAccountError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_admin_account::GetAdminAccountError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::get_admin_account::GetAdminAccountError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_admin_account::GetAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_admin_scope::GetAdminScopeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_admin_scope::GetAdminScopeError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_admin_scope::GetAdminScopeError> for Error {
    fn from(err: crate::operation::get_admin_scope::GetAdminScopeError) -> Self {
        match err {
            crate::operation::get_admin_scope::GetAdminScopeError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_admin_scope::GetAdminScopeError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_admin_scope::GetAdminScopeError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::get_admin_scope::GetAdminScopeError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::get_admin_scope::GetAdminScopeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_admin_scope::GetAdminScopeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_apps_list::GetAppsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_apps_list::GetAppsListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_apps_list::GetAppsListError> for Error {
    fn from(err: crate::operation::get_apps_list::GetAppsListError) -> Self {
        match err {
            crate::operation::get_apps_list::GetAppsListError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_apps_list::GetAppsListError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::get_apps_list::GetAppsListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_apps_list::GetAppsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_compliance_detail::GetComplianceDetailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_compliance_detail::GetComplianceDetailError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_compliance_detail::GetComplianceDetailError> for Error {
    fn from(err: crate::operation::get_compliance_detail::GetComplianceDetailError) -> Self {
        match err {
            crate::operation::get_compliance_detail::GetComplianceDetailError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_compliance_detail::GetComplianceDetailError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_compliance_detail::GetComplianceDetailError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::get_compliance_detail::GetComplianceDetailError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_compliance_detail::GetComplianceDetailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_notification_channel::GetNotificationChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_notification_channel::GetNotificationChannelError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_notification_channel::GetNotificationChannelError> for Error {
    fn from(err: crate::operation::get_notification_channel::GetNotificationChannelError) -> Self {
        match err {
            crate::operation::get_notification_channel::GetNotificationChannelError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::get_notification_channel::GetNotificationChannelError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::get_notification_channel::GetNotificationChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_notification_channel::GetNotificationChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_policy::GetPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_policy::GetPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_policy::GetPolicyError> for Error {
    fn from(err: crate::operation::get_policy::GetPolicyError) -> Self {
        match err {
            crate::operation::get_policy::GetPolicyError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_policy::GetPolicyError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::get_policy::GetPolicyError::InvalidTypeException(inner) => Error::InvalidTypeException(inner),
            crate::operation::get_policy::GetPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_policy::GetPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_protection_status::GetProtectionStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_protection_status::GetProtectionStatusError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_protection_status::GetProtectionStatusError> for Error {
    fn from(err: crate::operation::get_protection_status::GetProtectionStatusError) -> Self {
        match err {
            crate::operation::get_protection_status::GetProtectionStatusError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_protection_status::GetProtectionStatusError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_protection_status::GetProtectionStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_protection_status::GetProtectionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_protocols_list::GetProtocolsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_protocols_list::GetProtocolsListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_protocols_list::GetProtocolsListError> for Error {
    fn from(err: crate::operation::get_protocols_list::GetProtocolsListError) -> Self {
        match err {
            crate::operation::get_protocols_list::GetProtocolsListError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_protocols_list::GetProtocolsListError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::get_protocols_list::GetProtocolsListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_protocols_list::GetProtocolsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_set::GetResourceSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_set::GetResourceSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_set::GetResourceSetError> for Error {
    fn from(err: crate::operation::get_resource_set::GetResourceSetError) -> Self {
        match err {
            crate::operation::get_resource_set::GetResourceSetError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_resource_set::GetResourceSetError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_resource_set::GetResourceSetError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::get_resource_set::GetResourceSetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_resource_set::GetResourceSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError> for Error {
    fn from(err: crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError) -> Self {
        match err {
            crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError::InternalErrorException(
                inner,
            ) => Error::InternalErrorException(inner),
            crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError::InvalidOperationException(
                inner,
            ) => Error::InvalidOperationException(inner),
            crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::get_third_party_firewall_association_status::GetThirdPartyFirewallAssociationStatusError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_violation_details::GetViolationDetailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_violation_details::GetViolationDetailsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_violation_details::GetViolationDetailsError> for Error {
    fn from(err: crate::operation::get_violation_details::GetViolationDetailsError) -> Self {
        match err {
            crate::operation::get_violation_details::GetViolationDetailsError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::get_violation_details::GetViolationDetailsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::get_violation_details::GetViolationDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_violation_details::GetViolationDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError> for Error {
    fn from(err: crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError) -> Self {
        match err {
            crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_admin_accounts_for_organization::ListAdminAccountsForOrganizationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_admins_managing_account::ListAdminsManagingAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_admins_managing_account::ListAdminsManagingAccountError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_admins_managing_account::ListAdminsManagingAccountError> for Error {
    fn from(err: crate::operation::list_admins_managing_account::ListAdminsManagingAccountError) -> Self {
        match err {
            crate::operation::list_admins_managing_account::ListAdminsManagingAccountError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::list_admins_managing_account::ListAdminsManagingAccountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::list_admins_managing_account::ListAdminsManagingAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_admins_managing_account::ListAdminsManagingAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_apps_lists::ListAppsListsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_apps_lists::ListAppsListsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_apps_lists::ListAppsListsError> for Error {
    fn from(err: crate::operation::list_apps_lists::ListAppsListsError) -> Self {
        match err {
            crate::operation::list_apps_lists::ListAppsListsError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::list_apps_lists::ListAppsListsError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::list_apps_lists::ListAppsListsError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_apps_lists::ListAppsListsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_apps_lists::ListAppsListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_compliance_status::ListComplianceStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_compliance_status::ListComplianceStatusError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_compliance_status::ListComplianceStatusError> for Error {
    fn from(err: crate::operation::list_compliance_status::ListComplianceStatusError) -> Self {
        match err {
            crate::operation::list_compliance_status::ListComplianceStatusError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::list_compliance_status::ListComplianceStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_compliance_status::ListComplianceStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_discovered_resources::ListDiscoveredResourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_discovered_resources::ListDiscoveredResourcesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_discovered_resources::ListDiscoveredResourcesError> for Error {
    fn from(err: crate::operation::list_discovered_resources::ListDiscoveredResourcesError) -> Self {
        match err {
            crate::operation::list_discovered_resources::ListDiscoveredResourcesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::list_discovered_resources::ListDiscoveredResourcesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::list_discovered_resources::ListDiscoveredResourcesError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::list_discovered_resources::ListDiscoveredResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_member_accounts::ListMemberAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_member_accounts::ListMemberAccountsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_member_accounts::ListMemberAccountsError> for Error {
    fn from(err: crate::operation::list_member_accounts::ListMemberAccountsError) -> Self {
        match err {
            crate::operation::list_member_accounts::ListMemberAccountsError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::list_member_accounts::ListMemberAccountsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_member_accounts::ListMemberAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_policies::ListPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_policies::ListPoliciesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_policies::ListPoliciesError> for Error {
    fn from(err: crate::operation::list_policies::ListPoliciesError) -> Self {
        match err {
            crate::operation::list_policies::ListPoliciesError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::list_policies::ListPoliciesError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::list_policies::ListPoliciesError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::list_policies::ListPoliciesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_policies::ListPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_protocols_lists::ListProtocolsListsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_protocols_lists::ListProtocolsListsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_protocols_lists::ListProtocolsListsError> for Error {
    fn from(err: crate::operation::list_protocols_lists::ListProtocolsListsError) -> Self {
        match err {
            crate::operation::list_protocols_lists::ListProtocolsListsError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::list_protocols_lists::ListProtocolsListsError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::list_protocols_lists::ListProtocolsListsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_protocols_lists::ListProtocolsListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resource_set_resources::ListResourceSetResourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resource_set_resources::ListResourceSetResourcesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resource_set_resources::ListResourceSetResourcesError> for Error {
    fn from(err: crate::operation::list_resource_set_resources::ListResourceSetResourcesError) -> Self {
        match err {
            crate::operation::list_resource_set_resources::ListResourceSetResourcesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::list_resource_set_resources::ListResourceSetResourcesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::operation::list_resource_set_resources::ListResourceSetResourcesError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::list_resource_set_resources::ListResourceSetResourcesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_resource_set_resources::ListResourceSetResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resource_sets::ListResourceSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_resource_sets::ListResourceSetsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_resource_sets::ListResourceSetsError> for Error {
    fn from(err: crate::operation::list_resource_sets::ListResourceSetsError) -> Self {
        match err {
            crate::operation::list_resource_sets::ListResourceSetsError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::list_resource_sets::ListResourceSetsError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_resource_sets::ListResourceSetsError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::list_resource_sets::ListResourceSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError> for Error {
    fn from(err: crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError) -> Self {
        match err {
            crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError::InternalErrorException(
                inner,
            ) => Error::InternalErrorException(inner),
            crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError::InvalidInputException(
                inner,
            ) => Error::InvalidInputException(inner),
            crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError::InvalidOperationException(
                inner,
            ) => Error::InvalidOperationException(inner),
            crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_admin_account::PutAdminAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_admin_account::PutAdminAccountError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_admin_account::PutAdminAccountError> for Error {
    fn from(err: crate::operation::put_admin_account::PutAdminAccountError) -> Self {
        match err {
            crate::operation::put_admin_account::PutAdminAccountError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::put_admin_account::PutAdminAccountError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::put_admin_account::PutAdminAccountError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::put_admin_account::PutAdminAccountError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_admin_account::PutAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_apps_list::PutAppsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_apps_list::PutAppsListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_apps_list::PutAppsListError> for Error {
    fn from(err: crate::operation::put_apps_list::PutAppsListError) -> Self {
        match err {
            crate::operation::put_apps_list::PutAppsListError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::put_apps_list::PutAppsListError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::put_apps_list::PutAppsListError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::put_apps_list::PutAppsListError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_apps_list::PutAppsListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_apps_list::PutAppsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_notification_channel::PutNotificationChannelError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_notification_channel::PutNotificationChannelError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_notification_channel::PutNotificationChannelError> for Error {
    fn from(err: crate::operation::put_notification_channel::PutNotificationChannelError) -> Self {
        match err {
            crate::operation::put_notification_channel::PutNotificationChannelError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::operation::put_notification_channel::PutNotificationChannelError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::operation::put_notification_channel::PutNotificationChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::put_notification_channel::PutNotificationChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_policy::PutPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_policy::PutPolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_policy::PutPolicyError> for Error {
    fn from(err: crate::operation::put_policy::PutPolicyError) -> Self {
        match err {
            crate::operation::put_policy::PutPolicyError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::put_policy::PutPolicyError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::put_policy::PutPolicyError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::put_policy::PutPolicyError::InvalidTypeException(inner) => Error::InvalidTypeException(inner),
            crate::operation::put_policy::PutPolicyError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_policy::PutPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_policy::PutPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_protocols_list::PutProtocolsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_protocols_list::PutProtocolsListError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_protocols_list::PutProtocolsListError> for Error {
    fn from(err: crate::operation::put_protocols_list::PutProtocolsListError) -> Self {
        match err {
            crate::operation::put_protocols_list::PutProtocolsListError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::put_protocols_list::PutProtocolsListError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::put_protocols_list::PutProtocolsListError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::put_protocols_list::PutProtocolsListError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_protocols_list::PutProtocolsListError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_protocols_list::PutProtocolsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_set::PutResourceSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_set::PutResourceSetError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resource_set::PutResourceSetError> for Error {
    fn from(err: crate::operation::put_resource_set::PutResourceSetError) -> Self {
        match err {
            crate::operation::put_resource_set::PutResourceSetError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::put_resource_set::PutResourceSetError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::put_resource_set::PutResourceSetError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::put_resource_set::PutResourceSetError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::put_resource_set::PutResourceSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::tag_resource::TagResourceError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::tag_resource::TagResourceError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::operation::untag_resource::UntagResourceError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::InternalErrorException(inner) => inner.source(),
            Error::InvalidInputException(inner) => inner.source(),
            Error::InvalidOperationException(inner) => inner.source(),
            Error::InvalidTypeException(inner) => inner.source(),
            Error::LimitExceededException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalErrorException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::InvalidOperationException(e) => e.request_id(),
            Self::InvalidTypeException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
