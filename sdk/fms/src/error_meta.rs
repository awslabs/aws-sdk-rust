// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The operation failed because of a system problem, even though the request was valid. Retry your request.</p>
    InternalErrorException(crate::error::InternalErrorException),
    /// <p>The parameters of the request were invalid.</p>
    InvalidInputException(crate::error::InvalidInputException),
    /// <p>The operation failed because there was nothing to do or the operation wasn't possible. For example, you might have submitted an <code>AssociateAdminAccount</code> request for an account ID that was already set as the Firewall Manager administrator. Or you might have tried to access a Region that's disabled by default, and that you need to enable for the Firewall Manager administrator account and for Organizations before you can access it.</p>
    InvalidOperationException(crate::error::InvalidOperationException),
    /// <p>The value of the <code>Type</code> parameter is invalid.</p>
    InvalidTypeException(crate::error::InvalidTypeException),
    /// <p>The operation exceeds a resource limit, for example, the maximum number of <code>policy</code> objects that you can create for an Amazon Web Services account. For more information, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/fms-limits.html">Firewall Manager Limits</a> in the <i>WAF Developer Guide</i>.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The specified resource was not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalErrorException(inner) => inner.fmt(f),
            Error::InvalidInputException(inner) => inner.fmt(f),
            Error::InvalidOperationException(inner) => inner.fmt(f),
            Error::InvalidTypeException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateAdminAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateAdminAccountError> for Error {
    fn from(err: crate::error::AssociateAdminAccountError) -> Self {
        match err {
            crate::error::AssociateAdminAccountError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AssociateAdminAccountError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AssociateAdminAccountError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::AssociateAdminAccountError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AssociateAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateThirdPartyFirewallError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateThirdPartyFirewallError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateThirdPartyFirewallError> for Error {
    fn from(err: crate::error::AssociateThirdPartyFirewallError) -> Self {
        match err {
            crate::error::AssociateThirdPartyFirewallError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AssociateThirdPartyFirewallError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::AssociateThirdPartyFirewallError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::AssociateThirdPartyFirewallError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateThirdPartyFirewallError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchAssociateResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchAssociateResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchAssociateResourceError> for Error {
    fn from(err: crate::error::BatchAssociateResourceError) -> Self {
        match err {
            crate::error::BatchAssociateResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::BatchAssociateResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::BatchAssociateResourceError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::BatchAssociateResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::BatchAssociateResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchAssociateResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDisassociateResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDisassociateResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDisassociateResourceError> for Error {
    fn from(err: crate::error::BatchDisassociateResourceError) -> Self {
        match err {
            crate::error::BatchDisassociateResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::BatchDisassociateResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::BatchDisassociateResourceError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::BatchDisassociateResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchDisassociateResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteAppsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteAppsListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAppsListError> for Error {
    fn from(err: crate::error::DeleteAppsListError) -> Self {
        match err {
            crate::error::DeleteAppsListError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteAppsListError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::DeleteAppsListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteAppsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteNotificationChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteNotificationChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteNotificationChannelError> for Error {
    fn from(err: crate::error::DeleteNotificationChannelError) -> Self {
        match err {
            crate::error::DeleteNotificationChannelError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteNotificationChannelError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::DeleteNotificationChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteNotificationChannelError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeletePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeletePolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeletePolicyError> for Error {
    fn from(err: crate::error::DeletePolicyError) -> Self {
        match err {
            crate::error::DeletePolicyError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeletePolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeletePolicyError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::DeletePolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::DeletePolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeletePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteProtocolsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteProtocolsListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteProtocolsListError> for Error {
    fn from(err: crate::error::DeleteProtocolsListError) -> Self {
        match err {
            crate::error::DeleteProtocolsListError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteProtocolsListError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::DeleteProtocolsListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteProtocolsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourceSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourceSetError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourceSetError> for Error {
    fn from(err: crate::error::DeleteResourceSetError) -> Self {
        match err {
            crate::error::DeleteResourceSetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteResourceSetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DeleteResourceSetError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::DeleteResourceSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteResourceSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateAdminAccountError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateAdminAccountError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateAdminAccountError> for Error {
    fn from(err: crate::error::DisassociateAdminAccountError) -> Self {
        match err {
            crate::error::DisassociateAdminAccountError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DisassociateAdminAccountError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::DisassociateAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateAdminAccountError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DisassociateThirdPartyFirewallError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DisassociateThirdPartyFirewallError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateThirdPartyFirewallError> for Error {
    fn from(err: crate::error::DisassociateThirdPartyFirewallError) -> Self {
        match err {
            crate::error::DisassociateThirdPartyFirewallError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DisassociateThirdPartyFirewallError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::DisassociateThirdPartyFirewallError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::DisassociateThirdPartyFirewallError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisassociateThirdPartyFirewallError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAdminAccountError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAdminAccountError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAdminAccountError> for Error {
    fn from(err: crate::error::GetAdminAccountError) -> Self {
        match err {
            crate::error::GetAdminAccountError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetAdminAccountError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::GetAdminAccountError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAdminAccountError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAppsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetAppsListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAppsListError> for Error {
    fn from(err: crate::error::GetAppsListError) -> Self {
        match err {
            crate::error::GetAppsListError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetAppsListError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::GetAppsListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetAppsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetComplianceDetailError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetComplianceDetailError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetComplianceDetailError> for Error {
    fn from(err: crate::error::GetComplianceDetailError) -> Self {
        match err {
            crate::error::GetComplianceDetailError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetComplianceDetailError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetComplianceDetailError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::GetComplianceDetailError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetComplianceDetailError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetNotificationChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetNotificationChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetNotificationChannelError> for Error {
    fn from(err: crate::error::GetNotificationChannelError) -> Self {
        match err {
            crate::error::GetNotificationChannelError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetNotificationChannelError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::GetNotificationChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetNotificationChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetPolicyError> for Error {
    fn from(err: crate::error::GetPolicyError) -> Self {
        match err {
            crate::error::GetPolicyError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetPolicyError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::GetPolicyError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::GetPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetProtectionStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetProtectionStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetProtectionStatusError> for Error {
    fn from(err: crate::error::GetProtectionStatusError) -> Self {
        match err {
            crate::error::GetProtectionStatusError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetProtectionStatusError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetProtectionStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetProtectionStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetProtocolsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetProtocolsListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetProtocolsListError> for Error {
    fn from(err: crate::error::GetProtocolsListError) -> Self {
        match err {
            crate::error::GetProtocolsListError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetProtocolsListError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::GetProtocolsListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetProtocolsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetResourceSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetResourceSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetResourceSetError> for Error {
    fn from(err: crate::error::GetResourceSetError) -> Self {
        match err {
            crate::error::GetResourceSetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetResourceSetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetResourceSetError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::GetResourceSetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetResourceSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetThirdPartyFirewallAssociationStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetThirdPartyFirewallAssociationStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetThirdPartyFirewallAssociationStatusError> for Error {
    fn from(err: crate::error::GetThirdPartyFirewallAssociationStatusError) -> Self {
        match err {
            crate::error::GetThirdPartyFirewallAssociationStatusError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::error::GetThirdPartyFirewallAssociationStatusError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::GetThirdPartyFirewallAssociationStatusError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::error::GetThirdPartyFirewallAssociationStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetThirdPartyFirewallAssociationStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetViolationDetailsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetViolationDetailsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetViolationDetailsError> for Error {
    fn from(err: crate::error::GetViolationDetailsError) -> Self {
        match err {
            crate::error::GetViolationDetailsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetViolationDetailsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::GetViolationDetailsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetViolationDetailsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListAppsListsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListAppsListsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAppsListsError> for Error {
    fn from(err: crate::error::ListAppsListsError) -> Self {
        match err {
            crate::error::ListAppsListsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListAppsListsError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::ListAppsListsError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListAppsListsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListAppsListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListComplianceStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListComplianceStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListComplianceStatusError> for Error {
    fn from(err: crate::error::ListComplianceStatusError) -> Self {
        match err {
            crate::error::ListComplianceStatusError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListComplianceStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListComplianceStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDiscoveredResourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDiscoveredResourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDiscoveredResourcesError> for Error {
    fn from(err: crate::error::ListDiscoveredResourcesError) -> Self {
        match err {
            crate::error::ListDiscoveredResourcesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListDiscoveredResourcesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListDiscoveredResourcesError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::ListDiscoveredResourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListMemberAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListMemberAccountsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListMemberAccountsError> for Error {
    fn from(err: crate::error::ListMemberAccountsError) -> Self {
        match err {
            crate::error::ListMemberAccountsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListMemberAccountsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListMemberAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListPoliciesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListPoliciesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListPoliciesError> for Error {
    fn from(err: crate::error::ListPoliciesError) -> Self {
        match err {
            crate::error::ListPoliciesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListPoliciesError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::ListPoliciesError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ListPoliciesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListProtocolsListsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListProtocolsListsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListProtocolsListsError> for Error {
    fn from(err: crate::error::ListProtocolsListsError) -> Self {
        match err {
            crate::error::ListProtocolsListsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListProtocolsListsError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::ListProtocolsListsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListProtocolsListsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceSetResourcesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceSetResourcesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceSetResourcesError> for Error {
    fn from(err: crate::error::ListResourceSetResourcesError) -> Self {
        match err {
            crate::error::ListResourceSetResourcesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListResourceSetResourcesError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListResourceSetResourcesError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::ListResourceSetResourcesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListResourceSetResourcesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceSetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceSetsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceSetsError> for Error {
    fn from(err: crate::error::ListResourceSetsError) -> Self {
        match err {
            crate::error::ListResourceSetsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListResourceSetsError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListResourceSetsError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::ListResourceSetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::ListThirdPartyFirewallFirewallPoliciesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListThirdPartyFirewallFirewallPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListThirdPartyFirewallFirewallPoliciesError> for Error {
    fn from(err: crate::error::ListThirdPartyFirewallFirewallPoliciesError) -> Self {
        match err {
            crate::error::ListThirdPartyFirewallFirewallPoliciesError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::error::ListThirdPartyFirewallFirewallPoliciesError::InvalidInputException(inner) => Error::InvalidInputException(inner),
            crate::error::ListThirdPartyFirewallFirewallPoliciesError::InvalidOperationException(inner) => Error::InvalidOperationException(inner),
            crate::error::ListThirdPartyFirewallFirewallPoliciesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::ListThirdPartyFirewallFirewallPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutAppsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutAppsListError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutAppsListError> for Error {
    fn from(err: crate::error::PutAppsListError) -> Self {
        match err {
            crate::error::PutAppsListError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::PutAppsListError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutAppsListError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::PutAppsListError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutAppsListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutAppsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutNotificationChannelError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutNotificationChannelError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutNotificationChannelError> for Error {
    fn from(err: crate::error::PutNotificationChannelError) -> Self {
        match err {
            crate::error::PutNotificationChannelError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::PutNotificationChannelError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::PutNotificationChannelError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutNotificationChannelError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutPolicyError> for Error {
    fn from(err: crate::error::PutPolicyError) -> Self {
        match err {
            crate::error::PutPolicyError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::PutPolicyError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutPolicyError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::PutPolicyError::InvalidTypeException(inner) => {
                Error::InvalidTypeException(inner)
            }
            crate::error::PutPolicyError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutPolicyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutProtocolsListError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutProtocolsListError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutProtocolsListError> for Error {
    fn from(err: crate::error::PutProtocolsListError) -> Self {
        match err {
            crate::error::PutProtocolsListError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::PutProtocolsListError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutProtocolsListError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::PutProtocolsListError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutProtocolsListError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::PutProtocolsListError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutResourceSetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutResourceSetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutResourceSetError> for Error {
    fn from(err: crate::error::PutResourceSetError) -> Self {
        match err {
            crate::error::PutResourceSetError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::PutResourceSetError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::PutResourceSetError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::PutResourceSetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutResourceSetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::TagResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::TagResourceError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::TagResourceError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UntagResourceError::InvalidInputException(inner) => {
                Error::InvalidInputException(inner)
            }
            crate::error::UntagResourceError::InvalidOperationException(inner) => {
                Error::InvalidOperationException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalErrorException(e) => e.request_id(),
            Self::InvalidInputException(e) => e.request_id(),
            Self::InvalidOperationException(e) => e.request_id(),
            Self::InvalidTypeException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
