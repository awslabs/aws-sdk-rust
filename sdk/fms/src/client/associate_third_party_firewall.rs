// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AssociateThirdPartyFirewall`](crate::operation::associate_third_party_firewall::builders::AssociateThirdPartyFirewallFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`third_party_firewall(ThirdPartyFirewall)`](crate::operation::associate_third_party_firewall::builders::AssociateThirdPartyFirewallFluentBuilder::third_party_firewall) / [`set_third_party_firewall(Option<ThirdPartyFirewall>)`](crate::operation::associate_third_party_firewall::builders::AssociateThirdPartyFirewallFluentBuilder::set_third_party_firewall):<br>required: **true**<br><p>The name of the third-party firewall vendor.</p><br>
    /// - On success, responds with [`AssociateThirdPartyFirewallOutput`](crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallOutput) with field(s):
    ///   - [`third_party_firewall_status(Option<ThirdPartyFirewallAssociationStatus>)`](crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallOutput::third_party_firewall_status): <p>The current status for setting a Firewall Manager policy administrator's account as an administrator of the third-party firewall tenant.</p>  <ul>   <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>   <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>   <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>   <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>   <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>  </ul>
    /// - On failure, responds with [`SdkError<AssociateThirdPartyFirewallError>`](crate::operation::associate_third_party_firewall::AssociateThirdPartyFirewallError)
    pub fn associate_third_party_firewall(
        &self,
    ) -> crate::operation::associate_third_party_firewall::builders::AssociateThirdPartyFirewallFluentBuilder {
        crate::operation::associate_third_party_firewall::builders::AssociateThirdPartyFirewallFluentBuilder::new(self.handle.clone())
    }
}
