// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_apps_list_data<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::AppsListData>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::AppsListDataBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "ListId" => {
                                builder = builder.set_list_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ListName" => {
                                builder = builder.set_list_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ListUpdateToken" => {
                                builder = builder.set_list_update_token(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CreateTime" => {
                                builder = builder.set_create_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "LastUpdateTime" => {
                                builder = builder.set_last_update_time(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "AppsList" => {
                                builder = builder.set_apps_list(
                                    crate::protocol_serde::shape_apps_list::de_apps_list(tokens)?,
                                );
                            }
                            "PreviousAppsList" => {
                                builder = builder.set_previous_apps_list(
                                    crate::protocol_serde::shape_previous_apps_list::de_previous_apps_list(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_apps_list_data(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::AppsListData,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.list_id {
        object.key("ListId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.list_name {
        object.key("ListName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.list_update_token {
        object.key("ListUpdateToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.create_time {
        object
            .key("CreateTime")
            .date_time(var_4, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_5) = &input.last_update_time {
        object
            .key("LastUpdateTime")
            .date_time(var_5, aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_6) = &input.apps_list {
        let mut array_7 = object.key("AppsList").start_array();
        for item_8 in var_6 {
            {
                #[allow(unused_mut)]
                let mut object_9 = array_7.value().start_object();
                crate::protocol_serde::shape_app::ser_app(&mut object_9, item_8)?;
                object_9.finish();
            }
        }
        array_7.finish();
    }
    if let Some(var_10) = &input.previous_apps_list {
        #[allow(unused_mut)]
        let mut object_11 = object.key("PreviousAppsList").start_object();
        for (key_12, value_13) in var_10 {
            {
                let mut array_14 = object_11.key(key_12.as_str()).start_array();
                for item_15 in value_13 {
                    {
                        #[allow(unused_mut)]
                        let mut object_16 = array_14.value().start_object();
                        crate::protocol_serde::shape_app::ser_app(&mut object_16, item_15)?;
                        object_16.finish();
                    }
                }
                array_14.finish();
            }
        }
        object_11.finish();
    }
    Ok(())
}
