// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_resource_violation<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::ResourceViolation>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ResourceViolationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AwsVPCSecurityGroupViolation" => {
                                builder = builder.set_aws_vpc_security_group_violation(
                                    crate::protocol_serde::shape_aws_vpc_security_group_violation::de_aws_vpc_security_group_violation(tokens)?
                                );
                            }
                            "AwsEc2NetworkInterfaceViolation" => {
                                builder = builder.set_aws_ec2_network_interface_violation(
                                    crate::protocol_serde::shape_aws_ec2_network_interface_violation::de_aws_ec2_network_interface_violation(tokens)?
                                );
                            }
                            "AwsEc2InstanceViolation" => {
                                builder = builder.set_aws_ec2_instance_violation(
                                    crate::protocol_serde::shape_aws_ec2_instance_violation::de_aws_ec2_instance_violation(tokens)?
                                );
                            }
                            "NetworkFirewallMissingFirewallViolation" => {
                                builder = builder.set_network_firewall_missing_firewall_violation(
                                    crate::protocol_serde::shape_network_firewall_missing_firewall_violation::de_network_firewall_missing_firewall_violation(tokens)?
                                );
                            }
                            "NetworkFirewallMissingSubnetViolation" => {
                                builder = builder.set_network_firewall_missing_subnet_violation(
                                    crate::protocol_serde::shape_network_firewall_missing_subnet_violation::de_network_firewall_missing_subnet_violation(tokens)?
                                );
                            }
                            "NetworkFirewallMissingExpectedRTViolation" => {
                                builder = builder.set_network_firewall_missing_expected_rt_violation(
                                    crate::protocol_serde::shape_network_firewall_missing_expected_rt_violation::de_network_firewall_missing_expected_rt_violation(tokens)?
                                );
                            }
                            "NetworkFirewallPolicyModifiedViolation" => {
                                builder = builder.set_network_firewall_policy_modified_violation(
                                    crate::protocol_serde::shape_network_firewall_policy_modified_violation::de_network_firewall_policy_modified_violation(tokens)?
                                );
                            }
                            "NetworkFirewallInternetTrafficNotInspectedViolation" => {
                                builder = builder.set_network_firewall_internet_traffic_not_inspected_violation(
                                    crate::protocol_serde::shape_network_firewall_internet_traffic_not_inspected_violation::de_network_firewall_internet_traffic_not_inspected_violation(tokens)?
                                );
                            }
                            "NetworkFirewallInvalidRouteConfigurationViolation" => {
                                builder = builder.set_network_firewall_invalid_route_configuration_violation(
                                    crate::protocol_serde::shape_network_firewall_invalid_route_configuration_violation::de_network_firewall_invalid_route_configuration_violation(tokens)?
                                );
                            }
                            "NetworkFirewallBlackHoleRouteDetectedViolation" => {
                                builder = builder.set_network_firewall_black_hole_route_detected_violation(
                                    crate::protocol_serde::shape_network_firewall_black_hole_route_detected_violation::de_network_firewall_black_hole_route_detected_violation(tokens)?
                                );
                            }
                            "NetworkFirewallUnexpectedFirewallRoutesViolation" => {
                                builder = builder.set_network_firewall_unexpected_firewall_routes_violation(
                                    crate::protocol_serde::shape_network_firewall_unexpected_firewall_routes_violation::de_network_firewall_unexpected_firewall_routes_violation(tokens)?
                                );
                            }
                            "NetworkFirewallUnexpectedGatewayRoutesViolation" => {
                                builder = builder.set_network_firewall_unexpected_gateway_routes_violation(
                                    crate::protocol_serde::shape_network_firewall_unexpected_gateway_routes_violation::de_network_firewall_unexpected_gateway_routes_violation(tokens)?
                                );
                            }
                            "NetworkFirewallMissingExpectedRoutesViolation" => {
                                builder = builder.set_network_firewall_missing_expected_routes_violation(
                                    crate::protocol_serde::shape_network_firewall_missing_expected_routes_violation::de_network_firewall_missing_expected_routes_violation(tokens)?
                                );
                            }
                            "DnsRuleGroupPriorityConflictViolation" => {
                                builder = builder.set_dns_rule_group_priority_conflict_violation(
                                    crate::protocol_serde::shape_dns_rule_group_priority_conflict_violation::de_dns_rule_group_priority_conflict_violation(tokens)?
                                );
                            }
                            "DnsDuplicateRuleGroupViolation" => {
                                builder = builder.set_dns_duplicate_rule_group_violation(
                                    crate::protocol_serde::shape_dns_duplicate_rule_group_violation::de_dns_duplicate_rule_group_violation(tokens)?
                                );
                            }
                            "DnsRuleGroupLimitExceededViolation" => {
                                builder = builder.set_dns_rule_group_limit_exceeded_violation(
                                    crate::protocol_serde::shape_dns_rule_group_limit_exceeded_violation::de_dns_rule_group_limit_exceeded_violation(tokens)?
                                );
                            }
                            "PossibleRemediationActions" => {
                                builder = builder.set_possible_remediation_actions(
                                    crate::protocol_serde::shape_possible_remediation_actions::de_possible_remediation_actions(tokens)?
                                );
                            }
                            "FirewallSubnetIsOutOfScopeViolation" => {
                                builder = builder.set_firewall_subnet_is_out_of_scope_violation(
                                    crate::protocol_serde::shape_firewall_subnet_is_out_of_scope_violation::de_firewall_subnet_is_out_of_scope_violation(tokens)?
                                );
                            }
                            "RouteHasOutOfScopeEndpointViolation" => {
                                builder = builder.set_route_has_out_of_scope_endpoint_violation(
                                    crate::protocol_serde::shape_route_has_out_of_scope_endpoint_violation::de_route_has_out_of_scope_endpoint_violation(tokens)?
                                );
                            }
                            "ThirdPartyFirewallMissingFirewallViolation" => {
                                builder = builder.set_third_party_firewall_missing_firewall_violation(
                                    crate::protocol_serde::shape_third_party_firewall_missing_firewall_violation::de_third_party_firewall_missing_firewall_violation(tokens)?
                                );
                            }
                            "ThirdPartyFirewallMissingSubnetViolation" => {
                                builder = builder.set_third_party_firewall_missing_subnet_violation(
                                    crate::protocol_serde::shape_third_party_firewall_missing_subnet_violation::de_third_party_firewall_missing_subnet_violation(tokens)?
                                );
                            }
                            "ThirdPartyFirewallMissingExpectedRouteTableViolation" => {
                                builder = builder.set_third_party_firewall_missing_expected_route_table_violation(
                                    crate::protocol_serde::shape_third_party_firewall_missing_expected_route_table_violation::de_third_party_firewall_missing_expected_route_table_violation(tokens)?
                                );
                            }
                            "FirewallSubnetMissingVPCEndpointViolation" => {
                                builder = builder.set_firewall_subnet_missing_vpc_endpoint_violation(
                                    crate::protocol_serde::shape_firewall_subnet_missing_vpc_endpoint_violation::de_firewall_subnet_missing_vpc_endpoint_violation(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
