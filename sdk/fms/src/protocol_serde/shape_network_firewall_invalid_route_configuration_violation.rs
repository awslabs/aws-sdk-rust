// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_network_firewall_invalid_route_configuration_violation<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::NetworkFirewallInvalidRouteConfigurationViolation>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::NetworkFirewallInvalidRouteConfigurationViolationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "AffectedSubnets" => {
                                builder = builder.set_affected_subnets(
                                    crate::protocol_serde::shape_resource_id_list::de_resource_id_list(tokens)?
                                );
                            }
                            "RouteTableId" => {
                                builder = builder.set_route_table_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "IsRouteTableUsedInDifferentAZ" => {
                                builder = builder.set_is_route_table_used_in_different_az(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "ViolatingRoute" => {
                                builder = builder.set_violating_route(
                                    crate::protocol_serde::shape_route::de_route(tokens)?,
                                );
                            }
                            "CurrentFirewallSubnetRouteTable" => {
                                builder = builder.set_current_firewall_subnet_route_table(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExpectedFirewallEndpoint" => {
                                builder = builder.set_expected_firewall_endpoint(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ActualFirewallEndpoint" => {
                                builder = builder.set_actual_firewall_endpoint(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExpectedFirewallSubnetId" => {
                                builder = builder.set_expected_firewall_subnet_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ActualFirewallSubnetId" => {
                                builder = builder.set_actual_firewall_subnet_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExpectedFirewallSubnetRoutes" => {
                                builder = builder.set_expected_firewall_subnet_routes(
                                    crate::protocol_serde::shape_expected_routes::de_expected_routes(tokens)?
                                );
                            }
                            "ActualFirewallSubnetRoutes" => {
                                builder = builder.set_actual_firewall_subnet_routes(
                                    crate::protocol_serde::shape_routes::de_routes(tokens)?,
                                );
                            }
                            "InternetGatewayId" => {
                                builder = builder.set_internet_gateway_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CurrentInternetGatewayRouteTable" => {
                                builder = builder.set_current_internet_gateway_route_table(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ExpectedInternetGatewayRoutes" => {
                                builder = builder.set_expected_internet_gateway_routes(
                                    crate::protocol_serde::shape_expected_routes::de_expected_routes(tokens)?
                                );
                            }
                            "ActualInternetGatewayRoutes" => {
                                builder = builder.set_actual_internet_gateway_routes(
                                    crate::protocol_serde::shape_routes::de_routes(tokens)?,
                                );
                            }
                            "VpcId" => {
                                builder = builder.set_vpc_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
