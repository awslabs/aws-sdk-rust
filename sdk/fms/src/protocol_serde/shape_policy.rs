// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_policy<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::Policy>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PolicyBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "PolicyId" => {
                            builder = builder.set_policy_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PolicyName" => {
                            builder = builder.set_policy_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PolicyUpdateToken" => {
                            builder = builder.set_policy_update_token(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "SecurityServicePolicyData" => {
                            builder = builder.set_security_service_policy_data(
                                crate::protocol_serde::shape_security_service_policy_data::de_security_service_policy_data(tokens)?,
                            );
                        }
                        "ResourceType" => {
                            builder = builder.set_resource_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ResourceTypeList" => {
                            builder = builder.set_resource_type_list(crate::protocol_serde::shape_resource_type_list::de_resource_type_list(tokens)?);
                        }
                        "ResourceTags" => {
                            builder = builder.set_resource_tags(crate::protocol_serde::shape_resource_tags::de_resource_tags(tokens)?);
                        }
                        "ExcludeResourceTags" => {
                            builder = builder.set_exclude_resource_tags(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "RemediationEnabled" => {
                            builder = builder.set_remediation_enabled(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "DeleteUnusedFMManagedResources" => {
                            builder = builder
                                .set_delete_unused_fm_managed_resources(::aws_smithy_json::deserialize::token::expect_bool_or_null(tokens.next())?);
                        }
                        "IncludeMap" => {
                            builder = builder.set_include_map(crate::protocol_serde::shape_customer_policy_scope_map::de_customer_policy_scope_map(
                                tokens,
                            )?);
                        }
                        "ExcludeMap" => {
                            builder = builder.set_exclude_map(crate::protocol_serde::shape_customer_policy_scope_map::de_customer_policy_scope_map(
                                tokens,
                            )?);
                        }
                        "ResourceSetIds" => {
                            builder = builder.set_resource_set_ids(crate::protocol_serde::shape_resource_set_ids::de_resource_set_ids(tokens)?);
                        }
                        "PolicyDescription" => {
                            builder = builder.set_policy_description(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "PolicyStatus" => {
                            builder = builder.set_policy_status(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CustomerPolicyStatus::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::policy_correct_errors(builder).build().map_err(|err| {
                ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err)
            })?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_policy(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Policy,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.policy_id {
        object.key("PolicyId").string(var_1.as_str());
    }
    {
        object.key("PolicyName").string(input.policy_name.as_str());
    }
    if let Some(var_2) = &input.policy_update_token {
        object.key("PolicyUpdateToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.security_service_policy_data {
        #[allow(unused_mut)]
        let mut object_4 = object.key("SecurityServicePolicyData").start_object();
        crate::protocol_serde::shape_security_service_policy_data::ser_security_service_policy_data(&mut object_4, var_3)?;
        object_4.finish();
    }
    {
        object.key("ResourceType").string(input.resource_type.as_str());
    }
    if let Some(var_5) = &input.resource_type_list {
        let mut array_6 = object.key("ResourceTypeList").start_array();
        for item_7 in var_5 {
            {
                array_6.value().string(item_7.as_str());
            }
        }
        array_6.finish();
    }
    if let Some(var_8) = &input.resource_tags {
        let mut array_9 = object.key("ResourceTags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_resource_tag::ser_resource_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    {
        object.key("ExcludeResourceTags").boolean(input.exclude_resource_tags);
    }
    {
        object.key("RemediationEnabled").boolean(input.remediation_enabled);
    }
    if input.delete_unused_fm_managed_resources {
        object
            .key("DeleteUnusedFMManagedResources")
            .boolean(input.delete_unused_fm_managed_resources);
    }
    if let Some(var_12) = &input.include_map {
        #[allow(unused_mut)]
        let mut object_13 = object.key("IncludeMap").start_object();
        for (key_14, value_15) in var_12 {
            {
                let mut array_16 = object_13.key(key_14.as_str()).start_array();
                for item_17 in value_15 {
                    {
                        array_16.value().string(item_17.as_str());
                    }
                }
                array_16.finish();
            }
        }
        object_13.finish();
    }
    if let Some(var_18) = &input.exclude_map {
        #[allow(unused_mut)]
        let mut object_19 = object.key("ExcludeMap").start_object();
        for (key_20, value_21) in var_18 {
            {
                let mut array_22 = object_19.key(key_20.as_str()).start_array();
                for item_23 in value_21 {
                    {
                        array_22.value().string(item_23.as_str());
                    }
                }
                array_22.finish();
            }
        }
        object_19.finish();
    }
    if let Some(var_24) = &input.resource_set_ids {
        let mut array_25 = object.key("ResourceSetIds").start_array();
        for item_26 in var_24 {
            {
                array_25.value().string(item_26.as_str());
            }
        }
        array_25.finish();
    }
    if let Some(var_27) = &input.policy_description {
        object.key("PolicyDescription").string(var_27.as_str());
    }
    if let Some(var_28) = &input.policy_status {
        object.key("PolicyStatus").string(var_28.as_str());
    }
    Ok(())
}
