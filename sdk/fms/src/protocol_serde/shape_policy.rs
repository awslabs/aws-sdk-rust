// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_policy<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::Policy>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PolicyBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "PolicyId" => {
                                builder = builder.set_policy_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PolicyName" => {
                                builder = builder.set_policy_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "PolicyUpdateToken" => {
                                builder = builder.set_policy_update_token(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "SecurityServicePolicyData" => {
                                builder = builder.set_security_service_policy_data(
                                    crate::protocol_serde::shape_security_service_policy_data::de_security_service_policy_data(tokens)?
                                );
                            }
                            "ResourceType" => {
                                builder = builder.set_resource_type(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ResourceTypeList" => {
                                builder = builder.set_resource_type_list(
                                    crate::protocol_serde::shape_resource_type_list::de_resource_type_list(tokens)?
                                );
                            }
                            "ResourceTags" => {
                                builder = builder.set_resource_tags(
                                    crate::protocol_serde::shape_resource_tags::de_resource_tags(
                                        tokens,
                                    )?,
                                );
                            }
                            "ExcludeResourceTags" => {
                                builder = builder.set_exclude_resource_tags(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "RemediationEnabled" => {
                                builder = builder.set_remediation_enabled(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "DeleteUnusedFMManagedResources" => {
                                builder = builder.set_delete_unused_fm_managed_resources(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "IncludeMap" => {
                                builder = builder.set_include_map(
                                    crate::protocol_serde::shape_customer_policy_scope_map::de_customer_policy_scope_map(tokens)?
                                );
                            }
                            "ExcludeMap" => {
                                builder = builder.set_exclude_map(
                                    crate::protocol_serde::shape_customer_policy_scope_map::de_customer_policy_scope_map(tokens)?
                                );
                            }
                            "ResourceSetIds" => {
                                builder = builder.set_resource_set_ids(
                                    crate::protocol_serde::shape_resource_set_ids::de_resource_set_ids(tokens)?
                                );
                            }
                            "PolicyDescription" => {
                                builder = builder.set_policy_description(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}

pub fn ser_policy(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::Policy,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.policy_id {
        object.key("PolicyId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.policy_name {
        object.key("PolicyName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.policy_update_token {
        object.key("PolicyUpdateToken").string(var_3.as_str());
    }
    if let Some(var_4) = &input.security_service_policy_data {
        #[allow(unused_mut)]
        let mut object_5 = object.key("SecurityServicePolicyData").start_object();
        crate::protocol_serde::shape_security_service_policy_data::ser_security_service_policy_data(&mut object_5, var_4)?;
        object_5.finish();
    }
    if let Some(var_6) = &input.resource_type {
        object.key("ResourceType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.resource_type_list {
        let mut array_8 = object.key("ResourceTypeList").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.resource_tags {
        let mut array_11 = object.key("ResourceTags").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_resource_tag::ser_resource_tag(
                    &mut object_13,
                    item_12,
                )?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    {
        object
            .key("ExcludeResourceTags")
            .boolean(input.exclude_resource_tags);
    }
    {
        object
            .key("RemediationEnabled")
            .boolean(input.remediation_enabled);
    }
    if input.delete_unused_fm_managed_resources {
        object
            .key("DeleteUnusedFMManagedResources")
            .boolean(input.delete_unused_fm_managed_resources);
    }
    if let Some(var_14) = &input.include_map {
        #[allow(unused_mut)]
        let mut object_15 = object.key("IncludeMap").start_object();
        for (key_16, value_17) in var_14 {
            {
                let mut array_18 = object_15.key(key_16.as_str()).start_array();
                for item_19 in value_17 {
                    {
                        array_18.value().string(item_19.as_str());
                    }
                }
                array_18.finish();
            }
        }
        object_15.finish();
    }
    if let Some(var_20) = &input.exclude_map {
        #[allow(unused_mut)]
        let mut object_21 = object.key("ExcludeMap").start_object();
        for (key_22, value_23) in var_20 {
            {
                let mut array_24 = object_21.key(key_22.as_str()).start_array();
                for item_25 in value_23 {
                    {
                        array_24.value().string(item_25.as_str());
                    }
                }
                array_24.finish();
            }
        }
        object_21.finish();
    }
    if let Some(var_26) = &input.resource_set_ids {
        let mut array_27 = object.key("ResourceSetIds").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28.as_str());
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.policy_description {
        object.key("PolicyDescription").string(var_29.as_str());
    }
    Ok(())
}
