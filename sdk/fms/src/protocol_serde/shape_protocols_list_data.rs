// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_protocols_list_data<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::ProtocolsListData>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::ProtocolsListDataBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "ListId" => {
                            builder = builder.set_list_id(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ListName" => {
                            builder = builder.set_list_name(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "ListUpdateToken" => {
                            builder = builder.set_list_update_token(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "CreateTime" => {
                            builder = builder.set_create_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "LastUpdateTime" => {
                            builder = builder.set_last_update_time(::aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                tokens.next(),
                                ::aws_smithy_types::date_time::Format::EpochSeconds,
                            )?);
                        }
                        "ProtocolsList" => {
                            builder = builder.set_protocols_list(crate::protocol_serde::shape_protocols_list::de_protocols_list(tokens)?);
                        }
                        "PreviousProtocolsList" => {
                            builder = builder.set_previous_protocols_list(
                                crate::protocol_serde::shape_previous_protocols_list::de_previous_protocols_list(tokens)?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(crate::serde_util::protocols_list_data_correct_errors(builder).build().map_err(
                |err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err),
            )?))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}

pub fn ser_protocols_list_data(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::ProtocolsListData,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.list_id {
        object.key("ListId").string(var_1.as_str());
    }
    {
        object.key("ListName").string(input.list_name.as_str());
    }
    if let Some(var_2) = &input.list_update_token {
        object.key("ListUpdateToken").string(var_2.as_str());
    }
    if let Some(var_3) = &input.create_time {
        object
            .key("CreateTime")
            .date_time(var_3, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    if let Some(var_4) = &input.last_update_time {
        object
            .key("LastUpdateTime")
            .date_time(var_4, ::aws_smithy_types::date_time::Format::EpochSeconds)?;
    }
    {
        let mut array_5 = object.key("ProtocolsList").start_array();
        for item_6 in &input.protocols_list {
            {
                array_5.value().string(item_6.as_str());
            }
        }
        array_5.finish();
    }
    if let Some(var_7) = &input.previous_protocols_list {
        #[allow(unused_mut)]
        let mut object_8 = object.key("PreviousProtocolsList").start_object();
        for (key_9, value_10) in var_7 {
            {
                let mut array_11 = object_8.key(key_9.as_str()).start_array();
                for item_12 in value_10 {
                    {
                        array_11.value().string(item_12.as_str());
                    }
                }
                array_11.finish();
            }
        }
        object_8.finish();
    }
    Ok(())
}
