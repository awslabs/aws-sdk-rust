// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_apps_lists_output_next_token(
    input: &crate::operation::list_apps_lists::ListAppsListsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_compliance_status_output_next_token(
    input: &crate::operation::list_compliance_status::ListComplianceStatusOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_member_accounts_output_next_token(
    input: &crate::operation::list_member_accounts::ListMemberAccountsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_policies_output_next_token(
    input: &crate::operation::list_policies::ListPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_protocols_lists_output_next_token(
    input: &crate::operation::list_protocols_lists::ListProtocolsListsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_list_third_party_firewall_firewall_policies_output_next_token(
    input: &crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_apps_lists_output_apps_lists(
    input: crate::operation::list_apps_lists::ListAppsListsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::AppsListDataSummary>> {
    let input = match input.apps_lists {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_compliance_status_output_policy_compliance_status_list(
    input: crate::operation::list_compliance_status::ListComplianceStatusOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PolicyComplianceStatus>> {
    let input = match input.policy_compliance_status_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_member_accounts_output_member_accounts(
    input: crate::operation::list_member_accounts::ListMemberAccountsOutput,
) -> std::option::Option<std::vec::Vec<std::string::String>> {
    let input = match input.member_accounts {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_policies_output_policy_list(
    input: crate::operation::list_policies::ListPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::PolicySummary>> {
    let input = match input.policy_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_protocols_lists_output_protocols_lists(
    input: crate::operation::list_protocols_lists::ListProtocolsListsOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ProtocolsListDataSummary>> {
    let input = match input.protocols_lists {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_list_third_party_firewall_firewall_policies_output_third_party_firewall_firewall_policies(
    input: crate::operation::list_third_party_firewall_firewall_policies::ListThirdPartyFirewallFirewallPoliciesOutput,
) -> std::option::Option<std::vec::Vec<crate::types::ThirdPartyFirewallFirewallPolicy>> {
    let input = match input.third_party_firewall_firewall_policies {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
