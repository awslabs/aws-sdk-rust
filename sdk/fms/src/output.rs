// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UntagResourceOutput {}
impl std::fmt::Debug for UntagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UntagResourceOutput");
        formatter.finish()
    }
}
/// See [`UntagResourceOutput`](crate::output::UntagResourceOutput)
pub mod untag_resource_output {
    /// A builder for [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UntagResourceOutput`](crate::output::UntagResourceOutput)
        pub fn build(self) -> crate::output::UntagResourceOutput {
            crate::output::UntagResourceOutput {}
        }
    }
}
impl UntagResourceOutput {
    /// Creates a new builder-style object to manufacture [`UntagResourceOutput`](crate::output::UntagResourceOutput)
    pub fn builder() -> crate::output::untag_resource_output::Builder {
        crate::output::untag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TagResourceOutput {}
impl std::fmt::Debug for TagResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TagResourceOutput");
        formatter.finish()
    }
}
/// See [`TagResourceOutput`](crate::output::TagResourceOutput)
pub mod tag_resource_output {
    /// A builder for [`TagResourceOutput`](crate::output::TagResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TagResourceOutput`](crate::output::TagResourceOutput)
        pub fn build(self) -> crate::output::TagResourceOutput {
            crate::output::TagResourceOutput {}
        }
    }
}
impl TagResourceOutput {
    /// Creates a new builder-style object to manufacture [`TagResourceOutput`](crate::output::TagResourceOutput)
    pub fn builder() -> crate::output::tag_resource_output::Builder {
        crate::output::tag_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutProtocolsListOutput {
    /// <p>The details of the Firewall Manager protocols list.</p>
    pub protocols_list: std::option::Option<crate::model::ProtocolsListData>,
    /// <p>The Amazon Resource Name (ARN) of the protocols list.</p>
    pub protocols_list_arn: std::option::Option<std::string::String>,
}
impl PutProtocolsListOutput {
    /// <p>The details of the Firewall Manager protocols list.</p>
    pub fn protocols_list(&self) -> std::option::Option<&crate::model::ProtocolsListData> {
        self.protocols_list.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the protocols list.</p>
    pub fn protocols_list_arn(&self) -> std::option::Option<&str> {
        self.protocols_list_arn.as_deref()
    }
}
impl std::fmt::Debug for PutProtocolsListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutProtocolsListOutput");
        formatter.field("protocols_list", &self.protocols_list);
        formatter.field("protocols_list_arn", &self.protocols_list_arn);
        formatter.finish()
    }
}
/// See [`PutProtocolsListOutput`](crate::output::PutProtocolsListOutput)
pub mod put_protocols_list_output {
    /// A builder for [`PutProtocolsListOutput`](crate::output::PutProtocolsListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protocols_list: std::option::Option<crate::model::ProtocolsListData>,
        pub(crate) protocols_list_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The details of the Firewall Manager protocols list.</p>
        pub fn protocols_list(mut self, input: crate::model::ProtocolsListData) -> Self {
            self.protocols_list = Some(input);
            self
        }
        /// <p>The details of the Firewall Manager protocols list.</p>
        pub fn set_protocols_list(
            mut self,
            input: std::option::Option<crate::model::ProtocolsListData>,
        ) -> Self {
            self.protocols_list = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the protocols list.</p>
        pub fn protocols_list_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.protocols_list_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the protocols list.</p>
        pub fn set_protocols_list_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.protocols_list_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`PutProtocolsListOutput`](crate::output::PutProtocolsListOutput)
        pub fn build(self) -> crate::output::PutProtocolsListOutput {
            crate::output::PutProtocolsListOutput {
                protocols_list: self.protocols_list,
                protocols_list_arn: self.protocols_list_arn,
            }
        }
    }
}
impl PutProtocolsListOutput {
    /// Creates a new builder-style object to manufacture [`PutProtocolsListOutput`](crate::output::PutProtocolsListOutput)
    pub fn builder() -> crate::output::put_protocols_list_output::Builder {
        crate::output::put_protocols_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutPolicyOutput {
    /// <p>The details of the Firewall Manager policy.</p>
    pub policy: std::option::Option<crate::model::Policy>,
    /// <p>The Amazon Resource Name (ARN) of the policy.</p>
    pub policy_arn: std::option::Option<std::string::String>,
}
impl PutPolicyOutput {
    /// <p>The details of the Firewall Manager policy.</p>
    pub fn policy(&self) -> std::option::Option<&crate::model::Policy> {
        self.policy.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the policy.</p>
    pub fn policy_arn(&self) -> std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
}
impl std::fmt::Debug for PutPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutPolicyOutput");
        formatter.field("policy", &self.policy);
        formatter.field("policy_arn", &self.policy_arn);
        formatter.finish()
    }
}
/// See [`PutPolicyOutput`](crate::output::PutPolicyOutput)
pub mod put_policy_output {
    /// A builder for [`PutPolicyOutput`](crate::output::PutPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy: std::option::Option<crate::model::Policy>,
        pub(crate) policy_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The details of the Firewall Manager policy.</p>
        pub fn policy(mut self, input: crate::model::Policy) -> Self {
            self.policy = Some(input);
            self
        }
        /// <p>The details of the Firewall Manager policy.</p>
        pub fn set_policy(mut self, input: std::option::Option<crate::model::Policy>) -> Self {
            self.policy = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the policy.</p>
        pub fn policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the policy.</p>
        pub fn set_policy_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.policy_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`PutPolicyOutput`](crate::output::PutPolicyOutput)
        pub fn build(self) -> crate::output::PutPolicyOutput {
            crate::output::PutPolicyOutput {
                policy: self.policy,
                policy_arn: self.policy_arn,
            }
        }
    }
}
impl PutPolicyOutput {
    /// Creates a new builder-style object to manufacture [`PutPolicyOutput`](crate::output::PutPolicyOutput)
    pub fn builder() -> crate::output::put_policy_output::Builder {
        crate::output::put_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutNotificationChannelOutput {}
impl std::fmt::Debug for PutNotificationChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutNotificationChannelOutput");
        formatter.finish()
    }
}
/// See [`PutNotificationChannelOutput`](crate::output::PutNotificationChannelOutput)
pub mod put_notification_channel_output {
    /// A builder for [`PutNotificationChannelOutput`](crate::output::PutNotificationChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PutNotificationChannelOutput`](crate::output::PutNotificationChannelOutput)
        pub fn build(self) -> crate::output::PutNotificationChannelOutput {
            crate::output::PutNotificationChannelOutput {}
        }
    }
}
impl PutNotificationChannelOutput {
    /// Creates a new builder-style object to manufacture [`PutNotificationChannelOutput`](crate::output::PutNotificationChannelOutput)
    pub fn builder() -> crate::output::put_notification_channel_output::Builder {
        crate::output::put_notification_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PutAppsListOutput {
    /// <p>The details of the Firewall Manager applications list.</p>
    pub apps_list: std::option::Option<crate::model::AppsListData>,
    /// <p>The Amazon Resource Name (ARN) of the applications list.</p>
    pub apps_list_arn: std::option::Option<std::string::String>,
}
impl PutAppsListOutput {
    /// <p>The details of the Firewall Manager applications list.</p>
    pub fn apps_list(&self) -> std::option::Option<&crate::model::AppsListData> {
        self.apps_list.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the applications list.</p>
    pub fn apps_list_arn(&self) -> std::option::Option<&str> {
        self.apps_list_arn.as_deref()
    }
}
impl std::fmt::Debug for PutAppsListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PutAppsListOutput");
        formatter.field("apps_list", &self.apps_list);
        formatter.field("apps_list_arn", &self.apps_list_arn);
        formatter.finish()
    }
}
/// See [`PutAppsListOutput`](crate::output::PutAppsListOutput)
pub mod put_apps_list_output {
    /// A builder for [`PutAppsListOutput`](crate::output::PutAppsListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apps_list: std::option::Option<crate::model::AppsListData>,
        pub(crate) apps_list_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The details of the Firewall Manager applications list.</p>
        pub fn apps_list(mut self, input: crate::model::AppsListData) -> Self {
            self.apps_list = Some(input);
            self
        }
        /// <p>The details of the Firewall Manager applications list.</p>
        pub fn set_apps_list(
            mut self,
            input: std::option::Option<crate::model::AppsListData>,
        ) -> Self {
            self.apps_list = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the applications list.</p>
        pub fn apps_list_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.apps_list_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the applications list.</p>
        pub fn set_apps_list_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.apps_list_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`PutAppsListOutput`](crate::output::PutAppsListOutput)
        pub fn build(self) -> crate::output::PutAppsListOutput {
            crate::output::PutAppsListOutput {
                apps_list: self.apps_list,
                apps_list_arn: self.apps_list_arn,
            }
        }
    }
}
impl PutAppsListOutput {
    /// Creates a new builder-style object to manufacture [`PutAppsListOutput`](crate::output::PutAppsListOutput)
    pub fn builder() -> crate::output::put_apps_list_output::Builder {
        crate::output::put_apps_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListThirdPartyFirewallFirewallPoliciesOutput {
    /// <p>A list that contains one <code>ThirdPartyFirewallFirewallPolicies</code> element for each third-party firewall policies that the specified third-party firewall vendor is associated with. Each <code>ThirdPartyFirewallFirewallPolicies</code> element contains the firewall policy name and ID.</p>
    pub third_party_firewall_firewall_policies:
        std::option::Option<std::vec::Vec<crate::model::ThirdPartyFirewallFirewallPolicy>>,
    /// <p>The value that you will use for <code>NextToken</code> in the next <code>ListThirdPartyFirewallFirewallPolicies</code> request.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListThirdPartyFirewallFirewallPoliciesOutput {
    /// <p>A list that contains one <code>ThirdPartyFirewallFirewallPolicies</code> element for each third-party firewall policies that the specified third-party firewall vendor is associated with. Each <code>ThirdPartyFirewallFirewallPolicies</code> element contains the firewall policy name and ID.</p>
    pub fn third_party_firewall_firewall_policies(
        &self,
    ) -> std::option::Option<&[crate::model::ThirdPartyFirewallFirewallPolicy]> {
        self.third_party_firewall_firewall_policies.as_deref()
    }
    /// <p>The value that you will use for <code>NextToken</code> in the next <code>ListThirdPartyFirewallFirewallPolicies</code> request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListThirdPartyFirewallFirewallPoliciesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListThirdPartyFirewallFirewallPoliciesOutput");
        formatter.field(
            "third_party_firewall_firewall_policies",
            &self.third_party_firewall_firewall_policies,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListThirdPartyFirewallFirewallPoliciesOutput`](crate::output::ListThirdPartyFirewallFirewallPoliciesOutput)
pub mod list_third_party_firewall_firewall_policies_output {
    /// A builder for [`ListThirdPartyFirewallFirewallPoliciesOutput`](crate::output::ListThirdPartyFirewallFirewallPoliciesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) third_party_firewall_firewall_policies:
            std::option::Option<std::vec::Vec<crate::model::ThirdPartyFirewallFirewallPolicy>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `third_party_firewall_firewall_policies`.
        ///
        /// To override the contents of this collection use [`set_third_party_firewall_firewall_policies`](Self::set_third_party_firewall_firewall_policies).
        ///
        /// <p>A list that contains one <code>ThirdPartyFirewallFirewallPolicies</code> element for each third-party firewall policies that the specified third-party firewall vendor is associated with. Each <code>ThirdPartyFirewallFirewallPolicies</code> element contains the firewall policy name and ID.</p>
        pub fn third_party_firewall_firewall_policies(
            mut self,
            input: crate::model::ThirdPartyFirewallFirewallPolicy,
        ) -> Self {
            let mut v = self
                .third_party_firewall_firewall_policies
                .unwrap_or_default();
            v.push(input);
            self.third_party_firewall_firewall_policies = Some(v);
            self
        }
        /// <p>A list that contains one <code>ThirdPartyFirewallFirewallPolicies</code> element for each third-party firewall policies that the specified third-party firewall vendor is associated with. Each <code>ThirdPartyFirewallFirewallPolicies</code> element contains the firewall policy name and ID.</p>
        pub fn set_third_party_firewall_firewall_policies(
            mut self,
            input: std::option::Option<
                std::vec::Vec<crate::model::ThirdPartyFirewallFirewallPolicy>,
            >,
        ) -> Self {
            self.third_party_firewall_firewall_policies = input;
            self
        }
        /// <p>The value that you will use for <code>NextToken</code> in the next <code>ListThirdPartyFirewallFirewallPolicies</code> request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>The value that you will use for <code>NextToken</code> in the next <code>ListThirdPartyFirewallFirewallPolicies</code> request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListThirdPartyFirewallFirewallPoliciesOutput`](crate::output::ListThirdPartyFirewallFirewallPoliciesOutput)
        pub fn build(self) -> crate::output::ListThirdPartyFirewallFirewallPoliciesOutput {
            crate::output::ListThirdPartyFirewallFirewallPoliciesOutput {
                third_party_firewall_firewall_policies: self.third_party_firewall_firewall_policies,
                next_token: self.next_token,
            }
        }
    }
}
impl ListThirdPartyFirewallFirewallPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListThirdPartyFirewallFirewallPoliciesOutput`](crate::output::ListThirdPartyFirewallFirewallPoliciesOutput)
    pub fn builder() -> crate::output::list_third_party_firewall_firewall_policies_output::Builder {
        crate::output::list_third_party_firewall_firewall_policies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListTagsForResourceOutput {
    /// <p>The tags associated with the resource.</p>
    pub tag_list: std::option::Option<std::vec::Vec<crate::model::Tag>>,
}
impl ListTagsForResourceOutput {
    /// <p>The tags associated with the resource.</p>
    pub fn tag_list(&self) -> std::option::Option<&[crate::model::Tag]> {
        self.tag_list.as_deref()
    }
}
impl std::fmt::Debug for ListTagsForResourceOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListTagsForResourceOutput");
        formatter.field("tag_list", &self.tag_list);
        formatter.finish()
    }
}
/// See [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
pub mod list_tags_for_resource_output {
    /// A builder for [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) tag_list: std::option::Option<std::vec::Vec<crate::model::Tag>>,
    }
    impl Builder {
        /// Appends an item to `tag_list`.
        ///
        /// To override the contents of this collection use [`set_tag_list`](Self::set_tag_list).
        ///
        /// <p>The tags associated with the resource.</p>
        pub fn tag_list(mut self, input: crate::model::Tag) -> Self {
            let mut v = self.tag_list.unwrap_or_default();
            v.push(input);
            self.tag_list = Some(v);
            self
        }
        /// <p>The tags associated with the resource.</p>
        pub fn set_tag_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::Tag>>,
        ) -> Self {
            self.tag_list = input;
            self
        }
        /// Consumes the builder and constructs a [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
        pub fn build(self) -> crate::output::ListTagsForResourceOutput {
            crate::output::ListTagsForResourceOutput {
                tag_list: self.tag_list,
            }
        }
    }
}
impl ListTagsForResourceOutput {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput)
    pub fn builder() -> crate::output::list_tags_for_resource_output::Builder {
        crate::output::list_tags_for_resource_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListProtocolsListsOutput {
    /// <p>An array of <code>ProtocolsListDataSummary</code> objects.</p>
    pub protocols_lists: std::option::Option<std::vec::Vec<crate::model::ProtocolsListDataSummary>>,
    /// <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListProtocolsListsOutput {
    /// <p>An array of <code>ProtocolsListDataSummary</code> objects.</p>
    pub fn protocols_lists(
        &self,
    ) -> std::option::Option<&[crate::model::ProtocolsListDataSummary]> {
        self.protocols_lists.as_deref()
    }
    /// <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListProtocolsListsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListProtocolsListsOutput");
        formatter.field("protocols_lists", &self.protocols_lists);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListProtocolsListsOutput`](crate::output::ListProtocolsListsOutput)
pub mod list_protocols_lists_output {
    /// A builder for [`ListProtocolsListsOutput`](crate::output::ListProtocolsListsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protocols_lists:
            std::option::Option<std::vec::Vec<crate::model::ProtocolsListDataSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `protocols_lists`.
        ///
        /// To override the contents of this collection use [`set_protocols_lists`](Self::set_protocols_lists).
        ///
        /// <p>An array of <code>ProtocolsListDataSummary</code> objects.</p>
        pub fn protocols_lists(mut self, input: crate::model::ProtocolsListDataSummary) -> Self {
            let mut v = self.protocols_lists.unwrap_or_default();
            v.push(input);
            self.protocols_lists = Some(v);
            self
        }
        /// <p>An array of <code>ProtocolsListDataSummary</code> objects.</p>
        pub fn set_protocols_lists(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ProtocolsListDataSummary>>,
        ) -> Self {
            self.protocols_lists = input;
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListProtocolsListsOutput`](crate::output::ListProtocolsListsOutput)
        pub fn build(self) -> crate::output::ListProtocolsListsOutput {
            crate::output::ListProtocolsListsOutput {
                protocols_lists: self.protocols_lists,
                next_token: self.next_token,
            }
        }
    }
}
impl ListProtocolsListsOutput {
    /// Creates a new builder-style object to manufacture [`ListProtocolsListsOutput`](crate::output::ListProtocolsListsOutput)
    pub fn builder() -> crate::output::list_protocols_lists_output::Builder {
        crate::output::list_protocols_lists_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListPoliciesOutput {
    /// <p>An array of <code>PolicySummary</code> objects.</p>
    pub policy_list: std::option::Option<std::vec::Vec<crate::model::PolicySummary>>,
    /// <p>If you have more <code>PolicySummary</code> objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more <code>PolicySummary</code> objects, submit another <code>ListPolicies</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListPoliciesOutput {
    /// <p>An array of <code>PolicySummary</code> objects.</p>
    pub fn policy_list(&self) -> std::option::Option<&[crate::model::PolicySummary]> {
        self.policy_list.as_deref()
    }
    /// <p>If you have more <code>PolicySummary</code> objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more <code>PolicySummary</code> objects, submit another <code>ListPolicies</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListPoliciesOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListPoliciesOutput");
        formatter.field("policy_list", &self.policy_list);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListPoliciesOutput`](crate::output::ListPoliciesOutput)
pub mod list_policies_output {
    /// A builder for [`ListPoliciesOutput`](crate::output::ListPoliciesOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_list: std::option::Option<std::vec::Vec<crate::model::PolicySummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `policy_list`.
        ///
        /// To override the contents of this collection use [`set_policy_list`](Self::set_policy_list).
        ///
        /// <p>An array of <code>PolicySummary</code> objects.</p>
        pub fn policy_list(mut self, input: crate::model::PolicySummary) -> Self {
            let mut v = self.policy_list.unwrap_or_default();
            v.push(input);
            self.policy_list = Some(v);
            self
        }
        /// <p>An array of <code>PolicySummary</code> objects.</p>
        pub fn set_policy_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PolicySummary>>,
        ) -> Self {
            self.policy_list = input;
            self
        }
        /// <p>If you have more <code>PolicySummary</code> objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more <code>PolicySummary</code> objects, submit another <code>ListPolicies</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you have more <code>PolicySummary</code> objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more <code>PolicySummary</code> objects, submit another <code>ListPolicies</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListPoliciesOutput`](crate::output::ListPoliciesOutput)
        pub fn build(self) -> crate::output::ListPoliciesOutput {
            crate::output::ListPoliciesOutput {
                policy_list: self.policy_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListPoliciesOutput {
    /// Creates a new builder-style object to manufacture [`ListPoliciesOutput`](crate::output::ListPoliciesOutput)
    pub fn builder() -> crate::output::list_policies_output::Builder {
        crate::output::list_policies_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListMemberAccountsOutput {
    /// <p>An array of account IDs.</p>
    pub member_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>If you have more member account IDs than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more IDs, submit another <code>ListMemberAccounts</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListMemberAccountsOutput {
    /// <p>An array of account IDs.</p>
    pub fn member_accounts(&self) -> std::option::Option<&[std::string::String]> {
        self.member_accounts.as_deref()
    }
    /// <p>If you have more member account IDs than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more IDs, submit another <code>ListMemberAccounts</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListMemberAccountsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListMemberAccountsOutput");
        formatter.field("member_accounts", &self.member_accounts);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListMemberAccountsOutput`](crate::output::ListMemberAccountsOutput)
pub mod list_member_accounts_output {
    /// A builder for [`ListMemberAccountsOutput`](crate::output::ListMemberAccountsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) member_accounts: std::option::Option<std::vec::Vec<std::string::String>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `member_accounts`.
        ///
        /// To override the contents of this collection use [`set_member_accounts`](Self::set_member_accounts).
        ///
        /// <p>An array of account IDs.</p>
        pub fn member_accounts(mut self, input: impl Into<std::string::String>) -> Self {
            let mut v = self.member_accounts.unwrap_or_default();
            v.push(input.into());
            self.member_accounts = Some(v);
            self
        }
        /// <p>An array of account IDs.</p>
        pub fn set_member_accounts(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.member_accounts = input;
            self
        }
        /// <p>If you have more member account IDs than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more IDs, submit another <code>ListMemberAccounts</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you have more member account IDs than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more IDs, submit another <code>ListMemberAccounts</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListMemberAccountsOutput`](crate::output::ListMemberAccountsOutput)
        pub fn build(self) -> crate::output::ListMemberAccountsOutput {
            crate::output::ListMemberAccountsOutput {
                member_accounts: self.member_accounts,
                next_token: self.next_token,
            }
        }
    }
}
impl ListMemberAccountsOutput {
    /// Creates a new builder-style object to manufacture [`ListMemberAccountsOutput`](crate::output::ListMemberAccountsOutput)
    pub fn builder() -> crate::output::list_member_accounts_output::Builder {
        crate::output::list_member_accounts_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListComplianceStatusOutput {
    /// <p>An array of <code>PolicyComplianceStatus</code> objects.</p>
    pub policy_compliance_status_list:
        std::option::Option<std::vec::Vec<crate::model::PolicyComplianceStatus>>,
    /// <p>If you have more <code>PolicyComplianceStatus</code> objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more <code>PolicyComplianceStatus</code> objects, submit another <code>ListComplianceStatus</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListComplianceStatusOutput {
    /// <p>An array of <code>PolicyComplianceStatus</code> objects.</p>
    pub fn policy_compliance_status_list(
        &self,
    ) -> std::option::Option<&[crate::model::PolicyComplianceStatus]> {
        self.policy_compliance_status_list.as_deref()
    }
    /// <p>If you have more <code>PolicyComplianceStatus</code> objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more <code>PolicyComplianceStatus</code> objects, submit another <code>ListComplianceStatus</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListComplianceStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListComplianceStatusOutput");
        formatter.field(
            "policy_compliance_status_list",
            &self.policy_compliance_status_list,
        );
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListComplianceStatusOutput`](crate::output::ListComplianceStatusOutput)
pub mod list_compliance_status_output {
    /// A builder for [`ListComplianceStatusOutput`](crate::output::ListComplianceStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_compliance_status_list:
            std::option::Option<std::vec::Vec<crate::model::PolicyComplianceStatus>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `policy_compliance_status_list`.
        ///
        /// To override the contents of this collection use [`set_policy_compliance_status_list`](Self::set_policy_compliance_status_list).
        ///
        /// <p>An array of <code>PolicyComplianceStatus</code> objects.</p>
        pub fn policy_compliance_status_list(
            mut self,
            input: crate::model::PolicyComplianceStatus,
        ) -> Self {
            let mut v = self.policy_compliance_status_list.unwrap_or_default();
            v.push(input);
            self.policy_compliance_status_list = Some(v);
            self
        }
        /// <p>An array of <code>PolicyComplianceStatus</code> objects.</p>
        pub fn set_policy_compliance_status_list(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::PolicyComplianceStatus>>,
        ) -> Self {
            self.policy_compliance_status_list = input;
            self
        }
        /// <p>If you have more <code>PolicyComplianceStatus</code> objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more <code>PolicyComplianceStatus</code> objects, submit another <code>ListComplianceStatus</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you have more <code>PolicyComplianceStatus</code> objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more <code>PolicyComplianceStatus</code> objects, submit another <code>ListComplianceStatus</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListComplianceStatusOutput`](crate::output::ListComplianceStatusOutput)
        pub fn build(self) -> crate::output::ListComplianceStatusOutput {
            crate::output::ListComplianceStatusOutput {
                policy_compliance_status_list: self.policy_compliance_status_list,
                next_token: self.next_token,
            }
        }
    }
}
impl ListComplianceStatusOutput {
    /// Creates a new builder-style object to manufacture [`ListComplianceStatusOutput`](crate::output::ListComplianceStatusOutput)
    pub fn builder() -> crate::output::list_compliance_status_output::Builder {
        crate::output::list_compliance_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListAppsListsOutput {
    /// <p>An array of <code>AppsListDataSummary</code> objects.</p>
    pub apps_lists: std::option::Option<std::vec::Vec<crate::model::AppsListDataSummary>>,
    /// <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
    pub next_token: std::option::Option<std::string::String>,
}
impl ListAppsListsOutput {
    /// <p>An array of <code>AppsListDataSummary</code> objects.</p>
    pub fn apps_lists(&self) -> std::option::Option<&[crate::model::AppsListDataSummary]> {
        self.apps_lists.as_deref()
    }
    /// <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for ListAppsListsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ListAppsListsOutput");
        formatter.field("apps_lists", &self.apps_lists);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`ListAppsListsOutput`](crate::output::ListAppsListsOutput)
pub mod list_apps_lists_output {
    /// A builder for [`ListAppsListsOutput`](crate::output::ListAppsListsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apps_lists:
            std::option::Option<std::vec::Vec<crate::model::AppsListDataSummary>>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// Appends an item to `apps_lists`.
        ///
        /// To override the contents of this collection use [`set_apps_lists`](Self::set_apps_lists).
        ///
        /// <p>An array of <code>AppsListDataSummary</code> objects.</p>
        pub fn apps_lists(mut self, input: crate::model::AppsListDataSummary) -> Self {
            let mut v = self.apps_lists.unwrap_or_default();
            v.push(input);
            self.apps_lists = Some(v);
            self
        }
        /// <p>An array of <code>AppsListDataSummary</code> objects.</p>
        pub fn set_apps_lists(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AppsListDataSummary>>,
        ) -> Self {
            self.apps_lists = input;
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you specify a value for <code>MaxResults</code> in your list request, and you have more objects than the maximum, Firewall Manager returns this token in the response. You can use this token in subsequent requests to retrieve the next batch of objects.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`ListAppsListsOutput`](crate::output::ListAppsListsOutput)
        pub fn build(self) -> crate::output::ListAppsListsOutput {
            crate::output::ListAppsListsOutput {
                apps_lists: self.apps_lists,
                next_token: self.next_token,
            }
        }
    }
}
impl ListAppsListsOutput {
    /// Creates a new builder-style object to manufacture [`ListAppsListsOutput`](crate::output::ListAppsListsOutput)
    pub fn builder() -> crate::output::list_apps_lists_output::Builder {
        crate::output::list_apps_lists_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetViolationDetailsOutput {
    /// <p>Violation detail for a resource.</p>
    pub violation_detail: std::option::Option<crate::model::ViolationDetail>,
}
impl GetViolationDetailsOutput {
    /// <p>Violation detail for a resource.</p>
    pub fn violation_detail(&self) -> std::option::Option<&crate::model::ViolationDetail> {
        self.violation_detail.as_ref()
    }
}
impl std::fmt::Debug for GetViolationDetailsOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetViolationDetailsOutput");
        formatter.field("violation_detail", &self.violation_detail);
        formatter.finish()
    }
}
/// See [`GetViolationDetailsOutput`](crate::output::GetViolationDetailsOutput)
pub mod get_violation_details_output {
    /// A builder for [`GetViolationDetailsOutput`](crate::output::GetViolationDetailsOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) violation_detail: std::option::Option<crate::model::ViolationDetail>,
    }
    impl Builder {
        /// <p>Violation detail for a resource.</p>
        pub fn violation_detail(mut self, input: crate::model::ViolationDetail) -> Self {
            self.violation_detail = Some(input);
            self
        }
        /// <p>Violation detail for a resource.</p>
        pub fn set_violation_detail(
            mut self,
            input: std::option::Option<crate::model::ViolationDetail>,
        ) -> Self {
            self.violation_detail = input;
            self
        }
        /// Consumes the builder and constructs a [`GetViolationDetailsOutput`](crate::output::GetViolationDetailsOutput)
        pub fn build(self) -> crate::output::GetViolationDetailsOutput {
            crate::output::GetViolationDetailsOutput {
                violation_detail: self.violation_detail,
            }
        }
    }
}
impl GetViolationDetailsOutput {
    /// Creates a new builder-style object to manufacture [`GetViolationDetailsOutput`](crate::output::GetViolationDetailsOutput)
    pub fn builder() -> crate::output::get_violation_details_output::Builder {
        crate::output::get_violation_details_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetThirdPartyFirewallAssociationStatusOutput {
    /// <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
    /// </ul>
    pub third_party_firewall_status:
        std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
    /// <p>The status for subscribing to the third-party firewall vendor in the AWS Marketplace.</p>
    /// <ul>
    /// <li> <p> <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the AWS Marketplace.</p> </li>
    /// <li> <p> <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p> </li>
    /// <li> <p> <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// </ul>
    pub marketplace_onboarding_status:
        std::option::Option<crate::model::MarketplaceSubscriptionOnboardingStatus>,
}
impl GetThirdPartyFirewallAssociationStatusOutput {
    /// <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
    /// </ul>
    pub fn third_party_firewall_status(
        &self,
    ) -> std::option::Option<&crate::model::ThirdPartyFirewallAssociationStatus> {
        self.third_party_firewall_status.as_ref()
    }
    /// <p>The status for subscribing to the third-party firewall vendor in the AWS Marketplace.</p>
    /// <ul>
    /// <li> <p> <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the AWS Marketplace.</p> </li>
    /// <li> <p> <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p> </li>
    /// <li> <p> <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
    /// </ul>
    pub fn marketplace_onboarding_status(
        &self,
    ) -> std::option::Option<&crate::model::MarketplaceSubscriptionOnboardingStatus> {
        self.marketplace_onboarding_status.as_ref()
    }
}
impl std::fmt::Debug for GetThirdPartyFirewallAssociationStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetThirdPartyFirewallAssociationStatusOutput");
        formatter.field(
            "third_party_firewall_status",
            &self.third_party_firewall_status,
        );
        formatter.field(
            "marketplace_onboarding_status",
            &self.marketplace_onboarding_status,
        );
        formatter.finish()
    }
}
/// See [`GetThirdPartyFirewallAssociationStatusOutput`](crate::output::GetThirdPartyFirewallAssociationStatusOutput)
pub mod get_third_party_firewall_association_status_output {
    /// A builder for [`GetThirdPartyFirewallAssociationStatusOutput`](crate::output::GetThirdPartyFirewallAssociationStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) third_party_firewall_status:
            std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
        pub(crate) marketplace_onboarding_status:
            std::option::Option<crate::model::MarketplaceSubscriptionOnboardingStatus>,
    }
    impl Builder {
        /// <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
        /// <ul>
        /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
        /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
        /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
        /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
        /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
        /// </ul>
        pub fn third_party_firewall_status(
            mut self,
            input: crate::model::ThirdPartyFirewallAssociationStatus,
        ) -> Self {
            self.third_party_firewall_status = Some(input);
            self
        }
        /// <p>The current status for setting a Firewall Manager policy administrators account as an administrator of the third-party firewall tenant.</p>
        /// <ul>
        /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
        /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
        /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
        /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
        /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
        /// </ul>
        pub fn set_third_party_firewall_status(
            mut self,
            input: std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
        ) -> Self {
            self.third_party_firewall_status = input;
            self
        }
        /// <p>The status for subscribing to the third-party firewall vendor in the AWS Marketplace.</p>
        /// <ul>
        /// <li> <p> <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the AWS Marketplace.</p> </li>
        /// <li> <p> <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p> </li>
        /// <li> <p> <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
        /// </ul>
        pub fn marketplace_onboarding_status(
            mut self,
            input: crate::model::MarketplaceSubscriptionOnboardingStatus,
        ) -> Self {
            self.marketplace_onboarding_status = Some(input);
            self
        }
        /// <p>The status for subscribing to the third-party firewall vendor in the AWS Marketplace.</p>
        /// <ul>
        /// <li> <p> <code>NO_SUBSCRIPTION</code> - The Firewall Manager policy administrator isn't subscribed to the third-party firewall service in the AWS Marketplace.</p> </li>
        /// <li> <p> <code>NOT_COMPLETE</code> - The Firewall Manager policy administrator is in the process of subscribing to the third-party firewall service in the Amazon Web Services Marketplace, but doesn't yet have an active subscription.</p> </li>
        /// <li> <p> <code>COMPLETE</code> - The Firewall Manager policy administrator has an active subscription to the third-party firewall service in the Amazon Web Services Marketplace.</p> </li>
        /// </ul>
        pub fn set_marketplace_onboarding_status(
            mut self,
            input: std::option::Option<crate::model::MarketplaceSubscriptionOnboardingStatus>,
        ) -> Self {
            self.marketplace_onboarding_status = input;
            self
        }
        /// Consumes the builder and constructs a [`GetThirdPartyFirewallAssociationStatusOutput`](crate::output::GetThirdPartyFirewallAssociationStatusOutput)
        pub fn build(self) -> crate::output::GetThirdPartyFirewallAssociationStatusOutput {
            crate::output::GetThirdPartyFirewallAssociationStatusOutput {
                third_party_firewall_status: self.third_party_firewall_status,
                marketplace_onboarding_status: self.marketplace_onboarding_status,
            }
        }
    }
}
impl GetThirdPartyFirewallAssociationStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetThirdPartyFirewallAssociationStatusOutput`](crate::output::GetThirdPartyFirewallAssociationStatusOutput)
    pub fn builder() -> crate::output::get_third_party_firewall_association_status_output::Builder {
        crate::output::get_third_party_firewall_association_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetProtocolsListOutput {
    /// <p>Information about the specified Firewall Manager protocols list.</p>
    pub protocols_list: std::option::Option<crate::model::ProtocolsListData>,
    /// <p>The Amazon Resource Name (ARN) of the specified protocols list.</p>
    pub protocols_list_arn: std::option::Option<std::string::String>,
}
impl GetProtocolsListOutput {
    /// <p>Information about the specified Firewall Manager protocols list.</p>
    pub fn protocols_list(&self) -> std::option::Option<&crate::model::ProtocolsListData> {
        self.protocols_list.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the specified protocols list.</p>
    pub fn protocols_list_arn(&self) -> std::option::Option<&str> {
        self.protocols_list_arn.as_deref()
    }
}
impl std::fmt::Debug for GetProtocolsListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetProtocolsListOutput");
        formatter.field("protocols_list", &self.protocols_list);
        formatter.field("protocols_list_arn", &self.protocols_list_arn);
        formatter.finish()
    }
}
/// See [`GetProtocolsListOutput`](crate::output::GetProtocolsListOutput)
pub mod get_protocols_list_output {
    /// A builder for [`GetProtocolsListOutput`](crate::output::GetProtocolsListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) protocols_list: std::option::Option<crate::model::ProtocolsListData>,
        pub(crate) protocols_list_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the specified Firewall Manager protocols list.</p>
        pub fn protocols_list(mut self, input: crate::model::ProtocolsListData) -> Self {
            self.protocols_list = Some(input);
            self
        }
        /// <p>Information about the specified Firewall Manager protocols list.</p>
        pub fn set_protocols_list(
            mut self,
            input: std::option::Option<crate::model::ProtocolsListData>,
        ) -> Self {
            self.protocols_list = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the specified protocols list.</p>
        pub fn protocols_list_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.protocols_list_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the specified protocols list.</p>
        pub fn set_protocols_list_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.protocols_list_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`GetProtocolsListOutput`](crate::output::GetProtocolsListOutput)
        pub fn build(self) -> crate::output::GetProtocolsListOutput {
            crate::output::GetProtocolsListOutput {
                protocols_list: self.protocols_list,
                protocols_list_arn: self.protocols_list_arn,
            }
        }
    }
}
impl GetProtocolsListOutput {
    /// Creates a new builder-style object to manufacture [`GetProtocolsListOutput`](crate::output::GetProtocolsListOutput)
    pub fn builder() -> crate::output::get_protocols_list_output::Builder {
        crate::output::get_protocols_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetProtectionStatusOutput {
    /// <p>The ID of the Firewall Manager administrator account for this policy.</p>
    pub admin_account_id: std::option::Option<std::string::String>,
    /// <p>The service type that is protected by the policy. Currently, this is always <code>SHIELD_ADVANCED</code>.</p>
    pub service_type: std::option::Option<crate::model::SecurityServiceType>,
    /// <p>Details about the attack, including the following:</p>
    /// <ul>
    /// <li> <p>Attack type</p> </li>
    /// <li> <p>Account ID</p> </li>
    /// <li> <p>ARN of the resource attacked</p> </li>
    /// <li> <p>Start time of the attack</p> </li>
    /// <li> <p>End time of the attack (ongoing attacks will not have an end time)</p> </li>
    /// </ul>
    /// <p>The details are in JSON format. </p>
    pub data: std::option::Option<std::string::String>,
    /// <p>If you have more objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more objects, submit another <code>GetProtectionStatus</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
    /// <p>Amazon Web Services SDKs provide auto-pagination that identify <code>NextToken</code> in a response and make subsequent request calls automatically on your behalf. However, this feature is not supported by <code>GetProtectionStatus</code>. You must submit subsequent requests with <code>NextToken</code> using your own processes. </p>
    pub next_token: std::option::Option<std::string::String>,
}
impl GetProtectionStatusOutput {
    /// <p>The ID of the Firewall Manager administrator account for this policy.</p>
    pub fn admin_account_id(&self) -> std::option::Option<&str> {
        self.admin_account_id.as_deref()
    }
    /// <p>The service type that is protected by the policy. Currently, this is always <code>SHIELD_ADVANCED</code>.</p>
    pub fn service_type(&self) -> std::option::Option<&crate::model::SecurityServiceType> {
        self.service_type.as_ref()
    }
    /// <p>Details about the attack, including the following:</p>
    /// <ul>
    /// <li> <p>Attack type</p> </li>
    /// <li> <p>Account ID</p> </li>
    /// <li> <p>ARN of the resource attacked</p> </li>
    /// <li> <p>Start time of the attack</p> </li>
    /// <li> <p>End time of the attack (ongoing attacks will not have an end time)</p> </li>
    /// </ul>
    /// <p>The details are in JSON format. </p>
    pub fn data(&self) -> std::option::Option<&str> {
        self.data.as_deref()
    }
    /// <p>If you have more objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more objects, submit another <code>GetProtectionStatus</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
    /// <p>Amazon Web Services SDKs provide auto-pagination that identify <code>NextToken</code> in a response and make subsequent request calls automatically on your behalf. However, this feature is not supported by <code>GetProtectionStatus</code>. You must submit subsequent requests with <code>NextToken</code> using your own processes. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl std::fmt::Debug for GetProtectionStatusOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetProtectionStatusOutput");
        formatter.field("admin_account_id", &self.admin_account_id);
        formatter.field("service_type", &self.service_type);
        formatter.field("data", &self.data);
        formatter.field("next_token", &self.next_token);
        formatter.finish()
    }
}
/// See [`GetProtectionStatusOutput`](crate::output::GetProtectionStatusOutput)
pub mod get_protection_status_output {
    /// A builder for [`GetProtectionStatusOutput`](crate::output::GetProtectionStatusOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) admin_account_id: std::option::Option<std::string::String>,
        pub(crate) service_type: std::option::Option<crate::model::SecurityServiceType>,
        pub(crate) data: std::option::Option<std::string::String>,
        pub(crate) next_token: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The ID of the Firewall Manager administrator account for this policy.</p>
        pub fn admin_account_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.admin_account_id = Some(input.into());
            self
        }
        /// <p>The ID of the Firewall Manager administrator account for this policy.</p>
        pub fn set_admin_account_id(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.admin_account_id = input;
            self
        }
        /// <p>The service type that is protected by the policy. Currently, this is always <code>SHIELD_ADVANCED</code>.</p>
        pub fn service_type(mut self, input: crate::model::SecurityServiceType) -> Self {
            self.service_type = Some(input);
            self
        }
        /// <p>The service type that is protected by the policy. Currently, this is always <code>SHIELD_ADVANCED</code>.</p>
        pub fn set_service_type(
            mut self,
            input: std::option::Option<crate::model::SecurityServiceType>,
        ) -> Self {
            self.service_type = input;
            self
        }
        /// <p>Details about the attack, including the following:</p>
        /// <ul>
        /// <li> <p>Attack type</p> </li>
        /// <li> <p>Account ID</p> </li>
        /// <li> <p>ARN of the resource attacked</p> </li>
        /// <li> <p>Start time of the attack</p> </li>
        /// <li> <p>End time of the attack (ongoing attacks will not have an end time)</p> </li>
        /// </ul>
        /// <p>The details are in JSON format. </p>
        pub fn data(mut self, input: impl Into<std::string::String>) -> Self {
            self.data = Some(input.into());
            self
        }
        /// <p>Details about the attack, including the following:</p>
        /// <ul>
        /// <li> <p>Attack type</p> </li>
        /// <li> <p>Account ID</p> </li>
        /// <li> <p>ARN of the resource attacked</p> </li>
        /// <li> <p>Start time of the attack</p> </li>
        /// <li> <p>End time of the attack (ongoing attacks will not have an end time)</p> </li>
        /// </ul>
        /// <p>The details are in JSON format. </p>
        pub fn set_data(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.data = input;
            self
        }
        /// <p>If you have more objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more objects, submit another <code>GetProtectionStatus</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
        /// <p>Amazon Web Services SDKs provide auto-pagination that identify <code>NextToken</code> in a response and make subsequent request calls automatically on your behalf. However, this feature is not supported by <code>GetProtectionStatus</code>. You must submit subsequent requests with <code>NextToken</code> using your own processes. </p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>If you have more objects than the number that you specified for <code>MaxResults</code> in the request, the response includes a <code>NextToken</code> value. To list more objects, submit another <code>GetProtectionStatus</code> request, and specify the <code>NextToken</code> value from the response in the <code>NextToken</code> value in the next request.</p>
        /// <p>Amazon Web Services SDKs provide auto-pagination that identify <code>NextToken</code> in a response and make subsequent request calls automatically on your behalf. However, this feature is not supported by <code>GetProtectionStatus</code>. You must submit subsequent requests with <code>NextToken</code> using your own processes. </p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// Consumes the builder and constructs a [`GetProtectionStatusOutput`](crate::output::GetProtectionStatusOutput)
        pub fn build(self) -> crate::output::GetProtectionStatusOutput {
            crate::output::GetProtectionStatusOutput {
                admin_account_id: self.admin_account_id,
                service_type: self.service_type,
                data: self.data,
                next_token: self.next_token,
            }
        }
    }
}
impl GetProtectionStatusOutput {
    /// Creates a new builder-style object to manufacture [`GetProtectionStatusOutput`](crate::output::GetProtectionStatusOutput)
    pub fn builder() -> crate::output::get_protection_status_output::Builder {
        crate::output::get_protection_status_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetPolicyOutput {
    /// <p>Information about the specified Firewall Manager policy.</p>
    pub policy: std::option::Option<crate::model::Policy>,
    /// <p>The Amazon Resource Name (ARN) of the specified policy.</p>
    pub policy_arn: std::option::Option<std::string::String>,
}
impl GetPolicyOutput {
    /// <p>Information about the specified Firewall Manager policy.</p>
    pub fn policy(&self) -> std::option::Option<&crate::model::Policy> {
        self.policy.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the specified policy.</p>
    pub fn policy_arn(&self) -> std::option::Option<&str> {
        self.policy_arn.as_deref()
    }
}
impl std::fmt::Debug for GetPolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetPolicyOutput");
        formatter.field("policy", &self.policy);
        formatter.field("policy_arn", &self.policy_arn);
        formatter.finish()
    }
}
/// See [`GetPolicyOutput`](crate::output::GetPolicyOutput)
pub mod get_policy_output {
    /// A builder for [`GetPolicyOutput`](crate::output::GetPolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy: std::option::Option<crate::model::Policy>,
        pub(crate) policy_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the specified Firewall Manager policy.</p>
        pub fn policy(mut self, input: crate::model::Policy) -> Self {
            self.policy = Some(input);
            self
        }
        /// <p>Information about the specified Firewall Manager policy.</p>
        pub fn set_policy(mut self, input: std::option::Option<crate::model::Policy>) -> Self {
            self.policy = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the specified policy.</p>
        pub fn policy_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.policy_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the specified policy.</p>
        pub fn set_policy_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.policy_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`GetPolicyOutput`](crate::output::GetPolicyOutput)
        pub fn build(self) -> crate::output::GetPolicyOutput {
            crate::output::GetPolicyOutput {
                policy: self.policy,
                policy_arn: self.policy_arn,
            }
        }
    }
}
impl GetPolicyOutput {
    /// Creates a new builder-style object to manufacture [`GetPolicyOutput`](crate::output::GetPolicyOutput)
    pub fn builder() -> crate::output::get_policy_output::Builder {
        crate::output::get_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNotificationChannelOutput {
    /// <p>The SNS topic that records Firewall Manager activity. </p>
    pub sns_topic_arn: std::option::Option<std::string::String>,
    /// <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
    pub sns_role_name: std::option::Option<std::string::String>,
}
impl GetNotificationChannelOutput {
    /// <p>The SNS topic that records Firewall Manager activity. </p>
    pub fn sns_topic_arn(&self) -> std::option::Option<&str> {
        self.sns_topic_arn.as_deref()
    }
    /// <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
    pub fn sns_role_name(&self) -> std::option::Option<&str> {
        self.sns_role_name.as_deref()
    }
}
impl std::fmt::Debug for GetNotificationChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetNotificationChannelOutput");
        formatter.field("sns_topic_arn", &self.sns_topic_arn);
        formatter.field("sns_role_name", &self.sns_role_name);
        formatter.finish()
    }
}
/// See [`GetNotificationChannelOutput`](crate::output::GetNotificationChannelOutput)
pub mod get_notification_channel_output {
    /// A builder for [`GetNotificationChannelOutput`](crate::output::GetNotificationChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) sns_topic_arn: std::option::Option<std::string::String>,
        pub(crate) sns_role_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The SNS topic that records Firewall Manager activity. </p>
        pub fn sns_topic_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.sns_topic_arn = Some(input.into());
            self
        }
        /// <p>The SNS topic that records Firewall Manager activity. </p>
        pub fn set_sns_topic_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sns_topic_arn = input;
            self
        }
        /// <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
        pub fn sns_role_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.sns_role_name = Some(input.into());
            self
        }
        /// <p>The IAM role that is used by Firewall Manager to record activity to SNS.</p>
        pub fn set_sns_role_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.sns_role_name = input;
            self
        }
        /// Consumes the builder and constructs a [`GetNotificationChannelOutput`](crate::output::GetNotificationChannelOutput)
        pub fn build(self) -> crate::output::GetNotificationChannelOutput {
            crate::output::GetNotificationChannelOutput {
                sns_topic_arn: self.sns_topic_arn,
                sns_role_name: self.sns_role_name,
            }
        }
    }
}
impl GetNotificationChannelOutput {
    /// Creates a new builder-style object to manufacture [`GetNotificationChannelOutput`](crate::output::GetNotificationChannelOutput)
    pub fn builder() -> crate::output::get_notification_channel_output::Builder {
        crate::output::get_notification_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetComplianceDetailOutput {
    /// <p>Information about the resources and the policy that you specified in the <code>GetComplianceDetail</code> request.</p>
    pub policy_compliance_detail: std::option::Option<crate::model::PolicyComplianceDetail>,
}
impl GetComplianceDetailOutput {
    /// <p>Information about the resources and the policy that you specified in the <code>GetComplianceDetail</code> request.</p>
    pub fn policy_compliance_detail(
        &self,
    ) -> std::option::Option<&crate::model::PolicyComplianceDetail> {
        self.policy_compliance_detail.as_ref()
    }
}
impl std::fmt::Debug for GetComplianceDetailOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetComplianceDetailOutput");
        formatter.field("policy_compliance_detail", &self.policy_compliance_detail);
        formatter.finish()
    }
}
/// See [`GetComplianceDetailOutput`](crate::output::GetComplianceDetailOutput)
pub mod get_compliance_detail_output {
    /// A builder for [`GetComplianceDetailOutput`](crate::output::GetComplianceDetailOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) policy_compliance_detail:
            std::option::Option<crate::model::PolicyComplianceDetail>,
    }
    impl Builder {
        /// <p>Information about the resources and the policy that you specified in the <code>GetComplianceDetail</code> request.</p>
        pub fn policy_compliance_detail(
            mut self,
            input: crate::model::PolicyComplianceDetail,
        ) -> Self {
            self.policy_compliance_detail = Some(input);
            self
        }
        /// <p>Information about the resources and the policy that you specified in the <code>GetComplianceDetail</code> request.</p>
        pub fn set_policy_compliance_detail(
            mut self,
            input: std::option::Option<crate::model::PolicyComplianceDetail>,
        ) -> Self {
            self.policy_compliance_detail = input;
            self
        }
        /// Consumes the builder and constructs a [`GetComplianceDetailOutput`](crate::output::GetComplianceDetailOutput)
        pub fn build(self) -> crate::output::GetComplianceDetailOutput {
            crate::output::GetComplianceDetailOutput {
                policy_compliance_detail: self.policy_compliance_detail,
            }
        }
    }
}
impl GetComplianceDetailOutput {
    /// Creates a new builder-style object to manufacture [`GetComplianceDetailOutput`](crate::output::GetComplianceDetailOutput)
    pub fn builder() -> crate::output::get_compliance_detail_output::Builder {
        crate::output::get_compliance_detail_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAppsListOutput {
    /// <p>Information about the specified Firewall Manager applications list.</p>
    pub apps_list: std::option::Option<crate::model::AppsListData>,
    /// <p>The Amazon Resource Name (ARN) of the applications list.</p>
    pub apps_list_arn: std::option::Option<std::string::String>,
}
impl GetAppsListOutput {
    /// <p>Information about the specified Firewall Manager applications list.</p>
    pub fn apps_list(&self) -> std::option::Option<&crate::model::AppsListData> {
        self.apps_list.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the applications list.</p>
    pub fn apps_list_arn(&self) -> std::option::Option<&str> {
        self.apps_list_arn.as_deref()
    }
}
impl std::fmt::Debug for GetAppsListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAppsListOutput");
        formatter.field("apps_list", &self.apps_list);
        formatter.field("apps_list_arn", &self.apps_list_arn);
        formatter.finish()
    }
}
/// See [`GetAppsListOutput`](crate::output::GetAppsListOutput)
pub mod get_apps_list_output {
    /// A builder for [`GetAppsListOutput`](crate::output::GetAppsListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) apps_list: std::option::Option<crate::model::AppsListData>,
        pub(crate) apps_list_arn: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Information about the specified Firewall Manager applications list.</p>
        pub fn apps_list(mut self, input: crate::model::AppsListData) -> Self {
            self.apps_list = Some(input);
            self
        }
        /// <p>Information about the specified Firewall Manager applications list.</p>
        pub fn set_apps_list(
            mut self,
            input: std::option::Option<crate::model::AppsListData>,
        ) -> Self {
            self.apps_list = input;
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the applications list.</p>
        pub fn apps_list_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.apps_list_arn = Some(input.into());
            self
        }
        /// <p>The Amazon Resource Name (ARN) of the applications list.</p>
        pub fn set_apps_list_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.apps_list_arn = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAppsListOutput`](crate::output::GetAppsListOutput)
        pub fn build(self) -> crate::output::GetAppsListOutput {
            crate::output::GetAppsListOutput {
                apps_list: self.apps_list,
                apps_list_arn: self.apps_list_arn,
            }
        }
    }
}
impl GetAppsListOutput {
    /// Creates a new builder-style object to manufacture [`GetAppsListOutput`](crate::output::GetAppsListOutput)
    pub fn builder() -> crate::output::get_apps_list_output::Builder {
        crate::output::get_apps_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetAdminAccountOutput {
    /// <p>The Amazon Web Services account that is set as the Firewall Manager administrator.</p>
    pub admin_account: std::option::Option<std::string::String>,
    /// <p>The status of the Amazon Web Services account that you set as the Firewall Manager administrator.</p>
    pub role_status: std::option::Option<crate::model::AccountRoleStatus>,
}
impl GetAdminAccountOutput {
    /// <p>The Amazon Web Services account that is set as the Firewall Manager administrator.</p>
    pub fn admin_account(&self) -> std::option::Option<&str> {
        self.admin_account.as_deref()
    }
    /// <p>The status of the Amazon Web Services account that you set as the Firewall Manager administrator.</p>
    pub fn role_status(&self) -> std::option::Option<&crate::model::AccountRoleStatus> {
        self.role_status.as_ref()
    }
}
impl std::fmt::Debug for GetAdminAccountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetAdminAccountOutput");
        formatter.field("admin_account", &self.admin_account);
        formatter.field("role_status", &self.role_status);
        formatter.finish()
    }
}
/// See [`GetAdminAccountOutput`](crate::output::GetAdminAccountOutput)
pub mod get_admin_account_output {
    /// A builder for [`GetAdminAccountOutput`](crate::output::GetAdminAccountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) admin_account: std::option::Option<std::string::String>,
        pub(crate) role_status: std::option::Option<crate::model::AccountRoleStatus>,
    }
    impl Builder {
        /// <p>The Amazon Web Services account that is set as the Firewall Manager administrator.</p>
        pub fn admin_account(mut self, input: impl Into<std::string::String>) -> Self {
            self.admin_account = Some(input.into());
            self
        }
        /// <p>The Amazon Web Services account that is set as the Firewall Manager administrator.</p>
        pub fn set_admin_account(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.admin_account = input;
            self
        }
        /// <p>The status of the Amazon Web Services account that you set as the Firewall Manager administrator.</p>
        pub fn role_status(mut self, input: crate::model::AccountRoleStatus) -> Self {
            self.role_status = Some(input);
            self
        }
        /// <p>The status of the Amazon Web Services account that you set as the Firewall Manager administrator.</p>
        pub fn set_role_status(
            mut self,
            input: std::option::Option<crate::model::AccountRoleStatus>,
        ) -> Self {
            self.role_status = input;
            self
        }
        /// Consumes the builder and constructs a [`GetAdminAccountOutput`](crate::output::GetAdminAccountOutput)
        pub fn build(self) -> crate::output::GetAdminAccountOutput {
            crate::output::GetAdminAccountOutput {
                admin_account: self.admin_account,
                role_status: self.role_status,
            }
        }
    }
}
impl GetAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`GetAdminAccountOutput`](crate::output::GetAdminAccountOutput)
    pub fn builder() -> crate::output::get_admin_account_output::Builder {
        crate::output::get_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateThirdPartyFirewallOutput {
    /// <p>The current status for the disassociation of a Firewall Manager administrators account with a third-party firewall.</p>
    pub third_party_firewall_status:
        std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
}
impl DisassociateThirdPartyFirewallOutput {
    /// <p>The current status for the disassociation of a Firewall Manager administrators account with a third-party firewall.</p>
    pub fn third_party_firewall_status(
        &self,
    ) -> std::option::Option<&crate::model::ThirdPartyFirewallAssociationStatus> {
        self.third_party_firewall_status.as_ref()
    }
}
impl std::fmt::Debug for DisassociateThirdPartyFirewallOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateThirdPartyFirewallOutput");
        formatter.field(
            "third_party_firewall_status",
            &self.third_party_firewall_status,
        );
        formatter.finish()
    }
}
/// See [`DisassociateThirdPartyFirewallOutput`](crate::output::DisassociateThirdPartyFirewallOutput)
pub mod disassociate_third_party_firewall_output {
    /// A builder for [`DisassociateThirdPartyFirewallOutput`](crate::output::DisassociateThirdPartyFirewallOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) third_party_firewall_status:
            std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
    }
    impl Builder {
        /// <p>The current status for the disassociation of a Firewall Manager administrators account with a third-party firewall.</p>
        pub fn third_party_firewall_status(
            mut self,
            input: crate::model::ThirdPartyFirewallAssociationStatus,
        ) -> Self {
            self.third_party_firewall_status = Some(input);
            self
        }
        /// <p>The current status for the disassociation of a Firewall Manager administrators account with a third-party firewall.</p>
        pub fn set_third_party_firewall_status(
            mut self,
            input: std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
        ) -> Self {
            self.third_party_firewall_status = input;
            self
        }
        /// Consumes the builder and constructs a [`DisassociateThirdPartyFirewallOutput`](crate::output::DisassociateThirdPartyFirewallOutput)
        pub fn build(self) -> crate::output::DisassociateThirdPartyFirewallOutput {
            crate::output::DisassociateThirdPartyFirewallOutput {
                third_party_firewall_status: self.third_party_firewall_status,
            }
        }
    }
}
impl DisassociateThirdPartyFirewallOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateThirdPartyFirewallOutput`](crate::output::DisassociateThirdPartyFirewallOutput)
    pub fn builder() -> crate::output::disassociate_third_party_firewall_output::Builder {
        crate::output::disassociate_third_party_firewall_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DisassociateAdminAccountOutput {}
impl std::fmt::Debug for DisassociateAdminAccountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DisassociateAdminAccountOutput");
        formatter.finish()
    }
}
/// See [`DisassociateAdminAccountOutput`](crate::output::DisassociateAdminAccountOutput)
pub mod disassociate_admin_account_output {
    /// A builder for [`DisassociateAdminAccountOutput`](crate::output::DisassociateAdminAccountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DisassociateAdminAccountOutput`](crate::output::DisassociateAdminAccountOutput)
        pub fn build(self) -> crate::output::DisassociateAdminAccountOutput {
            crate::output::DisassociateAdminAccountOutput {}
        }
    }
}
impl DisassociateAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`DisassociateAdminAccountOutput`](crate::output::DisassociateAdminAccountOutput)
    pub fn builder() -> crate::output::disassociate_admin_account_output::Builder {
        crate::output::disassociate_admin_account_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteProtocolsListOutput {}
impl std::fmt::Debug for DeleteProtocolsListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteProtocolsListOutput");
        formatter.finish()
    }
}
/// See [`DeleteProtocolsListOutput`](crate::output::DeleteProtocolsListOutput)
pub mod delete_protocols_list_output {
    /// A builder for [`DeleteProtocolsListOutput`](crate::output::DeleteProtocolsListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteProtocolsListOutput`](crate::output::DeleteProtocolsListOutput)
        pub fn build(self) -> crate::output::DeleteProtocolsListOutput {
            crate::output::DeleteProtocolsListOutput {}
        }
    }
}
impl DeleteProtocolsListOutput {
    /// Creates a new builder-style object to manufacture [`DeleteProtocolsListOutput`](crate::output::DeleteProtocolsListOutput)
    pub fn builder() -> crate::output::delete_protocols_list_output::Builder {
        crate::output::delete_protocols_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeletePolicyOutput {}
impl std::fmt::Debug for DeletePolicyOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeletePolicyOutput");
        formatter.finish()
    }
}
/// See [`DeletePolicyOutput`](crate::output::DeletePolicyOutput)
pub mod delete_policy_output {
    /// A builder for [`DeletePolicyOutput`](crate::output::DeletePolicyOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeletePolicyOutput`](crate::output::DeletePolicyOutput)
        pub fn build(self) -> crate::output::DeletePolicyOutput {
            crate::output::DeletePolicyOutput {}
        }
    }
}
impl DeletePolicyOutput {
    /// Creates a new builder-style object to manufacture [`DeletePolicyOutput`](crate::output::DeletePolicyOutput)
    pub fn builder() -> crate::output::delete_policy_output::Builder {
        crate::output::delete_policy_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteNotificationChannelOutput {}
impl std::fmt::Debug for DeleteNotificationChannelOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteNotificationChannelOutput");
        formatter.finish()
    }
}
/// See [`DeleteNotificationChannelOutput`](crate::output::DeleteNotificationChannelOutput)
pub mod delete_notification_channel_output {
    /// A builder for [`DeleteNotificationChannelOutput`](crate::output::DeleteNotificationChannelOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteNotificationChannelOutput`](crate::output::DeleteNotificationChannelOutput)
        pub fn build(self) -> crate::output::DeleteNotificationChannelOutput {
            crate::output::DeleteNotificationChannelOutput {}
        }
    }
}
impl DeleteNotificationChannelOutput {
    /// Creates a new builder-style object to manufacture [`DeleteNotificationChannelOutput`](crate::output::DeleteNotificationChannelOutput)
    pub fn builder() -> crate::output::delete_notification_channel_output::Builder {
        crate::output::delete_notification_channel_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteAppsListOutput {}
impl std::fmt::Debug for DeleteAppsListOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteAppsListOutput");
        formatter.finish()
    }
}
/// See [`DeleteAppsListOutput`](crate::output::DeleteAppsListOutput)
pub mod delete_apps_list_output {
    /// A builder for [`DeleteAppsListOutput`](crate::output::DeleteAppsListOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`DeleteAppsListOutput`](crate::output::DeleteAppsListOutput)
        pub fn build(self) -> crate::output::DeleteAppsListOutput {
            crate::output::DeleteAppsListOutput {}
        }
    }
}
impl DeleteAppsListOutput {
    /// Creates a new builder-style object to manufacture [`DeleteAppsListOutput`](crate::output::DeleteAppsListOutput)
    pub fn builder() -> crate::output::delete_apps_list_output::Builder {
        crate::output::delete_apps_list_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateThirdPartyFirewallOutput {
    /// <p>The current status for setting a Firewall Manager policy administrator's account as an administrator of the third-party firewall tenant.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
    /// </ul>
    pub third_party_firewall_status:
        std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
}
impl AssociateThirdPartyFirewallOutput {
    /// <p>The current status for setting a Firewall Manager policy administrator's account as an administrator of the third-party firewall tenant.</p>
    /// <ul>
    /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
    /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
    /// </ul>
    pub fn third_party_firewall_status(
        &self,
    ) -> std::option::Option<&crate::model::ThirdPartyFirewallAssociationStatus> {
        self.third_party_firewall_status.as_ref()
    }
}
impl std::fmt::Debug for AssociateThirdPartyFirewallOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateThirdPartyFirewallOutput");
        formatter.field(
            "third_party_firewall_status",
            &self.third_party_firewall_status,
        );
        formatter.finish()
    }
}
/// See [`AssociateThirdPartyFirewallOutput`](crate::output::AssociateThirdPartyFirewallOutput)
pub mod associate_third_party_firewall_output {
    /// A builder for [`AssociateThirdPartyFirewallOutput`](crate::output::AssociateThirdPartyFirewallOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) third_party_firewall_status:
            std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
    }
    impl Builder {
        /// <p>The current status for setting a Firewall Manager policy administrator's account as an administrator of the third-party firewall tenant.</p>
        /// <ul>
        /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
        /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
        /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
        /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
        /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
        /// </ul>
        pub fn third_party_firewall_status(
            mut self,
            input: crate::model::ThirdPartyFirewallAssociationStatus,
        ) -> Self {
            self.third_party_firewall_status = Some(input);
            self
        }
        /// <p>The current status for setting a Firewall Manager policy administrator's account as an administrator of the third-party firewall tenant.</p>
        /// <ul>
        /// <li> <p> <code>ONBOARDING</code> - The Firewall Manager policy administrator is being designated as a tenant administrator.</p> </li>
        /// <li> <p> <code>ONBOARD_COMPLETE</code> - The Firewall Manager policy administrator is designated as a tenant administrator.</p> </li>
        /// <li> <p> <code>OFFBOARDING</code> - The Firewall Manager policy administrator is being removed as a tenant administrator.</p> </li>
        /// <li> <p> <code>OFFBOARD_COMPLETE</code> - The Firewall Manager policy administrator has been removed as a tenant administrator.</p> </li>
        /// <li> <p> <code>NOT_EXIST</code> - The Firewall Manager policy administrator doesn't exist as a tenant administrator.</p> </li>
        /// </ul>
        pub fn set_third_party_firewall_status(
            mut self,
            input: std::option::Option<crate::model::ThirdPartyFirewallAssociationStatus>,
        ) -> Self {
            self.third_party_firewall_status = input;
            self
        }
        /// Consumes the builder and constructs a [`AssociateThirdPartyFirewallOutput`](crate::output::AssociateThirdPartyFirewallOutput)
        pub fn build(self) -> crate::output::AssociateThirdPartyFirewallOutput {
            crate::output::AssociateThirdPartyFirewallOutput {
                third_party_firewall_status: self.third_party_firewall_status,
            }
        }
    }
}
impl AssociateThirdPartyFirewallOutput {
    /// Creates a new builder-style object to manufacture [`AssociateThirdPartyFirewallOutput`](crate::output::AssociateThirdPartyFirewallOutput)
    pub fn builder() -> crate::output::associate_third_party_firewall_output::Builder {
        crate::output::associate_third_party_firewall_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AssociateAdminAccountOutput {}
impl std::fmt::Debug for AssociateAdminAccountOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AssociateAdminAccountOutput");
        formatter.finish()
    }
}
/// See [`AssociateAdminAccountOutput`](crate::output::AssociateAdminAccountOutput)
pub mod associate_admin_account_output {
    /// A builder for [`AssociateAdminAccountOutput`](crate::output::AssociateAdminAccountOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`AssociateAdminAccountOutput`](crate::output::AssociateAdminAccountOutput)
        pub fn build(self) -> crate::output::AssociateAdminAccountOutput {
            crate::output::AssociateAdminAccountOutput {}
        }
    }
}
impl AssociateAdminAccountOutput {
    /// Creates a new builder-style object to manufacture [`AssociateAdminAccountOutput`](crate::output::AssociateAdminAccountOutput)
    pub fn builder() -> crate::output::associate_admin_account_output::Builder {
        crate::output::associate_admin_account_output::Builder::default()
    }
}
