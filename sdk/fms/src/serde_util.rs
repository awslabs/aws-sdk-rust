// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn batch_associate_resource_output_correct_errors(
    mut builder: crate::operation::batch_associate_resource::builders::BatchAssociateResourceOutputBuilder,
) -> crate::operation::batch_associate_resource::builders::BatchAssociateResourceOutputBuilder {
    if builder.resource_set_identifier.is_none() {
        builder.resource_set_identifier = Some(Default::default())
    }
    if builder.failed_items.is_none() {
        builder.failed_items = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_disassociate_resource_output_correct_errors(
    mut builder: crate::operation::batch_disassociate_resource::builders::BatchDisassociateResourceOutputBuilder,
) -> crate::operation::batch_disassociate_resource::builders::BatchDisassociateResourceOutputBuilder {
    if builder.resource_set_identifier.is_none() {
        builder.resource_set_identifier = Some(Default::default())
    }
    if builder.failed_items.is_none() {
        builder.failed_items = Some(Default::default())
    }
    builder
}

pub(crate) fn get_resource_set_output_correct_errors(
    mut builder: crate::operation::get_resource_set::builders::GetResourceSetOutputBuilder,
) -> crate::operation::get_resource_set::builders::GetResourceSetOutputBuilder {
    if builder.resource_set.is_none() {
        builder.resource_set = {
            let builder = crate::types::builders::ResourceSetBuilder::default();
            crate::serde_util::resource_set_correct_errors(builder).build().ok()
        }
    }
    if builder.resource_set_arn.is_none() {
        builder.resource_set_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn list_resource_set_resources_output_correct_errors(
    mut builder: crate::operation::list_resource_set_resources::builders::ListResourceSetResourcesOutputBuilder,
) -> crate::operation::list_resource_set_resources::builders::ListResourceSetResourcesOutputBuilder {
    if builder.items.is_none() {
        builder.items = Some(Default::default())
    }
    builder
}

pub(crate) fn put_resource_set_output_correct_errors(
    mut builder: crate::operation::put_resource_set::builders::PutResourceSetOutputBuilder,
) -> crate::operation::put_resource_set::builders::PutResourceSetOutputBuilder {
    if builder.resource_set.is_none() {
        builder.resource_set = {
            let builder = crate::types::builders::ResourceSetBuilder::default();
            crate::serde_util::resource_set_correct_errors(builder).build().ok()
        }
    }
    if builder.resource_set_arn.is_none() {
        builder.resource_set_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_set_correct_errors(mut builder: crate::types::builders::ResourceSetBuilder) -> crate::types::builders::ResourceSetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.resource_type_list.is_none() {
        builder.resource_type_list = Some(Default::default())
    }
    builder
}

pub(crate) fn apps_list_data_correct_errors(mut builder: crate::types::builders::AppsListDataBuilder) -> crate::types::builders::AppsListDataBuilder {
    if builder.list_name.is_none() {
        builder.list_name = Some(Default::default())
    }
    if builder.apps_list.is_none() {
        builder.apps_list = Some(Default::default())
    }
    builder
}

pub(crate) fn policy_correct_errors(mut builder: crate::types::builders::PolicyBuilder) -> crate::types::builders::PolicyBuilder {
    if builder.policy_name.is_none() {
        builder.policy_name = Some(Default::default())
    }
    if builder.security_service_policy_data.is_none() {
        builder.security_service_policy_data = {
            let builder = crate::types::builders::SecurityServicePolicyDataBuilder::default();
            crate::serde_util::security_service_policy_data_correct_errors(builder).build().ok()
        }
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.exclude_resource_tags.is_none() {
        builder.exclude_resource_tags = Some(Default::default())
    }
    if builder.remediation_enabled.is_none() {
        builder.remediation_enabled = Some(Default::default())
    }
    builder
}

pub(crate) fn protocols_list_data_correct_errors(
    mut builder: crate::types::builders::ProtocolsListDataBuilder,
) -> crate::types::builders::ProtocolsListDataBuilder {
    if builder.list_name.is_none() {
        builder.list_name = Some(Default::default())
    }
    if builder.protocols_list.is_none() {
        builder.protocols_list = Some(Default::default())
    }
    builder
}

pub(crate) fn violation_detail_correct_errors(
    mut builder: crate::types::builders::ViolationDetailBuilder,
) -> crate::types::builders::ViolationDetailBuilder {
    if builder.policy_id.is_none() {
        builder.policy_id = Some(Default::default())
    }
    if builder.member_account.is_none() {
        builder.member_account = Some(Default::default())
    }
    if builder.resource_id.is_none() {
        builder.resource_id = Some(Default::default())
    }
    if builder.resource_type.is_none() {
        builder.resource_type = Some(Default::default())
    }
    if builder.resource_violations.is_none() {
        builder.resource_violations = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_correct_errors(mut builder: crate::types::builders::ResourceBuilder) -> crate::types::builders::ResourceBuilder {
    if builder.uri.is_none() {
        builder.uri = Some(Default::default())
    }
    builder
}

pub(crate) fn security_service_policy_data_correct_errors(
    mut builder: crate::types::builders::SecurityServicePolicyDataBuilder,
) -> crate::types::builders::SecurityServicePolicyDataBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::SecurityServiceType>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn app_correct_errors(mut builder: crate::types::builders::AppBuilder) -> crate::types::builders::AppBuilder {
    if builder.app_name.is_none() {
        builder.app_name = Some(Default::default())
    }
    if builder.protocol.is_none() {
        builder.protocol = Some(Default::default())
    }
    if builder.port.is_none() {
        builder.port = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_tag_correct_errors(mut builder: crate::types::builders::ResourceTagBuilder) -> crate::types::builders::ResourceTagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn possible_remediation_action_correct_errors(
    mut builder: crate::types::builders::PossibleRemediationActionBuilder,
) -> crate::types::builders::PossibleRemediationActionBuilder {
    if builder.ordered_remediation_actions.is_none() {
        builder.ordered_remediation_actions = Some(Default::default())
    }
    builder
}

pub(crate) fn ec2_associate_route_table_action_correct_errors(
    mut builder: crate::types::builders::Ec2AssociateRouteTableActionBuilder,
) -> crate::types::builders::Ec2AssociateRouteTableActionBuilder {
    if builder.route_table_id.is_none() {
        builder.route_table_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn ec2_copy_route_table_action_correct_errors(
    mut builder: crate::types::builders::Ec2CopyRouteTableActionBuilder,
) -> crate::types::builders::Ec2CopyRouteTableActionBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    if builder.route_table_id.is_none() {
        builder.route_table_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn ec2_create_route_action_correct_errors(
    mut builder: crate::types::builders::Ec2CreateRouteActionBuilder,
) -> crate::types::builders::Ec2CreateRouteActionBuilder {
    if builder.route_table_id.is_none() {
        builder.route_table_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn ec2_create_route_table_action_correct_errors(
    mut builder: crate::types::builders::Ec2CreateRouteTableActionBuilder,
) -> crate::types::builders::Ec2CreateRouteTableActionBuilder {
    if builder.vpc_id.is_none() {
        builder.vpc_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn ec2_delete_route_action_correct_errors(
    mut builder: crate::types::builders::Ec2DeleteRouteActionBuilder,
) -> crate::types::builders::Ec2DeleteRouteActionBuilder {
    if builder.route_table_id.is_none() {
        builder.route_table_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn ec2_replace_route_action_correct_errors(
    mut builder: crate::types::builders::Ec2ReplaceRouteActionBuilder,
) -> crate::types::builders::Ec2ReplaceRouteActionBuilder {
    if builder.route_table_id.is_none() {
        builder.route_table_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn ec2_replace_route_table_association_action_correct_errors(
    mut builder: crate::types::builders::Ec2ReplaceRouteTableAssociationActionBuilder,
) -> crate::types::builders::Ec2ReplaceRouteTableAssociationActionBuilder {
    if builder.association_id.is_none() {
        builder.association_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    if builder.route_table_id.is_none() {
        builder.route_table_id = {
            let builder = crate::types::builders::ActionTargetBuilder::default();
            Some(builder.build())
        }
    }
    builder
}
