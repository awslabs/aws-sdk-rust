// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeviceRegistrationInput {
    /// <p>The unique name of the device you want to get the registration status from.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The name of the fleet that the device belongs to.</p>
    #[doc(hidden)]
    pub device_fleet_name: std::option::Option<std::string::String>,
}
impl GetDeviceRegistrationInput {
    /// <p>The unique name of the device you want to get the registration status from.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The name of the fleet that the device belongs to.</p>
    pub fn device_fleet_name(&self) -> std::option::Option<&str> {
        self.device_fleet_name.as_deref()
    }
}
impl GetDeviceRegistrationInput {
    /// Creates a new builder-style object to manufacture [`GetDeviceRegistrationInput`](crate::operation::get_device_registration::GetDeviceRegistrationInput).
    pub fn builder(
    ) -> crate::operation::get_device_registration::builders::GetDeviceRegistrationInputBuilder
    {
        crate::operation::get_device_registration::builders::GetDeviceRegistrationInputBuilder::default()
    }
}

/// A builder for [`GetDeviceRegistrationInput`](crate::operation::get_device_registration::GetDeviceRegistrationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDeviceRegistrationInputBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) device_fleet_name: std::option::Option<std::string::String>,
}
impl GetDeviceRegistrationInputBuilder {
    /// <p>The unique name of the device you want to get the registration status from.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The unique name of the device you want to get the registration status from.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The name of the fleet that the device belongs to.</p>
    pub fn device_fleet_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_fleet_name = Some(input.into());
        self
    }
    /// <p>The name of the fleet that the device belongs to.</p>
    pub fn set_device_fleet_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.device_fleet_name = input;
        self
    }
    /// Consumes the builder and constructs a [`GetDeviceRegistrationInput`](crate::operation::get_device_registration::GetDeviceRegistrationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_device_registration::GetDeviceRegistrationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_device_registration::GetDeviceRegistrationInput {
                device_name: self.device_name,
                device_fleet_name: self.device_fleet_name,
            },
        )
    }
}
