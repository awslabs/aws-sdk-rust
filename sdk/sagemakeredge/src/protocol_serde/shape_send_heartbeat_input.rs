// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_send_heartbeat_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::send_heartbeat::SendHeartbeatInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.agent_metrics {
        let mut array_2 = object.key("AgentMetrics").start_array();
        for item_3 in var_1 {
            {
                #[allow(unused_mut)]
                let mut object_4 = array_2.value().start_object();
                crate::protocol_serde::shape_edge_metric::ser_edge_metric(&mut object_4, item_3)?;
                object_4.finish();
            }
        }
        array_2.finish();
    }
    if let Some(var_5) = &input.agent_version {
        object.key("AgentVersion").string(var_5.as_str());
    }
    if let Some(var_6) = &input.deployment_result {
        #[allow(unused_mut)]
        let mut object_7 = object.key("DeploymentResult").start_object();
        crate::protocol_serde::shape_deployment_result::ser_deployment_result(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.device_fleet_name {
        object.key("DeviceFleetName").string(var_8.as_str());
    }
    if let Some(var_9) = &input.device_name {
        object.key("DeviceName").string(var_9.as_str());
    }
    if let Some(var_10) = &input.models {
        let mut array_11 = object.key("Models").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_model::ser_model(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    Ok(())
}
