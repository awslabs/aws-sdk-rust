// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use std::fmt::Write;
/// See [`GetDeviceRegistrationInput`](crate::input::GetDeviceRegistrationInput)
pub mod get_device_registration_input {
    /// A builder for [`GetDeviceRegistrationInput`](crate::input::GetDeviceRegistrationInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) device_name: std::option::Option<std::string::String>,
        pub(crate) device_fleet_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>The unique name of the device you want to get the registration status from.</p>
        pub fn device_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.device_name = Some(inp.into());
            self
        }
        pub fn set_device_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.device_name = inp;
            self
        }
        /// <p>The name of the fleet that the device belongs to.</p>
        pub fn device_fleet_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.device_fleet_name = Some(inp.into());
            self
        }
        pub fn set_device_fleet_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.device_fleet_name = inp;
            self
        }
        /// Consumes the builder and constructs a [`GetDeviceRegistrationInput`](crate::input::GetDeviceRegistrationInput)
        pub fn build(
            self,
        ) -> Result<crate::input::GetDeviceRegistrationInput, smithy_http::operation::BuildError>
        {
            Ok(crate::input::GetDeviceRegistrationInput {
                device_name: self.device_name,
                device_fleet_name: self.device_fleet_name,
            })
        }
    }
}
#[doc(hidden)]
pub type GetDeviceRegistrationInputOperationOutputAlias = crate::operation::GetDeviceRegistration;
#[doc(hidden)]
pub type GetDeviceRegistrationInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl GetDeviceRegistrationInput {
    /// Consumes the builder and constructs an Operation<[`GetDeviceRegistration`](crate::operation::GetDeviceRegistration)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> Result<
        smithy_http::operation::Operation<
            crate::operation::GetDeviceRegistration,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body = crate::operation_ser::serialize_operation_get_device_registration(&self)
                .map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::GetDeviceRegistration::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "GetDeviceRegistration",
                "sagemakeredge",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/GetDeviceRegistration").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/json");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`GetDeviceRegistrationInput`](crate::input::GetDeviceRegistrationInput)
    pub fn builder() -> crate::input::get_device_registration_input::Builder {
        crate::input::get_device_registration_input::Builder::default()
    }
}

/// See [`SendHeartbeatInput`](crate::input::SendHeartbeatInput)
pub mod send_heartbeat_input {
    /// A builder for [`SendHeartbeatInput`](crate::input::SendHeartbeatInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) agent_metrics: std::option::Option<std::vec::Vec<crate::model::EdgeMetric>>,
        pub(crate) models: std::option::Option<std::vec::Vec<crate::model::Model>>,
        pub(crate) agent_version: std::option::Option<std::string::String>,
        pub(crate) device_name: std::option::Option<std::string::String>,
        pub(crate) device_fleet_name: std::option::Option<std::string::String>,
    }
    impl Builder {
        pub fn agent_metrics(mut self, inp: impl Into<crate::model::EdgeMetric>) -> Self {
            let mut v = self.agent_metrics.unwrap_or_default();
            v.push(inp.into());
            self.agent_metrics = Some(v);
            self
        }
        pub fn set_agent_metrics(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::EdgeMetric>>,
        ) -> Self {
            self.agent_metrics = inp;
            self
        }
        pub fn models(mut self, inp: impl Into<crate::model::Model>) -> Self {
            let mut v = self.models.unwrap_or_default();
            v.push(inp.into());
            self.models = Some(v);
            self
        }
        pub fn set_models(
            mut self,
            inp: std::option::Option<std::vec::Vec<crate::model::Model>>,
        ) -> Self {
            self.models = inp;
            self
        }
        /// <p>Returns the version of the agent.</p>
        pub fn agent_version(mut self, inp: impl Into<std::string::String>) -> Self {
            self.agent_version = Some(inp.into());
            self
        }
        pub fn set_agent_version(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.agent_version = inp;
            self
        }
        /// <p>The unique name of the device.</p>
        pub fn device_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.device_name = Some(inp.into());
            self
        }
        pub fn set_device_name(mut self, inp: std::option::Option<std::string::String>) -> Self {
            self.device_name = inp;
            self
        }
        /// <p>The name of the fleet that the device belongs to.</p>
        pub fn device_fleet_name(mut self, inp: impl Into<std::string::String>) -> Self {
            self.device_fleet_name = Some(inp.into());
            self
        }
        pub fn set_device_fleet_name(
            mut self,
            inp: std::option::Option<std::string::String>,
        ) -> Self {
            self.device_fleet_name = inp;
            self
        }
        /// Consumes the builder and constructs a [`SendHeartbeatInput`](crate::input::SendHeartbeatInput)
        pub fn build(
            self,
        ) -> Result<crate::input::SendHeartbeatInput, smithy_http::operation::BuildError> {
            Ok(crate::input::SendHeartbeatInput {
                agent_metrics: self.agent_metrics,
                models: self.models,
                agent_version: self.agent_version,
                device_name: self.device_name,
                device_fleet_name: self.device_fleet_name,
            })
        }
    }
}
#[doc(hidden)]
pub type SendHeartbeatInputOperationOutputAlias = crate::operation::SendHeartbeat;
#[doc(hidden)]
pub type SendHeartbeatInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl SendHeartbeatInput {
    /// Consumes the builder and constructs an Operation<[`SendHeartbeat`](crate::operation::SendHeartbeat)>
    #[allow(clippy::let_and_return)]
    pub fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> Result<
        smithy_http::operation::Operation<
            crate::operation::SendHeartbeat,
            aws_http::AwsErrorRetryPolicy,
        >,
        smithy_http::operation::BuildError,
    > {
        Ok({
            let request = self.request_builder_base()?;
            let body =
                crate::operation_ser::serialize_operation_send_heartbeat(&self).map_err(|err| {
                    smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
            let request = Self::assemble(request, body);
            #[allow(unused_mut)]
            let mut request =
                smithy_http::operation::Request::new(request.map(smithy_http::body::SdkBody::from));
            request
                .config_mut()
                .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                    crate::API_METADATA.clone(),
                ));
            #[allow(unused_mut)]
            let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
            request.config_mut().insert(signing_config);
            request
                .config_mut()
                .insert(aws_types::SigningService::from_static(
                    _config.signing_service(),
                ));
            aws_endpoint::set_endpoint_resolver(
                &mut request.config_mut(),
                _config.endpoint_resolver.clone(),
            );
            if let Some(region) = &_config.region {
                request.config_mut().insert(region.clone());
            }
            aws_auth::set_provider(
                &mut request.config_mut(),
                _config.credentials_provider.clone(),
            );
            let op = smithy_http::operation::Operation::new(
                request,
                crate::operation::SendHeartbeat::new(),
            )
            .with_metadata(smithy_http::operation::Metadata::new(
                "SendHeartbeat",
                "sagemakeredge",
            ));
            let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
            op
        })
    }
    fn uri_base(&self, output: &mut String) {
        write!(output, "/SendHeartbeat").expect("formatting should succeed")
    }
    #[allow(clippy::unnecessary_wraps)]
    fn update_http_builder(
        &self,
        builder: http::request::Builder,
    ) -> Result<http::request::Builder, smithy_http::operation::BuildError> {
        let mut uri = String::new();
        self.uri_base(&mut uri);
        Ok(builder.method("POST").uri(uri))
    }
    #[allow(clippy::unnecessary_wraps)]
    fn request_builder_base(
        &self,
    ) -> Result<http::request::Builder, smithy_http::operation::BuildError> {
        let builder = http::request::Builder::new();
        let builder = builder.header("Content-Type", "application/json");
        self.update_http_builder(builder)
    }
    fn assemble(
        mut builder: http::request::Builder,
        body: smithy_http::body::SdkBody,
    ) -> http::request::Request<smithy_http::body::SdkBody> {
        if let Some(content_length) = body.content_length() {
            builder = builder.header(http::header::CONTENT_LENGTH, content_length)
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`SendHeartbeatInput`](crate::input::SendHeartbeatInput)
    pub fn builder() -> crate::input::send_heartbeat_input::Builder {
        crate::input::send_heartbeat_input::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SendHeartbeatInput {
    /// <p>For internal use. Returns a list of SageMaker Edge Manager agent operating metrics.</p>
    pub agent_metrics: std::option::Option<std::vec::Vec<crate::model::EdgeMetric>>,
    /// <p>Returns a list of models deployed on the the device.</p>
    pub models: std::option::Option<std::vec::Vec<crate::model::Model>>,
    /// <p>Returns the version of the agent.</p>
    pub agent_version: std::option::Option<std::string::String>,
    /// <p>The unique name of the device.</p>
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The name of the fleet that the device belongs to.</p>
    pub device_fleet_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for SendHeartbeatInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SendHeartbeatInput");
        formatter.field("agent_metrics", &self.agent_metrics);
        formatter.field("models", &self.models);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("device_name", &self.device_name);
        formatter.field("device_fleet_name", &self.device_fleet_name);
        formatter.finish()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDeviceRegistrationInput {
    /// <p>The unique name of the device you want to get the registration status from.</p>
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The name of the fleet that the device belongs to.</p>
    pub device_fleet_name: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetDeviceRegistrationInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDeviceRegistrationInput");
        formatter.field("device_name", &self.device_name);
        formatter.field("device_fleet_name", &self.device_fleet_name);
        formatter.finish()
    }
}
