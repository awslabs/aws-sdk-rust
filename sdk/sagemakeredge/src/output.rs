// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SendHeartbeatOutput {}
/// See [`SendHeartbeatOutput`](crate::output::SendHeartbeatOutput).
pub mod send_heartbeat_output {

    /// A builder for [`SendHeartbeatOutput`](crate::output::SendHeartbeatOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SendHeartbeatOutput`](crate::output::SendHeartbeatOutput).
        pub fn build(self) -> crate::output::SendHeartbeatOutput {
            crate::output::SendHeartbeatOutput {}
        }
    }
}
impl SendHeartbeatOutput {
    /// Creates a new builder-style object to manufacture [`SendHeartbeatOutput`](crate::output::SendHeartbeatOutput).
    pub fn builder() -> crate::output::send_heartbeat_output::Builder {
        crate::output::send_heartbeat_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeviceRegistrationOutput {
    /// <p>Describes if the device is currently registered with SageMaker Edge Manager.</p>
    #[doc(hidden)]
    pub device_registration: std::option::Option<std::string::String>,
    /// <p>The amount of time, in seconds, that the registration status is stored on the device’s cache before it is refreshed.</p>
    #[doc(hidden)]
    pub cache_ttl: std::option::Option<std::string::String>,
}
impl GetDeviceRegistrationOutput {
    /// <p>Describes if the device is currently registered with SageMaker Edge Manager.</p>
    pub fn device_registration(&self) -> std::option::Option<&str> {
        self.device_registration.as_deref()
    }
    /// <p>The amount of time, in seconds, that the registration status is stored on the device’s cache before it is refreshed.</p>
    pub fn cache_ttl(&self) -> std::option::Option<&str> {
        self.cache_ttl.as_deref()
    }
}
/// See [`GetDeviceRegistrationOutput`](crate::output::GetDeviceRegistrationOutput).
pub mod get_device_registration_output {

    /// A builder for [`GetDeviceRegistrationOutput`](crate::output::GetDeviceRegistrationOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) device_registration: std::option::Option<std::string::String>,
        pub(crate) cache_ttl: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Describes if the device is currently registered with SageMaker Edge Manager.</p>
        pub fn device_registration(mut self, input: impl Into<std::string::String>) -> Self {
            self.device_registration = Some(input.into());
            self
        }
        /// <p>Describes if the device is currently registered with SageMaker Edge Manager.</p>
        pub fn set_device_registration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.device_registration = input;
            self
        }
        /// <p>The amount of time, in seconds, that the registration status is stored on the device’s cache before it is refreshed.</p>
        pub fn cache_ttl(mut self, input: impl Into<std::string::String>) -> Self {
            self.cache_ttl = Some(input.into());
            self
        }
        /// <p>The amount of time, in seconds, that the registration status is stored on the device’s cache before it is refreshed.</p>
        pub fn set_cache_ttl(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cache_ttl = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDeviceRegistrationOutput`](crate::output::GetDeviceRegistrationOutput).
        pub fn build(self) -> crate::output::GetDeviceRegistrationOutput {
            crate::output::GetDeviceRegistrationOutput {
                device_registration: self.device_registration,
                cache_ttl: self.cache_ttl,
            }
        }
    }
}
impl GetDeviceRegistrationOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceRegistrationOutput`](crate::output::GetDeviceRegistrationOutput).
    pub fn builder() -> crate::output::get_device_registration_output::Builder {
        crate::output::get_device_registration_output::Builder::default()
    }
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDeploymentsOutput {
    /// <p>Returns a list of the configurations of the active deployments on the device.</p>
    #[doc(hidden)]
    pub deployments: std::option::Option<std::vec::Vec<crate::model::EdgeDeployment>>,
}
impl GetDeploymentsOutput {
    /// <p>Returns a list of the configurations of the active deployments on the device.</p>
    pub fn deployments(&self) -> std::option::Option<&[crate::model::EdgeDeployment]> {
        self.deployments.as_deref()
    }
}
/// See [`GetDeploymentsOutput`](crate::output::GetDeploymentsOutput).
pub mod get_deployments_output {

    /// A builder for [`GetDeploymentsOutput`](crate::output::GetDeploymentsOutput).
    #[non_exhaustive]
    #[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) deployments: std::option::Option<std::vec::Vec<crate::model::EdgeDeployment>>,
    }
    impl Builder {
        /// Appends an item to `deployments`.
        ///
        /// To override the contents of this collection use [`set_deployments`](Self::set_deployments).
        ///
        /// <p>Returns a list of the configurations of the active deployments on the device.</p>
        pub fn deployments(mut self, input: crate::model::EdgeDeployment) -> Self {
            let mut v = self.deployments.unwrap_or_default();
            v.push(input);
            self.deployments = Some(v);
            self
        }
        /// <p>Returns a list of the configurations of the active deployments on the device.</p>
        pub fn set_deployments(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::EdgeDeployment>>,
        ) -> Self {
            self.deployments = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDeploymentsOutput`](crate::output::GetDeploymentsOutput).
        pub fn build(self) -> crate::output::GetDeploymentsOutput {
            crate::output::GetDeploymentsOutput {
                deployments: self.deployments,
            }
        }
    }
}
impl GetDeploymentsOutput {
    /// Creates a new builder-style object to manufacture [`GetDeploymentsOutput`](crate::output::GetDeploymentsOutput).
    pub fn builder() -> crate::output::get_deployments_output::Builder {
        crate::output::get_deployments_output::Builder::default()
    }
}
