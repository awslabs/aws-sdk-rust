// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SendHeartbeatOutput {}
impl std::fmt::Debug for SendHeartbeatOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SendHeartbeatOutput");
        formatter.finish()
    }
}
/// See [`SendHeartbeatOutput`](crate::output::SendHeartbeatOutput)
pub mod send_heartbeat_output {
    /// A builder for [`SendHeartbeatOutput`](crate::output::SendHeartbeatOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`SendHeartbeatOutput`](crate::output::SendHeartbeatOutput)
        pub fn build(self) -> crate::output::SendHeartbeatOutput {
            crate::output::SendHeartbeatOutput {}
        }
    }
}
impl SendHeartbeatOutput {
    /// Creates a new builder-style object to manufacture [`SendHeartbeatOutput`](crate::output::SendHeartbeatOutput)
    pub fn builder() -> crate::output::send_heartbeat_output::Builder {
        crate::output::send_heartbeat_output::Builder::default()
    }
}

#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetDeviceRegistrationOutput {
    /// <p>Describes if the device is currently registered with SageMaker Edge Manager.</p>
    pub device_registration: std::option::Option<std::string::String>,
    /// <p>The amount of time, in seconds, that the registration status is stored on the device’s cache before it is refreshed.</p>
    pub cache_ttl: std::option::Option<std::string::String>,
}
impl std::fmt::Debug for GetDeviceRegistrationOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetDeviceRegistrationOutput");
        formatter.field("device_registration", &self.device_registration);
        formatter.field("cache_ttl", &self.cache_ttl);
        formatter.finish()
    }
}
/// See [`GetDeviceRegistrationOutput`](crate::output::GetDeviceRegistrationOutput)
pub mod get_device_registration_output {
    /// A builder for [`GetDeviceRegistrationOutput`](crate::output::GetDeviceRegistrationOutput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) device_registration: std::option::Option<std::string::String>,
        pub(crate) cache_ttl: std::option::Option<std::string::String>,
    }
    impl Builder {
        /// <p>Describes if the device is currently registered with SageMaker Edge Manager.</p>
        pub fn device_registration(mut self, input: impl Into<std::string::String>) -> Self {
            self.device_registration = Some(input.into());
            self
        }
        pub fn set_device_registration(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.device_registration = input;
            self
        }
        /// <p>The amount of time, in seconds, that the registration status is stored on the device’s cache before it is refreshed.</p>
        pub fn cache_ttl(mut self, input: impl Into<std::string::String>) -> Self {
            self.cache_ttl = Some(input.into());
            self
        }
        pub fn set_cache_ttl(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.cache_ttl = input;
            self
        }
        /// Consumes the builder and constructs a [`GetDeviceRegistrationOutput`](crate::output::GetDeviceRegistrationOutput)
        pub fn build(self) -> crate::output::GetDeviceRegistrationOutput {
            crate::output::GetDeviceRegistrationOutput {
                device_registration: self.device_registration,
                cache_ttl: self.cache_ttl,
            }
        }
    }
}
impl GetDeviceRegistrationOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceRegistrationOutput`](crate::output::GetDeviceRegistrationOutput)
    pub fn builder() -> crate::output::get_device_registration_output::Builder {
        crate::output::get_device_registration_output::Builder::default()
    }
}
