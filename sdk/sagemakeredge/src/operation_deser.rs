// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_device_registration_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetDeviceRegistrationOutput,
    crate::error::GetDeviceRegistrationError,
> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::GetDeviceRegistrationError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetDeviceRegistrationError::unhandled(generic)),
    };
    Err(match error_code {
        "InternalServiceException" => crate::error::GetDeviceRegistrationError {
            meta: generic,
            kind: crate::error::GetDeviceRegistrationErrorKind::InternalServiceError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_service_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::internal_service_exception(response.body().as_ref(), output)
                        .map_err(crate::error::GetDeviceRegistrationError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::GetDeviceRegistrationError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_device_registration_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetDeviceRegistrationOutput,
    crate::error::GetDeviceRegistrationError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_device_registration_output::Builder::default();
        let _ = response;
        output = crate::json_deser::get_device_registration_deser_operation(
            response.body().as_ref(),
            output,
        )
        .map_err(crate::error::GetDeviceRegistrationError::unhandled)?;
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_heartbeat_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::SendHeartbeatOutput, crate::error::SendHeartbeatError> {
    let generic = crate::json_deser::parse_generic_error(&response)
        .map_err(crate::error::SendHeartbeatError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::SendHeartbeatError::unhandled(generic)),
    };
    Err(match error_code {
        "InternalServiceException" => crate::error::SendHeartbeatError {
            meta: generic,
            kind: crate::error::SendHeartbeatErrorKind::InternalServiceError({
                #[allow(unused_mut)]
                let mut output = crate::error::internal_service_error::Builder::default();
                let _ = response;
                output =
                    crate::json_deser::internal_service_exception(response.body().as_ref(), output)
                        .map_err(crate::error::SendHeartbeatError::unhandled)?;
                output.build()
            }),
        },
        _ => crate::error::SendHeartbeatError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_send_heartbeat_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<crate::output::SendHeartbeatOutput, crate::error::SendHeartbeatError> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::send_heartbeat_output::Builder::default();
        let _ = response;
        output.build()
    })
}
