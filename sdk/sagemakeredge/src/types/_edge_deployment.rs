// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a deployment on an edge device that is registered with SageMaker Edge Manager.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EdgeDeployment {
    /// <p>The name and unique ID of the deployment.</p>
    pub deployment_name: ::std::option::Option<::std::string::String>,
    /// <p>The type of the deployment.</p>
    pub r#type: ::std::option::Option<crate::types::DeploymentType>,
    /// <p>Determines whether to rollback to previous configuration if deployment fails.</p>
    pub failure_handling_policy: ::std::option::Option<crate::types::FailureHandlingPolicy>,
    /// <p>Returns a list of Definition objects.</p>
    pub definitions: ::std::option::Option<::std::vec::Vec<crate::types::Definition>>,
}
impl EdgeDeployment {
    /// <p>The name and unique ID of the deployment.</p>
    pub fn deployment_name(&self) -> ::std::option::Option<&str> {
        self.deployment_name.as_deref()
    }
    /// <p>The type of the deployment.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::DeploymentType> {
        self.r#type.as_ref()
    }
    /// <p>Determines whether to rollback to previous configuration if deployment fails.</p>
    pub fn failure_handling_policy(&self) -> ::std::option::Option<&crate::types::FailureHandlingPolicy> {
        self.failure_handling_policy.as_ref()
    }
    /// <p>Returns a list of Definition objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.definitions.is_none()`.
    pub fn definitions(&self) -> &[crate::types::Definition] {
        self.definitions.as_deref().unwrap_or_default()
    }
}
impl EdgeDeployment {
    /// Creates a new builder-style object to manufacture [`EdgeDeployment`](crate::types::EdgeDeployment).
    pub fn builder() -> crate::types::builders::EdgeDeploymentBuilder {
        crate::types::builders::EdgeDeploymentBuilder::default()
    }
}

/// A builder for [`EdgeDeployment`](crate::types::EdgeDeployment).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EdgeDeploymentBuilder {
    pub(crate) deployment_name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::DeploymentType>,
    pub(crate) failure_handling_policy: ::std::option::Option<crate::types::FailureHandlingPolicy>,
    pub(crate) definitions: ::std::option::Option<::std::vec::Vec<crate::types::Definition>>,
}
impl EdgeDeploymentBuilder {
    /// <p>The name and unique ID of the deployment.</p>
    pub fn deployment_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.deployment_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name and unique ID of the deployment.</p>
    pub fn set_deployment_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.deployment_name = input;
        self
    }
    /// <p>The name and unique ID of the deployment.</p>
    pub fn get_deployment_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.deployment_name
    }
    /// <p>The type of the deployment.</p>
    pub fn r#type(mut self, input: crate::types::DeploymentType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the deployment.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DeploymentType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of the deployment.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DeploymentType> {
        &self.r#type
    }
    /// <p>Determines whether to rollback to previous configuration if deployment fails.</p>
    pub fn failure_handling_policy(mut self, input: crate::types::FailureHandlingPolicy) -> Self {
        self.failure_handling_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Determines whether to rollback to previous configuration if deployment fails.</p>
    pub fn set_failure_handling_policy(mut self, input: ::std::option::Option<crate::types::FailureHandlingPolicy>) -> Self {
        self.failure_handling_policy = input;
        self
    }
    /// <p>Determines whether to rollback to previous configuration if deployment fails.</p>
    pub fn get_failure_handling_policy(&self) -> &::std::option::Option<crate::types::FailureHandlingPolicy> {
        &self.failure_handling_policy
    }
    /// Appends an item to `definitions`.
    ///
    /// To override the contents of this collection use [`set_definitions`](Self::set_definitions).
    ///
    /// <p>Returns a list of Definition objects.</p>
    pub fn definitions(mut self, input: crate::types::Definition) -> Self {
        let mut v = self.definitions.unwrap_or_default();
        v.push(input);
        self.definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>Returns a list of Definition objects.</p>
    pub fn set_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Definition>>) -> Self {
        self.definitions = input;
        self
    }
    /// <p>Returns a list of Definition objects.</p>
    pub fn get_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Definition>> {
        &self.definitions
    }
    /// Consumes the builder and constructs a [`EdgeDeployment`](crate::types::EdgeDeployment).
    pub fn build(self) -> crate::types::EdgeDeployment {
        crate::types::EdgeDeployment {
            deployment_name: self.deployment_name,
            r#type: self.r#type,
            failure_handling_policy: self.failure_handling_policy,
            definitions: self.definitions,
        }
    }
}
