// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A rule in the Point in Time (PIT) policy representing when to take snapshots and how long to retain them for.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PitPolicyRule {
    /// <p>The ID of the rule.</p>
    #[doc(hidden)]
    pub rule_id: i64,
    /// <p>The units used to measure the interval and retentionDuration.</p>
    #[doc(hidden)]
    pub units: std::option::Option<crate::types::PitPolicyRuleUnits>,
    /// <p>How often, in the chosen units, a snapshot should be taken.</p>
    #[doc(hidden)]
    pub interval: i32,
    /// <p>The duration to retain a snapshot for, in the chosen units.</p>
    #[doc(hidden)]
    pub retention_duration: i32,
    /// <p>Whether this rule is enabled or not.</p>
    #[doc(hidden)]
    pub enabled: std::option::Option<bool>,
}
impl PitPolicyRule {
    /// <p>The ID of the rule.</p>
    pub fn rule_id(&self) -> i64 {
        self.rule_id
    }
    /// <p>The units used to measure the interval and retentionDuration.</p>
    pub fn units(&self) -> std::option::Option<&crate::types::PitPolicyRuleUnits> {
        self.units.as_ref()
    }
    /// <p>How often, in the chosen units, a snapshot should be taken.</p>
    pub fn interval(&self) -> i32 {
        self.interval
    }
    /// <p>The duration to retain a snapshot for, in the chosen units.</p>
    pub fn retention_duration(&self) -> i32 {
        self.retention_duration
    }
    /// <p>Whether this rule is enabled or not.</p>
    pub fn enabled(&self) -> std::option::Option<bool> {
        self.enabled
    }
}
impl PitPolicyRule {
    /// Creates a new builder-style object to manufacture [`PitPolicyRule`](crate::types::PitPolicyRule).
    pub fn builder() -> crate::types::builders::PitPolicyRuleBuilder {
        crate::types::builders::PitPolicyRuleBuilder::default()
    }
}

/// A builder for [`PitPolicyRule`](crate::types::PitPolicyRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PitPolicyRuleBuilder {
    pub(crate) rule_id: std::option::Option<i64>,
    pub(crate) units: std::option::Option<crate::types::PitPolicyRuleUnits>,
    pub(crate) interval: std::option::Option<i32>,
    pub(crate) retention_duration: std::option::Option<i32>,
    pub(crate) enabled: std::option::Option<bool>,
}
impl PitPolicyRuleBuilder {
    /// <p>The ID of the rule.</p>
    pub fn rule_id(mut self, input: i64) -> Self {
        self.rule_id = Some(input);
        self
    }
    /// <p>The ID of the rule.</p>
    pub fn set_rule_id(mut self, input: std::option::Option<i64>) -> Self {
        self.rule_id = input;
        self
    }
    /// <p>The units used to measure the interval and retentionDuration.</p>
    pub fn units(mut self, input: crate::types::PitPolicyRuleUnits) -> Self {
        self.units = Some(input);
        self
    }
    /// <p>The units used to measure the interval and retentionDuration.</p>
    pub fn set_units(
        mut self,
        input: std::option::Option<crate::types::PitPolicyRuleUnits>,
    ) -> Self {
        self.units = input;
        self
    }
    /// <p>How often, in the chosen units, a snapshot should be taken.</p>
    pub fn interval(mut self, input: i32) -> Self {
        self.interval = Some(input);
        self
    }
    /// <p>How often, in the chosen units, a snapshot should be taken.</p>
    pub fn set_interval(mut self, input: std::option::Option<i32>) -> Self {
        self.interval = input;
        self
    }
    /// <p>The duration to retain a snapshot for, in the chosen units.</p>
    pub fn retention_duration(mut self, input: i32) -> Self {
        self.retention_duration = Some(input);
        self
    }
    /// <p>The duration to retain a snapshot for, in the chosen units.</p>
    pub fn set_retention_duration(mut self, input: std::option::Option<i32>) -> Self {
        self.retention_duration = input;
        self
    }
    /// <p>Whether this rule is enabled or not.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Whether this rule is enabled or not.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`PitPolicyRule`](crate::types::PitPolicyRule).
    pub fn build(self) -> crate::types::PitPolicyRule {
        crate::types::PitPolicyRule {
            rule_id: self.rule_id.unwrap_or_default(),
            units: self.units,
            interval: self.interval.unwrap_or_default(),
            retention_duration: self.retention_duration.unwrap_or_default(),
            enabled: self.enabled,
        }
    }
}
