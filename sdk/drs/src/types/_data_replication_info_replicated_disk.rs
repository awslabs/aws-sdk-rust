// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A disk that should be replicated.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataReplicationInfoReplicatedDisk {
    /// <p>The name of the device.</p>
    #[doc(hidden)]
    pub device_name: std::option::Option<std::string::String>,
    /// <p>The total amount of data to be replicated in bytes.</p>
    #[doc(hidden)]
    pub total_storage_bytes: i64,
    /// <p>The amount of data replicated so far in bytes.</p>
    #[doc(hidden)]
    pub replicated_storage_bytes: i64,
    /// <p>The amount of data to be rescanned in bytes.</p>
    #[doc(hidden)]
    pub rescanned_storage_bytes: i64,
    /// <p>The size of the replication backlog in bytes.</p>
    #[doc(hidden)]
    pub backlogged_storage_bytes: i64,
}
impl DataReplicationInfoReplicatedDisk {
    /// <p>The name of the device.</p>
    pub fn device_name(&self) -> std::option::Option<&str> {
        self.device_name.as_deref()
    }
    /// <p>The total amount of data to be replicated in bytes.</p>
    pub fn total_storage_bytes(&self) -> i64 {
        self.total_storage_bytes
    }
    /// <p>The amount of data replicated so far in bytes.</p>
    pub fn replicated_storage_bytes(&self) -> i64 {
        self.replicated_storage_bytes
    }
    /// <p>The amount of data to be rescanned in bytes.</p>
    pub fn rescanned_storage_bytes(&self) -> i64 {
        self.rescanned_storage_bytes
    }
    /// <p>The size of the replication backlog in bytes.</p>
    pub fn backlogged_storage_bytes(&self) -> i64 {
        self.backlogged_storage_bytes
    }
}
impl DataReplicationInfoReplicatedDisk {
    /// Creates a new builder-style object to manufacture [`DataReplicationInfoReplicatedDisk`](crate::types::DataReplicationInfoReplicatedDisk).
    pub fn builder() -> crate::types::builders::DataReplicationInfoReplicatedDiskBuilder {
        crate::types::builders::DataReplicationInfoReplicatedDiskBuilder::default()
    }
}

/// A builder for [`DataReplicationInfoReplicatedDisk`](crate::types::DataReplicationInfoReplicatedDisk).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataReplicationInfoReplicatedDiskBuilder {
    pub(crate) device_name: std::option::Option<std::string::String>,
    pub(crate) total_storage_bytes: std::option::Option<i64>,
    pub(crate) replicated_storage_bytes: std::option::Option<i64>,
    pub(crate) rescanned_storage_bytes: std::option::Option<i64>,
    pub(crate) backlogged_storage_bytes: std::option::Option<i64>,
}
impl DataReplicationInfoReplicatedDiskBuilder {
    /// <p>The name of the device.</p>
    pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.device_name = Some(input.into());
        self
    }
    /// <p>The name of the device.</p>
    pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.device_name = input;
        self
    }
    /// <p>The total amount of data to be replicated in bytes.</p>
    pub fn total_storage_bytes(mut self, input: i64) -> Self {
        self.total_storage_bytes = Some(input);
        self
    }
    /// <p>The total amount of data to be replicated in bytes.</p>
    pub fn set_total_storage_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.total_storage_bytes = input;
        self
    }
    /// <p>The amount of data replicated so far in bytes.</p>
    pub fn replicated_storage_bytes(mut self, input: i64) -> Self {
        self.replicated_storage_bytes = Some(input);
        self
    }
    /// <p>The amount of data replicated so far in bytes.</p>
    pub fn set_replicated_storage_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.replicated_storage_bytes = input;
        self
    }
    /// <p>The amount of data to be rescanned in bytes.</p>
    pub fn rescanned_storage_bytes(mut self, input: i64) -> Self {
        self.rescanned_storage_bytes = Some(input);
        self
    }
    /// <p>The amount of data to be rescanned in bytes.</p>
    pub fn set_rescanned_storage_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.rescanned_storage_bytes = input;
        self
    }
    /// <p>The size of the replication backlog in bytes.</p>
    pub fn backlogged_storage_bytes(mut self, input: i64) -> Self {
        self.backlogged_storage_bytes = Some(input);
        self
    }
    /// <p>The size of the replication backlog in bytes.</p>
    pub fn set_backlogged_storage_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.backlogged_storage_bytes = input;
        self
    }
    /// Consumes the builder and constructs a [`DataReplicationInfoReplicatedDisk`](crate::types::DataReplicationInfoReplicatedDisk).
    pub fn build(self) -> crate::types::DataReplicationInfoReplicatedDisk {
        crate::types::DataReplicationInfoReplicatedDisk {
            device_name: self.device_name,
            total_storage_bytes: self.total_storage_bytes.unwrap_or_default(),
            replicated_storage_bytes: self.replicated_storage_bytes.unwrap_or_default(),
            rescanned_storage_bytes: self.rescanned_storage_bytes.unwrap_or_default(),
            backlogged_storage_bytes: self.backlogged_storage_bytes.unwrap_or_default(),
        }
    }
}
