// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration of a machine's license.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Licensing {
    /// <p>Whether to enable "Bring your own license" or not.</p>
    #[doc(hidden)]
    pub os_byol: std::option::Option<bool>,
}
impl Licensing {
    /// <p>Whether to enable "Bring your own license" or not.</p>
    pub fn os_byol(&self) -> std::option::Option<bool> {
        self.os_byol
    }
}
impl Licensing {
    /// Creates a new builder-style object to manufacture [`Licensing`](crate::types::Licensing).
    pub fn builder() -> crate::types::builders::LicensingBuilder {
        crate::types::builders::LicensingBuilder::default()
    }
}

/// A builder for [`Licensing`](crate::types::Licensing).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LicensingBuilder {
    pub(crate) os_byol: std::option::Option<bool>,
}
impl LicensingBuilder {
    /// <p>Whether to enable "Bring your own license" or not.</p>
    pub fn os_byol(mut self, input: bool) -> Self {
        self.os_byol = Some(input);
        self
    }
    /// <p>Whether to enable "Bring your own license" or not.</p>
    pub fn set_os_byol(mut self, input: std::option::Option<bool>) -> Self {
        self.os_byol = input;
        self
    }
    /// Consumes the builder and constructs a [`Licensing`](crate::types::Licensing).
    pub fn build(self) -> crate::types::Licensing {
        crate::types::Licensing {
            os_byol: self.os_byol,
        }
    }
}
