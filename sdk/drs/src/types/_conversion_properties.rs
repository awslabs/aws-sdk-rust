// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties of a conversion job</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ConversionProperties {
    /// <p>A mapping between the volumes being converted and the converted snapshot ids</p>
    #[doc(hidden)]
    pub volume_to_conversion_map: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    >,
    /// <p>The root volume name of a conversion job</p>
    #[doc(hidden)]
    pub root_volume_name: std::option::Option<std::string::String>,
    /// <p>Whether the volume being converted uses UEFI or not</p>
    #[doc(hidden)]
    pub force_uefi: std::option::Option<bool>,
    /// <p>The timestamp of when the snapshot being converted was taken</p>
    #[doc(hidden)]
    pub data_timestamp: std::option::Option<std::string::String>,
    /// <p>A mapping between the volumes and their sizes</p>
    #[doc(hidden)]
    pub volume_to_volume_size:
        std::option::Option<std::collections::HashMap<std::string::String, i64>>,
}
impl ConversionProperties {
    /// <p>A mapping between the volumes being converted and the converted snapshot ids</p>
    pub fn volume_to_conversion_map(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    > {
        self.volume_to_conversion_map.as_ref()
    }
    /// <p>The root volume name of a conversion job</p>
    pub fn root_volume_name(&self) -> std::option::Option<&str> {
        self.root_volume_name.as_deref()
    }
    /// <p>Whether the volume being converted uses UEFI or not</p>
    pub fn force_uefi(&self) -> std::option::Option<bool> {
        self.force_uefi
    }
    /// <p>The timestamp of when the snapshot being converted was taken</p>
    pub fn data_timestamp(&self) -> std::option::Option<&str> {
        self.data_timestamp.as_deref()
    }
    /// <p>A mapping between the volumes and their sizes</p>
    pub fn volume_to_volume_size(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, i64>> {
        self.volume_to_volume_size.as_ref()
    }
}
impl ConversionProperties {
    /// Creates a new builder-style object to manufacture [`ConversionProperties`](crate::types::ConversionProperties).
    pub fn builder() -> crate::types::builders::ConversionPropertiesBuilder {
        crate::types::builders::ConversionPropertiesBuilder::default()
    }
}

/// A builder for [`ConversionProperties`](crate::types::ConversionProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ConversionPropertiesBuilder {
    pub(crate) volume_to_conversion_map: std::option::Option<
        std::collections::HashMap<
            std::string::String,
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    >,
    pub(crate) root_volume_name: std::option::Option<std::string::String>,
    pub(crate) force_uefi: std::option::Option<bool>,
    pub(crate) data_timestamp: std::option::Option<std::string::String>,
    pub(crate) volume_to_volume_size:
        std::option::Option<std::collections::HashMap<std::string::String, i64>>,
}
impl ConversionPropertiesBuilder {
    /// Adds a key-value pair to `volume_to_conversion_map`.
    ///
    /// To override the contents of this collection use [`set_volume_to_conversion_map`](Self::set_volume_to_conversion_map).
    ///
    /// <p>A mapping between the volumes being converted and the converted snapshot ids</p>
    pub fn volume_to_conversion_map(
        mut self,
        k: impl Into<std::string::String>,
        v: std::collections::HashMap<std::string::String, std::string::String>,
    ) -> Self {
        let mut hash_map = self.volume_to_conversion_map.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.volume_to_conversion_map = Some(hash_map);
        self
    }
    /// <p>A mapping between the volumes being converted and the converted snapshot ids</p>
    pub fn set_volume_to_conversion_map(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        >,
    ) -> Self {
        self.volume_to_conversion_map = input;
        self
    }
    /// <p>The root volume name of a conversion job</p>
    pub fn root_volume_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.root_volume_name = Some(input.into());
        self
    }
    /// <p>The root volume name of a conversion job</p>
    pub fn set_root_volume_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.root_volume_name = input;
        self
    }
    /// <p>Whether the volume being converted uses UEFI or not</p>
    pub fn force_uefi(mut self, input: bool) -> Self {
        self.force_uefi = Some(input);
        self
    }
    /// <p>Whether the volume being converted uses UEFI or not</p>
    pub fn set_force_uefi(mut self, input: std::option::Option<bool>) -> Self {
        self.force_uefi = input;
        self
    }
    /// <p>The timestamp of when the snapshot being converted was taken</p>
    pub fn data_timestamp(mut self, input: impl Into<std::string::String>) -> Self {
        self.data_timestamp = Some(input.into());
        self
    }
    /// <p>The timestamp of when the snapshot being converted was taken</p>
    pub fn set_data_timestamp(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.data_timestamp = input;
        self
    }
    /// Adds a key-value pair to `volume_to_volume_size`.
    ///
    /// To override the contents of this collection use [`set_volume_to_volume_size`](Self::set_volume_to_volume_size).
    ///
    /// <p>A mapping between the volumes and their sizes</p>
    pub fn volume_to_volume_size(mut self, k: impl Into<std::string::String>, v: i64) -> Self {
        let mut hash_map = self.volume_to_volume_size.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.volume_to_volume_size = Some(hash_map);
        self
    }
    /// <p>A mapping between the volumes and their sizes</p>
    pub fn set_volume_to_volume_size(
        mut self,
        input: std::option::Option<std::collections::HashMap<std::string::String, i64>>,
    ) -> Self {
        self.volume_to_volume_size = input;
        self
    }
    /// Consumes the builder and constructs a [`ConversionProperties`](crate::types::ConversionProperties).
    pub fn build(self) -> crate::types::ConversionProperties {
        crate::types::ConversionProperties {
            volume_to_conversion_map: self.volume_to_conversion_map,
            root_volume_name: self.root_volume_name,
            force_uefi: self.force_uefi,
            data_timestamp: self.data_timestamp,
            volume_to_volume_size: self.volume_to_volume_size,
        }
    }
}
