// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A Recovery Instance is a replica of a Source Server running on EC2.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct RecoveryInstance {
    /// <p>The EC2 instance ID of the Recovery Instance.</p>
    pub ec2_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The state of the EC2 instance for this Recovery Instance.</p>
    pub ec2_instance_state: ::std::option::Option<crate::types::Ec2InstanceState>,
    /// <p>The ID of the Job that created the Recovery Instance.</p>
    pub job_id: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the Recovery Instance.</p>
    pub recovery_instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The Source Server ID that this Recovery Instance is associated with.</p>
    pub source_server_id: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the Recovery Instance.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>An array of tags that are associated with the Recovery Instance.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>An object representing failback related information of the Recovery Instance.</p>
    pub failback: ::std::option::Option<crate::types::RecoveryInstanceFailback>,
    /// <p>The Data Replication Info of the Recovery Instance.</p>
    pub data_replication_info: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationInfo>,
    /// <p>Properties of the Recovery Instance machine.</p>
    pub recovery_instance_properties: ::std::option::Option<crate::types::RecoveryInstanceProperties>,
    /// <p>The date and time of the Point in Time (PIT) snapshot that this Recovery Instance was launched from.</p>
    pub point_in_time_snapshot_date_time: ::std::option::Option<::std::string::String>,
    /// <p>Whether this Recovery Instance was created for a drill or for an actual Recovery event.</p>
    pub is_drill: ::std::option::Option<bool>,
    /// <p>Environment (On Premises / AWS) of the instance that the recovery instance originated from.</p>
    pub origin_environment: ::std::option::Option<crate::types::OriginEnvironment>,
    /// <p>AWS availability zone associated with the recovery instance.</p>
    pub origin_availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The version of the DRS agent installed on the recovery instance</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the source Outpost</p>
    pub source_outpost_arn: ::std::option::Option<::std::string::String>,
}
impl RecoveryInstance {
    /// <p>The EC2 instance ID of the Recovery Instance.</p>
    pub fn ec2_instance_id(&self) -> ::std::option::Option<&str> {
        self.ec2_instance_id.as_deref()
    }
    /// <p>The state of the EC2 instance for this Recovery Instance.</p>
    pub fn ec2_instance_state(&self) -> ::std::option::Option<&crate::types::Ec2InstanceState> {
        self.ec2_instance_state.as_ref()
    }
    /// <p>The ID of the Job that created the Recovery Instance.</p>
    pub fn job_id(&self) -> ::std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The ID of the Recovery Instance.</p>
    pub fn recovery_instance_id(&self) -> ::std::option::Option<&str> {
        self.recovery_instance_id.as_deref()
    }
    /// <p>The Source Server ID that this Recovery Instance is associated with.</p>
    pub fn source_server_id(&self) -> ::std::option::Option<&str> {
        self.source_server_id.as_deref()
    }
    /// <p>The ARN of the Recovery Instance.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>An array of tags that are associated with the Recovery Instance.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>An object representing failback related information of the Recovery Instance.</p>
    pub fn failback(&self) -> ::std::option::Option<&crate::types::RecoveryInstanceFailback> {
        self.failback.as_ref()
    }
    /// <p>The Data Replication Info of the Recovery Instance.</p>
    pub fn data_replication_info(&self) -> ::std::option::Option<&crate::types::RecoveryInstanceDataReplicationInfo> {
        self.data_replication_info.as_ref()
    }
    /// <p>Properties of the Recovery Instance machine.</p>
    pub fn recovery_instance_properties(&self) -> ::std::option::Option<&crate::types::RecoveryInstanceProperties> {
        self.recovery_instance_properties.as_ref()
    }
    /// <p>The date and time of the Point in Time (PIT) snapshot that this Recovery Instance was launched from.</p>
    pub fn point_in_time_snapshot_date_time(&self) -> ::std::option::Option<&str> {
        self.point_in_time_snapshot_date_time.as_deref()
    }
    /// <p>Whether this Recovery Instance was created for a drill or for an actual Recovery event.</p>
    pub fn is_drill(&self) -> ::std::option::Option<bool> {
        self.is_drill
    }
    /// <p>Environment (On Premises / AWS) of the instance that the recovery instance originated from.</p>
    pub fn origin_environment(&self) -> ::std::option::Option<&crate::types::OriginEnvironment> {
        self.origin_environment.as_ref()
    }
    /// <p>AWS availability zone associated with the recovery instance.</p>
    pub fn origin_availability_zone(&self) -> ::std::option::Option<&str> {
        self.origin_availability_zone.as_deref()
    }
    /// <p>The version of the DRS agent installed on the recovery instance</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>The ARN of the source Outpost</p>
    pub fn source_outpost_arn(&self) -> ::std::option::Option<&str> {
        self.source_outpost_arn.as_deref()
    }
}
impl ::std::fmt::Debug for RecoveryInstance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RecoveryInstance");
        formatter.field("ec2_instance_id", &self.ec2_instance_id);
        formatter.field("ec2_instance_state", &self.ec2_instance_state);
        formatter.field("job_id", &self.job_id);
        formatter.field("recovery_instance_id", &self.recovery_instance_id);
        formatter.field("source_server_id", &self.source_server_id);
        formatter.field("arn", &self.arn);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("failback", &self.failback);
        formatter.field("data_replication_info", &self.data_replication_info);
        formatter.field("recovery_instance_properties", &self.recovery_instance_properties);
        formatter.field("point_in_time_snapshot_date_time", &self.point_in_time_snapshot_date_time);
        formatter.field("is_drill", &self.is_drill);
        formatter.field("origin_environment", &self.origin_environment);
        formatter.field("origin_availability_zone", &self.origin_availability_zone);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("source_outpost_arn", &self.source_outpost_arn);
        formatter.finish()
    }
}
impl RecoveryInstance {
    /// Creates a new builder-style object to manufacture [`RecoveryInstance`](crate::types::RecoveryInstance).
    pub fn builder() -> crate::types::builders::RecoveryInstanceBuilder {
        crate::types::builders::RecoveryInstanceBuilder::default()
    }
}

/// A builder for [`RecoveryInstance`](crate::types::RecoveryInstance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct RecoveryInstanceBuilder {
    pub(crate) ec2_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) ec2_instance_state: ::std::option::Option<crate::types::Ec2InstanceState>,
    pub(crate) job_id: ::std::option::Option<::std::string::String>,
    pub(crate) recovery_instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) failback: ::std::option::Option<crate::types::RecoveryInstanceFailback>,
    pub(crate) data_replication_info: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationInfo>,
    pub(crate) recovery_instance_properties: ::std::option::Option<crate::types::RecoveryInstanceProperties>,
    pub(crate) point_in_time_snapshot_date_time: ::std::option::Option<::std::string::String>,
    pub(crate) is_drill: ::std::option::Option<bool>,
    pub(crate) origin_environment: ::std::option::Option<crate::types::OriginEnvironment>,
    pub(crate) origin_availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) source_outpost_arn: ::std::option::Option<::std::string::String>,
}
impl RecoveryInstanceBuilder {
    /// <p>The EC2 instance ID of the Recovery Instance.</p>
    pub fn ec2_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ec2_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The EC2 instance ID of the Recovery Instance.</p>
    pub fn set_ec2_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ec2_instance_id = input;
        self
    }
    /// <p>The EC2 instance ID of the Recovery Instance.</p>
    pub fn get_ec2_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.ec2_instance_id
    }
    /// <p>The state of the EC2 instance for this Recovery Instance.</p>
    pub fn ec2_instance_state(mut self, input: crate::types::Ec2InstanceState) -> Self {
        self.ec2_instance_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the EC2 instance for this Recovery Instance.</p>
    pub fn set_ec2_instance_state(mut self, input: ::std::option::Option<crate::types::Ec2InstanceState>) -> Self {
        self.ec2_instance_state = input;
        self
    }
    /// <p>The state of the EC2 instance for this Recovery Instance.</p>
    pub fn get_ec2_instance_state(&self) -> &::std::option::Option<crate::types::Ec2InstanceState> {
        &self.ec2_instance_state
    }
    /// <p>The ID of the Job that created the Recovery Instance.</p>
    pub fn job_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Job that created the Recovery Instance.</p>
    pub fn set_job_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The ID of the Job that created the Recovery Instance.</p>
    pub fn get_job_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.job_id
    }
    /// <p>The ID of the Recovery Instance.</p>
    pub fn recovery_instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recovery_instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Recovery Instance.</p>
    pub fn set_recovery_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recovery_instance_id = input;
        self
    }
    /// <p>The ID of the Recovery Instance.</p>
    pub fn get_recovery_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recovery_instance_id
    }
    /// <p>The Source Server ID that this Recovery Instance is associated with.</p>
    pub fn source_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Source Server ID that this Recovery Instance is associated with.</p>
    pub fn set_source_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>The Source Server ID that this Recovery Instance is associated with.</p>
    pub fn get_source_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_server_id
    }
    /// <p>The ARN of the Recovery Instance.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Recovery Instance.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the Recovery Instance.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>An array of tags that are associated with the Recovery Instance.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>An array of tags that are associated with the Recovery Instance.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>An array of tags that are associated with the Recovery Instance.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>An object representing failback related information of the Recovery Instance.</p>
    pub fn failback(mut self, input: crate::types::RecoveryInstanceFailback) -> Self {
        self.failback = ::std::option::Option::Some(input);
        self
    }
    /// <p>An object representing failback related information of the Recovery Instance.</p>
    pub fn set_failback(mut self, input: ::std::option::Option<crate::types::RecoveryInstanceFailback>) -> Self {
        self.failback = input;
        self
    }
    /// <p>An object representing failback related information of the Recovery Instance.</p>
    pub fn get_failback(&self) -> &::std::option::Option<crate::types::RecoveryInstanceFailback> {
        &self.failback
    }
    /// <p>The Data Replication Info of the Recovery Instance.</p>
    pub fn data_replication_info(mut self, input: crate::types::RecoveryInstanceDataReplicationInfo) -> Self {
        self.data_replication_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Data Replication Info of the Recovery Instance.</p>
    pub fn set_data_replication_info(mut self, input: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationInfo>) -> Self {
        self.data_replication_info = input;
        self
    }
    /// <p>The Data Replication Info of the Recovery Instance.</p>
    pub fn get_data_replication_info(&self) -> &::std::option::Option<crate::types::RecoveryInstanceDataReplicationInfo> {
        &self.data_replication_info
    }
    /// <p>Properties of the Recovery Instance machine.</p>
    pub fn recovery_instance_properties(mut self, input: crate::types::RecoveryInstanceProperties) -> Self {
        self.recovery_instance_properties = ::std::option::Option::Some(input);
        self
    }
    /// <p>Properties of the Recovery Instance machine.</p>
    pub fn set_recovery_instance_properties(mut self, input: ::std::option::Option<crate::types::RecoveryInstanceProperties>) -> Self {
        self.recovery_instance_properties = input;
        self
    }
    /// <p>Properties of the Recovery Instance machine.</p>
    pub fn get_recovery_instance_properties(&self) -> &::std::option::Option<crate::types::RecoveryInstanceProperties> {
        &self.recovery_instance_properties
    }
    /// <p>The date and time of the Point in Time (PIT) snapshot that this Recovery Instance was launched from.</p>
    pub fn point_in_time_snapshot_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.point_in_time_snapshot_date_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The date and time of the Point in Time (PIT) snapshot that this Recovery Instance was launched from.</p>
    pub fn set_point_in_time_snapshot_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.point_in_time_snapshot_date_time = input;
        self
    }
    /// <p>The date and time of the Point in Time (PIT) snapshot that this Recovery Instance was launched from.</p>
    pub fn get_point_in_time_snapshot_date_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.point_in_time_snapshot_date_time
    }
    /// <p>Whether this Recovery Instance was created for a drill or for an actual Recovery event.</p>
    pub fn is_drill(mut self, input: bool) -> Self {
        self.is_drill = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether this Recovery Instance was created for a drill or for an actual Recovery event.</p>
    pub fn set_is_drill(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_drill = input;
        self
    }
    /// <p>Whether this Recovery Instance was created for a drill or for an actual Recovery event.</p>
    pub fn get_is_drill(&self) -> &::std::option::Option<bool> {
        &self.is_drill
    }
    /// <p>Environment (On Premises / AWS) of the instance that the recovery instance originated from.</p>
    pub fn origin_environment(mut self, input: crate::types::OriginEnvironment) -> Self {
        self.origin_environment = ::std::option::Option::Some(input);
        self
    }
    /// <p>Environment (On Premises / AWS) of the instance that the recovery instance originated from.</p>
    pub fn set_origin_environment(mut self, input: ::std::option::Option<crate::types::OriginEnvironment>) -> Self {
        self.origin_environment = input;
        self
    }
    /// <p>Environment (On Premises / AWS) of the instance that the recovery instance originated from.</p>
    pub fn get_origin_environment(&self) -> &::std::option::Option<crate::types::OriginEnvironment> {
        &self.origin_environment
    }
    /// <p>AWS availability zone associated with the recovery instance.</p>
    pub fn origin_availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>AWS availability zone associated with the recovery instance.</p>
    pub fn set_origin_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_availability_zone = input;
        self
    }
    /// <p>AWS availability zone associated with the recovery instance.</p>
    pub fn get_origin_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_availability_zone
    }
    /// <p>The version of the DRS agent installed on the recovery instance</p>
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the DRS agent installed on the recovery instance</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version of the DRS agent installed on the recovery instance</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The ARN of the source Outpost</p>
    pub fn source_outpost_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_outpost_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the source Outpost</p>
    pub fn set_source_outpost_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_outpost_arn = input;
        self
    }
    /// <p>The ARN of the source Outpost</p>
    pub fn get_source_outpost_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_outpost_arn
    }
    /// Consumes the builder and constructs a [`RecoveryInstance`](crate::types::RecoveryInstance).
    pub fn build(self) -> crate::types::RecoveryInstance {
        crate::types::RecoveryInstance {
            ec2_instance_id: self.ec2_instance_id,
            ec2_instance_state: self.ec2_instance_state,
            job_id: self.job_id,
            recovery_instance_id: self.recovery_instance_id,
            source_server_id: self.source_server_id,
            arn: self.arn,
            tags: self.tags,
            failback: self.failback,
            data_replication_info: self.data_replication_info,
            recovery_instance_properties: self.recovery_instance_properties,
            point_in_time_snapshot_date_time: self.point_in_time_snapshot_date_time,
            is_drill: self.is_drill,
            origin_environment: self.origin_environment,
            origin_availability_zone: self.origin_availability_zone,
            agent_version: self.agent_version,
            source_outpost_arn: self.source_outpost_arn,
        }
    }
}
impl ::std::fmt::Debug for RecoveryInstanceBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("RecoveryInstanceBuilder");
        formatter.field("ec2_instance_id", &self.ec2_instance_id);
        formatter.field("ec2_instance_state", &self.ec2_instance_state);
        formatter.field("job_id", &self.job_id);
        formatter.field("recovery_instance_id", &self.recovery_instance_id);
        formatter.field("source_server_id", &self.source_server_id);
        formatter.field("arn", &self.arn);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.field("failback", &self.failback);
        formatter.field("data_replication_info", &self.data_replication_info);
        formatter.field("recovery_instance_properties", &self.recovery_instance_properties);
        formatter.field("point_in_time_snapshot_date_time", &self.point_in_time_snapshot_date_time);
        formatter.field("is_drill", &self.is_drill);
        formatter.field("origin_environment", &self.origin_environment);
        formatter.field("origin_availability_zone", &self.origin_availability_zone);
        formatter.field("agent_version", &self.agent_version);
        formatter.field("source_outpost_arn", &self.source_outpost_arn);
        formatter.finish()
    }
}
