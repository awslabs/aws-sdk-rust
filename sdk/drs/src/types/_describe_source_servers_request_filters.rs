// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of filters by which to return Source Servers.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeSourceServersRequestFilters {
    /// <p>An array of Source Servers IDs that should be returned. An empty array means all Source Servers.</p>
    #[doc(hidden)]
    pub source_server_i_ds: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An ID that describes the hardware of the Source Server. This is either an EC2 instance id, a VMware uuid or a mac address.</p>
    #[doc(hidden)]
    pub hardware_id: std::option::Option<std::string::String>,
    /// <p>An array of staging account IDs that extended source servers belong to. An empty array means all source servers will be shown.</p>
    #[doc(hidden)]
    pub staging_account_i_ds: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeSourceServersRequestFilters {
    /// <p>An array of Source Servers IDs that should be returned. An empty array means all Source Servers.</p>
    pub fn source_server_i_ds(&self) -> std::option::Option<&[std::string::String]> {
        self.source_server_i_ds.as_deref()
    }
    /// <p>An ID that describes the hardware of the Source Server. This is either an EC2 instance id, a VMware uuid or a mac address.</p>
    pub fn hardware_id(&self) -> std::option::Option<&str> {
        self.hardware_id.as_deref()
    }
    /// <p>An array of staging account IDs that extended source servers belong to. An empty array means all source servers will be shown.</p>
    pub fn staging_account_i_ds(&self) -> std::option::Option<&[std::string::String]> {
        self.staging_account_i_ds.as_deref()
    }
}
impl DescribeSourceServersRequestFilters {
    /// Creates a new builder-style object to manufacture [`DescribeSourceServersRequestFilters`](crate::types::DescribeSourceServersRequestFilters).
    pub fn builder() -> crate::types::builders::DescribeSourceServersRequestFiltersBuilder {
        crate::types::builders::DescribeSourceServersRequestFiltersBuilder::default()
    }
}

/// A builder for [`DescribeSourceServersRequestFilters`](crate::types::DescribeSourceServersRequestFilters).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeSourceServersRequestFiltersBuilder {
    pub(crate) source_server_i_ds: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) hardware_id: std::option::Option<std::string::String>,
    pub(crate) staging_account_i_ds: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl DescribeSourceServersRequestFiltersBuilder {
    /// Appends an item to `source_server_i_ds`.
    ///
    /// To override the contents of this collection use [`set_source_server_i_ds`](Self::set_source_server_i_ds).
    ///
    /// <p>An array of Source Servers IDs that should be returned. An empty array means all Source Servers.</p>
    pub fn source_server_i_ds(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.source_server_i_ds.unwrap_or_default();
        v.push(input.into());
        self.source_server_i_ds = Some(v);
        self
    }
    /// <p>An array of Source Servers IDs that should be returned. An empty array means all Source Servers.</p>
    pub fn set_source_server_i_ds(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.source_server_i_ds = input;
        self
    }
    /// <p>An ID that describes the hardware of the Source Server. This is either an EC2 instance id, a VMware uuid or a mac address.</p>
    pub fn hardware_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.hardware_id = Some(input.into());
        self
    }
    /// <p>An ID that describes the hardware of the Source Server. This is either an EC2 instance id, a VMware uuid or a mac address.</p>
    pub fn set_hardware_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.hardware_id = input;
        self
    }
    /// Appends an item to `staging_account_i_ds`.
    ///
    /// To override the contents of this collection use [`set_staging_account_i_ds`](Self::set_staging_account_i_ds).
    ///
    /// <p>An array of staging account IDs that extended source servers belong to. An empty array means all source servers will be shown.</p>
    pub fn staging_account_i_ds(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.staging_account_i_ds.unwrap_or_default();
        v.push(input.into());
        self.staging_account_i_ds = Some(v);
        self
    }
    /// <p>An array of staging account IDs that extended source servers belong to. An empty array means all source servers will be shown.</p>
    pub fn set_staging_account_i_ds(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.staging_account_i_ds = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeSourceServersRequestFilters`](crate::types::DescribeSourceServersRequestFilters).
    pub fn build(self) -> crate::types::DescribeSourceServersRequestFilters {
        crate::types::DescribeSourceServersRequestFilters {
            source_server_i_ds: self.source_server_i_ds,
            hardware_id: self.hardware_id,
            staging_account_i_ds: self.staging_account_i_ds,
        }
    }
}
