// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Metadata associated with a Job log.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct JobLogEventData {
    /// <p>The ID of a Source Server.</p>
    #[doc(hidden)]
    pub source_server_id: std::option::Option<std::string::String>,
    /// <p>The ID of a conversion server.</p>
    #[doc(hidden)]
    pub conversion_server_id: std::option::Option<std::string::String>,
    /// <p>The ID of a Recovery Instance.</p>
    #[doc(hidden)]
    pub target_instance_id: std::option::Option<std::string::String>,
    /// <p>A string representing a job error.</p>
    #[doc(hidden)]
    pub raw_error: std::option::Option<std::string::String>,
    /// <p>Properties of a conversion job</p>
    #[doc(hidden)]
    pub conversion_properties: std::option::Option<crate::types::ConversionProperties>,
}
impl JobLogEventData {
    /// <p>The ID of a Source Server.</p>
    pub fn source_server_id(&self) -> std::option::Option<&str> {
        self.source_server_id.as_deref()
    }
    /// <p>The ID of a conversion server.</p>
    pub fn conversion_server_id(&self) -> std::option::Option<&str> {
        self.conversion_server_id.as_deref()
    }
    /// <p>The ID of a Recovery Instance.</p>
    pub fn target_instance_id(&self) -> std::option::Option<&str> {
        self.target_instance_id.as_deref()
    }
    /// <p>A string representing a job error.</p>
    pub fn raw_error(&self) -> std::option::Option<&str> {
        self.raw_error.as_deref()
    }
    /// <p>Properties of a conversion job</p>
    pub fn conversion_properties(
        &self,
    ) -> std::option::Option<&crate::types::ConversionProperties> {
        self.conversion_properties.as_ref()
    }
}
impl JobLogEventData {
    /// Creates a new builder-style object to manufacture [`JobLogEventData`](crate::types::JobLogEventData).
    pub fn builder() -> crate::types::builders::JobLogEventDataBuilder {
        crate::types::builders::JobLogEventDataBuilder::default()
    }
}

/// A builder for [`JobLogEventData`](crate::types::JobLogEventData).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct JobLogEventDataBuilder {
    pub(crate) source_server_id: std::option::Option<std::string::String>,
    pub(crate) conversion_server_id: std::option::Option<std::string::String>,
    pub(crate) target_instance_id: std::option::Option<std::string::String>,
    pub(crate) raw_error: std::option::Option<std::string::String>,
    pub(crate) conversion_properties: std::option::Option<crate::types::ConversionProperties>,
}
impl JobLogEventDataBuilder {
    /// <p>The ID of a Source Server.</p>
    pub fn source_server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_server_id = Some(input.into());
        self
    }
    /// <p>The ID of a Source Server.</p>
    pub fn set_source_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>The ID of a conversion server.</p>
    pub fn conversion_server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.conversion_server_id = Some(input.into());
        self
    }
    /// <p>The ID of a conversion server.</p>
    pub fn set_conversion_server_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.conversion_server_id = input;
        self
    }
    /// <p>The ID of a Recovery Instance.</p>
    pub fn target_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_instance_id = Some(input.into());
        self
    }
    /// <p>The ID of a Recovery Instance.</p>
    pub fn set_target_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.target_instance_id = input;
        self
    }
    /// <p>A string representing a job error.</p>
    pub fn raw_error(mut self, input: impl Into<std::string::String>) -> Self {
        self.raw_error = Some(input.into());
        self
    }
    /// <p>A string representing a job error.</p>
    pub fn set_raw_error(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.raw_error = input;
        self
    }
    /// <p>Properties of a conversion job</p>
    pub fn conversion_properties(mut self, input: crate::types::ConversionProperties) -> Self {
        self.conversion_properties = Some(input);
        self
    }
    /// <p>Properties of a conversion job</p>
    pub fn set_conversion_properties(
        mut self,
        input: std::option::Option<crate::types::ConversionProperties>,
    ) -> Self {
        self.conversion_properties = input;
        self
    }
    /// Consumes the builder and constructs a [`JobLogEventData`](crate::types::JobLogEventData).
    pub fn build(self) -> crate::types::JobLogEventData {
        crate::types::JobLogEventData {
            source_server_id: self.source_server_id,
            conversion_server_id: self.conversion_server_id,
            target_instance_id: self.target_instance_id,
            raw_error: self.raw_error,
            conversion_properties: self.conversion_properties,
        }
    }
}
