// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a server participating in an asynchronous Job.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ParticipatingServer {
    /// <p>The Source Server ID of a participating server.</p>
    #[doc(hidden)]
    pub source_server_id: std::option::Option<std::string::String>,
    /// <p>The Recovery Instance ID of a participating server.</p>
    #[doc(hidden)]
    pub recovery_instance_id: std::option::Option<std::string::String>,
    /// <p>The launch status of a participating server.</p>
    #[doc(hidden)]
    pub launch_status: std::option::Option<crate::types::LaunchStatus>,
}
impl ParticipatingServer {
    /// <p>The Source Server ID of a participating server.</p>
    pub fn source_server_id(&self) -> std::option::Option<&str> {
        self.source_server_id.as_deref()
    }
    /// <p>The Recovery Instance ID of a participating server.</p>
    pub fn recovery_instance_id(&self) -> std::option::Option<&str> {
        self.recovery_instance_id.as_deref()
    }
    /// <p>The launch status of a participating server.</p>
    pub fn launch_status(&self) -> std::option::Option<&crate::types::LaunchStatus> {
        self.launch_status.as_ref()
    }
}
impl ParticipatingServer {
    /// Creates a new builder-style object to manufacture [`ParticipatingServer`](crate::types::ParticipatingServer).
    pub fn builder() -> crate::types::builders::ParticipatingServerBuilder {
        crate::types::builders::ParticipatingServerBuilder::default()
    }
}

/// A builder for [`ParticipatingServer`](crate::types::ParticipatingServer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ParticipatingServerBuilder {
    pub(crate) source_server_id: std::option::Option<std::string::String>,
    pub(crate) recovery_instance_id: std::option::Option<std::string::String>,
    pub(crate) launch_status: std::option::Option<crate::types::LaunchStatus>,
}
impl ParticipatingServerBuilder {
    /// <p>The Source Server ID of a participating server.</p>
    pub fn source_server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_server_id = Some(input.into());
        self
    }
    /// <p>The Source Server ID of a participating server.</p>
    pub fn set_source_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>The Recovery Instance ID of a participating server.</p>
    pub fn recovery_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recovery_instance_id = Some(input.into());
        self
    }
    /// <p>The Recovery Instance ID of a participating server.</p>
    pub fn set_recovery_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recovery_instance_id = input;
        self
    }
    /// <p>The launch status of a participating server.</p>
    pub fn launch_status(mut self, input: crate::types::LaunchStatus) -> Self {
        self.launch_status = Some(input);
        self
    }
    /// <p>The launch status of a participating server.</p>
    pub fn set_launch_status(
        mut self,
        input: std::option::Option<crate::types::LaunchStatus>,
    ) -> Self {
        self.launch_status = input;
        self
    }
    /// Consumes the builder and constructs a [`ParticipatingServer`](crate::types::ParticipatingServer).
    pub fn build(self) -> crate::types::ParticipatingServer {
        crate::types::ParticipatingServer {
            source_server_id: self.source_server_id,
            recovery_instance_id: self.recovery_instance_id,
            launch_status: self.launch_status,
        }
    }
}
