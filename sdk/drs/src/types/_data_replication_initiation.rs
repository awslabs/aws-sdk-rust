// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Data replication initiation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DataReplicationInitiation {
    /// <p>The date and time of the current attempt to initiate data replication.</p>
    #[doc(hidden)]
    pub start_date_time: std::option::Option<std::string::String>,
    /// <p>The date and time of the next attempt to initiate data replication.</p>
    #[doc(hidden)]
    pub next_attempt_date_time: std::option::Option<std::string::String>,
    /// <p>The steps of the current attempt to initiate data replication.</p>
    #[doc(hidden)]
    pub steps: std::option::Option<std::vec::Vec<crate::types::DataReplicationInitiationStep>>,
}
impl DataReplicationInitiation {
    /// <p>The date and time of the current attempt to initiate data replication.</p>
    pub fn start_date_time(&self) -> std::option::Option<&str> {
        self.start_date_time.as_deref()
    }
    /// <p>The date and time of the next attempt to initiate data replication.</p>
    pub fn next_attempt_date_time(&self) -> std::option::Option<&str> {
        self.next_attempt_date_time.as_deref()
    }
    /// <p>The steps of the current attempt to initiate data replication.</p>
    pub fn steps(&self) -> std::option::Option<&[crate::types::DataReplicationInitiationStep]> {
        self.steps.as_deref()
    }
}
impl DataReplicationInitiation {
    /// Creates a new builder-style object to manufacture [`DataReplicationInitiation`](crate::types::DataReplicationInitiation).
    pub fn builder() -> crate::types::builders::DataReplicationInitiationBuilder {
        crate::types::builders::DataReplicationInitiationBuilder::default()
    }
}

/// A builder for [`DataReplicationInitiation`](crate::types::DataReplicationInitiation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DataReplicationInitiationBuilder {
    pub(crate) start_date_time: std::option::Option<std::string::String>,
    pub(crate) next_attempt_date_time: std::option::Option<std::string::String>,
    pub(crate) steps:
        std::option::Option<std::vec::Vec<crate::types::DataReplicationInitiationStep>>,
}
impl DataReplicationInitiationBuilder {
    /// <p>The date and time of the current attempt to initiate data replication.</p>
    pub fn start_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.start_date_time = Some(input.into());
        self
    }
    /// <p>The date and time of the current attempt to initiate data replication.</p>
    pub fn set_start_date_time(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.start_date_time = input;
        self
    }
    /// <p>The date and time of the next attempt to initiate data replication.</p>
    pub fn next_attempt_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_attempt_date_time = Some(input.into());
        self
    }
    /// <p>The date and time of the next attempt to initiate data replication.</p>
    pub fn set_next_attempt_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.next_attempt_date_time = input;
        self
    }
    /// Appends an item to `steps`.
    ///
    /// To override the contents of this collection use [`set_steps`](Self::set_steps).
    ///
    /// <p>The steps of the current attempt to initiate data replication.</p>
    pub fn steps(mut self, input: crate::types::DataReplicationInitiationStep) -> Self {
        let mut v = self.steps.unwrap_or_default();
        v.push(input);
        self.steps = Some(v);
        self
    }
    /// <p>The steps of the current attempt to initiate data replication.</p>
    pub fn set_steps(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataReplicationInitiationStep>>,
    ) -> Self {
        self.steps = input;
        self
    }
    /// Consumes the builder and constructs a [`DataReplicationInitiation`](crate::types::DataReplicationInitiation).
    pub fn build(self) -> crate::types::DataReplicationInitiation {
        crate::types::DataReplicationInitiation {
            start_date_time: self.start_date_time,
            next_attempt_date_time: self.next_attempt_date_time,
            steps: self.steps,
        }
    }
}
