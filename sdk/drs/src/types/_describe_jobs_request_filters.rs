// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of filters by which to return Jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeJobsRequestFilters {
    /// <p>An array of Job IDs that should be returned. An empty array means all jobs.</p>
    pub job_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The start date in a date range query.</p>
    pub from_date: ::std::option::Option<::std::string::String>,
    /// <p>The end date in a date range query.</p>
    pub to_date: ::std::option::Option<::std::string::String>,
}
impl DescribeJobsRequestFilters {
    /// <p>An array of Job IDs that should be returned. An empty array means all jobs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.job_ids.is_none()`.
    pub fn job_ids(&self) -> &[::std::string::String] {
        self.job_ids.as_deref().unwrap_or_default()
    }
    /// <p>The start date in a date range query.</p>
    pub fn from_date(&self) -> ::std::option::Option<&str> {
        self.from_date.as_deref()
    }
    /// <p>The end date in a date range query.</p>
    pub fn to_date(&self) -> ::std::option::Option<&str> {
        self.to_date.as_deref()
    }
}
impl DescribeJobsRequestFilters {
    /// Creates a new builder-style object to manufacture [`DescribeJobsRequestFilters`](crate::types::DescribeJobsRequestFilters).
    pub fn builder() -> crate::types::builders::DescribeJobsRequestFiltersBuilder {
        crate::types::builders::DescribeJobsRequestFiltersBuilder::default()
    }
}

/// A builder for [`DescribeJobsRequestFilters`](crate::types::DescribeJobsRequestFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeJobsRequestFiltersBuilder {
    pub(crate) job_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) from_date: ::std::option::Option<::std::string::String>,
    pub(crate) to_date: ::std::option::Option<::std::string::String>,
}
impl DescribeJobsRequestFiltersBuilder {
    /// Appends an item to `job_ids`.
    ///
    /// To override the contents of this collection use [`set_job_ids`](Self::set_job_ids).
    ///
    /// <p>An array of Job IDs that should be returned. An empty array means all jobs.</p>
    pub fn job_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.job_ids.unwrap_or_default();
        v.push(input.into());
        self.job_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of Job IDs that should be returned. An empty array means all jobs.</p>
    pub fn set_job_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.job_ids = input;
        self
    }
    /// <p>An array of Job IDs that should be returned. An empty array means all jobs.</p>
    pub fn get_job_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.job_ids
    }
    /// <p>The start date in a date range query.</p>
    pub fn from_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.from_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The start date in a date range query.</p>
    pub fn set_from_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.from_date = input;
        self
    }
    /// <p>The start date in a date range query.</p>
    pub fn get_from_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.from_date
    }
    /// <p>The end date in a date range query.</p>
    pub fn to_date(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.to_date = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The end date in a date range query.</p>
    pub fn set_to_date(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.to_date = input;
        self
    }
    /// <p>The end date in a date range query.</p>
    pub fn get_to_date(&self) -> &::std::option::Option<::std::string::String> {
        &self.to_date
    }
    /// Consumes the builder and constructs a [`DescribeJobsRequestFilters`](crate::types::DescribeJobsRequestFilters).
    pub fn build(self) -> crate::types::DescribeJobsRequestFilters {
        crate::types::DescribeJobsRequestFilters {
            job_ids: self.job_ids,
            from_date: self.from_date,
            to_date: self.to_date,
        }
    }
}
