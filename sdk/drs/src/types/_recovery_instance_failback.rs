// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing failback related information of the Recovery Instance.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecoveryInstanceFailback {
    /// <p>The ID of the failback client that this Recovery Instance is associated with.</p>
    #[doc(hidden)]
    pub failback_client_id: std::option::Option<std::string::String>,
    /// <p>The Job ID of the last failback log for this Recovery Instance.</p>
    #[doc(hidden)]
    pub failback_job_id: std::option::Option<std::string::String>,
    /// <p>The date and time that the failback initiation started.</p>
    #[doc(hidden)]
    pub failback_initiation_time: std::option::Option<std::string::String>,
    /// <p>The state of the failback process that this Recovery Instance is in.</p>
    #[doc(hidden)]
    pub state: std::option::Option<crate::types::FailbackState>,
    /// <p>The date and time the agent on the Recovery Instance was last seen by the service.</p>
    #[doc(hidden)]
    pub agent_last_seen_by_service_date_time: std::option::Option<std::string::String>,
    /// <p>The date and time that the failback client was last seen by the service.</p>
    #[doc(hidden)]
    pub failback_client_last_seen_by_service_date_time: std::option::Option<std::string::String>,
    /// <p>Whether we are failing back to the original Source Server for this Recovery Instance.</p>
    #[doc(hidden)]
    pub failback_to_original_server: std::option::Option<bool>,
    /// <p>The date and time of the first byte that was replicated from the Recovery Instance.</p>
    #[doc(hidden)]
    pub first_byte_date_time: std::option::Option<std::string::String>,
    /// <p>The amount of time that the Recovery Instance has been replicating for.</p>
    #[doc(hidden)]
    pub elapsed_replication_duration: std::option::Option<std::string::String>,
    /// <p>The launch type (Recovery / Drill) of the last launch for the failback replication of this recovery instance.</p>
    #[doc(hidden)]
    pub failback_launch_type: std::option::Option<crate::types::FailbackLaunchType>,
}
impl RecoveryInstanceFailback {
    /// <p>The ID of the failback client that this Recovery Instance is associated with.</p>
    pub fn failback_client_id(&self) -> std::option::Option<&str> {
        self.failback_client_id.as_deref()
    }
    /// <p>The Job ID of the last failback log for this Recovery Instance.</p>
    pub fn failback_job_id(&self) -> std::option::Option<&str> {
        self.failback_job_id.as_deref()
    }
    /// <p>The date and time that the failback initiation started.</p>
    pub fn failback_initiation_time(&self) -> std::option::Option<&str> {
        self.failback_initiation_time.as_deref()
    }
    /// <p>The state of the failback process that this Recovery Instance is in.</p>
    pub fn state(&self) -> std::option::Option<&crate::types::FailbackState> {
        self.state.as_ref()
    }
    /// <p>The date and time the agent on the Recovery Instance was last seen by the service.</p>
    pub fn agent_last_seen_by_service_date_time(&self) -> std::option::Option<&str> {
        self.agent_last_seen_by_service_date_time.as_deref()
    }
    /// <p>The date and time that the failback client was last seen by the service.</p>
    pub fn failback_client_last_seen_by_service_date_time(&self) -> std::option::Option<&str> {
        self.failback_client_last_seen_by_service_date_time
            .as_deref()
    }
    /// <p>Whether we are failing back to the original Source Server for this Recovery Instance.</p>
    pub fn failback_to_original_server(&self) -> std::option::Option<bool> {
        self.failback_to_original_server
    }
    /// <p>The date and time of the first byte that was replicated from the Recovery Instance.</p>
    pub fn first_byte_date_time(&self) -> std::option::Option<&str> {
        self.first_byte_date_time.as_deref()
    }
    /// <p>The amount of time that the Recovery Instance has been replicating for.</p>
    pub fn elapsed_replication_duration(&self) -> std::option::Option<&str> {
        self.elapsed_replication_duration.as_deref()
    }
    /// <p>The launch type (Recovery / Drill) of the last launch for the failback replication of this recovery instance.</p>
    pub fn failback_launch_type(&self) -> std::option::Option<&crate::types::FailbackLaunchType> {
        self.failback_launch_type.as_ref()
    }
}
impl RecoveryInstanceFailback {
    /// Creates a new builder-style object to manufacture [`RecoveryInstanceFailback`](crate::types::RecoveryInstanceFailback).
    pub fn builder() -> crate::types::builders::RecoveryInstanceFailbackBuilder {
        crate::types::builders::RecoveryInstanceFailbackBuilder::default()
    }
}

/// A builder for [`RecoveryInstanceFailback`](crate::types::RecoveryInstanceFailback).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecoveryInstanceFailbackBuilder {
    pub(crate) failback_client_id: std::option::Option<std::string::String>,
    pub(crate) failback_job_id: std::option::Option<std::string::String>,
    pub(crate) failback_initiation_time: std::option::Option<std::string::String>,
    pub(crate) state: std::option::Option<crate::types::FailbackState>,
    pub(crate) agent_last_seen_by_service_date_time: std::option::Option<std::string::String>,
    pub(crate) failback_client_last_seen_by_service_date_time:
        std::option::Option<std::string::String>,
    pub(crate) failback_to_original_server: std::option::Option<bool>,
    pub(crate) first_byte_date_time: std::option::Option<std::string::String>,
    pub(crate) elapsed_replication_duration: std::option::Option<std::string::String>,
    pub(crate) failback_launch_type: std::option::Option<crate::types::FailbackLaunchType>,
}
impl RecoveryInstanceFailbackBuilder {
    /// <p>The ID of the failback client that this Recovery Instance is associated with.</p>
    pub fn failback_client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.failback_client_id = Some(input.into());
        self
    }
    /// <p>The ID of the failback client that this Recovery Instance is associated with.</p>
    pub fn set_failback_client_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.failback_client_id = input;
        self
    }
    /// <p>The Job ID of the last failback log for this Recovery Instance.</p>
    pub fn failback_job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.failback_job_id = Some(input.into());
        self
    }
    /// <p>The Job ID of the last failback log for this Recovery Instance.</p>
    pub fn set_failback_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failback_job_id = input;
        self
    }
    /// <p>The date and time that the failback initiation started.</p>
    pub fn failback_initiation_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.failback_initiation_time = Some(input.into());
        self
    }
    /// <p>The date and time that the failback initiation started.</p>
    pub fn set_failback_initiation_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.failback_initiation_time = input;
        self
    }
    /// <p>The state of the failback process that this Recovery Instance is in.</p>
    pub fn state(mut self, input: crate::types::FailbackState) -> Self {
        self.state = Some(input);
        self
    }
    /// <p>The state of the failback process that this Recovery Instance is in.</p>
    pub fn set_state(mut self, input: std::option::Option<crate::types::FailbackState>) -> Self {
        self.state = input;
        self
    }
    /// <p>The date and time the agent on the Recovery Instance was last seen by the service.</p>
    pub fn agent_last_seen_by_service_date_time(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.agent_last_seen_by_service_date_time = Some(input.into());
        self
    }
    /// <p>The date and time the agent on the Recovery Instance was last seen by the service.</p>
    pub fn set_agent_last_seen_by_service_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.agent_last_seen_by_service_date_time = input;
        self
    }
    /// <p>The date and time that the failback client was last seen by the service.</p>
    pub fn failback_client_last_seen_by_service_date_time(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.failback_client_last_seen_by_service_date_time = Some(input.into());
        self
    }
    /// <p>The date and time that the failback client was last seen by the service.</p>
    pub fn set_failback_client_last_seen_by_service_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.failback_client_last_seen_by_service_date_time = input;
        self
    }
    /// <p>Whether we are failing back to the original Source Server for this Recovery Instance.</p>
    pub fn failback_to_original_server(mut self, input: bool) -> Self {
        self.failback_to_original_server = Some(input);
        self
    }
    /// <p>Whether we are failing back to the original Source Server for this Recovery Instance.</p>
    pub fn set_failback_to_original_server(mut self, input: std::option::Option<bool>) -> Self {
        self.failback_to_original_server = input;
        self
    }
    /// <p>The date and time of the first byte that was replicated from the Recovery Instance.</p>
    pub fn first_byte_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.first_byte_date_time = Some(input.into());
        self
    }
    /// <p>The date and time of the first byte that was replicated from the Recovery Instance.</p>
    pub fn set_first_byte_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.first_byte_date_time = input;
        self
    }
    /// <p>The amount of time that the Recovery Instance has been replicating for.</p>
    pub fn elapsed_replication_duration(mut self, input: impl Into<std::string::String>) -> Self {
        self.elapsed_replication_duration = Some(input.into());
        self
    }
    /// <p>The amount of time that the Recovery Instance has been replicating for.</p>
    pub fn set_elapsed_replication_duration(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.elapsed_replication_duration = input;
        self
    }
    /// <p>The launch type (Recovery / Drill) of the last launch for the failback replication of this recovery instance.</p>
    pub fn failback_launch_type(mut self, input: crate::types::FailbackLaunchType) -> Self {
        self.failback_launch_type = Some(input);
        self
    }
    /// <p>The launch type (Recovery / Drill) of the last launch for the failback replication of this recovery instance.</p>
    pub fn set_failback_launch_type(
        mut self,
        input: std::option::Option<crate::types::FailbackLaunchType>,
    ) -> Self {
        self.failback_launch_type = input;
        self
    }
    /// Consumes the builder and constructs a [`RecoveryInstanceFailback`](crate::types::RecoveryInstanceFailback).
    pub fn build(self) -> crate::types::RecoveryInstanceFailback {
        crate::types::RecoveryInstanceFailback {
            failback_client_id: self.failback_client_id,
            failback_job_id: self.failback_job_id,
            failback_initiation_time: self.failback_initiation_time,
            state: self.state,
            agent_last_seen_by_service_date_time: self.agent_last_seen_by_service_date_time,
            failback_client_last_seen_by_service_date_time: self
                .failback_client_last_seen_by_service_date_time,
            failback_to_original_server: self.failback_to_original_server,
            first_byte_date_time: self.first_byte_date_time,
            elapsed_replication_duration: self.elapsed_replication_duration,
            failback_launch_type: self.failback_launch_type,
        }
    }
}
