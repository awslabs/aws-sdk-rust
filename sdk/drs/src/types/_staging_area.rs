// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Staging information related to source server.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StagingArea {
    /// <p>Status of Source server extension. Possible values: (a) NOT_EXTENDED - This is a source server that is replicating in the current account. (b) EXTENDED - Source server is extended from a staging source server. In this case, the value of stagingSourceServerArn is pointing to the Arn of the source server in the staging account. (c) EXTENSION_ERROR - Some issue occurred when accessing staging source server. In this case, errorMessage field will contain an error message that explains what happened.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::ExtensionStatus>,
    /// <p>Account ID of the account to which source server belongs. If this source server is extended - shows Account ID of staging source server.</p>
    #[doc(hidden)]
    pub staging_account_id: std::option::Option<std::string::String>,
    /// <p>Arn of the staging source server if this source server is extended</p>
    #[doc(hidden)]
    pub staging_source_server_arn: std::option::Option<std::string::String>,
    /// <p>Shows an error message that occurred when DRS tried to access the staging source server. In this case StagingArea$status will have value EXTENSION_ERROR</p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl StagingArea {
    /// <p>Status of Source server extension. Possible values: (a) NOT_EXTENDED - This is a source server that is replicating in the current account. (b) EXTENDED - Source server is extended from a staging source server. In this case, the value of stagingSourceServerArn is pointing to the Arn of the source server in the staging account. (c) EXTENSION_ERROR - Some issue occurred when accessing staging source server. In this case, errorMessage field will contain an error message that explains what happened.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::ExtensionStatus> {
        self.status.as_ref()
    }
    /// <p>Account ID of the account to which source server belongs. If this source server is extended - shows Account ID of staging source server.</p>
    pub fn staging_account_id(&self) -> std::option::Option<&str> {
        self.staging_account_id.as_deref()
    }
    /// <p>Arn of the staging source server if this source server is extended</p>
    pub fn staging_source_server_arn(&self) -> std::option::Option<&str> {
        self.staging_source_server_arn.as_deref()
    }
    /// <p>Shows an error message that occurred when DRS tried to access the staging source server. In this case StagingArea$status will have value EXTENSION_ERROR</p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl StagingArea {
    /// Creates a new builder-style object to manufacture [`StagingArea`](crate::types::StagingArea).
    pub fn builder() -> crate::types::builders::StagingAreaBuilder {
        crate::types::builders::StagingAreaBuilder::default()
    }
}

/// A builder for [`StagingArea`](crate::types::StagingArea).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StagingAreaBuilder {
    pub(crate) status: std::option::Option<crate::types::ExtensionStatus>,
    pub(crate) staging_account_id: std::option::Option<std::string::String>,
    pub(crate) staging_source_server_arn: std::option::Option<std::string::String>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl StagingAreaBuilder {
    /// <p>Status of Source server extension. Possible values: (a) NOT_EXTENDED - This is a source server that is replicating in the current account. (b) EXTENDED - Source server is extended from a staging source server. In this case, the value of stagingSourceServerArn is pointing to the Arn of the source server in the staging account. (c) EXTENSION_ERROR - Some issue occurred when accessing staging source server. In this case, errorMessage field will contain an error message that explains what happened.</p>
    pub fn status(mut self, input: crate::types::ExtensionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>Status of Source server extension. Possible values: (a) NOT_EXTENDED - This is a source server that is replicating in the current account. (b) EXTENDED - Source server is extended from a staging source server. In this case, the value of stagingSourceServerArn is pointing to the Arn of the source server in the staging account. (c) EXTENSION_ERROR - Some issue occurred when accessing staging source server. In this case, errorMessage field will contain an error message that explains what happened.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::ExtensionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Account ID of the account to which source server belongs. If this source server is extended - shows Account ID of staging source server.</p>
    pub fn staging_account_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.staging_account_id = Some(input.into());
        self
    }
    /// <p>Account ID of the account to which source server belongs. If this source server is extended - shows Account ID of staging source server.</p>
    pub fn set_staging_account_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.staging_account_id = input;
        self
    }
    /// <p>Arn of the staging source server if this source server is extended</p>
    pub fn staging_source_server_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.staging_source_server_arn = Some(input.into());
        self
    }
    /// <p>Arn of the staging source server if this source server is extended</p>
    pub fn set_staging_source_server_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.staging_source_server_arn = input;
        self
    }
    /// <p>Shows an error message that occurred when DRS tried to access the staging source server. In this case StagingArea$status will have value EXTENSION_ERROR</p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p>Shows an error message that occurred when DRS tried to access the staging source server. In this case StagingArea$status will have value EXTENSION_ERROR</p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`StagingArea`](crate::types::StagingArea).
    pub fn build(self) -> crate::types::StagingArea {
        crate::types::StagingArea {
            status: self.status,
            staging_account_id: self.staging_account_id,
            staging_source_server_arn: self.staging_source_server_arn,
            error_message: self.error_message,
        }
    }
}
