// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about Data Replication</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecoveryInstanceDataReplicationInfo {
    /// <p>Data replication lag duration.</p>
    pub lag_duration: ::std::option::Option<::std::string::String>,
    /// <p>An estimate of when the data replication will be completed.</p>
    pub eta_date_time: ::std::option::Option<::std::string::String>,
    /// <p>The disks that should be replicated.</p>
    pub replicated_disks: ::std::option::Option<::std::vec::Vec<crate::types::RecoveryInstanceDataReplicationInfoReplicatedDisk>>,
    /// <p>The state of the data replication.</p>
    pub data_replication_state: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationState>,
    /// <p>Information about whether the data replication has been initiated.</p>
    pub data_replication_initiation: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationInitiation>,
    /// <p>Information about Data Replication</p>
    pub data_replication_error: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationError>,
    /// <p>AWS Availability zone into which data is being replicated.</p>
    pub staging_availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the staging Outpost</p>
    pub staging_outpost_arn: ::std::option::Option<::std::string::String>,
}
impl RecoveryInstanceDataReplicationInfo {
    /// <p>Data replication lag duration.</p>
    pub fn lag_duration(&self) -> ::std::option::Option<&str> {
        self.lag_duration.as_deref()
    }
    /// <p>An estimate of when the data replication will be completed.</p>
    pub fn eta_date_time(&self) -> ::std::option::Option<&str> {
        self.eta_date_time.as_deref()
    }
    /// <p>The disks that should be replicated.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replicated_disks.is_none()`.
    pub fn replicated_disks(&self) -> &[crate::types::RecoveryInstanceDataReplicationInfoReplicatedDisk] {
        self.replicated_disks.as_deref().unwrap_or_default()
    }
    /// <p>The state of the data replication.</p>
    pub fn data_replication_state(&self) -> ::std::option::Option<&crate::types::RecoveryInstanceDataReplicationState> {
        self.data_replication_state.as_ref()
    }
    /// <p>Information about whether the data replication has been initiated.</p>
    pub fn data_replication_initiation(&self) -> ::std::option::Option<&crate::types::RecoveryInstanceDataReplicationInitiation> {
        self.data_replication_initiation.as_ref()
    }
    /// <p>Information about Data Replication</p>
    pub fn data_replication_error(&self) -> ::std::option::Option<&crate::types::RecoveryInstanceDataReplicationError> {
        self.data_replication_error.as_ref()
    }
    /// <p>AWS Availability zone into which data is being replicated.</p>
    pub fn staging_availability_zone(&self) -> ::std::option::Option<&str> {
        self.staging_availability_zone.as_deref()
    }
    /// <p>The ARN of the staging Outpost</p>
    pub fn staging_outpost_arn(&self) -> ::std::option::Option<&str> {
        self.staging_outpost_arn.as_deref()
    }
}
impl RecoveryInstanceDataReplicationInfo {
    /// Creates a new builder-style object to manufacture [`RecoveryInstanceDataReplicationInfo`](crate::types::RecoveryInstanceDataReplicationInfo).
    pub fn builder() -> crate::types::builders::RecoveryInstanceDataReplicationInfoBuilder {
        crate::types::builders::RecoveryInstanceDataReplicationInfoBuilder::default()
    }
}

/// A builder for [`RecoveryInstanceDataReplicationInfo`](crate::types::RecoveryInstanceDataReplicationInfo).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecoveryInstanceDataReplicationInfoBuilder {
    pub(crate) lag_duration: ::std::option::Option<::std::string::String>,
    pub(crate) eta_date_time: ::std::option::Option<::std::string::String>,
    pub(crate) replicated_disks: ::std::option::Option<::std::vec::Vec<crate::types::RecoveryInstanceDataReplicationInfoReplicatedDisk>>,
    pub(crate) data_replication_state: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationState>,
    pub(crate) data_replication_initiation: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationInitiation>,
    pub(crate) data_replication_error: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationError>,
    pub(crate) staging_availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) staging_outpost_arn: ::std::option::Option<::std::string::String>,
}
impl RecoveryInstanceDataReplicationInfoBuilder {
    /// <p>Data replication lag duration.</p>
    pub fn lag_duration(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.lag_duration = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Data replication lag duration.</p>
    pub fn set_lag_duration(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.lag_duration = input;
        self
    }
    /// <p>Data replication lag duration.</p>
    pub fn get_lag_duration(&self) -> &::std::option::Option<::std::string::String> {
        &self.lag_duration
    }
    /// <p>An estimate of when the data replication will be completed.</p>
    pub fn eta_date_time(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.eta_date_time = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An estimate of when the data replication will be completed.</p>
    pub fn set_eta_date_time(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.eta_date_time = input;
        self
    }
    /// <p>An estimate of when the data replication will be completed.</p>
    pub fn get_eta_date_time(&self) -> &::std::option::Option<::std::string::String> {
        &self.eta_date_time
    }
    /// Appends an item to `replicated_disks`.
    ///
    /// To override the contents of this collection use [`set_replicated_disks`](Self::set_replicated_disks).
    ///
    /// <p>The disks that should be replicated.</p>
    pub fn replicated_disks(mut self, input: crate::types::RecoveryInstanceDataReplicationInfoReplicatedDisk) -> Self {
        let mut v = self.replicated_disks.unwrap_or_default();
        v.push(input);
        self.replicated_disks = ::std::option::Option::Some(v);
        self
    }
    /// <p>The disks that should be replicated.</p>
    pub fn set_replicated_disks(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::RecoveryInstanceDataReplicationInfoReplicatedDisk>>,
    ) -> Self {
        self.replicated_disks = input;
        self
    }
    /// <p>The disks that should be replicated.</p>
    pub fn get_replicated_disks(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RecoveryInstanceDataReplicationInfoReplicatedDisk>> {
        &self.replicated_disks
    }
    /// <p>The state of the data replication.</p>
    pub fn data_replication_state(mut self, input: crate::types::RecoveryInstanceDataReplicationState) -> Self {
        self.data_replication_state = ::std::option::Option::Some(input);
        self
    }
    /// <p>The state of the data replication.</p>
    pub fn set_data_replication_state(mut self, input: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationState>) -> Self {
        self.data_replication_state = input;
        self
    }
    /// <p>The state of the data replication.</p>
    pub fn get_data_replication_state(&self) -> &::std::option::Option<crate::types::RecoveryInstanceDataReplicationState> {
        &self.data_replication_state
    }
    /// <p>Information about whether the data replication has been initiated.</p>
    pub fn data_replication_initiation(mut self, input: crate::types::RecoveryInstanceDataReplicationInitiation) -> Self {
        self.data_replication_initiation = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about whether the data replication has been initiated.</p>
    pub fn set_data_replication_initiation(mut self, input: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationInitiation>) -> Self {
        self.data_replication_initiation = input;
        self
    }
    /// <p>Information about whether the data replication has been initiated.</p>
    pub fn get_data_replication_initiation(&self) -> &::std::option::Option<crate::types::RecoveryInstanceDataReplicationInitiation> {
        &self.data_replication_initiation
    }
    /// <p>Information about Data Replication</p>
    pub fn data_replication_error(mut self, input: crate::types::RecoveryInstanceDataReplicationError) -> Self {
        self.data_replication_error = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about Data Replication</p>
    pub fn set_data_replication_error(mut self, input: ::std::option::Option<crate::types::RecoveryInstanceDataReplicationError>) -> Self {
        self.data_replication_error = input;
        self
    }
    /// <p>Information about Data Replication</p>
    pub fn get_data_replication_error(&self) -> &::std::option::Option<crate::types::RecoveryInstanceDataReplicationError> {
        &self.data_replication_error
    }
    /// <p>AWS Availability zone into which data is being replicated.</p>
    pub fn staging_availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.staging_availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>AWS Availability zone into which data is being replicated.</p>
    pub fn set_staging_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.staging_availability_zone = input;
        self
    }
    /// <p>AWS Availability zone into which data is being replicated.</p>
    pub fn get_staging_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.staging_availability_zone
    }
    /// <p>The ARN of the staging Outpost</p>
    pub fn staging_outpost_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.staging_outpost_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the staging Outpost</p>
    pub fn set_staging_outpost_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.staging_outpost_arn = input;
        self
    }
    /// <p>The ARN of the staging Outpost</p>
    pub fn get_staging_outpost_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.staging_outpost_arn
    }
    /// Consumes the builder and constructs a [`RecoveryInstanceDataReplicationInfo`](crate::types::RecoveryInstanceDataReplicationInfo).
    pub fn build(self) -> crate::types::RecoveryInstanceDataReplicationInfo {
        crate::types::RecoveryInstanceDataReplicationInfo {
            lag_duration: self.lag_duration,
            eta_date_time: self.eta_date_time,
            replicated_disks: self.replicated_disks,
            data_replication_state: self.data_replication_state,
            data_replication_initiation: self.data_replication_initiation,
            data_replication_error: self.data_replication_error,
            staging_availability_zone: self.staging_availability_zone,
            staging_outpost_arn: self.staging_outpost_arn,
        }
    }
}
