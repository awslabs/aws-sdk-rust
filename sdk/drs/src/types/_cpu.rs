// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a server's CPU.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Cpu {
    /// <p>The number of CPU cores.</p>
    #[doc(hidden)]
    pub cores: i64,
    /// <p>The model name of the CPU.</p>
    #[doc(hidden)]
    pub model_name: std::option::Option<std::string::String>,
}
impl Cpu {
    /// <p>The number of CPU cores.</p>
    pub fn cores(&self) -> i64 {
        self.cores
    }
    /// <p>The model name of the CPU.</p>
    pub fn model_name(&self) -> std::option::Option<&str> {
        self.model_name.as_deref()
    }
}
impl Cpu {
    /// Creates a new builder-style object to manufacture [`Cpu`](crate::types::Cpu).
    pub fn builder() -> crate::types::builders::CpuBuilder {
        crate::types::builders::CpuBuilder::default()
    }
}

/// A builder for [`Cpu`](crate::types::Cpu).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CpuBuilder {
    pub(crate) cores: std::option::Option<i64>,
    pub(crate) model_name: std::option::Option<std::string::String>,
}
impl CpuBuilder {
    /// <p>The number of CPU cores.</p>
    pub fn cores(mut self, input: i64) -> Self {
        self.cores = Some(input);
        self
    }
    /// <p>The number of CPU cores.</p>
    pub fn set_cores(mut self, input: std::option::Option<i64>) -> Self {
        self.cores = input;
        self
    }
    /// <p>The model name of the CPU.</p>
    pub fn model_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.model_name = Some(input.into());
        self
    }
    /// <p>The model name of the CPU.</p>
    pub fn set_model_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.model_name = input;
        self
    }
    /// Consumes the builder and constructs a [`Cpu`](crate::types::Cpu).
    pub fn build(self) -> crate::types::Cpu {
        crate::types::Cpu {
            cores: self.cores.unwrap_or_default(),
            model_name: self.model_name,
        }
    }
}
