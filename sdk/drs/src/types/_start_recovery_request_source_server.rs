// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the Source Server to recover.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StartRecoveryRequestSourceServer {
    /// <p>The ID of the Source Server you want to recover.</p>
    #[doc(hidden)]
    pub source_server_id: std::option::Option<std::string::String>,
    /// <p>The ID of a Recovery Snapshot we want to recover from. Omit this field to launch from the latest data by taking an on-demand snapshot.</p>
    #[doc(hidden)]
    pub recovery_snapshot_id: std::option::Option<std::string::String>,
}
impl StartRecoveryRequestSourceServer {
    /// <p>The ID of the Source Server you want to recover.</p>
    pub fn source_server_id(&self) -> std::option::Option<&str> {
        self.source_server_id.as_deref()
    }
    /// <p>The ID of a Recovery Snapshot we want to recover from. Omit this field to launch from the latest data by taking an on-demand snapshot.</p>
    pub fn recovery_snapshot_id(&self) -> std::option::Option<&str> {
        self.recovery_snapshot_id.as_deref()
    }
}
impl StartRecoveryRequestSourceServer {
    /// Creates a new builder-style object to manufacture [`StartRecoveryRequestSourceServer`](crate::types::StartRecoveryRequestSourceServer).
    pub fn builder() -> crate::types::builders::StartRecoveryRequestSourceServerBuilder {
        crate::types::builders::StartRecoveryRequestSourceServerBuilder::default()
    }
}

/// A builder for [`StartRecoveryRequestSourceServer`](crate::types::StartRecoveryRequestSourceServer).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StartRecoveryRequestSourceServerBuilder {
    pub(crate) source_server_id: std::option::Option<std::string::String>,
    pub(crate) recovery_snapshot_id: std::option::Option<std::string::String>,
}
impl StartRecoveryRequestSourceServerBuilder {
    /// <p>The ID of the Source Server you want to recover.</p>
    pub fn source_server_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_server_id = Some(input.into());
        self
    }
    /// <p>The ID of the Source Server you want to recover.</p>
    pub fn set_source_server_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>The ID of a Recovery Snapshot we want to recover from. Omit this field to launch from the latest data by taking an on-demand snapshot.</p>
    pub fn recovery_snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recovery_snapshot_id = Some(input.into());
        self
    }
    /// <p>The ID of a Recovery Snapshot we want to recover from. Omit this field to launch from the latest data by taking an on-demand snapshot.</p>
    pub fn set_recovery_snapshot_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recovery_snapshot_id = input;
        self
    }
    /// Consumes the builder and constructs a [`StartRecoveryRequestSourceServer`](crate::types::StartRecoveryRequestSourceServer).
    pub fn build(self) -> crate::types::StartRecoveryRequestSourceServer {
        crate::types::StartRecoveryRequestSourceServer {
            source_server_id: self.source_server_id,
            recovery_snapshot_id: self.recovery_snapshot_id,
        }
    }
}
