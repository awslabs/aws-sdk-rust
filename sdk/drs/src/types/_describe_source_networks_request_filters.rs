// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of filters by which to return Source Networks.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeSourceNetworksRequestFilters {
    /// <p>An array of Source Network IDs that should be returned. An empty array means all Source Networks.</p>
    pub source_network_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Filter Source Networks by account ID containing the protected VPCs.</p>
    pub origin_account_id: ::std::option::Option<::std::string::String>,
    /// <p>Filter Source Networks by the region containing the protected VPCs.</p>
    pub origin_region: ::std::option::Option<::std::string::String>,
}
impl DescribeSourceNetworksRequestFilters {
    /// <p>An array of Source Network IDs that should be returned. An empty array means all Source Networks.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.source_network_ids.is_none()`.
    pub fn source_network_ids(&self) -> &[::std::string::String] {
        self.source_network_ids.as_deref().unwrap_or_default()
    }
    /// <p>Filter Source Networks by account ID containing the protected VPCs.</p>
    pub fn origin_account_id(&self) -> ::std::option::Option<&str> {
        self.origin_account_id.as_deref()
    }
    /// <p>Filter Source Networks by the region containing the protected VPCs.</p>
    pub fn origin_region(&self) -> ::std::option::Option<&str> {
        self.origin_region.as_deref()
    }
}
impl DescribeSourceNetworksRequestFilters {
    /// Creates a new builder-style object to manufacture [`DescribeSourceNetworksRequestFilters`](crate::types::DescribeSourceNetworksRequestFilters).
    pub fn builder() -> crate::types::builders::DescribeSourceNetworksRequestFiltersBuilder {
        crate::types::builders::DescribeSourceNetworksRequestFiltersBuilder::default()
    }
}

/// A builder for [`DescribeSourceNetworksRequestFilters`](crate::types::DescribeSourceNetworksRequestFilters).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeSourceNetworksRequestFiltersBuilder {
    pub(crate) source_network_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) origin_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) origin_region: ::std::option::Option<::std::string::String>,
}
impl DescribeSourceNetworksRequestFiltersBuilder {
    /// Appends an item to `source_network_ids`.
    ///
    /// To override the contents of this collection use [`set_source_network_ids`](Self::set_source_network_ids).
    ///
    /// <p>An array of Source Network IDs that should be returned. An empty array means all Source Networks.</p>
    pub fn source_network_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.source_network_ids.unwrap_or_default();
        v.push(input.into());
        self.source_network_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of Source Network IDs that should be returned. An empty array means all Source Networks.</p>
    pub fn set_source_network_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.source_network_ids = input;
        self
    }
    /// <p>An array of Source Network IDs that should be returned. An empty array means all Source Networks.</p>
    pub fn get_source_network_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.source_network_ids
    }
    /// <p>Filter Source Networks by account ID containing the protected VPCs.</p>
    pub fn origin_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter Source Networks by account ID containing the protected VPCs.</p>
    pub fn set_origin_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_account_id = input;
        self
    }
    /// <p>Filter Source Networks by account ID containing the protected VPCs.</p>
    pub fn get_origin_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_account_id
    }
    /// <p>Filter Source Networks by the region containing the protected VPCs.</p>
    pub fn origin_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Filter Source Networks by the region containing the protected VPCs.</p>
    pub fn set_origin_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_region = input;
        self
    }
    /// <p>Filter Source Networks by the region containing the protected VPCs.</p>
    pub fn get_origin_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_region
    }
    /// Consumes the builder and constructs a [`DescribeSourceNetworksRequestFilters`](crate::types::DescribeSourceNetworksRequestFilters).
    pub fn build(self) -> crate::types::DescribeSourceNetworksRequestFilters {
        crate::types::DescribeSourceNetworksRequestFilters {
            source_network_ids: self.source_network_ids,
            origin_account_id: self.origin_account_id,
            origin_region: self.origin_region,
        }
    }
}
