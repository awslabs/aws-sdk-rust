// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Properties of the Recovery Instance machine.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RecoveryInstanceProperties {
    /// <p>The date and time the Recovery Instance properties were last updated on.</p>
    #[doc(hidden)]
    pub last_updated_date_time: std::option::Option<std::string::String>,
    /// <p>Hints used to uniquely identify a machine.</p>
    #[doc(hidden)]
    pub identification_hints: std::option::Option<crate::types::IdentificationHints>,
    /// <p>An array of network interfaces.</p>
    #[doc(hidden)]
    pub network_interfaces: std::option::Option<std::vec::Vec<crate::types::NetworkInterface>>,
    /// <p>An array of disks.</p>
    #[doc(hidden)]
    pub disks: std::option::Option<std::vec::Vec<crate::types::RecoveryInstanceDisk>>,
    /// <p>An array of CPUs.</p>
    #[doc(hidden)]
    pub cpus: std::option::Option<std::vec::Vec<crate::types::Cpu>>,
    /// <p>The amount of RAM in bytes.</p>
    #[doc(hidden)]
    pub ram_bytes: i64,
    /// <p>Operating system.</p>
    #[doc(hidden)]
    pub os: std::option::Option<crate::types::Os>,
}
impl RecoveryInstanceProperties {
    /// <p>The date and time the Recovery Instance properties were last updated on.</p>
    pub fn last_updated_date_time(&self) -> std::option::Option<&str> {
        self.last_updated_date_time.as_deref()
    }
    /// <p>Hints used to uniquely identify a machine.</p>
    pub fn identification_hints(&self) -> std::option::Option<&crate::types::IdentificationHints> {
        self.identification_hints.as_ref()
    }
    /// <p>An array of network interfaces.</p>
    pub fn network_interfaces(&self) -> std::option::Option<&[crate::types::NetworkInterface]> {
        self.network_interfaces.as_deref()
    }
    /// <p>An array of disks.</p>
    pub fn disks(&self) -> std::option::Option<&[crate::types::RecoveryInstanceDisk]> {
        self.disks.as_deref()
    }
    /// <p>An array of CPUs.</p>
    pub fn cpus(&self) -> std::option::Option<&[crate::types::Cpu]> {
        self.cpus.as_deref()
    }
    /// <p>The amount of RAM in bytes.</p>
    pub fn ram_bytes(&self) -> i64 {
        self.ram_bytes
    }
    /// <p>Operating system.</p>
    pub fn os(&self) -> std::option::Option<&crate::types::Os> {
        self.os.as_ref()
    }
}
impl RecoveryInstanceProperties {
    /// Creates a new builder-style object to manufacture [`RecoveryInstanceProperties`](crate::types::RecoveryInstanceProperties).
    pub fn builder() -> crate::types::builders::RecoveryInstancePropertiesBuilder {
        crate::types::builders::RecoveryInstancePropertiesBuilder::default()
    }
}

/// A builder for [`RecoveryInstanceProperties`](crate::types::RecoveryInstanceProperties).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RecoveryInstancePropertiesBuilder {
    pub(crate) last_updated_date_time: std::option::Option<std::string::String>,
    pub(crate) identification_hints: std::option::Option<crate::types::IdentificationHints>,
    pub(crate) network_interfaces:
        std::option::Option<std::vec::Vec<crate::types::NetworkInterface>>,
    pub(crate) disks: std::option::Option<std::vec::Vec<crate::types::RecoveryInstanceDisk>>,
    pub(crate) cpus: std::option::Option<std::vec::Vec<crate::types::Cpu>>,
    pub(crate) ram_bytes: std::option::Option<i64>,
    pub(crate) os: std::option::Option<crate::types::Os>,
}
impl RecoveryInstancePropertiesBuilder {
    /// <p>The date and time the Recovery Instance properties were last updated on.</p>
    pub fn last_updated_date_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.last_updated_date_time = Some(input.into());
        self
    }
    /// <p>The date and time the Recovery Instance properties were last updated on.</p>
    pub fn set_last_updated_date_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.last_updated_date_time = input;
        self
    }
    /// <p>Hints used to uniquely identify a machine.</p>
    pub fn identification_hints(mut self, input: crate::types::IdentificationHints) -> Self {
        self.identification_hints = Some(input);
        self
    }
    /// <p>Hints used to uniquely identify a machine.</p>
    pub fn set_identification_hints(
        mut self,
        input: std::option::Option<crate::types::IdentificationHints>,
    ) -> Self {
        self.identification_hints = input;
        self
    }
    /// Appends an item to `network_interfaces`.
    ///
    /// To override the contents of this collection use [`set_network_interfaces`](Self::set_network_interfaces).
    ///
    /// <p>An array of network interfaces.</p>
    pub fn network_interfaces(mut self, input: crate::types::NetworkInterface) -> Self {
        let mut v = self.network_interfaces.unwrap_or_default();
        v.push(input);
        self.network_interfaces = Some(v);
        self
    }
    /// <p>An array of network interfaces.</p>
    pub fn set_network_interfaces(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::NetworkInterface>>,
    ) -> Self {
        self.network_interfaces = input;
        self
    }
    /// Appends an item to `disks`.
    ///
    /// To override the contents of this collection use [`set_disks`](Self::set_disks).
    ///
    /// <p>An array of disks.</p>
    pub fn disks(mut self, input: crate::types::RecoveryInstanceDisk) -> Self {
        let mut v = self.disks.unwrap_or_default();
        v.push(input);
        self.disks = Some(v);
        self
    }
    /// <p>An array of disks.</p>
    pub fn set_disks(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RecoveryInstanceDisk>>,
    ) -> Self {
        self.disks = input;
        self
    }
    /// Appends an item to `cpus`.
    ///
    /// To override the contents of this collection use [`set_cpus`](Self::set_cpus).
    ///
    /// <p>An array of CPUs.</p>
    pub fn cpus(mut self, input: crate::types::Cpu) -> Self {
        let mut v = self.cpus.unwrap_or_default();
        v.push(input);
        self.cpus = Some(v);
        self
    }
    /// <p>An array of CPUs.</p>
    pub fn set_cpus(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Cpu>>,
    ) -> Self {
        self.cpus = input;
        self
    }
    /// <p>The amount of RAM in bytes.</p>
    pub fn ram_bytes(mut self, input: i64) -> Self {
        self.ram_bytes = Some(input);
        self
    }
    /// <p>The amount of RAM in bytes.</p>
    pub fn set_ram_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.ram_bytes = input;
        self
    }
    /// <p>Operating system.</p>
    pub fn os(mut self, input: crate::types::Os) -> Self {
        self.os = Some(input);
        self
    }
    /// <p>Operating system.</p>
    pub fn set_os(mut self, input: std::option::Option<crate::types::Os>) -> Self {
        self.os = input;
        self
    }
    /// Consumes the builder and constructs a [`RecoveryInstanceProperties`](crate::types::RecoveryInstanceProperties).
    pub fn build(self) -> crate::types::RecoveryInstanceProperties {
        crate::types::RecoveryInstanceProperties {
            last_updated_date_time: self.last_updated_date_time,
            identification_hints: self.identification_hints,
            network_interfaces: self.network_interfaces,
            disks: self.disks,
            cpus: self.cpus,
            ram_bytes: self.ram_bytes.unwrap_or_default(),
            os: self.os,
        }
    }
}
