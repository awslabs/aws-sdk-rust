// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A snapshot of a Source Server used during recovery.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecoverySnapshot {
    /// <p>The ID of the Recovery Snapshot.</p>
    pub snapshot_id: ::std::string::String,
    /// <p>The ID of the Source Server that the snapshot was taken for.</p>
    pub source_server_id: ::std::string::String,
    /// <p>The timestamp of when we expect the snapshot to be taken.</p>
    pub expected_timestamp: ::std::string::String,
    /// <p>The actual timestamp that the snapshot was taken.</p>
    pub timestamp: ::std::option::Option<::std::string::String>,
    /// <p>A list of EBS snapshots.</p>
    pub ebs_snapshots: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RecoverySnapshot {
    /// <p>The ID of the Recovery Snapshot.</p>
    pub fn snapshot_id(&self) -> &str {
        use std::ops::Deref;
        self.snapshot_id.deref()
    }
    /// <p>The ID of the Source Server that the snapshot was taken for.</p>
    pub fn source_server_id(&self) -> &str {
        use std::ops::Deref;
        self.source_server_id.deref()
    }
    /// <p>The timestamp of when we expect the snapshot to be taken.</p>
    pub fn expected_timestamp(&self) -> &str {
        use std::ops::Deref;
        self.expected_timestamp.deref()
    }
    /// <p>The actual timestamp that the snapshot was taken.</p>
    pub fn timestamp(&self) -> ::std::option::Option<&str> {
        self.timestamp.as_deref()
    }
    /// <p>A list of EBS snapshots.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.ebs_snapshots.is_none()`.
    pub fn ebs_snapshots(&self) -> &[::std::string::String] {
        self.ebs_snapshots.as_deref().unwrap_or_default()
    }
}
impl RecoverySnapshot {
    /// Creates a new builder-style object to manufacture [`RecoverySnapshot`](crate::types::RecoverySnapshot).
    pub fn builder() -> crate::types::builders::RecoverySnapshotBuilder {
        crate::types::builders::RecoverySnapshotBuilder::default()
    }
}

/// A builder for [`RecoverySnapshot`](crate::types::RecoverySnapshot).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecoverySnapshotBuilder {
    pub(crate) snapshot_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_server_id: ::std::option::Option<::std::string::String>,
    pub(crate) expected_timestamp: ::std::option::Option<::std::string::String>,
    pub(crate) timestamp: ::std::option::Option<::std::string::String>,
    pub(crate) ebs_snapshots: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl RecoverySnapshotBuilder {
    /// <p>The ID of the Recovery Snapshot.</p>
    /// This field is required.
    pub fn snapshot_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.snapshot_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Recovery Snapshot.</p>
    pub fn set_snapshot_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The ID of the Recovery Snapshot.</p>
    pub fn get_snapshot_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.snapshot_id
    }
    /// <p>The ID of the Source Server that the snapshot was taken for.</p>
    /// This field is required.
    pub fn source_server_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_server_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Source Server that the snapshot was taken for.</p>
    pub fn set_source_server_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_server_id = input;
        self
    }
    /// <p>The ID of the Source Server that the snapshot was taken for.</p>
    pub fn get_source_server_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_server_id
    }
    /// <p>The timestamp of when we expect the snapshot to be taken.</p>
    /// This field is required.
    pub fn expected_timestamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_timestamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp of when we expect the snapshot to be taken.</p>
    pub fn set_expected_timestamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_timestamp = input;
        self
    }
    /// <p>The timestamp of when we expect the snapshot to be taken.</p>
    pub fn get_expected_timestamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_timestamp
    }
    /// <p>The actual timestamp that the snapshot was taken.</p>
    pub fn timestamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timestamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The actual timestamp that the snapshot was taken.</p>
    pub fn set_timestamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timestamp = input;
        self
    }
    /// <p>The actual timestamp that the snapshot was taken.</p>
    pub fn get_timestamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.timestamp
    }
    /// Appends an item to `ebs_snapshots`.
    ///
    /// To override the contents of this collection use [`set_ebs_snapshots`](Self::set_ebs_snapshots).
    ///
    /// <p>A list of EBS snapshots.</p>
    pub fn ebs_snapshots(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.ebs_snapshots.unwrap_or_default();
        v.push(input.into());
        self.ebs_snapshots = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of EBS snapshots.</p>
    pub fn set_ebs_snapshots(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.ebs_snapshots = input;
        self
    }
    /// <p>A list of EBS snapshots.</p>
    pub fn get_ebs_snapshots(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.ebs_snapshots
    }
    /// Consumes the builder and constructs a [`RecoverySnapshot`](crate::types::RecoverySnapshot).
    /// This method will fail if any of the following fields are not set:
    /// - [`snapshot_id`](crate::types::builders::RecoverySnapshotBuilder::snapshot_id)
    /// - [`source_server_id`](crate::types::builders::RecoverySnapshotBuilder::source_server_id)
    /// - [`expected_timestamp`](crate::types::builders::RecoverySnapshotBuilder::expected_timestamp)
    pub fn build(self) -> ::std::result::Result<crate::types::RecoverySnapshot, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecoverySnapshot {
            snapshot_id: self.snapshot_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "snapshot_id",
                    "snapshot_id was not specified but it is required when building RecoverySnapshot",
                )
            })?,
            source_server_id: self.source_server_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_server_id",
                    "source_server_id was not specified but it is required when building RecoverySnapshot",
                )
            })?,
            expected_timestamp: self.expected_timestamp.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expected_timestamp",
                    "expected_timestamp was not specified but it is required when building RecoverySnapshot",
                )
            })?,
            timestamp: self.timestamp,
            ebs_snapshots: self.ebs_snapshots,
        })
    }
}
