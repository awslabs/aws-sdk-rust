// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CreateExtendedSourceServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_extended_source_server`](crate::client::fluent_builders::CreateExtendedSourceServer).
///
/// `ParseStrictResponse` impl for `CreateExtendedSourceServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateExtendedSourceServer {
    _private: (),
}
impl CreateExtendedSourceServer {
    /// Creates a new builder-style object to manufacture [`CreateExtendedSourceServerInput`](crate::input::CreateExtendedSourceServerInput).
    pub fn builder() -> crate::input::create_extended_source_server_input::Builder {
        crate::input::create_extended_source_server_input::Builder::default()
    }
    /// Creates a new `CreateExtendedSourceServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateExtendedSourceServer {
    type Output = std::result::Result<
        crate::output::CreateExtendedSourceServerOutput,
        crate::error::CreateExtendedSourceServerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_extended_source_server::de_create_extended_source_server_http_error(response)
        } else {
            crate::protocol_serde::shape_create_extended_source_server::de_create_extended_source_server_http_response(response)
        }
    }
}

/// Operation shape for `CreateReplicationConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_replication_configuration_template`](crate::client::fluent_builders::CreateReplicationConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `CreateReplicationConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct CreateReplicationConfigurationTemplate {
    _private: (),
}
impl CreateReplicationConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`CreateReplicationConfigurationTemplateInput`](crate::input::CreateReplicationConfigurationTemplateInput).
    pub fn builder() -> crate::input::create_replication_configuration_template_input::Builder {
        crate::input::create_replication_configuration_template_input::Builder::default()
    }
    /// Creates a new `CreateReplicationConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for CreateReplicationConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::CreateReplicationConfigurationTemplateOutput,
        crate::error::CreateReplicationConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 201 {
            crate::protocol_serde::shape_create_replication_configuration_template::de_create_replication_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_create_replication_configuration_template::de_create_replication_configuration_template_http_response(response)
        }
    }
}

/// Operation shape for `DeleteJob`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_job`](crate::client::fluent_builders::DeleteJob).
///
/// `ParseStrictResponse` impl for `DeleteJob`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteJob {
    _private: (),
}
impl DeleteJob {
    /// Creates a new builder-style object to manufacture [`DeleteJobInput`](crate::input::DeleteJobInput).
    pub fn builder() -> crate::input::delete_job_input::Builder {
        crate::input::delete_job_input::Builder::default()
    }
    /// Creates a new `DeleteJob` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteJob {
    type Output = std::result::Result<crate::output::DeleteJobOutput, crate::error::DeleteJobError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_job::de_delete_job_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_job::de_delete_job_http_response(response)
        }
    }
}

/// Operation shape for `DeleteRecoveryInstance`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_recovery_instance`](crate::client::fluent_builders::DeleteRecoveryInstance).
///
/// `ParseStrictResponse` impl for `DeleteRecoveryInstance`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteRecoveryInstance {
    _private: (),
}
impl DeleteRecoveryInstance {
    /// Creates a new builder-style object to manufacture [`DeleteRecoveryInstanceInput`](crate::input::DeleteRecoveryInstanceInput).
    pub fn builder() -> crate::input::delete_recovery_instance_input::Builder {
        crate::input::delete_recovery_instance_input::Builder::default()
    }
    /// Creates a new `DeleteRecoveryInstance` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteRecoveryInstance {
    type Output = std::result::Result<
        crate::output::DeleteRecoveryInstanceOutput,
        crate::error::DeleteRecoveryInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_delete_recovery_instance::de_delete_recovery_instance_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_recovery_instance::de_delete_recovery_instance_http_response(response)
        }
    }
}

/// Operation shape for `DeleteReplicationConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_replication_configuration_template`](crate::client::fluent_builders::DeleteReplicationConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `DeleteReplicationConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteReplicationConfigurationTemplate {
    _private: (),
}
impl DeleteReplicationConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`DeleteReplicationConfigurationTemplateInput`](crate::input::DeleteReplicationConfigurationTemplateInput).
    pub fn builder() -> crate::input::delete_replication_configuration_template_input::Builder {
        crate::input::delete_replication_configuration_template_input::Builder::default()
    }
    /// Creates a new `DeleteReplicationConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteReplicationConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::DeleteReplicationConfigurationTemplateOutput,
        crate::error::DeleteReplicationConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_replication_configuration_template::de_delete_replication_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_delete_replication_configuration_template::de_delete_replication_configuration_template_http_response(response)
        }
    }
}

/// Operation shape for `DeleteSourceServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_source_server`](crate::client::fluent_builders::DeleteSourceServer).
///
/// `ParseStrictResponse` impl for `DeleteSourceServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DeleteSourceServer {
    _private: (),
}
impl DeleteSourceServer {
    /// Creates a new builder-style object to manufacture [`DeleteSourceServerInput`](crate::input::DeleteSourceServerInput).
    pub fn builder() -> crate::input::delete_source_server_input::Builder {
        crate::input::delete_source_server_input::Builder::default()
    }
    /// Creates a new `DeleteSourceServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteSourceServer {
    type Output = std::result::Result<
        crate::output::DeleteSourceServerOutput,
        crate::error::DeleteSourceServerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_delete_source_server::de_delete_source_server_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_delete_source_server::de_delete_source_server_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `DescribeJobLogItems`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_job_log_items`](crate::client::fluent_builders::DescribeJobLogItems).
///
/// `ParseStrictResponse` impl for `DescribeJobLogItems`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeJobLogItems {
    _private: (),
}
impl DescribeJobLogItems {
    /// Creates a new builder-style object to manufacture [`DescribeJobLogItemsInput`](crate::input::DescribeJobLogItemsInput).
    pub fn builder() -> crate::input::describe_job_log_items_input::Builder {
        crate::input::describe_job_log_items_input::Builder::default()
    }
    /// Creates a new `DescribeJobLogItems` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeJobLogItems {
    type Output = std::result::Result<
        crate::output::DescribeJobLogItemsOutput,
        crate::error::DescribeJobLogItemsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_job_log_items::de_describe_job_log_items_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_job_log_items::de_describe_job_log_items_http_response(response)
        }
    }
}

/// Operation shape for `DescribeJobs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_jobs`](crate::client::fluent_builders::DescribeJobs).
///
/// `ParseStrictResponse` impl for `DescribeJobs`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeJobs {
    _private: (),
}
impl DescribeJobs {
    /// Creates a new builder-style object to manufacture [`DescribeJobsInput`](crate::input::DescribeJobsInput).
    pub fn builder() -> crate::input::describe_jobs_input::Builder {
        crate::input::describe_jobs_input::Builder::default()
    }
    /// Creates a new `DescribeJobs` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeJobs {
    type Output =
        std::result::Result<crate::output::DescribeJobsOutput, crate::error::DescribeJobsError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_jobs::de_describe_jobs_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_jobs::de_describe_jobs_http_response(response)
        }
    }
}

/// Operation shape for `DescribeRecoveryInstances`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_recovery_instances`](crate::client::fluent_builders::DescribeRecoveryInstances).
///
/// `ParseStrictResponse` impl for `DescribeRecoveryInstances`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeRecoveryInstances {
    _private: (),
}
impl DescribeRecoveryInstances {
    /// Creates a new builder-style object to manufacture [`DescribeRecoveryInstancesInput`](crate::input::DescribeRecoveryInstancesInput).
    pub fn builder() -> crate::input::describe_recovery_instances_input::Builder {
        crate::input::describe_recovery_instances_input::Builder::default()
    }
    /// Creates a new `DescribeRecoveryInstances` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeRecoveryInstances {
    type Output = std::result::Result<
        crate::output::DescribeRecoveryInstancesOutput,
        crate::error::DescribeRecoveryInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_recovery_instances::de_describe_recovery_instances_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_recovery_instances::de_describe_recovery_instances_http_response(response)
        }
    }
}

/// Operation shape for `DescribeRecoverySnapshots`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_recovery_snapshots`](crate::client::fluent_builders::DescribeRecoverySnapshots).
///
/// `ParseStrictResponse` impl for `DescribeRecoverySnapshots`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeRecoverySnapshots {
    _private: (),
}
impl DescribeRecoverySnapshots {
    /// Creates a new builder-style object to manufacture [`DescribeRecoverySnapshotsInput`](crate::input::DescribeRecoverySnapshotsInput).
    pub fn builder() -> crate::input::describe_recovery_snapshots_input::Builder {
        crate::input::describe_recovery_snapshots_input::Builder::default()
    }
    /// Creates a new `DescribeRecoverySnapshots` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeRecoverySnapshots {
    type Output = std::result::Result<
        crate::output::DescribeRecoverySnapshotsOutput,
        crate::error::DescribeRecoverySnapshotsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_recovery_snapshots::de_describe_recovery_snapshots_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_recovery_snapshots::de_describe_recovery_snapshots_http_response(response)
        }
    }
}

/// Operation shape for `DescribeReplicationConfigurationTemplates`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_replication_configuration_templates`](crate::client::fluent_builders::DescribeReplicationConfigurationTemplates).
///
/// `ParseStrictResponse` impl for `DescribeReplicationConfigurationTemplates`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeReplicationConfigurationTemplates {
    _private: (),
}
impl DescribeReplicationConfigurationTemplates {
    /// Creates a new builder-style object to manufacture [`DescribeReplicationConfigurationTemplatesInput`](crate::input::DescribeReplicationConfigurationTemplatesInput).
    pub fn builder() -> crate::input::describe_replication_configuration_templates_input::Builder {
        crate::input::describe_replication_configuration_templates_input::Builder::default()
    }
    /// Creates a new `DescribeReplicationConfigurationTemplates` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeReplicationConfigurationTemplates {
    type Output = std::result::Result<
        crate::output::DescribeReplicationConfigurationTemplatesOutput,
        crate::error::DescribeReplicationConfigurationTemplatesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_replication_configuration_templates::de_describe_replication_configuration_templates_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_replication_configuration_templates::de_describe_replication_configuration_templates_http_response(response)
        }
    }
}

/// Operation shape for `DescribeSourceServers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`describe_source_servers`](crate::client::fluent_builders::DescribeSourceServers).
///
/// `ParseStrictResponse` impl for `DescribeSourceServers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DescribeSourceServers {
    _private: (),
}
impl DescribeSourceServers {
    /// Creates a new builder-style object to manufacture [`DescribeSourceServersInput`](crate::input::DescribeSourceServersInput).
    pub fn builder() -> crate::input::describe_source_servers_input::Builder {
        crate::input::describe_source_servers_input::Builder::default()
    }
    /// Creates a new `DescribeSourceServers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DescribeSourceServers {
    type Output = std::result::Result<
        crate::output::DescribeSourceServersOutput,
        crate::error::DescribeSourceServersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_describe_source_servers::de_describe_source_servers_http_error(response)
        } else {
            crate::protocol_serde::shape_describe_source_servers::de_describe_source_servers_http_response(response)
        }
    }
}

/// Operation shape for `DisconnectRecoveryInstance`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disconnect_recovery_instance`](crate::client::fluent_builders::DisconnectRecoveryInstance).
///
/// `ParseStrictResponse` impl for `DisconnectRecoveryInstance`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisconnectRecoveryInstance {
    _private: (),
}
impl DisconnectRecoveryInstance {
    /// Creates a new builder-style object to manufacture [`DisconnectRecoveryInstanceInput`](crate::input::DisconnectRecoveryInstanceInput).
    pub fn builder() -> crate::input::disconnect_recovery_instance_input::Builder {
        crate::input::disconnect_recovery_instance_input::Builder::default()
    }
    /// Creates a new `DisconnectRecoveryInstance` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisconnectRecoveryInstance {
    type Output = std::result::Result<
        crate::output::DisconnectRecoveryInstanceOutput,
        crate::error::DisconnectRecoveryInstanceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disconnect_recovery_instance::de_disconnect_recovery_instance_http_error(response)
        } else {
            crate::protocol_serde::shape_disconnect_recovery_instance::de_disconnect_recovery_instance_http_response(response)
        }
    }
}

/// Operation shape for `DisconnectSourceServer`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`disconnect_source_server`](crate::client::fluent_builders::DisconnectSourceServer).
///
/// `ParseStrictResponse` impl for `DisconnectSourceServer`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct DisconnectSourceServer {
    _private: (),
}
impl DisconnectSourceServer {
    /// Creates a new builder-style object to manufacture [`DisconnectSourceServerInput`](crate::input::DisconnectSourceServerInput).
    pub fn builder() -> crate::input::disconnect_source_server_input::Builder {
        crate::input::disconnect_source_server_input::Builder::default()
    }
    /// Creates a new `DisconnectSourceServer` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for DisconnectSourceServer {
    type Output = std::result::Result<
        crate::output::DisconnectSourceServerOutput,
        crate::error::DisconnectSourceServerError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_disconnect_source_server::de_disconnect_source_server_http_error(response)
        } else {
            crate::protocol_serde::shape_disconnect_source_server::de_disconnect_source_server_http_response(response)
        }
    }
}

/// Operation shape for `GetFailbackReplicationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_failback_replication_configuration`](crate::client::fluent_builders::GetFailbackReplicationConfiguration).
///
/// `ParseStrictResponse` impl for `GetFailbackReplicationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetFailbackReplicationConfiguration {
    _private: (),
}
impl GetFailbackReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`GetFailbackReplicationConfigurationInput`](crate::input::GetFailbackReplicationConfigurationInput).
    pub fn builder() -> crate::input::get_failback_replication_configuration_input::Builder {
        crate::input::get_failback_replication_configuration_input::Builder::default()
    }
    /// Creates a new `GetFailbackReplicationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetFailbackReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::GetFailbackReplicationConfigurationOutput,
        crate::error::GetFailbackReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_failback_replication_configuration::de_get_failback_replication_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_failback_replication_configuration::de_get_failback_replication_configuration_http_response(response)
        }
    }
}

/// Operation shape for `GetLaunchConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_launch_configuration`](crate::client::fluent_builders::GetLaunchConfiguration).
///
/// `ParseStrictResponse` impl for `GetLaunchConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetLaunchConfiguration {
    _private: (),
}
impl GetLaunchConfiguration {
    /// Creates a new builder-style object to manufacture [`GetLaunchConfigurationInput`](crate::input::GetLaunchConfigurationInput).
    pub fn builder() -> crate::input::get_launch_configuration_input::Builder {
        crate::input::get_launch_configuration_input::Builder::default()
    }
    /// Creates a new `GetLaunchConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetLaunchConfiguration {
    type Output = std::result::Result<
        crate::output::GetLaunchConfigurationOutput,
        crate::error::GetLaunchConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_launch_configuration::de_get_launch_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_launch_configuration::de_get_launch_configuration_http_response(response)
        }
    }
}

/// Operation shape for `GetReplicationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_replication_configuration`](crate::client::fluent_builders::GetReplicationConfiguration).
///
/// `ParseStrictResponse` impl for `GetReplicationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct GetReplicationConfiguration {
    _private: (),
}
impl GetReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`GetReplicationConfigurationInput`](crate::input::GetReplicationConfigurationInput).
    pub fn builder() -> crate::input::get_replication_configuration_input::Builder {
        crate::input::get_replication_configuration_input::Builder::default()
    }
    /// Creates a new `GetReplicationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for GetReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::GetReplicationConfigurationOutput,
        crate::error::GetReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_get_replication_configuration::de_get_replication_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_get_replication_configuration::de_get_replication_configuration_http_response(response)
        }
    }
}

/// Operation shape for `InitializeService`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`initialize_service`](crate::client::fluent_builders::InitializeService).
///
/// `ParseStrictResponse` impl for `InitializeService`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct InitializeService {
    _private: (),
}
impl InitializeService {
    /// Creates a new builder-style object to manufacture [`InitializeServiceInput`](crate::input::InitializeServiceInput).
    pub fn builder() -> crate::input::initialize_service_input::Builder {
        crate::input::initialize_service_input::Builder::default()
    }
    /// Creates a new `InitializeService` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for InitializeService {
    type Output = std::result::Result<
        crate::output::InitializeServiceOutput,
        crate::error::InitializeServiceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 204 {
            crate::protocol_serde::shape_initialize_service::de_initialize_service_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_initialize_service::de_initialize_service_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `ListExtensibleSourceServers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_extensible_source_servers`](crate::client::fluent_builders::ListExtensibleSourceServers).
///
/// `ParseStrictResponse` impl for `ListExtensibleSourceServers`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListExtensibleSourceServers {
    _private: (),
}
impl ListExtensibleSourceServers {
    /// Creates a new builder-style object to manufacture [`ListExtensibleSourceServersInput`](crate::input::ListExtensibleSourceServersInput).
    pub fn builder() -> crate::input::list_extensible_source_servers_input::Builder {
        crate::input::list_extensible_source_servers_input::Builder::default()
    }
    /// Creates a new `ListExtensibleSourceServers` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListExtensibleSourceServers {
    type Output = std::result::Result<
        crate::output::ListExtensibleSourceServersOutput,
        crate::error::ListExtensibleSourceServersError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_extensible_source_servers::de_list_extensible_source_servers_http_error(response)
        } else {
            crate::protocol_serde::shape_list_extensible_source_servers::de_list_extensible_source_servers_http_response(response)
        }
    }
}

/// Operation shape for `ListStagingAccounts`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_staging_accounts`](crate::client::fluent_builders::ListStagingAccounts).
///
/// `ParseStrictResponse` impl for `ListStagingAccounts`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListStagingAccounts {
    _private: (),
}
impl ListStagingAccounts {
    /// Creates a new builder-style object to manufacture [`ListStagingAccountsInput`](crate::input::ListStagingAccountsInput).
    pub fn builder() -> crate::input::list_staging_accounts_input::Builder {
        crate::input::list_staging_accounts_input::Builder::default()
    }
    /// Creates a new `ListStagingAccounts` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListStagingAccounts {
    type Output = std::result::Result<
        crate::output::ListStagingAccountsOutput,
        crate::error::ListStagingAccountsError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_staging_accounts::de_list_staging_accounts_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_list_staging_accounts::de_list_staging_accounts_http_response(response)
        }
    }
}

/// Operation shape for `ListTagsForResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_tags_for_resource`](crate::client::fluent_builders::ListTagsForResource).
///
/// `ParseStrictResponse` impl for `ListTagsForResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ListTagsForResource {
    _private: (),
}
impl ListTagsForResource {
    /// Creates a new builder-style object to manufacture [`ListTagsForResourceInput`](crate::input::ListTagsForResourceInput).
    pub fn builder() -> crate::input::list_tags_for_resource_input::Builder {
        crate::input::list_tags_for_resource_input::Builder::default()
    }
    /// Creates a new `ListTagsForResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ListTagsForResource {
    type Output = std::result::Result<
        crate::output::ListTagsForResourceOutput,
        crate::error::ListTagsForResourceError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_list_tags_for_resource::de_list_tags_for_resource_http_response(response)
        }
    }
}

/// Operation shape for `RetryDataReplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`retry_data_replication`](crate::client::fluent_builders::RetryDataReplication).
///
/// `ParseStrictResponse` impl for `RetryDataReplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct RetryDataReplication {
    _private: (),
}
impl RetryDataReplication {
    /// Creates a new builder-style object to manufacture [`RetryDataReplicationInput`](crate::input::RetryDataReplicationInput).
    pub fn builder() -> crate::input::retry_data_replication_input::Builder {
        crate::input::retry_data_replication_input::Builder::default()
    }
    /// Creates a new `RetryDataReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for RetryDataReplication {
    type Output = std::result::Result<
        crate::output::RetryDataReplicationOutput,
        crate::error::RetryDataReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_retry_data_replication::de_retry_data_replication_http_error(response)
        } else {
            crate::protocol_serde::shape_retry_data_replication::de_retry_data_replication_http_response(response)
        }
    }
}

/// Operation shape for `ReverseReplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`reverse_replication`](crate::client::fluent_builders::ReverseReplication).
///
/// `ParseStrictResponse` impl for `ReverseReplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct ReverseReplication {
    _private: (),
}
impl ReverseReplication {
    /// Creates a new builder-style object to manufacture [`ReverseReplicationInput`](crate::input::ReverseReplicationInput).
    pub fn builder() -> crate::input::reverse_replication_input::Builder {
        crate::input::reverse_replication_input::Builder::default()
    }
    /// Creates a new `ReverseReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for ReverseReplication {
    type Output = std::result::Result<
        crate::output::ReverseReplicationOutput,
        crate::error::ReverseReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_reverse_replication::de_reverse_replication_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_reverse_replication::de_reverse_replication_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `StartFailbackLaunch`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_failback_launch`](crate::client::fluent_builders::StartFailbackLaunch).
///
/// `ParseStrictResponse` impl for `StartFailbackLaunch`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartFailbackLaunch {
    _private: (),
}
impl StartFailbackLaunch {
    /// Creates a new builder-style object to manufacture [`StartFailbackLaunchInput`](crate::input::StartFailbackLaunchInput).
    pub fn builder() -> crate::input::start_failback_launch_input::Builder {
        crate::input::start_failback_launch_input::Builder::default()
    }
    /// Creates a new `StartFailbackLaunch` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartFailbackLaunch {
    type Output = std::result::Result<
        crate::output::StartFailbackLaunchOutput,
        crate::error::StartFailbackLaunchError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_failback_launch::de_start_failback_launch_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_failback_launch::de_start_failback_launch_http_response(response)
        }
    }
}

/// Operation shape for `StartRecovery`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_recovery`](crate::client::fluent_builders::StartRecovery).
///
/// `ParseStrictResponse` impl for `StartRecovery`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartRecovery {
    _private: (),
}
impl StartRecovery {
    /// Creates a new builder-style object to manufacture [`StartRecoveryInput`](crate::input::StartRecoveryInput).
    pub fn builder() -> crate::input::start_recovery_input::Builder {
        crate::input::start_recovery_input::Builder::default()
    }
    /// Creates a new `StartRecovery` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartRecovery {
    type Output =
        std::result::Result<crate::output::StartRecoveryOutput, crate::error::StartRecoveryError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 202 {
            crate::protocol_serde::shape_start_recovery::de_start_recovery_http_error(response)
        } else {
            crate::protocol_serde::shape_start_recovery::de_start_recovery_http_response(response)
        }
    }
}

/// Operation shape for `StartReplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`start_replication`](crate::client::fluent_builders::StartReplication).
///
/// `ParseStrictResponse` impl for `StartReplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StartReplication {
    _private: (),
}
impl StartReplication {
    /// Creates a new builder-style object to manufacture [`StartReplicationInput`](crate::input::StartReplicationInput).
    pub fn builder() -> crate::input::start_replication_input::Builder {
        crate::input::start_replication_input::Builder::default()
    }
    /// Creates a new `StartReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StartReplication {
    type Output = std::result::Result<
        crate::output::StartReplicationOutput,
        crate::error::StartReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_start_replication::de_start_replication_http_error(
                response,
            )
        } else {
            crate::protocol_serde::shape_start_replication::de_start_replication_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `StopFailback`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_failback`](crate::client::fluent_builders::StopFailback).
///
/// `ParseStrictResponse` impl for `StopFailback`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopFailback {
    _private: (),
}
impl StopFailback {
    /// Creates a new builder-style object to manufacture [`StopFailbackInput`](crate::input::StopFailbackInput).
    pub fn builder() -> crate::input::stop_failback_input::Builder {
        crate::input::stop_failback_input::Builder::default()
    }
    /// Creates a new `StopFailback` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopFailback {
    type Output =
        std::result::Result<crate::output::StopFailbackOutput, crate::error::StopFailbackError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_stop_failback::de_stop_failback_http_error(response)
        } else {
            crate::protocol_serde::shape_stop_failback::de_stop_failback_http_response(response)
        }
    }
}

/// Operation shape for `StopReplication`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`stop_replication`](crate::client::fluent_builders::StopReplication).
///
/// `ParseStrictResponse` impl for `StopReplication`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct StopReplication {
    _private: (),
}
impl StopReplication {
    /// Creates a new builder-style object to manufacture [`StopReplicationInput`](crate::input::StopReplicationInput).
    pub fn builder() -> crate::input::stop_replication_input::Builder {
        crate::input::stop_replication_input::Builder::default()
    }
    /// Creates a new `StopReplication` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for StopReplication {
    type Output = std::result::Result<
        crate::output::StopReplicationOutput,
        crate::error::StopReplicationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_stop_replication::de_stop_replication_http_error(response)
        } else {
            crate::protocol_serde::shape_stop_replication::de_stop_replication_http_response(
                response,
            )
        }
    }
}

/// Operation shape for `TagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`tag_resource`](crate::client::fluent_builders::TagResource).
///
/// `ParseStrictResponse` impl for `TagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TagResource {
    _private: (),
}
impl TagResource {
    /// Creates a new builder-style object to manufacture [`TagResourceInput`](crate::input::TagResourceInput).
    pub fn builder() -> crate::input::tag_resource_input::Builder {
        crate::input::tag_resource_input::Builder::default()
    }
    /// Creates a new `TagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TagResource {
    type Output =
        std::result::Result<crate::output::TagResourceOutput, crate::error::TagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_tag_resource::de_tag_resource_http_response(response)
        }
    }
}

/// Operation shape for `TerminateRecoveryInstances`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`terminate_recovery_instances`](crate::client::fluent_builders::TerminateRecoveryInstances).
///
/// `ParseStrictResponse` impl for `TerminateRecoveryInstances`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct TerminateRecoveryInstances {
    _private: (),
}
impl TerminateRecoveryInstances {
    /// Creates a new builder-style object to manufacture [`TerminateRecoveryInstancesInput`](crate::input::TerminateRecoveryInstancesInput).
    pub fn builder() -> crate::input::terminate_recovery_instances_input::Builder {
        crate::input::terminate_recovery_instances_input::Builder::default()
    }
    /// Creates a new `TerminateRecoveryInstances` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for TerminateRecoveryInstances {
    type Output = std::result::Result<
        crate::output::TerminateRecoveryInstancesOutput,
        crate::error::TerminateRecoveryInstancesError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_terminate_recovery_instances::de_terminate_recovery_instances_http_error(response)
        } else {
            crate::protocol_serde::shape_terminate_recovery_instances::de_terminate_recovery_instances_http_response(response)
        }
    }
}

/// Operation shape for `UntagResource`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`untag_resource`](crate::client::fluent_builders::UntagResource).
///
/// `ParseStrictResponse` impl for `UntagResource`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UntagResource {
    _private: (),
}
impl UntagResource {
    /// Creates a new builder-style object to manufacture [`UntagResourceInput`](crate::input::UntagResourceInput).
    pub fn builder() -> crate::input::untag_resource_input::Builder {
        crate::input::untag_resource_input::Builder::default()
    }
    /// Creates a new `UntagResource` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UntagResource {
    type Output =
        std::result::Result<crate::output::UntagResourceOutput, crate::error::UntagResourceError>;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_error(response)
        } else {
            crate::protocol_serde::shape_untag_resource::de_untag_resource_http_response(response)
        }
    }
}

/// Operation shape for `UpdateFailbackReplicationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_failback_replication_configuration`](crate::client::fluent_builders::UpdateFailbackReplicationConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateFailbackReplicationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateFailbackReplicationConfiguration {
    _private: (),
}
impl UpdateFailbackReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateFailbackReplicationConfigurationInput`](crate::input::UpdateFailbackReplicationConfigurationInput).
    pub fn builder() -> crate::input::update_failback_replication_configuration_input::Builder {
        crate::input::update_failback_replication_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateFailbackReplicationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateFailbackReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateFailbackReplicationConfigurationOutput,
        crate::error::UpdateFailbackReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_failback_replication_configuration::de_update_failback_replication_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_failback_replication_configuration::de_update_failback_replication_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdateLaunchConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_launch_configuration`](crate::client::fluent_builders::UpdateLaunchConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateLaunchConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateLaunchConfiguration {
    _private: (),
}
impl UpdateLaunchConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateLaunchConfigurationInput`](crate::input::UpdateLaunchConfigurationInput).
    pub fn builder() -> crate::input::update_launch_configuration_input::Builder {
        crate::input::update_launch_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateLaunchConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateLaunchConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateLaunchConfigurationOutput,
        crate::error::UpdateLaunchConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_launch_configuration::de_update_launch_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_launch_configuration::de_update_launch_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdateReplicationConfiguration`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_replication_configuration`](crate::client::fluent_builders::UpdateReplicationConfiguration).
///
/// `ParseStrictResponse` impl for `UpdateReplicationConfiguration`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateReplicationConfiguration {
    _private: (),
}
impl UpdateReplicationConfiguration {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationConfigurationInput`](crate::input::UpdateReplicationConfigurationInput).
    pub fn builder() -> crate::input::update_replication_configuration_input::Builder {
        crate::input::update_replication_configuration_input::Builder::default()
    }
    /// Creates a new `UpdateReplicationConfiguration` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateReplicationConfiguration {
    type Output = std::result::Result<
        crate::output::UpdateReplicationConfigurationOutput,
        crate::error::UpdateReplicationConfigurationError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_replication_configuration::de_update_replication_configuration_http_error(response)
        } else {
            crate::protocol_serde::shape_update_replication_configuration::de_update_replication_configuration_http_response(response)
        }
    }
}

/// Operation shape for `UpdateReplicationConfigurationTemplate`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_replication_configuration_template`](crate::client::fluent_builders::UpdateReplicationConfigurationTemplate).
///
/// `ParseStrictResponse` impl for `UpdateReplicationConfigurationTemplate`.
#[derive(std::clone::Clone, std::default::Default, std::fmt::Debug)]
pub struct UpdateReplicationConfigurationTemplate {
    _private: (),
}
impl UpdateReplicationConfigurationTemplate {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationConfigurationTemplateInput`](crate::input::UpdateReplicationConfigurationTemplateInput).
    pub fn builder() -> crate::input::update_replication_configuration_template_input::Builder {
        crate::input::update_replication_configuration_template_input::Builder::default()
    }
    /// Creates a new `UpdateReplicationConfigurationTemplate` operation.
    pub fn new() -> Self {
        Self { _private: () }
    }
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateReplicationConfigurationTemplate {
    type Output = std::result::Result<
        crate::output::UpdateReplicationConfigurationTemplateOutput,
        crate::error::UpdateReplicationConfigurationTemplateError,
    >;
    fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
        tracing::debug!(request_id = ?aws_http::request_id::RequestId::request_id(response));
        if !response.status().is_success() && response.status().as_u16() != 200 {
            crate::protocol_serde::shape_update_replication_configuration_template::de_update_replication_configuration_template_http_error(response)
        } else {
            crate::protocol_serde::shape_update_replication_configuration_template::de_update_replication_configuration_template_http_response(response)
        }
    }
}

/// Operation customization and supporting types
pub mod customize;
