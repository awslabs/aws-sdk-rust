// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetFailbackReplicationConfigurationOutput {
    /// <p>The ID of the Recovery Instance.</p>
    #[doc(hidden)]
    pub recovery_instance_id: std::option::Option<std::string::String>,
    /// <p>The name of the Failback Replication Configuration.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Recovery Instance in Mbps.</p>
    #[doc(hidden)]
    pub bandwidth_throttling: i64,
    /// <p>Whether to use Private IP for the failback replication of the Recovery Instance.</p>
    #[doc(hidden)]
    pub use_private_ip: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetFailbackReplicationConfigurationOutput {
    /// <p>The ID of the Recovery Instance.</p>
    pub fn recovery_instance_id(&self) -> std::option::Option<&str> {
        self.recovery_instance_id.as_deref()
    }
    /// <p>The name of the Failback Replication Configuration.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Recovery Instance in Mbps.</p>
    pub fn bandwidth_throttling(&self) -> i64 {
        self.bandwidth_throttling
    }
    /// <p>Whether to use Private IP for the failback replication of the Recovery Instance.</p>
    pub fn use_private_ip(&self) -> std::option::Option<bool> {
        self.use_private_ip
    }
}
impl aws_http::request_id::RequestId for GetFailbackReplicationConfigurationOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetFailbackReplicationConfigurationOutput {
    /// Creates a new builder-style object to manufacture [`GetFailbackReplicationConfigurationOutput`](crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationOutput).
    pub fn builder() -> crate::operation::get_failback_replication_configuration::builders::GetFailbackReplicationConfigurationOutputBuilder{
        crate::operation::get_failback_replication_configuration::builders::GetFailbackReplicationConfigurationOutputBuilder::default()
    }
}

/// A builder for [`GetFailbackReplicationConfigurationOutput`](crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetFailbackReplicationConfigurationOutputBuilder {
    pub(crate) recovery_instance_id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) bandwidth_throttling: std::option::Option<i64>,
    pub(crate) use_private_ip: std::option::Option<bool>,
    _request_id: Option<String>,
}
impl GetFailbackReplicationConfigurationOutputBuilder {
    /// <p>The ID of the Recovery Instance.</p>
    pub fn recovery_instance_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.recovery_instance_id = Some(input.into());
        self
    }
    /// <p>The ID of the Recovery Instance.</p>
    pub fn set_recovery_instance_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.recovery_instance_id = input;
        self
    }
    /// <p>The name of the Failback Replication Configuration.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the Failback Replication Configuration.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Recovery Instance in Mbps.</p>
    pub fn bandwidth_throttling(mut self, input: i64) -> Self {
        self.bandwidth_throttling = Some(input);
        self
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Recovery Instance in Mbps.</p>
    pub fn set_bandwidth_throttling(mut self, input: std::option::Option<i64>) -> Self {
        self.bandwidth_throttling = input;
        self
    }
    /// <p>Whether to use Private IP for the failback replication of the Recovery Instance.</p>
    pub fn use_private_ip(mut self, input: bool) -> Self {
        self.use_private_ip = Some(input);
        self
    }
    /// <p>Whether to use Private IP for the failback replication of the Recovery Instance.</p>
    pub fn set_use_private_ip(mut self, input: std::option::Option<bool>) -> Self {
        self.use_private_ip = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetFailbackReplicationConfigurationOutput`](crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationOutput).
    pub fn build(self) -> crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationOutput{
        crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationOutput {
            recovery_instance_id: self.recovery_instance_id
            ,
            name: self.name
            ,
            bandwidth_throttling: self.bandwidth_throttling
                .unwrap_or_default()
            ,
            use_private_ip: self.use_private_ip
            ,
            _request_id: self._request_id,
        }
    }
}
