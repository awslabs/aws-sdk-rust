// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateReplicationConfigurationTemplateInput {
    /// <p>The Replication Configuration Template ID.</p>
    pub replication_configuration_template_id: ::std::option::Option<::std::string::String>,
    /// <p>The Replication Configuration Template ARN.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The subnet to be used by the replication staging area.</p>
    pub staging_area_subnet_id: ::std::option::Option<::std::string::String>,
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub associate_default_security_group: ::std::option::Option<bool>,
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub replication_servers_security_groups_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The instance type to be used for the replication server.</p>
    pub replication_server_instance_type: ::std::option::Option<::std::string::String>,
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub use_dedicated_replication_server: ::std::option::Option<bool>,
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub default_large_staging_disk_type: ::std::option::Option<crate::types::ReplicationConfigurationDefaultLargeStagingDiskType>,
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub ebs_encryption: ::std::option::Option<crate::types::ReplicationConfigurationEbsEncryption>,
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub ebs_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub bandwidth_throttling: ::std::option::Option<i64>,
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub data_plane_routing: ::std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting>,
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub create_public_ip: ::std::option::Option<bool>,
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub staging_area_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub pit_policy: ::std::option::Option<::std::vec::Vec<crate::types::PitPolicyRule>>,
    /// <p>Whether to allow the AWS replication agent to automatically replicate newly added disks.</p>
    pub auto_replicate_new_disks: ::std::option::Option<bool>,
}
impl UpdateReplicationConfigurationTemplateInput {
    /// <p>The Replication Configuration Template ID.</p>
    pub fn replication_configuration_template_id(&self) -> ::std::option::Option<&str> {
        self.replication_configuration_template_id.as_deref()
    }
    /// <p>The Replication Configuration Template ARN.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn staging_area_subnet_id(&self) -> ::std::option::Option<&str> {
        self.staging_area_subnet_id.as_deref()
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn associate_default_security_group(&self) -> ::std::option::Option<bool> {
        self.associate_default_security_group
    }
    /// <p>The security group IDs that will be used by the replication server.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.replication_servers_security_groups_ids.is_none()`.
    pub fn replication_servers_security_groups_ids(&self) -> &[::std::string::String] {
        self.replication_servers_security_groups_ids.as_deref().unwrap_or_default()
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn replication_server_instance_type(&self) -> ::std::option::Option<&str> {
        self.replication_server_instance_type.as_deref()
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn use_dedicated_replication_server(&self) -> ::std::option::Option<bool> {
        self.use_dedicated_replication_server
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn default_large_staging_disk_type(&self) -> ::std::option::Option<&crate::types::ReplicationConfigurationDefaultLargeStagingDiskType> {
        self.default_large_staging_disk_type.as_ref()
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn ebs_encryption(&self) -> ::std::option::Option<&crate::types::ReplicationConfigurationEbsEncryption> {
        self.ebs_encryption.as_ref()
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn ebs_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.ebs_encryption_key_arn.as_deref()
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn bandwidth_throttling(&self) -> ::std::option::Option<i64> {
        self.bandwidth_throttling
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn data_plane_routing(&self) -> ::std::option::Option<&crate::types::ReplicationConfigurationDataPlaneRouting> {
        self.data_plane_routing.as_ref()
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn create_public_ip(&self) -> ::std::option::Option<bool> {
        self.create_public_ip
    }
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn staging_area_tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.staging_area_tags.as_ref()
    }
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.pit_policy.is_none()`.
    pub fn pit_policy(&self) -> &[crate::types::PitPolicyRule] {
        self.pit_policy.as_deref().unwrap_or_default()
    }
    /// <p>Whether to allow the AWS replication agent to automatically replicate newly added disks.</p>
    pub fn auto_replicate_new_disks(&self) -> ::std::option::Option<bool> {
        self.auto_replicate_new_disks
    }
}
impl ::std::fmt::Debug for UpdateReplicationConfigurationTemplateInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateReplicationConfigurationTemplateInput");
        formatter.field("replication_configuration_template_id", &self.replication_configuration_template_id);
        formatter.field("arn", &self.arn);
        formatter.field("staging_area_subnet_id", &self.staging_area_subnet_id);
        formatter.field("associate_default_security_group", &self.associate_default_security_group);
        formatter.field("replication_servers_security_groups_ids", &self.replication_servers_security_groups_ids);
        formatter.field("replication_server_instance_type", &self.replication_server_instance_type);
        formatter.field("use_dedicated_replication_server", &self.use_dedicated_replication_server);
        formatter.field("default_large_staging_disk_type", &self.default_large_staging_disk_type);
        formatter.field("ebs_encryption", &self.ebs_encryption);
        formatter.field("ebs_encryption_key_arn", &self.ebs_encryption_key_arn);
        formatter.field("bandwidth_throttling", &self.bandwidth_throttling);
        formatter.field("data_plane_routing", &self.data_plane_routing);
        formatter.field("create_public_ip", &self.create_public_ip);
        formatter.field("staging_area_tags", &"*** Sensitive Data Redacted ***");
        formatter.field("pit_policy", &self.pit_policy);
        formatter.field("auto_replicate_new_disks", &self.auto_replicate_new_disks);
        formatter.finish()
    }
}
impl UpdateReplicationConfigurationTemplateInput {
    /// Creates a new builder-style object to manufacture [`UpdateReplicationConfigurationTemplateInput`](crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput).
    pub fn builder() -> crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateInputBuilder {
        crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateInputBuilder::default()
    }
}

/// A builder for [`UpdateReplicationConfigurationTemplateInput`](crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateReplicationConfigurationTemplateInputBuilder {
    pub(crate) replication_configuration_template_id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) staging_area_subnet_id: ::std::option::Option<::std::string::String>,
    pub(crate) associate_default_security_group: ::std::option::Option<bool>,
    pub(crate) replication_servers_security_groups_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) replication_server_instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) use_dedicated_replication_server: ::std::option::Option<bool>,
    pub(crate) default_large_staging_disk_type: ::std::option::Option<crate::types::ReplicationConfigurationDefaultLargeStagingDiskType>,
    pub(crate) ebs_encryption: ::std::option::Option<crate::types::ReplicationConfigurationEbsEncryption>,
    pub(crate) ebs_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) bandwidth_throttling: ::std::option::Option<i64>,
    pub(crate) data_plane_routing: ::std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting>,
    pub(crate) create_public_ip: ::std::option::Option<bool>,
    pub(crate) staging_area_tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) pit_policy: ::std::option::Option<::std::vec::Vec<crate::types::PitPolicyRule>>,
    pub(crate) auto_replicate_new_disks: ::std::option::Option<bool>,
}
impl UpdateReplicationConfigurationTemplateInputBuilder {
    /// <p>The Replication Configuration Template ID.</p>
    /// This field is required.
    pub fn replication_configuration_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_configuration_template_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Replication Configuration Template ID.</p>
    pub fn set_replication_configuration_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_configuration_template_id = input;
        self
    }
    /// <p>The Replication Configuration Template ID.</p>
    pub fn get_replication_configuration_template_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_configuration_template_id
    }
    /// <p>The Replication Configuration Template ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Replication Configuration Template ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Replication Configuration Template ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn staging_area_subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.staging_area_subnet_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn set_staging_area_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.staging_area_subnet_id = input;
        self
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn get_staging_area_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.staging_area_subnet_id
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn associate_default_security_group(mut self, input: bool) -> Self {
        self.associate_default_security_group = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn set_associate_default_security_group(mut self, input: ::std::option::Option<bool>) -> Self {
        self.associate_default_security_group = input;
        self
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn get_associate_default_security_group(&self) -> &::std::option::Option<bool> {
        &self.associate_default_security_group
    }
    /// Appends an item to `replication_servers_security_groups_ids`.
    ///
    /// To override the contents of this collection use [`set_replication_servers_security_groups_ids`](Self::set_replication_servers_security_groups_ids).
    ///
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub fn replication_servers_security_groups_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.replication_servers_security_groups_ids.unwrap_or_default();
        v.push(input.into());
        self.replication_servers_security_groups_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub fn set_replication_servers_security_groups_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.replication_servers_security_groups_ids = input;
        self
    }
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub fn get_replication_servers_security_groups_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.replication_servers_security_groups_ids
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn replication_server_instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.replication_server_instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn set_replication_server_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.replication_server_instance_type = input;
        self
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn get_replication_server_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.replication_server_instance_type
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn use_dedicated_replication_server(mut self, input: bool) -> Self {
        self.use_dedicated_replication_server = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn set_use_dedicated_replication_server(mut self, input: ::std::option::Option<bool>) -> Self {
        self.use_dedicated_replication_server = input;
        self
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn get_use_dedicated_replication_server(&self) -> &::std::option::Option<bool> {
        &self.use_dedicated_replication_server
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn default_large_staging_disk_type(mut self, input: crate::types::ReplicationConfigurationDefaultLargeStagingDiskType) -> Self {
        self.default_large_staging_disk_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn set_default_large_staging_disk_type(
        mut self,
        input: ::std::option::Option<crate::types::ReplicationConfigurationDefaultLargeStagingDiskType>,
    ) -> Self {
        self.default_large_staging_disk_type = input;
        self
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn get_default_large_staging_disk_type(&self) -> &::std::option::Option<crate::types::ReplicationConfigurationDefaultLargeStagingDiskType> {
        &self.default_large_staging_disk_type
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn ebs_encryption(mut self, input: crate::types::ReplicationConfigurationEbsEncryption) -> Self {
        self.ebs_encryption = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn set_ebs_encryption(mut self, input: ::std::option::Option<crate::types::ReplicationConfigurationEbsEncryption>) -> Self {
        self.ebs_encryption = input;
        self
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn get_ebs_encryption(&self) -> &::std::option::Option<crate::types::ReplicationConfigurationEbsEncryption> {
        &self.ebs_encryption
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn ebs_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ebs_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn set_ebs_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ebs_encryption_key_arn = input;
        self
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn get_ebs_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.ebs_encryption_key_arn
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn bandwidth_throttling(mut self, input: i64) -> Self {
        self.bandwidth_throttling = ::std::option::Option::Some(input);
        self
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn set_bandwidth_throttling(mut self, input: ::std::option::Option<i64>) -> Self {
        self.bandwidth_throttling = input;
        self
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn get_bandwidth_throttling(&self) -> &::std::option::Option<i64> {
        &self.bandwidth_throttling
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn data_plane_routing(mut self, input: crate::types::ReplicationConfigurationDataPlaneRouting) -> Self {
        self.data_plane_routing = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn set_data_plane_routing(mut self, input: ::std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting>) -> Self {
        self.data_plane_routing = input;
        self
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn get_data_plane_routing(&self) -> &::std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting> {
        &self.data_plane_routing
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn create_public_ip(mut self, input: bool) -> Self {
        self.create_public_ip = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn set_create_public_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.create_public_ip = input;
        self
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn get_create_public_ip(&self) -> &::std::option::Option<bool> {
        &self.create_public_ip
    }
    /// Adds a key-value pair to `staging_area_tags`.
    ///
    /// To override the contents of this collection use [`set_staging_area_tags`](Self::set_staging_area_tags).
    ///
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn staging_area_tags(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.staging_area_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.staging_area_tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn set_staging_area_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.staging_area_tags = input;
        self
    }
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn get_staging_area_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.staging_area_tags
    }
    /// Appends an item to `pit_policy`.
    ///
    /// To override the contents of this collection use [`set_pit_policy`](Self::set_pit_policy).
    ///
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub fn pit_policy(mut self, input: crate::types::PitPolicyRule) -> Self {
        let mut v = self.pit_policy.unwrap_or_default();
        v.push(input);
        self.pit_policy = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub fn set_pit_policy(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PitPolicyRule>>) -> Self {
        self.pit_policy = input;
        self
    }
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub fn get_pit_policy(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PitPolicyRule>> {
        &self.pit_policy
    }
    /// <p>Whether to allow the AWS replication agent to automatically replicate newly added disks.</p>
    pub fn auto_replicate_new_disks(mut self, input: bool) -> Self {
        self.auto_replicate_new_disks = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether to allow the AWS replication agent to automatically replicate newly added disks.</p>
    pub fn set_auto_replicate_new_disks(mut self, input: ::std::option::Option<bool>) -> Self {
        self.auto_replicate_new_disks = input;
        self
    }
    /// <p>Whether to allow the AWS replication agent to automatically replicate newly added disks.</p>
    pub fn get_auto_replicate_new_disks(&self) -> &::std::option::Option<bool> {
        &self.auto_replicate_new_disks
    }
    /// Consumes the builder and constructs a [`UpdateReplicationConfigurationTemplateInput`](crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput {
                replication_configuration_template_id: self.replication_configuration_template_id,
                arn: self.arn,
                staging_area_subnet_id: self.staging_area_subnet_id,
                associate_default_security_group: self.associate_default_security_group,
                replication_servers_security_groups_ids: self.replication_servers_security_groups_ids,
                replication_server_instance_type: self.replication_server_instance_type,
                use_dedicated_replication_server: self.use_dedicated_replication_server,
                default_large_staging_disk_type: self.default_large_staging_disk_type,
                ebs_encryption: self.ebs_encryption,
                ebs_encryption_key_arn: self.ebs_encryption_key_arn,
                bandwidth_throttling: self.bandwidth_throttling,
                data_plane_routing: self.data_plane_routing,
                create_public_ip: self.create_public_ip,
                staging_area_tags: self.staging_area_tags,
                pit_policy: self.pit_policy,
                auto_replicate_new_disks: self.auto_replicate_new_disks,
            },
        )
    }
}
impl ::std::fmt::Debug for UpdateReplicationConfigurationTemplateInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateReplicationConfigurationTemplateInputBuilder");
        formatter.field("replication_configuration_template_id", &self.replication_configuration_template_id);
        formatter.field("arn", &self.arn);
        formatter.field("staging_area_subnet_id", &self.staging_area_subnet_id);
        formatter.field("associate_default_security_group", &self.associate_default_security_group);
        formatter.field("replication_servers_security_groups_ids", &self.replication_servers_security_groups_ids);
        formatter.field("replication_server_instance_type", &self.replication_server_instance_type);
        formatter.field("use_dedicated_replication_server", &self.use_dedicated_replication_server);
        formatter.field("default_large_staging_disk_type", &self.default_large_staging_disk_type);
        formatter.field("ebs_encryption", &self.ebs_encryption);
        formatter.field("ebs_encryption_key_arn", &self.ebs_encryption_key_arn);
        formatter.field("bandwidth_throttling", &self.bandwidth_throttling);
        formatter.field("data_plane_routing", &self.data_plane_routing);
        formatter.field("create_public_ip", &self.create_public_ip);
        formatter.field("staging_area_tags", &"*** Sensitive Data Redacted ***");
        formatter.field("pit_policy", &self.pit_policy);
        formatter.field("auto_replicate_new_disks", &self.auto_replicate_new_disks);
        formatter.finish()
    }
}
