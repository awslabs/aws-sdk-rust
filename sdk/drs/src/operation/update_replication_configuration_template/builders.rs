// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_replication_configuration_template::_update_replication_configuration_template_output::UpdateReplicationConfigurationTemplateOutputBuilder;

pub use crate::operation::update_replication_configuration_template::_update_replication_configuration_template_input::UpdateReplicationConfigurationTemplateInputBuilder;

impl crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_replication_configuration_template();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateReplicationConfigurationTemplate`.
///
/// <p>Updates a ReplicationConfigurationTemplate by ID.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateReplicationConfigurationTemplateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateOutput,
        crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError,
    > for UpdateReplicationConfigurationTemplateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateOutput,
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateReplicationConfigurationTemplateFluentBuilder {
    /// Creates a new `UpdateReplicationConfigurationTemplate`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateReplicationConfigurationTemplate as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplate::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplate::orchestrate(&runtime_plugins, input)
            .await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateOutput,
        crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The Replication Configuration Template ID.</p>
    pub fn replication_configuration_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.replication_configuration_template_id(input.into());
        self
    }
    /// <p>The Replication Configuration Template ID.</p>
    pub fn set_replication_configuration_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_replication_configuration_template_id(input);
        self
    }
    /// <p>The Replication Configuration Template ID.</p>
    pub fn get_replication_configuration_template_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_replication_configuration_template_id()
    }
    /// <p>The Replication Configuration Template ARN.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.arn(input.into());
        self
    }
    /// <p>The Replication Configuration Template ARN.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_arn(input);
        self
    }
    /// <p>The Replication Configuration Template ARN.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_arn()
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn staging_area_subnet_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.staging_area_subnet_id(input.into());
        self
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn set_staging_area_subnet_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_staging_area_subnet_id(input);
        self
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn get_staging_area_subnet_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_staging_area_subnet_id()
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn associate_default_security_group(mut self, input: bool) -> Self {
        self.inner = self.inner.associate_default_security_group(input);
        self
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn set_associate_default_security_group(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_associate_default_security_group(input);
        self
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn get_associate_default_security_group(&self) -> &::std::option::Option<bool> {
        self.inner.get_associate_default_security_group()
    }
    ///
    /// Appends an item to `replicationServersSecurityGroupsIDs`.
    ///
    /// To override the contents of this collection use [`set_replication_servers_security_groups_ids`](Self::set_replication_servers_security_groups_ids).
    ///
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub fn replication_servers_security_groups_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.replication_servers_security_groups_ids(input.into());
        self
    }
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub fn set_replication_servers_security_groups_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_replication_servers_security_groups_ids(input);
        self
    }
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub fn get_replication_servers_security_groups_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_replication_servers_security_groups_ids()
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn replication_server_instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.replication_server_instance_type(input.into());
        self
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn set_replication_server_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_replication_server_instance_type(input);
        self
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn get_replication_server_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_replication_server_instance_type()
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn use_dedicated_replication_server(mut self, input: bool) -> Self {
        self.inner = self.inner.use_dedicated_replication_server(input);
        self
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn set_use_dedicated_replication_server(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_use_dedicated_replication_server(input);
        self
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn get_use_dedicated_replication_server(&self) -> &::std::option::Option<bool> {
        self.inner.get_use_dedicated_replication_server()
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn default_large_staging_disk_type(mut self, input: crate::types::ReplicationConfigurationDefaultLargeStagingDiskType) -> Self {
        self.inner = self.inner.default_large_staging_disk_type(input);
        self
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn set_default_large_staging_disk_type(
        mut self,
        input: ::std::option::Option<crate::types::ReplicationConfigurationDefaultLargeStagingDiskType>,
    ) -> Self {
        self.inner = self.inner.set_default_large_staging_disk_type(input);
        self
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn get_default_large_staging_disk_type(&self) -> &::std::option::Option<crate::types::ReplicationConfigurationDefaultLargeStagingDiskType> {
        self.inner.get_default_large_staging_disk_type()
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn ebs_encryption(mut self, input: crate::types::ReplicationConfigurationEbsEncryption) -> Self {
        self.inner = self.inner.ebs_encryption(input);
        self
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn set_ebs_encryption(mut self, input: ::std::option::Option<crate::types::ReplicationConfigurationEbsEncryption>) -> Self {
        self.inner = self.inner.set_ebs_encryption(input);
        self
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn get_ebs_encryption(&self) -> &::std::option::Option<crate::types::ReplicationConfigurationEbsEncryption> {
        self.inner.get_ebs_encryption()
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn ebs_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.ebs_encryption_key_arn(input.into());
        self
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn set_ebs_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_ebs_encryption_key_arn(input);
        self
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn get_ebs_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_ebs_encryption_key_arn()
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn bandwidth_throttling(mut self, input: i64) -> Self {
        self.inner = self.inner.bandwidth_throttling(input);
        self
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn set_bandwidth_throttling(mut self, input: ::std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_bandwidth_throttling(input);
        self
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn get_bandwidth_throttling(&self) -> &::std::option::Option<i64> {
        self.inner.get_bandwidth_throttling()
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn data_plane_routing(mut self, input: crate::types::ReplicationConfigurationDataPlaneRouting) -> Self {
        self.inner = self.inner.data_plane_routing(input);
        self
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn set_data_plane_routing(mut self, input: ::std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting>) -> Self {
        self.inner = self.inner.set_data_plane_routing(input);
        self
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn get_data_plane_routing(&self) -> &::std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting> {
        self.inner.get_data_plane_routing()
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn create_public_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.create_public_ip(input);
        self
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn set_create_public_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_create_public_ip(input);
        self
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn get_create_public_ip(&self) -> &::std::option::Option<bool> {
        self.inner.get_create_public_ip()
    }
    ///
    /// Adds a key-value pair to `stagingAreaTags`.
    ///
    /// To override the contents of this collection use [`set_staging_area_tags`](Self::set_staging_area_tags).
    ///
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn staging_area_tags(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.staging_area_tags(k.into(), v.into());
        self
    }
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn set_staging_area_tags(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_staging_area_tags(input);
        self
    }
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn get_staging_area_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_staging_area_tags()
    }
    ///
    /// Appends an item to `pitPolicy`.
    ///
    /// To override the contents of this collection use [`set_pit_policy`](Self::set_pit_policy).
    ///
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub fn pit_policy(mut self, input: crate::types::PitPolicyRule) -> Self {
        self.inner = self.inner.pit_policy(input);
        self
    }
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub fn set_pit_policy(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PitPolicyRule>>) -> Self {
        self.inner = self.inner.set_pit_policy(input);
        self
    }
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub fn get_pit_policy(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PitPolicyRule>> {
        self.inner.get_pit_policy()
    }
    /// <p>Whether to allow the AWS replication agent to automatically replicate newly added disks.</p>
    pub fn auto_replicate_new_disks(mut self, input: bool) -> Self {
        self.inner = self.inner.auto_replicate_new_disks(input);
        self
    }
    /// <p>Whether to allow the AWS replication agent to automatically replicate newly added disks.</p>
    pub fn set_auto_replicate_new_disks(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_auto_replicate_new_disks(input);
        self
    }
    /// <p>Whether to allow the AWS replication agent to automatically replicate newly added disks.</p>
    pub fn get_auto_replicate_new_disks(&self) -> &::std::option::Option<bool> {
        self.inner.get_auto_replicate_new_disks()
    }
}
