// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_replication_configuration_template::_create_replication_configuration_template_output::CreateReplicationConfigurationTemplateOutputBuilder;

pub use crate::operation::create_replication_configuration_template::_create_replication_configuration_template_input::CreateReplicationConfigurationTemplateInputBuilder;

/// Fluent builder constructing a request to `CreateReplicationConfigurationTemplate`.
///
/// <p>Creates a new ReplicationConfigurationTemplate.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateReplicationConfigurationTemplateFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::create_replication_configuration_template::builders::CreateReplicationConfigurationTemplateInputBuilder
            }
impl CreateReplicationConfigurationTemplateFluentBuilder {
    /// Creates a new `CreateReplicationConfigurationTemplate`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
                    pub async fn customize(self) -> std::result::Result<
                        crate::client::customize::CustomizableOperation<crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplate, aws_http::retry::AwsResponseRetryClassifier,>,
                        aws_smithy_http::result::SdkError<crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError>
    >{
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
                    pub async fn send(self) -> std::result::Result<crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateOutput, aws_smithy_http::result::SdkError<crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError>>
                     {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn staging_area_subnet_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.staging_area_subnet_id(input.into());
        self
    }
    /// <p>The subnet to be used by the replication staging area.</p>
    pub fn set_staging_area_subnet_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_staging_area_subnet_id(input);
        self
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn associate_default_security_group(mut self, input: bool) -> Self {
        self.inner = self.inner.associate_default_security_group(input);
        self
    }
    /// <p>Whether to associate the default Elastic Disaster Recovery Security group with the Replication Configuration Template.</p>
    pub fn set_associate_default_security_group(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_associate_default_security_group(input);
        self
    }
    /// Appends an item to `replicationServersSecurityGroupsIDs`.
    ///
    /// To override the contents of this collection use [`set_replication_servers_security_groups_i_ds`](Self::set_replication_servers_security_groups_i_ds).
    ///
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub fn replication_servers_security_groups_i_ds(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self
            .inner
            .replication_servers_security_groups_i_ds(input.into());
        self
    }
    /// <p>The security group IDs that will be used by the replication server.</p>
    pub fn set_replication_servers_security_groups_i_ds(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self
            .inner
            .set_replication_servers_security_groups_i_ds(input);
        self
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn replication_server_instance_type(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.replication_server_instance_type(input.into());
        self
    }
    /// <p>The instance type to be used for the replication server.</p>
    pub fn set_replication_server_instance_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_replication_server_instance_type(input);
        self
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn use_dedicated_replication_server(mut self, input: bool) -> Self {
        self.inner = self.inner.use_dedicated_replication_server(input);
        self
    }
    /// <p>Whether to use a dedicated Replication Server in the replication staging area.</p>
    pub fn set_use_dedicated_replication_server(
        mut self,
        input: std::option::Option<bool>,
    ) -> Self {
        self.inner = self.inner.set_use_dedicated_replication_server(input);
        self
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn default_large_staging_disk_type(
        mut self,
        input: crate::types::ReplicationConfigurationDefaultLargeStagingDiskType,
    ) -> Self {
        self.inner = self.inner.default_large_staging_disk_type(input);
        self
    }
    /// <p>The Staging Disk EBS volume type to be used during replication.</p>
    pub fn set_default_large_staging_disk_type(
        mut self,
        input: std::option::Option<
            crate::types::ReplicationConfigurationDefaultLargeStagingDiskType,
        >,
    ) -> Self {
        self.inner = self.inner.set_default_large_staging_disk_type(input);
        self
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn ebs_encryption(
        mut self,
        input: crate::types::ReplicationConfigurationEbsEncryption,
    ) -> Self {
        self.inner = self.inner.ebs_encryption(input);
        self
    }
    /// <p>The type of EBS encryption to be used during replication.</p>
    pub fn set_ebs_encryption(
        mut self,
        input: std::option::Option<crate::types::ReplicationConfigurationEbsEncryption>,
    ) -> Self {
        self.inner = self.inner.set_ebs_encryption(input);
        self
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn ebs_encryption_key_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.ebs_encryption_key_arn(input.into());
        self
    }
    /// <p>The ARN of the EBS encryption key to be used during replication.</p>
    pub fn set_ebs_encryption_key_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_ebs_encryption_key_arn(input);
        self
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn bandwidth_throttling(mut self, input: i64) -> Self {
        self.inner = self.inner.bandwidth_throttling(input);
        self
    }
    /// <p>Configure bandwidth throttling for the outbound data transfer rate of the Source Server in Mbps.</p>
    pub fn set_bandwidth_throttling(mut self, input: std::option::Option<i64>) -> Self {
        self.inner = self.inner.set_bandwidth_throttling(input);
        self
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn data_plane_routing(
        mut self,
        input: crate::types::ReplicationConfigurationDataPlaneRouting,
    ) -> Self {
        self.inner = self.inner.data_plane_routing(input);
        self
    }
    /// <p>The data plane routing mechanism that will be used for replication.</p>
    pub fn set_data_plane_routing(
        mut self,
        input: std::option::Option<crate::types::ReplicationConfigurationDataPlaneRouting>,
    ) -> Self {
        self.inner = self.inner.set_data_plane_routing(input);
        self
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn create_public_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.create_public_ip(input);
        self
    }
    /// <p>Whether to create a Public IP for the Recovery Instance by default.</p>
    pub fn set_create_public_ip(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_create_public_ip(input);
        self
    }
    /// Adds a key-value pair to `stagingAreaTags`.
    ///
    /// To override the contents of this collection use [`set_staging_area_tags`](Self::set_staging_area_tags).
    ///
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn staging_area_tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.staging_area_tags(k.into(), v.into());
        self
    }
    /// <p>A set of tags to be associated with all resources created in the replication staging area: EC2 replication server, EBS volumes, EBS snapshots, etc.</p>
    pub fn set_staging_area_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_staging_area_tags(input);
        self
    }
    /// Appends an item to `pitPolicy`.
    ///
    /// To override the contents of this collection use [`set_pit_policy`](Self::set_pit_policy).
    ///
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub fn pit_policy(mut self, input: crate::types::PitPolicyRule) -> Self {
        self.inner = self.inner.pit_policy(input);
        self
    }
    /// <p>The Point in time (PIT) policy to manage snapshots taken during replication.</p>
    pub fn set_pit_policy(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PitPolicyRule>>,
    ) -> Self {
        self.inner = self.inner.set_pit_policy(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A set of tags to be associated with the Replication Configuration Template resource.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A set of tags to be associated with the Replication Configuration Template resource.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
