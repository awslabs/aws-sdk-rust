// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateExtendedSourceServerInput {
    /// <p>This defines the ARN of the source server in staging Account based on which you want to create an extended source server.</p>
    #[doc(hidden)]
    pub source_server_arn: std::option::Option<std::string::String>,
    /// <p>A list of tags associated with the extended source server.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateExtendedSourceServerInput {
    /// <p>This defines the ARN of the source server in staging Account based on which you want to create an extended source server.</p>
    pub fn source_server_arn(&self) -> std::option::Option<&str> {
        self.source_server_arn.as_deref()
    }
    /// <p>A list of tags associated with the extended source server.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl std::fmt::Debug for CreateExtendedSourceServerInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateExtendedSourceServerInput");
        formatter.field("source_server_arn", &self.source_server_arn);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateExtendedSourceServerInput {
    /// Creates a new builder-style object to manufacture [`CreateExtendedSourceServerInput`](crate::operation::create_extended_source_server::CreateExtendedSourceServerInput).
    pub fn builder() -> crate::operation::create_extended_source_server::builders::CreateExtendedSourceServerInputBuilder{
        crate::operation::create_extended_source_server::builders::CreateExtendedSourceServerInputBuilder::default()
    }
}

/// A builder for [`CreateExtendedSourceServerInput`](crate::operation::create_extended_source_server::CreateExtendedSourceServerInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct CreateExtendedSourceServerInputBuilder {
    pub(crate) source_server_arn: std::option::Option<std::string::String>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateExtendedSourceServerInputBuilder {
    /// <p>This defines the ARN of the source server in staging Account based on which you want to create an extended source server.</p>
    pub fn source_server_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_server_arn = Some(input.into());
        self
    }
    /// <p>This defines the ARN of the source server in staging Account based on which you want to create an extended source server.</p>
    pub fn set_source_server_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_server_arn = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of tags associated with the extended source server.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A list of tags associated with the extended source server.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateExtendedSourceServerInput`](crate::operation::create_extended_source_server::CreateExtendedSourceServerInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_extended_source_server::CreateExtendedSourceServerInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_extended_source_server::CreateExtendedSourceServerInput {
                source_server_arn: self.source_server_arn,
                tags: self.tags,
            },
        )
    }
}
impl std::fmt::Debug for CreateExtendedSourceServerInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("CreateExtendedSourceServerInputBuilder");
        formatter.field("source_server_arn", &self.source_server_arn);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
