// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateExtendedSourceServerOutput {
    /// <p>Created extended source server.</p>
    #[doc(hidden)]
    pub source_server: std::option::Option<crate::types::SourceServer>,
    _request_id: Option<String>,
}
impl CreateExtendedSourceServerOutput {
    /// <p>Created extended source server.</p>
    pub fn source_server(&self) -> std::option::Option<&crate::types::SourceServer> {
        self.source_server.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateExtendedSourceServerOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateExtendedSourceServerOutput {
    /// Creates a new builder-style object to manufacture [`CreateExtendedSourceServerOutput`](crate::operation::create_extended_source_server::CreateExtendedSourceServerOutput).
    pub fn builder() -> crate::operation::create_extended_source_server::builders::CreateExtendedSourceServerOutputBuilder{
        crate::operation::create_extended_source_server::builders::CreateExtendedSourceServerOutputBuilder::default()
    }
}

/// A builder for [`CreateExtendedSourceServerOutput`](crate::operation::create_extended_source_server::CreateExtendedSourceServerOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateExtendedSourceServerOutputBuilder {
    pub(crate) source_server: std::option::Option<crate::types::SourceServer>,
    _request_id: Option<String>,
}
impl CreateExtendedSourceServerOutputBuilder {
    /// <p>Created extended source server.</p>
    pub fn source_server(mut self, input: crate::types::SourceServer) -> Self {
        self.source_server = Some(input);
        self
    }
    /// <p>Created extended source server.</p>
    pub fn set_source_server(
        mut self,
        input: std::option::Option<crate::types::SourceServer>,
    ) -> Self {
        self.source_server = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateExtendedSourceServerOutput`](crate::operation::create_extended_source_server::CreateExtendedSourceServerOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_extended_source_server::CreateExtendedSourceServerOutput {
        crate::operation::create_extended_source_server::CreateExtendedSourceServerOutput {
            source_server: self.source_server,
            _request_id: self._request_id,
        }
    }
}
