// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateSourceNetworkInput {
    /// <p>Which VPC ID to protect.</p>
    pub vpc_id: ::std::option::Option<::std::string::String>,
    /// <p>Account containing the VPC to protect.</p>
    pub origin_account_id: ::std::option::Option<::std::string::String>,
    /// <p>Region containing the VPC to protect.</p>
    pub origin_region: ::std::option::Option<::std::string::String>,
    /// <p>A set of tags to be associated with the Source Network resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateSourceNetworkInput {
    /// <p>Which VPC ID to protect.</p>
    pub fn vpc_id(&self) -> ::std::option::Option<&str> {
        self.vpc_id.as_deref()
    }
    /// <p>Account containing the VPC to protect.</p>
    pub fn origin_account_id(&self) -> ::std::option::Option<&str> {
        self.origin_account_id.as_deref()
    }
    /// <p>Region containing the VPC to protect.</p>
    pub fn origin_region(&self) -> ::std::option::Option<&str> {
        self.origin_region.as_deref()
    }
    /// <p>A set of tags to be associated with the Source Network resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::std::fmt::Debug for CreateSourceNetworkInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSourceNetworkInput");
        formatter.field("vpc_id", &self.vpc_id);
        formatter.field("origin_account_id", &self.origin_account_id);
        formatter.field("origin_region", &self.origin_region);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl CreateSourceNetworkInput {
    /// Creates a new builder-style object to manufacture [`CreateSourceNetworkInput`](crate::operation::create_source_network::CreateSourceNetworkInput).
    pub fn builder() -> crate::operation::create_source_network::builders::CreateSourceNetworkInputBuilder {
        crate::operation::create_source_network::builders::CreateSourceNetworkInputBuilder::default()
    }
}

/// A builder for [`CreateSourceNetworkInput`](crate::operation::create_source_network::CreateSourceNetworkInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateSourceNetworkInputBuilder {
    pub(crate) vpc_id: ::std::option::Option<::std::string::String>,
    pub(crate) origin_account_id: ::std::option::Option<::std::string::String>,
    pub(crate) origin_region: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateSourceNetworkInputBuilder {
    /// <p>Which VPC ID to protect.</p>
    /// This field is required.
    pub fn vpc_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Which VPC ID to protect.</p>
    pub fn set_vpc_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc_id = input;
        self
    }
    /// <p>Which VPC ID to protect.</p>
    pub fn get_vpc_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc_id
    }
    /// <p>Account containing the VPC to protect.</p>
    /// This field is required.
    pub fn origin_account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Account containing the VPC to protect.</p>
    pub fn set_origin_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_account_id = input;
        self
    }
    /// <p>Account containing the VPC to protect.</p>
    pub fn get_origin_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_account_id
    }
    /// <p>Region containing the VPC to protect.</p>
    /// This field is required.
    pub fn origin_region(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.origin_region = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Region containing the VPC to protect.</p>
    pub fn set_origin_region(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.origin_region = input;
        self
    }
    /// <p>Region containing the VPC to protect.</p>
    pub fn get_origin_region(&self) -> &::std::option::Option<::std::string::String> {
        &self.origin_region
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A set of tags to be associated with the Source Network resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A set of tags to be associated with the Source Network resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A set of tags to be associated with the Source Network resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateSourceNetworkInput`](crate::operation::create_source_network::CreateSourceNetworkInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_source_network::CreateSourceNetworkInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::create_source_network::CreateSourceNetworkInput {
            vpc_id: self.vpc_id,
            origin_account_id: self.origin_account_id,
            origin_region: self.origin_region,
            tags: self.tags,
        })
    }
}
impl ::std::fmt::Debug for CreateSourceNetworkInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateSourceNetworkInputBuilder");
        formatter.field("vpc_id", &self.vpc_id);
        formatter.field("origin_account_id", &self.origin_account_id);
        formatter.field("origin_region", &self.origin_region);
        formatter.field("tags", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
