// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_launch_configuration_template::_update_launch_configuration_template_output::UpdateLaunchConfigurationTemplateOutputBuilder;

pub use crate::operation::update_launch_configuration_template::_update_launch_configuration_template_input::UpdateLaunchConfigurationTemplateInputBuilder;

impl crate::operation::update_launch_configuration_template::builders::UpdateLaunchConfigurationTemplateInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_launch_configuration_template();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdateLaunchConfigurationTemplate`.
///
/// <p>Updates an existing Launch Configuration Template by ID.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdateLaunchConfigurationTemplateFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_launch_configuration_template::builders::UpdateLaunchConfigurationTemplateInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateOutput,
        crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError,
    > for UpdateLaunchConfigurationTemplateFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateOutput,
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdateLaunchConfigurationTemplateFluentBuilder {
    /// Creates a new `UpdateLaunchConfigurationTemplate`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdateLaunchConfigurationTemplate as a reference.
    pub fn as_input(&self) -> &crate::operation::update_launch_configuration_template::builders::UpdateLaunchConfigurationTemplateInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplate::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplate::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateOutput,
        crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>Launch Configuration Template ID.</p>
    pub fn launch_configuration_template_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.launch_configuration_template_id(input.into());
        self
    }
    /// <p>Launch Configuration Template ID.</p>
    pub fn set_launch_configuration_template_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_launch_configuration_template_id(input);
        self
    }
    /// <p>Launch Configuration Template ID.</p>
    pub fn get_launch_configuration_template_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_launch_configuration_template_id()
    }
    /// <p>Launch disposition.</p>
    pub fn launch_disposition(mut self, input: crate::types::LaunchDisposition) -> Self {
        self.inner = self.inner.launch_disposition(input);
        self
    }
    /// <p>Launch disposition.</p>
    pub fn set_launch_disposition(mut self, input: ::std::option::Option<crate::types::LaunchDisposition>) -> Self {
        self.inner = self.inner.set_launch_disposition(input);
        self
    }
    /// <p>Launch disposition.</p>
    pub fn get_launch_disposition(&self) -> &::std::option::Option<crate::types::LaunchDisposition> {
        self.inner.get_launch_disposition()
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn target_instance_type_right_sizing_method(mut self, input: crate::types::TargetInstanceTypeRightSizingMethod) -> Self {
        self.inner = self.inner.target_instance_type_right_sizing_method(input);
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn set_target_instance_type_right_sizing_method(
        mut self,
        input: ::std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod>,
    ) -> Self {
        self.inner = self.inner.set_target_instance_type_right_sizing_method(input);
        self
    }
    /// <p>Target instance type right-sizing method.</p>
    pub fn get_target_instance_type_right_sizing_method(&self) -> &::std::option::Option<crate::types::TargetInstanceTypeRightSizingMethod> {
        self.inner.get_target_instance_type_right_sizing_method()
    }
    /// <p>Copy private IP.</p>
    pub fn copy_private_ip(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_private_ip(input);
        self
    }
    /// <p>Copy private IP.</p>
    pub fn set_copy_private_ip(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_private_ip(input);
        self
    }
    /// <p>Copy private IP.</p>
    pub fn get_copy_private_ip(&self) -> &::std::option::Option<bool> {
        self.inner.get_copy_private_ip()
    }
    /// <p>Copy tags.</p>
    pub fn copy_tags(mut self, input: bool) -> Self {
        self.inner = self.inner.copy_tags(input);
        self
    }
    /// <p>Copy tags.</p>
    pub fn set_copy_tags(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_copy_tags(input);
        self
    }
    /// <p>Copy tags.</p>
    pub fn get_copy_tags(&self) -> &::std::option::Option<bool> {
        self.inner.get_copy_tags()
    }
    /// <p>Licensing.</p>
    pub fn licensing(mut self, input: crate::types::Licensing) -> Self {
        self.inner = self.inner.licensing(input);
        self
    }
    /// <p>Licensing.</p>
    pub fn set_licensing(mut self, input: ::std::option::Option<crate::types::Licensing>) -> Self {
        self.inner = self.inner.set_licensing(input);
        self
    }
    /// <p>Licensing.</p>
    pub fn get_licensing(&self) -> &::std::option::Option<crate::types::Licensing> {
        self.inner.get_licensing()
    }
    /// <p>S3 bucket ARN to export Source Network templates.</p>
    pub fn export_bucket_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.export_bucket_arn(input.into());
        self
    }
    /// <p>S3 bucket ARN to export Source Network templates.</p>
    pub fn set_export_bucket_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_export_bucket_arn(input);
        self
    }
    /// <p>S3 bucket ARN to export Source Network templates.</p>
    pub fn get_export_bucket_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_export_bucket_arn()
    }
    /// <p>Whether we want to activate post-launch actions.</p>
    pub fn post_launch_enabled(mut self, input: bool) -> Self {
        self.inner = self.inner.post_launch_enabled(input);
        self
    }
    /// <p>Whether we want to activate post-launch actions.</p>
    pub fn set_post_launch_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_post_launch_enabled(input);
        self
    }
    /// <p>Whether we want to activate post-launch actions.</p>
    pub fn get_post_launch_enabled(&self) -> &::std::option::Option<bool> {
        self.inner.get_post_launch_enabled()
    }
    /// <p>DRS will set the 'launch into instance ID' of any source server when performing a drill, recovery or failback to the previous region or availability zone, using the instance ID of the source instance.</p>
    pub fn launch_into_source_instance(mut self, input: bool) -> Self {
        self.inner = self.inner.launch_into_source_instance(input);
        self
    }
    /// <p>DRS will set the 'launch into instance ID' of any source server when performing a drill, recovery or failback to the previous region or availability zone, using the instance ID of the source instance.</p>
    pub fn set_launch_into_source_instance(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_launch_into_source_instance(input);
        self
    }
    /// <p>DRS will set the 'launch into instance ID' of any source server when performing a drill, recovery or failback to the previous region or availability zone, using the instance ID of the source instance.</p>
    pub fn get_launch_into_source_instance(&self) -> &::std::option::Option<bool> {
        self.inner.get_launch_into_source_instance()
    }
}
