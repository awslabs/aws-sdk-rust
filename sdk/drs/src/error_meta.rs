// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::error::AccessDeniedException),
    /// <p>The request could not be completed due to a conflict with the current state of the target resource.</p>
    ConflictException(crate::error::ConflictException),
    /// <p>The request processing has failed because of an unknown error, exception or failure.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>The resource for this operation was not found.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request could not be completed because its exceeded the service quota.</p>
    ServiceQuotaExceededException(crate::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// <p>The account performing the request has not been initialized.</p>
    UninitializedAccountException(crate::error::UninitializedAccountException),
    /// <p>The input fails to satisfy the constraints specified by the AWS service.</p>
    ValidationException(crate::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UninitializedAccountException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateExtendedSourceServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateExtendedSourceServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateExtendedSourceServerError> for Error {
    fn from(err: crate::error::CreateExtendedSourceServerError) -> Self {
        match err {
            crate::error::CreateExtendedSourceServerError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::CreateExtendedSourceServerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateExtendedSourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateExtendedSourceServerError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::CreateExtendedSourceServerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateExtendedSourceServerError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::CreateExtendedSourceServerError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::CreateExtendedSourceServerError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateReplicationConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateReplicationConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::error::CreateReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::error::CreateReplicationConfigurationTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::CreateReplicationConfigurationTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateReplicationConfigurationTemplateError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::error::CreateReplicationConfigurationTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::error::CreateReplicationConfigurationTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::CreateReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteJobError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteJobError> for Error {
    fn from(err: crate::error::DeleteJobError) -> Self {
        match err {
            crate::error::DeleteJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteJobError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DeleteJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRecoveryInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRecoveryInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRecoveryInstanceError> for Error {
    fn from(err: crate::error::DeleteRecoveryInstanceError) -> Self {
        match err {
            crate::error::DeleteRecoveryInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DeleteRecoveryInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteRecoveryInstanceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteRecoveryInstanceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteRecoveryInstanceError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DeleteRecoveryInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DeleteReplicationConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteReplicationConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::error::DeleteReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::error::DeleteReplicationConfigurationTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::error::DeleteReplicationConfigurationTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DeleteReplicationConfigurationTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DeleteReplicationConfigurationTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DeleteReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::error::DeleteReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSourceServerError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSourceServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSourceServerError> for Error {
    fn from(err: crate::error::DeleteSourceServerError) -> Self {
        match err {
            crate::error::DeleteSourceServerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DeleteSourceServerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteSourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteSourceServerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSourceServerError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DeleteSourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeJobLogItemsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeJobLogItemsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeJobLogItemsError> for Error {
    fn from(err: crate::error::DescribeJobLogItemsError) -> Self {
        match err {
            crate::error::DescribeJobLogItemsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeJobLogItemsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeJobLogItemsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DescribeJobLogItemsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeJobLogItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeJobsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeJobsError> for Error {
    fn from(err: crate::error::DescribeJobsError) -> Self {
        match err {
            crate::error::DescribeJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeJobsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DescribeJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRecoveryInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRecoveryInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRecoveryInstancesError> for Error {
    fn from(err: crate::error::DescribeRecoveryInstancesError) -> Self {
        match err {
            crate::error::DescribeRecoveryInstancesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeRecoveryInstancesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeRecoveryInstancesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeRecoveryInstancesError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DescribeRecoveryInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRecoverySnapshotsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRecoverySnapshotsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRecoverySnapshotsError> for Error {
    fn from(err: crate::error::DescribeRecoverySnapshotsError) -> Self {
        match err {
            crate::error::DescribeRecoverySnapshotsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DescribeRecoverySnapshotsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeRecoverySnapshotsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeRecoverySnapshotsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DescribeRecoverySnapshotsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeRecoverySnapshotsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationConfigurationTemplatesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeReplicationConfigurationTemplatesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeReplicationConfigurationTemplatesError> for Error {
    fn from(err: crate::error::DescribeReplicationConfigurationTemplatesError) -> Self {
        match err {
            crate::error::DescribeReplicationConfigurationTemplatesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::DescribeReplicationConfigurationTemplatesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::DescribeReplicationConfigurationTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::DescribeReplicationConfigurationTemplatesError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::error::DescribeReplicationConfigurationTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::DescribeReplicationConfigurationTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSourceServersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSourceServersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSourceServersError> for Error {
    fn from(err: crate::error::DescribeSourceServersError) -> Self {
        match err {
            crate::error::DescribeSourceServersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSourceServersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSourceServersError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DescribeSourceServersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::DescribeSourceServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisconnectRecoveryInstanceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisconnectRecoveryInstanceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisconnectRecoveryInstanceError> for Error {
    fn from(err: crate::error::DisconnectRecoveryInstanceError) -> Self {
        match err {
            crate::error::DisconnectRecoveryInstanceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::DisconnectRecoveryInstanceError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisconnectRecoveryInstanceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisconnectRecoveryInstanceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisconnectRecoveryInstanceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisconnectRecoveryInstanceError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DisconnectRecoveryInstanceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisconnectSourceServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisconnectSourceServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisconnectSourceServerError> for Error {
    fn from(err: crate::error::DisconnectSourceServerError) -> Self {
        match err {
            crate::error::DisconnectSourceServerError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::DisconnectSourceServerError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DisconnectSourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DisconnectSourceServerError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DisconnectSourceServerError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::DisconnectSourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::GetFailbackReplicationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetFailbackReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetFailbackReplicationConfigurationError> for Error {
    fn from(err: crate::error::GetFailbackReplicationConfigurationError) -> Self {
        match err {
            crate::error::GetFailbackReplicationConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::GetFailbackReplicationConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetFailbackReplicationConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::GetFailbackReplicationConfigurationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::error::GetFailbackReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetLaunchConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetLaunchConfigurationError> for Error {
    fn from(err: crate::error::GetLaunchConfigurationError) -> Self {
        match err {
            crate::error::GetLaunchConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetLaunchConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetLaunchConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetLaunchConfigurationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::GetLaunchConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetReplicationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetReplicationConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetReplicationConfigurationError> for Error {
    fn from(err: crate::error::GetReplicationConfigurationError) -> Self {
        match err {
            crate::error::GetReplicationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::GetReplicationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetReplicationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetReplicationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetReplicationConfigurationError::UninitializedAccountException(
                inner,
            ) => Error::UninitializedAccountException(inner),
            crate::error::GetReplicationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InitializeServiceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::InitializeServiceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InitializeServiceError> for Error {
    fn from(err: crate::error::InitializeServiceError) -> Self {
        match err {
            crate::error::InitializeServiceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::InitializeServiceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::InitializeServiceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::InitializeServiceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::InitializeServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListExtensibleSourceServersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListExtensibleSourceServersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListExtensibleSourceServersError> for Error {
    fn from(err: crate::error::ListExtensibleSourceServersError) -> Self {
        match err {
            crate::error::ListExtensibleSourceServersError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListExtensibleSourceServersError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListExtensibleSourceServersError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListExtensibleSourceServersError::UninitializedAccountException(
                inner,
            ) => Error::UninitializedAccountException(inner),
            crate::error::ListExtensibleSourceServersError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListExtensibleSourceServersError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListStagingAccountsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListStagingAccountsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListStagingAccountsError> for Error {
    fn from(err: crate::error::ListStagingAccountsError) -> Self {
        match err {
            crate::error::ListStagingAccountsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListStagingAccountsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListStagingAccountsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListStagingAccountsError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::ListStagingAccountsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListStagingAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RetryDataReplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RetryDataReplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RetryDataReplicationError> for Error {
    fn from(err: crate::error::RetryDataReplicationError) -> Self {
        match err {
            crate::error::RetryDataReplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RetryDataReplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RetryDataReplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RetryDataReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::RetryDataReplicationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::RetryDataReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ReverseReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ReverseReplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ReverseReplicationError> for Error {
    fn from(err: crate::error::ReverseReplicationError) -> Self {
        match err {
            crate::error::ReverseReplicationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::ReverseReplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::ReverseReplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ReverseReplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ReverseReplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ReverseReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::ReverseReplicationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::ReverseReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartFailbackLaunchError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartFailbackLaunchError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartFailbackLaunchError> for Error {
    fn from(err: crate::error::StartFailbackLaunchError) -> Self {
        match err {
            crate::error::StartFailbackLaunchError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StartFailbackLaunchError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartFailbackLaunchError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::StartFailbackLaunchError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartFailbackLaunchError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::StartFailbackLaunchError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::StartFailbackLaunchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartRecoveryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartRecoveryError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartRecoveryError> for Error {
    fn from(err: crate::error::StartRecoveryError) -> Self {
        match err {
            crate::error::StartRecoveryError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StartRecoveryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartRecoveryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::StartRecoveryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartRecoveryError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::StartRecoveryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartReplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartReplicationError> for Error {
    fn from(err: crate::error::StartReplicationError) -> Self {
        match err {
            crate::error::StartReplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StartReplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartReplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartReplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::StartReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopFailbackError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopFailbackError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopFailbackError> for Error {
    fn from(err: crate::error::StopFailbackError) -> Self {
        match err {
            crate::error::StopFailbackError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopFailbackError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopFailbackError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StopFailbackError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::StopFailbackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopReplicationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StopReplicationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopReplicationError> for Error {
    fn from(err: crate::error::StopReplicationError) -> Self {
        match err {
            crate::error::StopReplicationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::StopReplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StopReplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopReplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StopReplicationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::StopReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TerminateRecoveryInstancesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::TerminateRecoveryInstancesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TerminateRecoveryInstancesError> for Error {
    fn from(err: crate::error::TerminateRecoveryInstancesError) -> Self {
        match err {
            crate::error::TerminateRecoveryInstancesError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::TerminateRecoveryInstancesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TerminateRecoveryInstancesError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::error::TerminateRecoveryInstancesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TerminateRecoveryInstancesError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::TerminateRecoveryInstancesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateFailbackReplicationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateFailbackReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFailbackReplicationConfigurationError> for Error {
    fn from(err: crate::error::UpdateFailbackReplicationConfigurationError) -> Self {
        match err {
            crate::error::UpdateFailbackReplicationConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateFailbackReplicationConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateFailbackReplicationConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateFailbackReplicationConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateFailbackReplicationConfigurationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::error::UpdateFailbackReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateLaunchConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateLaunchConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateLaunchConfigurationError> for Error {
    fn from(err: crate::error::UpdateLaunchConfigurationError) -> Self {
        match err {
            crate::error::UpdateLaunchConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateLaunchConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateLaunchConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateLaunchConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateLaunchConfigurationError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::error::UpdateLaunchConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateLaunchConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateReplicationConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateReplicationConfigurationError> for Error {
    fn from(err: crate::error::UpdateReplicationConfigurationError) -> Self {
        match err {
            crate::error::UpdateReplicationConfigurationError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::error::UpdateReplicationConfigurationError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::error::UpdateReplicationConfigurationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateReplicationConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateReplicationConfigurationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateReplicationConfigurationError::UninitializedAccountException(
                inner,
            ) => Error::UninitializedAccountException(inner),
            crate::error::UpdateReplicationConfigurationError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::error::UpdateReplicationConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::UpdateReplicationConfigurationTemplateError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateReplicationConfigurationTemplateError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::error::UpdateReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::error::UpdateReplicationConfigurationTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::error::UpdateReplicationConfigurationTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::UpdateReplicationConfigurationTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::UpdateReplicationConfigurationTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::UpdateReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::error::UpdateReplicationConfigurationTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::error::UpdateReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UninitializedAccountException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
