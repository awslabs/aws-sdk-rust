// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>You do not have sufficient access to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>The request could not be completed due to a conflict with the current state of the target resource.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The request processing has failed because of an unknown error, exception or failure.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The resource for this operation was not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The request could not be completed because its exceeded the service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>The account performing the request has not been initialized.</p>
    UninitializedAccountException(crate::types::error::UninitializedAccountException),
    /// <p>The input fails to satisfy the constraints specified by the AWS service.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::UninitializedAccountException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_extended_source_server::CreateExtendedSourceServerError>
    for Error
{
    fn from(
        err: crate::operation::create_extended_source_server::CreateExtendedSourceServerError,
    ) -> Self {
        match err {
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_extended_source_server::CreateExtendedSourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_replication_configuration_template::CreateReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_job::DeleteJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::delete_job::DeleteJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_job::DeleteJobError> for Error {
    fn from(err: crate::operation::delete_job::DeleteJobError) -> Self {
        match err {
            crate::operation::delete_job::DeleteJobError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_job::DeleteJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_job::DeleteJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_job::DeleteJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_job::DeleteJobError::UninitializedAccountException(inner) => {
                Error::UninitializedAccountException(inner)
            }
            crate::operation::delete_job::DeleteJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError> for Error {
    fn from(err: crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError) -> Self {
        match err {
            crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::delete_recovery_instance::DeleteRecoveryInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::delete_replication_configuration_template::DeleteReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_source_server::DeleteSourceServerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_source_server::DeleteSourceServerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_source_server::DeleteSourceServerError> for Error {
    fn from(err: crate::operation::delete_source_server::DeleteSourceServerError) -> Self {
        match err {
            crate::operation::delete_source_server::DeleteSourceServerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_source_server::DeleteSourceServerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_source_server::DeleteSourceServerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_source_server::DeleteSourceServerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_source_server::DeleteSourceServerError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::delete_source_server::DeleteSourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_job_log_items::DescribeJobLogItemsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_job_log_items::DescribeJobLogItemsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_job_log_items::DescribeJobLogItemsError> for Error {
    fn from(err: crate::operation::describe_job_log_items::DescribeJobLogItemsError) -> Self {
        match err {
            crate::operation::describe_job_log_items::DescribeJobLogItemsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_job_log_items::DescribeJobLogItemsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_job_log_items::DescribeJobLogItemsError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::describe_job_log_items::DescribeJobLogItemsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_job_log_items::DescribeJobLogItemsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::describe_jobs::DescribeJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_jobs::DescribeJobsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_jobs::DescribeJobsError> for Error {
    fn from(err: crate::operation::describe_jobs::DescribeJobsError) -> Self {
        match err {
            crate::operation::describe_jobs::DescribeJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_jobs::DescribeJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_jobs::DescribeJobsError::UninitializedAccountException(
                inner,
            ) => Error::UninitializedAccountException(inner),
            crate::operation::describe_jobs::DescribeJobsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_jobs::DescribeJobsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError> for Error {
    fn from(
        err: crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError,
    ) -> Self {
        match err {
            crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::describe_recovery_instances::DescribeRecoveryInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError> for Error {
    fn from(
        err: crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError,
    ) -> Self {
        match err {
            crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_recovery_snapshots::DescribeRecoverySnapshotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError> for Error {
    fn from(err: crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError) -> Self {
        match err {
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_replication_configuration_templates::DescribeReplicationConfigurationTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_source_servers::DescribeSourceServersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_source_servers::DescribeSourceServersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_source_servers::DescribeSourceServersError> for Error {
    fn from(err: crate::operation::describe_source_servers::DescribeSourceServersError) -> Self {
        match err {
            crate::operation::describe_source_servers::DescribeSourceServersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_source_servers::DescribeSourceServersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_source_servers::DescribeSourceServersError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::describe_source_servers::DescribeSourceServersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_source_servers::DescribeSourceServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError>
    for Error
{
    fn from(
        err: crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError,
    ) -> Self {
        match err {
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::disconnect_recovery_instance::DisconnectRecoveryInstanceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disconnect_source_server::DisconnectSourceServerError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disconnect_source_server::DisconnectSourceServerError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disconnect_source_server::DisconnectSourceServerError> for Error {
    fn from(err: crate::operation::disconnect_source_server::DisconnectSourceServerError) -> Self {
        match err {
            crate::operation::disconnect_source_server::DisconnectSourceServerError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disconnect_source_server::DisconnectSourceServerError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disconnect_source_server::DisconnectSourceServerError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disconnect_source_server::DisconnectSourceServerError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disconnect_source_server::DisconnectSourceServerError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::disconnect_source_server::DisconnectSourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError> for Error {
    fn from(err: crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError) -> Self {
        match err {
            crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::get_failback_replication_configuration::GetFailbackReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_launch_configuration::GetLaunchConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_launch_configuration::GetLaunchConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_launch_configuration::GetLaunchConfigurationError> for Error {
    fn from(err: crate::operation::get_launch_configuration::GetLaunchConfigurationError) -> Self {
        match err {
            crate::operation::get_launch_configuration::GetLaunchConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_launch_configuration::GetLaunchConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_launch_configuration::GetLaunchConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_launch_configuration::GetLaunchConfigurationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::get_launch_configuration::GetLaunchConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_replication_configuration::GetReplicationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_replication_configuration::GetReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_replication_configuration::GetReplicationConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::get_replication_configuration::GetReplicationConfigurationError,
    ) -> Self {
        match err {
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::get_replication_configuration::GetReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::initialize_service::InitializeServiceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::initialize_service::InitializeServiceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::initialize_service::InitializeServiceError> for Error {
    fn from(err: crate::operation::initialize_service::InitializeServiceError) -> Self {
        match err {
            crate::operation::initialize_service::InitializeServiceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::initialize_service::InitializeServiceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::initialize_service::InitializeServiceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::initialize_service::InitializeServiceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::initialize_service::InitializeServiceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError>
    for Error
{
    fn from(
        err: crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError,
    ) -> Self {
        match err {
            crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_extensible_source_servers::ListExtensibleSourceServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_staging_accounts::ListStagingAccountsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_staging_accounts::ListStagingAccountsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_staging_accounts::ListStagingAccountsError> for Error {
    fn from(err: crate::operation::list_staging_accounts::ListStagingAccountsError) -> Self {
        match err {
            crate::operation::list_staging_accounts::ListStagingAccountsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_staging_accounts::ListStagingAccountsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_staging_accounts::ListStagingAccountsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_staging_accounts::ListStagingAccountsError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::list_staging_accounts::ListStagingAccountsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_staging_accounts::ListStagingAccountsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::retry_data_replication::RetryDataReplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::retry_data_replication::RetryDataReplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::retry_data_replication::RetryDataReplicationError> for Error {
    fn from(err: crate::operation::retry_data_replication::RetryDataReplicationError) -> Self {
        match err {
            crate::operation::retry_data_replication::RetryDataReplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::retry_data_replication::RetryDataReplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::retry_data_replication::RetryDataReplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::retry_data_replication::RetryDataReplicationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::retry_data_replication::RetryDataReplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::retry_data_replication::RetryDataReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::reverse_replication::ReverseReplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::reverse_replication::ReverseReplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::reverse_replication::ReverseReplicationError> for Error {
    fn from(err: crate::operation::reverse_replication::ReverseReplicationError) -> Self {
        match err {
            crate::operation::reverse_replication::ReverseReplicationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::reverse_replication::ReverseReplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::reverse_replication::ReverseReplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::reverse_replication::ReverseReplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::reverse_replication::ReverseReplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::reverse_replication::ReverseReplicationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::reverse_replication::ReverseReplicationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::reverse_replication::ReverseReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_failback_launch::StartFailbackLaunchError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_failback_launch::StartFailbackLaunchError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_failback_launch::StartFailbackLaunchError> for Error {
    fn from(err: crate::operation::start_failback_launch::StartFailbackLaunchError) -> Self {
        match err {
            crate::operation::start_failback_launch::StartFailbackLaunchError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_failback_launch::StartFailbackLaunchError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_failback_launch::StartFailbackLaunchError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_failback_launch::StartFailbackLaunchError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_failback_launch::StartFailbackLaunchError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::start_failback_launch::StartFailbackLaunchError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_failback_launch::StartFailbackLaunchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::start_recovery::StartRecoveryError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_recovery::StartRecoveryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_recovery::StartRecoveryError> for Error {
    fn from(err: crate::operation::start_recovery::StartRecoveryError) -> Self {
        match err {
            crate::operation::start_recovery::StartRecoveryError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::start_recovery::StartRecoveryError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::start_recovery::StartRecoveryError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::start_recovery::StartRecoveryError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::start_recovery::StartRecoveryError::UninitializedAccountException(
                inner,
            ) => Error::UninitializedAccountException(inner),
            crate::operation::start_recovery::StartRecoveryError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::start_replication::StartReplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::start_replication::StartReplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_replication::StartReplicationError> for Error {
    fn from(err: crate::operation::start_replication::StartReplicationError) -> Self {
        match err {
            crate::operation::start_replication::StartReplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_replication::StartReplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_replication::StartReplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::start_replication::StartReplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_replication::StartReplicationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::start_replication::StartReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::stop_failback::StopFailbackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_failback::StopFailbackError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_failback::StopFailbackError> for Error {
    fn from(err: crate::operation::stop_failback::StopFailbackError) -> Self {
        match err {
            crate::operation::stop_failback::StopFailbackError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::stop_failback::StopFailbackError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_failback::StopFailbackError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::stop_failback::StopFailbackError::UninitializedAccountException(
                inner,
            ) => Error::UninitializedAccountException(inner),
            crate::operation::stop_failback::StopFailbackError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::stop_replication::StopReplicationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::stop_replication::StopReplicationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_replication::StopReplicationError> for Error {
    fn from(err: crate::operation::stop_replication::StopReplicationError) -> Self {
        match err {
            crate::operation::stop_replication::StopReplicationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::stop_replication::StopReplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::stop_replication::StopReplicationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::stop_replication::StopReplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::stop_replication::StopReplicationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::stop_replication::StopReplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError>
    for Error
{
    fn from(
        err: crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError,
    ) -> Self {
        match err {
            crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::terminate_recovery_instances::TerminateRecoveryInstancesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError> for Error {
    fn from(err: crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError) -> Self {
        match err {
            crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::update_failback_replication_configuration::UpdateFailbackReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_launch_configuration::UpdateLaunchConfigurationError> for Error {
    fn from(
        err: crate::operation::update_launch_configuration::UpdateLaunchConfigurationError,
    ) -> Self {
        match err {
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_launch_configuration::UpdateLaunchConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_replication_configuration::UpdateReplicationConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::update_replication_configuration::UpdateReplicationConfigurationError,
    ) -> Self {
        match err {
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_replication_configuration::UpdateReplicationConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError> for Error {
    fn from(err: crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError) -> Self {
        match err {
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::UninitializedAccountException(inner) => Error::UninitializedAccountException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::UninitializedAccountException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
