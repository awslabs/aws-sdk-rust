// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateExtendedSourceServer`](crate::client::fluent_builders::CreateExtendedSourceServer) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`source_server_arn(impl Into<String>)`](crate::client::fluent_builders::CreateExtendedSourceServer::source_server_arn) / [`set_source_server_arn(Option<String>)`](crate::client::fluent_builders::CreateExtendedSourceServer::set_source_server_arn): <p>This defines the ARN of the source server in staging Account based on which you want to create an extended source server.</p>
    ///   - [`tags(HashMap<String, String>)`](crate::client::fluent_builders::CreateExtendedSourceServer::tags) / [`set_tags(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CreateExtendedSourceServer::set_tags): <p>A list of tags associated with the extended source server.</p>
    /// - On success, responds with [`CreateExtendedSourceServerOutput`](crate::output::CreateExtendedSourceServerOutput) with field(s):
    ///   - [`source_server(Option<SourceServer>)`](crate::output::CreateExtendedSourceServerOutput::source_server): <p>Created extended source server.</p>
    /// - On failure, responds with [`SdkError<CreateExtendedSourceServerError>`](crate::error::CreateExtendedSourceServerError)
    pub fn create_extended_source_server(
        &self,
    ) -> crate::client::fluent_builders::CreateExtendedSourceServer {
        crate::client::fluent_builders::CreateExtendedSourceServer::new(self.handle.clone())
    }
}
