// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_source_server<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::SourceServer>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SourceServerBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "sourceServerID" => {
                                builder = builder.set_source_server_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "arn" => {
                                builder = builder.set_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "tags" => {
                                builder = builder.set_tags(
                                    crate::protocol_serde::shape_tags_map::de_tags_map(tokens)?,
                                );
                            }
                            "recoveryInstanceId" => {
                                builder = builder.set_recovery_instance_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "lastLaunchResult" => {
                                builder = builder.set_last_launch_result(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::LastLaunchResult::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "dataReplicationInfo" => {
                                builder = builder.set_data_replication_info(
                                    crate::protocol_serde::shape_data_replication_info::de_data_replication_info(tokens)?
                                );
                            }
                            "lifeCycle" => {
                                builder = builder.set_life_cycle(
                                    crate::protocol_serde::shape_life_cycle::de_life_cycle(tokens)?,
                                );
                            }
                            "sourceProperties" => {
                                builder = builder.set_source_properties(
                                    crate::protocol_serde::shape_source_properties::de_source_properties(tokens)?
                                );
                            }
                            "stagingArea" => {
                                builder = builder.set_staging_area(
                                    crate::protocol_serde::shape_staging_area::de_staging_area(
                                        tokens,
                                    )?,
                                );
                            }
                            "sourceCloudProperties" => {
                                builder = builder.set_source_cloud_properties(
                                    crate::protocol_serde::shape_source_cloud_properties::de_source_cloud_properties(tokens)?
                                );
                            }
                            "replicationDirection" => {
                                builder = builder.set_replication_direction(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::ReplicationDirection::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "reversedDirectionSourceServerArn" => {
                                builder = builder.set_reversed_direction_source_server_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
