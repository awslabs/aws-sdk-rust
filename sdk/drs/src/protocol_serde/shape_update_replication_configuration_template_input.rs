// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_replication_configuration_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.arn {
        object.key("arn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.associate_default_security_group {
        object.key("associateDefaultSecurityGroup").boolean(*var_2);
    }
    if let Some(var_3) = &input.auto_replicate_new_disks {
        object.key("autoReplicateNewDisks").boolean(*var_3);
    }
    if let Some(var_4) = &input.bandwidth_throttling {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_5);
    }
    if let Some(var_6) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_6.as_str());
    }
    if let Some(var_7) = &input.default_large_staging_disk_type {
        object.key("defaultLargeStagingDiskType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_8.as_str());
    }
    if let Some(var_9) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_9.as_str());
    }
    if let Some(var_10) = &input.pit_policy {
        let mut array_11 = object.key("pitPolicy").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_pit_policy_rule::ser_pit_policy_rule(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.replication_configuration_template_id {
        object.key("replicationConfigurationTemplateID").string(var_14.as_str());
    }
    if let Some(var_15) = &input.replication_server_instance_type {
        object.key("replicationServerInstanceType").string(var_15.as_str());
    }
    if let Some(var_16) = &input.replication_servers_security_groups_ids {
        let mut array_17 = object.key("replicationServersSecurityGroupsIDs").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_19.as_str());
    }
    if let Some(var_20) = &input.staging_area_tags {
        #[allow(unused_mut)]
        let mut object_21 = object.key("stagingAreaTags").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22.as_str()).string(value_23.as_str());
            }
        }
        object_21.finish();
    }
    if let Some(var_24) = &input.use_dedicated_replication_server {
        object.key("useDedicatedReplicationServer").boolean(*var_24);
    }
    Ok(())
}
