// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_replication_configuration_template_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_replication_configuration_template::UpdateReplicationConfigurationTemplateInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.arn {
        object.key("arn").string(var_1.as_str());
    }
    if let Some(var_2) = &input.associate_default_security_group {
        object.key("associateDefaultSecurityGroup").boolean(*var_2);
    }
    if input.bandwidth_throttling != 0 {
        object.key("bandwidthThrottling").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.bandwidth_throttling).into()),
        );
    }
    if let Some(var_3) = &input.create_public_ip {
        object.key("createPublicIP").boolean(*var_3);
    }
    if let Some(var_4) = &input.data_plane_routing {
        object.key("dataPlaneRouting").string(var_4.as_str());
    }
    if let Some(var_5) = &input.default_large_staging_disk_type {
        object
            .key("defaultLargeStagingDiskType")
            .string(var_5.as_str());
    }
    if let Some(var_6) = &input.ebs_encryption {
        object.key("ebsEncryption").string(var_6.as_str());
    }
    if let Some(var_7) = &input.ebs_encryption_key_arn {
        object.key("ebsEncryptionKeyArn").string(var_7.as_str());
    }
    if let Some(var_8) = &input.pit_policy {
        let mut array_9 = object.key("pitPolicy").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_pit_policy_rule::ser_pit_policy_rule(
                    &mut object_11,
                    item_10,
                )?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.replication_configuration_template_id {
        object
            .key("replicationConfigurationTemplateID")
            .string(var_12.as_str());
    }
    if let Some(var_13) = &input.replication_server_instance_type {
        object
            .key("replicationServerInstanceType")
            .string(var_13.as_str());
    }
    if let Some(var_14) = &input.replication_servers_security_groups_i_ds {
        let mut array_15 = object
            .key("replicationServersSecurityGroupsIDs")
            .start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.staging_area_subnet_id {
        object.key("stagingAreaSubnetId").string(var_17.as_str());
    }
    if let Some(var_18) = &input.staging_area_tags {
        #[allow(unused_mut)]
        let mut object_19 = object.key("stagingAreaTags").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20.as_str()).string(value_21.as_str());
            }
        }
        object_19.finish();
    }
    if let Some(var_22) = &input.use_dedicated_replication_server {
        object.key("useDedicatedReplicationServer").boolean(*var_22);
    }
    Ok(())
}
