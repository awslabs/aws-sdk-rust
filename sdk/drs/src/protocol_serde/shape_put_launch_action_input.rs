// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_put_launch_action_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::put_launch_action::PutLaunchActionInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.action_code {
        object.key("actionCode").string(var_1.as_str());
    }
    if let Some(var_2) = &input.action_id {
        object.key("actionId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.action_version {
        object.key("actionVersion").string(var_3.as_str());
    }
    if let Some(var_4) = &input.active {
        object.key("active").boolean(*var_4);
    }
    if let Some(var_5) = &input.category {
        object.key("category").string(var_5.as_str());
    }
    if let Some(var_6) = &input.description {
        object.key("description").string(var_6.as_str());
    }
    if let Some(var_7) = &input.name {
        object.key("name").string(var_7.as_str());
    }
    if let Some(var_8) = &input.optional {
        object.key("optional").boolean(*var_8);
    }
    if let Some(var_9) = &input.order {
        object.key("order").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_9).into()),
        );
    }
    if let Some(var_10) = &input.parameters {
        #[allow(unused_mut)]
        let mut object_11 = object.key("parameters").start_object();
        for (key_12, value_13) in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_14 = object_11.key(key_12.as_str()).start_object();
                crate::protocol_serde::shape_launch_action_parameter::ser_launch_action_parameter(&mut object_14, value_13)?;
                object_14.finish();
            }
        }
        object_11.finish();
    }
    if let Some(var_15) = &input.resource_id {
        object.key("resourceId").string(var_15.as_str());
    }
    Ok(())
}
