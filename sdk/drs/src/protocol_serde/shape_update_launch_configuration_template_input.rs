// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_launch_configuration_template_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_launch_configuration_template::UpdateLaunchConfigurationTemplateInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.copy_private_ip {
        object.key("copyPrivateIp").boolean(*var_1);
    }
    if let Some(var_2) = &input.copy_tags {
        object.key("copyTags").boolean(*var_2);
    }
    if let Some(var_3) = &input.export_bucket_arn {
        object.key("exportBucketArn").string(var_3.as_str());
    }
    if let Some(var_4) = &input.launch_configuration_template_id {
        object.key("launchConfigurationTemplateID").string(var_4.as_str());
    }
    if let Some(var_5) = &input.launch_disposition {
        object.key("launchDisposition").string(var_5.as_str());
    }
    if let Some(var_6) = &input.launch_into_source_instance {
        object.key("launchIntoSourceInstance").boolean(*var_6);
    }
    if let Some(var_7) = &input.licensing {
        #[allow(unused_mut)]
        let mut object_8 = object.key("licensing").start_object();
        crate::protocol_serde::shape_licensing::ser_licensing(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.post_launch_enabled {
        object.key("postLaunchEnabled").boolean(*var_9);
    }
    if let Some(var_10) = &input.target_instance_type_right_sizing_method {
        object.key("targetInstanceTypeRightSizingMethod").string(var_10.as_str());
    }
    Ok(())
}
