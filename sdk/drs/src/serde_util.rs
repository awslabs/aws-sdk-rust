// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn create_replication_configuration_template_output_correct_errors(
    mut builder: crate::operation::create_replication_configuration_template::builders::CreateReplicationConfigurationTemplateOutputBuilder,
) -> crate::operation::create_replication_configuration_template::builders::CreateReplicationConfigurationTemplateOutputBuilder {
    if builder.replication_configuration_template_id.is_none() {
        builder.replication_configuration_template_id = Some(Default::default())
    }
    builder
}

pub(crate) fn get_failback_replication_configuration_output_correct_errors(
    mut builder: crate::operation::get_failback_replication_configuration::builders::GetFailbackReplicationConfigurationOutputBuilder,
) -> crate::operation::get_failback_replication_configuration::builders::GetFailbackReplicationConfigurationOutputBuilder {
    if builder.recovery_instance_id.is_none() {
        builder.recovery_instance_id = Some(Default::default())
    }
    builder
}

pub(crate) fn update_replication_configuration_template_output_correct_errors(
    mut builder: crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateOutputBuilder,
) -> crate::operation::update_replication_configuration_template::builders::UpdateReplicationConfigurationTemplateOutputBuilder {
    if builder.replication_configuration_template_id.is_none() {
        builder.replication_configuration_template_id = Some(Default::default())
    }
    builder
}

pub(crate) fn job_correct_errors(mut builder: crate::types::builders::JobBuilder) -> crate::types::builders::JobBuilder {
    if builder.job_id.is_none() {
        builder.job_id = Some(Default::default())
    }
    builder
}

pub(crate) fn pit_policy_rule_correct_errors(
    mut builder: crate::types::builders::PitPolicyRuleBuilder,
) -> crate::types::builders::PitPolicyRuleBuilder {
    if builder.units.is_none() {
        builder.units = "no value was set".parse::<crate::types::PitPolicyRuleUnits>().ok()
    }
    if builder.interval.is_none() {
        builder.interval = Some(Default::default())
    }
    if builder.retention_duration.is_none() {
        builder.retention_duration = Some(Default::default())
    }
    builder
}

pub(crate) fn recovery_snapshot_correct_errors(
    mut builder: crate::types::builders::RecoverySnapshotBuilder,
) -> crate::types::builders::RecoverySnapshotBuilder {
    if builder.snapshot_id.is_none() {
        builder.snapshot_id = Some(Default::default())
    }
    if builder.source_server_id.is_none() {
        builder.source_server_id = Some(Default::default())
    }
    if builder.expected_timestamp.is_none() {
        builder.expected_timestamp = Some(Default::default())
    }
    builder
}

pub(crate) fn replication_configuration_template_correct_errors(
    mut builder: crate::types::builders::ReplicationConfigurationTemplateBuilder,
) -> crate::types::builders::ReplicationConfigurationTemplateBuilder {
    if builder.replication_configuration_template_id.is_none() {
        builder.replication_configuration_template_id = Some(Default::default())
    }
    builder
}
