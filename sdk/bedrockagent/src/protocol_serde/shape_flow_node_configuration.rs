// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_flow_node_configuration(
    object_2: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::FlowNodeConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    match input {
        crate::types::FlowNodeConfiguration::Input(inner) => {
            #[allow(unused_mut)]
            let mut object_1 = object_2.key("input").start_object();
            crate::protocol_serde::shape_input_flow_node_configuration::ser_input_flow_node_configuration(&mut object_1, inner)?;
            object_1.finish();
        }
        crate::types::FlowNodeConfiguration::Output(inner) => {
            #[allow(unused_mut)]
            let mut object_2 = object_2.key("output").start_object();
            crate::protocol_serde::shape_output_flow_node_configuration::ser_output_flow_node_configuration(&mut object_2, inner)?;
            object_2.finish();
        }
        crate::types::FlowNodeConfiguration::KnowledgeBase(inner) => {
            #[allow(unused_mut)]
            let mut object_3 = object_2.key("knowledgeBase").start_object();
            crate::protocol_serde::shape_knowledge_base_flow_node_configuration::ser_knowledge_base_flow_node_configuration(&mut object_3, inner)?;
            object_3.finish();
        }
        crate::types::FlowNodeConfiguration::Condition(inner) => {
            #[allow(unused_mut)]
            let mut object_4 = object_2.key("condition").start_object();
            crate::protocol_serde::shape_condition_flow_node_configuration::ser_condition_flow_node_configuration(&mut object_4, inner)?;
            object_4.finish();
        }
        crate::types::FlowNodeConfiguration::Lex(inner) => {
            #[allow(unused_mut)]
            let mut object_5 = object_2.key("lex").start_object();
            crate::protocol_serde::shape_lex_flow_node_configuration::ser_lex_flow_node_configuration(&mut object_5, inner)?;
            object_5.finish();
        }
        crate::types::FlowNodeConfiguration::Prompt(inner) => {
            #[allow(unused_mut)]
            let mut object_6 = object_2.key("prompt").start_object();
            crate::protocol_serde::shape_prompt_flow_node_configuration::ser_prompt_flow_node_configuration(&mut object_6, inner)?;
            object_6.finish();
        }
        crate::types::FlowNodeConfiguration::LambdaFunction(inner) => {
            #[allow(unused_mut)]
            let mut object_7 = object_2.key("lambdaFunction").start_object();
            crate::protocol_serde::shape_lambda_function_flow_node_configuration::ser_lambda_function_flow_node_configuration(&mut object_7, inner)?;
            object_7.finish();
        }
        crate::types::FlowNodeConfiguration::Storage(inner) => {
            #[allow(unused_mut)]
            let mut object_8 = object_2.key("storage").start_object();
            crate::protocol_serde::shape_storage_flow_node_configuration::ser_storage_flow_node_configuration(&mut object_8, inner)?;
            object_8.finish();
        }
        crate::types::FlowNodeConfiguration::Agent(inner) => {
            #[allow(unused_mut)]
            let mut object_9 = object_2.key("agent").start_object();
            crate::protocol_serde::shape_agent_flow_node_configuration::ser_agent_flow_node_configuration(&mut object_9, inner)?;
            object_9.finish();
        }
        crate::types::FlowNodeConfiguration::Retrieval(inner) => {
            #[allow(unused_mut)]
            let mut object_10 = object_2.key("retrieval").start_object();
            crate::protocol_serde::shape_retrieval_flow_node_configuration::ser_retrieval_flow_node_configuration(&mut object_10, inner)?;
            object_10.finish();
        }
        crate::types::FlowNodeConfiguration::Iterator(inner) => {
            #[allow(unused_mut)]
            let mut object_11 = object_2.key("iterator").start_object();
            crate::protocol_serde::shape_iterator_flow_node_configuration::ser_iterator_flow_node_configuration(&mut object_11, inner)?;
            object_11.finish();
        }
        crate::types::FlowNodeConfiguration::Collector(inner) => {
            #[allow(unused_mut)]
            let mut object_12 = object_2.key("collector").start_object();
            crate::protocol_serde::shape_collector_flow_node_configuration::ser_collector_flow_node_configuration(&mut object_12, inner)?;
            object_12.finish();
        }
        crate::types::FlowNodeConfiguration::InlineCode(inner) => {
            #[allow(unused_mut)]
            let mut object_13 = object_2.key("inlineCode").start_object();
            crate::protocol_serde::shape_inline_code_flow_node_configuration::ser_inline_code_flow_node_configuration(&mut object_13, inner)?;
            object_13.finish();
        }
        crate::types::FlowNodeConfiguration::Loop(inner) => {
            #[allow(unused_mut)]
            let mut object_14 = object_2.key("loop").start_object();
            crate::protocol_serde::shape_loop_flow_node_configuration::ser_loop_flow_node_configuration(&mut object_14, inner)?;
            object_14.finish();
        }
        crate::types::FlowNodeConfiguration::LoopInput(inner) => {
            #[allow(unused_mut)]
            let mut object_15 = object_2.key("loopInput").start_object();
            crate::protocol_serde::shape_loop_input_flow_node_configuration::ser_loop_input_flow_node_configuration(&mut object_15, inner)?;
            object_15.finish();
        }
        crate::types::FlowNodeConfiguration::LoopController(inner) => {
            #[allow(unused_mut)]
            let mut object_16 = object_2.key("loopController").start_object();
            crate::protocol_serde::shape_loop_controller_flow_node_configuration::ser_loop_controller_flow_node_configuration(&mut object_16, inner)?;
            object_16.finish();
        }
        crate::types::FlowNodeConfiguration::Unknown => {
            return Err(::aws_smithy_types::error::operation::SerializationError::unknown_variant(
                "FlowNodeConfiguration",
            ))
        }
    }
    Ok(())
}

pub(crate) fn de_flow_node_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::FlowNodeConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    let mut variant = None;
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => return Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => loop {
            match tokens.next().transpose()? {
                Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                    if let ::std::option::Option::Some(::std::result::Result::Ok(::aws_smithy_json::deserialize::Token::ValueNull { .. })) =
                        tokens.peek()
                    {
                        let _ = tokens.next().expect("peek returned a token")?;
                        continue;
                    }
                    let key = key.to_unescaped()?;
                    if key == "__type" {
                        ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                        continue;
                    }
                    if variant.is_some() {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                            "encountered mixed variants in union",
                        ));
                    }
                    variant = match key.as_ref() {
                        "input" => Some(crate::types::FlowNodeConfiguration::Input(
                            crate::protocol_serde::shape_input_flow_node_configuration::de_input_flow_node_configuration(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'input' cannot be null"))?,
                        )),
                        "output" => Some(crate::types::FlowNodeConfiguration::Output(
                            crate::protocol_serde::shape_output_flow_node_configuration::de_output_flow_node_configuration(tokens)?.ok_or_else(
                                || ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'output' cannot be null"),
                            )?,
                        )),
                        "knowledgeBase" => Some(crate::types::FlowNodeConfiguration::KnowledgeBase(
                            crate::protocol_serde::shape_knowledge_base_flow_node_configuration::de_knowledge_base_flow_node_configuration(tokens)?
                                .ok_or_else(|| {
                                ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'knowledgeBase' cannot be null")
                            })?,
                        )),
                        "condition" => Some(crate::types::FlowNodeConfiguration::Condition(
                            crate::protocol_serde::shape_condition_flow_node_configuration::de_condition_flow_node_configuration(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'condition' cannot be null")
                                })?,
                        )),
                        "lex" => Some(crate::types::FlowNodeConfiguration::Lex(
                            crate::protocol_serde::shape_lex_flow_node_configuration::de_lex_flow_node_configuration(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'lex' cannot be null"))?,
                        )),
                        "prompt" => Some(crate::types::FlowNodeConfiguration::Prompt(
                            crate::protocol_serde::shape_prompt_flow_node_configuration::de_prompt_flow_node_configuration(tokens)?.ok_or_else(
                                || ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'prompt' cannot be null"),
                            )?,
                        )),
                        "lambdaFunction" => Some(crate::types::FlowNodeConfiguration::LambdaFunction(
                            crate::protocol_serde::shape_lambda_function_flow_node_configuration::de_lambda_function_flow_node_configuration(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'lambdaFunction' cannot be null")
                                })?,
                        )),
                        "storage" => Some(crate::types::FlowNodeConfiguration::Storage(
                            crate::protocol_serde::shape_storage_flow_node_configuration::de_storage_flow_node_configuration(tokens)?.ok_or_else(
                                || ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'storage' cannot be null"),
                            )?,
                        )),
                        "agent" => Some(crate::types::FlowNodeConfiguration::Agent(
                            crate::protocol_serde::shape_agent_flow_node_configuration::de_agent_flow_node_configuration(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'agent' cannot be null"))?,
                        )),
                        "retrieval" => Some(crate::types::FlowNodeConfiguration::Retrieval(
                            crate::protocol_serde::shape_retrieval_flow_node_configuration::de_retrieval_flow_node_configuration(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'retrieval' cannot be null")
                                })?,
                        )),
                        "iterator" => Some(crate::types::FlowNodeConfiguration::Iterator(
                            crate::protocol_serde::shape_iterator_flow_node_configuration::de_iterator_flow_node_configuration(tokens)?.ok_or_else(
                                || ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'iterator' cannot be null"),
                            )?,
                        )),
                        "collector" => Some(crate::types::FlowNodeConfiguration::Collector(
                            crate::protocol_serde::shape_collector_flow_node_configuration::de_collector_flow_node_configuration(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'collector' cannot be null")
                                })?,
                        )),
                        "inlineCode" => Some(crate::types::FlowNodeConfiguration::InlineCode(
                            crate::protocol_serde::shape_inline_code_flow_node_configuration::de_inline_code_flow_node_configuration(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'inlineCode' cannot be null")
                                })?,
                        )),
                        "loop" => Some(crate::types::FlowNodeConfiguration::Loop(
                            crate::protocol_serde::shape_loop_flow_node_configuration::de_loop_flow_node_configuration(tokens)?
                                .ok_or_else(|| ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'loop' cannot be null"))?,
                        )),
                        "loopInput" => Some(crate::types::FlowNodeConfiguration::LoopInput(
                            crate::protocol_serde::shape_loop_input_flow_node_configuration::de_loop_input_flow_node_configuration(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'loopInput' cannot be null")
                                })?,
                        )),
                        "loopController" => Some(crate::types::FlowNodeConfiguration::LoopController(
                            crate::protocol_serde::shape_loop_controller_flow_node_configuration::de_loop_controller_flow_node_configuration(tokens)?
                                .ok_or_else(|| {
                                    ::aws_smithy_json::deserialize::error::DeserializeError::custom("value for 'loopController' cannot be null")
                                })?,
                        )),
                        _ => {
                            ::aws_smithy_json::deserialize::token::skip_value(tokens)?;
                            Some(crate::types::FlowNodeConfiguration::Unknown)
                        }
                    };
                }
                other => {
                    return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                        "expected object key or end object, found: {other:?}"
                    )))
                }
            }
        },
        _ => {
            return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ))
        }
    }
    if variant.is_none() {
        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "Union did not contain a valid variant.",
        ));
    }
    Ok(variant)
}
