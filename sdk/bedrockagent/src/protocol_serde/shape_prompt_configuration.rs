// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_prompt_configuration(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::PromptConfiguration,
) -> ::std::result::Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.prompt_type {
        object.key("promptType").string(var_1.as_str());
    }
    if let Some(var_2) = &input.prompt_creation_mode {
        object.key("promptCreationMode").string(var_2.as_str());
    }
    if let Some(var_3) = &input.prompt_state {
        object.key("promptState").string(var_3.as_str());
    }
    if let Some(var_4) = &input.base_prompt_template {
        object.key("basePromptTemplate").string(var_4.as_str());
    }
    if let Some(var_5) = &input.inference_configuration {
        #[allow(unused_mut)]
        let mut object_6 = object.key("inferenceConfiguration").start_object();
        crate::protocol_serde::shape_inference_configuration::ser_inference_configuration(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.parser_mode {
        object.key("parserMode").string(var_7.as_str());
    }
    if let Some(var_8) = &input.foundation_model {
        object.key("foundationModel").string(var_8.as_str());
    }
    if let Some(var_9) = &input.additional_model_request_fields {
        object.key("additionalModelRequestFields").document(var_9);
    }
    Ok(())
}

pub(crate) fn de_prompt_configuration<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> ::std::result::Result<Option<crate::types::PromptConfiguration>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::PromptConfigurationBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "promptType" => {
                            builder = builder.set_prompt_type(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PromptType::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "promptCreationMode" => {
                            builder = builder.set_prompt_creation_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CreationMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "promptState" => {
                            builder = builder.set_prompt_state(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::PromptState::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "basePromptTemplate" => {
                            builder = builder.set_base_prompt_template(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "inferenceConfiguration" => {
                            builder = builder.set_inference_configuration(
                                crate::protocol_serde::shape_inference_configuration::de_inference_configuration(tokens)?,
                            );
                        }
                        "parserMode" => {
                            builder = builder.set_parser_mode(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| crate::types::CreationMode::from(u.as_ref())))
                                    .transpose()?,
                            );
                        }
                        "foundationModel" => {
                            builder = builder.set_foundation_model(
                                ::aws_smithy_json::deserialize::token::expect_string_or_null(tokens.next())?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                            );
                        }
                        "additionalModelRequestFields" => {
                            builder =
                                builder.set_additional_model_request_fields(Some(::aws_smithy_json::deserialize::token::expect_document(tokens)?));
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {other:?}"
                        )))
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
