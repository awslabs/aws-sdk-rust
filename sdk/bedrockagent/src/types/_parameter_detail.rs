// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a parameter in a function for an action group.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html#API_agent_CreateAgentActionGroup_RequestSyntax">CreateAgentActionGroup request</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_CreateAgentActionGroup.html#API_agent_CreateAgentActionGroup_ResponseSyntax">CreateAgentActionGroup response</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html#API_agent_UpdateAgentActionGroup_RequestSyntax">UpdateAgentActionGroup request</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_UpdateAgentActionGroup.html#API_agent_UpdateAgentActionGroup_ResponseSyntax">UpdateAgentActionGroup response</a></p></li>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_agent_GetAgentActionGroup.html#API_agent_GetAgentActionGroup_ResponseSyntax">GetAgentActionGroup response</a></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParameterDetail {
    /// <p>A description of the parameter. Helps the foundation model determine how to elicit the parameters from the user.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The data type of the parameter.</p>
    pub r#type: crate::types::Type,
    /// <p>Whether the parameter is required for the agent to complete the function for action group invocation.</p>
    pub required: ::std::option::Option<bool>,
}
impl ParameterDetail {
    /// <p>A description of the parameter. Helps the foundation model determine how to elicit the parameters from the user.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The data type of the parameter.</p>
    pub fn r#type(&self) -> &crate::types::Type {
        &self.r#type
    }
    /// <p>Whether the parameter is required for the agent to complete the function for action group invocation.</p>
    pub fn required(&self) -> ::std::option::Option<bool> {
        self.required
    }
}
impl ParameterDetail {
    /// Creates a new builder-style object to manufacture [`ParameterDetail`](crate::types::ParameterDetail).
    pub fn builder() -> crate::types::builders::ParameterDetailBuilder {
        crate::types::builders::ParameterDetailBuilder::default()
    }
}

/// A builder for [`ParameterDetail`](crate::types::ParameterDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ParameterDetailBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::Type>,
    pub(crate) required: ::std::option::Option<bool>,
}
impl ParameterDetailBuilder {
    /// <p>A description of the parameter. Helps the foundation model determine how to elicit the parameters from the user.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the parameter. Helps the foundation model determine how to elicit the parameters from the user.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the parameter. Helps the foundation model determine how to elicit the parameters from the user.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The data type of the parameter.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the parameter.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The data type of the parameter.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::Type> {
        &self.r#type
    }
    /// <p>Whether the parameter is required for the agent to complete the function for action group invocation.</p>
    pub fn required(mut self, input: bool) -> Self {
        self.required = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the parameter is required for the agent to complete the function for action group invocation.</p>
    pub fn set_required(mut self, input: ::std::option::Option<bool>) -> Self {
        self.required = input;
        self
    }
    /// <p>Whether the parameter is required for the agent to complete the function for action group invocation.</p>
    pub fn get_required(&self) -> &::std::option::Option<bool> {
        &self.required
    }
    /// Consumes the builder and constructs a [`ParameterDetail`](crate::types::ParameterDetail).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::ParameterDetailBuilder::r#type)
    pub fn build(self) -> ::std::result::Result<crate::types::ParameterDetail, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParameterDetail {
            description: self.description,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building ParameterDetail",
                )
            })?,
            required: self.required,
        })
    }
}
