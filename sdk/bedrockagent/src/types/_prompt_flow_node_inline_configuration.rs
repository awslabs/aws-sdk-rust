// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for a prompt defined inline in the node.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PromptFlowNodeInlineConfiguration {
    /// <p>The type of prompt template.</p>
    pub template_type: crate::types::PromptTemplateType,
    /// <p>Contains a prompt and variables in the prompt that can be replaced with values at runtime.</p>
    pub template_configuration: ::std::option::Option<crate::types::PromptTemplateConfiguration>,
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to run inference with.</p>
    pub model_id: ::std::string::String,
    /// <p>Contains inference configurations for the prompt.</p>
    pub inference_configuration: ::std::option::Option<crate::types::PromptInferenceConfiguration>,
}
impl PromptFlowNodeInlineConfiguration {
    /// <p>The type of prompt template.</p>
    pub fn template_type(&self) -> &crate::types::PromptTemplateType {
        &self.template_type
    }
    /// <p>Contains a prompt and variables in the prompt that can be replaced with values at runtime.</p>
    pub fn template_configuration(&self) -> ::std::option::Option<&crate::types::PromptTemplateConfiguration> {
        self.template_configuration.as_ref()
    }
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to run inference with.</p>
    pub fn model_id(&self) -> &str {
        use std::ops::Deref;
        self.model_id.deref()
    }
    /// <p>Contains inference configurations for the prompt.</p>
    pub fn inference_configuration(&self) -> ::std::option::Option<&crate::types::PromptInferenceConfiguration> {
        self.inference_configuration.as_ref()
    }
}
impl PromptFlowNodeInlineConfiguration {
    /// Creates a new builder-style object to manufacture [`PromptFlowNodeInlineConfiguration`](crate::types::PromptFlowNodeInlineConfiguration).
    pub fn builder() -> crate::types::builders::PromptFlowNodeInlineConfigurationBuilder {
        crate::types::builders::PromptFlowNodeInlineConfigurationBuilder::default()
    }
}

/// A builder for [`PromptFlowNodeInlineConfiguration`](crate::types::PromptFlowNodeInlineConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct PromptFlowNodeInlineConfigurationBuilder {
    pub(crate) template_type: ::std::option::Option<crate::types::PromptTemplateType>,
    pub(crate) template_configuration: ::std::option::Option<crate::types::PromptTemplateConfiguration>,
    pub(crate) model_id: ::std::option::Option<::std::string::String>,
    pub(crate) inference_configuration: ::std::option::Option<crate::types::PromptInferenceConfiguration>,
}
impl PromptFlowNodeInlineConfigurationBuilder {
    /// <p>The type of prompt template.</p>
    /// This field is required.
    pub fn template_type(mut self, input: crate::types::PromptTemplateType) -> Self {
        self.template_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of prompt template.</p>
    pub fn set_template_type(mut self, input: ::std::option::Option<crate::types::PromptTemplateType>) -> Self {
        self.template_type = input;
        self
    }
    /// <p>The type of prompt template.</p>
    pub fn get_template_type(&self) -> &::std::option::Option<crate::types::PromptTemplateType> {
        &self.template_type
    }
    /// <p>Contains a prompt and variables in the prompt that can be replaced with values at runtime.</p>
    /// This field is required.
    pub fn template_configuration(mut self, input: crate::types::PromptTemplateConfiguration) -> Self {
        self.template_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains a prompt and variables in the prompt that can be replaced with values at runtime.</p>
    pub fn set_template_configuration(mut self, input: ::std::option::Option<crate::types::PromptTemplateConfiguration>) -> Self {
        self.template_configuration = input;
        self
    }
    /// <p>Contains a prompt and variables in the prompt that can be replaced with values at runtime.</p>
    pub fn get_template_configuration(&self) -> &::std::option::Option<crate::types::PromptTemplateConfiguration> {
        &self.template_configuration
    }
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to run inference with.</p>
    /// This field is required.
    pub fn model_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to run inference with.</p>
    pub fn set_model_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_id = input;
        self
    }
    /// <p>The unique identifier of the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to run inference with.</p>
    pub fn get_model_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_id
    }
    /// <p>Contains inference configurations for the prompt.</p>
    pub fn inference_configuration(mut self, input: crate::types::PromptInferenceConfiguration) -> Self {
        self.inference_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains inference configurations for the prompt.</p>
    pub fn set_inference_configuration(mut self, input: ::std::option::Option<crate::types::PromptInferenceConfiguration>) -> Self {
        self.inference_configuration = input;
        self
    }
    /// <p>Contains inference configurations for the prompt.</p>
    pub fn get_inference_configuration(&self) -> &::std::option::Option<crate::types::PromptInferenceConfiguration> {
        &self.inference_configuration
    }
    /// Consumes the builder and constructs a [`PromptFlowNodeInlineConfiguration`](crate::types::PromptFlowNodeInlineConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`template_type`](crate::types::builders::PromptFlowNodeInlineConfigurationBuilder::template_type)
    /// - [`model_id`](crate::types::builders::PromptFlowNodeInlineConfigurationBuilder::model_id)
    pub fn build(self) -> ::std::result::Result<crate::types::PromptFlowNodeInlineConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PromptFlowNodeInlineConfiguration {
            template_type: self.template_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "template_type",
                    "template_type was not specified but it is required when building PromptFlowNodeInlineConfiguration",
                )
            })?,
            template_configuration: self.template_configuration,
            model_id: self.model_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_id",
                    "model_id was not specified but it is required when building PromptFlowNodeInlineConfiguration",
                )
            })?,
            inference_configuration: self.inference_configuration,
        })
    }
}
