// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about a version of an agent.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AgentVersion {
    /// <p>The unique identifier of the agent that the version belongs to.</p>
    pub agent_id: ::std::string::String,
    /// <p>The name of the agent that the version belongs to.</p>
    pub agent_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the agent that the version belongs to.</p>
    pub agent_arn: ::std::string::String,
    /// <p>The version number.</p>
    pub version: ::std::string::String,
    /// <p>The instructions provided to the agent.</p>
    pub instruction: ::std::option::Option<::std::string::String>,
    /// <p>The status of the agent that the version belongs to.</p>
    pub agent_status: crate::types::AgentStatus,
    /// <p>The foundation model that the version invokes.</p>
    pub foundation_model: ::std::option::Option<::std::string::String>,
    /// <p>The description of the version.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub idle_session_ttl_in_seconds: i32,
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    pub agent_resource_role_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the KMS key that encrypts the agent.</p>
    pub customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    /// <p>The time at which the version was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The time at which the version was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>A list of reasons that the API operation on the version failed.</p>
    pub failure_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A list of recommended actions to take for the failed API operation on the version to succeed.</p>
    pub recommended_actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Contains configurations to override prompt templates in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
}
impl AgentVersion {
    /// <p>The unique identifier of the agent that the version belongs to.</p>
    pub fn agent_id(&self) -> &str {
        use std::ops::Deref;
        self.agent_id.deref()
    }
    /// <p>The name of the agent that the version belongs to.</p>
    pub fn agent_name(&self) -> &str {
        use std::ops::Deref;
        self.agent_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the agent that the version belongs to.</p>
    pub fn agent_arn(&self) -> &str {
        use std::ops::Deref;
        self.agent_arn.deref()
    }
    /// <p>The version number.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>The instructions provided to the agent.</p>
    pub fn instruction(&self) -> ::std::option::Option<&str> {
        self.instruction.as_deref()
    }
    /// <p>The status of the agent that the version belongs to.</p>
    pub fn agent_status(&self) -> &crate::types::AgentStatus {
        &self.agent_status
    }
    /// <p>The foundation model that the version invokes.</p>
    pub fn foundation_model(&self) -> ::std::option::Option<&str> {
        self.foundation_model.as_deref()
    }
    /// <p>The description of the version.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn idle_session_ttl_in_seconds(&self) -> i32 {
        self.idle_session_ttl_in_seconds
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    pub fn agent_resource_role_arn(&self) -> &str {
        use std::ops::Deref;
        self.agent_resource_role_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that encrypts the agent.</p>
    pub fn customer_encryption_key_arn(&self) -> ::std::option::Option<&str> {
        self.customer_encryption_key_arn.as_deref()
    }
    /// <p>The time at which the version was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The time at which the version was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>A list of reasons that the API operation on the version failed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failure_reasons.is_none()`.
    pub fn failure_reasons(&self) -> &[::std::string::String] {
        self.failure_reasons.as_deref().unwrap_or_default()
    }
    /// <p>A list of recommended actions to take for the failed API operation on the version to succeed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.recommended_actions.is_none()`.
    pub fn recommended_actions(&self) -> &[::std::string::String] {
        self.recommended_actions.as_deref().unwrap_or_default()
    }
    /// <p>Contains configurations to override prompt templates in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn prompt_override_configuration(&self) -> ::std::option::Option<&crate::types::PromptOverrideConfiguration> {
        self.prompt_override_configuration.as_ref()
    }
}
impl ::std::fmt::Debug for AgentVersion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AgentVersion");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_name", &self.agent_name);
        formatter.field("agent_arn", &self.agent_arn);
        formatter.field("version", &self.version);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_status", &self.agent_status);
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("description", &self.description);
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("agent_resource_role_arn", &self.agent_resource_role_arn);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("failure_reasons", &self.failure_reasons);
        formatter.field("recommended_actions", &self.recommended_actions);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AgentVersion {
    /// Creates a new builder-style object to manufacture [`AgentVersion`](crate::types::AgentVersion).
    pub fn builder() -> crate::types::builders::AgentVersionBuilder {
        crate::types::builders::AgentVersionBuilder::default()
    }
}

/// A builder for [`AgentVersion`](crate::types::AgentVersion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AgentVersionBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_name: ::std::option::Option<::std::string::String>,
    pub(crate) agent_arn: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) instruction: ::std::option::Option<::std::string::String>,
    pub(crate) agent_status: ::std::option::Option<crate::types::AgentStatus>,
    pub(crate) foundation_model: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) idle_session_ttl_in_seconds: ::std::option::Option<i32>,
    pub(crate) agent_resource_role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) customer_encryption_key_arn: ::std::option::Option<::std::string::String>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) recommended_actions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) prompt_override_configuration: ::std::option::Option<crate::types::PromptOverrideConfiguration>,
}
impl AgentVersionBuilder {
    /// <p>The unique identifier of the agent that the version belongs to.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent that the version belongs to.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent that the version belongs to.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The name of the agent that the version belongs to.</p>
    /// This field is required.
    pub fn agent_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the agent that the version belongs to.</p>
    pub fn set_agent_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_name = input;
        self
    }
    /// <p>The name of the agent that the version belongs to.</p>
    pub fn get_agent_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_name
    }
    /// <p>The Amazon Resource Name (ARN) of the agent that the version belongs to.</p>
    /// This field is required.
    pub fn agent_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the agent that the version belongs to.</p>
    pub fn set_agent_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the agent that the version belongs to.</p>
    pub fn get_agent_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_arn
    }
    /// <p>The version number.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version number.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version number.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The instructions provided to the agent.</p>
    pub fn instruction(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instruction = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instructions provided to the agent.</p>
    pub fn set_instruction(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instruction = input;
        self
    }
    /// <p>The instructions provided to the agent.</p>
    pub fn get_instruction(&self) -> &::std::option::Option<::std::string::String> {
        &self.instruction
    }
    /// <p>The status of the agent that the version belongs to.</p>
    /// This field is required.
    pub fn agent_status(mut self, input: crate::types::AgentStatus) -> Self {
        self.agent_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the agent that the version belongs to.</p>
    pub fn set_agent_status(mut self, input: ::std::option::Option<crate::types::AgentStatus>) -> Self {
        self.agent_status = input;
        self
    }
    /// <p>The status of the agent that the version belongs to.</p>
    pub fn get_agent_status(&self) -> &::std::option::Option<crate::types::AgentStatus> {
        &self.agent_status
    }
    /// <p>The foundation model that the version invokes.</p>
    pub fn foundation_model(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The foundation model that the version invokes.</p>
    pub fn set_foundation_model(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model = input;
        self
    }
    /// <p>The foundation model that the version invokes.</p>
    pub fn get_foundation_model(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model
    }
    /// <p>The description of the version.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the version.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the version.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    /// This field is required.
    pub fn idle_session_ttl_in_seconds(mut self, input: i32) -> Self {
        self.idle_session_ttl_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn set_idle_session_ttl_in_seconds(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle_session_ttl_in_seconds = input;
        self
    }
    /// <p>The number of seconds for which Amazon Bedrock keeps information about a user's conversation with the agent.</p>
    /// <p>A user interaction remains active for the amount of time specified. If no conversation occurs during this time, the session expires and Amazon Bedrock deletes any data provided before the timeout.</p>
    pub fn get_idle_session_ttl_in_seconds(&self) -> &::std::option::Option<i32> {
        &self.idle_session_ttl_in_seconds
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    /// This field is required.
    pub fn agent_resource_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_resource_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    pub fn set_agent_resource_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_resource_role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the agent.</p>
    pub fn get_agent_resource_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_resource_role_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that encrypts the agent.</p>
    pub fn customer_encryption_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that encrypts the agent.</p>
    pub fn set_customer_encryption_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.customer_encryption_key_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the KMS key that encrypts the agent.</p>
    pub fn get_customer_encryption_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.customer_encryption_key_arn
    }
    /// <p>The time at which the version was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the version was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the version was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time at which the version was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the version was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time at which the version was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `failure_reasons`.
    ///
    /// To override the contents of this collection use [`set_failure_reasons`](Self::set_failure_reasons).
    ///
    /// <p>A list of reasons that the API operation on the version failed.</p>
    pub fn failure_reasons(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.failure_reasons.unwrap_or_default();
        v.push(input.into());
        self.failure_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of reasons that the API operation on the version failed.</p>
    pub fn set_failure_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.failure_reasons = input;
        self
    }
    /// <p>A list of reasons that the API operation on the version failed.</p>
    pub fn get_failure_reasons(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.failure_reasons
    }
    /// Appends an item to `recommended_actions`.
    ///
    /// To override the contents of this collection use [`set_recommended_actions`](Self::set_recommended_actions).
    ///
    /// <p>A list of recommended actions to take for the failed API operation on the version to succeed.</p>
    pub fn recommended_actions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.recommended_actions.unwrap_or_default();
        v.push(input.into());
        self.recommended_actions = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of recommended actions to take for the failed API operation on the version to succeed.</p>
    pub fn set_recommended_actions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.recommended_actions = input;
        self
    }
    /// <p>A list of recommended actions to take for the failed API operation on the version to succeed.</p>
    pub fn get_recommended_actions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.recommended_actions
    }
    /// <p>Contains configurations to override prompt templates in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn prompt_override_configuration(mut self, input: crate::types::PromptOverrideConfiguration) -> Self {
        self.prompt_override_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configurations to override prompt templates in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn set_prompt_override_configuration(mut self, input: ::std::option::Option<crate::types::PromptOverrideConfiguration>) -> Self {
        self.prompt_override_configuration = input;
        self
    }
    /// <p>Contains configurations to override prompt templates in different parts of an agent sequence. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/advanced-prompts.html">Advanced prompts</a>.</p>
    pub fn get_prompt_override_configuration(&self) -> &::std::option::Option<crate::types::PromptOverrideConfiguration> {
        &self.prompt_override_configuration
    }
    /// Consumes the builder and constructs a [`AgentVersion`](crate::types::AgentVersion).
    /// This method will fail if any of the following fields are not set:
    /// - [`agent_id`](crate::types::builders::AgentVersionBuilder::agent_id)
    /// - [`agent_name`](crate::types::builders::AgentVersionBuilder::agent_name)
    /// - [`agent_arn`](crate::types::builders::AgentVersionBuilder::agent_arn)
    /// - [`version`](crate::types::builders::AgentVersionBuilder::version)
    /// - [`agent_status`](crate::types::builders::AgentVersionBuilder::agent_status)
    /// - [`idle_session_ttl_in_seconds`](crate::types::builders::AgentVersionBuilder::idle_session_ttl_in_seconds)
    /// - [`agent_resource_role_arn`](crate::types::builders::AgentVersionBuilder::agent_resource_role_arn)
    /// - [`created_at`](crate::types::builders::AgentVersionBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::AgentVersionBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::AgentVersion, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AgentVersion {
            agent_id: self.agent_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_id",
                    "agent_id was not specified but it is required when building AgentVersion",
                )
            })?,
            agent_name: self.agent_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_name",
                    "agent_name was not specified but it is required when building AgentVersion",
                )
            })?,
            agent_arn: self.agent_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_arn",
                    "agent_arn was not specified but it is required when building AgentVersion",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building AgentVersion",
                )
            })?,
            instruction: self.instruction,
            agent_status: self.agent_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_status",
                    "agent_status was not specified but it is required when building AgentVersion",
                )
            })?,
            foundation_model: self.foundation_model,
            description: self.description,
            idle_session_ttl_in_seconds: self.idle_session_ttl_in_seconds.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "idle_session_ttl_in_seconds",
                    "idle_session_ttl_in_seconds was not specified but it is required when building AgentVersion",
                )
            })?,
            agent_resource_role_arn: self.agent_resource_role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_resource_role_arn",
                    "agent_resource_role_arn was not specified but it is required when building AgentVersion",
                )
            })?,
            customer_encryption_key_arn: self.customer_encryption_key_arn,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AgentVersion",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building AgentVersion",
                )
            })?,
            failure_reasons: self.failure_reasons,
            recommended_actions: self.recommended_actions,
            prompt_override_configuration: self.prompt_override_configuration,
        })
    }
}
impl ::std::fmt::Debug for AgentVersionBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AgentVersionBuilder");
        formatter.field("agent_id", &self.agent_id);
        formatter.field("agent_name", &self.agent_name);
        formatter.field("agent_arn", &self.agent_arn);
        formatter.field("version", &self.version);
        formatter.field("instruction", &"*** Sensitive Data Redacted ***");
        formatter.field("agent_status", &self.agent_status);
        formatter.field("foundation_model", &self.foundation_model);
        formatter.field("description", &self.description);
        formatter.field("idle_session_ttl_in_seconds", &self.idle_session_ttl_in_seconds);
        formatter.field("agent_resource_role_arn", &self.agent_resource_role_arn);
        formatter.field("customer_encryption_key_arn", &self.customer_encryption_key_arn);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("failure_reasons", &self.failure_reasons);
        formatter.field("recommended_actions", &self.recommended_actions);
        formatter.field("prompt_override_configuration", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
