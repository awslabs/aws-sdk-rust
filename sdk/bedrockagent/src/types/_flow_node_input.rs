// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations for an input to a node.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct FlowNodeInput {
    /// <p>A name for the input that you can reference.</p>
    pub name: ::std::string::String,
    /// <p>The data type of the input. If the input doesn't match this type at runtime, a validation error will be thrown.</p>
    pub r#type: crate::types::FlowNodeIoDataType,
    /// <p>An expression that formats the input for the node. For an explanation of how to create expressions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-expressions.html">Expressions in Prompt flows in Amazon Bedrock</a>.</p>
    pub expression: ::std::string::String,
}
impl FlowNodeInput {
    /// <p>A name for the input that you can reference.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The data type of the input. If the input doesn't match this type at runtime, a validation error will be thrown.</p>
    pub fn r#type(&self) -> &crate::types::FlowNodeIoDataType {
        &self.r#type
    }
    /// <p>An expression that formats the input for the node. For an explanation of how to create expressions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-expressions.html">Expressions in Prompt flows in Amazon Bedrock</a>.</p>
    pub fn expression(&self) -> &str {
        use std::ops::Deref;
        self.expression.deref()
    }
}
impl ::std::fmt::Debug for FlowNodeInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowNodeInput");
        formatter.field("name", &self.name);
        formatter.field("r#type", &self.r#type);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl FlowNodeInput {
    /// Creates a new builder-style object to manufacture [`FlowNodeInput`](crate::types::FlowNodeInput).
    pub fn builder() -> crate::types::builders::FlowNodeInputBuilder {
        crate::types::builders::FlowNodeInputBuilder::default()
    }
}

/// A builder for [`FlowNodeInput`](crate::types::FlowNodeInput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
#[non_exhaustive]
pub struct FlowNodeInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::FlowNodeIoDataType>,
    pub(crate) expression: ::std::option::Option<::std::string::String>,
}
impl FlowNodeInputBuilder {
    /// <p>A name for the input that you can reference.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the input that you can reference.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the input that you can reference.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The data type of the input. If the input doesn't match this type at runtime, a validation error will be thrown.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::FlowNodeIoDataType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The data type of the input. If the input doesn't match this type at runtime, a validation error will be thrown.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FlowNodeIoDataType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The data type of the input. If the input doesn't match this type at runtime, a validation error will be thrown.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FlowNodeIoDataType> {
        &self.r#type
    }
    /// <p>An expression that formats the input for the node. For an explanation of how to create expressions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-expressions.html">Expressions in Prompt flows in Amazon Bedrock</a>.</p>
    /// This field is required.
    pub fn expression(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expression = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An expression that formats the input for the node. For an explanation of how to create expressions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-expressions.html">Expressions in Prompt flows in Amazon Bedrock</a>.</p>
    pub fn set_expression(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expression = input;
        self
    }
    /// <p>An expression that formats the input for the node. For an explanation of how to create expressions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/flows-expressions.html">Expressions in Prompt flows in Amazon Bedrock</a>.</p>
    pub fn get_expression(&self) -> &::std::option::Option<::std::string::String> {
        &self.expression
    }
    /// Consumes the builder and constructs a [`FlowNodeInput`](crate::types::FlowNodeInput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::FlowNodeInputBuilder::name)
    /// - [`r#type`](crate::types::builders::FlowNodeInputBuilder::type)
    /// - [`expression`](crate::types::builders::FlowNodeInputBuilder::expression)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowNodeInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowNodeInput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FlowNodeInput",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FlowNodeInput",
                )
            })?,
            expression: self.expression.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "expression",
                    "expression was not specified but it is required when building FlowNodeInput",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for FlowNodeInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("FlowNodeInputBuilder");
        formatter.field("name", &self.name);
        formatter.field("r#type", &self.r#type);
        formatter.field("expression", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
