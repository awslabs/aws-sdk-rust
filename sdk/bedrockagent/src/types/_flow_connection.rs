// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a connection between two nodes in the flow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FlowConnection {
    /// <p>Whether the source node that the connection begins from is a condition node (<code>Conditional</code>) or not (<code>Data</code>).</p>
    pub r#type: crate::types::FlowConnectionType,
    /// <p>A name for the connection that you can reference.</p>
    pub name: ::std::string::String,
    /// <p>The node that the connection starts at.</p>
    pub source: ::std::string::String,
    /// <p>The node that the connection ends at.</p>
    pub target: ::std::string::String,
    /// <p>The configuration of the connection.</p>
    pub configuration: ::std::option::Option<crate::types::FlowConnectionConfiguration>,
}
impl FlowConnection {
    /// <p>Whether the source node that the connection begins from is a condition node (<code>Conditional</code>) or not (<code>Data</code>).</p>
    pub fn r#type(&self) -> &crate::types::FlowConnectionType {
        &self.r#type
    }
    /// <p>A name for the connection that you can reference.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The node that the connection starts at.</p>
    pub fn source(&self) -> &str {
        use std::ops::Deref;
        self.source.deref()
    }
    /// <p>The node that the connection ends at.</p>
    pub fn target(&self) -> &str {
        use std::ops::Deref;
        self.target.deref()
    }
    /// <p>The configuration of the connection.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::FlowConnectionConfiguration> {
        self.configuration.as_ref()
    }
}
impl FlowConnection {
    /// Creates a new builder-style object to manufacture [`FlowConnection`](crate::types::FlowConnection).
    pub fn builder() -> crate::types::builders::FlowConnectionBuilder {
        crate::types::builders::FlowConnectionBuilder::default()
    }
}

/// A builder for [`FlowConnection`](crate::types::FlowConnection).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FlowConnectionBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::FlowConnectionType>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) source: ::std::option::Option<::std::string::String>,
    pub(crate) target: ::std::option::Option<::std::string::String>,
    pub(crate) configuration: ::std::option::Option<crate::types::FlowConnectionConfiguration>,
}
impl FlowConnectionBuilder {
    /// <p>Whether the source node that the connection begins from is a condition node (<code>Conditional</code>) or not (<code>Data</code>).</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::FlowConnectionType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Whether the source node that the connection begins from is a condition node (<code>Conditional</code>) or not (<code>Data</code>).</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FlowConnectionType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Whether the source node that the connection begins from is a condition node (<code>Conditional</code>) or not (<code>Data</code>).</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FlowConnectionType> {
        &self.r#type
    }
    /// <p>A name for the connection that you can reference.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the connection that you can reference.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the connection that you can reference.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The node that the connection starts at.</p>
    /// This field is required.
    pub fn source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The node that the connection starts at.</p>
    pub fn set_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source = input;
        self
    }
    /// <p>The node that the connection starts at.</p>
    pub fn get_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.source
    }
    /// <p>The node that the connection ends at.</p>
    /// This field is required.
    pub fn target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The node that the connection ends at.</p>
    pub fn set_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target = input;
        self
    }
    /// <p>The node that the connection ends at.</p>
    pub fn get_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.target
    }
    /// <p>The configuration of the connection.</p>
    pub fn configuration(mut self, input: crate::types::FlowConnectionConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of the connection.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::FlowConnectionConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>The configuration of the connection.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::FlowConnectionConfiguration> {
        &self.configuration
    }
    /// Consumes the builder and constructs a [`FlowConnection`](crate::types::FlowConnection).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::FlowConnectionBuilder::type)
    /// - [`name`](crate::types::builders::FlowConnectionBuilder::name)
    /// - [`source`](crate::types::builders::FlowConnectionBuilder::source)
    /// - [`target`](crate::types::builders::FlowConnectionBuilder::target)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowConnection, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowConnection {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FlowConnection",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FlowConnection",
                )
            })?,
            source: self.source.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source",
                    "source was not specified but it is required when building FlowConnection",
                )
            })?,
            target: self.target.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "target",
                    "target was not specified but it is required when building FlowConnection",
                )
            })?,
            configuration: self.configuration,
        })
    }
}
