// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains information about a knowledge base.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBase {
    /// <p>The unique identifier of the knowledge base.</p>
    pub knowledge_base_id: ::std::string::String,
    /// <p>The name of the knowledge base.</p>
    pub name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub knowledge_base_arn: ::std::string::String,
    /// <p>The description of the knowledge base.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the knowledge base.</p>
    pub role_arn: ::std::string::String,
    /// <p>Contains details about the embeddings configuration of the knowledge base.</p>
    pub knowledge_base_configuration: ::std::option::Option<crate::types::KnowledgeBaseConfiguration>,
    /// <p>Contains details about the storage configuration of the knowledge base.</p>
    pub storage_configuration: ::std::option::Option<crate::types::StorageConfiguration>,
    /// <p>The status of the knowledge base. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The knowledge base is being created.</p></li>
    /// <li>
    /// <p>ACTIVE – The knowledge base is ready to be queried.</p></li>
    /// <li>
    /// <p>DELETING – The knowledge base is being deleted.</p></li>
    /// <li>
    /// <p>UPDATING – The knowledge base is being updated.</p></li>
    /// <li>
    /// <p>FAILED – The knowledge base API operation failed.</p></li>
    /// </ul>
    pub status: crate::types::KnowledgeBaseStatus,
    /// <p>The time at which the knowledge base was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The time at which the knowledge base was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>A list of reasons that the API operation on the knowledge base failed.</p>
    pub failure_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl KnowledgeBase {
    /// <p>The unique identifier of the knowledge base.</p>
    pub fn knowledge_base_id(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_id.deref()
    }
    /// <p>The name of the knowledge base.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn knowledge_base_arn(&self) -> &str {
        use std::ops::Deref;
        self.knowledge_base_arn.deref()
    }
    /// <p>The description of the knowledge base.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the knowledge base.</p>
    pub fn role_arn(&self) -> &str {
        use std::ops::Deref;
        self.role_arn.deref()
    }
    /// <p>Contains details about the embeddings configuration of the knowledge base.</p>
    pub fn knowledge_base_configuration(&self) -> ::std::option::Option<&crate::types::KnowledgeBaseConfiguration> {
        self.knowledge_base_configuration.as_ref()
    }
    /// <p>Contains details about the storage configuration of the knowledge base.</p>
    pub fn storage_configuration(&self) -> ::std::option::Option<&crate::types::StorageConfiguration> {
        self.storage_configuration.as_ref()
    }
    /// <p>The status of the knowledge base. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The knowledge base is being created.</p></li>
    /// <li>
    /// <p>ACTIVE – The knowledge base is ready to be queried.</p></li>
    /// <li>
    /// <p>DELETING – The knowledge base is being deleted.</p></li>
    /// <li>
    /// <p>UPDATING – The knowledge base is being updated.</p></li>
    /// <li>
    /// <p>FAILED – The knowledge base API operation failed.</p></li>
    /// </ul>
    pub fn status(&self) -> &crate::types::KnowledgeBaseStatus {
        &self.status
    }
    /// <p>The time at which the knowledge base was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The time at which the knowledge base was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>A list of reasons that the API operation on the knowledge base failed.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failure_reasons.is_none()`.
    pub fn failure_reasons(&self) -> &[::std::string::String] {
        self.failure_reasons.as_deref().unwrap_or_default()
    }
}
impl KnowledgeBase {
    /// Creates a new builder-style object to manufacture [`KnowledgeBase`](crate::types::KnowledgeBase).
    pub fn builder() -> crate::types::builders::KnowledgeBaseBuilder {
        crate::types::builders::KnowledgeBaseBuilder::default()
    }
}

/// A builder for [`KnowledgeBase`](crate::types::KnowledgeBase).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct KnowledgeBaseBuilder {
    pub(crate) knowledge_base_id: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_arn: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) role_arn: ::std::option::Option<::std::string::String>,
    pub(crate) knowledge_base_configuration: ::std::option::Option<crate::types::KnowledgeBaseConfiguration>,
    pub(crate) storage_configuration: ::std::option::Option<crate::types::StorageConfiguration>,
    pub(crate) status: ::std::option::Option<crate::types::KnowledgeBaseStatus>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl KnowledgeBaseBuilder {
    /// <p>The unique identifier of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the knowledge base.</p>
    pub fn set_knowledge_base_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_id = input;
        self
    }
    /// <p>The unique identifier of the knowledge base.</p>
    pub fn get_knowledge_base_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_id
    }
    /// <p>The name of the knowledge base.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the knowledge base.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the knowledge base.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.knowledge_base_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn set_knowledge_base_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.knowledge_base_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the knowledge base.</p>
    pub fn get_knowledge_base_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.knowledge_base_arn
    }
    /// <p>The description of the knowledge base.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the knowledge base.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the knowledge base.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the knowledge base.</p>
    /// This field is required.
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the knowledge base.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the IAM role with permissions to invoke API operations on the knowledge base.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.role_arn
    }
    /// <p>Contains details about the embeddings configuration of the knowledge base.</p>
    /// This field is required.
    pub fn knowledge_base_configuration(mut self, input: crate::types::KnowledgeBaseConfiguration) -> Self {
        self.knowledge_base_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the embeddings configuration of the knowledge base.</p>
    pub fn set_knowledge_base_configuration(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseConfiguration>) -> Self {
        self.knowledge_base_configuration = input;
        self
    }
    /// <p>Contains details about the embeddings configuration of the knowledge base.</p>
    pub fn get_knowledge_base_configuration(&self) -> &::std::option::Option<crate::types::KnowledgeBaseConfiguration> {
        &self.knowledge_base_configuration
    }
    /// <p>Contains details about the storage configuration of the knowledge base.</p>
    /// This field is required.
    pub fn storage_configuration(mut self, input: crate::types::StorageConfiguration) -> Self {
        self.storage_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the storage configuration of the knowledge base.</p>
    pub fn set_storage_configuration(mut self, input: ::std::option::Option<crate::types::StorageConfiguration>) -> Self {
        self.storage_configuration = input;
        self
    }
    /// <p>Contains details about the storage configuration of the knowledge base.</p>
    pub fn get_storage_configuration(&self) -> &::std::option::Option<crate::types::StorageConfiguration> {
        &self.storage_configuration
    }
    /// <p>The status of the knowledge base. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The knowledge base is being created.</p></li>
    /// <li>
    /// <p>ACTIVE – The knowledge base is ready to be queried.</p></li>
    /// <li>
    /// <p>DELETING – The knowledge base is being deleted.</p></li>
    /// <li>
    /// <p>UPDATING – The knowledge base is being updated.</p></li>
    /// <li>
    /// <p>FAILED – The knowledge base API operation failed.</p></li>
    /// </ul>
    /// This field is required.
    pub fn status(mut self, input: crate::types::KnowledgeBaseStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the knowledge base. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The knowledge base is being created.</p></li>
    /// <li>
    /// <p>ACTIVE – The knowledge base is ready to be queried.</p></li>
    /// <li>
    /// <p>DELETING – The knowledge base is being deleted.</p></li>
    /// <li>
    /// <p>UPDATING – The knowledge base is being updated.</p></li>
    /// <li>
    /// <p>FAILED – The knowledge base API operation failed.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the knowledge base. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The knowledge base is being created.</p></li>
    /// <li>
    /// <p>ACTIVE – The knowledge base is ready to be queried.</p></li>
    /// <li>
    /// <p>DELETING – The knowledge base is being deleted.</p></li>
    /// <li>
    /// <p>UPDATING – The knowledge base is being updated.</p></li>
    /// <li>
    /// <p>FAILED – The knowledge base API operation failed.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::KnowledgeBaseStatus> {
        &self.status
    }
    /// <p>The time at which the knowledge base was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the knowledge base was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the knowledge base was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time at which the knowledge base was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the knowledge base was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time at which the knowledge base was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `failure_reasons`.
    ///
    /// To override the contents of this collection use [`set_failure_reasons`](Self::set_failure_reasons).
    ///
    /// <p>A list of reasons that the API operation on the knowledge base failed.</p>
    pub fn failure_reasons(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.failure_reasons.unwrap_or_default();
        v.push(input.into());
        self.failure_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of reasons that the API operation on the knowledge base failed.</p>
    pub fn set_failure_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.failure_reasons = input;
        self
    }
    /// <p>A list of reasons that the API operation on the knowledge base failed.</p>
    pub fn get_failure_reasons(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.failure_reasons
    }
    /// Consumes the builder and constructs a [`KnowledgeBase`](crate::types::KnowledgeBase).
    /// This method will fail if any of the following fields are not set:
    /// - [`knowledge_base_id`](crate::types::builders::KnowledgeBaseBuilder::knowledge_base_id)
    /// - [`name`](crate::types::builders::KnowledgeBaseBuilder::name)
    /// - [`knowledge_base_arn`](crate::types::builders::KnowledgeBaseBuilder::knowledge_base_arn)
    /// - [`role_arn`](crate::types::builders::KnowledgeBaseBuilder::role_arn)
    /// - [`status`](crate::types::builders::KnowledgeBaseBuilder::status)
    /// - [`created_at`](crate::types::builders::KnowledgeBaseBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::KnowledgeBaseBuilder::updated_at)
    pub fn build(self) -> ::std::result::Result<crate::types::KnowledgeBase, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KnowledgeBase {
            knowledge_base_id: self.knowledge_base_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_id",
                    "knowledge_base_id was not specified but it is required when building KnowledgeBase",
                )
            })?,
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building KnowledgeBase",
                )
            })?,
            knowledge_base_arn: self.knowledge_base_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "knowledge_base_arn",
                    "knowledge_base_arn was not specified but it is required when building KnowledgeBase",
                )
            })?,
            description: self.description,
            role_arn: self.role_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "role_arn",
                    "role_arn was not specified but it is required when building KnowledgeBase",
                )
            })?,
            knowledge_base_configuration: self.knowledge_base_configuration,
            storage_configuration: self.storage_configuration,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building KnowledgeBase",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building KnowledgeBase",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building KnowledgeBase",
                )
            })?,
            failure_reasons: self.failure_reasons,
        })
    }
}
