// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains configurations about a node in the flow.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FlowNode {
    /// <p>A name for the node.</p>
    pub name: ::std::string::String,
    /// <p>The type of node. This value must match the name of the key that you provide in the configuration you provide in the <code>FlowNodeConfiguration</code> field.</p>
    pub r#type: crate::types::FlowNodeType,
    /// <p>Contains configurations for the node.</p>
    pub configuration: ::std::option::Option<crate::types::FlowNodeConfiguration>,
    /// <p>An array of objects, each of which contains information about an input into the node.</p>
    pub inputs: ::std::option::Option<::std::vec::Vec<crate::types::FlowNodeInput>>,
    /// <p>A list of objects, each of which contains information about an output from the node.</p>
    pub outputs: ::std::option::Option<::std::vec::Vec<crate::types::FlowNodeOutput>>,
}
impl FlowNode {
    /// <p>A name for the node.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The type of node. This value must match the name of the key that you provide in the configuration you provide in the <code>FlowNodeConfiguration</code> field.</p>
    pub fn r#type(&self) -> &crate::types::FlowNodeType {
        &self.r#type
    }
    /// <p>Contains configurations for the node.</p>
    pub fn configuration(&self) -> ::std::option::Option<&crate::types::FlowNodeConfiguration> {
        self.configuration.as_ref()
    }
    /// <p>An array of objects, each of which contains information about an input into the node.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.inputs.is_none()`.
    pub fn inputs(&self) -> &[crate::types::FlowNodeInput] {
        self.inputs.as_deref().unwrap_or_default()
    }
    /// <p>A list of objects, each of which contains information about an output from the node.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.outputs.is_none()`.
    pub fn outputs(&self) -> &[crate::types::FlowNodeOutput] {
        self.outputs.as_deref().unwrap_or_default()
    }
}
impl FlowNode {
    /// Creates a new builder-style object to manufacture [`FlowNode`](crate::types::FlowNode).
    pub fn builder() -> crate::types::builders::FlowNodeBuilder {
        crate::types::builders::FlowNodeBuilder::default()
    }
}

/// A builder for [`FlowNode`](crate::types::FlowNode).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct FlowNodeBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::FlowNodeType>,
    pub(crate) configuration: ::std::option::Option<crate::types::FlowNodeConfiguration>,
    pub(crate) inputs: ::std::option::Option<::std::vec::Vec<crate::types::FlowNodeInput>>,
    pub(crate) outputs: ::std::option::Option<::std::vec::Vec<crate::types::FlowNodeOutput>>,
}
impl FlowNodeBuilder {
    /// <p>A name for the node.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the node.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the node.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The type of node. This value must match the name of the key that you provide in the configuration you provide in the <code>FlowNodeConfiguration</code> field.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::FlowNodeType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of node. This value must match the name of the key that you provide in the configuration you provide in the <code>FlowNodeConfiguration</code> field.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::FlowNodeType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of node. This value must match the name of the key that you provide in the configuration you provide in the <code>FlowNodeConfiguration</code> field.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::FlowNodeType> {
        &self.r#type
    }
    /// <p>Contains configurations for the node.</p>
    pub fn configuration(mut self, input: crate::types::FlowNodeConfiguration) -> Self {
        self.configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains configurations for the node.</p>
    pub fn set_configuration(mut self, input: ::std::option::Option<crate::types::FlowNodeConfiguration>) -> Self {
        self.configuration = input;
        self
    }
    /// <p>Contains configurations for the node.</p>
    pub fn get_configuration(&self) -> &::std::option::Option<crate::types::FlowNodeConfiguration> {
        &self.configuration
    }
    /// Appends an item to `inputs`.
    ///
    /// To override the contents of this collection use [`set_inputs`](Self::set_inputs).
    ///
    /// <p>An array of objects, each of which contains information about an input into the node.</p>
    pub fn inputs(mut self, input: crate::types::FlowNodeInput) -> Self {
        let mut v = self.inputs.unwrap_or_default();
        v.push(input);
        self.inputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of objects, each of which contains information about an input into the node.</p>
    pub fn set_inputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FlowNodeInput>>) -> Self {
        self.inputs = input;
        self
    }
    /// <p>An array of objects, each of which contains information about an input into the node.</p>
    pub fn get_inputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FlowNodeInput>> {
        &self.inputs
    }
    /// Appends an item to `outputs`.
    ///
    /// To override the contents of this collection use [`set_outputs`](Self::set_outputs).
    ///
    /// <p>A list of objects, each of which contains information about an output from the node.</p>
    pub fn outputs(mut self, input: crate::types::FlowNodeOutput) -> Self {
        let mut v = self.outputs.unwrap_or_default();
        v.push(input);
        self.outputs = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of objects, each of which contains information about an output from the node.</p>
    pub fn set_outputs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::FlowNodeOutput>>) -> Self {
        self.outputs = input;
        self
    }
    /// <p>A list of objects, each of which contains information about an output from the node.</p>
    pub fn get_outputs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::FlowNodeOutput>> {
        &self.outputs
    }
    /// Consumes the builder and constructs a [`FlowNode`](crate::types::FlowNode).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::FlowNodeBuilder::name)
    /// - [`r#type`](crate::types::builders::FlowNodeBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::FlowNode, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::FlowNode {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building FlowNode",
                )
            })?,
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building FlowNode",
                )
            })?,
            configuration: self.configuration,
            inputs: self.inputs,
            outputs: self.outputs,
        })
    }
}
