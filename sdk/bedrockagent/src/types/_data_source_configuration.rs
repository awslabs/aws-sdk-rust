// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The connection configuration for the data source.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DataSourceConfiguration {
    /// <p>The type of data source.</p>
    pub r#type: crate::types::DataSourceType,
    /// <p>The configuration information to connect to Amazon S3 as your data source.</p>
    pub s3_configuration: ::std::option::Option<crate::types::S3DataSourceConfiguration>,
    /// <p>The configuration of web URLs to crawl for your data source. You should be authorized to crawl the URLs.</p><note>
    /// <p>Crawling web URLs as your data source is in preview release and is subject to change.</p>
    /// </note>
    pub web_configuration: ::std::option::Option<crate::types::WebDataSourceConfiguration>,
    /// <p>The configuration information to connect to Confluence as your data source.</p><note>
    /// <p>Confluence data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub confluence_configuration: ::std::option::Option<crate::types::ConfluenceDataSourceConfiguration>,
    /// <p>The configuration information to connect to Salesforce as your data source.</p><note>
    /// <p>Salesforce data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub salesforce_configuration: ::std::option::Option<crate::types::SalesforceDataSourceConfiguration>,
    /// <p>The configuration information to connect to SharePoint as your data source.</p><note>
    /// <p>SharePoint data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub share_point_configuration: ::std::option::Option<crate::types::SharePointDataSourceConfiguration>,
}
impl DataSourceConfiguration {
    /// <p>The type of data source.</p>
    pub fn r#type(&self) -> &crate::types::DataSourceType {
        &self.r#type
    }
    /// <p>The configuration information to connect to Amazon S3 as your data source.</p>
    pub fn s3_configuration(&self) -> ::std::option::Option<&crate::types::S3DataSourceConfiguration> {
        self.s3_configuration.as_ref()
    }
    /// <p>The configuration of web URLs to crawl for your data source. You should be authorized to crawl the URLs.</p><note>
    /// <p>Crawling web URLs as your data source is in preview release and is subject to change.</p>
    /// </note>
    pub fn web_configuration(&self) -> ::std::option::Option<&crate::types::WebDataSourceConfiguration> {
        self.web_configuration.as_ref()
    }
    /// <p>The configuration information to connect to Confluence as your data source.</p><note>
    /// <p>Confluence data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn confluence_configuration(&self) -> ::std::option::Option<&crate::types::ConfluenceDataSourceConfiguration> {
        self.confluence_configuration.as_ref()
    }
    /// <p>The configuration information to connect to Salesforce as your data source.</p><note>
    /// <p>Salesforce data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn salesforce_configuration(&self) -> ::std::option::Option<&crate::types::SalesforceDataSourceConfiguration> {
        self.salesforce_configuration.as_ref()
    }
    /// <p>The configuration information to connect to SharePoint as your data source.</p><note>
    /// <p>SharePoint data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn share_point_configuration(&self) -> ::std::option::Option<&crate::types::SharePointDataSourceConfiguration> {
        self.share_point_configuration.as_ref()
    }
}
impl DataSourceConfiguration {
    /// Creates a new builder-style object to manufacture [`DataSourceConfiguration`](crate::types::DataSourceConfiguration).
    pub fn builder() -> crate::types::builders::DataSourceConfigurationBuilder {
        crate::types::builders::DataSourceConfigurationBuilder::default()
    }
}

/// A builder for [`DataSourceConfiguration`](crate::types::DataSourceConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct DataSourceConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::DataSourceType>,
    pub(crate) s3_configuration: ::std::option::Option<crate::types::S3DataSourceConfiguration>,
    pub(crate) web_configuration: ::std::option::Option<crate::types::WebDataSourceConfiguration>,
    pub(crate) confluence_configuration: ::std::option::Option<crate::types::ConfluenceDataSourceConfiguration>,
    pub(crate) salesforce_configuration: ::std::option::Option<crate::types::SalesforceDataSourceConfiguration>,
    pub(crate) share_point_configuration: ::std::option::Option<crate::types::SharePointDataSourceConfiguration>,
}
impl DataSourceConfigurationBuilder {
    /// <p>The type of data source.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::DataSourceType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of data source.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::DataSourceType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of data source.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::DataSourceType> {
        &self.r#type
    }
    /// <p>The configuration information to connect to Amazon S3 as your data source.</p>
    pub fn s3_configuration(mut self, input: crate::types::S3DataSourceConfiguration) -> Self {
        self.s3_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information to connect to Amazon S3 as your data source.</p>
    pub fn set_s3_configuration(mut self, input: ::std::option::Option<crate::types::S3DataSourceConfiguration>) -> Self {
        self.s3_configuration = input;
        self
    }
    /// <p>The configuration information to connect to Amazon S3 as your data source.</p>
    pub fn get_s3_configuration(&self) -> &::std::option::Option<crate::types::S3DataSourceConfiguration> {
        &self.s3_configuration
    }
    /// <p>The configuration of web URLs to crawl for your data source. You should be authorized to crawl the URLs.</p><note>
    /// <p>Crawling web URLs as your data source is in preview release and is subject to change.</p>
    /// </note>
    pub fn web_configuration(mut self, input: crate::types::WebDataSourceConfiguration) -> Self {
        self.web_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration of web URLs to crawl for your data source. You should be authorized to crawl the URLs.</p><note>
    /// <p>Crawling web URLs as your data source is in preview release and is subject to change.</p>
    /// </note>
    pub fn set_web_configuration(mut self, input: ::std::option::Option<crate::types::WebDataSourceConfiguration>) -> Self {
        self.web_configuration = input;
        self
    }
    /// <p>The configuration of web URLs to crawl for your data source. You should be authorized to crawl the URLs.</p><note>
    /// <p>Crawling web URLs as your data source is in preview release and is subject to change.</p>
    /// </note>
    pub fn get_web_configuration(&self) -> &::std::option::Option<crate::types::WebDataSourceConfiguration> {
        &self.web_configuration
    }
    /// <p>The configuration information to connect to Confluence as your data source.</p><note>
    /// <p>Confluence data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn confluence_configuration(mut self, input: crate::types::ConfluenceDataSourceConfiguration) -> Self {
        self.confluence_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information to connect to Confluence as your data source.</p><note>
    /// <p>Confluence data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn set_confluence_configuration(mut self, input: ::std::option::Option<crate::types::ConfluenceDataSourceConfiguration>) -> Self {
        self.confluence_configuration = input;
        self
    }
    /// <p>The configuration information to connect to Confluence as your data source.</p><note>
    /// <p>Confluence data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn get_confluence_configuration(&self) -> &::std::option::Option<crate::types::ConfluenceDataSourceConfiguration> {
        &self.confluence_configuration
    }
    /// <p>The configuration information to connect to Salesforce as your data source.</p><note>
    /// <p>Salesforce data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn salesforce_configuration(mut self, input: crate::types::SalesforceDataSourceConfiguration) -> Self {
        self.salesforce_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information to connect to Salesforce as your data source.</p><note>
    /// <p>Salesforce data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn set_salesforce_configuration(mut self, input: ::std::option::Option<crate::types::SalesforceDataSourceConfiguration>) -> Self {
        self.salesforce_configuration = input;
        self
    }
    /// <p>The configuration information to connect to Salesforce as your data source.</p><note>
    /// <p>Salesforce data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn get_salesforce_configuration(&self) -> &::std::option::Option<crate::types::SalesforceDataSourceConfiguration> {
        &self.salesforce_configuration
    }
    /// <p>The configuration information to connect to SharePoint as your data source.</p><note>
    /// <p>SharePoint data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn share_point_configuration(mut self, input: crate::types::SharePointDataSourceConfiguration) -> Self {
        self.share_point_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The configuration information to connect to SharePoint as your data source.</p><note>
    /// <p>SharePoint data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn set_share_point_configuration(mut self, input: ::std::option::Option<crate::types::SharePointDataSourceConfiguration>) -> Self {
        self.share_point_configuration = input;
        self
    }
    /// <p>The configuration information to connect to SharePoint as your data source.</p><note>
    /// <p>SharePoint data source connector is in preview release and is subject to change.</p>
    /// </note>
    pub fn get_share_point_configuration(&self) -> &::std::option::Option<crate::types::SharePointDataSourceConfiguration> {
        &self.share_point_configuration
    }
    /// Consumes the builder and constructs a [`DataSourceConfiguration`](crate::types::DataSourceConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::DataSourceConfigurationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::DataSourceConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DataSourceConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building DataSourceConfiguration",
                )
            })?,
            s3_configuration: self.s3_configuration,
            web_configuration: self.web_configuration,
            confluence_configuration: self.confluence_configuration,
            salesforce_configuration: self.salesforce_configuration,
            share_point_configuration: self.share_point_configuration,
        })
    }
}
