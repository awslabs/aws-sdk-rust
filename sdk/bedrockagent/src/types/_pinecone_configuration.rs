// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the storage configuration of the knowledge base in Pinecone. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/knowledge-base-setup-pinecone.html">Create a vector index in Pinecone</a>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PineconeConfiguration {
    /// <p>The endpoint URL for your index management page.</p>
    pub connection_string: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that is linked to your Pinecone API key.</p>
    pub credentials_secret_arn: ::std::string::String,
    /// <p>The namespace to be used to write new data to your database.</p>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub field_mapping: ::std::option::Option<crate::types::PineconeFieldMapping>,
}
impl PineconeConfiguration {
    /// <p>The endpoint URL for your index management page.</p>
    pub fn connection_string(&self) -> &str {
        use std::ops::Deref;
        self.connection_string.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that is linked to your Pinecone API key.</p>
    pub fn credentials_secret_arn(&self) -> &str {
        use std::ops::Deref;
        self.credentials_secret_arn.deref()
    }
    /// <p>The namespace to be used to write new data to your database.</p>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn field_mapping(&self) -> ::std::option::Option<&crate::types::PineconeFieldMapping> {
        self.field_mapping.as_ref()
    }
}
impl PineconeConfiguration {
    /// Creates a new builder-style object to manufacture [`PineconeConfiguration`](crate::types::PineconeConfiguration).
    pub fn builder() -> crate::types::builders::PineconeConfigurationBuilder {
        crate::types::builders::PineconeConfigurationBuilder::default()
    }
}

/// A builder for [`PineconeConfiguration`](crate::types::PineconeConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PineconeConfigurationBuilder {
    pub(crate) connection_string: ::std::option::Option<::std::string::String>,
    pub(crate) credentials_secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) field_mapping: ::std::option::Option<crate::types::PineconeFieldMapping>,
}
impl PineconeConfigurationBuilder {
    /// <p>The endpoint URL for your index management page.</p>
    /// This field is required.
    pub fn connection_string(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.connection_string = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The endpoint URL for your index management page.</p>
    pub fn set_connection_string(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.connection_string = input;
        self
    }
    /// <p>The endpoint URL for your index management page.</p>
    pub fn get_connection_string(&self) -> &::std::option::Option<::std::string::String> {
        &self.connection_string
    }
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that is linked to your Pinecone API key.</p>
    /// This field is required.
    pub fn credentials_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.credentials_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that is linked to your Pinecone API key.</p>
    pub fn set_credentials_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.credentials_secret_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the secret that you created in Secrets Manager that is linked to your Pinecone API key.</p>
    pub fn get_credentials_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.credentials_secret_arn
    }
    /// <p>The namespace to be used to write new data to your database.</p>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace to be used to write new data to your database.</p>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace to be used to write new data to your database.</p>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    /// This field is required.
    pub fn field_mapping(mut self, input: crate::types::PineconeFieldMapping) -> Self {
        self.field_mapping = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn set_field_mapping(mut self, input: ::std::option::Option<crate::types::PineconeFieldMapping>) -> Self {
        self.field_mapping = input;
        self
    }
    /// <p>Contains the names of the fields to which to map information about the vector store.</p>
    pub fn get_field_mapping(&self) -> &::std::option::Option<crate::types::PineconeFieldMapping> {
        &self.field_mapping
    }
    /// Consumes the builder and constructs a [`PineconeConfiguration`](crate::types::PineconeConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`connection_string`](crate::types::builders::PineconeConfigurationBuilder::connection_string)
    /// - [`credentials_secret_arn`](crate::types::builders::PineconeConfigurationBuilder::credentials_secret_arn)
    pub fn build(self) -> ::std::result::Result<crate::types::PineconeConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PineconeConfiguration {
            connection_string: self.connection_string.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "connection_string",
                    "connection_string was not specified but it is required when building PineconeConfiguration",
                )
            })?,
            credentials_secret_arn: self.credentials_secret_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "credentials_secret_arn",
                    "credentials_secret_arn was not specified but it is required when building PineconeConfiguration",
                )
            })?,
            namespace: self.namespace,
            field_mapping: self.field_mapping,
        })
    }
}
