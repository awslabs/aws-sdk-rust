// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about an alias of an agent.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AgentAlias {
    /// <p>The unique identifier of the agent.</p>
    pub agent_id: ::std::string::String,
    /// <p>The unique identifier of the alias of the agent.</p>
    pub agent_alias_id: ::std::string::String,
    /// <p>The name of the alias of the agent.</p>
    pub agent_alias_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the alias of the agent.</p>
    pub agent_alias_arn: ::std::string::String,
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub client_token: ::std::option::Option<::std::string::String>,
    /// <p>The description of the alias of the agent.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Contains details about the routing configuration of the alias.</p>
    pub routing_configuration: ::std::vec::Vec<crate::types::AgentAliasRoutingConfigurationListItem>,
    /// <p>The time at which the alias of the agent was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The time at which the alias was last updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>Contains details about the history of the alias.</p>
    pub agent_alias_history_events: ::std::option::Option<::std::vec::Vec<crate::types::AgentAliasHistoryEvent>>,
    /// <p>The status of the alias of the agent and whether it is ready for use. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The agent alias is being created.</p></li>
    /// <li>
    /// <p>PREPARED – The agent alias is finished being created or updated and is ready to be invoked.</p></li>
    /// <li>
    /// <p>FAILED – The agent alias API operation failed.</p></li>
    /// <li>
    /// <p>UPDATING – The agent alias is being updated.</p></li>
    /// <li>
    /// <p>DELETING – The agent alias is being deleted.</p></li>
    /// </ul>
    pub agent_alias_status: crate::types::AgentAliasStatus,
}
impl AgentAlias {
    /// <p>The unique identifier of the agent.</p>
    pub fn agent_id(&self) -> &str {
        use std::ops::Deref;
        self.agent_id.deref()
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn agent_alias_id(&self) -> &str {
        use std::ops::Deref;
        self.agent_alias_id.deref()
    }
    /// <p>The name of the alias of the agent.</p>
    pub fn agent_alias_name(&self) -> &str {
        use std::ops::Deref;
        self.agent_alias_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the alias of the agent.</p>
    pub fn agent_alias_arn(&self) -> &str {
        use std::ops::Deref;
        self.agent_alias_arn.deref()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(&self) -> ::std::option::Option<&str> {
        self.client_token.as_deref()
    }
    /// <p>The description of the alias of the agent.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Contains details about the routing configuration of the alias.</p>
    pub fn routing_configuration(&self) -> &[crate::types::AgentAliasRoutingConfigurationListItem] {
        use std::ops::Deref;
        self.routing_configuration.deref()
    }
    /// <p>The time at which the alias of the agent was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The time at which the alias was last updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>Contains details about the history of the alias.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.agent_alias_history_events.is_none()`.
    pub fn agent_alias_history_events(&self) -> &[crate::types::AgentAliasHistoryEvent] {
        self.agent_alias_history_events.as_deref().unwrap_or_default()
    }
    /// <p>The status of the alias of the agent and whether it is ready for use. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The agent alias is being created.</p></li>
    /// <li>
    /// <p>PREPARED – The agent alias is finished being created or updated and is ready to be invoked.</p></li>
    /// <li>
    /// <p>FAILED – The agent alias API operation failed.</p></li>
    /// <li>
    /// <p>UPDATING – The agent alias is being updated.</p></li>
    /// <li>
    /// <p>DELETING – The agent alias is being deleted.</p></li>
    /// </ul>
    pub fn agent_alias_status(&self) -> &crate::types::AgentAliasStatus {
        &self.agent_alias_status
    }
}
impl AgentAlias {
    /// Creates a new builder-style object to manufacture [`AgentAlias`](crate::types::AgentAlias).
    pub fn builder() -> crate::types::builders::AgentAliasBuilder {
        crate::types::builders::AgentAliasBuilder::default()
    }
}

/// A builder for [`AgentAlias`](crate::types::AgentAlias).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AgentAliasBuilder {
    pub(crate) agent_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_alias_id: ::std::option::Option<::std::string::String>,
    pub(crate) agent_alias_name: ::std::option::Option<::std::string::String>,
    pub(crate) agent_alias_arn: ::std::option::Option<::std::string::String>,
    pub(crate) client_token: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) routing_configuration: ::std::option::Option<::std::vec::Vec<crate::types::AgentAliasRoutingConfigurationListItem>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) agent_alias_history_events: ::std::option::Option<::std::vec::Vec<crate::types::AgentAliasHistoryEvent>>,
    pub(crate) agent_alias_status: ::std::option::Option<crate::types::AgentAliasStatus>,
}
impl AgentAliasBuilder {
    /// <p>The unique identifier of the agent.</p>
    /// This field is required.
    pub fn agent_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn set_agent_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_id = input;
        self
    }
    /// <p>The unique identifier of the agent.</p>
    pub fn get_agent_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_id
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    /// This field is required.
    pub fn agent_alias_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_alias_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn set_agent_alias_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_alias_id = input;
        self
    }
    /// <p>The unique identifier of the alias of the agent.</p>
    pub fn get_agent_alias_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_alias_id
    }
    /// <p>The name of the alias of the agent.</p>
    /// This field is required.
    pub fn agent_alias_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_alias_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the alias of the agent.</p>
    pub fn set_agent_alias_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_alias_name = input;
        self
    }
    /// <p>The name of the alias of the agent.</p>
    pub fn get_agent_alias_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_alias_name
    }
    /// <p>The Amazon Resource Name (ARN) of the alias of the agent.</p>
    /// This field is required.
    pub fn agent_alias_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_alias_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the alias of the agent.</p>
    pub fn set_agent_alias_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_alias_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the alias of the agent.</p>
    pub fn get_agent_alias_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_alias_arn
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_token
    }
    /// <p>The description of the alias of the agent.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the alias of the agent.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the alias of the agent.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// Appends an item to `routing_configuration`.
    ///
    /// To override the contents of this collection use [`set_routing_configuration`](Self::set_routing_configuration).
    ///
    /// <p>Contains details about the routing configuration of the alias.</p>
    pub fn routing_configuration(mut self, input: crate::types::AgentAliasRoutingConfigurationListItem) -> Self {
        let mut v = self.routing_configuration.unwrap_or_default();
        v.push(input);
        self.routing_configuration = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains details about the routing configuration of the alias.</p>
    pub fn set_routing_configuration(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::AgentAliasRoutingConfigurationListItem>>,
    ) -> Self {
        self.routing_configuration = input;
        self
    }
    /// <p>Contains details about the routing configuration of the alias.</p>
    pub fn get_routing_configuration(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AgentAliasRoutingConfigurationListItem>> {
        &self.routing_configuration
    }
    /// <p>The time at which the alias of the agent was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the alias of the agent was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time at which the alias of the agent was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The time at which the alias was last updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time at which the alias was last updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The time at which the alias was last updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `agent_alias_history_events`.
    ///
    /// To override the contents of this collection use [`set_agent_alias_history_events`](Self::set_agent_alias_history_events).
    ///
    /// <p>Contains details about the history of the alias.</p>
    pub fn agent_alias_history_events(mut self, input: crate::types::AgentAliasHistoryEvent) -> Self {
        let mut v = self.agent_alias_history_events.unwrap_or_default();
        v.push(input);
        self.agent_alias_history_events = ::std::option::Option::Some(v);
        self
    }
    /// <p>Contains details about the history of the alias.</p>
    pub fn set_agent_alias_history_events(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::AgentAliasHistoryEvent>>) -> Self {
        self.agent_alias_history_events = input;
        self
    }
    /// <p>Contains details about the history of the alias.</p>
    pub fn get_agent_alias_history_events(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::AgentAliasHistoryEvent>> {
        &self.agent_alias_history_events
    }
    /// <p>The status of the alias of the agent and whether it is ready for use. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The agent alias is being created.</p></li>
    /// <li>
    /// <p>PREPARED – The agent alias is finished being created or updated and is ready to be invoked.</p></li>
    /// <li>
    /// <p>FAILED – The agent alias API operation failed.</p></li>
    /// <li>
    /// <p>UPDATING – The agent alias is being updated.</p></li>
    /// <li>
    /// <p>DELETING – The agent alias is being deleted.</p></li>
    /// </ul>
    /// This field is required.
    pub fn agent_alias_status(mut self, input: crate::types::AgentAliasStatus) -> Self {
        self.agent_alias_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the alias of the agent and whether it is ready for use. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The agent alias is being created.</p></li>
    /// <li>
    /// <p>PREPARED – The agent alias is finished being created or updated and is ready to be invoked.</p></li>
    /// <li>
    /// <p>FAILED – The agent alias API operation failed.</p></li>
    /// <li>
    /// <p>UPDATING – The agent alias is being updated.</p></li>
    /// <li>
    /// <p>DELETING – The agent alias is being deleted.</p></li>
    /// </ul>
    pub fn set_agent_alias_status(mut self, input: ::std::option::Option<crate::types::AgentAliasStatus>) -> Self {
        self.agent_alias_status = input;
        self
    }
    /// <p>The status of the alias of the agent and whether it is ready for use. The following statuses are possible:</p>
    /// <ul>
    /// <li>
    /// <p>CREATING – The agent alias is being created.</p></li>
    /// <li>
    /// <p>PREPARED – The agent alias is finished being created or updated and is ready to be invoked.</p></li>
    /// <li>
    /// <p>FAILED – The agent alias API operation failed.</p></li>
    /// <li>
    /// <p>UPDATING – The agent alias is being updated.</p></li>
    /// <li>
    /// <p>DELETING – The agent alias is being deleted.</p></li>
    /// </ul>
    pub fn get_agent_alias_status(&self) -> &::std::option::Option<crate::types::AgentAliasStatus> {
        &self.agent_alias_status
    }
    /// Consumes the builder and constructs a [`AgentAlias`](crate::types::AgentAlias).
    /// This method will fail if any of the following fields are not set:
    /// - [`agent_id`](crate::types::builders::AgentAliasBuilder::agent_id)
    /// - [`agent_alias_id`](crate::types::builders::AgentAliasBuilder::agent_alias_id)
    /// - [`agent_alias_name`](crate::types::builders::AgentAliasBuilder::agent_alias_name)
    /// - [`agent_alias_arn`](crate::types::builders::AgentAliasBuilder::agent_alias_arn)
    /// - [`routing_configuration`](crate::types::builders::AgentAliasBuilder::routing_configuration)
    /// - [`created_at`](crate::types::builders::AgentAliasBuilder::created_at)
    /// - [`updated_at`](crate::types::builders::AgentAliasBuilder::updated_at)
    /// - [`agent_alias_status`](crate::types::builders::AgentAliasBuilder::agent_alias_status)
    pub fn build(self) -> ::std::result::Result<crate::types::AgentAlias, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AgentAlias {
            agent_id: self.agent_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_id",
                    "agent_id was not specified but it is required when building AgentAlias",
                )
            })?,
            agent_alias_id: self.agent_alias_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_alias_id",
                    "agent_alias_id was not specified but it is required when building AgentAlias",
                )
            })?,
            agent_alias_name: self.agent_alias_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_alias_name",
                    "agent_alias_name was not specified but it is required when building AgentAlias",
                )
            })?,
            agent_alias_arn: self.agent_alias_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_alias_arn",
                    "agent_alias_arn was not specified but it is required when building AgentAlias",
                )
            })?,
            client_token: self.client_token,
            description: self.description,
            routing_configuration: self.routing_configuration.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "routing_configuration",
                    "routing_configuration was not specified but it is required when building AgentAlias",
                )
            })?,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building AgentAlias",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building AgentAlias",
                )
            })?,
            agent_alias_history_events: self.agent_alias_history_events,
            agent_alias_status: self.agent_alias_status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "agent_alias_status",
                    "agent_alias_status was not specified but it is required when building AgentAlias",
                )
            })?,
        })
    }
}
