// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `FlowNodeType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let flownodetype = unimplemented!();
/// match flownodetype {
///     FlowNodeType::Agent => { /* ... */ },
///     FlowNodeType::Collector => { /* ... */ },
///     FlowNodeType::Condition => { /* ... */ },
///     FlowNodeType::InlineCode => { /* ... */ },
///     FlowNodeType::Input => { /* ... */ },
///     FlowNodeType::Iterator => { /* ... */ },
///     FlowNodeType::KnowledgeBase => { /* ... */ },
///     FlowNodeType::LambdaFunction => { /* ... */ },
///     FlowNodeType::Lex => { /* ... */ },
///     FlowNodeType::Loop => { /* ... */ },
///     FlowNodeType::LoopController => { /* ... */ },
///     FlowNodeType::LoopInput => { /* ... */ },
///     FlowNodeType::Output => { /* ... */ },
///     FlowNodeType::Prompt => { /* ... */ },
///     FlowNodeType::Retrieval => { /* ... */ },
///     FlowNodeType::Storage => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `flownodetype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `FlowNodeType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `FlowNodeType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `FlowNodeType::NewFeature` is defined.
/// Specifically, when `flownodetype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `FlowNodeType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum FlowNodeType {
    #[allow(missing_docs)] // documentation missing in model
    Agent,
    #[allow(missing_docs)] // documentation missing in model
    Collector,
    #[allow(missing_docs)] // documentation missing in model
    Condition,
    #[allow(missing_docs)] // documentation missing in model
    InlineCode,
    #[allow(missing_docs)] // documentation missing in model
    Input,
    #[allow(missing_docs)] // documentation missing in model
    Iterator,
    #[allow(missing_docs)] // documentation missing in model
    KnowledgeBase,
    #[allow(missing_docs)] // documentation missing in model
    LambdaFunction,
    #[allow(missing_docs)] // documentation missing in model
    Lex,
    #[allow(missing_docs)] // documentation missing in model
    Loop,
    #[allow(missing_docs)] // documentation missing in model
    LoopController,
    #[allow(missing_docs)] // documentation missing in model
    LoopInput,
    #[allow(missing_docs)] // documentation missing in model
    Output,
    #[allow(missing_docs)] // documentation missing in model
    Prompt,
    #[allow(missing_docs)] // documentation missing in model
    Retrieval,
    #[allow(missing_docs)] // documentation missing in model
    Storage,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for FlowNodeType {
    fn from(s: &str) -> Self {
        match s {
            "Agent" => FlowNodeType::Agent,
            "Collector" => FlowNodeType::Collector,
            "Condition" => FlowNodeType::Condition,
            "InlineCode" => FlowNodeType::InlineCode,
            "Input" => FlowNodeType::Input,
            "Iterator" => FlowNodeType::Iterator,
            "KnowledgeBase" => FlowNodeType::KnowledgeBase,
            "LambdaFunction" => FlowNodeType::LambdaFunction,
            "Lex" => FlowNodeType::Lex,
            "Loop" => FlowNodeType::Loop,
            "LoopController" => FlowNodeType::LoopController,
            "LoopInput" => FlowNodeType::LoopInput,
            "Output" => FlowNodeType::Output,
            "Prompt" => FlowNodeType::Prompt,
            "Retrieval" => FlowNodeType::Retrieval,
            "Storage" => FlowNodeType::Storage,
            other => FlowNodeType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for FlowNodeType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(FlowNodeType::from(s))
    }
}
impl FlowNodeType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            FlowNodeType::Agent => "Agent",
            FlowNodeType::Collector => "Collector",
            FlowNodeType::Condition => "Condition",
            FlowNodeType::InlineCode => "InlineCode",
            FlowNodeType::Input => "Input",
            FlowNodeType::Iterator => "Iterator",
            FlowNodeType::KnowledgeBase => "KnowledgeBase",
            FlowNodeType::LambdaFunction => "LambdaFunction",
            FlowNodeType::Lex => "Lex",
            FlowNodeType::Loop => "Loop",
            FlowNodeType::LoopController => "LoopController",
            FlowNodeType::LoopInput => "LoopInput",
            FlowNodeType::Output => "Output",
            FlowNodeType::Prompt => "Prompt",
            FlowNodeType::Retrieval => "Retrieval",
            FlowNodeType::Storage => "Storage",
            FlowNodeType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Agent",
            "Collector",
            "Condition",
            "InlineCode",
            "Input",
            "Iterator",
            "KnowledgeBase",
            "LambdaFunction",
            "Lex",
            "Loop",
            "LoopController",
            "LoopInput",
            "Output",
            "Prompt",
            "Retrieval",
            "Storage",
        ]
    }
}
impl ::std::convert::AsRef<str> for FlowNodeType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl FlowNodeType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for FlowNodeType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            FlowNodeType::Agent => write!(f, "Agent"),
            FlowNodeType::Collector => write!(f, "Collector"),
            FlowNodeType::Condition => write!(f, "Condition"),
            FlowNodeType::InlineCode => write!(f, "InlineCode"),
            FlowNodeType::Input => write!(f, "Input"),
            FlowNodeType::Iterator => write!(f, "Iterator"),
            FlowNodeType::KnowledgeBase => write!(f, "KnowledgeBase"),
            FlowNodeType::LambdaFunction => write!(f, "LambdaFunction"),
            FlowNodeType::Lex => write!(f, "Lex"),
            FlowNodeType::Loop => write!(f, "Loop"),
            FlowNodeType::LoopController => write!(f, "LoopController"),
            FlowNodeType::LoopInput => write!(f, "LoopInput"),
            FlowNodeType::Output => write!(f, "Output"),
            FlowNodeType::Prompt => write!(f, "Prompt"),
            FlowNodeType::Retrieval => write!(f, "Retrieval"),
            FlowNodeType::Storage => write!(f, "Storage"),
            FlowNodeType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
