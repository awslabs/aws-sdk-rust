// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the embeddings configuration of the knowledge base.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct KnowledgeBaseConfiguration {
    /// <p>The type of data that the data source is converted into for the knowledge base.</p>
    pub r#type: crate::types::KnowledgeBaseType,
    /// <p>Contains details about the embeddings model that'sused to convert the data source.</p>
    pub vector_knowledge_base_configuration: ::std::option::Option<crate::types::VectorKnowledgeBaseConfiguration>,
}
impl KnowledgeBaseConfiguration {
    /// <p>The type of data that the data source is converted into for the knowledge base.</p>
    pub fn r#type(&self) -> &crate::types::KnowledgeBaseType {
        &self.r#type
    }
    /// <p>Contains details about the embeddings model that'sused to convert the data source.</p>
    pub fn vector_knowledge_base_configuration(&self) -> ::std::option::Option<&crate::types::VectorKnowledgeBaseConfiguration> {
        self.vector_knowledge_base_configuration.as_ref()
    }
}
impl KnowledgeBaseConfiguration {
    /// Creates a new builder-style object to manufacture [`KnowledgeBaseConfiguration`](crate::types::KnowledgeBaseConfiguration).
    pub fn builder() -> crate::types::builders::KnowledgeBaseConfigurationBuilder {
        crate::types::builders::KnowledgeBaseConfigurationBuilder::default()
    }
}

/// A builder for [`KnowledgeBaseConfiguration`](crate::types::KnowledgeBaseConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct KnowledgeBaseConfigurationBuilder {
    pub(crate) r#type: ::std::option::Option<crate::types::KnowledgeBaseType>,
    pub(crate) vector_knowledge_base_configuration: ::std::option::Option<crate::types::VectorKnowledgeBaseConfiguration>,
}
impl KnowledgeBaseConfigurationBuilder {
    /// <p>The type of data that the data source is converted into for the knowledge base.</p>
    /// This field is required.
    pub fn r#type(mut self, input: crate::types::KnowledgeBaseType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of data that the data source is converted into for the knowledge base.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::KnowledgeBaseType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The type of data that the data source is converted into for the knowledge base.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::KnowledgeBaseType> {
        &self.r#type
    }
    /// <p>Contains details about the embeddings model that'sused to convert the data source.</p>
    pub fn vector_knowledge_base_configuration(mut self, input: crate::types::VectorKnowledgeBaseConfiguration) -> Self {
        self.vector_knowledge_base_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Contains details about the embeddings model that'sused to convert the data source.</p>
    pub fn set_vector_knowledge_base_configuration(mut self, input: ::std::option::Option<crate::types::VectorKnowledgeBaseConfiguration>) -> Self {
        self.vector_knowledge_base_configuration = input;
        self
    }
    /// <p>Contains details about the embeddings model that'sused to convert the data source.</p>
    pub fn get_vector_knowledge_base_configuration(&self) -> &::std::option::Option<crate::types::VectorKnowledgeBaseConfiguration> {
        &self.vector_knowledge_base_configuration
    }
    /// Consumes the builder and constructs a [`KnowledgeBaseConfiguration`](crate::types::KnowledgeBaseConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`r#type`](crate::types::builders::KnowledgeBaseConfigurationBuilder::type)
    pub fn build(self) -> ::std::result::Result<crate::types::KnowledgeBaseConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::KnowledgeBaseConfiguration {
            r#type: self.r#type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "r#type",
                    "r#type was not specified but it is required when building KnowledgeBaseConfiguration",
                )
            })?,
            vector_knowledge_base_configuration: self.vector_knowledge_base_configuration,
        })
    }
}
