// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Settings for parsing document contents. By default, the service converts the contents of each document into text before splitting it into chunks. To improve processing of PDF files with tables and images, you can configure the data source to convert the pages of text into images and use a model to describe the contents of each page.</p>
/// <p>To use a model to parse PDF documents, set the parsing strategy to <code>BEDROCK_FOUNDATION_MODEL</code> and specify the model or <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/cross-region-inference.html">inference profile</a> to use by ARN. You can also override the default parsing prompt with instructions for how to interpret images and tables in your documents. The following models are supported.</p>
/// <ul>
/// <li>
/// <p>Anthropic Claude 3 Sonnet - <code>anthropic.claude-3-sonnet-20240229-v1:0</code></p></li>
/// <li>
/// <p>Anthropic Claude 3 Haiku - <code>anthropic.claude-3-haiku-20240307-v1:0</code></p></li>
/// </ul>
/// <p>You can get the ARN of a model with the <a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_ListFoundationModels.html">ListFoundationModels</a> action. Standard model usage charges apply for the foundation model parsing strategy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ParsingConfiguration {
    /// <p>The parsing strategy for the data source.</p>
    pub parsing_strategy: crate::types::ParsingStrategy,
    /// <p>Settings for a foundation model used to parse documents for a data source.</p>
    pub bedrock_foundation_model_configuration: ::std::option::Option<crate::types::BedrockFoundationModelConfiguration>,
}
impl ParsingConfiguration {
    /// <p>The parsing strategy for the data source.</p>
    pub fn parsing_strategy(&self) -> &crate::types::ParsingStrategy {
        &self.parsing_strategy
    }
    /// <p>Settings for a foundation model used to parse documents for a data source.</p>
    pub fn bedrock_foundation_model_configuration(&self) -> ::std::option::Option<&crate::types::BedrockFoundationModelConfiguration> {
        self.bedrock_foundation_model_configuration.as_ref()
    }
}
impl ParsingConfiguration {
    /// Creates a new builder-style object to manufacture [`ParsingConfiguration`](crate::types::ParsingConfiguration).
    pub fn builder() -> crate::types::builders::ParsingConfigurationBuilder {
        crate::types::builders::ParsingConfigurationBuilder::default()
    }
}

/// A builder for [`ParsingConfiguration`](crate::types::ParsingConfiguration).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct ParsingConfigurationBuilder {
    pub(crate) parsing_strategy: ::std::option::Option<crate::types::ParsingStrategy>,
    pub(crate) bedrock_foundation_model_configuration: ::std::option::Option<crate::types::BedrockFoundationModelConfiguration>,
}
impl ParsingConfigurationBuilder {
    /// <p>The parsing strategy for the data source.</p>
    /// This field is required.
    pub fn parsing_strategy(mut self, input: crate::types::ParsingStrategy) -> Self {
        self.parsing_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The parsing strategy for the data source.</p>
    pub fn set_parsing_strategy(mut self, input: ::std::option::Option<crate::types::ParsingStrategy>) -> Self {
        self.parsing_strategy = input;
        self
    }
    /// <p>The parsing strategy for the data source.</p>
    pub fn get_parsing_strategy(&self) -> &::std::option::Option<crate::types::ParsingStrategy> {
        &self.parsing_strategy
    }
    /// <p>Settings for a foundation model used to parse documents for a data source.</p>
    pub fn bedrock_foundation_model_configuration(mut self, input: crate::types::BedrockFoundationModelConfiguration) -> Self {
        self.bedrock_foundation_model_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Settings for a foundation model used to parse documents for a data source.</p>
    pub fn set_bedrock_foundation_model_configuration(
        mut self,
        input: ::std::option::Option<crate::types::BedrockFoundationModelConfiguration>,
    ) -> Self {
        self.bedrock_foundation_model_configuration = input;
        self
    }
    /// <p>Settings for a foundation model used to parse documents for a data source.</p>
    pub fn get_bedrock_foundation_model_configuration(&self) -> &::std::option::Option<crate::types::BedrockFoundationModelConfiguration> {
        &self.bedrock_foundation_model_configuration
    }
    /// Consumes the builder and constructs a [`ParsingConfiguration`](crate::types::ParsingConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`parsing_strategy`](crate::types::builders::ParsingConfigurationBuilder::parsing_strategy)
    pub fn build(self) -> ::std::result::Result<crate::types::ParsingConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ParsingConfiguration {
            parsing_strategy: self.parsing_strategy.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "parsing_strategy",
                    "parsing_strategy was not specified but it is required when building ParsingConfiguration",
                )
            })?,
            bedrock_foundation_model_configuration: self.bedrock_foundation_model_configuration,
        })
    }
}
