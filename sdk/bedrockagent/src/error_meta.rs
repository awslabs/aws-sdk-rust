// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>The request is denied because of missing access permissions.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>There was a conflict performing an operation.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>An internal server error occurred. Retry your request.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The specified resource Amazon Resource Name (ARN) was not found. Check the Amazon Resource Name (ARN) and try your request again.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>The number of requests exceeds the service quota. Resubmit your request later.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The number of requests exceeds the limit. Resubmit your request later.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>Input validation failed. Check your request parameters and retry the request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R>
    From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError> for Error {
    fn from(err: crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError) -> Self {
        match err {
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::associate_agent_knowledge_base::AssociateAgentKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent::CreateAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent::CreateAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_agent::CreateAgentError> for Error {
    fn from(err: crate::operation::create_agent::CreateAgentError) -> Self {
        match err {
            crate::operation::create_agent::CreateAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_agent::CreateAgentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_agent::CreateAgentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_agent::CreateAgentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_agent::CreateAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_agent::CreateAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_agent::CreateAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent_action_group::CreateAgentActionGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent_action_group::CreateAgentActionGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_agent_action_group::CreateAgentActionGroupError> for Error {
    fn from(err: crate::operation::create_agent_action_group::CreateAgentActionGroupError) -> Self {
        match err {
            crate::operation::create_agent_action_group::CreateAgentActionGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_agent_action_group::CreateAgentActionGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_agent_action_group::CreateAgentActionGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_agent_action_group::CreateAgentActionGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::create_agent_action_group::CreateAgentActionGroupError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_agent_action_group::CreateAgentActionGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_agent_action_group::CreateAgentActionGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_agent_action_group::CreateAgentActionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent_alias::CreateAgentAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_agent_alias::CreateAgentAliasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_agent_alias::CreateAgentAliasError> for Error {
    fn from(err: crate::operation::create_agent_alias::CreateAgentAliasError) -> Self {
        match err {
            crate::operation::create_agent_alias::CreateAgentAliasError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_agent_alias::CreateAgentAliasError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_agent_alias::CreateAgentAliasError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_agent_alias::CreateAgentAliasError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_agent_alias::CreateAgentAliasError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_agent_alias::CreateAgentAliasError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_agent_alias::CreateAgentAliasError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_agent_alias::CreateAgentAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_data_source::CreateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_data_source::CreateDataSourceError> for Error {
    fn from(err: crate::operation::create_data_source::CreateDataSourceError) -> Self {
        match err {
            crate::operation::create_data_source::CreateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_data_source::CreateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_data_source::CreateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_data_source::CreateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_data_source::CreateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_knowledge_base::CreateKnowledgeBaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_knowledge_base::CreateKnowledgeBaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_knowledge_base::CreateKnowledgeBaseError> for Error {
    fn from(err: crate::operation::create_knowledge_base::CreateKnowledgeBaseError) -> Self {
        match err {
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_knowledge_base::CreateKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent::DeleteAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent::DeleteAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_agent::DeleteAgentError> for Error {
    fn from(err: crate::operation::delete_agent::DeleteAgentError) -> Self {
        match err {
            crate::operation::delete_agent::DeleteAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_agent::DeleteAgentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_agent::DeleteAgentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_agent::DeleteAgentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_agent::DeleteAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_agent::DeleteAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_agent::DeleteAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_action_group::DeleteAgentActionGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_action_group::DeleteAgentActionGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_agent_action_group::DeleteAgentActionGroupError> for Error {
    fn from(err: crate::operation::delete_agent_action_group::DeleteAgentActionGroupError) -> Self {
        match err {
            crate::operation::delete_agent_action_group::DeleteAgentActionGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_agent_action_group::DeleteAgentActionGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_agent_action_group::DeleteAgentActionGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_agent_action_group::DeleteAgentActionGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_agent_action_group::DeleteAgentActionGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_agent_action_group::DeleteAgentActionGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_agent_action_group::DeleteAgentActionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_alias::DeleteAgentAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_alias::DeleteAgentAliasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_agent_alias::DeleteAgentAliasError> for Error {
    fn from(err: crate::operation::delete_agent_alias::DeleteAgentAliasError) -> Self {
        match err {
            crate::operation::delete_agent_alias::DeleteAgentAliasError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_agent_alias::DeleteAgentAliasError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_agent_alias::DeleteAgentAliasError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_agent_alias::DeleteAgentAliasError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_agent_alias::DeleteAgentAliasError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_agent_alias::DeleteAgentAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_version::DeleteAgentVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_agent_version::DeleteAgentVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_agent_version::DeleteAgentVersionError> for Error {
    fn from(err: crate::operation::delete_agent_version::DeleteAgentVersionError) -> Self {
        match err {
            crate::operation::delete_agent_version::DeleteAgentVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_agent_version::DeleteAgentVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_agent_version::DeleteAgentVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_agent_version::DeleteAgentVersionError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_agent_version::DeleteAgentVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_agent_version::DeleteAgentVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_agent_version::DeleteAgentVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_data_source::DeleteDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_data_source::DeleteDataSourceError> for Error {
    fn from(err: crate::operation::delete_data_source::DeleteDataSourceError) -> Self {
        match err {
            crate::operation::delete_data_source::DeleteDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_data_source::DeleteDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError> for Error {
    fn from(err: crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError) -> Self {
        match err {
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_knowledge_base::DeleteKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError,
            R,
        >,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError> for Error {
    fn from(err: crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError) -> Self {
        match err {
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::disassociate_agent_knowledge_base::DisassociateAgentKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent::GetAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent::GetAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_agent::GetAgentError> for Error {
    fn from(err: crate::operation::get_agent::GetAgentError) -> Self {
        match err {
            crate::operation::get_agent::GetAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_agent::GetAgentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_agent::GetAgentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_agent::GetAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_agent::GetAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_agent::GetAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_action_group::GetAgentActionGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_action_group::GetAgentActionGroupError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_agent_action_group::GetAgentActionGroupError> for Error {
    fn from(err: crate::operation::get_agent_action_group::GetAgentActionGroupError) -> Self {
        match err {
            crate::operation::get_agent_action_group::GetAgentActionGroupError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_agent_action_group::GetAgentActionGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_agent_action_group::GetAgentActionGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_agent_action_group::GetAgentActionGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_agent_action_group::GetAgentActionGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_agent_action_group::GetAgentActionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_alias::GetAgentAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_alias::GetAgentAliasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_agent_alias::GetAgentAliasError> for Error {
    fn from(err: crate::operation::get_agent_alias::GetAgentAliasError) -> Self {
        match err {
            crate::operation::get_agent_alias::GetAgentAliasError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_agent_alias::GetAgentAliasError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_agent_alias::GetAgentAliasError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_agent_alias::GetAgentAliasError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_agent_alias::GetAgentAliasError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_agent_alias::GetAgentAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError> for Error {
    fn from(err: crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError) -> Self {
        match err {
            crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_agent_knowledge_base::GetAgentKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_version::GetAgentVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_agent_version::GetAgentVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_agent_version::GetAgentVersionError> for Error {
    fn from(err: crate::operation::get_agent_version::GetAgentVersionError) -> Self {
        match err {
            crate::operation::get_agent_version::GetAgentVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_agent_version::GetAgentVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_agent_version::GetAgentVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_agent_version::GetAgentVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_agent_version::GetAgentVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_agent_version::GetAgentVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_data_source::GetDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_data_source::GetDataSourceError> for Error {
    fn from(err: crate::operation::get_data_source::GetDataSourceError) -> Self {
        match err {
            crate::operation::get_data_source::GetDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_data_source::GetDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_data_source::GetDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_data_source::GetDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_data_source::GetDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_data_source::GetDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ingestion_job::GetIngestionJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_ingestion_job::GetIngestionJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_ingestion_job::GetIngestionJobError> for Error {
    fn from(err: crate::operation::get_ingestion_job::GetIngestionJobError) -> Self {
        match err {
            crate::operation::get_ingestion_job::GetIngestionJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_ingestion_job::GetIngestionJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_ingestion_job::GetIngestionJobError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_ingestion_job::GetIngestionJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_ingestion_job::GetIngestionJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_ingestion_job::GetIngestionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_knowledge_base::GetKnowledgeBaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_knowledge_base::GetKnowledgeBaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::get_knowledge_base::GetKnowledgeBaseError> for Error {
    fn from(err: crate::operation::get_knowledge_base::GetKnowledgeBaseError) -> Self {
        match err {
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_knowledge_base::GetKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_action_groups::ListAgentActionGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_action_groups::ListAgentActionGroupsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_agent_action_groups::ListAgentActionGroupsError> for Error {
    fn from(err: crate::operation::list_agent_action_groups::ListAgentActionGroupsError) -> Self {
        match err {
            crate::operation::list_agent_action_groups::ListAgentActionGroupsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_agent_action_groups::ListAgentActionGroupsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_agent_action_groups::ListAgentActionGroupsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_agent_action_groups::ListAgentActionGroupsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_agent_action_groups::ListAgentActionGroupsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_agent_action_groups::ListAgentActionGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_aliases::ListAgentAliasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_aliases::ListAgentAliasesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_agent_aliases::ListAgentAliasesError> for Error {
    fn from(err: crate::operation::list_agent_aliases::ListAgentAliasesError) -> Self {
        match err {
            crate::operation::list_agent_aliases::ListAgentAliasesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_agent_aliases::ListAgentAliasesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_agent_aliases::ListAgentAliasesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_agent_aliases::ListAgentAliasesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_agent_aliases::ListAgentAliasesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_agent_aliases::ListAgentAliasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError> for Error {
    fn from(err: crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError) -> Self {
        match err {
            crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_agent_knowledge_bases::ListAgentKnowledgeBasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agents::ListAgentsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agents::ListAgentsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_agents::ListAgentsError> for Error {
    fn from(err: crate::operation::list_agents::ListAgentsError) -> Self {
        match err {
            crate::operation::list_agents::ListAgentsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_agents::ListAgentsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_agents::ListAgentsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_agents::ListAgentsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_agents::ListAgentsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_versions::ListAgentVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_agent_versions::ListAgentVersionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_agent_versions::ListAgentVersionsError> for Error {
    fn from(err: crate::operation::list_agent_versions::ListAgentVersionsError) -> Self {
        match err {
            crate::operation::list_agent_versions::ListAgentVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_agent_versions::ListAgentVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_agent_versions::ListAgentVersionsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_agent_versions::ListAgentVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_agent_versions::ListAgentVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_agent_versions::ListAgentVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_data_sources::ListDataSourcesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_data_sources::ListDataSourcesError> for Error {
    fn from(err: crate::operation::list_data_sources::ListDataSourcesError) -> Self {
        match err {
            crate::operation::list_data_sources::ListDataSourcesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_data_sources::ListDataSourcesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ingestion_jobs::ListIngestionJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_ingestion_jobs::ListIngestionJobsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_ingestion_jobs::ListIngestionJobsError> for Error {
    fn from(err: crate::operation::list_ingestion_jobs::ListIngestionJobsError) -> Self {
        match err {
            crate::operation::list_ingestion_jobs::ListIngestionJobsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_ingestion_jobs::ListIngestionJobsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_ingestion_jobs::ListIngestionJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_ingestion_jobs::ListIngestionJobsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_ingestion_jobs::ListIngestionJobsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_ingestion_jobs::ListIngestionJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_knowledge_bases::ListKnowledgeBasesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_knowledge_bases::ListKnowledgeBasesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_knowledge_bases::ListKnowledgeBasesError> for Error {
    fn from(err: crate::operation::list_knowledge_bases::ListKnowledgeBasesError) -> Self {
        match err {
            crate::operation::list_knowledge_bases::ListKnowledgeBasesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_knowledge_bases::ListKnowledgeBasesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_knowledge_bases::ListKnowledgeBasesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_knowledge_bases::ListKnowledgeBasesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_knowledge_bases::ListKnowledgeBasesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::prepare_agent::PrepareAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::prepare_agent::PrepareAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::prepare_agent::PrepareAgentError> for Error {
    fn from(err: crate::operation::prepare_agent::PrepareAgentError) -> Self {
        match err {
            crate::operation::prepare_agent::PrepareAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::prepare_agent::PrepareAgentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::prepare_agent::PrepareAgentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::prepare_agent::PrepareAgentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::prepare_agent::PrepareAgentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::prepare_agent::PrepareAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::prepare_agent::PrepareAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::prepare_agent::PrepareAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_ingestion_job::StartIngestionJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_ingestion_job::StartIngestionJobError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::start_ingestion_job::StartIngestionJobError> for Error {
    fn from(err: crate::operation::start_ingestion_job::StartIngestionJobError) -> Self {
        match err {
            crate::operation::start_ingestion_job::StartIngestionJobError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::start_ingestion_job::StartIngestionJobError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::start_ingestion_job::StartIngestionJobError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::start_ingestion_job::StartIngestionJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::start_ingestion_job::StartIngestionJobError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::start_ingestion_job::StartIngestionJobError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::start_ingestion_job::StartIngestionJobError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::start_ingestion_job::StartIngestionJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent::UpdateAgentError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent::UpdateAgentError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_agent::UpdateAgentError> for Error {
    fn from(err: crate::operation::update_agent::UpdateAgentError) -> Self {
        match err {
            crate::operation::update_agent::UpdateAgentError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_agent::UpdateAgentError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_agent::UpdateAgentError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_agent::UpdateAgentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_agent::UpdateAgentError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_agent::UpdateAgentError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_agent::UpdateAgentError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_agent::UpdateAgentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_action_group::UpdateAgentActionGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_action_group::UpdateAgentActionGroupError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_agent_action_group::UpdateAgentActionGroupError> for Error {
    fn from(err: crate::operation::update_agent_action_group::UpdateAgentActionGroupError) -> Self {
        match err {
            crate::operation::update_agent_action_group::UpdateAgentActionGroupError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_agent_action_group::UpdateAgentActionGroupError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_agent_action_group::UpdateAgentActionGroupError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_agent_action_group::UpdateAgentActionGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_agent_action_group::UpdateAgentActionGroupError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_agent_action_group::UpdateAgentActionGroupError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_agent_action_group::UpdateAgentActionGroupError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_agent_action_group::UpdateAgentActionGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_alias::UpdateAgentAliasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_alias::UpdateAgentAliasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_agent_alias::UpdateAgentAliasError> for Error {
    fn from(err: crate::operation::update_agent_alias::UpdateAgentAliasError) -> Self {
        match err {
            crate::operation::update_agent_alias::UpdateAgentAliasError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_agent_alias::UpdateAgentAliasError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_agent_alias::UpdateAgentAliasError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_agent_alias::UpdateAgentAliasError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_agent_alias::UpdateAgentAliasError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::update_agent_alias::UpdateAgentAliasError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_agent_alias::UpdateAgentAliasError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_agent_alias::UpdateAgentAliasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError> for Error {
    fn from(err: crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError) -> Self {
        match err {
            crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::update_agent_knowledge_base::UpdateAgentKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_data_source::UpdateDataSourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_data_source::UpdateDataSourceError> for Error {
    fn from(err: crate::operation::update_data_source::UpdateDataSourceError) -> Self {
        match err {
            crate::operation::update_data_source::UpdateDataSourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_data_source::UpdateDataSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_knowledge_base::UpdateKnowledgeBaseError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_knowledge_base::UpdateKnowledgeBaseError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_knowledge_base::UpdateKnowledgeBaseError> for Error {
    fn from(err: crate::operation::update_knowledge_base::UpdateKnowledgeBaseError) -> Self {
        match err {
            crate::operation::update_knowledge_base::UpdateKnowledgeBaseError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_knowledge_base::UpdateKnowledgeBaseError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_knowledge_base::UpdateKnowledgeBaseError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_knowledge_base::UpdateKnowledgeBaseError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_knowledge_base::UpdateKnowledgeBaseError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_knowledge_base::UpdateKnowledgeBaseError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_knowledge_base::UpdateKnowledgeBaseError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
