// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn associate_agent_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::associate_agent_knowledge_base::builders::AssociateAgentKnowledgeBaseOutputBuilder,
) -> crate::operation::associate_agent_knowledge_base::builders::AssociateAgentKnowledgeBaseOutputBuilder {
    if builder.agent_knowledge_base.is_none() {
        builder.agent_knowledge_base = {
            let builder = crate::types::builders::AgentKnowledgeBaseBuilder::default();
            crate::serde_util::agent_knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_agent_output_output_correct_errors(
    mut builder: crate::operation::create_agent::builders::CreateAgentOutputBuilder,
) -> crate::operation::create_agent::builders::CreateAgentOutputBuilder {
    if builder.agent.is_none() {
        builder.agent = {
            let builder = crate::types::builders::AgentBuilder::default();
            crate::serde_util::agent_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_agent_action_group_output_output_correct_errors(
    mut builder: crate::operation::create_agent_action_group::builders::CreateAgentActionGroupOutputBuilder,
) -> crate::operation::create_agent_action_group::builders::CreateAgentActionGroupOutputBuilder {
    if builder.agent_action_group.is_none() {
        builder.agent_action_group = {
            let builder = crate::types::builders::AgentActionGroupBuilder::default();
            crate::serde_util::agent_action_group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_agent_alias_output_output_correct_errors(
    mut builder: crate::operation::create_agent_alias::builders::CreateAgentAliasOutputBuilder,
) -> crate::operation::create_agent_alias::builders::CreateAgentAliasOutputBuilder {
    if builder.agent_alias.is_none() {
        builder.agent_alias = {
            let builder = crate::types::builders::AgentAliasBuilder::default();
            crate::serde_util::agent_alias_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_data_source_output_output_correct_errors(
    mut builder: crate::operation::create_data_source::builders::CreateDataSourceOutputBuilder,
) -> crate::operation::create_data_source::builders::CreateDataSourceOutputBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            crate::serde_util::data_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn create_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::create_knowledge_base::builders::CreateKnowledgeBaseOutputBuilder,
) -> crate::operation::create_knowledge_base::builders::CreateKnowledgeBaseOutputBuilder {
    if builder.knowledge_base.is_none() {
        builder.knowledge_base = {
            let builder = crate::types::builders::KnowledgeBaseBuilder::default();
            crate::serde_util::knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn delete_agent_output_output_correct_errors(
    mut builder: crate::operation::delete_agent::builders::DeleteAgentOutputBuilder,
) -> crate::operation::delete_agent::builders::DeleteAgentOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    builder
}

pub(crate) fn delete_agent_alias_output_output_correct_errors(
    mut builder: crate::operation::delete_agent_alias::builders::DeleteAgentAliasOutputBuilder,
) -> crate::operation::delete_agent_alias::builders::DeleteAgentAliasOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_alias_id.is_none() {
        builder.agent_alias_id = Some(Default::default())
    }
    if builder.agent_alias_status.is_none() {
        builder.agent_alias_status = "no value was set".parse::<crate::types::AgentAliasStatus>().ok()
    }
    builder
}

pub(crate) fn delete_agent_version_output_output_correct_errors(
    mut builder: crate::operation::delete_agent_version::builders::DeleteAgentVersionOutputBuilder,
) -> crate::operation::delete_agent_version::builders::DeleteAgentVersionOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    builder
}

pub(crate) fn delete_data_source_output_output_correct_errors(
    mut builder: crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder,
) -> crate::operation::delete_data_source::builders::DeleteDataSourceOutputBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    builder
}

pub(crate) fn delete_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::delete_knowledge_base::builders::DeleteKnowledgeBaseOutputBuilder,
) -> crate::operation::delete_knowledge_base::builders::DeleteKnowledgeBaseOutputBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::KnowledgeBaseStatus>().ok()
    }
    builder
}

pub(crate) fn get_agent_output_output_correct_errors(
    mut builder: crate::operation::get_agent::builders::GetAgentOutputBuilder,
) -> crate::operation::get_agent::builders::GetAgentOutputBuilder {
    if builder.agent.is_none() {
        builder.agent = {
            let builder = crate::types::builders::AgentBuilder::default();
            crate::serde_util::agent_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_action_group_output_output_correct_errors(
    mut builder: crate::operation::get_agent_action_group::builders::GetAgentActionGroupOutputBuilder,
) -> crate::operation::get_agent_action_group::builders::GetAgentActionGroupOutputBuilder {
    if builder.agent_action_group.is_none() {
        builder.agent_action_group = {
            let builder = crate::types::builders::AgentActionGroupBuilder::default();
            crate::serde_util::agent_action_group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_alias_output_output_correct_errors(
    mut builder: crate::operation::get_agent_alias::builders::GetAgentAliasOutputBuilder,
) -> crate::operation::get_agent_alias::builders::GetAgentAliasOutputBuilder {
    if builder.agent_alias.is_none() {
        builder.agent_alias = {
            let builder = crate::types::builders::AgentAliasBuilder::default();
            crate::serde_util::agent_alias_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::get_agent_knowledge_base::builders::GetAgentKnowledgeBaseOutputBuilder,
) -> crate::operation::get_agent_knowledge_base::builders::GetAgentKnowledgeBaseOutputBuilder {
    if builder.agent_knowledge_base.is_none() {
        builder.agent_knowledge_base = {
            let builder = crate::types::builders::AgentKnowledgeBaseBuilder::default();
            crate::serde_util::agent_knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_agent_version_output_output_correct_errors(
    mut builder: crate::operation::get_agent_version::builders::GetAgentVersionOutputBuilder,
) -> crate::operation::get_agent_version::builders::GetAgentVersionOutputBuilder {
    if builder.agent_version.is_none() {
        builder.agent_version = {
            let builder = crate::types::builders::AgentVersionBuilder::default();
            crate::serde_util::agent_version_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_data_source_output_output_correct_errors(
    mut builder: crate::operation::get_data_source::builders::GetDataSourceOutputBuilder,
) -> crate::operation::get_data_source::builders::GetDataSourceOutputBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            crate::serde_util::data_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_ingestion_job_output_output_correct_errors(
    mut builder: crate::operation::get_ingestion_job::builders::GetIngestionJobOutputBuilder,
) -> crate::operation::get_ingestion_job::builders::GetIngestionJobOutputBuilder {
    if builder.ingestion_job.is_none() {
        builder.ingestion_job = {
            let builder = crate::types::builders::IngestionJobBuilder::default();
            crate::serde_util::ingestion_job_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::get_knowledge_base::builders::GetKnowledgeBaseOutputBuilder,
) -> crate::operation::get_knowledge_base::builders::GetKnowledgeBaseOutputBuilder {
    if builder.knowledge_base.is_none() {
        builder.knowledge_base = {
            let builder = crate::types::builders::KnowledgeBaseBuilder::default();
            crate::serde_util::knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn list_agent_action_groups_output_output_correct_errors(
    mut builder: crate::operation::list_agent_action_groups::builders::ListAgentActionGroupsOutputBuilder,
) -> crate::operation::list_agent_action_groups::builders::ListAgentActionGroupsOutputBuilder {
    if builder.action_group_summaries.is_none() {
        builder.action_group_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_aliases_output_output_correct_errors(
    mut builder: crate::operation::list_agent_aliases::builders::ListAgentAliasesOutputBuilder,
) -> crate::operation::list_agent_aliases::builders::ListAgentAliasesOutputBuilder {
    if builder.agent_alias_summaries.is_none() {
        builder.agent_alias_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_knowledge_bases_output_output_correct_errors(
    mut builder: crate::operation::list_agent_knowledge_bases::builders::ListAgentKnowledgeBasesOutputBuilder,
) -> crate::operation::list_agent_knowledge_bases::builders::ListAgentKnowledgeBasesOutputBuilder {
    if builder.agent_knowledge_base_summaries.is_none() {
        builder.agent_knowledge_base_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agent_versions_output_output_correct_errors(
    mut builder: crate::operation::list_agent_versions::builders::ListAgentVersionsOutputBuilder,
) -> crate::operation::list_agent_versions::builders::ListAgentVersionsOutputBuilder {
    if builder.agent_version_summaries.is_none() {
        builder.agent_version_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_agents_output_output_correct_errors(
    mut builder: crate::operation::list_agents::builders::ListAgentsOutputBuilder,
) -> crate::operation::list_agents::builders::ListAgentsOutputBuilder {
    if builder.agent_summaries.is_none() {
        builder.agent_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_data_sources_output_output_correct_errors(
    mut builder: crate::operation::list_data_sources::builders::ListDataSourcesOutputBuilder,
) -> crate::operation::list_data_sources::builders::ListDataSourcesOutputBuilder {
    if builder.data_source_summaries.is_none() {
        builder.data_source_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_ingestion_jobs_output_output_correct_errors(
    mut builder: crate::operation::list_ingestion_jobs::builders::ListIngestionJobsOutputBuilder,
) -> crate::operation::list_ingestion_jobs::builders::ListIngestionJobsOutputBuilder {
    if builder.ingestion_job_summaries.is_none() {
        builder.ingestion_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_knowledge_bases_output_output_correct_errors(
    mut builder: crate::operation::list_knowledge_bases::builders::ListKnowledgeBasesOutputBuilder,
) -> crate::operation::list_knowledge_bases::builders::ListKnowledgeBasesOutputBuilder {
    if builder.knowledge_base_summaries.is_none() {
        builder.knowledge_base_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn prepare_agent_output_output_correct_errors(
    mut builder: crate::operation::prepare_agent::builders::PrepareAgentOutputBuilder,
) -> crate::operation::prepare_agent::builders::PrepareAgentOutputBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.prepared_at.is_none() {
        builder.prepared_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn start_ingestion_job_output_output_correct_errors(
    mut builder: crate::operation::start_ingestion_job::builders::StartIngestionJobOutputBuilder,
) -> crate::operation::start_ingestion_job::builders::StartIngestionJobOutputBuilder {
    if builder.ingestion_job.is_none() {
        builder.ingestion_job = {
            let builder = crate::types::builders::IngestionJobBuilder::default();
            crate::serde_util::ingestion_job_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_output_output_correct_errors(
    mut builder: crate::operation::update_agent::builders::UpdateAgentOutputBuilder,
) -> crate::operation::update_agent::builders::UpdateAgentOutputBuilder {
    if builder.agent.is_none() {
        builder.agent = {
            let builder = crate::types::builders::AgentBuilder::default();
            crate::serde_util::agent_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_action_group_output_output_correct_errors(
    mut builder: crate::operation::update_agent_action_group::builders::UpdateAgentActionGroupOutputBuilder,
) -> crate::operation::update_agent_action_group::builders::UpdateAgentActionGroupOutputBuilder {
    if builder.agent_action_group.is_none() {
        builder.agent_action_group = {
            let builder = crate::types::builders::AgentActionGroupBuilder::default();
            crate::serde_util::agent_action_group_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_alias_output_output_correct_errors(
    mut builder: crate::operation::update_agent_alias::builders::UpdateAgentAliasOutputBuilder,
) -> crate::operation::update_agent_alias::builders::UpdateAgentAliasOutputBuilder {
    if builder.agent_alias.is_none() {
        builder.agent_alias = {
            let builder = crate::types::builders::AgentAliasBuilder::default();
            crate::serde_util::agent_alias_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_agent_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::update_agent_knowledge_base::builders::UpdateAgentKnowledgeBaseOutputBuilder,
) -> crate::operation::update_agent_knowledge_base::builders::UpdateAgentKnowledgeBaseOutputBuilder {
    if builder.agent_knowledge_base.is_none() {
        builder.agent_knowledge_base = {
            let builder = crate::types::builders::AgentKnowledgeBaseBuilder::default();
            crate::serde_util::agent_knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_data_source_output_output_correct_errors(
    mut builder: crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder,
) -> crate::operation::update_data_source::builders::UpdateDataSourceOutputBuilder {
    if builder.data_source.is_none() {
        builder.data_source = {
            let builder = crate::types::builders::DataSourceBuilder::default();
            crate::serde_util::data_source_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn update_knowledge_base_output_output_correct_errors(
    mut builder: crate::operation::update_knowledge_base::builders::UpdateKnowledgeBaseOutputBuilder,
) -> crate::operation::update_knowledge_base::builders::UpdateKnowledgeBaseOutputBuilder {
    if builder.knowledge_base.is_none() {
        builder.knowledge_base = {
            let builder = crate::types::builders::KnowledgeBaseBuilder::default();
            crate::serde_util::knowledge_base_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn agent_knowledge_base_correct_errors(
    mut builder: crate::types::builders::AgentKnowledgeBaseBuilder,
) -> crate::types::builders::AgentKnowledgeBaseBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.knowledge_base_state.is_none() {
        builder.knowledge_base_state = "no value was set".parse::<crate::types::KnowledgeBaseState>().ok()
    }
    builder
}

pub(crate) fn agent_correct_errors(mut builder: crate::types::builders::AgentBuilder) -> crate::types::builders::AgentBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_name.is_none() {
        builder.agent_name = Some(Default::default())
    }
    if builder.agent_arn.is_none() {
        builder.agent_arn = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.idle_session_ttl_in_seconds.is_none() {
        builder.idle_session_ttl_in_seconds = Some(Default::default())
    }
    if builder.agent_resource_role_arn.is_none() {
        builder.agent_resource_role_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_action_group_correct_errors(
    mut builder: crate::types::builders::AgentActionGroupBuilder,
) -> crate::types::builders::AgentActionGroupBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.action_group_id.is_none() {
        builder.action_group_id = Some(Default::default())
    }
    if builder.action_group_name.is_none() {
        builder.action_group_name = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.action_group_state.is_none() {
        builder.action_group_state = "no value was set".parse::<crate::types::ActionGroupState>().ok()
    }
    builder
}

pub(crate) fn agent_alias_correct_errors(mut builder: crate::types::builders::AgentAliasBuilder) -> crate::types::builders::AgentAliasBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_alias_id.is_none() {
        builder.agent_alias_id = Some(Default::default())
    }
    if builder.agent_alias_name.is_none() {
        builder.agent_alias_name = Some(Default::default())
    }
    if builder.agent_alias_arn.is_none() {
        builder.agent_alias_arn = Some(Default::default())
    }
    if builder.routing_configuration.is_none() {
        builder.routing_configuration = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.agent_alias_status.is_none() {
        builder.agent_alias_status = "no value was set".parse::<crate::types::AgentAliasStatus>().ok()
    }
    builder
}

pub(crate) fn data_source_correct_errors(mut builder: crate::types::builders::DataSourceBuilder) -> crate::types::builders::DataSourceBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    if builder.data_source_configuration.is_none() {
        builder.data_source_configuration = {
            let builder = crate::types::builders::DataSourceConfigurationBuilder::default();
            crate::serde_util::data_source_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn knowledge_base_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseBuilder,
) -> crate::types::builders::KnowledgeBaseBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.knowledge_base_arn.is_none() {
        builder.knowledge_base_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.knowledge_base_configuration.is_none() {
        builder.knowledge_base_configuration = {
            let builder = crate::types::builders::KnowledgeBaseConfigurationBuilder::default();
            crate::serde_util::knowledge_base_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.storage_configuration.is_none() {
        builder.storage_configuration = {
            let builder = crate::types::builders::StorageConfigurationBuilder::default();
            crate::serde_util::storage_configuration_correct_errors(builder).build().ok()
        }
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::KnowledgeBaseStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_version_correct_errors(mut builder: crate::types::builders::AgentVersionBuilder) -> crate::types::builders::AgentVersionBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_name.is_none() {
        builder.agent_name = Some(Default::default())
    }
    if builder.agent_arn.is_none() {
        builder.agent_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.idle_session_ttl_in_seconds.is_none() {
        builder.idle_session_ttl_in_seconds = Some(Default::default())
    }
    if builder.agent_resource_role_arn.is_none() {
        builder.agent_resource_role_arn = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn ingestion_job_correct_errors(mut builder: crate::types::builders::IngestionJobBuilder) -> crate::types::builders::IngestionJobBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.ingestion_job_id.is_none() {
        builder.ingestion_job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IngestionJobStatus>().ok()
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_source_configuration_correct_errors(
    mut builder: crate::types::builders::DataSourceConfigurationBuilder,
) -> crate::types::builders::DataSourceConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::DataSourceType>().ok()
    }
    builder
}

pub(crate) fn knowledge_base_configuration_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseConfigurationBuilder,
) -> crate::types::builders::KnowledgeBaseConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::KnowledgeBaseType>().ok()
    }
    builder
}

pub(crate) fn storage_configuration_correct_errors(
    mut builder: crate::types::builders::StorageConfigurationBuilder,
) -> crate::types::builders::StorageConfigurationBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::KnowledgeBaseStorageType>().ok()
    }
    builder
}

pub(crate) fn action_group_summary_correct_errors(
    mut builder: crate::types::builders::ActionGroupSummaryBuilder,
) -> crate::types::builders::ActionGroupSummaryBuilder {
    if builder.action_group_id.is_none() {
        builder.action_group_id = Some(Default::default())
    }
    if builder.action_group_name.is_none() {
        builder.action_group_name = Some(Default::default())
    }
    if builder.action_group_state.is_none() {
        builder.action_group_state = "no value was set".parse::<crate::types::ActionGroupState>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_alias_summary_correct_errors(
    mut builder: crate::types::builders::AgentAliasSummaryBuilder,
) -> crate::types::builders::AgentAliasSummaryBuilder {
    if builder.agent_alias_id.is_none() {
        builder.agent_alias_id = Some(Default::default())
    }
    if builder.agent_alias_name.is_none() {
        builder.agent_alias_name = Some(Default::default())
    }
    if builder.agent_alias_status.is_none() {
        builder.agent_alias_status = "no value was set".parse::<crate::types::AgentAliasStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_knowledge_base_summary_correct_errors(
    mut builder: crate::types::builders::AgentKnowledgeBaseSummaryBuilder,
) -> crate::types::builders::AgentKnowledgeBaseSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.knowledge_base_state.is_none() {
        builder.knowledge_base_state = "no value was set".parse::<crate::types::KnowledgeBaseState>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_summary_correct_errors(mut builder: crate::types::builders::AgentSummaryBuilder) -> crate::types::builders::AgentSummaryBuilder {
    if builder.agent_id.is_none() {
        builder.agent_id = Some(Default::default())
    }
    if builder.agent_name.is_none() {
        builder.agent_name = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn agent_version_summary_correct_errors(
    mut builder: crate::types::builders::AgentVersionSummaryBuilder,
) -> crate::types::builders::AgentVersionSummaryBuilder {
    if builder.agent_name.is_none() {
        builder.agent_name = Some(Default::default())
    }
    if builder.agent_status.is_none() {
        builder.agent_status = "no value was set".parse::<crate::types::AgentStatus>().ok()
    }
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn data_source_summary_correct_errors(
    mut builder: crate::types::builders::DataSourceSummaryBuilder,
) -> crate::types::builders::DataSourceSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::DataSourceStatus>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn ingestion_job_summary_correct_errors(
    mut builder: crate::types::builders::IngestionJobSummaryBuilder,
) -> crate::types::builders::IngestionJobSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.data_source_id.is_none() {
        builder.data_source_id = Some(Default::default())
    }
    if builder.ingestion_job_id.is_none() {
        builder.ingestion_job_id = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::IngestionJobStatus>().ok()
    }
    if builder.started_at.is_none() {
        builder.started_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn knowledge_base_summary_correct_errors(
    mut builder: crate::types::builders::KnowledgeBaseSummaryBuilder,
) -> crate::types::builders::KnowledgeBaseSummaryBuilder {
    if builder.knowledge_base_id.is_none() {
        builder.knowledge_base_id = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::KnowledgeBaseStatus>().ok()
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn prompt_override_configuration_correct_errors(
    mut builder: crate::types::builders::PromptOverrideConfigurationBuilder,
) -> crate::types::builders::PromptOverrideConfigurationBuilder {
    if builder.prompt_configurations.is_none() {
        builder.prompt_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_field_correct_errors(
    mut builder: crate::types::builders::ValidationExceptionFieldBuilder,
) -> crate::types::builders::ValidationExceptionFieldBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn agent_alias_routing_configuration_list_item_correct_errors(
    mut builder: crate::types::builders::AgentAliasRoutingConfigurationListItemBuilder,
) -> crate::types::builders::AgentAliasRoutingConfigurationListItemBuilder {
    if builder.agent_version.is_none() {
        builder.agent_version = Some(Default::default())
    }
    builder
}

pub(crate) fn chunking_configuration_correct_errors(
    mut builder: crate::types::builders::ChunkingConfigurationBuilder,
) -> crate::types::builders::ChunkingConfigurationBuilder {
    if builder.chunking_strategy.is_none() {
        builder.chunking_strategy = "no value was set".parse::<crate::types::ChunkingStrategy>().ok()
    }
    builder
}

pub(crate) fn open_search_serverless_configuration_correct_errors(
    mut builder: crate::types::builders::OpenSearchServerlessConfigurationBuilder,
) -> crate::types::builders::OpenSearchServerlessConfigurationBuilder {
    if builder.collection_arn.is_none() {
        builder.collection_arn = Some(Default::default())
    }
    if builder.vector_index_name.is_none() {
        builder.vector_index_name = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::OpenSearchServerlessFieldMappingBuilder::default();
            crate::serde_util::open_search_serverless_field_mapping_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn pinecone_configuration_correct_errors(
    mut builder: crate::types::builders::PineconeConfigurationBuilder,
) -> crate::types::builders::PineconeConfigurationBuilder {
    if builder.connection_string.is_none() {
        builder.connection_string = Some(Default::default())
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::PineconeFieldMappingBuilder::default();
            crate::serde_util::pinecone_field_mapping_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn rds_configuration_correct_errors(
    mut builder: crate::types::builders::RdsConfigurationBuilder,
) -> crate::types::builders::RdsConfigurationBuilder {
    if builder.resource_arn.is_none() {
        builder.resource_arn = Some(Default::default())
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    if builder.database_name.is_none() {
        builder.database_name = Some(Default::default())
    }
    if builder.table_name.is_none() {
        builder.table_name = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::RdsFieldMappingBuilder::default();
            crate::serde_util::rds_field_mapping_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn redis_enterprise_cloud_configuration_correct_errors(
    mut builder: crate::types::builders::RedisEnterpriseCloudConfigurationBuilder,
) -> crate::types::builders::RedisEnterpriseCloudConfigurationBuilder {
    if builder.endpoint.is_none() {
        builder.endpoint = Some(Default::default())
    }
    if builder.vector_index_name.is_none() {
        builder.vector_index_name = Some(Default::default())
    }
    if builder.credentials_secret_arn.is_none() {
        builder.credentials_secret_arn = Some(Default::default())
    }
    if builder.field_mapping.is_none() {
        builder.field_mapping = {
            let builder = crate::types::builders::RedisEnterpriseCloudFieldMappingBuilder::default();
            crate::serde_util::redis_enterprise_cloud_field_mapping_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn s3_data_source_configuration_correct_errors(
    mut builder: crate::types::builders::S3DataSourceConfigurationBuilder,
) -> crate::types::builders::S3DataSourceConfigurationBuilder {
    if builder.bucket_arn.is_none() {
        builder.bucket_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn vector_knowledge_base_configuration_correct_errors(
    mut builder: crate::types::builders::VectorKnowledgeBaseConfigurationBuilder,
) -> crate::types::builders::VectorKnowledgeBaseConfigurationBuilder {
    if builder.embedding_model_arn.is_none() {
        builder.embedding_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn fixed_size_chunking_configuration_correct_errors(
    mut builder: crate::types::builders::FixedSizeChunkingConfigurationBuilder,
) -> crate::types::builders::FixedSizeChunkingConfigurationBuilder {
    if builder.max_tokens.is_none() {
        builder.max_tokens = Some(Default::default())
    }
    if builder.overlap_percentage.is_none() {
        builder.overlap_percentage = Some(Default::default())
    }
    builder
}

pub(crate) fn function_correct_errors(mut builder: crate::types::builders::FunctionBuilder) -> crate::types::builders::FunctionBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn open_search_serverless_field_mapping_correct_errors(
    mut builder: crate::types::builders::OpenSearchServerlessFieldMappingBuilder,
) -> crate::types::builders::OpenSearchServerlessFieldMappingBuilder {
    if builder.vector_field.is_none() {
        builder.vector_field = Some(Default::default())
    }
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn pinecone_field_mapping_correct_errors(
    mut builder: crate::types::builders::PineconeFieldMappingBuilder,
) -> crate::types::builders::PineconeFieldMappingBuilder {
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn rds_field_mapping_correct_errors(
    mut builder: crate::types::builders::RdsFieldMappingBuilder,
) -> crate::types::builders::RdsFieldMappingBuilder {
    if builder.primary_key_field.is_none() {
        builder.primary_key_field = Some(Default::default())
    }
    if builder.vector_field.is_none() {
        builder.vector_field = Some(Default::default())
    }
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn redis_enterprise_cloud_field_mapping_correct_errors(
    mut builder: crate::types::builders::RedisEnterpriseCloudFieldMappingBuilder,
) -> crate::types::builders::RedisEnterpriseCloudFieldMappingBuilder {
    if builder.vector_field.is_none() {
        builder.vector_field = Some(Default::default())
    }
    if builder.text_field.is_none() {
        builder.text_field = Some(Default::default())
    }
    if builder.metadata_field.is_none() {
        builder.metadata_field = Some(Default::default())
    }
    builder
}

pub(crate) fn parameter_detail_correct_errors(
    mut builder: crate::types::builders::ParameterDetailBuilder,
) -> crate::types::builders::ParameterDetailBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::Type>().ok()
    }
    builder
}
