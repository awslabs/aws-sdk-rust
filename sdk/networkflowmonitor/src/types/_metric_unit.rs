// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `MetricUnit`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let metricunit = unimplemented!();
/// match metricunit {
///     MetricUnit::Bits => { /* ... */ },
///     MetricUnit::BitsPerSecond => { /* ... */ },
///     MetricUnit::Bytes => { /* ... */ },
///     MetricUnit::BytesPerSecond => { /* ... */ },
///     MetricUnit::Count => { /* ... */ },
///     MetricUnit::CountPerSecond => { /* ... */ },
///     MetricUnit::Gigabits => { /* ... */ },
///     MetricUnit::GigabitsPerSecond => { /* ... */ },
///     MetricUnit::Gigabytes => { /* ... */ },
///     MetricUnit::GigabytesPerSecond => { /* ... */ },
///     MetricUnit::Kilobits => { /* ... */ },
///     MetricUnit::KilobitsPerSecond => { /* ... */ },
///     MetricUnit::Kilobytes => { /* ... */ },
///     MetricUnit::KilobytesPerSecond => { /* ... */ },
///     MetricUnit::Megabits => { /* ... */ },
///     MetricUnit::MegabitsPerSecond => { /* ... */ },
///     MetricUnit::Megabytes => { /* ... */ },
///     MetricUnit::MegabytesPerSecond => { /* ... */ },
///     MetricUnit::Microseconds => { /* ... */ },
///     MetricUnit::Milliseconds => { /* ... */ },
///     MetricUnit::None => { /* ... */ },
///     MetricUnit::Percent => { /* ... */ },
///     MetricUnit::Seconds => { /* ... */ },
///     MetricUnit::Terabits => { /* ... */ },
///     MetricUnit::TerabitsPerSecond => { /* ... */ },
///     MetricUnit::Terabytes => { /* ... */ },
///     MetricUnit::TerabytesPerSecond => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `metricunit` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `MetricUnit::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `MetricUnit::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `MetricUnit::NewFeature` is defined.
/// Specifically, when `metricunit` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `MetricUnit::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum MetricUnit {
    #[allow(missing_docs)] // documentation missing in model
    Bits,
    #[allow(missing_docs)] // documentation missing in model
    BitsPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Bytes,
    #[allow(missing_docs)] // documentation missing in model
    BytesPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Count,
    #[allow(missing_docs)] // documentation missing in model
    CountPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Gigabits,
    #[allow(missing_docs)] // documentation missing in model
    GigabitsPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Gigabytes,
    #[allow(missing_docs)] // documentation missing in model
    GigabytesPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Kilobits,
    #[allow(missing_docs)] // documentation missing in model
    KilobitsPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Kilobytes,
    #[allow(missing_docs)] // documentation missing in model
    KilobytesPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Megabits,
    #[allow(missing_docs)] // documentation missing in model
    MegabitsPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Megabytes,
    #[allow(missing_docs)] // documentation missing in model
    MegabytesPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Microseconds,
    #[allow(missing_docs)] // documentation missing in model
    Milliseconds,
    #[allow(missing_docs)] // documentation missing in model
    None,
    #[allow(missing_docs)] // documentation missing in model
    Percent,
    #[allow(missing_docs)] // documentation missing in model
    Seconds,
    #[allow(missing_docs)] // documentation missing in model
    Terabits,
    #[allow(missing_docs)] // documentation missing in model
    TerabitsPerSecond,
    #[allow(missing_docs)] // documentation missing in model
    Terabytes,
    #[allow(missing_docs)] // documentation missing in model
    TerabytesPerSecond,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for MetricUnit {
    fn from(s: &str) -> Self {
        match s {
            "Bits" => MetricUnit::Bits,
            "Bits/Second" => MetricUnit::BitsPerSecond,
            "Bytes" => MetricUnit::Bytes,
            "Bytes/Second" => MetricUnit::BytesPerSecond,
            "Count" => MetricUnit::Count,
            "Count/Second" => MetricUnit::CountPerSecond,
            "Gigabits" => MetricUnit::Gigabits,
            "Gigabits/Second" => MetricUnit::GigabitsPerSecond,
            "Gigabytes" => MetricUnit::Gigabytes,
            "Gigabytes/Second" => MetricUnit::GigabytesPerSecond,
            "Kilobits" => MetricUnit::Kilobits,
            "Kilobits/Second" => MetricUnit::KilobitsPerSecond,
            "Kilobytes" => MetricUnit::Kilobytes,
            "Kilobytes/Second" => MetricUnit::KilobytesPerSecond,
            "Megabits" => MetricUnit::Megabits,
            "Megabits/Second" => MetricUnit::MegabitsPerSecond,
            "Megabytes" => MetricUnit::Megabytes,
            "Megabytes/Second" => MetricUnit::MegabytesPerSecond,
            "Microseconds" => MetricUnit::Microseconds,
            "Milliseconds" => MetricUnit::Milliseconds,
            "None" => MetricUnit::None,
            "Percent" => MetricUnit::Percent,
            "Seconds" => MetricUnit::Seconds,
            "Terabits" => MetricUnit::Terabits,
            "Terabits/Second" => MetricUnit::TerabitsPerSecond,
            "Terabytes" => MetricUnit::Terabytes,
            "Terabytes/Second" => MetricUnit::TerabytesPerSecond,
            other => MetricUnit::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for MetricUnit {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(MetricUnit::from(s))
    }
}
impl MetricUnit {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            MetricUnit::Bits => "Bits",
            MetricUnit::BitsPerSecond => "Bits/Second",
            MetricUnit::Bytes => "Bytes",
            MetricUnit::BytesPerSecond => "Bytes/Second",
            MetricUnit::Count => "Count",
            MetricUnit::CountPerSecond => "Count/Second",
            MetricUnit::Gigabits => "Gigabits",
            MetricUnit::GigabitsPerSecond => "Gigabits/Second",
            MetricUnit::Gigabytes => "Gigabytes",
            MetricUnit::GigabytesPerSecond => "Gigabytes/Second",
            MetricUnit::Kilobits => "Kilobits",
            MetricUnit::KilobitsPerSecond => "Kilobits/Second",
            MetricUnit::Kilobytes => "Kilobytes",
            MetricUnit::KilobytesPerSecond => "Kilobytes/Second",
            MetricUnit::Megabits => "Megabits",
            MetricUnit::MegabitsPerSecond => "Megabits/Second",
            MetricUnit::Megabytes => "Megabytes",
            MetricUnit::MegabytesPerSecond => "Megabytes/Second",
            MetricUnit::Microseconds => "Microseconds",
            MetricUnit::Milliseconds => "Milliseconds",
            MetricUnit::None => "None",
            MetricUnit::Percent => "Percent",
            MetricUnit::Seconds => "Seconds",
            MetricUnit::Terabits => "Terabits",
            MetricUnit::TerabitsPerSecond => "Terabits/Second",
            MetricUnit::Terabytes => "Terabytes",
            MetricUnit::TerabytesPerSecond => "Terabytes/Second",
            MetricUnit::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "Bits",
            "Bits/Second",
            "Bytes",
            "Bytes/Second",
            "Count",
            "Count/Second",
            "Gigabits",
            "Gigabits/Second",
            "Gigabytes",
            "Gigabytes/Second",
            "Kilobits",
            "Kilobits/Second",
            "Kilobytes",
            "Kilobytes/Second",
            "Megabits",
            "Megabits/Second",
            "Megabytes",
            "Megabytes/Second",
            "Microseconds",
            "Milliseconds",
            "None",
            "Percent",
            "Seconds",
            "Terabits",
            "Terabits/Second",
            "Terabytes",
            "Terabytes/Second",
        ]
    }
}
impl ::std::convert::AsRef<str> for MetricUnit {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl MetricUnit {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for MetricUnit {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            MetricUnit::Bits => write!(f, "Bits"),
            MetricUnit::BitsPerSecond => write!(f, "Bits/Second"),
            MetricUnit::Bytes => write!(f, "Bytes"),
            MetricUnit::BytesPerSecond => write!(f, "Bytes/Second"),
            MetricUnit::Count => write!(f, "Count"),
            MetricUnit::CountPerSecond => write!(f, "Count/Second"),
            MetricUnit::Gigabits => write!(f, "Gigabits"),
            MetricUnit::GigabitsPerSecond => write!(f, "Gigabits/Second"),
            MetricUnit::Gigabytes => write!(f, "Gigabytes"),
            MetricUnit::GigabytesPerSecond => write!(f, "Gigabytes/Second"),
            MetricUnit::Kilobits => write!(f, "Kilobits"),
            MetricUnit::KilobitsPerSecond => write!(f, "Kilobits/Second"),
            MetricUnit::Kilobytes => write!(f, "Kilobytes"),
            MetricUnit::KilobytesPerSecond => write!(f, "Kilobytes/Second"),
            MetricUnit::Megabits => write!(f, "Megabits"),
            MetricUnit::MegabitsPerSecond => write!(f, "Megabits/Second"),
            MetricUnit::Megabytes => write!(f, "Megabytes"),
            MetricUnit::MegabytesPerSecond => write!(f, "Megabytes/Second"),
            MetricUnit::Microseconds => write!(f, "Microseconds"),
            MetricUnit::Milliseconds => write!(f, "Milliseconds"),
            MetricUnit::None => write!(f, "None"),
            MetricUnit::Percent => write!(f, "Percent"),
            MetricUnit::Seconds => write!(f, "Seconds"),
            MetricUnit::Terabits => write!(f, "Terabits"),
            MetricUnit::TerabitsPerSecond => write!(f, "Terabits/Second"),
            MetricUnit::Terabytes => write!(f, "Terabytes"),
            MetricUnit::TerabytesPerSecond => write!(f, "Terabytes/Second"),
            MetricUnit::Unknown(value) => write!(f, "{value}"),
        }
    }
}
