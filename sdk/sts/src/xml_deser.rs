// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn parse_generic_error(
    response: &http::Response<bytes::Bytes>,
) -> Result<smithy_types::Error, smithy_xml::decode::XmlError> {
    crate::rest_xml_wrapped_errors::parse_generic_error(response.body().as_ref())
}

#[allow(unused_mut)]
pub fn deser_structure_expired_token_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::expired_token_exception::Builder,
) -> Result<crate::error::expired_token_exception::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.sts#ExpiredTokenException$message */ =>  {
                let var_1 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_1);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_malformed_policy_document_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::malformed_policy_document_exception::Builder,
) -> Result<crate::error::malformed_policy_document_exception::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.sts#MalformedPolicyDocumentException$message */ =>  {
                let var_2 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_2);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_packed_policy_too_large_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::packed_policy_too_large_exception::Builder,
) -> Result<crate::error::packed_policy_too_large_exception::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.sts#PackedPolicyTooLargeException$message */ =>  {
                let var_3 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_3);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_region_disabled_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::region_disabled_exception::Builder,
) -> Result<crate::error::region_disabled_exception::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.sts#RegionDisabledException$message */ =>  {
                let var_4 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_4);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_assume_role(
    inp: &[u8],
    mut builder: crate::output::assume_role_output::Builder,
) -> Result<crate::output::assume_role_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssumeRoleResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssumeRoleResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("AssumeRoleResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected AssumeRoleResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Credentials") /* Credentials com.amazonaws.sts#AssumeRoleOutput$Credentials */ =>  {
                let var_5 =
                    Some(
                        crate::xml_deser::deser_structure_credentials(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_credentials(var_5);
            }
            ,
            s if s.matches("AssumedRoleUser") /* AssumedRoleUser com.amazonaws.sts#AssumeRoleOutput$AssumedRoleUser */ =>  {
                let var_6 =
                    Some(
                        crate::xml_deser::deser_structure_assumed_role_user(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_assumed_role_user(var_6);
            }
            ,
            s if s.matches("PackedPolicySize") /* PackedPolicySize com.amazonaws.sts#AssumeRoleOutput$PackedPolicySize */ =>  {
                let var_7 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.sts#nonNegativeIntegerType`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_packed_policy_size(var_7);
            }
            ,
            s if s.matches("SourceIdentity") /* SourceIdentity com.amazonaws.sts#AssumeRoleOutput$SourceIdentity */ =>  {
                let var_8 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_identity(var_8);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected AssumeRoleResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_idp_rejected_claim_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::idp_rejected_claim_exception::Builder,
) -> Result<crate::error::idp_rejected_claim_exception::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.sts#IDPRejectedClaimException$message */ =>  {
                let var_9 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_9);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_identity_token_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_identity_token_exception::Builder,
) -> Result<crate::error::invalid_identity_token_exception::Builder, smithy_xml::decode::XmlError> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.sts#InvalidIdentityTokenException$message */ =>  {
                let var_10 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_10);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_assume_role_with_saml(
    inp: &[u8],
    mut builder: crate::output::assume_role_with_saml_output::Builder,
) -> Result<crate::output::assume_role_with_saml_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssumeRoleWithSAMLResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssumeRoleWithSAMLResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("AssumeRoleWithSAMLResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected AssumeRoleWithSAMLResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Credentials") /* Credentials com.amazonaws.sts#AssumeRoleWithSAMLOutput$Credentials */ =>  {
                let var_11 =
                    Some(
                        crate::xml_deser::deser_structure_credentials(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_credentials(var_11);
            }
            ,
            s if s.matches("AssumedRoleUser") /* AssumedRoleUser com.amazonaws.sts#AssumeRoleWithSAMLOutput$AssumedRoleUser */ =>  {
                let var_12 =
                    Some(
                        crate::xml_deser::deser_structure_assumed_role_user(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_assumed_role_user(var_12);
            }
            ,
            s if s.matches("PackedPolicySize") /* PackedPolicySize com.amazonaws.sts#AssumeRoleWithSAMLOutput$PackedPolicySize */ =>  {
                let var_13 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.sts#nonNegativeIntegerType`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_packed_policy_size(var_13);
            }
            ,
            s if s.matches("Subject") /* Subject com.amazonaws.sts#AssumeRoleWithSAMLOutput$Subject */ =>  {
                let var_14 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subject(var_14);
            }
            ,
            s if s.matches("SubjectType") /* SubjectType com.amazonaws.sts#AssumeRoleWithSAMLOutput$SubjectType */ =>  {
                let var_15 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subject_type(var_15);
            }
            ,
            s if s.matches("Issuer") /* Issuer com.amazonaws.sts#AssumeRoleWithSAMLOutput$Issuer */ =>  {
                let var_16 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_issuer(var_16);
            }
            ,
            s if s.matches("Audience") /* Audience com.amazonaws.sts#AssumeRoleWithSAMLOutput$Audience */ =>  {
                let var_17 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_audience(var_17);
            }
            ,
            s if s.matches("NameQualifier") /* NameQualifier com.amazonaws.sts#AssumeRoleWithSAMLOutput$NameQualifier */ =>  {
                let var_18 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_name_qualifier(var_18);
            }
            ,
            s if s.matches("SourceIdentity") /* SourceIdentity com.amazonaws.sts#AssumeRoleWithSAMLOutput$SourceIdentity */ =>  {
                let var_19 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_identity(var_19);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected AssumeRoleWithSAMLResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_idp_communication_error_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::idp_communication_error_exception::Builder,
) -> Result<crate::error::idp_communication_error_exception::Builder, smithy_xml::decode::XmlError>
{
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.sts#IDPCommunicationErrorException$message */ =>  {
                let var_20 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_20);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_assume_role_with_web_identity(
    inp: &[u8],
    mut builder: crate::output::assume_role_with_web_identity_output::Builder,
) -> Result<
    crate::output::assume_role_with_web_identity_output::Builder,
    smithy_xml::decode::XmlError,
> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("AssumeRoleWithWebIdentityResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected AssumeRoleWithWebIdentityResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("AssumeRoleWithWebIdentityResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected AssumeRoleWithWebIdentityResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Credentials") /* Credentials com.amazonaws.sts#AssumeRoleWithWebIdentityOutput$Credentials */ =>  {
                let var_21 =
                    Some(
                        crate::xml_deser::deser_structure_credentials(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_credentials(var_21);
            }
            ,
            s if s.matches("SubjectFromWebIdentityToken") /* SubjectFromWebIdentityToken com.amazonaws.sts#AssumeRoleWithWebIdentityOutput$SubjectFromWebIdentityToken */ =>  {
                let var_22 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_subject_from_web_identity_token(var_22);
            }
            ,
            s if s.matches("AssumedRoleUser") /* AssumedRoleUser com.amazonaws.sts#AssumeRoleWithWebIdentityOutput$AssumedRoleUser */ =>  {
                let var_23 =
                    Some(
                        crate::xml_deser::deser_structure_assumed_role_user(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_assumed_role_user(var_23);
            }
            ,
            s if s.matches("PackedPolicySize") /* PackedPolicySize com.amazonaws.sts#AssumeRoleWithWebIdentityOutput$PackedPolicySize */ =>  {
                let var_24 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.sts#nonNegativeIntegerType`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_packed_policy_size(var_24);
            }
            ,
            s if s.matches("Provider") /* Provider com.amazonaws.sts#AssumeRoleWithWebIdentityOutput$Provider */ =>  {
                let var_25 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_provider(var_25);
            }
            ,
            s if s.matches("Audience") /* Audience com.amazonaws.sts#AssumeRoleWithWebIdentityOutput$Audience */ =>  {
                let var_26 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_audience(var_26);
            }
            ,
            s if s.matches("SourceIdentity") /* SourceIdentity com.amazonaws.sts#AssumeRoleWithWebIdentityOutput$SourceIdentity */ =>  {
                let var_27 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_source_identity(var_27);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected AssumeRoleWithWebIdentityResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_structure_invalid_authorization_message_exception_xml_err(
    inp: &[u8],
    mut builder: crate::error::invalid_authorization_message_exception::Builder,
) -> Result<
    crate::error::invalid_authorization_message_exception::Builder,
    smithy_xml::decode::XmlError,
> {
    if inp.is_empty() {
        return Ok(builder);
    }
    use std::convert::TryFrom;
    let mut document = smithy_xml::decode::Document::try_from(inp)?;
    #[allow(unused_mut)]
    let mut error_decoder = crate::rest_xml_wrapped_errors::error_scope(&mut document)?;
    while let Some(mut tag) = error_decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("message") /* message com.amazonaws.sts#InvalidAuthorizationMessageException$message */ =>  {
                let var_28 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_message(var_28);
            }
            ,
            _ => {}
        }
    }
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_decode_authorization_message(
    inp: &[u8],
    mut builder: crate::output::decode_authorization_message_output::Builder,
) -> Result<crate::output::decode_authorization_message_output::Builder, smithy_xml::decode::XmlError>
{
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("DecodeAuthorizationMessageResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected DecodeAuthorizationMessageResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("DecodeAuthorizationMessageResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected DecodeAuthorizationMessageResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("DecodedMessage") /* DecodedMessage com.amazonaws.sts#DecodeAuthorizationMessageOutput$DecodedMessage */ =>  {
                let var_29 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_decoded_message(var_29);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected DecodeAuthorizationMessageResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_access_key_info(
    inp: &[u8],
    mut builder: crate::output::get_access_key_info_output::Builder,
) -> Result<crate::output::get_access_key_info_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetAccessKeyInfoResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetAccessKeyInfoResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetAccessKeyInfoResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetAccessKeyInfoResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Account") /* Account com.amazonaws.sts#GetAccessKeyInfoOutput$Account */ =>  {
                let var_30 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account(var_30);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetAccessKeyInfoResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_caller_identity(
    inp: &[u8],
    mut builder: crate::output::get_caller_identity_output::Builder,
) -> Result<crate::output::get_caller_identity_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetCallerIdentityResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetCallerIdentityResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetCallerIdentityResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetCallerIdentityResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("UserId") /* UserId com.amazonaws.sts#GetCallerIdentityOutput$UserId */ =>  {
                let var_31 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_user_id(var_31);
            }
            ,
            s if s.matches("Account") /* Account com.amazonaws.sts#GetCallerIdentityOutput$Account */ =>  {
                let var_32 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_account(var_32);
            }
            ,
            s if s.matches("Arn") /* Arn com.amazonaws.sts#GetCallerIdentityOutput$Arn */ =>  {
                let var_33 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_33);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetCallerIdentityResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_federation_token(
    inp: &[u8],
    mut builder: crate::output::get_federation_token_output::Builder,
) -> Result<crate::output::get_federation_token_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetFederationTokenResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetFederationTokenResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetFederationTokenResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetFederationTokenResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Credentials") /* Credentials com.amazonaws.sts#GetFederationTokenOutput$Credentials */ =>  {
                let var_34 =
                    Some(
                        crate::xml_deser::deser_structure_credentials(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_credentials(var_34);
            }
            ,
            s if s.matches("FederatedUser") /* FederatedUser com.amazonaws.sts#GetFederationTokenOutput$FederatedUser */ =>  {
                let var_35 =
                    Some(
                        crate::xml_deser::deser_structure_federated_user(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_federated_user(var_35);
            }
            ,
            s if s.matches("PackedPolicySize") /* PackedPolicySize com.amazonaws.sts#GetFederationTokenOutput$PackedPolicySize */ =>  {
                let var_36 =
                    Some(
                         {
                            <i32 as smithy_types::primitive::Parse>::parse_smithy_primitive(
                                smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            )
                            .map_err(|_|smithy_xml::decode::XmlError::custom("expected (integer: `com.amazonaws.sts#nonNegativeIntegerType`)"))
                        }
                        ?
                    )
                ;
                builder = builder.set_packed_policy_size(var_36);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetFederationTokenResult tag",
        ));
    };
    Ok(builder)
}

#[allow(unused_mut)]
pub fn deser_operation_get_session_token(
    inp: &[u8],
    mut builder: crate::output::get_session_token_output::Builder,
) -> Result<crate::output::get_session_token_output::Builder, smithy_xml::decode::XmlError> {
    use std::convert::TryFrom;
    let mut doc = smithy_xml::decode::Document::try_from(inp)?;

    #[allow(unused_mut)]
    let mut decoder = doc.root_element()?;
    let start_el = decoder.start_el();
    if !(start_el.matches("GetSessionTokenResponse")) {
        return Err(smithy_xml::decode::XmlError::custom(format!(
            "invalid root, expected GetSessionTokenResponse got {:?}",
            start_el
        )));
    }
    if let Some(mut result_tag) = decoder.next_tag() {
        let start_el = result_tag.start_el();
        if !(start_el.matches("GetSessionTokenResult")) {
            return Err(smithy_xml::decode::XmlError::custom(format!(
                "invalid result, expected GetSessionTokenResult got {:?}",
                start_el
            )));
        }
        while let Some(mut tag) = result_tag.next_tag() {
            match tag.start_el() {
            s if s.matches("Credentials") /* Credentials com.amazonaws.sts#GetSessionTokenOutput$Credentials */ =>  {
                let var_37 =
                    Some(
                        crate::xml_deser::deser_structure_credentials(&mut tag)
                        ?
                    )
                ;
                builder = builder.set_credentials(var_37);
            }
            ,
            _ => {}
        }
        }
    } else {
        return Err(smithy_xml::decode::XmlError::custom(
            "expected GetSessionTokenResult tag",
        ));
    };
    Ok(builder)
}

pub fn deser_structure_credentials(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::Credentials, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::Credentials::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AccessKeyId") /* AccessKeyId com.amazonaws.sts#Credentials$AccessKeyId */ =>  {
                let var_38 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_access_key_id(var_38);
            }
            ,
            s if s.matches("SecretAccessKey") /* SecretAccessKey com.amazonaws.sts#Credentials$SecretAccessKey */ =>  {
                let var_39 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_secret_access_key(var_39);
            }
            ,
            s if s.matches("SessionToken") /* SessionToken com.amazonaws.sts#Credentials$SessionToken */ =>  {
                let var_40 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_session_token(var_40);
            }
            ,
            s if s.matches("Expiration") /* Expiration com.amazonaws.sts#Credentials$Expiration */ =>  {
                let var_41 =
                    Some(
                        smithy_types::Instant::from_str(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            , smithy_types::instant::Format::DateTime
                        )
                        .map_err(|_|smithy_xml::decode::XmlError::custom("expected (timestamp: `com.amazonaws.sts#dateType`)"))
                        ?
                    )
                ;
                builder = builder.set_expiration(var_41);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_assumed_role_user(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::AssumedRoleUser, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::AssumedRoleUser::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("AssumedRoleId") /* AssumedRoleId com.amazonaws.sts#AssumedRoleUser$AssumedRoleId */ =>  {
                let var_42 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_assumed_role_id(var_42);
            }
            ,
            s if s.matches("Arn") /* Arn com.amazonaws.sts#AssumedRoleUser$Arn */ =>  {
                let var_43 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_43);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}

pub fn deser_structure_federated_user(
    decoder: &mut smithy_xml::decode::ScopedDecoder,
) -> Result<crate::model::FederatedUser, smithy_xml::decode::XmlError> {
    #[allow(unused_mut)]
    let mut builder = crate::model::FederatedUser::builder();
    while let Some(mut tag) = decoder.next_tag() {
        match tag.start_el() {
            s if s.matches("FederatedUserId") /* FederatedUserId com.amazonaws.sts#FederatedUser$FederatedUserId */ =>  {
                let var_44 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_federated_user_id(var_44);
            }
            ,
            s if s.matches("Arn") /* Arn com.amazonaws.sts#FederatedUser$Arn */ =>  {
                let var_45 =
                    Some(
                        Result::<std::string::String, smithy_xml::decode::XmlError>::Ok(
                            smithy_xml::decode::try_data(&mut tag)?.as_ref()
                            .into()
                        )
                        ?
                    )
                ;
                builder = builder.set_arn(var_45);
            }
            ,
            _ => {}
        }
    }
    Ok(builder.build())
}
