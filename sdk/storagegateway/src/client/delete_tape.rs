// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteTape`](crate::operation::delete_tape::builders::DeleteTapeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`gateway_arn(impl Into<String>)`](crate::operation::delete_tape::builders::DeleteTapeFluentBuilder::gateway_arn) / [`set_gateway_arn(Option<String>)`](crate::operation::delete_tape::builders::DeleteTapeFluentBuilder::set_gateway_arn): <p>The unique Amazon Resource Name (ARN) of the gateway that the virtual tape to delete is associated with. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    ///   - [`tape_arn(impl Into<String>)`](crate::operation::delete_tape::builders::DeleteTapeFluentBuilder::tape_arn) / [`set_tape_arn(Option<String>)`](crate::operation::delete_tape::builders::DeleteTapeFluentBuilder::set_tape_arn): <p>The Amazon Resource Name (ARN) of the virtual tape to delete.</p>
    ///   - [`bypass_governance_retention(bool)`](crate::operation::delete_tape::builders::DeleteTapeFluentBuilder::bypass_governance_retention) / [`set_bypass_governance_retention(bool)`](crate::operation::delete_tape::builders::DeleteTapeFluentBuilder::set_bypass_governance_retention): <p>Set to <code>TRUE</code> to delete an archived tape that belongs to a custom pool with tape retention lock. Only archived tapes with tape retention lock set to <code>governance</code> can be deleted. Archived tapes with tape retention lock set to <code>compliance</code> can't be deleted.</p>
    /// - On success, responds with [`DeleteTapeOutput`](crate::operation::delete_tape::DeleteTapeOutput) with field(s):
    ///   - [`tape_arn(Option<String>)`](crate::operation::delete_tape::DeleteTapeOutput::tape_arn): <p>The Amazon Resource Name (ARN) of the deleted virtual tape.</p>
    /// - On failure, responds with [`SdkError<DeleteTapeError>`](crate::operation::delete_tape::DeleteTapeError)
    pub fn delete_tape(&self) -> crate::operation::delete_tape::builders::DeleteTapeFluentBuilder {
        crate::operation::delete_tape::builders::DeleteTapeFluentBuilder::new(self.handle.clone())
    }
}
