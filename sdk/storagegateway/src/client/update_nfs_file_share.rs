// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`UpdateNFSFileShare`](crate::client::fluent_builders::UpdateNFSFileShare) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`file_share_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::file_share_arn) / [`set_file_share_arn(Option<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_file_share_arn): <p>The Amazon Resource Name (ARN) of the file share to be updated.</p>
    ///   - [`kms_encrypted(bool)`](crate::client::fluent_builders::UpdateNFSFileShare::kms_encrypted) / [`set_kms_encrypted(Option<bool>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_kms_encrypted): <p>Set to <code>true</code> to use Amazon S3 server-side encryption with your own KMS key, or <code>false</code> to use a key managed by Amazon S3. Optional.</p>  <p>Valid Values: <code>true</code> | <code>false</code> </p>
    ///   - [`kms_key(impl Into<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::kms_key) / [`set_kms_key(Option<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_kms_key): <p>The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.</p>
    ///   - [`nfs_file_share_defaults(NfsFileShareDefaults)`](crate::client::fluent_builders::UpdateNFSFileShare::nfs_file_share_defaults) / [`set_nfs_file_share_defaults(Option<NfsFileShareDefaults>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_nfs_file_share_defaults): <p>The default values for the file share. Optional.</p>
    ///   - [`default_storage_class(impl Into<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::default_storage_class) / [`set_default_storage_class(Option<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_default_storage_class): <p>The default storage class for objects put into an Amazon S3 bucket by the S3 File Gateway. The default value is <code>S3_STANDARD</code>. Optional.</p>  <p>Valid Values: <code>S3_STANDARD</code> | <code>S3_INTELLIGENT_TIERING</code> | <code>S3_STANDARD_IA</code> | <code>S3_ONEZONE_IA</code> </p>
    ///   - [`object_acl(ObjectAcl)`](crate::client::fluent_builders::UpdateNFSFileShare::object_acl) / [`set_object_acl(Option<ObjectAcl>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_object_acl): <p>A value that sets the access control list (ACL) permission for objects in the S3 bucket that a S3 File Gateway puts objects into. The default value is <code>private</code>.</p>
    ///   - [`client_list(Vec<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::client_list) / [`set_client_list(Option<Vec<String>>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_client_list): <p>The list of clients that are allowed to access the S3 File Gateway. The list must contain either valid IP addresses or valid CIDR blocks.</p>
    ///   - [`squash(impl Into<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::squash) / [`set_squash(Option<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_squash): <p>The user mapped to anonymous user.</p>  <p>Valid values are the following:</p>  <ul>   <li> <p> <code>RootSquash</code>: Only root is mapped to anonymous user.</p> </li>   <li> <p> <code>NoSquash</code>: No one is mapped to anonymous user.</p> </li>   <li> <p> <code>AllSquash</code>: Everyone is mapped to anonymous user.</p> </li>  </ul>
    ///   - [`read_only(bool)`](crate::client::fluent_builders::UpdateNFSFileShare::read_only) / [`set_read_only(Option<bool>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_read_only): <p>A value that sets the write status of a file share. Set this value to <code>true</code> to set the write status to read-only, otherwise set to <code>false</code>.</p>  <p>Valid Values: <code>true</code> | <code>false</code> </p>
    ///   - [`guess_mime_type_enabled(bool)`](crate::client::fluent_builders::UpdateNFSFileShare::guess_mime_type_enabled) / [`set_guess_mime_type_enabled(Option<bool>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_guess_mime_type_enabled): <p>A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to <code>true</code> to enable MIME type guessing, otherwise set to <code>false</code>. The default value is <code>true</code>.</p>  <p>Valid Values: <code>true</code> | <code>false</code> </p>
    ///   - [`requester_pays(bool)`](crate::client::fluent_builders::UpdateNFSFileShare::requester_pays) / [`set_requester_pays(Option<bool>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_requester_pays): <p>A value that sets who pays the cost of the request and the cost associated with data download from the S3 bucket. If this value is set to <code>true</code>, the requester pays the costs; otherwise, the S3 bucket owner pays. However, the S3 bucket owner always pays the cost of storing data.</p> <note>   <p> <code>RequesterPays</code> is a configuration for the S3 bucket that backs the file share, so make sure that the configuration on the file share is the same as the S3 bucket configuration.</p>  </note>  <p>Valid Values: <code>true</code> | <code>false</code> </p>
    ///   - [`file_share_name(impl Into<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::file_share_name) / [`set_file_share_name(Option<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_file_share_name): <p>The name of the file share. Optional.</p> <note>   <p> <code>FileShareName</code> must be set if an S3 prefix name is set in <code>LocationARN</code>, or if an access point or access point alias is used.</p>  </note>
    ///   - [`cache_attributes(CacheAttributes)`](crate::client::fluent_builders::UpdateNFSFileShare::cache_attributes) / [`set_cache_attributes(Option<CacheAttributes>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_cache_attributes): <p>Specifies refresh cache information for the file share.</p>
    ///   - [`notification_policy(impl Into<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::notification_policy) / [`set_notification_policy(Option<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_notification_policy): <p>The notification policy of the file share. <code>SettlingTimeInSeconds</code> controls the number of seconds to wait after the last point in time a client wrote to a file before generating an <code>ObjectUploaded</code> notification. Because clients can make many small writes to files, it's best to set this parameter for as long as possible to avoid generating multiple notifications for the same file in a small time period.</p> <note>   <p> <code>SettlingTimeInSeconds</code> has no effect on the timing of the object uploading to Amazon S3, only the timing of the notification.</p>  </note>  <p>The following example sets <code>NotificationPolicy</code> on with <code>SettlingTimeInSeconds</code> set to 60.</p>  <p> <code>{\"Upload\": {\"SettlingTimeInSeconds\": 60}}</code> </p>  <p>The following example sets <code>NotificationPolicy</code> off.</p>  <p> <code>{}</code> </p>
    ///   - [`audit_destination_arn(impl Into<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::audit_destination_arn) / [`set_audit_destination_arn(Option<String>)`](crate::client::fluent_builders::UpdateNFSFileShare::set_audit_destination_arn): <p>The Amazon Resource Name (ARN) of the storage used for audit logs.</p>
    /// - On success, responds with [`UpdateNfsFileShareOutput`](crate::output::UpdateNfsFileShareOutput) with field(s):
    ///   - [`file_share_arn(Option<String>)`](crate::output::UpdateNfsFileShareOutput::file_share_arn): <p>The Amazon Resource Name (ARN) of the updated file share.</p>
    /// - On failure, responds with [`SdkError<UpdateNFSFileShareError>`](crate::error::UpdateNFSFileShareError)
    pub fn update_nfs_file_share(&self) -> crate::client::fluent_builders::UpdateNFSFileShare {
        crate::client::fluent_builders::UpdateNFSFileShare::new(self.handle.clone())
    }
}
