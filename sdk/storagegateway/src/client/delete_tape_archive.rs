// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteTapeArchive`](crate::operation::delete_tape_archive::builders::DeleteTapeArchiveFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tape_arn(impl Into<String>)`](crate::operation::delete_tape_archive::builders::DeleteTapeArchiveFluentBuilder::tape_arn) / [`set_tape_arn(Option<String>)`](crate::operation::delete_tape_archive::builders::DeleteTapeArchiveFluentBuilder::set_tape_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).</p><br>
    ///   - [`bypass_governance_retention(bool)`](crate::operation::delete_tape_archive::builders::DeleteTapeArchiveFluentBuilder::bypass_governance_retention) / [`set_bypass_governance_retention(Option<bool>)`](crate::operation::delete_tape_archive::builders::DeleteTapeArchiveFluentBuilder::set_bypass_governance_retention):<br>required: **false**<br><p>Set to <code>TRUE</code> to delete an archived tape that belongs to a custom pool with tape retention lock. Only archived tapes with tape retention lock set to <code>governance</code> can be deleted. Archived tapes with tape retention lock set to <code>compliance</code> can't be deleted.</p><br>
    /// - On success, responds with [`DeleteTapeArchiveOutput`](crate::operation::delete_tape_archive::DeleteTapeArchiveOutput) with field(s):
    ///   - [`tape_arn(Option<String>)`](crate::operation::delete_tape_archive::DeleteTapeArchiveOutput::tape_arn): <p>The Amazon Resource Name (ARN) of the virtual tape that was deleted from the virtual tape shelf (VTS).</p>
    /// - On failure, responds with [`SdkError<DeleteTapeArchiveError>`](crate::operation::delete_tape_archive::DeleteTapeArchiveError)
    pub fn delete_tape_archive(&self) -> crate::operation::delete_tape_archive::builders::DeleteTapeArchiveFluentBuilder {
        crate::operation::delete_tape_archive::builders::DeleteTapeArchiveFluentBuilder::new(self.handle.clone())
    }
}
