// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`ListTapes`](crate::client::fluent_builders::ListTapes) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListTapes::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`tape_ar_ns(Vec<String>)`](crate::client::fluent_builders::ListTapes::tape_ar_ns) / [`set_tape_ar_ns(Option<Vec<String>>)`](crate::client::fluent_builders::ListTapes::set_tape_ar_ns): <p>The Amazon Resource Name (ARN) of each of the tapes you want to list. If you don't specify a tape ARN, the response lists all tapes in both your VTL and VTS.</p>
    ///   - [`marker(impl Into<String>)`](crate::client::fluent_builders::ListTapes::marker) / [`set_marker(Option<String>)`](crate::client::fluent_builders::ListTapes::set_marker): <p>A string that indicates the position at which to begin the returned list of tapes.</p>
    ///   - [`limit(i32)`](crate::client::fluent_builders::ListTapes::limit) / [`set_limit(Option<i32>)`](crate::client::fluent_builders::ListTapes::set_limit): <p>An optional number limit for the tapes in the list returned by this call.</p>
    /// - On success, responds with [`ListTapesOutput`](crate::output::ListTapesOutput) with field(s):
    ///   - [`tape_infos(Option<Vec<TapeInfo>>)`](crate::output::ListTapesOutput::tape_infos): <p>An array of <code>TapeInfo</code> objects, where each object describes a single tape. If there are no tapes in the tape library or VTS, then the <code>TapeInfos</code> is an empty array.</p>
    ///   - [`marker(Option<String>)`](crate::output::ListTapesOutput::marker): <p>A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.</p>
    /// - On failure, responds with [`SdkError<ListTapesError>`](crate::error::ListTapesError)
    pub fn list_tapes(&self) -> crate::client::fluent_builders::ListTapes {
        crate::client::fluent_builders::ListTapes::new(self.handle.clone())
    }
}
