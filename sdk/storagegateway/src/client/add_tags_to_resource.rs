// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`AddTagsToResource`](crate::operation::add_tags_to_resource::builders::AddTagsToResourceFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::operation::add_tags_to_resource::builders::AddTagsToResourceFluentBuilder::resource_arn) / [`set_resource_arn(Option<String>)`](crate::operation::add_tags_to_resource::builders::AddTagsToResourceFluentBuilder::set_resource_arn):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the resource you want to add tags to.</p><br>
    ///   - [`tags(Tag)`](crate::operation::add_tags_to_resource::builders::AddTagsToResourceFluentBuilder::tags) / [`set_tags(Option<Vec::<Tag>>)`](crate::operation::add_tags_to_resource::builders::AddTagsToResourceFluentBuilder::set_tags):<br>required: **true**<br><p>The key-value pair that represents the tag you want to add to the resource. The value can be an empty string.</p> <note>   <p>Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256.</p>  </note><br>
    /// - On success, responds with [`AddTagsToResourceOutput`](crate::operation::add_tags_to_resource::AddTagsToResourceOutput) with field(s):
    ///   - [`resource_arn(Option<String>)`](crate::operation::add_tags_to_resource::AddTagsToResourceOutput::resource_arn): <p>The Amazon Resource Name (ARN) of the resource you want to add tags to.</p>
    /// - On failure, responds with [`SdkError<AddTagsToResourceError>`](crate::operation::add_tags_to_resource::AddTagsToResourceError)
    pub fn add_tags_to_resource(&self) -> crate::operation::add_tags_to_resource::builders::AddTagsToResourceFluentBuilder {
        crate::operation::add_tags_to_resource::builders::AddTagsToResourceFluentBuilder::new(self.handle.clone())
    }
}
