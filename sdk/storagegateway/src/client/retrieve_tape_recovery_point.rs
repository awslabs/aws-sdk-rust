// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RetrieveTapeRecoveryPoint`](crate::operation::retrieve_tape_recovery_point::builders::RetrieveTapeRecoveryPointFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tape_arn(impl Into<String>)`](crate::operation::retrieve_tape_recovery_point::builders::RetrieveTapeRecoveryPointFluentBuilder::tape_arn) / [`set_tape_arn(Option<String>)`](crate::operation::retrieve_tape_recovery_point::builders::RetrieveTapeRecoveryPointFluentBuilder::set_tape_arn): <p>The Amazon Resource Name (ARN) of the virtual tape for which you want to retrieve the recovery point.</p>
    ///   - [`gateway_arn(impl Into<String>)`](crate::operation::retrieve_tape_recovery_point::builders::RetrieveTapeRecoveryPointFluentBuilder::gateway_arn) / [`set_gateway_arn(Option<String>)`](crate::operation::retrieve_tape_recovery_point::builders::RetrieveTapeRecoveryPointFluentBuilder::set_gateway_arn): <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    /// - On success, responds with [`RetrieveTapeRecoveryPointOutput`](crate::operation::retrieve_tape_recovery_point::RetrieveTapeRecoveryPointOutput) with field(s):
    ///   - [`tape_arn(Option<String>)`](crate::operation::retrieve_tape_recovery_point::RetrieveTapeRecoveryPointOutput::tape_arn): <p>The Amazon Resource Name (ARN) of the virtual tape for which the recovery point was retrieved.</p>
    /// - On failure, responds with [`SdkError<RetrieveTapeRecoveryPointError>`](crate::operation::retrieve_tape_recovery_point::RetrieveTapeRecoveryPointError)
    pub fn retrieve_tape_recovery_point(&self) -> crate::operation::retrieve_tape_recovery_point::builders::RetrieveTapeRecoveryPointFluentBuilder{
        crate::operation::retrieve_tape_recovery_point::builders::RetrieveTapeRecoveryPointFluentBuilder::new(self.handle.clone())
    }
}
