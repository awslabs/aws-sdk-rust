// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`RetrieveTapeArchive`](crate::operation::retrieve_tape_archive::builders::RetrieveTapeArchiveFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`tape_arn(impl Into<String>)`](crate::operation::retrieve_tape_archive::builders::RetrieveTapeArchiveFluentBuilder::tape_arn) / [`set_tape_arn(Option<String>)`](crate::operation::retrieve_tape_archive::builders::RetrieveTapeArchiveFluentBuilder::set_tape_arn): <p>The Amazon Resource Name (ARN) of the virtual tape you want to retrieve from the virtual tape shelf (VTS).</p>
    ///   - [`gateway_arn(impl Into<String>)`](crate::operation::retrieve_tape_archive::builders::RetrieveTapeArchiveFluentBuilder::gateway_arn) / [`set_gateway_arn(Option<String>)`](crate::operation::retrieve_tape_archive::builders::RetrieveTapeArchiveFluentBuilder::set_gateway_arn): <p>The Amazon Resource Name (ARN) of the gateway you want to retrieve the virtual tape to. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>  <p>You retrieve archived virtual tapes to only one gateway and the gateway must be a tape gateway.</p>
    /// - On success, responds with [`RetrieveTapeArchiveOutput`](crate::operation::retrieve_tape_archive::RetrieveTapeArchiveOutput) with field(s):
    ///   - [`tape_arn(Option<String>)`](crate::operation::retrieve_tape_archive::RetrieveTapeArchiveOutput::tape_arn): <p>The Amazon Resource Name (ARN) of the retrieved virtual tape.</p>
    /// - On failure, responds with [`SdkError<RetrieveTapeArchiveError>`](crate::operation::retrieve_tape_archive::RetrieveTapeArchiveError)
    pub fn retrieve_tape_archive(
        &self,
    ) -> crate::operation::retrieve_tape_archive::builders::RetrieveTapeArchiveFluentBuilder {
        crate::operation::retrieve_tape_archive::builders::RetrieveTapeArchiveFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
