// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_describe_tape_archives_output_marker(
    input: &crate::output::DescribeTapeArchivesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_tape_recovery_points_output_marker(
    input: &crate::output::DescribeTapeRecoveryPointsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_tapes_output_marker(
    input: &crate::output::DescribeTapesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_describe_vtl_devices_output_marker(
    input: &crate::output::DescribeVtlDevicesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_file_shares_output_next_marker(
    input: &crate::output::ListFileSharesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_file_system_associations_output_next_marker(
    input: &crate::output::ListFileSystemAssociationsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_gateways_output_marker(
    input: &crate::output::ListGatewaysOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tags_for_resource_output_marker(
    input: &crate::output::ListTagsForResourceOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tape_pools_output_marker(
    input: &crate::output::ListTapePoolsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_tapes_output_marker(
    input: &crate::output::ListTapesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_volumes_output_marker(
    input: &crate::output::ListVolumesOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.marker {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_tape_archives_output_tape_archives(
    input: crate::output::DescribeTapeArchivesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TapeArchive>> {
    let input = match input.tape_archives {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_tape_recovery_points_output_tape_recovery_point_infos(
    input: crate::output::DescribeTapeRecoveryPointsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TapeRecoveryPointInfo>> {
    let input = match input.tape_recovery_point_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_tapes_output_tapes(
    input: crate::output::DescribeTapesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Tape>> {
    let input = match input.tapes {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_describe_vtl_devices_output_vtl_devices(
    input: crate::output::DescribeVtlDevicesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::VtlDevice>> {
    let input = match input.vtl_devices {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_file_shares_output_file_share_info_list(
    input: crate::output::ListFileSharesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FileShareInfo>> {
    let input = match input.file_share_info_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_file_system_associations_output_file_system_association_summary_list(
    input: crate::output::ListFileSystemAssociationsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::FileSystemAssociationSummary>> {
    let input = match input.file_system_association_summary_list {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_gateways_output_gateways(
    input: crate::output::ListGatewaysOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GatewayInfo>> {
    let input = match input.gateways {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_tags_for_resource_output_tags(
    input: crate::output::ListTagsForResourceOutput,
) -> std::option::Option<std::vec::Vec<crate::model::Tag>> {
    let input = match input.tags {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_tape_pools_output_pool_infos(
    input: crate::output::ListTapePoolsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::PoolInfo>> {
    let input = match input.pool_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_tapes_output_tape_infos(
    input: crate::output::ListTapesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::TapeInfo>> {
    let input = match input.tape_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_volumes_output_volume_infos(
    input: crate::output::ListVolumesOutput,
) -> std::option::Option<std::vec::Vec<crate::model::VolumeInfo>> {
    let input = match input.volume_infos {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
