// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an iSCSI stored volume.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct StorediScsiVolume {
    /// <p>The Amazon Resource Name (ARN) of the storage volume.</p>
    #[doc(hidden)]
    pub volume_arn: std::option::Option<std::string::String>,
    /// <p>The unique identifier of the volume, e.g., vol-AE4B946D.</p>
    #[doc(hidden)]
    pub volume_id: std::option::Option<std::string::String>,
    /// <p>One of the VolumeType enumeration values describing the type of the volume.</p>
    #[doc(hidden)]
    pub volume_type: std::option::Option<std::string::String>,
    /// <p>One of the VolumeStatus values that indicates the state of the storage volume.</p>
    #[doc(hidden)]
    pub volume_status: std::option::Option<std::string::String>,
    /// <p>A value that indicates whether a storage volume is attached to, detached from, or is in the process of detaching from a gateway. For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-volumes.html#attach-detach-volume">Moving your volumes to a different gateway</a>.</p>
    #[doc(hidden)]
    pub volume_attachment_status: std::option::Option<std::string::String>,
    /// <p>The size of the volume in bytes.</p>
    #[doc(hidden)]
    pub volume_size_in_bytes: i64,
    /// <p>Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.</p>
    #[doc(hidden)]
    pub volume_progress: std::option::Option<f64>,
    /// <p>The ID of the local disk that was specified in the <code>CreateStorediSCSIVolume</code> operation.</p>
    #[doc(hidden)]
    pub volume_disk_id: std::option::Option<std::string::String>,
    /// <p>If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.</p>
    #[doc(hidden)]
    pub source_snapshot_id: std::option::Option<std::string::String>,
    /// <p>Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.</p>
    /// <p>Valid Values: <code>true</code> | <code>false</code> </p>
    #[doc(hidden)]
    pub preserved_existing_data: bool,
    /// <p>An <code>VolumeiSCSIAttributes</code> object that represents a collection of iSCSI attributes for one stored volume.</p>
    #[doc(hidden)]
    pub volumei_scsi_attributes: std::option::Option<crate::types::VolumeiScsiAttributes>,
    /// <p>The date the volume was created. Volumes created prior to March 28, 2017 don’t have this timestamp.</p>
    #[doc(hidden)]
    pub created_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The size of the data stored on the volume in bytes. This value is calculated based on the number of blocks that are touched, instead of the actual amount of data written. This value can be useful for sequential write patterns but less accurate for random write patterns. <code>VolumeUsedInBytes</code> is different from the compressed size of the volume, which is the value that is used to calculate your bill.</p> <note>
    /// <p>This value is not available for volumes created prior to May 13, 2015, until you store data on the volume.</p>
    /// </note>
    #[doc(hidden)]
    pub volume_used_in_bytes: std::option::Option<i64>,
    /// <p>The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.</p>
    #[doc(hidden)]
    pub kms_key: std::option::Option<std::string::String>,
    /// <p>The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying <code>TargetName</code> as <i>myvolume</i> results in the target ARN of <code>arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume</code>. The target name must be unique across all volumes on a gateway.</p>
    /// <p>If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.</p>
    #[doc(hidden)]
    pub target_name: std::option::Option<std::string::String>,
}
impl StorediScsiVolume {
    /// <p>The Amazon Resource Name (ARN) of the storage volume.</p>
    pub fn volume_arn(&self) -> std::option::Option<&str> {
        self.volume_arn.as_deref()
    }
    /// <p>The unique identifier of the volume, e.g., vol-AE4B946D.</p>
    pub fn volume_id(&self) -> std::option::Option<&str> {
        self.volume_id.as_deref()
    }
    /// <p>One of the VolumeType enumeration values describing the type of the volume.</p>
    pub fn volume_type(&self) -> std::option::Option<&str> {
        self.volume_type.as_deref()
    }
    /// <p>One of the VolumeStatus values that indicates the state of the storage volume.</p>
    pub fn volume_status(&self) -> std::option::Option<&str> {
        self.volume_status.as_deref()
    }
    /// <p>A value that indicates whether a storage volume is attached to, detached from, or is in the process of detaching from a gateway. For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-volumes.html#attach-detach-volume">Moving your volumes to a different gateway</a>.</p>
    pub fn volume_attachment_status(&self) -> std::option::Option<&str> {
        self.volume_attachment_status.as_deref()
    }
    /// <p>The size of the volume in bytes.</p>
    pub fn volume_size_in_bytes(&self) -> i64 {
        self.volume_size_in_bytes
    }
    /// <p>Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.</p>
    pub fn volume_progress(&self) -> std::option::Option<f64> {
        self.volume_progress
    }
    /// <p>The ID of the local disk that was specified in the <code>CreateStorediSCSIVolume</code> operation.</p>
    pub fn volume_disk_id(&self) -> std::option::Option<&str> {
        self.volume_disk_id.as_deref()
    }
    /// <p>If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.</p>
    pub fn source_snapshot_id(&self) -> std::option::Option<&str> {
        self.source_snapshot_id.as_deref()
    }
    /// <p>Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.</p>
    /// <p>Valid Values: <code>true</code> | <code>false</code> </p>
    pub fn preserved_existing_data(&self) -> bool {
        self.preserved_existing_data
    }
    /// <p>An <code>VolumeiSCSIAttributes</code> object that represents a collection of iSCSI attributes for one stored volume.</p>
    pub fn volumei_scsi_attributes(
        &self,
    ) -> std::option::Option<&crate::types::VolumeiScsiAttributes> {
        self.volumei_scsi_attributes.as_ref()
    }
    /// <p>The date the volume was created. Volumes created prior to March 28, 2017 don’t have this timestamp.</p>
    pub fn created_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_date.as_ref()
    }
    /// <p>The size of the data stored on the volume in bytes. This value is calculated based on the number of blocks that are touched, instead of the actual amount of data written. This value can be useful for sequential write patterns but less accurate for random write patterns. <code>VolumeUsedInBytes</code> is different from the compressed size of the volume, which is the value that is used to calculate your bill.</p> <note>
    /// <p>This value is not available for volumes created prior to May 13, 2015, until you store data on the volume.</p>
    /// </note>
    pub fn volume_used_in_bytes(&self) -> std::option::Option<i64> {
        self.volume_used_in_bytes
    }
    /// <p>The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.</p>
    pub fn kms_key(&self) -> std::option::Option<&str> {
        self.kms_key.as_deref()
    }
    /// <p>The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying <code>TargetName</code> as <i>myvolume</i> results in the target ARN of <code>arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume</code>. The target name must be unique across all volumes on a gateway.</p>
    /// <p>If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.</p>
    pub fn target_name(&self) -> std::option::Option<&str> {
        self.target_name.as_deref()
    }
}
impl StorediScsiVolume {
    /// Creates a new builder-style object to manufacture [`StorediScsiVolume`](crate::types::StorediScsiVolume).
    pub fn builder() -> crate::types::builders::StorediScsiVolumeBuilder {
        crate::types::builders::StorediScsiVolumeBuilder::default()
    }
}

/// A builder for [`StorediScsiVolume`](crate::types::StorediScsiVolume).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct StorediScsiVolumeBuilder {
    pub(crate) volume_arn: std::option::Option<std::string::String>,
    pub(crate) volume_id: std::option::Option<std::string::String>,
    pub(crate) volume_type: std::option::Option<std::string::String>,
    pub(crate) volume_status: std::option::Option<std::string::String>,
    pub(crate) volume_attachment_status: std::option::Option<std::string::String>,
    pub(crate) volume_size_in_bytes: std::option::Option<i64>,
    pub(crate) volume_progress: std::option::Option<f64>,
    pub(crate) volume_disk_id: std::option::Option<std::string::String>,
    pub(crate) source_snapshot_id: std::option::Option<std::string::String>,
    pub(crate) preserved_existing_data: std::option::Option<bool>,
    pub(crate) volumei_scsi_attributes: std::option::Option<crate::types::VolumeiScsiAttributes>,
    pub(crate) created_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) volume_used_in_bytes: std::option::Option<i64>,
    pub(crate) kms_key: std::option::Option<std::string::String>,
    pub(crate) target_name: std::option::Option<std::string::String>,
}
impl StorediScsiVolumeBuilder {
    /// <p>The Amazon Resource Name (ARN) of the storage volume.</p>
    pub fn volume_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the storage volume.</p>
    pub fn set_volume_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_arn = input;
        self
    }
    /// <p>The unique identifier of the volume, e.g., vol-AE4B946D.</p>
    pub fn volume_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_id = Some(input.into());
        self
    }
    /// <p>The unique identifier of the volume, e.g., vol-AE4B946D.</p>
    pub fn set_volume_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_id = input;
        self
    }
    /// <p>One of the VolumeType enumeration values describing the type of the volume.</p>
    pub fn volume_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_type = Some(input.into());
        self
    }
    /// <p>One of the VolumeType enumeration values describing the type of the volume.</p>
    pub fn set_volume_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_type = input;
        self
    }
    /// <p>One of the VolumeStatus values that indicates the state of the storage volume.</p>
    pub fn volume_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_status = Some(input.into());
        self
    }
    /// <p>One of the VolumeStatus values that indicates the state of the storage volume.</p>
    pub fn set_volume_status(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_status = input;
        self
    }
    /// <p>A value that indicates whether a storage volume is attached to, detached from, or is in the process of detaching from a gateway. For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-volumes.html#attach-detach-volume">Moving your volumes to a different gateway</a>.</p>
    pub fn volume_attachment_status(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_attachment_status = Some(input.into());
        self
    }
    /// <p>A value that indicates whether a storage volume is attached to, detached from, or is in the process of detaching from a gateway. For more information, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/managing-volumes.html#attach-detach-volume">Moving your volumes to a different gateway</a>.</p>
    pub fn set_volume_attachment_status(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.volume_attachment_status = input;
        self
    }
    /// <p>The size of the volume in bytes.</p>
    pub fn volume_size_in_bytes(mut self, input: i64) -> Self {
        self.volume_size_in_bytes = Some(input);
        self
    }
    /// <p>The size of the volume in bytes.</p>
    pub fn set_volume_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.volume_size_in_bytes = input;
        self
    }
    /// <p>Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.</p>
    pub fn volume_progress(mut self, input: f64) -> Self {
        self.volume_progress = Some(input);
        self
    }
    /// <p>Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.</p>
    pub fn set_volume_progress(mut self, input: std::option::Option<f64>) -> Self {
        self.volume_progress = input;
        self
    }
    /// <p>The ID of the local disk that was specified in the <code>CreateStorediSCSIVolume</code> operation.</p>
    pub fn volume_disk_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_disk_id = Some(input.into());
        self
    }
    /// <p>The ID of the local disk that was specified in the <code>CreateStorediSCSIVolume</code> operation.</p>
    pub fn set_volume_disk_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_disk_id = input;
        self
    }
    /// <p>If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.</p>
    pub fn source_snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_snapshot_id = Some(input.into());
        self
    }
    /// <p>If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.</p>
    pub fn set_source_snapshot_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_snapshot_id = input;
        self
    }
    /// <p>Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.</p>
    /// <p>Valid Values: <code>true</code> | <code>false</code> </p>
    pub fn preserved_existing_data(mut self, input: bool) -> Self {
        self.preserved_existing_data = Some(input);
        self
    }
    /// <p>Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.</p>
    /// <p>Valid Values: <code>true</code> | <code>false</code> </p>
    pub fn set_preserved_existing_data(mut self, input: std::option::Option<bool>) -> Self {
        self.preserved_existing_data = input;
        self
    }
    /// <p>An <code>VolumeiSCSIAttributes</code> object that represents a collection of iSCSI attributes for one stored volume.</p>
    pub fn volumei_scsi_attributes(mut self, input: crate::types::VolumeiScsiAttributes) -> Self {
        self.volumei_scsi_attributes = Some(input);
        self
    }
    /// <p>An <code>VolumeiSCSIAttributes</code> object that represents a collection of iSCSI attributes for one stored volume.</p>
    pub fn set_volumei_scsi_attributes(
        mut self,
        input: std::option::Option<crate::types::VolumeiScsiAttributes>,
    ) -> Self {
        self.volumei_scsi_attributes = input;
        self
    }
    /// <p>The date the volume was created. Volumes created prior to March 28, 2017 don’t have this timestamp.</p>
    pub fn created_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_date = Some(input);
        self
    }
    /// <p>The date the volume was created. Volumes created prior to March 28, 2017 don’t have this timestamp.</p>
    pub fn set_created_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_date = input;
        self
    }
    /// <p>The size of the data stored on the volume in bytes. This value is calculated based on the number of blocks that are touched, instead of the actual amount of data written. This value can be useful for sequential write patterns but less accurate for random write patterns. <code>VolumeUsedInBytes</code> is different from the compressed size of the volume, which is the value that is used to calculate your bill.</p> <note>
    /// <p>This value is not available for volumes created prior to May 13, 2015, until you store data on the volume.</p>
    /// </note>
    pub fn volume_used_in_bytes(mut self, input: i64) -> Self {
        self.volume_used_in_bytes = Some(input);
        self
    }
    /// <p>The size of the data stored on the volume in bytes. This value is calculated based on the number of blocks that are touched, instead of the actual amount of data written. This value can be useful for sequential write patterns but less accurate for random write patterns. <code>VolumeUsedInBytes</code> is different from the compressed size of the volume, which is the value that is used to calculate your bill.</p> <note>
    /// <p>This value is not available for volumes created prior to May 13, 2015, until you store data on the volume.</p>
    /// </note>
    pub fn set_volume_used_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.volume_used_in_bytes = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.</p>
    pub fn kms_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.kms_key = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value can only be set when <code>KMSEncrypted</code> is <code>true</code>. Optional.</p>
    pub fn set_kms_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.kms_key = input;
        self
    }
    /// <p>The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying <code>TargetName</code> as <i>myvolume</i> results in the target ARN of <code>arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume</code>. The target name must be unique across all volumes on a gateway.</p>
    /// <p>If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.</p>
    pub fn target_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_name = Some(input.into());
        self
    }
    /// <p>The name of the iSCSI target used by an initiator to connect to a volume and used as a suffix for the target ARN. For example, specifying <code>TargetName</code> as <i>myvolume</i> results in the target ARN of <code>arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume</code>. The target name must be unique across all volumes on a gateway.</p>
    /// <p>If you don't specify a value, Storage Gateway uses the value that was previously used for this volume as the new target name.</p>
    pub fn set_target_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_name = input;
        self
    }
    /// Consumes the builder and constructs a [`StorediScsiVolume`](crate::types::StorediScsiVolume).
    pub fn build(self) -> crate::types::StorediScsiVolume {
        crate::types::StorediScsiVolume {
            volume_arn: self.volume_arn,
            volume_id: self.volume_id,
            volume_type: self.volume_type,
            volume_status: self.volume_status,
            volume_attachment_status: self.volume_attachment_status,
            volume_size_in_bytes: self.volume_size_in_bytes.unwrap_or_default(),
            volume_progress: self.volume_progress,
            volume_disk_id: self.volume_disk_id,
            source_snapshot_id: self.source_snapshot_id,
            preserved_existing_data: self.preserved_existing_data.unwrap_or_default(),
            volumei_scsi_attributes: self.volumei_scsi_attributes,
            created_date: self.created_date,
            volume_used_in_bytes: self.volume_used_in_bytes,
            kms_key: self.kms_key,
            target_name: self.target_name,
        }
    }
}
