// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A set of variables indicating the software update preferences for the gateway.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SoftwareUpdatePreferences {
    /// <p>Indicates the automatic update policy for a gateway.</p>
    /// <p><code>ALL_VERSIONS</code> - Enables regular gateway maintenance updates.</p>
    /// <p><code>EMERGENCY_VERSIONS_ONLY</code> - Disables regular gateway maintenance updates. The gateway will still receive emergency version updates on rare occasions if necessary to remedy highly critical security or durability issues. You will be notified before an emergency version update is applied. These updates are applied during your gateway's scheduled maintenance window.</p>
    pub automatic_update_policy: ::std::option::Option<crate::types::AutomaticUpdatePolicy>,
}
impl SoftwareUpdatePreferences {
    /// <p>Indicates the automatic update policy for a gateway.</p>
    /// <p><code>ALL_VERSIONS</code> - Enables regular gateway maintenance updates.</p>
    /// <p><code>EMERGENCY_VERSIONS_ONLY</code> - Disables regular gateway maintenance updates. The gateway will still receive emergency version updates on rare occasions if necessary to remedy highly critical security or durability issues. You will be notified before an emergency version update is applied. These updates are applied during your gateway's scheduled maintenance window.</p>
    pub fn automatic_update_policy(&self) -> ::std::option::Option<&crate::types::AutomaticUpdatePolicy> {
        self.automatic_update_policy.as_ref()
    }
}
impl SoftwareUpdatePreferences {
    /// Creates a new builder-style object to manufacture [`SoftwareUpdatePreferences`](crate::types::SoftwareUpdatePreferences).
    pub fn builder() -> crate::types::builders::SoftwareUpdatePreferencesBuilder {
        crate::types::builders::SoftwareUpdatePreferencesBuilder::default()
    }
}

/// A builder for [`SoftwareUpdatePreferences`](crate::types::SoftwareUpdatePreferences).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SoftwareUpdatePreferencesBuilder {
    pub(crate) automatic_update_policy: ::std::option::Option<crate::types::AutomaticUpdatePolicy>,
}
impl SoftwareUpdatePreferencesBuilder {
    /// <p>Indicates the automatic update policy for a gateway.</p>
    /// <p><code>ALL_VERSIONS</code> - Enables regular gateway maintenance updates.</p>
    /// <p><code>EMERGENCY_VERSIONS_ONLY</code> - Disables regular gateway maintenance updates. The gateway will still receive emergency version updates on rare occasions if necessary to remedy highly critical security or durability issues. You will be notified before an emergency version update is applied. These updates are applied during your gateway's scheduled maintenance window.</p>
    pub fn automatic_update_policy(mut self, input: crate::types::AutomaticUpdatePolicy) -> Self {
        self.automatic_update_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates the automatic update policy for a gateway.</p>
    /// <p><code>ALL_VERSIONS</code> - Enables regular gateway maintenance updates.</p>
    /// <p><code>EMERGENCY_VERSIONS_ONLY</code> - Disables regular gateway maintenance updates. The gateway will still receive emergency version updates on rare occasions if necessary to remedy highly critical security or durability issues. You will be notified before an emergency version update is applied. These updates are applied during your gateway's scheduled maintenance window.</p>
    pub fn set_automatic_update_policy(mut self, input: ::std::option::Option<crate::types::AutomaticUpdatePolicy>) -> Self {
        self.automatic_update_policy = input;
        self
    }
    /// <p>Indicates the automatic update policy for a gateway.</p>
    /// <p><code>ALL_VERSIONS</code> - Enables regular gateway maintenance updates.</p>
    /// <p><code>EMERGENCY_VERSIONS_ONLY</code> - Disables regular gateway maintenance updates. The gateway will still receive emergency version updates on rare occasions if necessary to remedy highly critical security or durability issues. You will be notified before an emergency version update is applied. These updates are applied during your gateway's scheduled maintenance window.</p>
    pub fn get_automatic_update_policy(&self) -> &::std::option::Option<crate::types::AutomaticUpdatePolicy> {
        &self.automatic_update_policy
    }
    /// Consumes the builder and constructs a [`SoftwareUpdatePreferences`](crate::types::SoftwareUpdatePreferences).
    pub fn build(self) -> crate::types::SoftwareUpdatePreferences {
        crate::types::SoftwareUpdatePreferences {
            automatic_update_policy: self.automatic_update_policy,
        }
    }
}
