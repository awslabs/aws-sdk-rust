// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a storage volume recovery point object.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VolumeRecoveryPointInfo {
    /// <p>The Amazon Resource Name (ARN) of the volume target.</p>
    #[doc(hidden)]
    pub volume_arn: std::option::Option<std::string::String>,
    /// <p>The size of the volume in bytes.</p>
    #[doc(hidden)]
    pub volume_size_in_bytes: i64,
    /// <p>The size of the data stored on the volume in bytes.</p> <note>
    /// <p>This value is not available for volumes created prior to May 13, 2015, until you store data on the volume.</p>
    /// </note>
    #[doc(hidden)]
    pub volume_usage_in_bytes: i64,
    /// <p>The time the recovery point was taken.</p>
    #[doc(hidden)]
    pub volume_recovery_point_time: std::option::Option<std::string::String>,
}
impl VolumeRecoveryPointInfo {
    /// <p>The Amazon Resource Name (ARN) of the volume target.</p>
    pub fn volume_arn(&self) -> std::option::Option<&str> {
        self.volume_arn.as_deref()
    }
    /// <p>The size of the volume in bytes.</p>
    pub fn volume_size_in_bytes(&self) -> i64 {
        self.volume_size_in_bytes
    }
    /// <p>The size of the data stored on the volume in bytes.</p> <note>
    /// <p>This value is not available for volumes created prior to May 13, 2015, until you store data on the volume.</p>
    /// </note>
    pub fn volume_usage_in_bytes(&self) -> i64 {
        self.volume_usage_in_bytes
    }
    /// <p>The time the recovery point was taken.</p>
    pub fn volume_recovery_point_time(&self) -> std::option::Option<&str> {
        self.volume_recovery_point_time.as_deref()
    }
}
impl VolumeRecoveryPointInfo {
    /// Creates a new builder-style object to manufacture [`VolumeRecoveryPointInfo`](crate::types::VolumeRecoveryPointInfo).
    pub fn builder() -> crate::types::builders::VolumeRecoveryPointInfoBuilder {
        crate::types::builders::VolumeRecoveryPointInfoBuilder::default()
    }
}

/// A builder for [`VolumeRecoveryPointInfo`](crate::types::VolumeRecoveryPointInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VolumeRecoveryPointInfoBuilder {
    pub(crate) volume_arn: std::option::Option<std::string::String>,
    pub(crate) volume_size_in_bytes: std::option::Option<i64>,
    pub(crate) volume_usage_in_bytes: std::option::Option<i64>,
    pub(crate) volume_recovery_point_time: std::option::Option<std::string::String>,
}
impl VolumeRecoveryPointInfoBuilder {
    /// <p>The Amazon Resource Name (ARN) of the volume target.</p>
    pub fn volume_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the volume target.</p>
    pub fn set_volume_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_arn = input;
        self
    }
    /// <p>The size of the volume in bytes.</p>
    pub fn volume_size_in_bytes(mut self, input: i64) -> Self {
        self.volume_size_in_bytes = Some(input);
        self
    }
    /// <p>The size of the volume in bytes.</p>
    pub fn set_volume_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.volume_size_in_bytes = input;
        self
    }
    /// <p>The size of the data stored on the volume in bytes.</p> <note>
    /// <p>This value is not available for volumes created prior to May 13, 2015, until you store data on the volume.</p>
    /// </note>
    pub fn volume_usage_in_bytes(mut self, input: i64) -> Self {
        self.volume_usage_in_bytes = Some(input);
        self
    }
    /// <p>The size of the data stored on the volume in bytes.</p> <note>
    /// <p>This value is not available for volumes created prior to May 13, 2015, until you store data on the volume.</p>
    /// </note>
    pub fn set_volume_usage_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.volume_usage_in_bytes = input;
        self
    }
    /// <p>The time the recovery point was taken.</p>
    pub fn volume_recovery_point_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_recovery_point_time = Some(input.into());
        self
    }
    /// <p>The time the recovery point was taken.</p>
    pub fn set_volume_recovery_point_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.volume_recovery_point_time = input;
        self
    }
    /// Consumes the builder and constructs a [`VolumeRecoveryPointInfo`](crate::types::VolumeRecoveryPointInfo).
    pub fn build(self) -> crate::types::VolumeRecoveryPointInfo {
        crate::types::VolumeRecoveryPointInfo {
            volume_arn: self.volume_arn,
            volume_size_in_bytes: self.volume_size_in_bytes.unwrap_or_default(),
            volume_usage_in_bytes: self.volume_usage_in_bytes.unwrap_or_default(),
            volume_recovery_point_time: self.volume_recovery_point_time,
        }
    }
}
