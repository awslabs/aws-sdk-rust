// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A list of Active Directory users and groups that have special permissions for SMB file shares on the gateway.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SmbLocalGroups {
    /// <p>A list of Active Directory users and groups that have local Gateway Admin permissions. Acceptable formats include: <code>DOMAIN\User1</code>, <code>user1</code>, <code>DOMAIN\group1</code>, and <code>group1</code>.</p>
    /// <p>Gateway Admins can use the Shared Folders Microsoft Management Console snap-in to force-close files that are open and locked.</p>
    pub gateway_admins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SmbLocalGroups {
    /// <p>A list of Active Directory users and groups that have local Gateway Admin permissions. Acceptable formats include: <code>DOMAIN\User1</code>, <code>user1</code>, <code>DOMAIN\group1</code>, and <code>group1</code>.</p>
    /// <p>Gateway Admins can use the Shared Folders Microsoft Management Console snap-in to force-close files that are open and locked.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gateway_admins.is_none()`.
    pub fn gateway_admins(&self) -> &[::std::string::String] {
        self.gateway_admins.as_deref().unwrap_or_default()
    }
}
impl SmbLocalGroups {
    /// Creates a new builder-style object to manufacture [`SmbLocalGroups`](crate::types::SmbLocalGroups).
    pub fn builder() -> crate::types::builders::SmbLocalGroupsBuilder {
        crate::types::builders::SmbLocalGroupsBuilder::default()
    }
}

/// A builder for [`SmbLocalGroups`](crate::types::SmbLocalGroups).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SmbLocalGroupsBuilder {
    pub(crate) gateway_admins: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl SmbLocalGroupsBuilder {
    /// Appends an item to `gateway_admins`.
    ///
    /// To override the contents of this collection use [`set_gateway_admins`](Self::set_gateway_admins).
    ///
    /// <p>A list of Active Directory users and groups that have local Gateway Admin permissions. Acceptable formats include: <code>DOMAIN\User1</code>, <code>user1</code>, <code>DOMAIN\group1</code>, and <code>group1</code>.</p>
    /// <p>Gateway Admins can use the Shared Folders Microsoft Management Console snap-in to force-close files that are open and locked.</p>
    pub fn gateway_admins(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.gateway_admins.unwrap_or_default();
        v.push(input.into());
        self.gateway_admins = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of Active Directory users and groups that have local Gateway Admin permissions. Acceptable formats include: <code>DOMAIN\User1</code>, <code>user1</code>, <code>DOMAIN\group1</code>, and <code>group1</code>.</p>
    /// <p>Gateway Admins can use the Shared Folders Microsoft Management Console snap-in to force-close files that are open and locked.</p>
    pub fn set_gateway_admins(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.gateway_admins = input;
        self
    }
    /// <p>A list of Active Directory users and groups that have local Gateway Admin permissions. Acceptable formats include: <code>DOMAIN\User1</code>, <code>user1</code>, <code>DOMAIN\group1</code>, and <code>group1</code>.</p>
    /// <p>Gateway Admins can use the Shared Folders Microsoft Management Console snap-in to force-close files that are open and locked.</p>
    pub fn get_gateway_admins(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.gateway_admins
    }
    /// Consumes the builder and constructs a [`SmbLocalGroups`](crate::types::SmbLocalGroups).
    pub fn build(self) -> crate::types::SmbLocalGroups {
        crate::types::SmbLocalGroups {
            gateway_admins: self.gateway_admins,
        }
    }
}
