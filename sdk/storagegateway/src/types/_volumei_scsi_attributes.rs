// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lists iSCSI information about a volume.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct VolumeiScsiAttributes {
    /// <p>The Amazon Resource Name (ARN) of the volume target.</p>
    #[doc(hidden)]
    pub target_arn: std::option::Option<std::string::String>,
    /// <p>The network interface identifier.</p>
    #[doc(hidden)]
    pub network_interface_id: std::option::Option<std::string::String>,
    /// <p>The port used to communicate with iSCSI targets.</p>
    #[doc(hidden)]
    pub network_interface_port: i32,
    /// <p>The logical disk number.</p>
    #[doc(hidden)]
    pub lun_number: std::option::Option<i32>,
    /// <p>Indicates whether mutual CHAP is enabled for the iSCSI target.</p>
    #[doc(hidden)]
    pub chap_enabled: bool,
}
impl VolumeiScsiAttributes {
    /// <p>The Amazon Resource Name (ARN) of the volume target.</p>
    pub fn target_arn(&self) -> std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The network interface identifier.</p>
    pub fn network_interface_id(&self) -> std::option::Option<&str> {
        self.network_interface_id.as_deref()
    }
    /// <p>The port used to communicate with iSCSI targets.</p>
    pub fn network_interface_port(&self) -> i32 {
        self.network_interface_port
    }
    /// <p>The logical disk number.</p>
    pub fn lun_number(&self) -> std::option::Option<i32> {
        self.lun_number
    }
    /// <p>Indicates whether mutual CHAP is enabled for the iSCSI target.</p>
    pub fn chap_enabled(&self) -> bool {
        self.chap_enabled
    }
}
impl VolumeiScsiAttributes {
    /// Creates a new builder-style object to manufacture [`VolumeiScsiAttributes`](crate::types::VolumeiScsiAttributes).
    pub fn builder() -> crate::types::builders::VolumeiScsiAttributesBuilder {
        crate::types::builders::VolumeiScsiAttributesBuilder::default()
    }
}

/// A builder for [`VolumeiScsiAttributes`](crate::types::VolumeiScsiAttributes).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct VolumeiScsiAttributesBuilder {
    pub(crate) target_arn: std::option::Option<std::string::String>,
    pub(crate) network_interface_id: std::option::Option<std::string::String>,
    pub(crate) network_interface_port: std::option::Option<i32>,
    pub(crate) lun_number: std::option::Option<i32>,
    pub(crate) chap_enabled: std::option::Option<bool>,
}
impl VolumeiScsiAttributesBuilder {
    /// <p>The Amazon Resource Name (ARN) of the volume target.</p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.target_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the volume target.</p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The network interface identifier.</p>
    pub fn network_interface_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.network_interface_id = Some(input.into());
        self
    }
    /// <p>The network interface identifier.</p>
    pub fn set_network_interface_id(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.network_interface_id = input;
        self
    }
    /// <p>The port used to communicate with iSCSI targets.</p>
    pub fn network_interface_port(mut self, input: i32) -> Self {
        self.network_interface_port = Some(input);
        self
    }
    /// <p>The port used to communicate with iSCSI targets.</p>
    pub fn set_network_interface_port(mut self, input: std::option::Option<i32>) -> Self {
        self.network_interface_port = input;
        self
    }
    /// <p>The logical disk number.</p>
    pub fn lun_number(mut self, input: i32) -> Self {
        self.lun_number = Some(input);
        self
    }
    /// <p>The logical disk number.</p>
    pub fn set_lun_number(mut self, input: std::option::Option<i32>) -> Self {
        self.lun_number = input;
        self
    }
    /// <p>Indicates whether mutual CHAP is enabled for the iSCSI target.</p>
    pub fn chap_enabled(mut self, input: bool) -> Self {
        self.chap_enabled = Some(input);
        self
    }
    /// <p>Indicates whether mutual CHAP is enabled for the iSCSI target.</p>
    pub fn set_chap_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.chap_enabled = input;
        self
    }
    /// Consumes the builder and constructs a [`VolumeiScsiAttributes`](crate::types::VolumeiScsiAttributes).
    pub fn build(self) -> crate::types::VolumeiScsiAttributes {
        crate::types::VolumeiScsiAttributes {
            target_arn: self.target_arn,
            network_interface_id: self.network_interface_id,
            network_interface_port: self.network_interface_port.unwrap_or_default(),
            lun_number: self.lun_number,
            chap_enabled: self.chap_enabled.unwrap_or_default(),
        }
    }
}
