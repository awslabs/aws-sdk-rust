// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Describes a bandwidth rate limit interval for a gateway. A bandwidth rate limit schedule consists of one or more bandwidth rate limit intervals. A bandwidth rate limit interval defines a period of time on one or more days of the week, during which bandwidth rate limits are specified for uploading, downloading, or both. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BandwidthRateLimitInterval {
    /// <p> The hour of the day to start the bandwidth rate limit interval. </p>
    pub start_hour_of_day: i32,
    /// <p> The minute of the hour to start the bandwidth rate limit interval. The interval begins at the start of that minute. To begin an interval exactly at the start of the hour, use the value <code>0</code>. </p>
    pub start_minute_of_hour: i32,
    /// <p> The hour of the day to end the bandwidth rate limit interval. </p>
    pub end_hour_of_day: i32,
    /// <p> The minute of the hour to end the bandwidth rate limit interval. </p> <important>
    /// <p> The bandwidth rate limit interval ends at the end of the minute. To end an interval at the end of an hour, use the value <code>59</code>. </p>
    /// </important>
    pub end_minute_of_hour: i32,
    /// <p> The days of the week component of the bandwidth rate limit interval, represented as ordinal numbers from 0 to 6, where 0 represents Sunday and 6 represents Saturday. </p>
    pub days_of_week: ::std::vec::Vec<i32>,
    /// <p> The average upload rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the upload rate limit is not set. </p> <note>
    /// <p>For Tape Gateway and Volume Gateway, the minimum value is <code>51200</code>.</p>
    /// <p>For S3 File Gateway and FSx File Gateway, the minimum value is <code>104857600</code>.</p>
    /// </note>
    pub average_upload_rate_limit_in_bits_per_sec: ::std::option::Option<i64>,
    /// <p> The average download rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the download rate limit is not set. </p>
    pub average_download_rate_limit_in_bits_per_sec: ::std::option::Option<i64>,
}
impl BandwidthRateLimitInterval {
    /// <p> The hour of the day to start the bandwidth rate limit interval. </p>
    pub fn start_hour_of_day(&self) -> i32 {
        self.start_hour_of_day
    }
    /// <p> The minute of the hour to start the bandwidth rate limit interval. The interval begins at the start of that minute. To begin an interval exactly at the start of the hour, use the value <code>0</code>. </p>
    pub fn start_minute_of_hour(&self) -> i32 {
        self.start_minute_of_hour
    }
    /// <p> The hour of the day to end the bandwidth rate limit interval. </p>
    pub fn end_hour_of_day(&self) -> i32 {
        self.end_hour_of_day
    }
    /// <p> The minute of the hour to end the bandwidth rate limit interval. </p> <important>
    /// <p> The bandwidth rate limit interval ends at the end of the minute. To end an interval at the end of an hour, use the value <code>59</code>. </p>
    /// </important>
    pub fn end_minute_of_hour(&self) -> i32 {
        self.end_minute_of_hour
    }
    /// <p> The days of the week component of the bandwidth rate limit interval, represented as ordinal numbers from 0 to 6, where 0 represents Sunday and 6 represents Saturday. </p>
    pub fn days_of_week(&self) -> &[i32] {
        use std::ops::Deref;
        self.days_of_week.deref()
    }
    /// <p> The average upload rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the upload rate limit is not set. </p> <note>
    /// <p>For Tape Gateway and Volume Gateway, the minimum value is <code>51200</code>.</p>
    /// <p>For S3 File Gateway and FSx File Gateway, the minimum value is <code>104857600</code>.</p>
    /// </note>
    pub fn average_upload_rate_limit_in_bits_per_sec(&self) -> ::std::option::Option<i64> {
        self.average_upload_rate_limit_in_bits_per_sec
    }
    /// <p> The average download rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the download rate limit is not set. </p>
    pub fn average_download_rate_limit_in_bits_per_sec(&self) -> ::std::option::Option<i64> {
        self.average_download_rate_limit_in_bits_per_sec
    }
}
impl BandwidthRateLimitInterval {
    /// Creates a new builder-style object to manufacture [`BandwidthRateLimitInterval`](crate::types::BandwidthRateLimitInterval).
    pub fn builder() -> crate::types::builders::BandwidthRateLimitIntervalBuilder {
        crate::types::builders::BandwidthRateLimitIntervalBuilder::default()
    }
}

/// A builder for [`BandwidthRateLimitInterval`](crate::types::BandwidthRateLimitInterval).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BandwidthRateLimitIntervalBuilder {
    pub(crate) start_hour_of_day: ::std::option::Option<i32>,
    pub(crate) start_minute_of_hour: ::std::option::Option<i32>,
    pub(crate) end_hour_of_day: ::std::option::Option<i32>,
    pub(crate) end_minute_of_hour: ::std::option::Option<i32>,
    pub(crate) days_of_week: ::std::option::Option<::std::vec::Vec<i32>>,
    pub(crate) average_upload_rate_limit_in_bits_per_sec: ::std::option::Option<i64>,
    pub(crate) average_download_rate_limit_in_bits_per_sec: ::std::option::Option<i64>,
}
impl BandwidthRateLimitIntervalBuilder {
    /// <p> The hour of the day to start the bandwidth rate limit interval. </p>
    /// This field is required.
    pub fn start_hour_of_day(mut self, input: i32) -> Self {
        self.start_hour_of_day = ::std::option::Option::Some(input);
        self
    }
    /// <p> The hour of the day to start the bandwidth rate limit interval. </p>
    pub fn set_start_hour_of_day(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_hour_of_day = input;
        self
    }
    /// <p> The hour of the day to start the bandwidth rate limit interval. </p>
    pub fn get_start_hour_of_day(&self) -> &::std::option::Option<i32> {
        &self.start_hour_of_day
    }
    /// <p> The minute of the hour to start the bandwidth rate limit interval. The interval begins at the start of that minute. To begin an interval exactly at the start of the hour, use the value <code>0</code>. </p>
    /// This field is required.
    pub fn start_minute_of_hour(mut self, input: i32) -> Self {
        self.start_minute_of_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p> The minute of the hour to start the bandwidth rate limit interval. The interval begins at the start of that minute. To begin an interval exactly at the start of the hour, use the value <code>0</code>. </p>
    pub fn set_start_minute_of_hour(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_minute_of_hour = input;
        self
    }
    /// <p> The minute of the hour to start the bandwidth rate limit interval. The interval begins at the start of that minute. To begin an interval exactly at the start of the hour, use the value <code>0</code>. </p>
    pub fn get_start_minute_of_hour(&self) -> &::std::option::Option<i32> {
        &self.start_minute_of_hour
    }
    /// <p> The hour of the day to end the bandwidth rate limit interval. </p>
    /// This field is required.
    pub fn end_hour_of_day(mut self, input: i32) -> Self {
        self.end_hour_of_day = ::std::option::Option::Some(input);
        self
    }
    /// <p> The hour of the day to end the bandwidth rate limit interval. </p>
    pub fn set_end_hour_of_day(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_hour_of_day = input;
        self
    }
    /// <p> The hour of the day to end the bandwidth rate limit interval. </p>
    pub fn get_end_hour_of_day(&self) -> &::std::option::Option<i32> {
        &self.end_hour_of_day
    }
    /// <p> The minute of the hour to end the bandwidth rate limit interval. </p> <important>
    /// <p> The bandwidth rate limit interval ends at the end of the minute. To end an interval at the end of an hour, use the value <code>59</code>. </p>
    /// </important>
    /// This field is required.
    pub fn end_minute_of_hour(mut self, input: i32) -> Self {
        self.end_minute_of_hour = ::std::option::Option::Some(input);
        self
    }
    /// <p> The minute of the hour to end the bandwidth rate limit interval. </p> <important>
    /// <p> The bandwidth rate limit interval ends at the end of the minute. To end an interval at the end of an hour, use the value <code>59</code>. </p>
    /// </important>
    pub fn set_end_minute_of_hour(mut self, input: ::std::option::Option<i32>) -> Self {
        self.end_minute_of_hour = input;
        self
    }
    /// <p> The minute of the hour to end the bandwidth rate limit interval. </p> <important>
    /// <p> The bandwidth rate limit interval ends at the end of the minute. To end an interval at the end of an hour, use the value <code>59</code>. </p>
    /// </important>
    pub fn get_end_minute_of_hour(&self) -> &::std::option::Option<i32> {
        &self.end_minute_of_hour
    }
    /// Appends an item to `days_of_week`.
    ///
    /// To override the contents of this collection use [`set_days_of_week`](Self::set_days_of_week).
    ///
    /// <p> The days of the week component of the bandwidth rate limit interval, represented as ordinal numbers from 0 to 6, where 0 represents Sunday and 6 represents Saturday. </p>
    pub fn days_of_week(mut self, input: i32) -> Self {
        let mut v = self.days_of_week.unwrap_or_default();
        v.push(input);
        self.days_of_week = ::std::option::Option::Some(v);
        self
    }
    /// <p> The days of the week component of the bandwidth rate limit interval, represented as ordinal numbers from 0 to 6, where 0 represents Sunday and 6 represents Saturday. </p>
    pub fn set_days_of_week(mut self, input: ::std::option::Option<::std::vec::Vec<i32>>) -> Self {
        self.days_of_week = input;
        self
    }
    /// <p> The days of the week component of the bandwidth rate limit interval, represented as ordinal numbers from 0 to 6, where 0 represents Sunday and 6 represents Saturday. </p>
    pub fn get_days_of_week(&self) -> &::std::option::Option<::std::vec::Vec<i32>> {
        &self.days_of_week
    }
    /// <p> The average upload rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the upload rate limit is not set. </p> <note>
    /// <p>For Tape Gateway and Volume Gateway, the minimum value is <code>51200</code>.</p>
    /// <p>For S3 File Gateway and FSx File Gateway, the minimum value is <code>104857600</code>.</p>
    /// </note>
    pub fn average_upload_rate_limit_in_bits_per_sec(mut self, input: i64) -> Self {
        self.average_upload_rate_limit_in_bits_per_sec = ::std::option::Option::Some(input);
        self
    }
    /// <p> The average upload rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the upload rate limit is not set. </p> <note>
    /// <p>For Tape Gateway and Volume Gateway, the minimum value is <code>51200</code>.</p>
    /// <p>For S3 File Gateway and FSx File Gateway, the minimum value is <code>104857600</code>.</p>
    /// </note>
    pub fn set_average_upload_rate_limit_in_bits_per_sec(mut self, input: ::std::option::Option<i64>) -> Self {
        self.average_upload_rate_limit_in_bits_per_sec = input;
        self
    }
    /// <p> The average upload rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the upload rate limit is not set. </p> <note>
    /// <p>For Tape Gateway and Volume Gateway, the minimum value is <code>51200</code>.</p>
    /// <p>For S3 File Gateway and FSx File Gateway, the minimum value is <code>104857600</code>.</p>
    /// </note>
    pub fn get_average_upload_rate_limit_in_bits_per_sec(&self) -> &::std::option::Option<i64> {
        &self.average_upload_rate_limit_in_bits_per_sec
    }
    /// <p> The average download rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the download rate limit is not set. </p>
    pub fn average_download_rate_limit_in_bits_per_sec(mut self, input: i64) -> Self {
        self.average_download_rate_limit_in_bits_per_sec = ::std::option::Option::Some(input);
        self
    }
    /// <p> The average download rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the download rate limit is not set. </p>
    pub fn set_average_download_rate_limit_in_bits_per_sec(mut self, input: ::std::option::Option<i64>) -> Self {
        self.average_download_rate_limit_in_bits_per_sec = input;
        self
    }
    /// <p> The average download rate limit component of the bandwidth rate limit interval, in bits per second. This field does not appear in the response if the download rate limit is not set. </p>
    pub fn get_average_download_rate_limit_in_bits_per_sec(&self) -> &::std::option::Option<i64> {
        &self.average_download_rate_limit_in_bits_per_sec
    }
    /// Consumes the builder and constructs a [`BandwidthRateLimitInterval`](crate::types::BandwidthRateLimitInterval).
    /// This method will fail if any of the following fields are not set:
    /// - [`start_hour_of_day`](crate::types::builders::BandwidthRateLimitIntervalBuilder::start_hour_of_day)
    /// - [`start_minute_of_hour`](crate::types::builders::BandwidthRateLimitIntervalBuilder::start_minute_of_hour)
    /// - [`end_hour_of_day`](crate::types::builders::BandwidthRateLimitIntervalBuilder::end_hour_of_day)
    /// - [`end_minute_of_hour`](crate::types::builders::BandwidthRateLimitIntervalBuilder::end_minute_of_hour)
    /// - [`days_of_week`](crate::types::builders::BandwidthRateLimitIntervalBuilder::days_of_week)
    pub fn build(self) -> ::std::result::Result<crate::types::BandwidthRateLimitInterval, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::BandwidthRateLimitInterval {
            start_hour_of_day: self.start_hour_of_day.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_hour_of_day",
                    "start_hour_of_day was not specified but it is required when building BandwidthRateLimitInterval",
                )
            })?,
            start_minute_of_hour: self.start_minute_of_hour.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "start_minute_of_hour",
                    "start_minute_of_hour was not specified but it is required when building BandwidthRateLimitInterval",
                )
            })?,
            end_hour_of_day: self.end_hour_of_day.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_hour_of_day",
                    "end_hour_of_day was not specified but it is required when building BandwidthRateLimitInterval",
                )
            })?,
            end_minute_of_hour: self.end_minute_of_hour.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "end_minute_of_hour",
                    "end_minute_of_hour was not specified but it is required when building BandwidthRateLimitInterval",
                )
            })?,
            days_of_week: self.days_of_week.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "days_of_week",
                    "days_of_week was not specified but it is required when building BandwidthRateLimitInterval",
                )
            })?,
            average_upload_rate_limit_in_bits_per_sec: self.average_upload_rate_limit_in_bits_per_sec,
            average_download_rate_limit_in_bits_per_sec: self.average_download_rate_limit_in_bits_per_sec,
        })
    }
}
