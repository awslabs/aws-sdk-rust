// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An automatic tape creation policy consists of automatic tape creation rules where each rule defines when and how to create new tapes. For more information about automatic tape creation, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/GettingStartedCreateTapes.html#CreateTapesAutomatically">Creating Tapes Automatically</a>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AutomaticTapeCreationRule {
    /// <p>A prefix that you append to the barcode of the virtual tape that you are creating. This prefix makes the barcode unique.</p> <note>
    /// <p>The prefix must be 1-4 characters in length and must be one of the uppercase letters from A to Z.</p>
    /// </note>
    #[doc(hidden)]
    pub tape_barcode_prefix: std::option::Option<std::string::String>,
    /// <p>The ID of the pool that you want to add your tape to for archiving. The tape in this pool is archived in the Amazon S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    #[doc(hidden)]
    pub pool_id: std::option::Option<std::string::String>,
    /// <p>The size, in bytes, of the virtual tape capacity.</p>
    #[doc(hidden)]
    pub tape_size_in_bytes: std::option::Option<i64>,
    /// <p>The minimum number of available virtual tapes that the gateway maintains at all times. If the number of tapes on the gateway goes below this value, the gateway creates as many new tapes as are needed to have <code>MinimumNumTapes</code> on the gateway. For more information about automatic tape creation, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/GettingStartedCreateTapes.html#CreateTapesAutomatically">Creating Tapes Automatically</a>.</p>
    #[doc(hidden)]
    pub minimum_num_tapes: std::option::Option<i32>,
    /// <p>Set to <code>true</code> to indicate that tapes are to be archived as write-once-read-many (WORM). Set to <code>false</code> when WORM is not enabled for tapes.</p>
    #[doc(hidden)]
    pub worm: bool,
}
impl AutomaticTapeCreationRule {
    /// <p>A prefix that you append to the barcode of the virtual tape that you are creating. This prefix makes the barcode unique.</p> <note>
    /// <p>The prefix must be 1-4 characters in length and must be one of the uppercase letters from A to Z.</p>
    /// </note>
    pub fn tape_barcode_prefix(&self) -> std::option::Option<&str> {
        self.tape_barcode_prefix.as_deref()
    }
    /// <p>The ID of the pool that you want to add your tape to for archiving. The tape in this pool is archived in the Amazon S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    pub fn pool_id(&self) -> std::option::Option<&str> {
        self.pool_id.as_deref()
    }
    /// <p>The size, in bytes, of the virtual tape capacity.</p>
    pub fn tape_size_in_bytes(&self) -> std::option::Option<i64> {
        self.tape_size_in_bytes
    }
    /// <p>The minimum number of available virtual tapes that the gateway maintains at all times. If the number of tapes on the gateway goes below this value, the gateway creates as many new tapes as are needed to have <code>MinimumNumTapes</code> on the gateway. For more information about automatic tape creation, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/GettingStartedCreateTapes.html#CreateTapesAutomatically">Creating Tapes Automatically</a>.</p>
    pub fn minimum_num_tapes(&self) -> std::option::Option<i32> {
        self.minimum_num_tapes
    }
    /// <p>Set to <code>true</code> to indicate that tapes are to be archived as write-once-read-many (WORM). Set to <code>false</code> when WORM is not enabled for tapes.</p>
    pub fn worm(&self) -> bool {
        self.worm
    }
}
impl AutomaticTapeCreationRule {
    /// Creates a new builder-style object to manufacture [`AutomaticTapeCreationRule`](crate::types::AutomaticTapeCreationRule).
    pub fn builder() -> crate::types::builders::AutomaticTapeCreationRuleBuilder {
        crate::types::builders::AutomaticTapeCreationRuleBuilder::default()
    }
}

/// A builder for [`AutomaticTapeCreationRule`](crate::types::AutomaticTapeCreationRule).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AutomaticTapeCreationRuleBuilder {
    pub(crate) tape_barcode_prefix: std::option::Option<std::string::String>,
    pub(crate) pool_id: std::option::Option<std::string::String>,
    pub(crate) tape_size_in_bytes: std::option::Option<i64>,
    pub(crate) minimum_num_tapes: std::option::Option<i32>,
    pub(crate) worm: std::option::Option<bool>,
}
impl AutomaticTapeCreationRuleBuilder {
    /// <p>A prefix that you append to the barcode of the virtual tape that you are creating. This prefix makes the barcode unique.</p> <note>
    /// <p>The prefix must be 1-4 characters in length and must be one of the uppercase letters from A to Z.</p>
    /// </note>
    pub fn tape_barcode_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.tape_barcode_prefix = Some(input.into());
        self
    }
    /// <p>A prefix that you append to the barcode of the virtual tape that you are creating. This prefix makes the barcode unique.</p> <note>
    /// <p>The prefix must be 1-4 characters in length and must be one of the uppercase letters from A to Z.</p>
    /// </note>
    pub fn set_tape_barcode_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.tape_barcode_prefix = input;
        self
    }
    /// <p>The ID of the pool that you want to add your tape to for archiving. The tape in this pool is archived in the Amazon S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    pub fn pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.pool_id = Some(input.into());
        self
    }
    /// <p>The ID of the pool that you want to add your tape to for archiving. The tape in this pool is archived in the Amazon S3 storage class that is associated with the pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    pub fn set_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pool_id = input;
        self
    }
    /// <p>The size, in bytes, of the virtual tape capacity.</p>
    pub fn tape_size_in_bytes(mut self, input: i64) -> Self {
        self.tape_size_in_bytes = Some(input);
        self
    }
    /// <p>The size, in bytes, of the virtual tape capacity.</p>
    pub fn set_tape_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.tape_size_in_bytes = input;
        self
    }
    /// <p>The minimum number of available virtual tapes that the gateway maintains at all times. If the number of tapes on the gateway goes below this value, the gateway creates as many new tapes as are needed to have <code>MinimumNumTapes</code> on the gateway. For more information about automatic tape creation, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/GettingStartedCreateTapes.html#CreateTapesAutomatically">Creating Tapes Automatically</a>.</p>
    pub fn minimum_num_tapes(mut self, input: i32) -> Self {
        self.minimum_num_tapes = Some(input);
        self
    }
    /// <p>The minimum number of available virtual tapes that the gateway maintains at all times. If the number of tapes on the gateway goes below this value, the gateway creates as many new tapes as are needed to have <code>MinimumNumTapes</code> on the gateway. For more information about automatic tape creation, see <a href="https://docs.aws.amazon.com/storagegateway/latest/userguide/GettingStartedCreateTapes.html#CreateTapesAutomatically">Creating Tapes Automatically</a>.</p>
    pub fn set_minimum_num_tapes(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_num_tapes = input;
        self
    }
    /// <p>Set to <code>true</code> to indicate that tapes are to be archived as write-once-read-many (WORM). Set to <code>false</code> when WORM is not enabled for tapes.</p>
    pub fn worm(mut self, input: bool) -> Self {
        self.worm = Some(input);
        self
    }
    /// <p>Set to <code>true</code> to indicate that tapes are to be archived as write-once-read-many (WORM). Set to <code>false</code> when WORM is not enabled for tapes.</p>
    pub fn set_worm(mut self, input: std::option::Option<bool>) -> Self {
        self.worm = input;
        self
    }
    /// Consumes the builder and constructs a [`AutomaticTapeCreationRule`](crate::types::AutomaticTapeCreationRule).
    pub fn build(self) -> crate::types::AutomaticTapeCreationRule {
        crate::types::AutomaticTapeCreationRule {
            tape_barcode_prefix: self.tape_barcode_prefix,
            pool_id: self.pool_id,
            tape_size_in_bytes: self.tape_size_in_bytes,
            minimum_num_tapes: self.minimum_num_tapes,
            worm: self.worm.unwrap_or_default(),
        }
    }
}
