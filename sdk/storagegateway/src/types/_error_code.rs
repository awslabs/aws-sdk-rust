// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `ErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let errorcode = unimplemented!();
/// match errorcode {
///     ErrorCode::ActivationKeyExpired => { /* ... */ },
///     ErrorCode::ActivationKeyInvalid => { /* ... */ },
///     ErrorCode::ActivationKeyNotFound => { /* ... */ },
///     ErrorCode::AuthenticationFailure => { /* ... */ },
///     ErrorCode::BandwidthThrottleScheduleNotFound => { /* ... */ },
///     ErrorCode::Blocked => { /* ... */ },
///     ErrorCode::CannotExportSnapshot => { /* ... */ },
///     ErrorCode::ChapCredentialNotFound => { /* ... */ },
///     ErrorCode::DiskAlreadyAllocated => { /* ... */ },
///     ErrorCode::DiskDoesNotExist => { /* ... */ },
///     ErrorCode::DiskSizeGreaterThanVolumeMaxSize => { /* ... */ },
///     ErrorCode::DiskSizeLessThanVolumeSize => { /* ... */ },
///     ErrorCode::DiskSizeNotGigAligned => { /* ... */ },
///     ErrorCode::DuplicateCertificateInfo => { /* ... */ },
///     ErrorCode::DuplicateSchedule => { /* ... */ },
///     ErrorCode::EndpointNotFound => { /* ... */ },
///     ErrorCode::GatewayInternalError => { /* ... */ },
///     ErrorCode::GatewayNotConnected => { /* ... */ },
///     ErrorCode::GatewayNotFound => { /* ... */ },
///     ErrorCode::GatewayProxyNetworkConnectionBusy => { /* ... */ },
///     ErrorCode::IamNotSupported => { /* ... */ },
///     ErrorCode::InitiatorInvalid => { /* ... */ },
///     ErrorCode::InitiatorNotFound => { /* ... */ },
///     ErrorCode::InternalError => { /* ... */ },
///     ErrorCode::InvalidEndpoint => { /* ... */ },
///     ErrorCode::InvalidGateway => { /* ... */ },
///     ErrorCode::InvalidParameters => { /* ... */ },
///     ErrorCode::InvalidSchedule => { /* ... */ },
///     ErrorCode::JoinDomainInProgress => { /* ... */ },
///     ErrorCode::LocalStorageLimitExceeded => { /* ... */ },
///     ErrorCode::LunAlreadyAllocated => { /* ... */ },
///     ErrorCode::LunInvalid => { /* ... */ },
///     ErrorCode::MaximumContentLengthExceeded => { /* ... */ },
///     ErrorCode::MaximumTapeCartridgeCountExceeded => { /* ... */ },
///     ErrorCode::MaximumVolumeCountExceeded => { /* ... */ },
///     ErrorCode::NetworkConfigurationChanged => { /* ... */ },
///     ErrorCode::NoDisksAvailable => { /* ... */ },
///     ErrorCode::NotImplemented => { /* ... */ },
///     ErrorCode::NotSupported => { /* ... */ },
///     ErrorCode::OperationAborted => { /* ... */ },
///     ErrorCode::OutdatedGateway => { /* ... */ },
///     ErrorCode::ParametersNotImplemented => { /* ... */ },
///     ErrorCode::RegionInvalid => { /* ... */ },
///     ErrorCode::RequestTimeout => { /* ... */ },
///     ErrorCode::ServiceUnavailable => { /* ... */ },
///     ErrorCode::SnapshotDeleted => { /* ... */ },
///     ErrorCode::SnapshotIdInvalid => { /* ... */ },
///     ErrorCode::SnapshotInProgress => { /* ... */ },
///     ErrorCode::SnapshotNotFound => { /* ... */ },
///     ErrorCode::SnapshotScheduleNotFound => { /* ... */ },
///     ErrorCode::StagingAreaFull => { /* ... */ },
///     ErrorCode::StorageFailure => { /* ... */ },
///     ErrorCode::TapeCartridgeNotFound => { /* ... */ },
///     ErrorCode::TargetAlreadyExists => { /* ... */ },
///     ErrorCode::TargetInvalid => { /* ... */ },
///     ErrorCode::TargetNotFound => { /* ... */ },
///     ErrorCode::UnauthorizedOperation => { /* ... */ },
///     ErrorCode::VolumeAlreadyExists => { /* ... */ },
///     ErrorCode::VolumeIdInvalid => { /* ... */ },
///     ErrorCode::VolumeInUse => { /* ... */ },
///     ErrorCode::VolumeNotFound => { /* ... */ },
///     ErrorCode::VolumeNotReady => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `errorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `ErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `ErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `ErrorCode::NewFeature` is defined.
/// Specifically, when `errorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `ErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum ErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    ActivationKeyExpired,
    #[allow(missing_docs)] // documentation missing in model
    ActivationKeyInvalid,
    #[allow(missing_docs)] // documentation missing in model
    ActivationKeyNotFound,
    #[allow(missing_docs)] // documentation missing in model
    AuthenticationFailure,
    #[allow(missing_docs)] // documentation missing in model
    BandwidthThrottleScheduleNotFound,
    #[allow(missing_docs)] // documentation missing in model
    Blocked,
    #[allow(missing_docs)] // documentation missing in model
    CannotExportSnapshot,
    #[allow(missing_docs)] // documentation missing in model
    ChapCredentialNotFound,
    #[allow(missing_docs)] // documentation missing in model
    DiskAlreadyAllocated,
    #[allow(missing_docs)] // documentation missing in model
    DiskDoesNotExist,
    #[allow(missing_docs)] // documentation missing in model
    DiskSizeGreaterThanVolumeMaxSize,
    #[allow(missing_docs)] // documentation missing in model
    DiskSizeLessThanVolumeSize,
    #[allow(missing_docs)] // documentation missing in model
    DiskSizeNotGigAligned,
    #[allow(missing_docs)] // documentation missing in model
    DuplicateCertificateInfo,
    #[allow(missing_docs)] // documentation missing in model
    DuplicateSchedule,
    #[allow(missing_docs)] // documentation missing in model
    EndpointNotFound,
    #[allow(missing_docs)] // documentation missing in model
    GatewayInternalError,
    #[allow(missing_docs)] // documentation missing in model
    GatewayNotConnected,
    #[allow(missing_docs)] // documentation missing in model
    GatewayNotFound,
    #[allow(missing_docs)] // documentation missing in model
    GatewayProxyNetworkConnectionBusy,
    #[allow(missing_docs)] // documentation missing in model
    IamNotSupported,
    #[allow(missing_docs)] // documentation missing in model
    InitiatorInvalid,
    #[allow(missing_docs)] // documentation missing in model
    InitiatorNotFound,
    #[allow(missing_docs)] // documentation missing in model
    InternalError,
    #[allow(missing_docs)] // documentation missing in model
    InvalidEndpoint,
    #[allow(missing_docs)] // documentation missing in model
    InvalidGateway,
    #[allow(missing_docs)] // documentation missing in model
    InvalidParameters,
    #[allow(missing_docs)] // documentation missing in model
    InvalidSchedule,
    #[allow(missing_docs)] // documentation missing in model
    JoinDomainInProgress,
    #[allow(missing_docs)] // documentation missing in model
    LocalStorageLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    LunAlreadyAllocated,
    #[allow(missing_docs)] // documentation missing in model
    LunInvalid,
    #[allow(missing_docs)] // documentation missing in model
    MaximumContentLengthExceeded,
    #[allow(missing_docs)] // documentation missing in model
    MaximumTapeCartridgeCountExceeded,
    #[allow(missing_docs)] // documentation missing in model
    MaximumVolumeCountExceeded,
    #[allow(missing_docs)] // documentation missing in model
    NetworkConfigurationChanged,
    #[allow(missing_docs)] // documentation missing in model
    NoDisksAvailable,
    #[allow(missing_docs)] // documentation missing in model
    NotImplemented,
    #[allow(missing_docs)] // documentation missing in model
    NotSupported,
    #[allow(missing_docs)] // documentation missing in model
    OperationAborted,
    #[allow(missing_docs)] // documentation missing in model
    OutdatedGateway,
    #[allow(missing_docs)] // documentation missing in model
    ParametersNotImplemented,
    #[allow(missing_docs)] // documentation missing in model
    RegionInvalid,
    #[allow(missing_docs)] // documentation missing in model
    RequestTimeout,
    #[allow(missing_docs)] // documentation missing in model
    ServiceUnavailable,
    #[allow(missing_docs)] // documentation missing in model
    SnapshotDeleted,
    #[allow(missing_docs)] // documentation missing in model
    SnapshotIdInvalid,
    #[allow(missing_docs)] // documentation missing in model
    SnapshotInProgress,
    #[allow(missing_docs)] // documentation missing in model
    SnapshotNotFound,
    #[allow(missing_docs)] // documentation missing in model
    SnapshotScheduleNotFound,
    #[allow(missing_docs)] // documentation missing in model
    StagingAreaFull,
    #[allow(missing_docs)] // documentation missing in model
    StorageFailure,
    #[allow(missing_docs)] // documentation missing in model
    TapeCartridgeNotFound,
    #[allow(missing_docs)] // documentation missing in model
    TargetAlreadyExists,
    #[allow(missing_docs)] // documentation missing in model
    TargetInvalid,
    #[allow(missing_docs)] // documentation missing in model
    TargetNotFound,
    #[allow(missing_docs)] // documentation missing in model
    UnauthorizedOperation,
    #[allow(missing_docs)] // documentation missing in model
    VolumeAlreadyExists,
    #[allow(missing_docs)] // documentation missing in model
    VolumeIdInvalid,
    #[allow(missing_docs)] // documentation missing in model
    VolumeInUse,
    #[allow(missing_docs)] // documentation missing in model
    VolumeNotFound,
    #[allow(missing_docs)] // documentation missing in model
    VolumeNotReady,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for ErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "ActivationKeyExpired" => ErrorCode::ActivationKeyExpired,
            "ActivationKeyInvalid" => ErrorCode::ActivationKeyInvalid,
            "ActivationKeyNotFound" => ErrorCode::ActivationKeyNotFound,
            "AuthenticationFailure" => ErrorCode::AuthenticationFailure,
            "BandwidthThrottleScheduleNotFound" => ErrorCode::BandwidthThrottleScheduleNotFound,
            "Blocked" => ErrorCode::Blocked,
            "CannotExportSnapshot" => ErrorCode::CannotExportSnapshot,
            "ChapCredentialNotFound" => ErrorCode::ChapCredentialNotFound,
            "DiskAlreadyAllocated" => ErrorCode::DiskAlreadyAllocated,
            "DiskDoesNotExist" => ErrorCode::DiskDoesNotExist,
            "DiskSizeGreaterThanVolumeMaxSize" => ErrorCode::DiskSizeGreaterThanVolumeMaxSize,
            "DiskSizeLessThanVolumeSize" => ErrorCode::DiskSizeLessThanVolumeSize,
            "DiskSizeNotGigAligned" => ErrorCode::DiskSizeNotGigAligned,
            "DuplicateCertificateInfo" => ErrorCode::DuplicateCertificateInfo,
            "DuplicateSchedule" => ErrorCode::DuplicateSchedule,
            "EndpointNotFound" => ErrorCode::EndpointNotFound,
            "GatewayInternalError" => ErrorCode::GatewayInternalError,
            "GatewayNotConnected" => ErrorCode::GatewayNotConnected,
            "GatewayNotFound" => ErrorCode::GatewayNotFound,
            "GatewayProxyNetworkConnectionBusy" => ErrorCode::GatewayProxyNetworkConnectionBusy,
            "IAMNotSupported" => ErrorCode::IamNotSupported,
            "InitiatorInvalid" => ErrorCode::InitiatorInvalid,
            "InitiatorNotFound" => ErrorCode::InitiatorNotFound,
            "InternalError" => ErrorCode::InternalError,
            "InvalidEndpoint" => ErrorCode::InvalidEndpoint,
            "InvalidGateway" => ErrorCode::InvalidGateway,
            "InvalidParameters" => ErrorCode::InvalidParameters,
            "InvalidSchedule" => ErrorCode::InvalidSchedule,
            "JoinDomainInProgress" => ErrorCode::JoinDomainInProgress,
            "LocalStorageLimitExceeded" => ErrorCode::LocalStorageLimitExceeded,
            "LunAlreadyAllocated " => ErrorCode::LunAlreadyAllocated,
            "LunInvalid" => ErrorCode::LunInvalid,
            "MaximumContentLengthExceeded" => ErrorCode::MaximumContentLengthExceeded,
            "MaximumTapeCartridgeCountExceeded" => ErrorCode::MaximumTapeCartridgeCountExceeded,
            "MaximumVolumeCountExceeded" => ErrorCode::MaximumVolumeCountExceeded,
            "NetworkConfigurationChanged" => ErrorCode::NetworkConfigurationChanged,
            "NoDisksAvailable" => ErrorCode::NoDisksAvailable,
            "NotImplemented" => ErrorCode::NotImplemented,
            "NotSupported" => ErrorCode::NotSupported,
            "OperationAborted" => ErrorCode::OperationAborted,
            "OutdatedGateway" => ErrorCode::OutdatedGateway,
            "ParametersNotImplemented" => ErrorCode::ParametersNotImplemented,
            "RegionInvalid" => ErrorCode::RegionInvalid,
            "RequestTimeout" => ErrorCode::RequestTimeout,
            "ServiceUnavailable" => ErrorCode::ServiceUnavailable,
            "SnapshotDeleted" => ErrorCode::SnapshotDeleted,
            "SnapshotIdInvalid" => ErrorCode::SnapshotIdInvalid,
            "SnapshotInProgress" => ErrorCode::SnapshotInProgress,
            "SnapshotNotFound" => ErrorCode::SnapshotNotFound,
            "SnapshotScheduleNotFound" => ErrorCode::SnapshotScheduleNotFound,
            "StagingAreaFull" => ErrorCode::StagingAreaFull,
            "StorageFailure" => ErrorCode::StorageFailure,
            "TapeCartridgeNotFound" => ErrorCode::TapeCartridgeNotFound,
            "TargetAlreadyExists" => ErrorCode::TargetAlreadyExists,
            "TargetInvalid" => ErrorCode::TargetInvalid,
            "TargetNotFound" => ErrorCode::TargetNotFound,
            "UnauthorizedOperation" => ErrorCode::UnauthorizedOperation,
            "VolumeAlreadyExists" => ErrorCode::VolumeAlreadyExists,
            "VolumeIdInvalid" => ErrorCode::VolumeIdInvalid,
            "VolumeInUse" => ErrorCode::VolumeInUse,
            "VolumeNotFound" => ErrorCode::VolumeNotFound,
            "VolumeNotReady" => ErrorCode::VolumeNotReady,
            other => ErrorCode::Unknown(crate::primitives::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl std::str::FromStr for ErrorCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(ErrorCode::from(s))
    }
}
impl ErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            ErrorCode::ActivationKeyExpired => "ActivationKeyExpired",
            ErrorCode::ActivationKeyInvalid => "ActivationKeyInvalid",
            ErrorCode::ActivationKeyNotFound => "ActivationKeyNotFound",
            ErrorCode::AuthenticationFailure => "AuthenticationFailure",
            ErrorCode::BandwidthThrottleScheduleNotFound => "BandwidthThrottleScheduleNotFound",
            ErrorCode::Blocked => "Blocked",
            ErrorCode::CannotExportSnapshot => "CannotExportSnapshot",
            ErrorCode::ChapCredentialNotFound => "ChapCredentialNotFound",
            ErrorCode::DiskAlreadyAllocated => "DiskAlreadyAllocated",
            ErrorCode::DiskDoesNotExist => "DiskDoesNotExist",
            ErrorCode::DiskSizeGreaterThanVolumeMaxSize => "DiskSizeGreaterThanVolumeMaxSize",
            ErrorCode::DiskSizeLessThanVolumeSize => "DiskSizeLessThanVolumeSize",
            ErrorCode::DiskSizeNotGigAligned => "DiskSizeNotGigAligned",
            ErrorCode::DuplicateCertificateInfo => "DuplicateCertificateInfo",
            ErrorCode::DuplicateSchedule => "DuplicateSchedule",
            ErrorCode::EndpointNotFound => "EndpointNotFound",
            ErrorCode::GatewayInternalError => "GatewayInternalError",
            ErrorCode::GatewayNotConnected => "GatewayNotConnected",
            ErrorCode::GatewayNotFound => "GatewayNotFound",
            ErrorCode::GatewayProxyNetworkConnectionBusy => "GatewayProxyNetworkConnectionBusy",
            ErrorCode::IamNotSupported => "IAMNotSupported",
            ErrorCode::InitiatorInvalid => "InitiatorInvalid",
            ErrorCode::InitiatorNotFound => "InitiatorNotFound",
            ErrorCode::InternalError => "InternalError",
            ErrorCode::InvalidEndpoint => "InvalidEndpoint",
            ErrorCode::InvalidGateway => "InvalidGateway",
            ErrorCode::InvalidParameters => "InvalidParameters",
            ErrorCode::InvalidSchedule => "InvalidSchedule",
            ErrorCode::JoinDomainInProgress => "JoinDomainInProgress",
            ErrorCode::LocalStorageLimitExceeded => "LocalStorageLimitExceeded",
            ErrorCode::LunAlreadyAllocated => "LunAlreadyAllocated ",
            ErrorCode::LunInvalid => "LunInvalid",
            ErrorCode::MaximumContentLengthExceeded => "MaximumContentLengthExceeded",
            ErrorCode::MaximumTapeCartridgeCountExceeded => "MaximumTapeCartridgeCountExceeded",
            ErrorCode::MaximumVolumeCountExceeded => "MaximumVolumeCountExceeded",
            ErrorCode::NetworkConfigurationChanged => "NetworkConfigurationChanged",
            ErrorCode::NoDisksAvailable => "NoDisksAvailable",
            ErrorCode::NotImplemented => "NotImplemented",
            ErrorCode::NotSupported => "NotSupported",
            ErrorCode::OperationAborted => "OperationAborted",
            ErrorCode::OutdatedGateway => "OutdatedGateway",
            ErrorCode::ParametersNotImplemented => "ParametersNotImplemented",
            ErrorCode::RegionInvalid => "RegionInvalid",
            ErrorCode::RequestTimeout => "RequestTimeout",
            ErrorCode::ServiceUnavailable => "ServiceUnavailable",
            ErrorCode::SnapshotDeleted => "SnapshotDeleted",
            ErrorCode::SnapshotIdInvalid => "SnapshotIdInvalid",
            ErrorCode::SnapshotInProgress => "SnapshotInProgress",
            ErrorCode::SnapshotNotFound => "SnapshotNotFound",
            ErrorCode::SnapshotScheduleNotFound => "SnapshotScheduleNotFound",
            ErrorCode::StagingAreaFull => "StagingAreaFull",
            ErrorCode::StorageFailure => "StorageFailure",
            ErrorCode::TapeCartridgeNotFound => "TapeCartridgeNotFound",
            ErrorCode::TargetAlreadyExists => "TargetAlreadyExists",
            ErrorCode::TargetInvalid => "TargetInvalid",
            ErrorCode::TargetNotFound => "TargetNotFound",
            ErrorCode::UnauthorizedOperation => "UnauthorizedOperation",
            ErrorCode::VolumeAlreadyExists => "VolumeAlreadyExists",
            ErrorCode::VolumeIdInvalid => "VolumeIdInvalid",
            ErrorCode::VolumeInUse => "VolumeInUse",
            ErrorCode::VolumeNotFound => "VolumeNotFound",
            ErrorCode::VolumeNotReady => "VolumeNotReady",
            ErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "ActivationKeyExpired",
            "ActivationKeyInvalid",
            "ActivationKeyNotFound",
            "AuthenticationFailure",
            "BandwidthThrottleScheduleNotFound",
            "Blocked",
            "CannotExportSnapshot",
            "ChapCredentialNotFound",
            "DiskAlreadyAllocated",
            "DiskDoesNotExist",
            "DiskSizeGreaterThanVolumeMaxSize",
            "DiskSizeLessThanVolumeSize",
            "DiskSizeNotGigAligned",
            "DuplicateCertificateInfo",
            "DuplicateSchedule",
            "EndpointNotFound",
            "GatewayInternalError",
            "GatewayNotConnected",
            "GatewayNotFound",
            "GatewayProxyNetworkConnectionBusy",
            "IAMNotSupported",
            "InitiatorInvalid",
            "InitiatorNotFound",
            "InternalError",
            "InvalidEndpoint",
            "InvalidGateway",
            "InvalidParameters",
            "InvalidSchedule",
            "JoinDomainInProgress",
            "LocalStorageLimitExceeded",
            "LunAlreadyAllocated ",
            "LunInvalid",
            "MaximumContentLengthExceeded",
            "MaximumTapeCartridgeCountExceeded",
            "MaximumVolumeCountExceeded",
            "NetworkConfigurationChanged",
            "NoDisksAvailable",
            "NotImplemented",
            "NotSupported",
            "OperationAborted",
            "OutdatedGateway",
            "ParametersNotImplemented",
            "RegionInvalid",
            "RequestTimeout",
            "ServiceUnavailable",
            "SnapshotDeleted",
            "SnapshotIdInvalid",
            "SnapshotInProgress",
            "SnapshotNotFound",
            "SnapshotScheduleNotFound",
            "StagingAreaFull",
            "StorageFailure",
            "TapeCartridgeNotFound",
            "TargetAlreadyExists",
            "TargetInvalid",
            "TargetNotFound",
            "UnauthorizedOperation",
            "VolumeAlreadyExists",
            "VolumeIdInvalid",
            "VolumeInUse",
            "VolumeNotFound",
            "VolumeNotReady",
        ]
    }
}
impl AsRef<str> for ErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
