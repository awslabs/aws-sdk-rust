// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents a virtual tape that is archived in the virtual tape shelf (VTS).</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TapeArchive {
    /// <p>The Amazon Resource Name (ARN) of an archived virtual tape.</p>
    pub tape_arn: ::std::option::Option<::std::string::String>,
    /// <p>The barcode that identifies the archived virtual tape.</p>
    pub tape_barcode: ::std::option::Option<::std::string::String>,
    /// <p>The date the virtual tape was created.</p>
    pub tape_created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The size, in bytes, of the archived virtual tape.</p>
    pub tape_size_in_bytes: ::std::option::Option<i64>,
    /// <p>The time that the archiving of the virtual tape was completed.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is being retrieved to.</p>
    /// <p>The virtual tape is retrieved from the virtual tape shelf (VTS).</p>
    pub retrieved_to: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the archived virtual tape.</p>
    pub tape_status: ::std::option::Option<::std::string::String>,
    /// <p>The size, in bytes, of data stored on the virtual tape.</p><note>
    /// <p>This value is not available for tapes created prior to May 13, 2015.</p>
    /// </note>
    pub tape_used_in_bytes: ::std::option::Option<i64>,
    /// <p>Optional. The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value must be set if <code>KMSEncrypted</code> is <code>true</code>, or if <code>EncryptionType</code> is <code>SseKms</code> or <code>DsseKms</code>.</p>
    pub kms_key: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the pool that was used to archive the tape. The tapes in this pool are archived in the S3 storage class that is associated with the pool.</p>
    pub pool_id: ::std::option::Option<::std::string::String>,
    /// <p>Set to <code>true</code> if the archived tape is stored as write-once-read-many (WORM).</p>
    pub worm: bool,
    /// <p>If the archived tape is subject to tape retention lock, the date that the archived tape started being retained.</p>
    pub retention_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the tape entered the custom tape pool.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub pool_entry_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TapeArchive {
    /// <p>The Amazon Resource Name (ARN) of an archived virtual tape.</p>
    pub fn tape_arn(&self) -> ::std::option::Option<&str> {
        self.tape_arn.as_deref()
    }
    /// <p>The barcode that identifies the archived virtual tape.</p>
    pub fn tape_barcode(&self) -> ::std::option::Option<&str> {
        self.tape_barcode.as_deref()
    }
    /// <p>The date the virtual tape was created.</p>
    pub fn tape_created_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.tape_created_date.as_ref()
    }
    /// <p>The size, in bytes, of the archived virtual tape.</p>
    pub fn tape_size_in_bytes(&self) -> ::std::option::Option<i64> {
        self.tape_size_in_bytes
    }
    /// <p>The time that the archiving of the virtual tape was completed.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub fn completion_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.completion_time.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is being retrieved to.</p>
    /// <p>The virtual tape is retrieved from the virtual tape shelf (VTS).</p>
    pub fn retrieved_to(&self) -> ::std::option::Option<&str> {
        self.retrieved_to.as_deref()
    }
    /// <p>The current state of the archived virtual tape.</p>
    pub fn tape_status(&self) -> ::std::option::Option<&str> {
        self.tape_status.as_deref()
    }
    /// <p>The size, in bytes, of data stored on the virtual tape.</p><note>
    /// <p>This value is not available for tapes created prior to May 13, 2015.</p>
    /// </note>
    pub fn tape_used_in_bytes(&self) -> ::std::option::Option<i64> {
        self.tape_used_in_bytes
    }
    /// <p>Optional. The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value must be set if <code>KMSEncrypted</code> is <code>true</code>, or if <code>EncryptionType</code> is <code>SseKms</code> or <code>DsseKms</code>.</p>
    pub fn kms_key(&self) -> ::std::option::Option<&str> {
        self.kms_key.as_deref()
    }
    /// <p>The ID of the pool that was used to archive the tape. The tapes in this pool are archived in the S3 storage class that is associated with the pool.</p>
    pub fn pool_id(&self) -> ::std::option::Option<&str> {
        self.pool_id.as_deref()
    }
    /// <p>Set to <code>true</code> if the archived tape is stored as write-once-read-many (WORM).</p>
    pub fn worm(&self) -> bool {
        self.worm
    }
    /// <p>If the archived tape is subject to tape retention lock, the date that the archived tape started being retained.</p>
    pub fn retention_start_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.retention_start_date.as_ref()
    }
    /// <p>The time that the tape entered the custom tape pool.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub fn pool_entry_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.pool_entry_date.as_ref()
    }
}
impl TapeArchive {
    /// Creates a new builder-style object to manufacture [`TapeArchive`](crate::types::TapeArchive).
    pub fn builder() -> crate::types::builders::TapeArchiveBuilder {
        crate::types::builders::TapeArchiveBuilder::default()
    }
}

/// A builder for [`TapeArchive`](crate::types::TapeArchive).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct TapeArchiveBuilder {
    pub(crate) tape_arn: ::std::option::Option<::std::string::String>,
    pub(crate) tape_barcode: ::std::option::Option<::std::string::String>,
    pub(crate) tape_created_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tape_size_in_bytes: ::std::option::Option<i64>,
    pub(crate) completion_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) retrieved_to: ::std::option::Option<::std::string::String>,
    pub(crate) tape_status: ::std::option::Option<::std::string::String>,
    pub(crate) tape_used_in_bytes: ::std::option::Option<i64>,
    pub(crate) kms_key: ::std::option::Option<::std::string::String>,
    pub(crate) pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) worm: ::std::option::Option<bool>,
    pub(crate) retention_start_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) pool_entry_date: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl TapeArchiveBuilder {
    /// <p>The Amazon Resource Name (ARN) of an archived virtual tape.</p>
    pub fn tape_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tape_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an archived virtual tape.</p>
    pub fn set_tape_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tape_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an archived virtual tape.</p>
    pub fn get_tape_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.tape_arn
    }
    /// <p>The barcode that identifies the archived virtual tape.</p>
    pub fn tape_barcode(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tape_barcode = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The barcode that identifies the archived virtual tape.</p>
    pub fn set_tape_barcode(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tape_barcode = input;
        self
    }
    /// <p>The barcode that identifies the archived virtual tape.</p>
    pub fn get_tape_barcode(&self) -> &::std::option::Option<::std::string::String> {
        &self.tape_barcode
    }
    /// <p>The date the virtual tape was created.</p>
    pub fn tape_created_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.tape_created_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the virtual tape was created.</p>
    pub fn set_tape_created_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.tape_created_date = input;
        self
    }
    /// <p>The date the virtual tape was created.</p>
    pub fn get_tape_created_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.tape_created_date
    }
    /// <p>The size, in bytes, of the archived virtual tape.</p>
    pub fn tape_size_in_bytes(mut self, input: i64) -> Self {
        self.tape_size_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size, in bytes, of the archived virtual tape.</p>
    pub fn set_tape_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.tape_size_in_bytes = input;
        self
    }
    /// <p>The size, in bytes, of the archived virtual tape.</p>
    pub fn get_tape_size_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.tape_size_in_bytes
    }
    /// <p>The time that the archiving of the virtual tape was completed.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub fn completion_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.completion_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the archiving of the virtual tape was completed.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub fn set_completion_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.completion_time = input;
        self
    }
    /// <p>The time that the archiving of the virtual tape was completed.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub fn get_completion_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.completion_time
    }
    /// <p>The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is being retrieved to.</p>
    /// <p>The virtual tape is retrieved from the virtual tape shelf (VTS).</p>
    pub fn retrieved_to(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.retrieved_to = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is being retrieved to.</p>
    /// <p>The virtual tape is retrieved from the virtual tape shelf (VTS).</p>
    pub fn set_retrieved_to(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.retrieved_to = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is being retrieved to.</p>
    /// <p>The virtual tape is retrieved from the virtual tape shelf (VTS).</p>
    pub fn get_retrieved_to(&self) -> &::std::option::Option<::std::string::String> {
        &self.retrieved_to
    }
    /// <p>The current state of the archived virtual tape.</p>
    pub fn tape_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.tape_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of the archived virtual tape.</p>
    pub fn set_tape_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.tape_status = input;
        self
    }
    /// <p>The current state of the archived virtual tape.</p>
    pub fn get_tape_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.tape_status
    }
    /// <p>The size, in bytes, of data stored on the virtual tape.</p><note>
    /// <p>This value is not available for tapes created prior to May 13, 2015.</p>
    /// </note>
    pub fn tape_used_in_bytes(mut self, input: i64) -> Self {
        self.tape_used_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size, in bytes, of data stored on the virtual tape.</p><note>
    /// <p>This value is not available for tapes created prior to May 13, 2015.</p>
    /// </note>
    pub fn set_tape_used_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.tape_used_in_bytes = input;
        self
    }
    /// <p>The size, in bytes, of data stored on the virtual tape.</p><note>
    /// <p>This value is not available for tapes created prior to May 13, 2015.</p>
    /// </note>
    pub fn get_tape_used_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.tape_used_in_bytes
    }
    /// <p>Optional. The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value must be set if <code>KMSEncrypted</code> is <code>true</code>, or if <code>EncryptionType</code> is <code>SseKms</code> or <code>DsseKms</code>.</p>
    pub fn kms_key(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Optional. The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value must be set if <code>KMSEncrypted</code> is <code>true</code>, or if <code>EncryptionType</code> is <code>SseKms</code> or <code>DsseKms</code>.</p>
    pub fn set_kms_key(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key = input;
        self
    }
    /// <p>Optional. The Amazon Resource Name (ARN) of a symmetric customer master key (CMK) used for Amazon S3 server-side encryption. Storage Gateway does not support asymmetric CMKs. This value must be set if <code>KMSEncrypted</code> is <code>true</code>, or if <code>EncryptionType</code> is <code>SseKms</code> or <code>DsseKms</code>.</p>
    pub fn get_kms_key(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key
    }
    /// <p>The ID of the pool that was used to archive the tape. The tapes in this pool are archived in the S3 storage class that is associated with the pool.</p>
    pub fn pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the pool that was used to archive the tape. The tapes in this pool are archived in the S3 storage class that is associated with the pool.</p>
    pub fn set_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pool_id = input;
        self
    }
    /// <p>The ID of the pool that was used to archive the tape. The tapes in this pool are archived in the S3 storage class that is associated with the pool.</p>
    pub fn get_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.pool_id
    }
    /// <p>Set to <code>true</code> if the archived tape is stored as write-once-read-many (WORM).</p>
    pub fn worm(mut self, input: bool) -> Self {
        self.worm = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to <code>true</code> if the archived tape is stored as write-once-read-many (WORM).</p>
    pub fn set_worm(mut self, input: ::std::option::Option<bool>) -> Self {
        self.worm = input;
        self
    }
    /// <p>Set to <code>true</code> if the archived tape is stored as write-once-read-many (WORM).</p>
    pub fn get_worm(&self) -> &::std::option::Option<bool> {
        &self.worm
    }
    /// <p>If the archived tape is subject to tape retention lock, the date that the archived tape started being retained.</p>
    pub fn retention_start_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.retention_start_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>If the archived tape is subject to tape retention lock, the date that the archived tape started being retained.</p>
    pub fn set_retention_start_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.retention_start_date = input;
        self
    }
    /// <p>If the archived tape is subject to tape retention lock, the date that the archived tape started being retained.</p>
    pub fn get_retention_start_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.retention_start_date
    }
    /// <p>The time that the tape entered the custom tape pool.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub fn pool_entry_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.pool_entry_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the tape entered the custom tape pool.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub fn set_pool_entry_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.pool_entry_date = input;
        self
    }
    /// <p>The time that the tape entered the custom tape pool.</p>
    /// <p>The default timestamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.</p>
    pub fn get_pool_entry_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.pool_entry_date
    }
    /// Consumes the builder and constructs a [`TapeArchive`](crate::types::TapeArchive).
    pub fn build(self) -> crate::types::TapeArchive {
        crate::types::TapeArchive {
            tape_arn: self.tape_arn,
            tape_barcode: self.tape_barcode,
            tape_created_date: self.tape_created_date,
            tape_size_in_bytes: self.tape_size_in_bytes,
            completion_time: self.completion_time,
            retrieved_to: self.retrieved_to,
            tape_status: self.tape_status,
            tape_used_in_bytes: self.tape_used_in_bytes,
            kms_key: self.kms_key,
            pool_id: self.pool_id,
            worm: self.worm.unwrap_or_default(),
            retention_start_date: self.retention_start_date,
            pool_entry_date: self.pool_entry_date,
        }
    }
}
