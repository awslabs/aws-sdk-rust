// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_activate_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateGatewayInput,
) {
    if let Some(var_1) = &input.activation_key {
        object.key("ActivationKey").string(var_1);
    }
    if let Some(var_2) = &input.gateway_name {
        object.key("GatewayName").string(var_2);
    }
    if let Some(var_3) = &input.gateway_timezone {
        object.key("GatewayTimezone").string(var_3);
    }
    if let Some(var_4) = &input.gateway_region {
        object.key("GatewayRegion").string(var_4);
    }
    if let Some(var_5) = &input.gateway_type {
        object.key("GatewayType").string(var_5);
    }
    if let Some(var_6) = &input.tape_drive_type {
        object.key("TapeDriveType").string(var_6);
    }
    if let Some(var_7) = &input.medium_changer_type {
        object.key("MediumChangerType").string(var_7);
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_11, item_10);
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_crate_input_add_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddCacheInput,
) {
    if let Some(var_12) = &input.gateway_arn {
        object.key("GatewayARN").string(var_12);
    }
    if let Some(var_13) = &input.disk_ids {
        let mut array_14 = object.key("DiskIds").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15);
            }
        }
        array_14.finish();
    }
}

pub fn serialize_structure_crate_input_add_tags_to_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) {
    if let Some(var_16) = &input.resource_arn {
        object.key("ResourceARN").string(var_16);
    }
    if let Some(var_17) = &input.tags {
        let mut array_18 = object.key("Tags").start_array();
        for item_19 in var_17 {
            {
                let mut object_20 = array_18.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_20, item_19);
                object_20.finish();
            }
        }
        array_18.finish();
    }
}

pub fn serialize_structure_crate_input_add_upload_buffer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddUploadBufferInput,
) {
    if let Some(var_21) = &input.gateway_arn {
        object.key("GatewayARN").string(var_21);
    }
    if let Some(var_22) = &input.disk_ids {
        let mut array_23 = object.key("DiskIds").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24);
            }
        }
        array_23.finish();
    }
}

pub fn serialize_structure_crate_input_add_working_storage_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddWorkingStorageInput,
) {
    if let Some(var_25) = &input.gateway_arn {
        object.key("GatewayARN").string(var_25);
    }
    if let Some(var_26) = &input.disk_ids {
        let mut array_27 = object.key("DiskIds").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28);
            }
        }
        array_27.finish();
    }
}

pub fn serialize_structure_crate_input_assign_tape_pool_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssignTapePoolInput,
) {
    if let Some(var_29) = &input.tape_arn {
        object.key("TapeARN").string(var_29);
    }
    if let Some(var_30) = &input.pool_id {
        object.key("PoolId").string(var_30);
    }
    if input.bypass_governance_retention {
        object
            .key("BypassGovernanceRetention")
            .boolean(input.bypass_governance_retention);
    }
}

pub fn serialize_structure_crate_input_associate_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFileSystemInput,
) {
    if let Some(var_31) = &input.user_name {
        object.key("UserName").string(var_31);
    }
    if let Some(var_32) = &input.password {
        object.key("Password").string(var_32);
    }
    if let Some(var_33) = &input.client_token {
        object.key("ClientToken").string(var_33);
    }
    if let Some(var_34) = &input.gateway_arn {
        object.key("GatewayARN").string(var_34);
    }
    if let Some(var_35) = &input.location_arn {
        object.key("LocationARN").string(var_35);
    }
    if let Some(var_36) = &input.tags {
        let mut array_37 = object.key("Tags").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_39, item_38);
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_40);
    }
    if let Some(var_41) = &input.cache_attributes {
        let mut object_42 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_attributes(&mut object_42, var_41);
        object_42.finish();
    }
    if let Some(var_43) = &input.endpoint_network_configuration {
        let mut object_44 = object.key("EndpointNetworkConfiguration").start_object();
        crate::json_ser::serialize_structure_crate_model_endpoint_network_configuration(
            &mut object_44,
            var_43,
        );
        object_44.finish();
    }
}

pub fn serialize_structure_crate_input_attach_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachVolumeInput,
) {
    if let Some(var_45) = &input.gateway_arn {
        object.key("GatewayARN").string(var_45);
    }
    if let Some(var_46) = &input.target_name {
        object.key("TargetName").string(var_46);
    }
    if let Some(var_47) = &input.volume_arn {
        object.key("VolumeARN").string(var_47);
    }
    if let Some(var_48) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_48);
    }
    if let Some(var_49) = &input.disk_id {
        object.key("DiskId").string(var_49);
    }
}

pub fn serialize_structure_crate_input_cancel_archival_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelArchivalInput,
) {
    if let Some(var_50) = &input.gateway_arn {
        object.key("GatewayARN").string(var_50);
    }
    if let Some(var_51) = &input.tape_arn {
        object.key("TapeARN").string(var_51);
    }
}

pub fn serialize_structure_crate_input_cancel_retrieval_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelRetrievalInput,
) {
    if let Some(var_52) = &input.gateway_arn {
        object.key("GatewayARN").string(var_52);
    }
    if let Some(var_53) = &input.tape_arn {
        object.key("TapeARN").string(var_53);
    }
}

pub fn serialize_structure_crate_input_create_cachedi_scsi_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCachediScsiVolumeInput,
) {
    if let Some(var_54) = &input.gateway_arn {
        object.key("GatewayARN").string(var_54);
    }
    {
        object.key("VolumeSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_bytes).into()),
        );
    }
    if let Some(var_55) = &input.snapshot_id {
        object.key("SnapshotId").string(var_55);
    }
    if let Some(var_56) = &input.target_name {
        object.key("TargetName").string(var_56);
    }
    if let Some(var_57) = &input.source_volume_arn {
        object.key("SourceVolumeARN").string(var_57);
    }
    if let Some(var_58) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_58);
    }
    if let Some(var_59) = &input.client_token {
        object.key("ClientToken").string(var_59);
    }
    if let Some(var_60) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_60);
    }
    if let Some(var_61) = &input.kms_key {
        object.key("KMSKey").string(var_61);
    }
    if let Some(var_62) = &input.tags {
        let mut array_63 = object.key("Tags").start_array();
        for item_64 in var_62 {
            {
                let mut object_65 = array_63.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_65, item_64);
                object_65.finish();
            }
        }
        array_63.finish();
    }
}

pub fn serialize_structure_crate_input_create_nfs_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNfsFileShareInput,
) {
    if let Some(var_66) = &input.client_token {
        object.key("ClientToken").string(var_66);
    }
    if let Some(var_67) = &input.nfs_file_share_defaults {
        let mut object_68 = object.key("NFSFileShareDefaults").start_object();
        crate::json_ser::serialize_structure_crate_model_nfs_file_share_defaults(
            &mut object_68,
            var_67,
        );
        object_68.finish();
    }
    if let Some(var_69) = &input.gateway_arn {
        object.key("GatewayARN").string(var_69);
    }
    if let Some(var_70) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_70);
    }
    if let Some(var_71) = &input.kms_key {
        object.key("KMSKey").string(var_71);
    }
    if let Some(var_72) = &input.role {
        object.key("Role").string(var_72);
    }
    if let Some(var_73) = &input.location_arn {
        object.key("LocationARN").string(var_73);
    }
    if let Some(var_74) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_74);
    }
    if let Some(var_75) = &input.object_acl {
        object.key("ObjectACL").string(var_75.as_str());
    }
    if let Some(var_76) = &input.client_list {
        let mut array_77 = object.key("ClientList").start_array();
        for item_78 in var_76 {
            {
                array_77.value().string(item_78);
            }
        }
        array_77.finish();
    }
    if let Some(var_79) = &input.squash {
        object.key("Squash").string(var_79);
    }
    if let Some(var_80) = &input.read_only {
        object.key("ReadOnly").boolean(*var_80);
    }
    if let Some(var_81) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_81);
    }
    if let Some(var_82) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_82);
    }
    if let Some(var_83) = &input.tags {
        let mut array_84 = object.key("Tags").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_86, item_85);
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.file_share_name {
        object.key("FileShareName").string(var_87);
    }
    if let Some(var_88) = &input.cache_attributes {
        let mut object_89 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_attributes(&mut object_89, var_88);
        object_89.finish();
    }
    if let Some(var_90) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_90);
    }
    if let Some(var_91) = &input.vpc_endpoint_dns_name {
        object.key("VPCEndpointDNSName").string(var_91);
    }
    if let Some(var_92) = &input.bucket_region {
        object.key("BucketRegion").string(var_92);
    }
}

pub fn serialize_structure_crate_input_create_smb_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSmbFileShareInput,
) {
    if let Some(var_93) = &input.client_token {
        object.key("ClientToken").string(var_93);
    }
    if let Some(var_94) = &input.gateway_arn {
        object.key("GatewayARN").string(var_94);
    }
    if let Some(var_95) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_95);
    }
    if let Some(var_96) = &input.kms_key {
        object.key("KMSKey").string(var_96);
    }
    if let Some(var_97) = &input.role {
        object.key("Role").string(var_97);
    }
    if let Some(var_98) = &input.location_arn {
        object.key("LocationARN").string(var_98);
    }
    if let Some(var_99) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_99);
    }
    if let Some(var_100) = &input.object_acl {
        object.key("ObjectACL").string(var_100.as_str());
    }
    if let Some(var_101) = &input.read_only {
        object.key("ReadOnly").boolean(*var_101);
    }
    if let Some(var_102) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_102);
    }
    if let Some(var_103) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_103);
    }
    if let Some(var_104) = &input.smbacl_enabled {
        object.key("SMBACLEnabled").boolean(*var_104);
    }
    if let Some(var_105) = &input.access_based_enumeration {
        object.key("AccessBasedEnumeration").boolean(*var_105);
    }
    if let Some(var_106) = &input.admin_user_list {
        let mut array_107 = object.key("AdminUserList").start_array();
        for item_108 in var_106 {
            {
                array_107.value().string(item_108);
            }
        }
        array_107.finish();
    }
    if let Some(var_109) = &input.valid_user_list {
        let mut array_110 = object.key("ValidUserList").start_array();
        for item_111 in var_109 {
            {
                array_110.value().string(item_111);
            }
        }
        array_110.finish();
    }
    if let Some(var_112) = &input.invalid_user_list {
        let mut array_113 = object.key("InvalidUserList").start_array();
        for item_114 in var_112 {
            {
                array_113.value().string(item_114);
            }
        }
        array_113.finish();
    }
    if let Some(var_115) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_115);
    }
    if let Some(var_116) = &input.authentication {
        object.key("Authentication").string(var_116);
    }
    if let Some(var_117) = &input.case_sensitivity {
        object.key("CaseSensitivity").string(var_117.as_str());
    }
    if let Some(var_118) = &input.tags {
        let mut array_119 = object.key("Tags").start_array();
        for item_120 in var_118 {
            {
                let mut object_121 = array_119.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_121, item_120);
                object_121.finish();
            }
        }
        array_119.finish();
    }
    if let Some(var_122) = &input.file_share_name {
        object.key("FileShareName").string(var_122);
    }
    if let Some(var_123) = &input.cache_attributes {
        let mut object_124 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_attributes(&mut object_124, var_123);
        object_124.finish();
    }
    if let Some(var_125) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_125);
    }
    if let Some(var_126) = &input.vpc_endpoint_dns_name {
        object.key("VPCEndpointDNSName").string(var_126);
    }
    if let Some(var_127) = &input.bucket_region {
        object.key("BucketRegion").string(var_127);
    }
    if let Some(var_128) = &input.oplocks_enabled {
        object.key("OplocksEnabled").boolean(*var_128);
    }
}

pub fn serialize_structure_crate_input_create_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSnapshotInput,
) {
    if let Some(var_129) = &input.volume_arn {
        object.key("VolumeARN").string(var_129);
    }
    if let Some(var_130) = &input.snapshot_description {
        object.key("SnapshotDescription").string(var_130);
    }
    if let Some(var_131) = &input.tags {
        let mut array_132 = object.key("Tags").start_array();
        for item_133 in var_131 {
            {
                let mut object_134 = array_132.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_134, item_133);
                object_134.finish();
            }
        }
        array_132.finish();
    }
}

pub fn serialize_structure_crate_input_create_snapshot_from_volume_recovery_point_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSnapshotFromVolumeRecoveryPointInput,
) {
    if let Some(var_135) = &input.volume_arn {
        object.key("VolumeARN").string(var_135);
    }
    if let Some(var_136) = &input.snapshot_description {
        object.key("SnapshotDescription").string(var_136);
    }
    if let Some(var_137) = &input.tags {
        let mut array_138 = object.key("Tags").start_array();
        for item_139 in var_137 {
            {
                let mut object_140 = array_138.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_140, item_139);
                object_140.finish();
            }
        }
        array_138.finish();
    }
}

pub fn serialize_structure_crate_input_create_storedi_scsi_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStorediScsiVolumeInput,
) {
    if let Some(var_141) = &input.gateway_arn {
        object.key("GatewayARN").string(var_141);
    }
    if let Some(var_142) = &input.disk_id {
        object.key("DiskId").string(var_142);
    }
    if let Some(var_143) = &input.snapshot_id {
        object.key("SnapshotId").string(var_143);
    }
    {
        object
            .key("PreserveExistingData")
            .boolean(input.preserve_existing_data);
    }
    if let Some(var_144) = &input.target_name {
        object.key("TargetName").string(var_144);
    }
    if let Some(var_145) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_145);
    }
    if let Some(var_146) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_146);
    }
    if let Some(var_147) = &input.kms_key {
        object.key("KMSKey").string(var_147);
    }
    if let Some(var_148) = &input.tags {
        let mut array_149 = object.key("Tags").start_array();
        for item_150 in var_148 {
            {
                let mut object_151 = array_149.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_151, item_150);
                object_151.finish();
            }
        }
        array_149.finish();
    }
}

pub fn serialize_structure_crate_input_create_tape_pool_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTapePoolInput,
) {
    if let Some(var_152) = &input.pool_name {
        object.key("PoolName").string(var_152);
    }
    if let Some(var_153) = &input.storage_class {
        object.key("StorageClass").string(var_153.as_str());
    }
    if let Some(var_154) = &input.retention_lock_type {
        object.key("RetentionLockType").string(var_154.as_str());
    }
    if let Some(var_155) = &input.retention_lock_time_in_days {
        object.key("RetentionLockTimeInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_155).into()),
        );
    }
    if let Some(var_156) = &input.tags {
        let mut array_157 = object.key("Tags").start_array();
        for item_158 in var_156 {
            {
                let mut object_159 = array_157.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_159, item_158);
                object_159.finish();
            }
        }
        array_157.finish();
    }
}

pub fn serialize_structure_crate_input_create_tapes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTapesInput,
) {
    if let Some(var_160) = &input.gateway_arn {
        object.key("GatewayARN").string(var_160);
    }
    if let Some(var_161) = &input.tape_size_in_bytes {
        object.key("TapeSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_161).into()),
        );
    }
    if let Some(var_162) = &input.client_token {
        object.key("ClientToken").string(var_162);
    }
    if let Some(var_163) = &input.num_tapes_to_create {
        object.key("NumTapesToCreate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_163).into()),
        );
    }
    if let Some(var_164) = &input.tape_barcode_prefix {
        object.key("TapeBarcodePrefix").string(var_164);
    }
    if let Some(var_165) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_165);
    }
    if let Some(var_166) = &input.kms_key {
        object.key("KMSKey").string(var_166);
    }
    if let Some(var_167) = &input.pool_id {
        object.key("PoolId").string(var_167);
    }
    if input.worm {
        object.key("Worm").boolean(input.worm);
    }
    if let Some(var_168) = &input.tags {
        let mut array_169 = object.key("Tags").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_171, item_170);
                object_171.finish();
            }
        }
        array_169.finish();
    }
}

pub fn serialize_structure_crate_input_create_tape_with_barcode_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTapeWithBarcodeInput,
) {
    if let Some(var_172) = &input.gateway_arn {
        object.key("GatewayARN").string(var_172);
    }
    if let Some(var_173) = &input.tape_size_in_bytes {
        object.key("TapeSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_173).into()),
        );
    }
    if let Some(var_174) = &input.tape_barcode {
        object.key("TapeBarcode").string(var_174);
    }
    if let Some(var_175) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_175);
    }
    if let Some(var_176) = &input.kms_key {
        object.key("KMSKey").string(var_176);
    }
    if let Some(var_177) = &input.pool_id {
        object.key("PoolId").string(var_177);
    }
    if input.worm {
        object.key("Worm").boolean(input.worm);
    }
    if let Some(var_178) = &input.tags {
        let mut array_179 = object.key("Tags").start_array();
        for item_180 in var_178 {
            {
                let mut object_181 = array_179.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_181, item_180);
                object_181.finish();
            }
        }
        array_179.finish();
    }
}

pub fn serialize_structure_crate_input_delete_automatic_tape_creation_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAutomaticTapeCreationPolicyInput,
) {
    if let Some(var_182) = &input.gateway_arn {
        object.key("GatewayARN").string(var_182);
    }
}

pub fn serialize_structure_crate_input_delete_bandwidth_rate_limit_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBandwidthRateLimitInput,
) {
    if let Some(var_183) = &input.gateway_arn {
        object.key("GatewayARN").string(var_183);
    }
    if let Some(var_184) = &input.bandwidth_type {
        object.key("BandwidthType").string(var_184);
    }
}

pub fn serialize_structure_crate_input_delete_chap_credentials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteChapCredentialsInput,
) {
    if let Some(var_185) = &input.target_arn {
        object.key("TargetARN").string(var_185);
    }
    if let Some(var_186) = &input.initiator_name {
        object.key("InitiatorName").string(var_186);
    }
}

pub fn serialize_structure_crate_input_delete_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFileShareInput,
) {
    if let Some(var_187) = &input.file_share_arn {
        object.key("FileShareARN").string(var_187);
    }
    if input.force_delete {
        object.key("ForceDelete").boolean(input.force_delete);
    }
}

pub fn serialize_structure_crate_input_delete_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteGatewayInput,
) {
    if let Some(var_188) = &input.gateway_arn {
        object.key("GatewayARN").string(var_188);
    }
}

pub fn serialize_structure_crate_input_delete_snapshot_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSnapshotScheduleInput,
) {
    if let Some(var_189) = &input.volume_arn {
        object.key("VolumeARN").string(var_189);
    }
}

pub fn serialize_structure_crate_input_delete_tape_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTapeInput,
) {
    if let Some(var_190) = &input.gateway_arn {
        object.key("GatewayARN").string(var_190);
    }
    if let Some(var_191) = &input.tape_arn {
        object.key("TapeARN").string(var_191);
    }
    if input.bypass_governance_retention {
        object
            .key("BypassGovernanceRetention")
            .boolean(input.bypass_governance_retention);
    }
}

pub fn serialize_structure_crate_input_delete_tape_archive_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTapeArchiveInput,
) {
    if let Some(var_192) = &input.tape_arn {
        object.key("TapeARN").string(var_192);
    }
    if input.bypass_governance_retention {
        object
            .key("BypassGovernanceRetention")
            .boolean(input.bypass_governance_retention);
    }
}

pub fn serialize_structure_crate_input_delete_tape_pool_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTapePoolInput,
) {
    if let Some(var_193) = &input.pool_arn {
        object.key("PoolARN").string(var_193);
    }
}

pub fn serialize_structure_crate_input_delete_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVolumeInput,
) {
    if let Some(var_194) = &input.volume_arn {
        object.key("VolumeARN").string(var_194);
    }
}

pub fn serialize_structure_crate_input_describe_availability_monitor_test_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAvailabilityMonitorTestInput,
) {
    if let Some(var_195) = &input.gateway_arn {
        object.key("GatewayARN").string(var_195);
    }
}

pub fn serialize_structure_crate_input_describe_bandwidth_rate_limit_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBandwidthRateLimitInput,
) {
    if let Some(var_196) = &input.gateway_arn {
        object.key("GatewayARN").string(var_196);
    }
}

pub fn serialize_structure_crate_input_describe_bandwidth_rate_limit_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBandwidthRateLimitScheduleInput,
) {
    if let Some(var_197) = &input.gateway_arn {
        object.key("GatewayARN").string(var_197);
    }
}

pub fn serialize_structure_crate_input_describe_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCacheInput,
) {
    if let Some(var_198) = &input.gateway_arn {
        object.key("GatewayARN").string(var_198);
    }
}

pub fn serialize_structure_crate_input_describe_cachedi_scsi_volumes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCachediScsiVolumesInput,
) {
    if let Some(var_199) = &input.volume_ar_ns {
        let mut array_200 = object.key("VolumeARNs").start_array();
        for item_201 in var_199 {
            {
                array_200.value().string(item_201);
            }
        }
        array_200.finish();
    }
}

pub fn serialize_structure_crate_input_describe_chap_credentials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeChapCredentialsInput,
) {
    if let Some(var_202) = &input.target_arn {
        object.key("TargetARN").string(var_202);
    }
}

pub fn serialize_structure_crate_input_describe_file_system_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemAssociationsInput,
) {
    if let Some(var_203) = &input.file_system_association_arn_list {
        let mut array_204 = object.key("FileSystemAssociationARNList").start_array();
        for item_205 in var_203 {
            {
                array_204.value().string(item_205);
            }
        }
        array_204.finish();
    }
}

pub fn serialize_structure_crate_input_describe_gateway_information_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeGatewayInformationInput,
) {
    if let Some(var_206) = &input.gateway_arn {
        object.key("GatewayARN").string(var_206);
    }
}

pub fn serialize_structure_crate_input_describe_maintenance_start_time_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceStartTimeInput,
) {
    if let Some(var_207) = &input.gateway_arn {
        object.key("GatewayARN").string(var_207);
    }
}

pub fn serialize_structure_crate_input_describe_nfs_file_shares_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNfsFileSharesInput,
) {
    if let Some(var_208) = &input.file_share_arn_list {
        let mut array_209 = object.key("FileShareARNList").start_array();
        for item_210 in var_208 {
            {
                array_209.value().string(item_210);
            }
        }
        array_209.finish();
    }
}

pub fn serialize_structure_crate_input_describe_smb_file_shares_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSmbFileSharesInput,
) {
    if let Some(var_211) = &input.file_share_arn_list {
        let mut array_212 = object.key("FileShareARNList").start_array();
        for item_213 in var_211 {
            {
                array_212.value().string(item_213);
            }
        }
        array_212.finish();
    }
}

pub fn serialize_structure_crate_input_describe_smb_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSmbSettingsInput,
) {
    if let Some(var_214) = &input.gateway_arn {
        object.key("GatewayARN").string(var_214);
    }
}

pub fn serialize_structure_crate_input_describe_snapshot_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSnapshotScheduleInput,
) {
    if let Some(var_215) = &input.volume_arn {
        object.key("VolumeARN").string(var_215);
    }
}

pub fn serialize_structure_crate_input_describe_storedi_scsi_volumes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStorediScsiVolumesInput,
) {
    if let Some(var_216) = &input.volume_ar_ns {
        let mut array_217 = object.key("VolumeARNs").start_array();
        for item_218 in var_216 {
            {
                array_217.value().string(item_218);
            }
        }
        array_217.finish();
    }
}

pub fn serialize_structure_crate_input_describe_tape_archives_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTapeArchivesInput,
) {
    if let Some(var_219) = &input.tape_ar_ns {
        let mut array_220 = object.key("TapeARNs").start_array();
        for item_221 in var_219 {
            {
                array_220.value().string(item_221);
            }
        }
        array_220.finish();
    }
    if let Some(var_222) = &input.marker {
        object.key("Marker").string(var_222);
    }
    if let Some(var_223) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_223).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_tape_recovery_points_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTapeRecoveryPointsInput,
) {
    if let Some(var_224) = &input.gateway_arn {
        object.key("GatewayARN").string(var_224);
    }
    if let Some(var_225) = &input.marker {
        object.key("Marker").string(var_225);
    }
    if let Some(var_226) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_226).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_tapes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTapesInput,
) {
    if let Some(var_227) = &input.gateway_arn {
        object.key("GatewayARN").string(var_227);
    }
    if let Some(var_228) = &input.tape_ar_ns {
        let mut array_229 = object.key("TapeARNs").start_array();
        for item_230 in var_228 {
            {
                array_229.value().string(item_230);
            }
        }
        array_229.finish();
    }
    if let Some(var_231) = &input.marker {
        object.key("Marker").string(var_231);
    }
    if let Some(var_232) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_232).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_upload_buffer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUploadBufferInput,
) {
    if let Some(var_233) = &input.gateway_arn {
        object.key("GatewayARN").string(var_233);
    }
}

pub fn serialize_structure_crate_input_describe_vtl_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeVtlDevicesInput,
) {
    if let Some(var_234) = &input.gateway_arn {
        object.key("GatewayARN").string(var_234);
    }
    if let Some(var_235) = &input.vtl_device_ar_ns {
        let mut array_236 = object.key("VTLDeviceARNs").start_array();
        for item_237 in var_235 {
            {
                array_236.value().string(item_237);
            }
        }
        array_236.finish();
    }
    if let Some(var_238) = &input.marker {
        object.key("Marker").string(var_238);
    }
    if let Some(var_239) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_239).into()),
        );
    }
}

pub fn serialize_structure_crate_input_describe_working_storage_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkingStorageInput,
) {
    if let Some(var_240) = &input.gateway_arn {
        object.key("GatewayARN").string(var_240);
    }
}

pub fn serialize_structure_crate_input_detach_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachVolumeInput,
) {
    if let Some(var_241) = &input.volume_arn {
        object.key("VolumeARN").string(var_241);
    }
    if let Some(var_242) = &input.force_detach {
        object.key("ForceDetach").boolean(*var_242);
    }
}

pub fn serialize_structure_crate_input_disable_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableGatewayInput,
) {
    if let Some(var_243) = &input.gateway_arn {
        object.key("GatewayARN").string(var_243);
    }
}

pub fn serialize_structure_crate_input_disassociate_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFileSystemInput,
) {
    if let Some(var_244) = &input.file_system_association_arn {
        object.key("FileSystemAssociationARN").string(var_244);
    }
    if input.force_delete {
        object.key("ForceDelete").boolean(input.force_delete);
    }
}

pub fn serialize_structure_crate_input_join_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::JoinDomainInput,
) {
    if let Some(var_245) = &input.gateway_arn {
        object.key("GatewayARN").string(var_245);
    }
    if let Some(var_246) = &input.domain_name {
        object.key("DomainName").string(var_246);
    }
    if let Some(var_247) = &input.organizational_unit {
        object.key("OrganizationalUnit").string(var_247);
    }
    if let Some(var_248) = &input.domain_controllers {
        let mut array_249 = object.key("DomainControllers").start_array();
        for item_250 in var_248 {
            {
                array_249.value().string(item_250);
            }
        }
        array_249.finish();
    }
    if let Some(var_251) = &input.timeout_in_seconds {
        object.key("TimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_251).into()),
        );
    }
    if let Some(var_252) = &input.user_name {
        object.key("UserName").string(var_252);
    }
    if let Some(var_253) = &input.password {
        object.key("Password").string(var_253);
    }
}

pub fn serialize_structure_crate_input_list_automatic_tape_creation_policies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutomaticTapeCreationPoliciesInput,
) {
    if let Some(var_254) = &input.gateway_arn {
        object.key("GatewayARN").string(var_254);
    }
}

pub fn serialize_structure_crate_input_list_file_shares_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFileSharesInput,
) {
    if let Some(var_255) = &input.gateway_arn {
        object.key("GatewayARN").string(var_255);
    }
    if let Some(var_256) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_256).into()),
        );
    }
    if let Some(var_257) = &input.marker {
        object.key("Marker").string(var_257);
    }
}

pub fn serialize_structure_crate_input_list_file_system_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFileSystemAssociationsInput,
) {
    if let Some(var_258) = &input.gateway_arn {
        object.key("GatewayARN").string(var_258);
    }
    if let Some(var_259) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_259).into()),
        );
    }
    if let Some(var_260) = &input.marker {
        object.key("Marker").string(var_260);
    }
}

pub fn serialize_structure_crate_input_list_gateways_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGatewaysInput,
) {
    if let Some(var_261) = &input.marker {
        object.key("Marker").string(var_261);
    }
    if let Some(var_262) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_262).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_local_disks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLocalDisksInput,
) {
    if let Some(var_263) = &input.gateway_arn {
        object.key("GatewayARN").string(var_263);
    }
}

pub fn serialize_structure_crate_input_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_264) = &input.resource_arn {
        object.key("ResourceARN").string(var_264);
    }
    if let Some(var_265) = &input.marker {
        object.key("Marker").string(var_265);
    }
    if let Some(var_266) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_266).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tape_pools_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTapePoolsInput,
) {
    if let Some(var_267) = &input.pool_ar_ns {
        let mut array_268 = object.key("PoolARNs").start_array();
        for item_269 in var_267 {
            {
                array_268.value().string(item_269);
            }
        }
        array_268.finish();
    }
    if let Some(var_270) = &input.marker {
        object.key("Marker").string(var_270);
    }
    if let Some(var_271) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_271).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_tapes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTapesInput,
) {
    if let Some(var_272) = &input.tape_ar_ns {
        let mut array_273 = object.key("TapeARNs").start_array();
        for item_274 in var_272 {
            {
                array_273.value().string(item_274);
            }
        }
        array_273.finish();
    }
    if let Some(var_275) = &input.marker {
        object.key("Marker").string(var_275);
    }
    if let Some(var_276) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_276).into()),
        );
    }
}

pub fn serialize_structure_crate_input_list_volume_initiators_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVolumeInitiatorsInput,
) {
    if let Some(var_277) = &input.volume_arn {
        object.key("VolumeARN").string(var_277);
    }
}

pub fn serialize_structure_crate_input_list_volume_recovery_points_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVolumeRecoveryPointsInput,
) {
    if let Some(var_278) = &input.gateway_arn {
        object.key("GatewayARN").string(var_278);
    }
}

pub fn serialize_structure_crate_input_list_volumes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVolumesInput,
) {
    if let Some(var_279) = &input.gateway_arn {
        object.key("GatewayARN").string(var_279);
    }
    if let Some(var_280) = &input.marker {
        object.key("Marker").string(var_280);
    }
    if let Some(var_281) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_281).into()),
        );
    }
}

pub fn serialize_structure_crate_input_notify_when_uploaded_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::NotifyWhenUploadedInput,
) {
    if let Some(var_282) = &input.file_share_arn {
        object.key("FileShareARN").string(var_282);
    }
}

pub fn serialize_structure_crate_input_refresh_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RefreshCacheInput,
) {
    if let Some(var_283) = &input.file_share_arn {
        object.key("FileShareARN").string(var_283);
    }
    if let Some(var_284) = &input.folder_list {
        let mut array_285 = object.key("FolderList").start_array();
        for item_286 in var_284 {
            {
                array_285.value().string(item_286);
            }
        }
        array_285.finish();
    }
    if let Some(var_287) = &input.recursive {
        object.key("Recursive").boolean(*var_287);
    }
}

pub fn serialize_structure_crate_input_remove_tags_from_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) {
    if let Some(var_288) = &input.resource_arn {
        object.key("ResourceARN").string(var_288);
    }
    if let Some(var_289) = &input.tag_keys {
        let mut array_290 = object.key("TagKeys").start_array();
        for item_291 in var_289 {
            {
                array_290.value().string(item_291);
            }
        }
        array_290.finish();
    }
}

pub fn serialize_structure_crate_input_reset_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetCacheInput,
) {
    if let Some(var_292) = &input.gateway_arn {
        object.key("GatewayARN").string(var_292);
    }
}

pub fn serialize_structure_crate_input_retrieve_tape_archive_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetrieveTapeArchiveInput,
) {
    if let Some(var_293) = &input.tape_arn {
        object.key("TapeARN").string(var_293);
    }
    if let Some(var_294) = &input.gateway_arn {
        object.key("GatewayARN").string(var_294);
    }
}

pub fn serialize_structure_crate_input_retrieve_tape_recovery_point_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetrieveTapeRecoveryPointInput,
) {
    if let Some(var_295) = &input.tape_arn {
        object.key("TapeARN").string(var_295);
    }
    if let Some(var_296) = &input.gateway_arn {
        object.key("GatewayARN").string(var_296);
    }
}

pub fn serialize_structure_crate_input_set_local_console_password_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetLocalConsolePasswordInput,
) {
    if let Some(var_297) = &input.gateway_arn {
        object.key("GatewayARN").string(var_297);
    }
    if let Some(var_298) = &input.local_console_password {
        object.key("LocalConsolePassword").string(var_298);
    }
}

pub fn serialize_structure_crate_input_set_smb_guest_password_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetSmbGuestPasswordInput,
) {
    if let Some(var_299) = &input.gateway_arn {
        object.key("GatewayARN").string(var_299);
    }
    if let Some(var_300) = &input.password {
        object.key("Password").string(var_300);
    }
}

pub fn serialize_structure_crate_input_shutdown_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ShutdownGatewayInput,
) {
    if let Some(var_301) = &input.gateway_arn {
        object.key("GatewayARN").string(var_301);
    }
}

pub fn serialize_structure_crate_input_start_availability_monitor_test_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAvailabilityMonitorTestInput,
) {
    if let Some(var_302) = &input.gateway_arn {
        object.key("GatewayARN").string(var_302);
    }
}

pub fn serialize_structure_crate_input_start_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartGatewayInput,
) {
    if let Some(var_303) = &input.gateway_arn {
        object.key("GatewayARN").string(var_303);
    }
}

pub fn serialize_structure_crate_input_update_automatic_tape_creation_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAutomaticTapeCreationPolicyInput,
) {
    if let Some(var_304) = &input.automatic_tape_creation_rules {
        let mut array_305 = object.key("AutomaticTapeCreationRules").start_array();
        for item_306 in var_304 {
            {
                let mut object_307 = array_305.value().start_object();
                crate::json_ser::serialize_structure_crate_model_automatic_tape_creation_rule(
                    &mut object_307,
                    item_306,
                );
                object_307.finish();
            }
        }
        array_305.finish();
    }
    if let Some(var_308) = &input.gateway_arn {
        object.key("GatewayARN").string(var_308);
    }
}

pub fn serialize_structure_crate_input_update_bandwidth_rate_limit_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBandwidthRateLimitInput,
) {
    if let Some(var_309) = &input.gateway_arn {
        object.key("GatewayARN").string(var_309);
    }
    if let Some(var_310) = &input.average_upload_rate_limit_in_bits_per_sec {
        object.key("AverageUploadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_310).into()),
        );
    }
    if let Some(var_311) = &input.average_download_rate_limit_in_bits_per_sec {
        object.key("AverageDownloadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_311).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_bandwidth_rate_limit_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBandwidthRateLimitScheduleInput,
) {
    if let Some(var_312) = &input.gateway_arn {
        object.key("GatewayARN").string(var_312);
    }
    if let Some(var_313) = &input.bandwidth_rate_limit_intervals {
        let mut array_314 = object.key("BandwidthRateLimitIntervals").start_array();
        for item_315 in var_313 {
            {
                let mut object_316 = array_314.value().start_object();
                crate::json_ser::serialize_structure_crate_model_bandwidth_rate_limit_interval(
                    &mut object_316,
                    item_315,
                );
                object_316.finish();
            }
        }
        array_314.finish();
    }
}

pub fn serialize_structure_crate_input_update_chap_credentials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChapCredentialsInput,
) {
    if let Some(var_317) = &input.target_arn {
        object.key("TargetARN").string(var_317);
    }
    if let Some(var_318) = &input.secret_to_authenticate_initiator {
        object.key("SecretToAuthenticateInitiator").string(var_318);
    }
    if let Some(var_319) = &input.initiator_name {
        object.key("InitiatorName").string(var_319);
    }
    if let Some(var_320) = &input.secret_to_authenticate_target {
        object.key("SecretToAuthenticateTarget").string(var_320);
    }
}

pub fn serialize_structure_crate_input_update_file_system_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFileSystemAssociationInput,
) {
    if let Some(var_321) = &input.file_system_association_arn {
        object.key("FileSystemAssociationARN").string(var_321);
    }
    if let Some(var_322) = &input.user_name {
        object.key("UserName").string(var_322);
    }
    if let Some(var_323) = &input.password {
        object.key("Password").string(var_323);
    }
    if let Some(var_324) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_324);
    }
    if let Some(var_325) = &input.cache_attributes {
        let mut object_326 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_attributes(&mut object_326, var_325);
        object_326.finish();
    }
}

pub fn serialize_structure_crate_input_update_gateway_information_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGatewayInformationInput,
) {
    if let Some(var_327) = &input.gateway_arn {
        object.key("GatewayARN").string(var_327);
    }
    if let Some(var_328) = &input.gateway_name {
        object.key("GatewayName").string(var_328);
    }
    if let Some(var_329) = &input.gateway_timezone {
        object.key("GatewayTimezone").string(var_329);
    }
    if let Some(var_330) = &input.cloud_watch_log_group_arn {
        object.key("CloudWatchLogGroupARN").string(var_330);
    }
    if let Some(var_331) = &input.gateway_capacity {
        object.key("GatewayCapacity").string(var_331.as_str());
    }
}

pub fn serialize_structure_crate_input_update_gateway_software_now_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGatewaySoftwareNowInput,
) {
    if let Some(var_332) = &input.gateway_arn {
        object.key("GatewayARN").string(var_332);
    }
}

pub fn serialize_structure_crate_input_update_maintenance_start_time_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceStartTimeInput,
) {
    if let Some(var_333) = &input.gateway_arn {
        object.key("GatewayARN").string(var_333);
    }
    if let Some(var_334) = &input.hour_of_day {
        object.key("HourOfDay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_334).into()),
        );
    }
    if let Some(var_335) = &input.minute_of_hour {
        object.key("MinuteOfHour").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_335).into()),
        );
    }
    if let Some(var_336) = &input.day_of_week {
        object.key("DayOfWeek").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_336).into()),
        );
    }
    if let Some(var_337) = &input.day_of_month {
        object.key("DayOfMonth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_337).into()),
        );
    }
}

pub fn serialize_structure_crate_input_update_nfs_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNfsFileShareInput,
) {
    if let Some(var_338) = &input.file_share_arn {
        object.key("FileShareARN").string(var_338);
    }
    if let Some(var_339) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_339);
    }
    if let Some(var_340) = &input.kms_key {
        object.key("KMSKey").string(var_340);
    }
    if let Some(var_341) = &input.nfs_file_share_defaults {
        let mut object_342 = object.key("NFSFileShareDefaults").start_object();
        crate::json_ser::serialize_structure_crate_model_nfs_file_share_defaults(
            &mut object_342,
            var_341,
        );
        object_342.finish();
    }
    if let Some(var_343) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_343);
    }
    if let Some(var_344) = &input.object_acl {
        object.key("ObjectACL").string(var_344.as_str());
    }
    if let Some(var_345) = &input.client_list {
        let mut array_346 = object.key("ClientList").start_array();
        for item_347 in var_345 {
            {
                array_346.value().string(item_347);
            }
        }
        array_346.finish();
    }
    if let Some(var_348) = &input.squash {
        object.key("Squash").string(var_348);
    }
    if let Some(var_349) = &input.read_only {
        object.key("ReadOnly").boolean(*var_349);
    }
    if let Some(var_350) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_350);
    }
    if let Some(var_351) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_351);
    }
    if let Some(var_352) = &input.file_share_name {
        object.key("FileShareName").string(var_352);
    }
    if let Some(var_353) = &input.cache_attributes {
        let mut object_354 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_attributes(&mut object_354, var_353);
        object_354.finish();
    }
    if let Some(var_355) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_355);
    }
}

pub fn serialize_structure_crate_input_update_smb_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSmbFileShareInput,
) {
    if let Some(var_356) = &input.file_share_arn {
        object.key("FileShareARN").string(var_356);
    }
    if let Some(var_357) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_357);
    }
    if let Some(var_358) = &input.kms_key {
        object.key("KMSKey").string(var_358);
    }
    if let Some(var_359) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_359);
    }
    if let Some(var_360) = &input.object_acl {
        object.key("ObjectACL").string(var_360.as_str());
    }
    if let Some(var_361) = &input.read_only {
        object.key("ReadOnly").boolean(*var_361);
    }
    if let Some(var_362) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_362);
    }
    if let Some(var_363) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_363);
    }
    if let Some(var_364) = &input.smbacl_enabled {
        object.key("SMBACLEnabled").boolean(*var_364);
    }
    if let Some(var_365) = &input.access_based_enumeration {
        object.key("AccessBasedEnumeration").boolean(*var_365);
    }
    if let Some(var_366) = &input.admin_user_list {
        let mut array_367 = object.key("AdminUserList").start_array();
        for item_368 in var_366 {
            {
                array_367.value().string(item_368);
            }
        }
        array_367.finish();
    }
    if let Some(var_369) = &input.valid_user_list {
        let mut array_370 = object.key("ValidUserList").start_array();
        for item_371 in var_369 {
            {
                array_370.value().string(item_371);
            }
        }
        array_370.finish();
    }
    if let Some(var_372) = &input.invalid_user_list {
        let mut array_373 = object.key("InvalidUserList").start_array();
        for item_374 in var_372 {
            {
                array_373.value().string(item_374);
            }
        }
        array_373.finish();
    }
    if let Some(var_375) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_375);
    }
    if let Some(var_376) = &input.case_sensitivity {
        object.key("CaseSensitivity").string(var_376.as_str());
    }
    if let Some(var_377) = &input.file_share_name {
        object.key("FileShareName").string(var_377);
    }
    if let Some(var_378) = &input.cache_attributes {
        let mut object_379 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_crate_model_cache_attributes(&mut object_379, var_378);
        object_379.finish();
    }
    if let Some(var_380) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_380);
    }
    if let Some(var_381) = &input.oplocks_enabled {
        object.key("OplocksEnabled").boolean(*var_381);
    }
}

pub fn serialize_structure_crate_input_update_smb_file_share_visibility_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSmbFileShareVisibilityInput,
) {
    if let Some(var_382) = &input.gateway_arn {
        object.key("GatewayARN").string(var_382);
    }
    if let Some(var_383) = &input.file_shares_visible {
        object.key("FileSharesVisible").boolean(*var_383);
    }
}

pub fn serialize_structure_crate_input_update_smb_security_strategy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSmbSecurityStrategyInput,
) {
    if let Some(var_384) = &input.gateway_arn {
        object.key("GatewayARN").string(var_384);
    }
    if let Some(var_385) = &input.smb_security_strategy {
        object.key("SMBSecurityStrategy").string(var_385.as_str());
    }
}

pub fn serialize_structure_crate_input_update_snapshot_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSnapshotScheduleInput,
) {
    if let Some(var_386) = &input.volume_arn {
        object.key("VolumeARN").string(var_386);
    }
    if let Some(var_387) = &input.start_at {
        object.key("StartAt").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_387).into()),
        );
    }
    if let Some(var_388) = &input.recurrence_in_hours {
        object.key("RecurrenceInHours").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_388).into()),
        );
    }
    if let Some(var_389) = &input.description {
        object.key("Description").string(var_389);
    }
    if let Some(var_390) = &input.tags {
        let mut array_391 = object.key("Tags").start_array();
        for item_392 in var_390 {
            {
                let mut object_393 = array_391.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tag(&mut object_393, item_392);
                object_393.finish();
            }
        }
        array_391.finish();
    }
}

pub fn serialize_structure_crate_input_update_vtl_device_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVtlDeviceTypeInput,
) {
    if let Some(var_394) = &input.vtl_device_arn {
        object.key("VTLDeviceARN").string(var_394);
    }
    if let Some(var_395) = &input.device_type {
        object.key("DeviceType").string(var_395);
    }
}

pub fn serialize_structure_crate_model_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_396) = &input.key {
        object.key("Key").string(var_396);
    }
    if let Some(var_397) = &input.value {
        object.key("Value").string(var_397);
    }
}

pub fn serialize_structure_crate_model_cache_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CacheAttributes,
) {
    if let Some(var_398) = &input.cache_stale_timeout_in_seconds {
        object.key("CacheStaleTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_398).into()),
        );
    }
}

pub fn serialize_structure_crate_model_endpoint_network_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EndpointNetworkConfiguration,
) {
    if let Some(var_399) = &input.ip_addresses {
        let mut array_400 = object.key("IpAddresses").start_array();
        for item_401 in var_399 {
            {
                array_400.value().string(item_401);
            }
        }
        array_400.finish();
    }
}

pub fn serialize_structure_crate_model_nfs_file_share_defaults(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NfsFileShareDefaults,
) {
    if let Some(var_402) = &input.file_mode {
        object.key("FileMode").string(var_402);
    }
    if let Some(var_403) = &input.directory_mode {
        object.key("DirectoryMode").string(var_403);
    }
    if let Some(var_404) = &input.group_id {
        object.key("GroupId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_404).into()),
        );
    }
    if let Some(var_405) = &input.owner_id {
        object.key("OwnerId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_405).into()),
        );
    }
}

pub fn serialize_structure_crate_model_automatic_tape_creation_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutomaticTapeCreationRule,
) {
    if let Some(var_406) = &input.tape_barcode_prefix {
        object.key("TapeBarcodePrefix").string(var_406);
    }
    if let Some(var_407) = &input.pool_id {
        object.key("PoolId").string(var_407);
    }
    if let Some(var_408) = &input.tape_size_in_bytes {
        object.key("TapeSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_408).into()),
        );
    }
    if let Some(var_409) = &input.minimum_num_tapes {
        object.key("MinimumNumTapes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_409).into()),
        );
    }
    if input.worm {
        object.key("Worm").boolean(input.worm);
    }
}

pub fn serialize_structure_crate_model_bandwidth_rate_limit_interval(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BandwidthRateLimitInterval,
) {
    if let Some(var_410) = &input.start_hour_of_day {
        object.key("StartHourOfDay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_410).into()),
        );
    }
    if let Some(var_411) = &input.start_minute_of_hour {
        object.key("StartMinuteOfHour").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_411).into()),
        );
    }
    if let Some(var_412) = &input.end_hour_of_day {
        object.key("EndHourOfDay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_412).into()),
        );
    }
    if let Some(var_413) = &input.end_minute_of_hour {
        object.key("EndMinuteOfHour").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_413).into()),
        );
    }
    if let Some(var_414) = &input.days_of_week {
        let mut array_415 = object.key("DaysOfWeek").start_array();
        for item_416 in var_414 {
            {
                array_415.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_416).into()),
                );
            }
        }
        array_415.finish();
    }
    if let Some(var_417) = &input.average_upload_rate_limit_in_bits_per_sec {
        object.key("AverageUploadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_417).into()),
        );
    }
    if let Some(var_418) = &input.average_download_rate_limit_in_bits_per_sec {
        object.key("AverageDownloadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_418).into()),
        );
    }
}
