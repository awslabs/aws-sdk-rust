// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_activate_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ActivateGatewayInput,
) {
    if let Some(var_1) = &input.activation_key {
        object.key("ActivationKey").string(var_1);
    }
    if let Some(var_2) = &input.gateway_name {
        object.key("GatewayName").string(var_2);
    }
    if let Some(var_3) = &input.gateway_timezone {
        object.key("GatewayTimezone").string(var_3);
    }
    if let Some(var_4) = &input.gateway_region {
        object.key("GatewayRegion").string(var_4);
    }
    if let Some(var_5) = &input.gateway_type {
        object.key("GatewayType").string(var_5);
    }
    if let Some(var_6) = &input.tape_drive_type {
        object.key("TapeDriveType").string(var_6);
    }
    if let Some(var_7) = &input.medium_changer_type {
        object.key("MediumChangerType").string(var_7);
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                let mut object_11 = array_9.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_11, item_10);
                object_11.finish();
            }
        }
        array_9.finish();
    }
}

pub fn serialize_structure_add_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddCacheInput,
) {
    if let Some(var_12) = &input.gateway_arn {
        object.key("GatewayARN").string(var_12);
    }
    if let Some(var_13) = &input.disk_ids {
        let mut array_14 = object.key("DiskIds").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15);
            }
        }
        array_14.finish();
    }
}

pub fn serialize_structure_add_tags_to_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddTagsToResourceInput,
) {
    if let Some(var_16) = &input.resource_arn {
        object.key("ResourceARN").string(var_16);
    }
    if let Some(var_17) = &input.tags {
        let mut array_18 = object.key("Tags").start_array();
        for item_19 in var_17 {
            {
                let mut object_20 = array_18.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_20, item_19);
                object_20.finish();
            }
        }
        array_18.finish();
    }
}

pub fn serialize_structure_add_upload_buffer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddUploadBufferInput,
) {
    if let Some(var_21) = &input.gateway_arn {
        object.key("GatewayARN").string(var_21);
    }
    if let Some(var_22) = &input.disk_ids {
        let mut array_23 = object.key("DiskIds").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24);
            }
        }
        array_23.finish();
    }
}

pub fn serialize_structure_add_working_storage_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AddWorkingStorageInput,
) {
    if let Some(var_25) = &input.gateway_arn {
        object.key("GatewayARN").string(var_25);
    }
    if let Some(var_26) = &input.disk_ids {
        let mut array_27 = object.key("DiskIds").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28);
            }
        }
        array_27.finish();
    }
}

pub fn serialize_structure_assign_tape_pool_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssignTapePoolInput,
) {
    if let Some(var_29) = &input.tape_arn {
        object.key("TapeARN").string(var_29);
    }
    if let Some(var_30) = &input.pool_id {
        object.key("PoolId").string(var_30);
    }
    if input.bypass_governance_retention {
        object
            .key("BypassGovernanceRetention")
            .boolean(input.bypass_governance_retention);
    }
}

pub fn serialize_structure_associate_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateFileSystemInput,
) {
    if let Some(var_31) = &input.user_name {
        object.key("UserName").string(var_31);
    }
    if let Some(var_32) = &input.password {
        object.key("Password").string(var_32);
    }
    if let Some(var_33) = &input.client_token {
        object.key("ClientToken").string(var_33);
    }
    if let Some(var_34) = &input.gateway_arn {
        object.key("GatewayARN").string(var_34);
    }
    if let Some(var_35) = &input.location_arn {
        object.key("LocationARN").string(var_35);
    }
    if let Some(var_36) = &input.tags {
        let mut array_37 = object.key("Tags").start_array();
        for item_38 in var_36 {
            {
                let mut object_39 = array_37.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_39, item_38);
                object_39.finish();
            }
        }
        array_37.finish();
    }
    if let Some(var_40) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_40);
    }
    if let Some(var_41) = &input.cache_attributes {
        let mut object_42 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_cache_attributes(&mut object_42, var_41);
        object_42.finish();
    }
}

pub fn serialize_structure_attach_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AttachVolumeInput,
) {
    if let Some(var_43) = &input.gateway_arn {
        object.key("GatewayARN").string(var_43);
    }
    if let Some(var_44) = &input.target_name {
        object.key("TargetName").string(var_44);
    }
    if let Some(var_45) = &input.volume_arn {
        object.key("VolumeARN").string(var_45);
    }
    if let Some(var_46) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_46);
    }
    if let Some(var_47) = &input.disk_id {
        object.key("DiskId").string(var_47);
    }
}

pub fn serialize_structure_cancel_archival_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelArchivalInput,
) {
    if let Some(var_48) = &input.gateway_arn {
        object.key("GatewayARN").string(var_48);
    }
    if let Some(var_49) = &input.tape_arn {
        object.key("TapeARN").string(var_49);
    }
}

pub fn serialize_structure_cancel_retrieval_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelRetrievalInput,
) {
    if let Some(var_50) = &input.gateway_arn {
        object.key("GatewayARN").string(var_50);
    }
    if let Some(var_51) = &input.tape_arn {
        object.key("TapeARN").string(var_51);
    }
}

pub fn serialize_structure_create_cachedi_scsi_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateCachediScsiVolumeInput,
) {
    if let Some(var_52) = &input.gateway_arn {
        object.key("GatewayARN").string(var_52);
    }
    {
        object.key("VolumeSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.volume_size_in_bytes).into()),
        );
    }
    if let Some(var_53) = &input.snapshot_id {
        object.key("SnapshotId").string(var_53);
    }
    if let Some(var_54) = &input.target_name {
        object.key("TargetName").string(var_54);
    }
    if let Some(var_55) = &input.source_volume_arn {
        object.key("SourceVolumeARN").string(var_55);
    }
    if let Some(var_56) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_56);
    }
    if let Some(var_57) = &input.client_token {
        object.key("ClientToken").string(var_57);
    }
    if let Some(var_58) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_58);
    }
    if let Some(var_59) = &input.kms_key {
        object.key("KMSKey").string(var_59);
    }
    if let Some(var_60) = &input.tags {
        let mut array_61 = object.key("Tags").start_array();
        for item_62 in var_60 {
            {
                let mut object_63 = array_61.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_63, item_62);
                object_63.finish();
            }
        }
        array_61.finish();
    }
}

pub fn serialize_structure_create_nfs_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNfsFileShareInput,
) {
    if let Some(var_64) = &input.client_token {
        object.key("ClientToken").string(var_64);
    }
    if let Some(var_65) = &input.nfs_file_share_defaults {
        let mut object_66 = object.key("NFSFileShareDefaults").start_object();
        crate::json_ser::serialize_structure_nfs_file_share_defaults(&mut object_66, var_65);
        object_66.finish();
    }
    if let Some(var_67) = &input.gateway_arn {
        object.key("GatewayARN").string(var_67);
    }
    if let Some(var_68) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_68);
    }
    if let Some(var_69) = &input.kms_key {
        object.key("KMSKey").string(var_69);
    }
    if let Some(var_70) = &input.role {
        object.key("Role").string(var_70);
    }
    if let Some(var_71) = &input.location_arn {
        object.key("LocationARN").string(var_71);
    }
    if let Some(var_72) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_72);
    }
    if let Some(var_73) = &input.object_acl {
        object.key("ObjectACL").string(var_73.as_str());
    }
    if let Some(var_74) = &input.client_list {
        let mut array_75 = object.key("ClientList").start_array();
        for item_76 in var_74 {
            {
                array_75.value().string(item_76);
            }
        }
        array_75.finish();
    }
    if let Some(var_77) = &input.squash {
        object.key("Squash").string(var_77);
    }
    if let Some(var_78) = &input.read_only {
        object.key("ReadOnly").boolean(*var_78);
    }
    if let Some(var_79) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_79);
    }
    if let Some(var_80) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_80);
    }
    if let Some(var_81) = &input.tags {
        let mut array_82 = object.key("Tags").start_array();
        for item_83 in var_81 {
            {
                let mut object_84 = array_82.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_84, item_83);
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.file_share_name {
        object.key("FileShareName").string(var_85);
    }
    if let Some(var_86) = &input.cache_attributes {
        let mut object_87 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_cache_attributes(&mut object_87, var_86);
        object_87.finish();
    }
    if let Some(var_88) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_88);
    }
}

pub fn serialize_structure_create_smb_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSmbFileShareInput,
) {
    if let Some(var_89) = &input.client_token {
        object.key("ClientToken").string(var_89);
    }
    if let Some(var_90) = &input.gateway_arn {
        object.key("GatewayARN").string(var_90);
    }
    if let Some(var_91) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_91);
    }
    if let Some(var_92) = &input.kms_key {
        object.key("KMSKey").string(var_92);
    }
    if let Some(var_93) = &input.role {
        object.key("Role").string(var_93);
    }
    if let Some(var_94) = &input.location_arn {
        object.key("LocationARN").string(var_94);
    }
    if let Some(var_95) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_95);
    }
    if let Some(var_96) = &input.object_acl {
        object.key("ObjectACL").string(var_96.as_str());
    }
    if let Some(var_97) = &input.read_only {
        object.key("ReadOnly").boolean(*var_97);
    }
    if let Some(var_98) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_98);
    }
    if let Some(var_99) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_99);
    }
    if let Some(var_100) = &input.smbacl_enabled {
        object.key("SMBACLEnabled").boolean(*var_100);
    }
    if let Some(var_101) = &input.access_based_enumeration {
        object.key("AccessBasedEnumeration").boolean(*var_101);
    }
    if let Some(var_102) = &input.admin_user_list {
        let mut array_103 = object.key("AdminUserList").start_array();
        for item_104 in var_102 {
            {
                array_103.value().string(item_104);
            }
        }
        array_103.finish();
    }
    if let Some(var_105) = &input.valid_user_list {
        let mut array_106 = object.key("ValidUserList").start_array();
        for item_107 in var_105 {
            {
                array_106.value().string(item_107);
            }
        }
        array_106.finish();
    }
    if let Some(var_108) = &input.invalid_user_list {
        let mut array_109 = object.key("InvalidUserList").start_array();
        for item_110 in var_108 {
            {
                array_109.value().string(item_110);
            }
        }
        array_109.finish();
    }
    if let Some(var_111) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_111);
    }
    if let Some(var_112) = &input.authentication {
        object.key("Authentication").string(var_112);
    }
    if let Some(var_113) = &input.case_sensitivity {
        object.key("CaseSensitivity").string(var_113.as_str());
    }
    if let Some(var_114) = &input.tags {
        let mut array_115 = object.key("Tags").start_array();
        for item_116 in var_114 {
            {
                let mut object_117 = array_115.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_117, item_116);
                object_117.finish();
            }
        }
        array_115.finish();
    }
    if let Some(var_118) = &input.file_share_name {
        object.key("FileShareName").string(var_118);
    }
    if let Some(var_119) = &input.cache_attributes {
        let mut object_120 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_cache_attributes(&mut object_120, var_119);
        object_120.finish();
    }
    if let Some(var_121) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_121);
    }
}

pub fn serialize_structure_create_snapshot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSnapshotInput,
) {
    if let Some(var_122) = &input.volume_arn {
        object.key("VolumeARN").string(var_122);
    }
    if let Some(var_123) = &input.snapshot_description {
        object.key("SnapshotDescription").string(var_123);
    }
    if let Some(var_124) = &input.tags {
        let mut array_125 = object.key("Tags").start_array();
        for item_126 in var_124 {
            {
                let mut object_127 = array_125.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_127, item_126);
                object_127.finish();
            }
        }
        array_125.finish();
    }
}

pub fn serialize_structure_create_snapshot_from_volume_recovery_point_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSnapshotFromVolumeRecoveryPointInput,
) {
    if let Some(var_128) = &input.volume_arn {
        object.key("VolumeARN").string(var_128);
    }
    if let Some(var_129) = &input.snapshot_description {
        object.key("SnapshotDescription").string(var_129);
    }
    if let Some(var_130) = &input.tags {
        let mut array_131 = object.key("Tags").start_array();
        for item_132 in var_130 {
            {
                let mut object_133 = array_131.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_133, item_132);
                object_133.finish();
            }
        }
        array_131.finish();
    }
}

pub fn serialize_structure_create_storedi_scsi_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateStorediScsiVolumeInput,
) {
    if let Some(var_134) = &input.gateway_arn {
        object.key("GatewayARN").string(var_134);
    }
    if let Some(var_135) = &input.disk_id {
        object.key("DiskId").string(var_135);
    }
    if let Some(var_136) = &input.snapshot_id {
        object.key("SnapshotId").string(var_136);
    }
    {
        object
            .key("PreserveExistingData")
            .boolean(input.preserve_existing_data);
    }
    if let Some(var_137) = &input.target_name {
        object.key("TargetName").string(var_137);
    }
    if let Some(var_138) = &input.network_interface_id {
        object.key("NetworkInterfaceId").string(var_138);
    }
    if let Some(var_139) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_139);
    }
    if let Some(var_140) = &input.kms_key {
        object.key("KMSKey").string(var_140);
    }
    if let Some(var_141) = &input.tags {
        let mut array_142 = object.key("Tags").start_array();
        for item_143 in var_141 {
            {
                let mut object_144 = array_142.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_144, item_143);
                object_144.finish();
            }
        }
        array_142.finish();
    }
}

pub fn serialize_structure_create_tape_pool_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTapePoolInput,
) {
    if let Some(var_145) = &input.pool_name {
        object.key("PoolName").string(var_145);
    }
    if let Some(var_146) = &input.storage_class {
        object.key("StorageClass").string(var_146.as_str());
    }
    if let Some(var_147) = &input.retention_lock_type {
        object.key("RetentionLockType").string(var_147.as_str());
    }
    if let Some(var_148) = &input.retention_lock_time_in_days {
        object.key("RetentionLockTimeInDays").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_148).into()),
        );
    }
    if let Some(var_149) = &input.tags {
        let mut array_150 = object.key("Tags").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_152, item_151);
                object_152.finish();
            }
        }
        array_150.finish();
    }
}

pub fn serialize_structure_create_tapes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTapesInput,
) {
    if let Some(var_153) = &input.gateway_arn {
        object.key("GatewayARN").string(var_153);
    }
    if let Some(var_154) = &input.tape_size_in_bytes {
        object.key("TapeSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_154).into()),
        );
    }
    if let Some(var_155) = &input.client_token {
        object.key("ClientToken").string(var_155);
    }
    if let Some(var_156) = &input.num_tapes_to_create {
        object.key("NumTapesToCreate").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_156).into()),
        );
    }
    if let Some(var_157) = &input.tape_barcode_prefix {
        object.key("TapeBarcodePrefix").string(var_157);
    }
    if let Some(var_158) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_158);
    }
    if let Some(var_159) = &input.kms_key {
        object.key("KMSKey").string(var_159);
    }
    if let Some(var_160) = &input.pool_id {
        object.key("PoolId").string(var_160);
    }
    if input.worm {
        object.key("Worm").boolean(input.worm);
    }
    if let Some(var_161) = &input.tags {
        let mut array_162 = object.key("Tags").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_164, item_163);
                object_164.finish();
            }
        }
        array_162.finish();
    }
}

pub fn serialize_structure_create_tape_with_barcode_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateTapeWithBarcodeInput,
) {
    if let Some(var_165) = &input.gateway_arn {
        object.key("GatewayARN").string(var_165);
    }
    if let Some(var_166) = &input.tape_size_in_bytes {
        object.key("TapeSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.tape_barcode {
        object.key("TapeBarcode").string(var_167);
    }
    if let Some(var_168) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_168);
    }
    if let Some(var_169) = &input.kms_key {
        object.key("KMSKey").string(var_169);
    }
    if let Some(var_170) = &input.pool_id {
        object.key("PoolId").string(var_170);
    }
    if input.worm {
        object.key("Worm").boolean(input.worm);
    }
    if let Some(var_171) = &input.tags {
        let mut array_172 = object.key("Tags").start_array();
        for item_173 in var_171 {
            {
                let mut object_174 = array_172.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_174, item_173);
                object_174.finish();
            }
        }
        array_172.finish();
    }
}

pub fn serialize_structure_delete_automatic_tape_creation_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteAutomaticTapeCreationPolicyInput,
) {
    if let Some(var_175) = &input.gateway_arn {
        object.key("GatewayARN").string(var_175);
    }
}

pub fn serialize_structure_delete_bandwidth_rate_limit_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteBandwidthRateLimitInput,
) {
    if let Some(var_176) = &input.gateway_arn {
        object.key("GatewayARN").string(var_176);
    }
    if let Some(var_177) = &input.bandwidth_type {
        object.key("BandwidthType").string(var_177);
    }
}

pub fn serialize_structure_delete_chap_credentials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteChapCredentialsInput,
) {
    if let Some(var_178) = &input.target_arn {
        object.key("TargetARN").string(var_178);
    }
    if let Some(var_179) = &input.initiator_name {
        object.key("InitiatorName").string(var_179);
    }
}

pub fn serialize_structure_delete_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFileShareInput,
) {
    if let Some(var_180) = &input.file_share_arn {
        object.key("FileShareARN").string(var_180);
    }
    if input.force_delete {
        object.key("ForceDelete").boolean(input.force_delete);
    }
}

pub fn serialize_structure_delete_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteGatewayInput,
) {
    if let Some(var_181) = &input.gateway_arn {
        object.key("GatewayARN").string(var_181);
    }
}

pub fn serialize_structure_delete_snapshot_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSnapshotScheduleInput,
) {
    if let Some(var_182) = &input.volume_arn {
        object.key("VolumeARN").string(var_182);
    }
}

pub fn serialize_structure_delete_tape_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTapeInput,
) {
    if let Some(var_183) = &input.gateway_arn {
        object.key("GatewayARN").string(var_183);
    }
    if let Some(var_184) = &input.tape_arn {
        object.key("TapeARN").string(var_184);
    }
    if input.bypass_governance_retention {
        object
            .key("BypassGovernanceRetention")
            .boolean(input.bypass_governance_retention);
    }
}

pub fn serialize_structure_delete_tape_archive_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTapeArchiveInput,
) {
    if let Some(var_185) = &input.tape_arn {
        object.key("TapeARN").string(var_185);
    }
    if input.bypass_governance_retention {
        object
            .key("BypassGovernanceRetention")
            .boolean(input.bypass_governance_retention);
    }
}

pub fn serialize_structure_delete_tape_pool_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteTapePoolInput,
) {
    if let Some(var_186) = &input.pool_arn {
        object.key("PoolARN").string(var_186);
    }
}

pub fn serialize_structure_delete_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteVolumeInput,
) {
    if let Some(var_187) = &input.volume_arn {
        object.key("VolumeARN").string(var_187);
    }
}

pub fn serialize_structure_describe_availability_monitor_test_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeAvailabilityMonitorTestInput,
) {
    if let Some(var_188) = &input.gateway_arn {
        object.key("GatewayARN").string(var_188);
    }
}

pub fn serialize_structure_describe_bandwidth_rate_limit_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBandwidthRateLimitInput,
) {
    if let Some(var_189) = &input.gateway_arn {
        object.key("GatewayARN").string(var_189);
    }
}

pub fn serialize_structure_describe_bandwidth_rate_limit_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeBandwidthRateLimitScheduleInput,
) {
    if let Some(var_190) = &input.gateway_arn {
        object.key("GatewayARN").string(var_190);
    }
}

pub fn serialize_structure_describe_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCacheInput,
) {
    if let Some(var_191) = &input.gateway_arn {
        object.key("GatewayARN").string(var_191);
    }
}

pub fn serialize_structure_describe_cachedi_scsi_volumes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeCachediScsiVolumesInput,
) {
    if let Some(var_192) = &input.volume_ar_ns {
        let mut array_193 = object.key("VolumeARNs").start_array();
        for item_194 in var_192 {
            {
                array_193.value().string(item_194);
            }
        }
        array_193.finish();
    }
}

pub fn serialize_structure_describe_chap_credentials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeChapCredentialsInput,
) {
    if let Some(var_195) = &input.target_arn {
        object.key("TargetARN").string(var_195);
    }
}

pub fn serialize_structure_describe_file_system_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFileSystemAssociationsInput,
) {
    if let Some(var_196) = &input.file_system_association_arn_list {
        let mut array_197 = object.key("FileSystemAssociationARNList").start_array();
        for item_198 in var_196 {
            {
                array_197.value().string(item_198);
            }
        }
        array_197.finish();
    }
}

pub fn serialize_structure_describe_gateway_information_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeGatewayInformationInput,
) {
    if let Some(var_199) = &input.gateway_arn {
        object.key("GatewayARN").string(var_199);
    }
}

pub fn serialize_structure_describe_maintenance_start_time_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeMaintenanceStartTimeInput,
) {
    if let Some(var_200) = &input.gateway_arn {
        object.key("GatewayARN").string(var_200);
    }
}

pub fn serialize_structure_describe_nfs_file_shares_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeNfsFileSharesInput,
) {
    if let Some(var_201) = &input.file_share_arn_list {
        let mut array_202 = object.key("FileShareARNList").start_array();
        for item_203 in var_201 {
            {
                array_202.value().string(item_203);
            }
        }
        array_202.finish();
    }
}

pub fn serialize_structure_describe_smb_file_shares_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSmbFileSharesInput,
) {
    if let Some(var_204) = &input.file_share_arn_list {
        let mut array_205 = object.key("FileShareARNList").start_array();
        for item_206 in var_204 {
            {
                array_205.value().string(item_206);
            }
        }
        array_205.finish();
    }
}

pub fn serialize_structure_describe_smb_settings_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSmbSettingsInput,
) {
    if let Some(var_207) = &input.gateway_arn {
        object.key("GatewayARN").string(var_207);
    }
}

pub fn serialize_structure_describe_snapshot_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSnapshotScheduleInput,
) {
    if let Some(var_208) = &input.volume_arn {
        object.key("VolumeARN").string(var_208);
    }
}

pub fn serialize_structure_describe_storedi_scsi_volumes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeStorediScsiVolumesInput,
) {
    if let Some(var_209) = &input.volume_ar_ns {
        let mut array_210 = object.key("VolumeARNs").start_array();
        for item_211 in var_209 {
            {
                array_210.value().string(item_211);
            }
        }
        array_210.finish();
    }
}

pub fn serialize_structure_describe_tape_archives_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTapeArchivesInput,
) {
    if let Some(var_212) = &input.tape_ar_ns {
        let mut array_213 = object.key("TapeARNs").start_array();
        for item_214 in var_212 {
            {
                array_213.value().string(item_214);
            }
        }
        array_213.finish();
    }
    if let Some(var_215) = &input.marker {
        object.key("Marker").string(var_215);
    }
    if let Some(var_216) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_216).into()),
        );
    }
}

pub fn serialize_structure_describe_tape_recovery_points_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTapeRecoveryPointsInput,
) {
    if let Some(var_217) = &input.gateway_arn {
        object.key("GatewayARN").string(var_217);
    }
    if let Some(var_218) = &input.marker {
        object.key("Marker").string(var_218);
    }
    if let Some(var_219) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_219).into()),
        );
    }
}

pub fn serialize_structure_describe_tapes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeTapesInput,
) {
    if let Some(var_220) = &input.gateway_arn {
        object.key("GatewayARN").string(var_220);
    }
    if let Some(var_221) = &input.tape_ar_ns {
        let mut array_222 = object.key("TapeARNs").start_array();
        for item_223 in var_221 {
            {
                array_222.value().string(item_223);
            }
        }
        array_222.finish();
    }
    if let Some(var_224) = &input.marker {
        object.key("Marker").string(var_224);
    }
    if let Some(var_225) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_225).into()),
        );
    }
}

pub fn serialize_structure_describe_upload_buffer_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeUploadBufferInput,
) {
    if let Some(var_226) = &input.gateway_arn {
        object.key("GatewayARN").string(var_226);
    }
}

pub fn serialize_structure_describe_vtl_devices_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeVtlDevicesInput,
) {
    if let Some(var_227) = &input.gateway_arn {
        object.key("GatewayARN").string(var_227);
    }
    if let Some(var_228) = &input.vtl_device_ar_ns {
        let mut array_229 = object.key("VTLDeviceARNs").start_array();
        for item_230 in var_228 {
            {
                array_229.value().string(item_230);
            }
        }
        array_229.finish();
    }
    if let Some(var_231) = &input.marker {
        object.key("Marker").string(var_231);
    }
    if let Some(var_232) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_232).into()),
        );
    }
}

pub fn serialize_structure_describe_working_storage_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorkingStorageInput,
) {
    if let Some(var_233) = &input.gateway_arn {
        object.key("GatewayARN").string(var_233);
    }
}

pub fn serialize_structure_detach_volume_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DetachVolumeInput,
) {
    if let Some(var_234) = &input.volume_arn {
        object.key("VolumeARN").string(var_234);
    }
    if let Some(var_235) = &input.force_detach {
        object.key("ForceDetach").boolean(*var_235);
    }
}

pub fn serialize_structure_disable_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisableGatewayInput,
) {
    if let Some(var_236) = &input.gateway_arn {
        object.key("GatewayARN").string(var_236);
    }
}

pub fn serialize_structure_disassociate_file_system_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateFileSystemInput,
) {
    if let Some(var_237) = &input.file_system_association_arn {
        object.key("FileSystemAssociationARN").string(var_237);
    }
    if input.force_delete {
        object.key("ForceDelete").boolean(input.force_delete);
    }
}

pub fn serialize_structure_join_domain_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::JoinDomainInput,
) {
    if let Some(var_238) = &input.gateway_arn {
        object.key("GatewayARN").string(var_238);
    }
    if let Some(var_239) = &input.domain_name {
        object.key("DomainName").string(var_239);
    }
    if let Some(var_240) = &input.organizational_unit {
        object.key("OrganizationalUnit").string(var_240);
    }
    if let Some(var_241) = &input.domain_controllers {
        let mut array_242 = object.key("DomainControllers").start_array();
        for item_243 in var_241 {
            {
                array_242.value().string(item_243);
            }
        }
        array_242.finish();
    }
    if let Some(var_244) = &input.timeout_in_seconds {
        object.key("TimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_244).into()),
        );
    }
    if let Some(var_245) = &input.user_name {
        object.key("UserName").string(var_245);
    }
    if let Some(var_246) = &input.password {
        object.key("Password").string(var_246);
    }
}

pub fn serialize_structure_list_automatic_tape_creation_policies_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListAutomaticTapeCreationPoliciesInput,
) {
    if let Some(var_247) = &input.gateway_arn {
        object.key("GatewayARN").string(var_247);
    }
}

pub fn serialize_structure_list_file_shares_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFileSharesInput,
) {
    if let Some(var_248) = &input.gateway_arn {
        object.key("GatewayARN").string(var_248);
    }
    if let Some(var_249) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_249).into()),
        );
    }
    if let Some(var_250) = &input.marker {
        object.key("Marker").string(var_250);
    }
}

pub fn serialize_structure_list_file_system_associations_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFileSystemAssociationsInput,
) {
    if let Some(var_251) = &input.gateway_arn {
        object.key("GatewayARN").string(var_251);
    }
    if let Some(var_252) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_252).into()),
        );
    }
    if let Some(var_253) = &input.marker {
        object.key("Marker").string(var_253);
    }
}

pub fn serialize_structure_list_gateways_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListGatewaysInput,
) {
    if let Some(var_254) = &input.marker {
        object.key("Marker").string(var_254);
    }
    if let Some(var_255) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_255).into()),
        );
    }
}

pub fn serialize_structure_list_local_disks_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListLocalDisksInput,
) {
    if let Some(var_256) = &input.gateway_arn {
        object.key("GatewayARN").string(var_256);
    }
}

pub fn serialize_structure_list_tags_for_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTagsForResourceInput,
) {
    if let Some(var_257) = &input.resource_arn {
        object.key("ResourceARN").string(var_257);
    }
    if let Some(var_258) = &input.marker {
        object.key("Marker").string(var_258);
    }
    if let Some(var_259) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_259).into()),
        );
    }
}

pub fn serialize_structure_list_tape_pools_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTapePoolsInput,
) {
    if let Some(var_260) = &input.pool_ar_ns {
        let mut array_261 = object.key("PoolARNs").start_array();
        for item_262 in var_260 {
            {
                array_261.value().string(item_262);
            }
        }
        array_261.finish();
    }
    if let Some(var_263) = &input.marker {
        object.key("Marker").string(var_263);
    }
    if let Some(var_264) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_264).into()),
        );
    }
}

pub fn serialize_structure_list_tapes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListTapesInput,
) {
    if let Some(var_265) = &input.tape_ar_ns {
        let mut array_266 = object.key("TapeARNs").start_array();
        for item_267 in var_265 {
            {
                array_266.value().string(item_267);
            }
        }
        array_266.finish();
    }
    if let Some(var_268) = &input.marker {
        object.key("Marker").string(var_268);
    }
    if let Some(var_269) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_269).into()),
        );
    }
}

pub fn serialize_structure_list_volume_initiators_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVolumeInitiatorsInput,
) {
    if let Some(var_270) = &input.volume_arn {
        object.key("VolumeARN").string(var_270);
    }
}

pub fn serialize_structure_list_volume_recovery_points_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVolumeRecoveryPointsInput,
) {
    if let Some(var_271) = &input.gateway_arn {
        object.key("GatewayARN").string(var_271);
    }
}

pub fn serialize_structure_list_volumes_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListVolumesInput,
) {
    if let Some(var_272) = &input.gateway_arn {
        object.key("GatewayARN").string(var_272);
    }
    if let Some(var_273) = &input.marker {
        object.key("Marker").string(var_273);
    }
    if let Some(var_274) = &input.limit {
        object.key("Limit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_274).into()),
        );
    }
}

pub fn serialize_structure_notify_when_uploaded_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::NotifyWhenUploadedInput,
) {
    if let Some(var_275) = &input.file_share_arn {
        object.key("FileShareARN").string(var_275);
    }
}

pub fn serialize_structure_refresh_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RefreshCacheInput,
) {
    if let Some(var_276) = &input.file_share_arn {
        object.key("FileShareARN").string(var_276);
    }
    if let Some(var_277) = &input.folder_list {
        let mut array_278 = object.key("FolderList").start_array();
        for item_279 in var_277 {
            {
                array_278.value().string(item_279);
            }
        }
        array_278.finish();
    }
    if let Some(var_280) = &input.recursive {
        object.key("Recursive").boolean(*var_280);
    }
}

pub fn serialize_structure_remove_tags_from_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RemoveTagsFromResourceInput,
) {
    if let Some(var_281) = &input.resource_arn {
        object.key("ResourceARN").string(var_281);
    }
    if let Some(var_282) = &input.tag_keys {
        let mut array_283 = object.key("TagKeys").start_array();
        for item_284 in var_282 {
            {
                array_283.value().string(item_284);
            }
        }
        array_283.finish();
    }
}

pub fn serialize_structure_reset_cache_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ResetCacheInput,
) {
    if let Some(var_285) = &input.gateway_arn {
        object.key("GatewayARN").string(var_285);
    }
}

pub fn serialize_structure_retrieve_tape_archive_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetrieveTapeArchiveInput,
) {
    if let Some(var_286) = &input.tape_arn {
        object.key("TapeARN").string(var_286);
    }
    if let Some(var_287) = &input.gateway_arn {
        object.key("GatewayARN").string(var_287);
    }
}

pub fn serialize_structure_retrieve_tape_recovery_point_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RetrieveTapeRecoveryPointInput,
) {
    if let Some(var_288) = &input.tape_arn {
        object.key("TapeARN").string(var_288);
    }
    if let Some(var_289) = &input.gateway_arn {
        object.key("GatewayARN").string(var_289);
    }
}

pub fn serialize_structure_set_local_console_password_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetLocalConsolePasswordInput,
) {
    if let Some(var_290) = &input.gateway_arn {
        object.key("GatewayARN").string(var_290);
    }
    if let Some(var_291) = &input.local_console_password {
        object.key("LocalConsolePassword").string(var_291);
    }
}

pub fn serialize_structure_set_smb_guest_password_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SetSmbGuestPasswordInput,
) {
    if let Some(var_292) = &input.gateway_arn {
        object.key("GatewayARN").string(var_292);
    }
    if let Some(var_293) = &input.password {
        object.key("Password").string(var_293);
    }
}

pub fn serialize_structure_shutdown_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ShutdownGatewayInput,
) {
    if let Some(var_294) = &input.gateway_arn {
        object.key("GatewayARN").string(var_294);
    }
}

pub fn serialize_structure_start_availability_monitor_test_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartAvailabilityMonitorTestInput,
) {
    if let Some(var_295) = &input.gateway_arn {
        object.key("GatewayARN").string(var_295);
    }
}

pub fn serialize_structure_start_gateway_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartGatewayInput,
) {
    if let Some(var_296) = &input.gateway_arn {
        object.key("GatewayARN").string(var_296);
    }
}

pub fn serialize_structure_update_automatic_tape_creation_policy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAutomaticTapeCreationPolicyInput,
) {
    if let Some(var_297) = &input.automatic_tape_creation_rules {
        let mut array_298 = object.key("AutomaticTapeCreationRules").start_array();
        for item_299 in var_297 {
            {
                let mut object_300 = array_298.value().start_object();
                crate::json_ser::serialize_structure_automatic_tape_creation_rule(
                    &mut object_300,
                    item_299,
                );
                object_300.finish();
            }
        }
        array_298.finish();
    }
    if let Some(var_301) = &input.gateway_arn {
        object.key("GatewayARN").string(var_301);
    }
}

pub fn serialize_structure_update_bandwidth_rate_limit_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBandwidthRateLimitInput,
) {
    if let Some(var_302) = &input.gateway_arn {
        object.key("GatewayARN").string(var_302);
    }
    if let Some(var_303) = &input.average_upload_rate_limit_in_bits_per_sec {
        object.key("AverageUploadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_303).into()),
        );
    }
    if let Some(var_304) = &input.average_download_rate_limit_in_bits_per_sec {
        object.key("AverageDownloadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_304).into()),
        );
    }
}

pub fn serialize_structure_update_bandwidth_rate_limit_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateBandwidthRateLimitScheduleInput,
) {
    if let Some(var_305) = &input.gateway_arn {
        object.key("GatewayARN").string(var_305);
    }
    if let Some(var_306) = &input.bandwidth_rate_limit_intervals {
        let mut array_307 = object.key("BandwidthRateLimitIntervals").start_array();
        for item_308 in var_306 {
            {
                let mut object_309 = array_307.value().start_object();
                crate::json_ser::serialize_structure_bandwidth_rate_limit_interval(
                    &mut object_309,
                    item_308,
                );
                object_309.finish();
            }
        }
        array_307.finish();
    }
}

pub fn serialize_structure_update_chap_credentials_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateChapCredentialsInput,
) {
    if let Some(var_310) = &input.target_arn {
        object.key("TargetARN").string(var_310);
    }
    if let Some(var_311) = &input.secret_to_authenticate_initiator {
        object.key("SecretToAuthenticateInitiator").string(var_311);
    }
    if let Some(var_312) = &input.initiator_name {
        object.key("InitiatorName").string(var_312);
    }
    if let Some(var_313) = &input.secret_to_authenticate_target {
        object.key("SecretToAuthenticateTarget").string(var_313);
    }
}

pub fn serialize_structure_update_file_system_association_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateFileSystemAssociationInput,
) {
    if let Some(var_314) = &input.file_system_association_arn {
        object.key("FileSystemAssociationARN").string(var_314);
    }
    if let Some(var_315) = &input.user_name {
        object.key("UserName").string(var_315);
    }
    if let Some(var_316) = &input.password {
        object.key("Password").string(var_316);
    }
    if let Some(var_317) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_317);
    }
    if let Some(var_318) = &input.cache_attributes {
        let mut object_319 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_cache_attributes(&mut object_319, var_318);
        object_319.finish();
    }
}

pub fn serialize_structure_update_gateway_information_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGatewayInformationInput,
) {
    if let Some(var_320) = &input.gateway_arn {
        object.key("GatewayARN").string(var_320);
    }
    if let Some(var_321) = &input.gateway_name {
        object.key("GatewayName").string(var_321);
    }
    if let Some(var_322) = &input.gateway_timezone {
        object.key("GatewayTimezone").string(var_322);
    }
    if let Some(var_323) = &input.cloud_watch_log_group_arn {
        object.key("CloudWatchLogGroupARN").string(var_323);
    }
}

pub fn serialize_structure_update_gateway_software_now_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateGatewaySoftwareNowInput,
) {
    if let Some(var_324) = &input.gateway_arn {
        object.key("GatewayARN").string(var_324);
    }
}

pub fn serialize_structure_update_maintenance_start_time_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateMaintenanceStartTimeInput,
) {
    if let Some(var_325) = &input.gateway_arn {
        object.key("GatewayARN").string(var_325);
    }
    if let Some(var_326) = &input.hour_of_day {
        object.key("HourOfDay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_326).into()),
        );
    }
    if let Some(var_327) = &input.minute_of_hour {
        object.key("MinuteOfHour").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_327).into()),
        );
    }
    if let Some(var_328) = &input.day_of_week {
        object.key("DayOfWeek").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_328).into()),
        );
    }
    if let Some(var_329) = &input.day_of_month {
        object.key("DayOfMonth").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_329).into()),
        );
    }
}

pub fn serialize_structure_update_nfs_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNfsFileShareInput,
) {
    if let Some(var_330) = &input.file_share_arn {
        object.key("FileShareARN").string(var_330);
    }
    if let Some(var_331) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_331);
    }
    if let Some(var_332) = &input.kms_key {
        object.key("KMSKey").string(var_332);
    }
    if let Some(var_333) = &input.nfs_file_share_defaults {
        let mut object_334 = object.key("NFSFileShareDefaults").start_object();
        crate::json_ser::serialize_structure_nfs_file_share_defaults(&mut object_334, var_333);
        object_334.finish();
    }
    if let Some(var_335) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_335);
    }
    if let Some(var_336) = &input.object_acl {
        object.key("ObjectACL").string(var_336.as_str());
    }
    if let Some(var_337) = &input.client_list {
        let mut array_338 = object.key("ClientList").start_array();
        for item_339 in var_337 {
            {
                array_338.value().string(item_339);
            }
        }
        array_338.finish();
    }
    if let Some(var_340) = &input.squash {
        object.key("Squash").string(var_340);
    }
    if let Some(var_341) = &input.read_only {
        object.key("ReadOnly").boolean(*var_341);
    }
    if let Some(var_342) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_342);
    }
    if let Some(var_343) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_343);
    }
    if let Some(var_344) = &input.file_share_name {
        object.key("FileShareName").string(var_344);
    }
    if let Some(var_345) = &input.cache_attributes {
        let mut object_346 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_cache_attributes(&mut object_346, var_345);
        object_346.finish();
    }
    if let Some(var_347) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_347);
    }
}

pub fn serialize_structure_update_smb_file_share_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSmbFileShareInput,
) {
    if let Some(var_348) = &input.file_share_arn {
        object.key("FileShareARN").string(var_348);
    }
    if let Some(var_349) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_349);
    }
    if let Some(var_350) = &input.kms_key {
        object.key("KMSKey").string(var_350);
    }
    if let Some(var_351) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_351);
    }
    if let Some(var_352) = &input.object_acl {
        object.key("ObjectACL").string(var_352.as_str());
    }
    if let Some(var_353) = &input.read_only {
        object.key("ReadOnly").boolean(*var_353);
    }
    if let Some(var_354) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_354);
    }
    if let Some(var_355) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_355);
    }
    if let Some(var_356) = &input.smbacl_enabled {
        object.key("SMBACLEnabled").boolean(*var_356);
    }
    if let Some(var_357) = &input.access_based_enumeration {
        object.key("AccessBasedEnumeration").boolean(*var_357);
    }
    if let Some(var_358) = &input.admin_user_list {
        let mut array_359 = object.key("AdminUserList").start_array();
        for item_360 in var_358 {
            {
                array_359.value().string(item_360);
            }
        }
        array_359.finish();
    }
    if let Some(var_361) = &input.valid_user_list {
        let mut array_362 = object.key("ValidUserList").start_array();
        for item_363 in var_361 {
            {
                array_362.value().string(item_363);
            }
        }
        array_362.finish();
    }
    if let Some(var_364) = &input.invalid_user_list {
        let mut array_365 = object.key("InvalidUserList").start_array();
        for item_366 in var_364 {
            {
                array_365.value().string(item_366);
            }
        }
        array_365.finish();
    }
    if let Some(var_367) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_367);
    }
    if let Some(var_368) = &input.case_sensitivity {
        object.key("CaseSensitivity").string(var_368.as_str());
    }
    if let Some(var_369) = &input.file_share_name {
        object.key("FileShareName").string(var_369);
    }
    if let Some(var_370) = &input.cache_attributes {
        let mut object_371 = object.key("CacheAttributes").start_object();
        crate::json_ser::serialize_structure_cache_attributes(&mut object_371, var_370);
        object_371.finish();
    }
    if let Some(var_372) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_372);
    }
}

pub fn serialize_structure_update_smb_file_share_visibility_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSmbFileShareVisibilityInput,
) {
    if let Some(var_373) = &input.gateway_arn {
        object.key("GatewayARN").string(var_373);
    }
    if let Some(var_374) = &input.file_shares_visible {
        object.key("FileSharesVisible").boolean(*var_374);
    }
}

pub fn serialize_structure_update_smb_security_strategy_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSmbSecurityStrategyInput,
) {
    if let Some(var_375) = &input.gateway_arn {
        object.key("GatewayARN").string(var_375);
    }
    if let Some(var_376) = &input.smb_security_strategy {
        object.key("SMBSecurityStrategy").string(var_376.as_str());
    }
}

pub fn serialize_structure_update_snapshot_schedule_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSnapshotScheduleInput,
) {
    if let Some(var_377) = &input.volume_arn {
        object.key("VolumeARN").string(var_377);
    }
    if let Some(var_378) = &input.start_at {
        object.key("StartAt").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_378).into()),
        );
    }
    if let Some(var_379) = &input.recurrence_in_hours {
        object.key("RecurrenceInHours").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_379).into()),
        );
    }
    if let Some(var_380) = &input.description {
        object.key("Description").string(var_380);
    }
    if let Some(var_381) = &input.tags {
        let mut array_382 = object.key("Tags").start_array();
        for item_383 in var_381 {
            {
                let mut object_384 = array_382.value().start_object();
                crate::json_ser::serialize_structure_tag(&mut object_384, item_383);
                object_384.finish();
            }
        }
        array_382.finish();
    }
}

pub fn serialize_structure_update_vtl_device_type_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateVtlDeviceTypeInput,
) {
    if let Some(var_385) = &input.vtl_device_arn {
        object.key("VTLDeviceARN").string(var_385);
    }
    if let Some(var_386) = &input.device_type {
        object.key("DeviceType").string(var_386);
    }
}

pub fn serialize_structure_tag(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tag,
) {
    if let Some(var_387) = &input.key {
        object.key("Key").string(var_387);
    }
    if let Some(var_388) = &input.value {
        object.key("Value").string(var_388);
    }
}

pub fn serialize_structure_cache_attributes(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::CacheAttributes,
) {
    if let Some(var_389) = &input.cache_stale_timeout_in_seconds {
        object.key("CacheStaleTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_389).into()),
        );
    }
}

pub fn serialize_structure_nfs_file_share_defaults(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NfsFileShareDefaults,
) {
    if let Some(var_390) = &input.file_mode {
        object.key("FileMode").string(var_390);
    }
    if let Some(var_391) = &input.directory_mode {
        object.key("DirectoryMode").string(var_391);
    }
    if let Some(var_392) = &input.group_id {
        object.key("GroupId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_392).into()),
        );
    }
    if let Some(var_393) = &input.owner_id {
        object.key("OwnerId").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_393).into()),
        );
    }
}

pub fn serialize_structure_automatic_tape_creation_rule(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::AutomaticTapeCreationRule,
) {
    if let Some(var_394) = &input.tape_barcode_prefix {
        object.key("TapeBarcodePrefix").string(var_394);
    }
    if let Some(var_395) = &input.pool_id {
        object.key("PoolId").string(var_395);
    }
    if let Some(var_396) = &input.tape_size_in_bytes {
        object.key("TapeSizeInBytes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_396).into()),
        );
    }
    if let Some(var_397) = &input.minimum_num_tapes {
        object.key("MinimumNumTapes").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_397).into()),
        );
    }
    if input.worm {
        object.key("Worm").boolean(input.worm);
    }
}

pub fn serialize_structure_bandwidth_rate_limit_interval(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BandwidthRateLimitInterval,
) {
    if let Some(var_398) = &input.start_hour_of_day {
        object.key("StartHourOfDay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_398).into()),
        );
    }
    if let Some(var_399) = &input.start_minute_of_hour {
        object.key("StartMinuteOfHour").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_399).into()),
        );
    }
    if let Some(var_400) = &input.end_hour_of_day {
        object.key("EndHourOfDay").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_400).into()),
        );
    }
    if let Some(var_401) = &input.end_minute_of_hour {
        object.key("EndMinuteOfHour").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_401).into()),
        );
    }
    if let Some(var_402) = &input.days_of_week {
        let mut array_403 = object.key("DaysOfWeek").start_array();
        for item_404 in var_402 {
            {
                array_403.value().number(
                    #[allow(clippy::useless_conversion)]
                    smithy_types::Number::NegInt((*item_404).into()),
                );
            }
        }
        array_403.finish();
    }
    if let Some(var_405) = &input.average_upload_rate_limit_in_bits_per_sec {
        object.key("AverageUploadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_405).into()),
        );
    }
    if let Some(var_406) = &input.average_download_rate_limit_in_bits_per_sec {
        object.key("AverageDownloadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_406).into()),
        );
    }
}
