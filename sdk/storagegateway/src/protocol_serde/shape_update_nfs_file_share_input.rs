// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_nfs_file_share_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_nfs_file_share::UpdateNfsFileShareInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.file_share_arn {
        object.key("FileShareARN").string(var_1.as_str());
    }
    if let Some(var_2) = &input.encryption_type {
        object.key("EncryptionType").string(var_2.as_str());
    }
    if let Some(var_3) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_3);
    }
    if let Some(var_4) = &input.kms_key {
        object.key("KMSKey").string(var_4.as_str());
    }
    if let Some(var_5) = &input.nfs_file_share_defaults {
        #[allow(unused_mut)]
        let mut object_6 = object.key("NFSFileShareDefaults").start_object();
        crate::protocol_serde::shape_nfs_file_share_defaults::ser_nfs_file_share_defaults(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_7.as_str());
    }
    if let Some(var_8) = &input.object_acl {
        object.key("ObjectACL").string(var_8.as_str());
    }
    if let Some(var_9) = &input.client_list {
        let mut array_10 = object.key("ClientList").start_array();
        for item_11 in var_9 {
            {
                array_10.value().string(item_11.as_str());
            }
        }
        array_10.finish();
    }
    if let Some(var_12) = &input.squash {
        object.key("Squash").string(var_12.as_str());
    }
    if let Some(var_13) = &input.read_only {
        object.key("ReadOnly").boolean(*var_13);
    }
    if let Some(var_14) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_14);
    }
    if let Some(var_15) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_15);
    }
    if let Some(var_16) = &input.file_share_name {
        object.key("FileShareName").string(var_16.as_str());
    }
    if let Some(var_17) = &input.cache_attributes {
        #[allow(unused_mut)]
        let mut object_18 = object.key("CacheAttributes").start_object();
        crate::protocol_serde::shape_cache_attributes::ser_cache_attributes(&mut object_18, var_17)?;
        object_18.finish();
    }
    if let Some(var_19) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_19.as_str());
    }
    if let Some(var_20) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_20.as_str());
    }
    Ok(())
}
