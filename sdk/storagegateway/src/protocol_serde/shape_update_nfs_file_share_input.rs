// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_nfs_file_share_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_nfs_file_share::UpdateNfsFileShareInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.file_share_arn {
        object.key("FileShareARN").string(var_1.as_str());
    }
    if let Some(var_2) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_2);
    }
    if let Some(var_3) = &input.kms_key {
        object.key("KMSKey").string(var_3.as_str());
    }
    if let Some(var_4) = &input.nfs_file_share_defaults {
        #[allow(unused_mut)]
        let mut object_5 = object.key("NFSFileShareDefaults").start_object();
        crate::protocol_serde::shape_nfs_file_share_defaults::ser_nfs_file_share_defaults(
            &mut object_5,
            var_4,
        )?;
        object_5.finish();
    }
    if let Some(var_6) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_6.as_str());
    }
    if let Some(var_7) = &input.object_acl {
        object.key("ObjectACL").string(var_7.as_str());
    }
    if let Some(var_8) = &input.client_list {
        let mut array_9 = object.key("ClientList").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.squash {
        object.key("Squash").string(var_11.as_str());
    }
    if let Some(var_12) = &input.read_only {
        object.key("ReadOnly").boolean(*var_12);
    }
    if let Some(var_13) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_13);
    }
    if let Some(var_14) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_14);
    }
    if let Some(var_15) = &input.file_share_name {
        object.key("FileShareName").string(var_15.as_str());
    }
    if let Some(var_16) = &input.cache_attributes {
        #[allow(unused_mut)]
        let mut object_17 = object.key("CacheAttributes").start_object();
        crate::protocol_serde::shape_cache_attributes::ser_cache_attributes(
            &mut object_17,
            var_16,
        )?;
        object_17.finish();
    }
    if let Some(var_18) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_18.as_str());
    }
    if let Some(var_19) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_19.as_str());
    }
    Ok(())
}
