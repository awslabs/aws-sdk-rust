// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_activate_gateway_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::activate_gateway::ActivateGatewayInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.activation_key {
        object.key("ActivationKey").string(var_1.as_str());
    }
    if let Some(var_2) = &input.gateway_name {
        object.key("GatewayName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.gateway_timezone {
        object.key("GatewayTimezone").string(var_3.as_str());
    }
    if let Some(var_4) = &input.gateway_region {
        object.key("GatewayRegion").string(var_4.as_str());
    }
    if let Some(var_5) = &input.gateway_type {
        object.key("GatewayType").string(var_5.as_str());
    }
    if let Some(var_6) = &input.tape_drive_type {
        object.key("TapeDriveType").string(var_6.as_str());
    }
    if let Some(var_7) = &input.medium_changer_type {
        object.key("MediumChangerType").string(var_7.as_str());
    }
    if let Some(var_8) = &input.tags {
        let mut array_9 = object.key("Tags").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    Ok(())
}
