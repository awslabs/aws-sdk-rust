// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_smb_file_share_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_smb_file_share::CreateSmbFileShareInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("ClientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.gateway_arn {
        object.key("GatewayARN").string(var_2.as_str());
    }
    if let Some(var_3) = &input.kms_encrypted {
        object.key("KMSEncrypted").boolean(*var_3);
    }
    if let Some(var_4) = &input.kms_key {
        object.key("KMSKey").string(var_4.as_str());
    }
    if let Some(var_5) = &input.role {
        object.key("Role").string(var_5.as_str());
    }
    if let Some(var_6) = &input.location_arn {
        object.key("LocationARN").string(var_6.as_str());
    }
    if let Some(var_7) = &input.default_storage_class {
        object.key("DefaultStorageClass").string(var_7.as_str());
    }
    if let Some(var_8) = &input.object_acl {
        object.key("ObjectACL").string(var_8.as_str());
    }
    if let Some(var_9) = &input.read_only {
        object.key("ReadOnly").boolean(*var_9);
    }
    if let Some(var_10) = &input.guess_mime_type_enabled {
        object.key("GuessMIMETypeEnabled").boolean(*var_10);
    }
    if let Some(var_11) = &input.requester_pays {
        object.key("RequesterPays").boolean(*var_11);
    }
    if let Some(var_12) = &input.smbacl_enabled {
        object.key("SMBACLEnabled").boolean(*var_12);
    }
    if let Some(var_13) = &input.access_based_enumeration {
        object.key("AccessBasedEnumeration").boolean(*var_13);
    }
    if let Some(var_14) = &input.admin_user_list {
        let mut array_15 = object.key("AdminUserList").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.valid_user_list {
        let mut array_18 = object.key("ValidUserList").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.invalid_user_list {
        let mut array_21 = object.key("InvalidUserList").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.audit_destination_arn {
        object.key("AuditDestinationARN").string(var_23.as_str());
    }
    if let Some(var_24) = &input.authentication {
        object.key("Authentication").string(var_24.as_str());
    }
    if let Some(var_25) = &input.case_sensitivity {
        object.key("CaseSensitivity").string(var_25.as_str());
    }
    if let Some(var_26) = &input.tags {
        let mut array_27 = object.key("Tags").start_array();
        for item_28 in var_26 {
            {
                #[allow(unused_mut)]
                let mut object_29 = array_27.value().start_object();
                crate::protocol_serde::shape_tag::ser_tag(&mut object_29, item_28)?;
                object_29.finish();
            }
        }
        array_27.finish();
    }
    if let Some(var_30) = &input.file_share_name {
        object.key("FileShareName").string(var_30.as_str());
    }
    if let Some(var_31) = &input.cache_attributes {
        #[allow(unused_mut)]
        let mut object_32 = object.key("CacheAttributes").start_object();
        crate::protocol_serde::shape_cache_attributes::ser_cache_attributes(
            &mut object_32,
            var_31,
        )?;
        object_32.finish();
    }
    if let Some(var_33) = &input.notification_policy {
        object.key("NotificationPolicy").string(var_33.as_str());
    }
    if let Some(var_34) = &input.vpc_endpoint_dns_name {
        object.key("VPCEndpointDNSName").string(var_34.as_str());
    }
    if let Some(var_35) = &input.bucket_region {
        object.key("BucketRegion").string(var_35.as_str());
    }
    if let Some(var_36) = &input.oplocks_enabled {
        object.key("OplocksEnabled").boolean(*var_36);
    }
    Ok(())
}
