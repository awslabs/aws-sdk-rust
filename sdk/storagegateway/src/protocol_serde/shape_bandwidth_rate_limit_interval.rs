// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_bandwidth_rate_limit_interval(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::BandwidthRateLimitInterval,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    {
        object.key("StartHourOfDay").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.start_hour_of_day).into()),
        );
    }
    {
        object.key("StartMinuteOfHour").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.start_minute_of_hour).into()),
        );
    }
    {
        object.key("EndHourOfDay").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.end_hour_of_day).into()),
        );
    }
    {
        object.key("EndMinuteOfHour").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((input.end_minute_of_hour).into()),
        );
    }
    {
        let mut array_1 = object.key("DaysOfWeek").start_array();
        for item_2 in &input.days_of_week {
            {
                array_1.value().number(
                    #[allow(clippy::useless_conversion)]
                    ::aws_smithy_types::Number::NegInt((*item_2).into()),
                );
            }
        }
        array_1.finish();
    }
    if let Some(var_3) = &input.average_upload_rate_limit_in_bits_per_sec {
        object.key("AverageUploadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.average_download_rate_limit_in_bits_per_sec {
        object.key("AverageDownloadRateLimitInBitsPerSec").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    Ok(())
}

pub(crate) fn de_bandwidth_rate_limit_interval<'a, I>(
    tokens: &mut ::std::iter::Peekable<I>,
) -> Result<Option<crate::types::BandwidthRateLimitInterval>, ::aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<Item = Result<::aws_smithy_json::deserialize::Token<'a>, ::aws_smithy_json::deserialize::error::DeserializeError>>,
{
    match tokens.next().transpose()? {
        Some(::aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(::aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::BandwidthRateLimitIntervalBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(::aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(::aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => match key.to_unescaped()?.as_ref() {
                        "StartHourOfDay" => {
                            builder = builder.set_start_hour_of_day(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "StartMinuteOfHour" => {
                            builder = builder.set_start_minute_of_hour(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "EndHourOfDay" => {
                            builder = builder.set_end_hour_of_day(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "EndMinuteOfHour" => {
                            builder = builder.set_end_minute_of_hour(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i32::try_from)
                                    .transpose()?,
                            );
                        }
                        "DaysOfWeek" => {
                            builder = builder.set_days_of_week(crate::protocol_serde::shape_days_of_week::de_days_of_week(tokens)?);
                        }
                        "AverageUploadRateLimitInBitsPerSec" => {
                            builder = builder.set_average_upload_rate_limit_in_bits_per_sec(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        "AverageDownloadRateLimitInBitsPerSec" => {
                            builder = builder.set_average_download_rate_limit_in_bits_per_sec(
                                ::aws_smithy_json::deserialize::token::expect_number_or_null(tokens.next())?
                                    .map(i64::try_from)
                                    .transpose()?,
                            );
                        }
                        _ => ::aws_smithy_json::deserialize::token::skip_value(tokens)?,
                    },
                    other => {
                        return Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                            "expected object key or end object, found: {:?}",
                            other
                        )))
                    }
                }
            }
            Ok(Some(
                crate::serde_util::bandwidth_rate_limit_interval_correct_errors(builder)
                    .build()
                    .map_err(|err| ::aws_smithy_json::deserialize::error::DeserializeError::custom_source("Response was invalid", err))?,
            ))
        }
        _ => Err(::aws_smithy_json::deserialize::error::DeserializeError::custom(
            "expected start object or null",
        )),
    }
}
