// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>An internal server error has occurred during the request. For more information, see the error and message fields.</p>
    InternalServerError(crate::error::InternalServerError),
    /// <p>An exception occurred because an invalid gateway request was issued to the service. For more information, see the error and message fields.</p>
    InvalidGatewayRequestException(crate::error::InvalidGatewayRequestException),
    /// <p>An internal server error has occurred because the service is unavailable. For more information, see the error and message fields.</p>
    ServiceUnavailableError(crate::error::ServiceUnavailableError),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InternalServerError(inner) => inner.fmt(f),
            Error::InvalidGatewayRequestException(inner) => inner.fmt(f),
            Error::ServiceUnavailableError(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ActivateGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ActivateGatewayError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ActivateGatewayError> for Error {
    fn from(err: crate::error::ActivateGatewayError) -> Self {
        match err {
            crate::error::ActivateGatewayError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ActivateGatewayError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ActivateGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddCacheError> for Error {
    fn from(err: crate::error::AddCacheError) -> Self {
        match err {
            crate::error::AddCacheError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AddCacheError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::AddCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddTagsToResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddTagsToResourceError> for Error {
    fn from(err: crate::error::AddTagsToResourceError) -> Self {
        match err {
            crate::error::AddTagsToResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AddTagsToResourceError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::AddTagsToResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddUploadBufferError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AddUploadBufferError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddUploadBufferError> for Error {
    fn from(err: crate::error::AddUploadBufferError) -> Self {
        match err {
            crate::error::AddUploadBufferError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AddUploadBufferError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::AddUploadBufferError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddWorkingStorageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddWorkingStorageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddWorkingStorageError> for Error {
    fn from(err: crate::error::AddWorkingStorageError) -> Self {
        match err {
            crate::error::AddWorkingStorageError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AddWorkingStorageError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::AddWorkingStorageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssignTapePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AssignTapePoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssignTapePoolError> for Error {
    fn from(err: crate::error::AssignTapePoolError) -> Self {
        match err {
            crate::error::AssignTapePoolError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AssignTapePoolError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::AssignTapePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateFileSystemError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateFileSystemError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateFileSystemError> for Error {
    fn from(err: crate::error::AssociateFileSystemError) -> Self {
        match err {
            crate::error::AssociateFileSystemError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AssociateFileSystemError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::AssociateFileSystemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AttachVolumeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AttachVolumeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AttachVolumeError> for Error {
    fn from(err: crate::error::AttachVolumeError) -> Self {
        match err {
            crate::error::AttachVolumeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::AttachVolumeError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::AttachVolumeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelArchivalError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelArchivalError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelArchivalError> for Error {
    fn from(err: crate::error::CancelArchivalError) -> Self {
        match err {
            crate::error::CancelArchivalError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CancelArchivalError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CancelArchivalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelRetrievalError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CancelRetrievalError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelRetrievalError> for Error {
    fn from(err: crate::error::CancelRetrievalError) -> Self {
        match err {
            crate::error::CancelRetrievalError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CancelRetrievalError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CancelRetrievalError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateCachediSCSIVolumeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateCachediSCSIVolumeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateCachediSCSIVolumeError> for Error {
    fn from(err: crate::error::CreateCachediSCSIVolumeError) -> Self {
        match err {
            crate::error::CreateCachediSCSIVolumeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateCachediSCSIVolumeError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CreateCachediSCSIVolumeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateNFSFileShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateNFSFileShareError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateNFSFileShareError> for Error {
    fn from(err: crate::error::CreateNFSFileShareError) -> Self {
        match err {
            crate::error::CreateNFSFileShareError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateNFSFileShareError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CreateNFSFileShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSMBFileShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSMBFileShareError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSMBFileShareError> for Error {
    fn from(err: crate::error::CreateSMBFileShareError) -> Self {
        match err {
            crate::error::CreateSMBFileShareError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateSMBFileShareError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CreateSMBFileShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSnapshotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateSnapshotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSnapshotError> for Error {
    fn from(err: crate::error::CreateSnapshotError) -> Self {
        match err {
            crate::error::CreateSnapshotError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateSnapshotError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CreateSnapshotError::ServiceUnavailableError(inner) => {
                Error::ServiceUnavailableError(inner)
            }
            crate::error::CreateSnapshotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::error::CreateSnapshotFromVolumeRecoveryPointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateSnapshotFromVolumeRecoveryPointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSnapshotFromVolumeRecoveryPointError> for Error {
    fn from(err: crate::error::CreateSnapshotFromVolumeRecoveryPointError) -> Self {
        match err {
            crate::error::CreateSnapshotFromVolumeRecoveryPointError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::CreateSnapshotFromVolumeRecoveryPointError::InvalidGatewayRequestException(inner) => Error::InvalidGatewayRequestException(inner),
            crate::error::CreateSnapshotFromVolumeRecoveryPointError::ServiceUnavailableError(inner) => Error::ServiceUnavailableError(inner),
            crate::error::CreateSnapshotFromVolumeRecoveryPointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateStorediSCSIVolumeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateStorediSCSIVolumeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateStorediSCSIVolumeError> for Error {
    fn from(err: crate::error::CreateStorediSCSIVolumeError) -> Self {
        match err {
            crate::error::CreateStorediSCSIVolumeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateStorediSCSIVolumeError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CreateStorediSCSIVolumeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTapePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTapePoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTapePoolError> for Error {
    fn from(err: crate::error::CreateTapePoolError) -> Self {
        match err {
            crate::error::CreateTapePoolError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateTapePoolError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CreateTapePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTapesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateTapesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTapesError> for Error {
    fn from(err: crate::error::CreateTapesError) -> Self {
        match err {
            crate::error::CreateTapesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateTapesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CreateTapesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateTapeWithBarcodeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateTapeWithBarcodeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateTapeWithBarcodeError> for Error {
    fn from(err: crate::error::CreateTapeWithBarcodeError) -> Self {
        match err {
            crate::error::CreateTapeWithBarcodeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::CreateTapeWithBarcodeError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::CreateTapeWithBarcodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DeleteAutomaticTapeCreationPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DeleteAutomaticTapeCreationPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteAutomaticTapeCreationPolicyError> for Error {
    fn from(err: crate::error::DeleteAutomaticTapeCreationPolicyError) -> Self {
        match err {
            crate::error::DeleteAutomaticTapeCreationPolicyError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DeleteAutomaticTapeCreationPolicyError::InvalidGatewayRequestException(inner) => Error::InvalidGatewayRequestException(inner),
            crate::error::DeleteAutomaticTapeCreationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteBandwidthRateLimitError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteBandwidthRateLimitError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteBandwidthRateLimitError> for Error {
    fn from(err: crate::error::DeleteBandwidthRateLimitError) -> Self {
        match err {
            crate::error::DeleteBandwidthRateLimitError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteBandwidthRateLimitError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteBandwidthRateLimitError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteChapCredentialsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteChapCredentialsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteChapCredentialsError> for Error {
    fn from(err: crate::error::DeleteChapCredentialsError) -> Self {
        match err {
            crate::error::DeleteChapCredentialsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteChapCredentialsError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteChapCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFileShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFileShareError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFileShareError> for Error {
    fn from(err: crate::error::DeleteFileShareError) -> Self {
        match err {
            crate::error::DeleteFileShareError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteFileShareError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteFileShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGatewayError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGatewayError> for Error {
    fn from(err: crate::error::DeleteGatewayError) -> Self {
        match err {
            crate::error::DeleteGatewayError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteGatewayError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSnapshotScheduleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSnapshotScheduleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSnapshotScheduleError> for Error {
    fn from(err: crate::error::DeleteSnapshotScheduleError) -> Self {
        match err {
            crate::error::DeleteSnapshotScheduleError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteSnapshotScheduleError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteSnapshotScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTapeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTapeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTapeError> for Error {
    fn from(err: crate::error::DeleteTapeError) -> Self {
        match err {
            crate::error::DeleteTapeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteTapeError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteTapeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTapeArchiveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteTapeArchiveError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTapeArchiveError> for Error {
    fn from(err: crate::error::DeleteTapeArchiveError) -> Self {
        match err {
            crate::error::DeleteTapeArchiveError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteTapeArchiveError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteTapeArchiveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteTapePoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteTapePoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteTapePoolError> for Error {
    fn from(err: crate::error::DeleteTapePoolError) -> Self {
        match err {
            crate::error::DeleteTapePoolError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteTapePoolError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteTapePoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteVolumeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteVolumeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteVolumeError> for Error {
    fn from(err: crate::error::DeleteVolumeError) -> Self {
        match err {
            crate::error::DeleteVolumeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DeleteVolumeError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DeleteVolumeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeAvailabilityMonitorTestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeAvailabilityMonitorTestError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeAvailabilityMonitorTestError> for Error {
    fn from(err: crate::error::DescribeAvailabilityMonitorTestError) -> Self {
        match err {
            crate::error::DescribeAvailabilityMonitorTestError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeAvailabilityMonitorTestError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeAvailabilityMonitorTestError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeBandwidthRateLimitError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeBandwidthRateLimitError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBandwidthRateLimitError> for Error {
    fn from(err: crate::error::DescribeBandwidthRateLimitError) -> Self {
        match err {
            crate::error::DescribeBandwidthRateLimitError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeBandwidthRateLimitError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeBandwidthRateLimitError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::DescribeBandwidthRateLimitScheduleError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeBandwidthRateLimitScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeBandwidthRateLimitScheduleError> for Error {
    fn from(err: crate::error::DescribeBandwidthRateLimitScheduleError) -> Self {
        match err {
            crate::error::DescribeBandwidthRateLimitScheduleError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::DescribeBandwidthRateLimitScheduleError::InvalidGatewayRequestException(inner) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeBandwidthRateLimitScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCacheError> for Error {
    fn from(err: crate::error::DescribeCacheError) -> Self {
        match err {
            crate::error::DescribeCacheError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeCacheError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeCachediSCSIVolumesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeCachediSCSIVolumesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeCachediSCSIVolumesError> for Error {
    fn from(err: crate::error::DescribeCachediSCSIVolumesError) -> Self {
        match err {
            crate::error::DescribeCachediSCSIVolumesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeCachediSCSIVolumesError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeCachediSCSIVolumesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeChapCredentialsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeChapCredentialsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeChapCredentialsError> for Error {
    fn from(err: crate::error::DescribeChapCredentialsError) -> Self {
        match err {
            crate::error::DescribeChapCredentialsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeChapCredentialsError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeChapCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::DescribeFileSystemAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::DescribeFileSystemAssociationsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFileSystemAssociationsError> for Error {
    fn from(err: crate::error::DescribeFileSystemAssociationsError) -> Self {
        match err {
            crate::error::DescribeFileSystemAssociationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeFileSystemAssociationsError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeFileSystemAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeGatewayInformationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeGatewayInformationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeGatewayInformationError> for Error {
    fn from(err: crate::error::DescribeGatewayInformationError) -> Self {
        match err {
            crate::error::DescribeGatewayInformationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeGatewayInformationError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeGatewayInformationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeMaintenanceStartTimeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeMaintenanceStartTimeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeMaintenanceStartTimeError> for Error {
    fn from(err: crate::error::DescribeMaintenanceStartTimeError) -> Self {
        match err {
            crate::error::DescribeMaintenanceStartTimeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeMaintenanceStartTimeError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeMaintenanceStartTimeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeNFSFileSharesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeNFSFileSharesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeNFSFileSharesError> for Error {
    fn from(err: crate::error::DescribeNFSFileSharesError) -> Self {
        match err {
            crate::error::DescribeNFSFileSharesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeNFSFileSharesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeNFSFileSharesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSMBFileSharesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSMBFileSharesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSMBFileSharesError> for Error {
    fn from(err: crate::error::DescribeSMBFileSharesError) -> Self {
        match err {
            crate::error::DescribeSMBFileSharesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeSMBFileSharesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeSMBFileSharesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSMBSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSMBSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSMBSettingsError> for Error {
    fn from(err: crate::error::DescribeSMBSettingsError) -> Self {
        match err {
            crate::error::DescribeSMBSettingsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeSMBSettingsError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeSMBSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSnapshotScheduleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSnapshotScheduleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSnapshotScheduleError> for Error {
    fn from(err: crate::error::DescribeSnapshotScheduleError) -> Self {
        match err {
            crate::error::DescribeSnapshotScheduleError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeSnapshotScheduleError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeSnapshotScheduleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeStorediSCSIVolumesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeStorediSCSIVolumesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeStorediSCSIVolumesError> for Error {
    fn from(err: crate::error::DescribeStorediSCSIVolumesError) -> Self {
        match err {
            crate::error::DescribeStorediSCSIVolumesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeStorediSCSIVolumesError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeStorediSCSIVolumesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTapeArchivesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTapeArchivesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTapeArchivesError> for Error {
    fn from(err: crate::error::DescribeTapeArchivesError) -> Self {
        match err {
            crate::error::DescribeTapeArchivesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeTapeArchivesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeTapeArchivesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTapeRecoveryPointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeTapeRecoveryPointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTapeRecoveryPointsError> for Error {
    fn from(err: crate::error::DescribeTapeRecoveryPointsError) -> Self {
        match err {
            crate::error::DescribeTapeRecoveryPointsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeTapeRecoveryPointsError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::DescribeTapeRecoveryPointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeTapesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeTapesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeTapesError> for Error {
    fn from(err: crate::error::DescribeTapesError) -> Self {
        match err {
            crate::error::DescribeTapesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeTapesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeTapesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUploadBufferError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUploadBufferError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUploadBufferError> for Error {
    fn from(err: crate::error::DescribeUploadBufferError) -> Self {
        match err {
            crate::error::DescribeUploadBufferError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeUploadBufferError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeUploadBufferError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeVTLDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeVTLDevicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeVTLDevicesError> for Error {
    fn from(err: crate::error::DescribeVTLDevicesError) -> Self {
        match err {
            crate::error::DescribeVTLDevicesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeVTLDevicesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeVTLDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWorkingStorageError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeWorkingStorageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWorkingStorageError> for Error {
    fn from(err: crate::error::DescribeWorkingStorageError) -> Self {
        match err {
            crate::error::DescribeWorkingStorageError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DescribeWorkingStorageError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DescribeWorkingStorageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DetachVolumeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DetachVolumeError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DetachVolumeError> for Error {
    fn from(err: crate::error::DetachVolumeError) -> Self {
        match err {
            crate::error::DetachVolumeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DetachVolumeError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DetachVolumeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisableGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DisableGatewayError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisableGatewayError> for Error {
    fn from(err: crate::error::DisableGatewayError) -> Self {
        match err {
            crate::error::DisableGatewayError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DisableGatewayError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DisableGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DisassociateFileSystemError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DisassociateFileSystemError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DisassociateFileSystemError> for Error {
    fn from(err: crate::error::DisassociateFileSystemError) -> Self {
        match err {
            crate::error::DisassociateFileSystemError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::DisassociateFileSystemError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::DisassociateFileSystemError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::JoinDomainError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::JoinDomainError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::JoinDomainError> for Error {
    fn from(err: crate::error::JoinDomainError) -> Self {
        match err {
            crate::error::JoinDomainError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::JoinDomainError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::JoinDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::ListAutomaticTapeCreationPoliciesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::ListAutomaticTapeCreationPoliciesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListAutomaticTapeCreationPoliciesError> for Error {
    fn from(err: crate::error::ListAutomaticTapeCreationPoliciesError) -> Self {
        match err {
            crate::error::ListAutomaticTapeCreationPoliciesError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::ListAutomaticTapeCreationPoliciesError::InvalidGatewayRequestException(inner) => Error::InvalidGatewayRequestException(inner),
            crate::error::ListAutomaticTapeCreationPoliciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFileSharesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFileSharesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFileSharesError> for Error {
    fn from(err: crate::error::ListFileSharesError) -> Self {
        match err {
            crate::error::ListFileSharesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListFileSharesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListFileSharesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFileSystemAssociationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListFileSystemAssociationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFileSystemAssociationsError> for Error {
    fn from(err: crate::error::ListFileSystemAssociationsError) -> Self {
        match err {
            crate::error::ListFileSystemAssociationsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListFileSystemAssociationsError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::ListFileSystemAssociationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGatewaysError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGatewaysError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGatewaysError> for Error {
    fn from(err: crate::error::ListGatewaysError) -> Self {
        match err {
            crate::error::ListGatewaysError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListGatewaysError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListGatewaysError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListLocalDisksError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListLocalDisksError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListLocalDisksError> for Error {
    fn from(err: crate::error::ListLocalDisksError) -> Self {
        match err {
            crate::error::ListLocalDisksError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListLocalDisksError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListLocalDisksError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListTagsForResourceError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTapePoolsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTapePoolsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTapePoolsError> for Error {
    fn from(err: crate::error::ListTapePoolsError) -> Self {
        match err {
            crate::error::ListTapePoolsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListTapePoolsError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListTapePoolsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTapesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListTapesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTapesError> for Error {
    fn from(err: crate::error::ListTapesError) -> Self {
        match err {
            crate::error::ListTapesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListTapesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListTapesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVolumeInitiatorsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVolumeInitiatorsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVolumeInitiatorsError> for Error {
    fn from(err: crate::error::ListVolumeInitiatorsError) -> Self {
        match err {
            crate::error::ListVolumeInitiatorsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListVolumeInitiatorsError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListVolumeInitiatorsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVolumeRecoveryPointsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListVolumeRecoveryPointsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVolumeRecoveryPointsError> for Error {
    fn from(err: crate::error::ListVolumeRecoveryPointsError) -> Self {
        match err {
            crate::error::ListVolumeRecoveryPointsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListVolumeRecoveryPointsError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListVolumeRecoveryPointsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListVolumesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListVolumesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListVolumesError> for Error {
    fn from(err: crate::error::ListVolumesError) -> Self {
        match err {
            crate::error::ListVolumesError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ListVolumesError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ListVolumesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::NotifyWhenUploadedError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::NotifyWhenUploadedError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::NotifyWhenUploadedError> for Error {
    fn from(err: crate::error::NotifyWhenUploadedError) -> Self {
        match err {
            crate::error::NotifyWhenUploadedError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::NotifyWhenUploadedError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::NotifyWhenUploadedError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RefreshCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RefreshCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RefreshCacheError> for Error {
    fn from(err: crate::error::RefreshCacheError) -> Self {
        match err {
            crate::error::RefreshCacheError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::RefreshCacheError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::RefreshCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RemoveTagsFromResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RemoveTagsFromResourceError> for Error {
    fn from(err: crate::error::RemoveTagsFromResourceError) -> Self {
        match err {
            crate::error::RemoveTagsFromResourceError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::RemoveTagsFromResourceError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::RemoveTagsFromResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResetCacheError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ResetCacheError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResetCacheError> for Error {
    fn from(err: crate::error::ResetCacheError) -> Self {
        match err {
            crate::error::ResetCacheError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ResetCacheError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ResetCacheError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RetrieveTapeArchiveError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RetrieveTapeArchiveError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RetrieveTapeArchiveError> for Error {
    fn from(err: crate::error::RetrieveTapeArchiveError) -> Self {
        match err {
            crate::error::RetrieveTapeArchiveError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::RetrieveTapeArchiveError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::RetrieveTapeArchiveError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RetrieveTapeRecoveryPointError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RetrieveTapeRecoveryPointError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RetrieveTapeRecoveryPointError> for Error {
    fn from(err: crate::error::RetrieveTapeRecoveryPointError) -> Self {
        match err {
            crate::error::RetrieveTapeRecoveryPointError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::RetrieveTapeRecoveryPointError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::RetrieveTapeRecoveryPointError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetLocalConsolePasswordError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetLocalConsolePasswordError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetLocalConsolePasswordError> for Error {
    fn from(err: crate::error::SetLocalConsolePasswordError) -> Self {
        match err {
            crate::error::SetLocalConsolePasswordError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::SetLocalConsolePasswordError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::SetLocalConsolePasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetSMBGuestPasswordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetSMBGuestPasswordError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetSMBGuestPasswordError> for Error {
    fn from(err: crate::error::SetSMBGuestPasswordError) -> Self {
        match err {
            crate::error::SetSMBGuestPasswordError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::SetSMBGuestPasswordError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::SetSMBGuestPasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ShutdownGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ShutdownGatewayError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ShutdownGatewayError> for Error {
    fn from(err: crate::error::ShutdownGatewayError) -> Self {
        match err {
            crate::error::ShutdownGatewayError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::ShutdownGatewayError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::ShutdownGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartAvailabilityMonitorTestError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartAvailabilityMonitorTestError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartAvailabilityMonitorTestError> for Error {
    fn from(err: crate::error::StartAvailabilityMonitorTestError) -> Self {
        match err {
            crate::error::StartAvailabilityMonitorTestError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StartAvailabilityMonitorTestError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::StartAvailabilityMonitorTestError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartGatewayError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::StartGatewayError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartGatewayError> for Error {
    fn from(err: crate::error::StartGatewayError) -> Self {
        match err {
            crate::error::StartGatewayError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::StartGatewayError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::StartGatewayError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateAutomaticTapeCreationPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateAutomaticTapeCreationPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAutomaticTapeCreationPolicyError> for Error {
    fn from(err: crate::error::UpdateAutomaticTapeCreationPolicyError) -> Self {
        match err {
            crate::error::UpdateAutomaticTapeCreationPolicyError::InternalServerError(inner) => Error::InternalServerError(inner),
            crate::error::UpdateAutomaticTapeCreationPolicyError::InvalidGatewayRequestException(inner) => Error::InvalidGatewayRequestException(inner),
            crate::error::UpdateAutomaticTapeCreationPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateBandwidthRateLimitError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateBandwidthRateLimitError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBandwidthRateLimitError> for Error {
    fn from(err: crate::error::UpdateBandwidthRateLimitError) -> Self {
        match err {
            crate::error::UpdateBandwidthRateLimitError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateBandwidthRateLimitError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateBandwidthRateLimitError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::UpdateBandwidthRateLimitScheduleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::UpdateBandwidthRateLimitScheduleError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateBandwidthRateLimitScheduleError> for Error {
    fn from(err: crate::error::UpdateBandwidthRateLimitScheduleError) -> Self {
        match err {
            crate::error::UpdateBandwidthRateLimitScheduleError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateBandwidthRateLimitScheduleError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::UpdateBandwidthRateLimitScheduleError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateChapCredentialsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateChapCredentialsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateChapCredentialsError> for Error {
    fn from(err: crate::error::UpdateChapCredentialsError) -> Self {
        match err {
            crate::error::UpdateChapCredentialsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateChapCredentialsError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateChapCredentialsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateFileSystemAssociationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateFileSystemAssociationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateFileSystemAssociationError> for Error {
    fn from(err: crate::error::UpdateFileSystemAssociationError) -> Self {
        match err {
            crate::error::UpdateFileSystemAssociationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateFileSystemAssociationError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::UpdateFileSystemAssociationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGatewayInformationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGatewayInformationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGatewayInformationError> for Error {
    fn from(err: crate::error::UpdateGatewayInformationError) -> Self {
        match err {
            crate::error::UpdateGatewayInformationError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateGatewayInformationError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateGatewayInformationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGatewaySoftwareNowError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateGatewaySoftwareNowError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGatewaySoftwareNowError> for Error {
    fn from(err: crate::error::UpdateGatewaySoftwareNowError) -> Self {
        match err {
            crate::error::UpdateGatewaySoftwareNowError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateGatewaySoftwareNowError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateGatewaySoftwareNowError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateMaintenanceStartTimeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateMaintenanceStartTimeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateMaintenanceStartTimeError> for Error {
    fn from(err: crate::error::UpdateMaintenanceStartTimeError) -> Self {
        match err {
            crate::error::UpdateMaintenanceStartTimeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateMaintenanceStartTimeError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::UpdateMaintenanceStartTimeError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateNFSFileShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateNFSFileShareError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateNFSFileShareError> for Error {
    fn from(err: crate::error::UpdateNFSFileShareError) -> Self {
        match err {
            crate::error::UpdateNFSFileShareError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateNFSFileShareError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateNFSFileShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSMBFileShareError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSMBFileShareError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSMBFileShareError> for Error {
    fn from(err: crate::error::UpdateSMBFileShareError) -> Self {
        match err {
            crate::error::UpdateSMBFileShareError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateSMBFileShareError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateSMBFileShareError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSMBFileShareVisibilityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSMBFileShareVisibilityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSMBFileShareVisibilityError> for Error {
    fn from(err: crate::error::UpdateSMBFileShareVisibilityError) -> Self {
        match err {
            crate::error::UpdateSMBFileShareVisibilityError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateSMBFileShareVisibilityError::InvalidGatewayRequestException(
                inner,
            ) => Error::InvalidGatewayRequestException(inner),
            crate::error::UpdateSMBFileShareVisibilityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSMBLocalGroupsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSMBLocalGroupsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSMBLocalGroupsError> for Error {
    fn from(err: crate::error::UpdateSMBLocalGroupsError) -> Self {
        match err {
            crate::error::UpdateSMBLocalGroupsError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateSMBLocalGroupsError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateSMBLocalGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSMBSecurityStrategyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSMBSecurityStrategyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSMBSecurityStrategyError> for Error {
    fn from(err: crate::error::UpdateSMBSecurityStrategyError) -> Self {
        match err {
            crate::error::UpdateSMBSecurityStrategyError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateSMBSecurityStrategyError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateSMBSecurityStrategyError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSnapshotScheduleError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSnapshotScheduleError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSnapshotScheduleError> for Error {
    fn from(err: crate::error::UpdateSnapshotScheduleError) -> Self {
        match err {
            crate::error::UpdateSnapshotScheduleError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateSnapshotScheduleError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateSnapshotScheduleError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateVTLDeviceTypeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateVTLDeviceTypeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateVTLDeviceTypeError> for Error {
    fn from(err: crate::error::UpdateVTLDeviceTypeError) -> Self {
        match err {
            crate::error::UpdateVTLDeviceTypeError::InternalServerError(inner) => {
                Error::InternalServerError(inner)
            }
            crate::error::UpdateVTLDeviceTypeError::InvalidGatewayRequestException(inner) => {
                Error::InvalidGatewayRequestException(inner)
            }
            crate::error::UpdateVTLDeviceTypeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InternalServerError(e) => e.request_id(),
            Self::InvalidGatewayRequestException(e) => e.request_id(),
            Self::ServiceUnavailableError(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
