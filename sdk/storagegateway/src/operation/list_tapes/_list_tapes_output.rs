// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON object containing the following fields:</p>
/// <ul>
/// <li> <p> <code>ListTapesOutput$Marker</code> </p> </li>
/// <li> <p> <code>ListTapesOutput$VolumeInfos</code> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListTapesOutput {
    /// <p>An array of <code>TapeInfo</code> objects, where each object describes a single tape. If there are no tapes in the tape library or VTS, then the <code>TapeInfos</code> is an empty array.</p>
    #[doc(hidden)]
    pub tape_infos: std::option::Option<std::vec::Vec<crate::types::TapeInfo>>,
    /// <p>A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTapesOutput {
    /// <p>An array of <code>TapeInfo</code> objects, where each object describes a single tape. If there are no tapes in the tape library or VTS, then the <code>TapeInfos</code> is an empty array.</p>
    pub fn tape_infos(&self) -> std::option::Option<&[crate::types::TapeInfo]> {
        self.tape_infos.as_deref()
    }
    /// <p>A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListTapesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListTapesOutput {
    /// Creates a new builder-style object to manufacture [`ListTapesOutput`](crate::operation::list_tapes::ListTapesOutput).
    pub fn builder() -> crate::operation::list_tapes::builders::ListTapesOutputBuilder {
        crate::operation::list_tapes::builders::ListTapesOutputBuilder::default()
    }
}

/// A builder for [`ListTapesOutput`](crate::operation::list_tapes::ListTapesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListTapesOutputBuilder {
    pub(crate) tape_infos: std::option::Option<std::vec::Vec<crate::types::TapeInfo>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListTapesOutputBuilder {
    /// Appends an item to `tape_infos`.
    ///
    /// To override the contents of this collection use [`set_tape_infos`](Self::set_tape_infos).
    ///
    /// <p>An array of <code>TapeInfo</code> objects, where each object describes a single tape. If there are no tapes in the tape library or VTS, then the <code>TapeInfos</code> is an empty array.</p>
    pub fn tape_infos(mut self, input: crate::types::TapeInfo) -> Self {
        let mut v = self.tape_infos.unwrap_or_default();
        v.push(input);
        self.tape_infos = Some(v);
        self
    }
    /// <p>An array of <code>TapeInfo</code> objects, where each object describes a single tape. If there are no tapes in the tape library or VTS, then the <code>TapeInfos</code> is an empty array.</p>
    pub fn set_tape_infos(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::TapeInfo>>,
    ) -> Self {
        self.tape_infos = input;
        self
    }
    /// <p>A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListTapesOutput`](crate::operation::list_tapes::ListTapesOutput).
    pub fn build(self) -> crate::operation::list_tapes::ListTapesOutput {
        crate::operation::list_tapes::ListTapesOutput {
            tape_infos: self.tape_infos,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
