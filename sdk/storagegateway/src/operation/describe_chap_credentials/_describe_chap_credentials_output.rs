// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON object containing the following fields:</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeChapCredentialsOutput {
    /// <p>An array of <code>ChapInfo</code> objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:</p>
    /// <ul>
    /// <li> <p> <b>InitiatorName</b>: The iSCSI initiator that connects to the target.</p> </li>
    /// <li> <p> <b>SecretToAuthenticateInitiator</b>: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> </li>
    /// <li> <p> <b>SecretToAuthenticateTarget</b>: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p> </li>
    /// <li> <p> <b>TargetARN</b>: The Amazon Resource Name (ARN) of the storage volume.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub chap_credentials: std::option::Option<std::vec::Vec<crate::types::ChapInfo>>,
    _request_id: Option<String>,
}
impl DescribeChapCredentialsOutput {
    /// <p>An array of <code>ChapInfo</code> objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:</p>
    /// <ul>
    /// <li> <p> <b>InitiatorName</b>: The iSCSI initiator that connects to the target.</p> </li>
    /// <li> <p> <b>SecretToAuthenticateInitiator</b>: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> </li>
    /// <li> <p> <b>SecretToAuthenticateTarget</b>: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p> </li>
    /// <li> <p> <b>TargetARN</b>: The Amazon Resource Name (ARN) of the storage volume.</p> </li>
    /// </ul>
    pub fn chap_credentials(&self) -> std::option::Option<&[crate::types::ChapInfo]> {
        self.chap_credentials.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeChapCredentialsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeChapCredentialsOutput {
    /// Creates a new builder-style object to manufacture [`DescribeChapCredentialsOutput`](crate::operation::describe_chap_credentials::DescribeChapCredentialsOutput).
    pub fn builder(
    ) -> crate::operation::describe_chap_credentials::builders::DescribeChapCredentialsOutputBuilder
    {
        crate::operation::describe_chap_credentials::builders::DescribeChapCredentialsOutputBuilder::default()
    }
}

/// A builder for [`DescribeChapCredentialsOutput`](crate::operation::describe_chap_credentials::DescribeChapCredentialsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeChapCredentialsOutputBuilder {
    pub(crate) chap_credentials: std::option::Option<std::vec::Vec<crate::types::ChapInfo>>,
    _request_id: Option<String>,
}
impl DescribeChapCredentialsOutputBuilder {
    /// Appends an item to `chap_credentials`.
    ///
    /// To override the contents of this collection use [`set_chap_credentials`](Self::set_chap_credentials).
    ///
    /// <p>An array of <code>ChapInfo</code> objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:</p>
    /// <ul>
    /// <li> <p> <b>InitiatorName</b>: The iSCSI initiator that connects to the target.</p> </li>
    /// <li> <p> <b>SecretToAuthenticateInitiator</b>: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> </li>
    /// <li> <p> <b>SecretToAuthenticateTarget</b>: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p> </li>
    /// <li> <p> <b>TargetARN</b>: The Amazon Resource Name (ARN) of the storage volume.</p> </li>
    /// </ul>
    pub fn chap_credentials(mut self, input: crate::types::ChapInfo) -> Self {
        let mut v = self.chap_credentials.unwrap_or_default();
        v.push(input);
        self.chap_credentials = Some(v);
        self
    }
    /// <p>An array of <code>ChapInfo</code> objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:</p>
    /// <ul>
    /// <li> <p> <b>InitiatorName</b>: The iSCSI initiator that connects to the target.</p> </li>
    /// <li> <p> <b>SecretToAuthenticateInitiator</b>: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> </li>
    /// <li> <p> <b>SecretToAuthenticateTarget</b>: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p> </li>
    /// <li> <p> <b>TargetARN</b>: The Amazon Resource Name (ARN) of the storage volume.</p> </li>
    /// </ul>
    pub fn set_chap_credentials(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ChapInfo>>,
    ) -> Self {
        self.chap_credentials = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeChapCredentialsOutput`](crate::operation::describe_chap_credentials::DescribeChapCredentialsOutput).
    pub fn build(
        self,
    ) -> crate::operation::describe_chap_credentials::DescribeChapCredentialsOutput {
        crate::operation::describe_chap_credentials::DescribeChapCredentialsOutput {
            chap_credentials: self.chap_credentials,
            _request_id: self._request_id,
        }
    }
}
