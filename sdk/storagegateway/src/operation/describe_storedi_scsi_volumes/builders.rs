// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::describe_storedi_scsi_volumes::_describe_storedi_scsi_volumes_output::DescribeStorediScsiVolumesOutputBuilder;

pub use crate::operation::describe_storedi_scsi_volumes::_describe_storedi_scsi_volumes_input::DescribeStorediScsiVolumesInputBuilder;

/// Fluent builder constructing a request to `DescribeStorediSCSIVolumes`.
///
/// <p>Returns the description of the gateway volumes specified in the request. The list of gateway volumes in the request must be from one gateway. In the response, Storage Gateway returns volume information sorted by volume ARNs. This operation is only supported in stored volume gateway type.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DescribeStorediSCSIVolumesFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::describe_storedi_scsi_volumes::builders::DescribeStorediScsiVolumesInputBuilder
            }
impl DescribeStorediSCSIVolumesFluentBuilder {
    /// Creates a new `DescribeStorediSCSIVolumes`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::describe_storedi_scsi_volumes::DescribeStorediSCSIVolumes,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_storedi_scsi_volumes::DescribeStorediSCSIVolumesError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::describe_storedi_scsi_volumes::DescribeStorediScsiVolumesOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::describe_storedi_scsi_volumes::DescribeStorediSCSIVolumesError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Appends an item to `VolumeARNs`.
    ///
    /// To override the contents of this collection use [`set_volume_ar_ns`](Self::set_volume_ar_ns).
    ///
    /// <p>An array of strings where each string represents the Amazon Resource Name (ARN) of a stored volume. All of the specified stored volumes must be from the same gateway. Use <code>ListVolumes</code> to get volume ARNs for a gateway.</p>
    pub fn volume_ar_ns(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.volume_ar_ns(input.into());
        self
    }
    /// <p>An array of strings where each string represents the Amazon Resource Name (ARN) of a stored volume. All of the specified stored volumes must be from the same gateway. Use <code>ListVolumes</code> to get volume ARNs for a gateway.</p>
    pub fn set_volume_ar_ns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_volume_ar_ns(input);
        self
    }
}
