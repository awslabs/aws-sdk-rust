// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeSnapshotScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the volume that was specified in the request.</p>
    pub volume_arn: ::std::option::Option<::std::string::String>,
    /// <p>The hour of the day at which the snapshot schedule begins represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    pub start_at: ::std::option::Option<i32>,
    /// <p>The number of hours between snapshots.</p>
    pub recurrence_in_hours: ::std::option::Option<i32>,
    /// <p>The snapshot description.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>A value that indicates the time zone of the gateway.</p>
    pub timezone: ::std::option::Option<::std::string::String>,
    /// <p>A list of up to 50 tags assigned to the snapshot schedule, sorted alphabetically by key name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can view all tags using the <code>ListTagsForResource</code> API operation.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl DescribeSnapshotScheduleOutput {
    /// <p>The Amazon Resource Name (ARN) of the volume that was specified in the request.</p>
    pub fn volume_arn(&self) -> ::std::option::Option<&str> {
        self.volume_arn.as_deref()
    }
    /// <p>The hour of the day at which the snapshot schedule begins represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    pub fn start_at(&self) -> ::std::option::Option<i32> {
        self.start_at
    }
    /// <p>The number of hours between snapshots.</p>
    pub fn recurrence_in_hours(&self) -> ::std::option::Option<i32> {
        self.recurrence_in_hours
    }
    /// <p>The snapshot description.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>A value that indicates the time zone of the gateway.</p>
    pub fn timezone(&self) -> ::std::option::Option<&str> {
        self.timezone.as_deref()
    }
    /// <p>A list of up to 50 tags assigned to the snapshot schedule, sorted alphabetically by key name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can view all tags using the <code>ListTagsForResource</code> API operation.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for DescribeSnapshotScheduleOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeSnapshotScheduleOutput {
    /// Creates a new builder-style object to manufacture [`DescribeSnapshotScheduleOutput`](crate::operation::describe_snapshot_schedule::DescribeSnapshotScheduleOutput).
    pub fn builder() -> crate::operation::describe_snapshot_schedule::builders::DescribeSnapshotScheduleOutputBuilder {
        crate::operation::describe_snapshot_schedule::builders::DescribeSnapshotScheduleOutputBuilder::default()
    }
}

/// A builder for [`DescribeSnapshotScheduleOutput`](crate::operation::describe_snapshot_schedule::DescribeSnapshotScheduleOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeSnapshotScheduleOutputBuilder {
    pub(crate) volume_arn: ::std::option::Option<::std::string::String>,
    pub(crate) start_at: ::std::option::Option<i32>,
    pub(crate) recurrence_in_hours: ::std::option::Option<i32>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) timezone: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    _request_id: Option<String>,
}
impl DescribeSnapshotScheduleOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the volume that was specified in the request.</p>
    pub fn volume_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.volume_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the volume that was specified in the request.</p>
    pub fn set_volume_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.volume_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the volume that was specified in the request.</p>
    pub fn get_volume_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.volume_arn
    }
    /// <p>The hour of the day at which the snapshot schedule begins represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    pub fn start_at(mut self, input: i32) -> Self {
        self.start_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The hour of the day at which the snapshot schedule begins represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    pub fn set_start_at(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_at = input;
        self
    }
    /// <p>The hour of the day at which the snapshot schedule begins represented as <i>hh</i>, where <i>hh</i> is the hour (0 to 23). The hour of the day is in the time zone of the gateway.</p>
    pub fn get_start_at(&self) -> &::std::option::Option<i32> {
        &self.start_at
    }
    /// <p>The number of hours between snapshots.</p>
    pub fn recurrence_in_hours(mut self, input: i32) -> Self {
        self.recurrence_in_hours = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of hours between snapshots.</p>
    pub fn set_recurrence_in_hours(mut self, input: ::std::option::Option<i32>) -> Self {
        self.recurrence_in_hours = input;
        self
    }
    /// <p>The number of hours between snapshots.</p>
    pub fn get_recurrence_in_hours(&self) -> &::std::option::Option<i32> {
        &self.recurrence_in_hours
    }
    /// <p>The snapshot description.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The snapshot description.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The snapshot description.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>A value that indicates the time zone of the gateway.</p>
    pub fn timezone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.timezone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A value that indicates the time zone of the gateway.</p>
    pub fn set_timezone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.timezone = input;
        self
    }
    /// <p>A value that indicates the time zone of the gateway.</p>
    pub fn get_timezone(&self) -> &::std::option::Option<::std::string::String> {
        &self.timezone
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of up to 50 tags assigned to the snapshot schedule, sorted alphabetically by key name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can view all tags using the <code>ListTagsForResource</code> API operation.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of up to 50 tags assigned to the snapshot schedule, sorted alphabetically by key name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can view all tags using the <code>ListTagsForResource</code> API operation.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A list of up to 50 tags assigned to the snapshot schedule, sorted alphabetically by key name. Each tag is a key-value pair. For a gateway with more than 10 tags assigned, you can view all tags using the <code>ListTagsForResource</code> API operation.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeSnapshotScheduleOutput`](crate::operation::describe_snapshot_schedule::DescribeSnapshotScheduleOutput).
    pub fn build(self) -> crate::operation::describe_snapshot_schedule::DescribeSnapshotScheduleOutput {
        crate::operation::describe_snapshot_schedule::DescribeSnapshotScheduleOutput {
            volume_arn: self.volume_arn,
            start_at: self.start_at,
            recurrence_in_hours: self.recurrence_in_hours,
            description: self.description,
            timezone: self.timezone,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
