// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A JSON object containing one or more of the following fields:</p>
/// <ul>
/// <li> <p> <code>UpdateChapCredentialsInput$InitiatorName</code> </p> </li>
/// <li> <p> <code>UpdateChapCredentialsInput$SecretToAuthenticateInitiator</code> </p> </li>
/// <li> <p> <code>UpdateChapCredentialsInput$SecretToAuthenticateTarget</code> </p> </li>
/// <li> <p> <code>UpdateChapCredentialsInput$TargetARN</code> </p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateChapCredentialsInput {
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return the TargetARN for specified VolumeARN.</p>
    pub target_arn: ::std::option::Option<::std::string::String>,
    /// <p>The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub secret_to_authenticate_initiator: ::std::option::Option<::std::string::String>,
    /// <p>The iSCSI initiator that connects to the target.</p>
    pub initiator_name: ::std::option::Option<::std::string::String>,
    /// <p>The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p>
    /// <p>Byte constraints: Minimum bytes of 12. Maximum bytes of 16.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub secret_to_authenticate_target: ::std::option::Option<::std::string::String>,
}
impl UpdateChapCredentialsInput {
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return the TargetARN for specified VolumeARN.</p>
    pub fn target_arn(&self) -> ::std::option::Option<&str> {
        self.target_arn.as_deref()
    }
    /// <p>The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn secret_to_authenticate_initiator(&self) -> ::std::option::Option<&str> {
        self.secret_to_authenticate_initiator.as_deref()
    }
    /// <p>The iSCSI initiator that connects to the target.</p>
    pub fn initiator_name(&self) -> ::std::option::Option<&str> {
        self.initiator_name.as_deref()
    }
    /// <p>The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p>
    /// <p>Byte constraints: Minimum bytes of 12. Maximum bytes of 16.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn secret_to_authenticate_target(&self) -> ::std::option::Option<&str> {
        self.secret_to_authenticate_target.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateChapCredentialsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateChapCredentialsInput");
        formatter.field("target_arn", &self.target_arn);
        formatter.field("secret_to_authenticate_initiator", &"*** Sensitive Data Redacted ***");
        formatter.field("initiator_name", &self.initiator_name);
        formatter.field("secret_to_authenticate_target", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl UpdateChapCredentialsInput {
    /// Creates a new builder-style object to manufacture [`UpdateChapCredentialsInput`](crate::operation::update_chap_credentials::UpdateChapCredentialsInput).
    pub fn builder() -> crate::operation::update_chap_credentials::builders::UpdateChapCredentialsInputBuilder {
        crate::operation::update_chap_credentials::builders::UpdateChapCredentialsInputBuilder::default()
    }
}

/// A builder for [`UpdateChapCredentialsInput`](crate::operation::update_chap_credentials::UpdateChapCredentialsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateChapCredentialsInputBuilder {
    pub(crate) target_arn: ::std::option::Option<::std::string::String>,
    pub(crate) secret_to_authenticate_initiator: ::std::option::Option<::std::string::String>,
    pub(crate) initiator_name: ::std::option::Option<::std::string::String>,
    pub(crate) secret_to_authenticate_target: ::std::option::Option<::std::string::String>,
}
impl UpdateChapCredentialsInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return the TargetARN for specified VolumeARN.</p>
    /// This field is required.
    pub fn target_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.target_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return the TargetARN for specified VolumeARN.</p>
    pub fn set_target_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.target_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return the TargetARN for specified VolumeARN.</p>
    pub fn get_target_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.target_arn
    }
    /// <p>The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    /// This field is required.
    pub fn secret_to_authenticate_initiator(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_to_authenticate_initiator = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn set_secret_to_authenticate_initiator(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_to_authenticate_initiator = input;
        self
    }
    /// <p>The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn get_secret_to_authenticate_initiator(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_to_authenticate_initiator
    }
    /// <p>The iSCSI initiator that connects to the target.</p>
    /// This field is required.
    pub fn initiator_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.initiator_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The iSCSI initiator that connects to the target.</p>
    pub fn set_initiator_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.initiator_name = input;
        self
    }
    /// <p>The iSCSI initiator that connects to the target.</p>
    pub fn get_initiator_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.initiator_name
    }
    /// <p>The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p>
    /// <p>Byte constraints: Minimum bytes of 12. Maximum bytes of 16.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn secret_to_authenticate_target(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.secret_to_authenticate_target = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p>
    /// <p>Byte constraints: Minimum bytes of 12. Maximum bytes of 16.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn set_secret_to_authenticate_target(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.secret_to_authenticate_target = input;
        self
    }
    /// <p>The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p>
    /// <p>Byte constraints: Minimum bytes of 12. Maximum bytes of 16.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn get_secret_to_authenticate_target(&self) -> &::std::option::Option<::std::string::String> {
        &self.secret_to_authenticate_target
    }
    /// Consumes the builder and constructs a [`UpdateChapCredentialsInput`](crate::operation::update_chap_credentials::UpdateChapCredentialsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_chap_credentials::UpdateChapCredentialsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_chap_credentials::UpdateChapCredentialsInput {
            target_arn: self.target_arn,
            secret_to_authenticate_initiator: self.secret_to_authenticate_initiator,
            initiator_name: self.initiator_name,
            secret_to_authenticate_target: self.secret_to_authenticate_target,
        })
    }
}
impl ::std::fmt::Debug for UpdateChapCredentialsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateChapCredentialsInputBuilder");
        formatter.field("target_arn", &self.target_arn);
        formatter.field("secret_to_authenticate_initiator", &"*** Sensitive Data Redacted ***");
        formatter.field("initiator_name", &self.initiator_name);
        formatter.field("secret_to_authenticate_target", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
