// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_chap_credentials::_update_chap_credentials_output::UpdateChapCredentialsOutputBuilder;

pub use crate::operation::update_chap_credentials::_update_chap_credentials_input::UpdateChapCredentialsInputBuilder;

/// Fluent builder constructing a request to `UpdateChapCredentials`.
///
/// <p>Updates the Challenge-Handshake Authentication Protocol (CHAP) credentials for a specified iSCSI target. By default, a gateway does not have CHAP enabled; however, for added security, you might use it. This operation is supported in the volume and tape gateway types.</p> <important>
/// <p>When you update CHAP credentials, all existing connections on the target are closed and initiators must reconnect with the new credentials.</p>
/// </important>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateChapCredentialsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_chap_credentials::builders::UpdateChapCredentialsInputBuilder,
}
impl UpdateChapCredentialsFluentBuilder {
    /// Creates a new `UpdateChapCredentials`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_chap_credentials::UpdateChapCredentials,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_chap_credentials::UpdateChapCredentialsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_chap_credentials::UpdateChapCredentialsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_chap_credentials::UpdateChapCredentialsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return the TargetARN for specified VolumeARN.</p>
    pub fn target_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.target_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return the TargetARN for specified VolumeARN.</p>
    pub fn set_target_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_target_arn(input);
        self
    }
    /// <p>The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn secret_to_authenticate_initiator(
        mut self,
        input: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.secret_to_authenticate_initiator(input.into());
        self
    }
    /// <p>The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn set_secret_to_authenticate_initiator(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_secret_to_authenticate_initiator(input);
        self
    }
    /// <p>The iSCSI initiator that connects to the target.</p>
    pub fn initiator_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.initiator_name(input.into());
        self
    }
    /// <p>The iSCSI initiator that connects to the target.</p>
    pub fn set_initiator_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_initiator_name(input);
        self
    }
    /// <p>The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p>
    /// <p>Byte constraints: Minimum bytes of 12. Maximum bytes of 16.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn secret_to_authenticate_target(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.secret_to_authenticate_target(input.into());
        self
    }
    /// <p>The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).</p>
    /// <p>Byte constraints: Minimum bytes of 12. Maximum bytes of 16.</p> <note>
    /// <p>The secret key must be between 12 and 16 bytes when encoded in UTF-8.</p>
    /// </note>
    pub fn set_secret_to_authenticate_target(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_secret_to_authenticate_target(input);
        self
    }
}
