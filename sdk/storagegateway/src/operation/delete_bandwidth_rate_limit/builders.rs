// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::delete_bandwidth_rate_limit::_delete_bandwidth_rate_limit_output::DeleteBandwidthRateLimitOutputBuilder;

pub use crate::operation::delete_bandwidth_rate_limit::_delete_bandwidth_rate_limit_input::DeleteBandwidthRateLimitInputBuilder;

/// Fluent builder constructing a request to `DeleteBandwidthRateLimit`.
///
/// <p>Deletes the bandwidth rate limits of a gateway. You can delete either the upload and download bandwidth rate limit, or you can delete both. If you delete only one of the limits, the other limit remains unchanged. To specify which gateway to work with, use the Amazon Resource Name (ARN) of the gateway in your request. This operation is supported only for the stored volume, cached volume, and tape gateway types.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DeleteBandwidthRateLimitFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::delete_bandwidth_rate_limit::builders::DeleteBandwidthRateLimitInputBuilder
            }
impl DeleteBandwidthRateLimitFluentBuilder {
    /// Creates a new `DeleteBandwidthRateLimit`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::delete_bandwidth_rate_limit::DeleteBandwidthRateLimit,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_bandwidth_rate_limit::DeleteBandwidthRateLimitError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::delete_bandwidth_rate_limit::DeleteBandwidthRateLimitOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::delete_bandwidth_rate_limit::DeleteBandwidthRateLimitError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn gateway_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.gateway_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn set_gateway_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_gateway_arn(input);
        self
    }
    /// <p>One of the BandwidthType values that indicates the gateway bandwidth rate limit to delete.</p>
    /// <p>Valid Values: <code>UPLOAD</code> | <code>DOWNLOAD</code> | <code>ALL</code> </p>
    pub fn bandwidth_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.bandwidth_type(input.into());
        self
    }
    /// <p>One of the BandwidthType values that indicates the gateway bandwidth rate limit to delete.</p>
    /// <p>Valid Values: <code>UPLOAD</code> | <code>DOWNLOAD</code> | <code>ALL</code> </p>
    pub fn set_bandwidth_type(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_bandwidth_type(input);
        self
    }
}
