// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::disassociate_file_system::_disassociate_file_system_output::DisassociateFileSystemOutputBuilder;

pub use crate::operation::disassociate_file_system::_disassociate_file_system_input::DisassociateFileSystemInputBuilder;

/// Fluent builder constructing a request to `DisassociateFileSystem`.
///
/// <p>Disassociates an Amazon FSx file system from the specified gateway. After the disassociation process finishes, the gateway can no longer access the Amazon FSx file system. This operation is only supported in the FSx File Gateway type.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct DisassociateFileSystemFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::disassociate_file_system::builders::DisassociateFileSystemInputBuilder,
}
impl DisassociateFileSystemFluentBuilder {
    /// Creates a new `DisassociateFileSystem`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::disassociate_file_system::DisassociateFileSystem,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_file_system::DisassociateFileSystemError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::disassociate_file_system::DisassociateFileSystemOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_file_system::DisassociateFileSystemError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the file system association to be deleted.</p>
    pub fn file_system_association_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.file_system_association_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the file system association to be deleted.</p>
    pub fn set_file_system_association_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_file_system_association_arn(input);
        self
    }
    /// <p>If this value is set to true, the operation disassociates an Amazon FSx file system immediately. It ends all data uploads to the file system, and the file system association enters the <code>FORCE_DELETING</code> status. If this value is set to false, the Amazon FSx file system does not disassociate until all data is uploaded.</p>
    pub fn force_delete(mut self, input: bool) -> Self {
        self.inner = self.inner.force_delete(input);
        self
    }
    /// <p>If this value is set to true, the operation disassociates an Amazon FSx file system immediately. It ends all data uploads to the file system, and the file system association enters the <code>FORCE_DELETING</code> status. If this value is set to false, the Amazon FSx file system does not disassociate until all data is uploaded.</p>
    pub fn set_force_delete(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_force_delete(input);
        self
    }
}
