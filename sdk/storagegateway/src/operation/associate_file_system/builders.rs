// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::associate_file_system::_associate_file_system_output::AssociateFileSystemOutputBuilder;

pub use crate::operation::associate_file_system::_associate_file_system_input::AssociateFileSystemInputBuilder;

/// Fluent builder constructing a request to `AssociateFileSystem`.
///
/// <p>Associate an Amazon FSx file system with the FSx File Gateway. After the association process is complete, the file shares on the Amazon FSx file system are available for access through the gateway. This operation only supports the FSx File Gateway type.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AssociateFileSystemFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::associate_file_system::builders::AssociateFileSystemInputBuilder,
}
impl AssociateFileSystemFluentBuilder {
    /// Creates a new `AssociateFileSystem`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::associate_file_system::AssociateFileSystem,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::associate_file_system::AssociateFileSystemError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::associate_file_system::AssociateFileSystemOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::associate_file_system::AssociateFileSystemError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The user name of the user credential that has permission to access the root share D$ of the Amazon FSx file system. The user account must belong to the Amazon FSx delegated admin user group.</p>
    pub fn user_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_name(input.into());
        self
    }
    /// <p>The user name of the user credential that has permission to access the root share D$ of the Amazon FSx file system. The user account must belong to the Amazon FSx delegated admin user group.</p>
    pub fn set_user_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_name(input);
        self
    }
    /// <p>The password of the user credential.</p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.password(input.into());
        self
    }
    /// <p>The password of the user credential.</p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_password(input);
        self
    }
    /// <p>A unique string value that you supply that is used by the FSx File Gateway to ensure idempotent file system association creation.</p>
    pub fn client_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_token(input.into());
        self
    }
    /// <p>A unique string value that you supply that is used by the FSx File Gateway to ensure idempotent file system association creation.</p>
    pub fn set_client_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_token(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn gateway_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.gateway_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn set_gateway_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_gateway_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon FSx file system to associate with the FSx File Gateway.</p>
    pub fn location_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.location_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon FSx file system to associate with the FSx File Gateway.</p>
    pub fn set_location_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_location_arn(input);
        self
    }
    /// Appends an item to `Tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of up to 50 tags that can be assigned to the file system association. Each tag is a key-value pair.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.tags(input);
        self
    }
    /// <p>A list of up to 50 tags that can be assigned to the file system association. Each tag is a key-value pair.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the storage used for the audit logs.</p>
    pub fn audit_destination_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.audit_destination_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the storage used for the audit logs.</p>
    pub fn set_audit_destination_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_audit_destination_arn(input);
        self
    }
    /// <p>The refresh cache information for the file share or FSx file systems.</p>
    pub fn cache_attributes(mut self, input: crate::types::CacheAttributes) -> Self {
        self.inner = self.inner.cache_attributes(input);
        self
    }
    /// <p>The refresh cache information for the file share or FSx file systems.</p>
    pub fn set_cache_attributes(
        mut self,
        input: std::option::Option<crate::types::CacheAttributes>,
    ) -> Self {
        self.inner = self.inner.set_cache_attributes(input);
        self
    }
    /// <p>Specifies the network configuration information for the gateway associated with the Amazon FSx file system.</p> <note>
    /// <p>If multiple file systems are associated with this gateway, this parameter's <code>IpAddresses</code> field is required.</p>
    /// </note>
    pub fn endpoint_network_configuration(
        mut self,
        input: crate::types::EndpointNetworkConfiguration,
    ) -> Self {
        self.inner = self.inner.endpoint_network_configuration(input);
        self
    }
    /// <p>Specifies the network configuration information for the gateway associated with the Amazon FSx file system.</p> <note>
    /// <p>If multiple file systems are associated with this gateway, this parameter's <code>IpAddresses</code> field is required.</p>
    /// </note>
    pub fn set_endpoint_network_configuration(
        mut self,
        input: std::option::Option<crate::types::EndpointNetworkConfiguration>,
    ) -> Self {
        self.inner = self.inner.set_endpoint_network_configuration(input);
        self
    }
}
