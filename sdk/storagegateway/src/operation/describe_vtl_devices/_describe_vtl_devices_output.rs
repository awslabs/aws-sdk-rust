// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeVTLDevicesOutput</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVtlDevicesOutput {
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub gateway_arn: std::option::Option<std::string::String>,
    /// <p>An array of VTL device objects composed of the Amazon Resource Name (ARN) of the VTL devices.</p>
    #[doc(hidden)]
    pub vtl_devices: std::option::Option<std::vec::Vec<crate::types::VtlDevice>>,
    /// <p>An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVtlDevicesOutput {
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn gateway_arn(&self) -> std::option::Option<&str> {
        self.gateway_arn.as_deref()
    }
    /// <p>An array of VTL device objects composed of the Amazon Resource Name (ARN) of the VTL devices.</p>
    pub fn vtl_devices(&self) -> std::option::Option<&[crate::types::VtlDevice]> {
        self.vtl_devices.as_deref()
    }
    /// <p>An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl aws_http::request_id::RequestId for DescribeVtlDevicesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeVtlDevicesOutput {
    /// Creates a new builder-style object to manufacture [`DescribeVtlDevicesOutput`](crate::operation::describe_vtl_devices::DescribeVtlDevicesOutput).
    pub fn builder(
    ) -> crate::operation::describe_vtl_devices::builders::DescribeVtlDevicesOutputBuilder {
        crate::operation::describe_vtl_devices::builders::DescribeVtlDevicesOutputBuilder::default()
    }
}

/// A builder for [`DescribeVtlDevicesOutput`](crate::operation::describe_vtl_devices::DescribeVtlDevicesOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeVtlDevicesOutputBuilder {
    pub(crate) gateway_arn: std::option::Option<std::string::String>,
    pub(crate) vtl_devices: std::option::Option<std::vec::Vec<crate::types::VtlDevice>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl DescribeVtlDevicesOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn gateway_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn set_gateway_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gateway_arn = input;
        self
    }
    /// Appends an item to `vtl_devices`.
    ///
    /// To override the contents of this collection use [`set_vtl_devices`](Self::set_vtl_devices).
    ///
    /// <p>An array of VTL device objects composed of the Amazon Resource Name (ARN) of the VTL devices.</p>
    pub fn vtl_devices(mut self, input: crate::types::VtlDevice) -> Self {
        let mut v = self.vtl_devices.unwrap_or_default();
        v.push(input);
        self.vtl_devices = Some(v);
        self
    }
    /// <p>An array of VTL device objects composed of the Amazon Resource Name (ARN) of the VTL devices.</p>
    pub fn set_vtl_devices(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VtlDevice>>,
    ) -> Self {
        self.vtl_devices = input;
        self
    }
    /// <p>An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeVtlDevicesOutput`](crate::operation::describe_vtl_devices::DescribeVtlDevicesOutput).
    pub fn build(self) -> crate::operation::describe_vtl_devices::DescribeVtlDevicesOutput {
        crate::operation::describe_vtl_devices::DescribeVtlDevicesOutput {
            gateway_arn: self.gateway_arn,
            vtl_devices: self.vtl_devices,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
