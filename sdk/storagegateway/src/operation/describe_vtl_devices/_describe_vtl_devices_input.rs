// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeVTLDevicesInput</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeVtlDevicesInput {
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    #[doc(hidden)]
    pub gateway_arn: std::option::Option<std::string::String>,
    /// <p>An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.</p> <note>
    /// <p>All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway.</p>
    /// </note>
    #[doc(hidden)]
    pub vtl_device_ar_ns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An opaque string that indicates the position at which to begin describing the VTL devices.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>Specifies that the number of VTL devices described be limited to the specified number.</p>
    #[doc(hidden)]
    pub limit: std::option::Option<i32>,
}
impl DescribeVtlDevicesInput {
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn gateway_arn(&self) -> std::option::Option<&str> {
        self.gateway_arn.as_deref()
    }
    /// <p>An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.</p> <note>
    /// <p>All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway.</p>
    /// </note>
    pub fn vtl_device_ar_ns(&self) -> std::option::Option<&[std::string::String]> {
        self.vtl_device_ar_ns.as_deref()
    }
    /// <p>An opaque string that indicates the position at which to begin describing the VTL devices.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Specifies that the number of VTL devices described be limited to the specified number.</p>
    pub fn limit(&self) -> std::option::Option<i32> {
        self.limit
    }
}
impl DescribeVtlDevicesInput {
    /// Creates a new builder-style object to manufacture [`DescribeVtlDevicesInput`](crate::operation::describe_vtl_devices::DescribeVtlDevicesInput).
    pub fn builder(
    ) -> crate::operation::describe_vtl_devices::builders::DescribeVtlDevicesInputBuilder {
        crate::operation::describe_vtl_devices::builders::DescribeVtlDevicesInputBuilder::default()
    }
}

/// A builder for [`DescribeVtlDevicesInput`](crate::operation::describe_vtl_devices::DescribeVtlDevicesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeVtlDevicesInputBuilder {
    pub(crate) gateway_arn: std::option::Option<std::string::String>,
    pub(crate) vtl_device_ar_ns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) limit: std::option::Option<i32>,
}
impl DescribeVtlDevicesInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn gateway_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.gateway_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn set_gateway_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.gateway_arn = input;
        self
    }
    /// Appends an item to `vtl_device_ar_ns`.
    ///
    /// To override the contents of this collection use [`set_vtl_device_ar_ns`](Self::set_vtl_device_ar_ns).
    ///
    /// <p>An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.</p> <note>
    /// <p>All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway.</p>
    /// </note>
    pub fn vtl_device_ar_ns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.vtl_device_ar_ns.unwrap_or_default();
        v.push(input.into());
        self.vtl_device_ar_ns = Some(v);
        self
    }
    /// <p>An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.</p> <note>
    /// <p>All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway.</p>
    /// </note>
    pub fn set_vtl_device_ar_ns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.vtl_device_ar_ns = input;
        self
    }
    /// <p>An opaque string that indicates the position at which to begin describing the VTL devices.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An opaque string that indicates the position at which to begin describing the VTL devices.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Specifies that the number of VTL devices described be limited to the specified number.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>Specifies that the number of VTL devices described be limited to the specified number.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeVtlDevicesInput`](crate::operation::describe_vtl_devices::DescribeVtlDevicesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_vtl_devices::DescribeVtlDevicesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_vtl_devices::DescribeVtlDevicesInput {
                gateway_arn: self.gateway_arn,
                vtl_device_ar_ns: self.vtl_device_ar_ns,
                marker: self.marker,
                limit: self.limit,
            },
        )
    }
}
