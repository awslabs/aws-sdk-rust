// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_bandwidth_rate_limit::_update_bandwidth_rate_limit_output::UpdateBandwidthRateLimitOutputBuilder;

pub use crate::operation::update_bandwidth_rate_limit::_update_bandwidth_rate_limit_input::UpdateBandwidthRateLimitInputBuilder;

/// Fluent builder constructing a request to `UpdateBandwidthRateLimit`.
///
/// <p>Updates the bandwidth rate limits of a gateway. You can update both the upload and download bandwidth rate limit or specify only one of the two. If you don't set a bandwidth rate limit, the existing rate limit remains. This operation is supported only for the stored volume, cached volume, and tape gateway types. To update bandwidth rate limits for S3 file gateways, use <code>UpdateBandwidthRateLimitSchedule</code>.</p>
/// <p>By default, a gateway's bandwidth rate limits are not set. If you don't set any limit, the gateway does not have any limitations on its bandwidth usage and could potentially use the maximum available bandwidth.</p>
/// <p>To specify which gateway to update, use the Amazon Resource Name (ARN) of the gateway in your request.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct UpdateBandwidthRateLimitFluentBuilder {
                handle: std::sync::Arc<crate::client::Handle>,
                inner: crate::operation::update_bandwidth_rate_limit::builders::UpdateBandwidthRateLimitInputBuilder
            }
impl UpdateBandwidthRateLimitFluentBuilder {
    /// Creates a new `UpdateBandwidthRateLimit`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::update_bandwidth_rate_limit::UpdateBandwidthRateLimit,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::update_bandwidth_rate_limit::UpdateBandwidthRateLimitError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::update_bandwidth_rate_limit::UpdateBandwidthRateLimitOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::update_bandwidth_rate_limit::UpdateBandwidthRateLimitError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn gateway_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.gateway_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn set_gateway_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_gateway_arn(input);
        self
    }
    /// <p>The average upload bandwidth rate limit in bits per second.</p>
    pub fn average_upload_rate_limit_in_bits_per_sec(mut self, input: i64) -> Self {
        self.inner = self.inner.average_upload_rate_limit_in_bits_per_sec(input);
        self
    }
    /// <p>The average upload bandwidth rate limit in bits per second.</p>
    pub fn set_average_upload_rate_limit_in_bits_per_sec(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.inner = self
            .inner
            .set_average_upload_rate_limit_in_bits_per_sec(input);
        self
    }
    /// <p>The average download bandwidth rate limit in bits per second.</p>
    pub fn average_download_rate_limit_in_bits_per_sec(mut self, input: i64) -> Self {
        self.inner = self
            .inner
            .average_download_rate_limit_in_bits_per_sec(input);
        self
    }
    /// <p>The average download bandwidth rate limit in bits per second.</p>
    pub fn set_average_download_rate_limit_in_bits_per_sec(
        mut self,
        input: std::option::Option<i64>,
    ) -> Self {
        self.inner = self
            .inner
            .set_average_download_rate_limit_in_bits_per_sec(input);
        self
    }
}
