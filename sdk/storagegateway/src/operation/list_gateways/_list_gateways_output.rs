// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListGatewaysOutput {
    /// <p>An array of <code>GatewayInfo</code> objects.</p>
    pub gateways: ::std::option::Option<::std::vec::Vec<crate::types::GatewayInfo>>,
    /// <p>Use the marker in your next request to fetch the next set of gateways in the list. If there are no more gateways to list, this field does not appear in the response.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListGatewaysOutput {
    /// <p>An array of <code>GatewayInfo</code> objects.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.gateways.is_none()`.
    pub fn gateways(&self) -> &[crate::types::GatewayInfo] {
        self.gateways.as_deref().unwrap_or_default()
    }
    /// <p>Use the marker in your next request to fetch the next set of gateways in the list. If there are no more gateways to list, this field does not appear in the response.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListGatewaysOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListGatewaysOutput {
    /// Creates a new builder-style object to manufacture [`ListGatewaysOutput`](crate::operation::list_gateways::ListGatewaysOutput).
    pub fn builder() -> crate::operation::list_gateways::builders::ListGatewaysOutputBuilder {
        crate::operation::list_gateways::builders::ListGatewaysOutputBuilder::default()
    }
}

/// A builder for [`ListGatewaysOutput`](crate::operation::list_gateways::ListGatewaysOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListGatewaysOutputBuilder {
    pub(crate) gateways: ::std::option::Option<::std::vec::Vec<crate::types::GatewayInfo>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListGatewaysOutputBuilder {
    /// Appends an item to `gateways`.
    ///
    /// To override the contents of this collection use [`set_gateways`](Self::set_gateways).
    ///
    /// <p>An array of <code>GatewayInfo</code> objects.</p>
    pub fn gateways(mut self, input: crate::types::GatewayInfo) -> Self {
        let mut v = self.gateways.unwrap_or_default();
        v.push(input);
        self.gateways = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of <code>GatewayInfo</code> objects.</p>
    pub fn set_gateways(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GatewayInfo>>) -> Self {
        self.gateways = input;
        self
    }
    /// <p>An array of <code>GatewayInfo</code> objects.</p>
    pub fn get_gateways(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GatewayInfo>> {
        &self.gateways
    }
    /// <p>Use the marker in your next request to fetch the next set of gateways in the list. If there are no more gateways to list, this field does not appear in the response.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Use the marker in your next request to fetch the next set of gateways in the list. If there are no more gateways to list, this field does not appear in the response.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Use the marker in your next request to fetch the next set of gateways in the list. If there are no more gateways to list, this field does not appear in the response.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListGatewaysOutput`](crate::operation::list_gateways::ListGatewaysOutput).
    pub fn build(self) -> crate::operation::list_gateways::ListGatewaysOutput {
        crate::operation::list_gateways::ListGatewaysOutput {
            gateways: self.gateways,
            marker: self.marker,
            _request_id: self._request_id,
        }
    }
}
