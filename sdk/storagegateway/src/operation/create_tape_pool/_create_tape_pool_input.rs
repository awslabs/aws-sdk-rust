// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateTapePoolInput {
    /// <p>The name of the new custom tape pool.</p>
    #[doc(hidden)]
    pub pool_name: std::option::Option<std::string::String>,
    /// <p>The storage class that is associated with the new custom pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    #[doc(hidden)]
    pub storage_class: std::option::Option<crate::types::TapeStorageClass>,
    /// <p>Tape retention lock can be configured in two modes. When configured in governance mode, Amazon Web Services accounts with specific IAM permissions are authorized to remove the tape retention lock from archived virtual tapes. When configured in compliance mode, the tape retention lock cannot be removed by any user, including the root Amazon Web Services account.</p>
    #[doc(hidden)]
    pub retention_lock_type: std::option::Option<crate::types::RetentionLockType>,
    /// <p>Tape retention lock time is set in days. Tape retention lock can be enabled for up to 100 years (36,500 days).</p>
    #[doc(hidden)]
    pub retention_lock_time_in_days: std::option::Option<i32>,
    /// <p>A list of up to 50 tags that can be assigned to tape pool. Each tag is a key-value pair.</p> <note>
    /// <p>Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256.</p>
    /// </note>
    #[doc(hidden)]
    pub tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateTapePoolInput {
    /// <p>The name of the new custom tape pool.</p>
    pub fn pool_name(&self) -> std::option::Option<&str> {
        self.pool_name.as_deref()
    }
    /// <p>The storage class that is associated with the new custom pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    pub fn storage_class(&self) -> std::option::Option<&crate::types::TapeStorageClass> {
        self.storage_class.as_ref()
    }
    /// <p>Tape retention lock can be configured in two modes. When configured in governance mode, Amazon Web Services accounts with specific IAM permissions are authorized to remove the tape retention lock from archived virtual tapes. When configured in compliance mode, the tape retention lock cannot be removed by any user, including the root Amazon Web Services account.</p>
    pub fn retention_lock_type(&self) -> std::option::Option<&crate::types::RetentionLockType> {
        self.retention_lock_type.as_ref()
    }
    /// <p>Tape retention lock time is set in days. Tape retention lock can be enabled for up to 100 years (36,500 days).</p>
    pub fn retention_lock_time_in_days(&self) -> std::option::Option<i32> {
        self.retention_lock_time_in_days
    }
    /// <p>A list of up to 50 tags that can be assigned to tape pool. Each tag is a key-value pair.</p> <note>
    /// <p>Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256.</p>
    /// </note>
    pub fn tags(&self) -> std::option::Option<&[crate::types::Tag]> {
        self.tags.as_deref()
    }
}
impl CreateTapePoolInput {
    /// Creates a new builder-style object to manufacture [`CreateTapePoolInput`](crate::operation::create_tape_pool::CreateTapePoolInput).
    pub fn builder() -> crate::operation::create_tape_pool::builders::CreateTapePoolInputBuilder {
        crate::operation::create_tape_pool::builders::CreateTapePoolInputBuilder::default()
    }
}

/// A builder for [`CreateTapePoolInput`](crate::operation::create_tape_pool::CreateTapePoolInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateTapePoolInputBuilder {
    pub(crate) pool_name: std::option::Option<std::string::String>,
    pub(crate) storage_class: std::option::Option<crate::types::TapeStorageClass>,
    pub(crate) retention_lock_type: std::option::Option<crate::types::RetentionLockType>,
    pub(crate) retention_lock_time_in_days: std::option::Option<i32>,
    pub(crate) tags: std::option::Option<std::vec::Vec<crate::types::Tag>>,
}
impl CreateTapePoolInputBuilder {
    /// <p>The name of the new custom tape pool.</p>
    pub fn pool_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.pool_name = Some(input.into());
        self
    }
    /// <p>The name of the new custom tape pool.</p>
    pub fn set_pool_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pool_name = input;
        self
    }
    /// <p>The storage class that is associated with the new custom pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    pub fn storage_class(mut self, input: crate::types::TapeStorageClass) -> Self {
        self.storage_class = Some(input);
        self
    }
    /// <p>The storage class that is associated with the new custom pool. When you use your backup application to eject the tape, the tape is archived directly into the storage class (S3 Glacier or S3 Glacier Deep Archive) that corresponds to the pool.</p>
    pub fn set_storage_class(
        mut self,
        input: std::option::Option<crate::types::TapeStorageClass>,
    ) -> Self {
        self.storage_class = input;
        self
    }
    /// <p>Tape retention lock can be configured in two modes. When configured in governance mode, Amazon Web Services accounts with specific IAM permissions are authorized to remove the tape retention lock from archived virtual tapes. When configured in compliance mode, the tape retention lock cannot be removed by any user, including the root Amazon Web Services account.</p>
    pub fn retention_lock_type(mut self, input: crate::types::RetentionLockType) -> Self {
        self.retention_lock_type = Some(input);
        self
    }
    /// <p>Tape retention lock can be configured in two modes. When configured in governance mode, Amazon Web Services accounts with specific IAM permissions are authorized to remove the tape retention lock from archived virtual tapes. When configured in compliance mode, the tape retention lock cannot be removed by any user, including the root Amazon Web Services account.</p>
    pub fn set_retention_lock_type(
        mut self,
        input: std::option::Option<crate::types::RetentionLockType>,
    ) -> Self {
        self.retention_lock_type = input;
        self
    }
    /// <p>Tape retention lock time is set in days. Tape retention lock can be enabled for up to 100 years (36,500 days).</p>
    pub fn retention_lock_time_in_days(mut self, input: i32) -> Self {
        self.retention_lock_time_in_days = Some(input);
        self
    }
    /// <p>Tape retention lock time is set in days. Tape retention lock can be enabled for up to 100 years (36,500 days).</p>
    pub fn set_retention_lock_time_in_days(mut self, input: std::option::Option<i32>) -> Self {
        self.retention_lock_time_in_days = input;
        self
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A list of up to 50 tags that can be assigned to tape pool. Each tag is a key-value pair.</p> <note>
    /// <p>Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256.</p>
    /// </note>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = Some(v);
        self
    }
    /// <p>A list of up to 50 tags that can be assigned to tape pool. Each tag is a key-value pair.</p> <note>
    /// <p>Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. The maximum length of a tag's key is 128 characters, and the maximum length for a tag's value is 256.</p>
    /// </note>
    pub fn set_tags(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::Tag>>,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateTapePoolInput`](crate::operation::create_tape_pool::CreateTapePoolInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_tape_pool::CreateTapePoolInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::create_tape_pool::CreateTapePoolInput {
            pool_name: self.pool_name,
            storage_class: self.storage_class,
            retention_lock_type: self.retention_lock_type,
            retention_lock_time_in_days: self.retention_lock_time_in_days,
            tags: self.tags,
        })
    }
}
