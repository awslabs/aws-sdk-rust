// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeTapeArchivesInput</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeTapeArchivesInput {
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    pub tape_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    pub marker: ::std::option::Option<::std::string::String>,
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    pub limit: ::std::option::Option<i32>,
}
impl DescribeTapeArchivesInput {
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tape_arns.is_none()`.
    pub fn tape_arns(&self) -> &[::std::string::String] {
        self.tape_arns.as_deref().unwrap_or_default()
    }
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    pub fn marker(&self) -> ::std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
}
impl DescribeTapeArchivesInput {
    /// Creates a new builder-style object to manufacture [`DescribeTapeArchivesInput`](crate::operation::describe_tape_archives::DescribeTapeArchivesInput).
    pub fn builder() -> crate::operation::describe_tape_archives::builders::DescribeTapeArchivesInputBuilder {
        crate::operation::describe_tape_archives::builders::DescribeTapeArchivesInputBuilder::default()
    }
}

/// A builder for [`DescribeTapeArchivesInput`](crate::operation::describe_tape_archives::DescribeTapeArchivesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeTapeArchivesInputBuilder {
    pub(crate) tape_arns: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) marker: ::std::option::Option<::std::string::String>,
    pub(crate) limit: ::std::option::Option<i32>,
}
impl DescribeTapeArchivesInputBuilder {
    /// Appends an item to `tape_arns`.
    ///
    /// To override the contents of this collection use [`set_tape_arns`](Self::set_tape_arns).
    ///
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    pub fn tape_arns(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.tape_arns.unwrap_or_default();
        v.push(input.into());
        self.tape_arns = ::std::option::Option::Some(v);
        self
    }
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    pub fn set_tape_arns(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.tape_arns = input;
        self
    }
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    pub fn get_tape_arns(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.tape_arns
    }
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    pub fn marker(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.marker = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    pub fn set_marker(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    pub fn get_marker(&self) -> &::std::option::Option<::std::string::String> {
        &self.marker
    }
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// Consumes the builder and constructs a [`DescribeTapeArchivesInput`](crate::operation::describe_tape_archives::DescribeTapeArchivesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::describe_tape_archives::DescribeTapeArchivesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::describe_tape_archives::DescribeTapeArchivesInput {
            tape_arns: self.tape_arns,
            marker: self.marker,
            limit: self.limit,
        })
    }
}
