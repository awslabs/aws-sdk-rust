// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DescribeTapeArchivesInput</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeTapeArchivesInput {
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    #[doc(hidden)]
    pub tape_ar_ns: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    #[doc(hidden)]
    pub marker: std::option::Option<std::string::String>,
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    #[doc(hidden)]
    pub limit: std::option::Option<i32>,
}
impl DescribeTapeArchivesInput {
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    pub fn tape_ar_ns(&self) -> std::option::Option<&[std::string::String]> {
        self.tape_ar_ns.as_deref()
    }
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    pub fn marker(&self) -> std::option::Option<&str> {
        self.marker.as_deref()
    }
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    pub fn limit(&self) -> std::option::Option<i32> {
        self.limit
    }
}
impl DescribeTapeArchivesInput {
    /// Creates a new builder-style object to manufacture [`DescribeTapeArchivesInput`](crate::operation::describe_tape_archives::DescribeTapeArchivesInput).
    pub fn builder(
    ) -> crate::operation::describe_tape_archives::builders::DescribeTapeArchivesInputBuilder {
        crate::operation::describe_tape_archives::builders::DescribeTapeArchivesInputBuilder::default()
    }
}

/// A builder for [`DescribeTapeArchivesInput`](crate::operation::describe_tape_archives::DescribeTapeArchivesInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeTapeArchivesInputBuilder {
    pub(crate) tape_ar_ns: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) marker: std::option::Option<std::string::String>,
    pub(crate) limit: std::option::Option<i32>,
}
impl DescribeTapeArchivesInputBuilder {
    /// Appends an item to `tape_ar_ns`.
    ///
    /// To override the contents of this collection use [`set_tape_ar_ns`](Self::set_tape_ar_ns).
    ///
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    pub fn tape_ar_ns(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.tape_ar_ns.unwrap_or_default();
        v.push(input.into());
        self.tape_ar_ns = Some(v);
        self
    }
    /// <p>Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.</p>
    pub fn set_tape_ar_ns(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.tape_ar_ns = input;
        self
    }
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    pub fn marker(mut self, input: impl Into<std::string::String>) -> Self {
        self.marker = Some(input.into());
        self
    }
    /// <p>An opaque string that indicates the position at which to begin describing virtual tapes.</p>
    pub fn set_marker(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.marker = input;
        self
    }
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    /// <p>Specifies that the number of virtual tapes described be limited to the specified number.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeTapeArchivesInput`](crate::operation::describe_tape_archives::DescribeTapeArchivesInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_tape_archives::DescribeTapeArchivesInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_tape_archives::DescribeTapeArchivesInput {
                tape_ar_ns: self.tape_ar_ns,
                marker: self.marker,
                limit: self.limit,
            },
        )
    }
}
