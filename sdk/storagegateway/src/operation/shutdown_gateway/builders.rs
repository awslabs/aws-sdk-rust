// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::shutdown_gateway::_shutdown_gateway_output::ShutdownGatewayOutputBuilder;

pub use crate::operation::shutdown_gateway::_shutdown_gateway_input::ShutdownGatewayInputBuilder;

/// Fluent builder constructing a request to `ShutdownGateway`.
///
/// <p>Shuts down a gateway. To specify which gateway to shut down, use the Amazon Resource Name (ARN) of the gateway in the body of your request.</p>
/// <p>The operation shuts down the gateway service component running in the gateway's virtual machine (VM) and not the host VM.</p> <note>
/// <p>If you want to shut down the VM, it is recommended that you first shut down the gateway component in the VM to avoid unpredictable conditions.</p>
/// </note>
/// <p>After the gateway is shutdown, you cannot call any other API except <code>StartGateway</code>, <code>DescribeGatewayInformation</code>, and <code>ListGateways</code>. For more information, see <code>ActivateGateway</code>. Your applications cannot read from or write to the gateway's storage volumes, and there are no snapshots taken.</p> <note>
/// <p>When you make a shutdown request, you will get a <code>200 OK</code> success response immediately. However, it might take some time for the gateway to shut down. You can call the <code>DescribeGatewayInformation</code> API to check the status. For more information, see <code>ActivateGateway</code>.</p>
/// </note>
/// <p>If do not intend to use the gateway again, you must delete the gateway (using <code>DeleteGateway</code>) to no longer pay software charges associated with the gateway.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ShutdownGatewayFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::shutdown_gateway::builders::ShutdownGatewayInputBuilder,
}
impl ShutdownGatewayFluentBuilder {
    /// Creates a new `ShutdownGateway`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::shutdown_gateway::ShutdownGateway,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::shutdown_gateway::ShutdownGatewayError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::shutdown_gateway::ShutdownGatewayOutput,
        aws_smithy_http::result::SdkError<crate::operation::shutdown_gateway::ShutdownGatewayError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn gateway_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.gateway_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the gateway. Use the <code>ListGateways</code> operation to return a list of gateways for your account and Amazon Web Services Region.</p>
    pub fn set_gateway_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_gateway_arn(input);
        self
    }
}
