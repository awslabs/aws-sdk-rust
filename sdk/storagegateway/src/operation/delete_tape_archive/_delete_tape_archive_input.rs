// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>DeleteTapeArchiveInput</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeleteTapeArchiveInput {
    /// <p>The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).</p>
    #[doc(hidden)]
    pub tape_arn: std::option::Option<std::string::String>,
    /// <p>Set to <code>TRUE</code> to delete an archived tape that belongs to a custom pool with tape retention lock. Only archived tapes with tape retention lock set to <code>governance</code> can be deleted. Archived tapes with tape retention lock set to <code>compliance</code> can't be deleted.</p>
    #[doc(hidden)]
    pub bypass_governance_retention: bool,
}
impl DeleteTapeArchiveInput {
    /// <p>The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).</p>
    pub fn tape_arn(&self) -> std::option::Option<&str> {
        self.tape_arn.as_deref()
    }
    /// <p>Set to <code>TRUE</code> to delete an archived tape that belongs to a custom pool with tape retention lock. Only archived tapes with tape retention lock set to <code>governance</code> can be deleted. Archived tapes with tape retention lock set to <code>compliance</code> can't be deleted.</p>
    pub fn bypass_governance_retention(&self) -> bool {
        self.bypass_governance_retention
    }
}
impl DeleteTapeArchiveInput {
    /// Creates a new builder-style object to manufacture [`DeleteTapeArchiveInput`](crate::operation::delete_tape_archive::DeleteTapeArchiveInput).
    pub fn builder(
    ) -> crate::operation::delete_tape_archive::builders::DeleteTapeArchiveInputBuilder {
        crate::operation::delete_tape_archive::builders::DeleteTapeArchiveInputBuilder::default()
    }
}

/// A builder for [`DeleteTapeArchiveInput`](crate::operation::delete_tape_archive::DeleteTapeArchiveInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeleteTapeArchiveInputBuilder {
    pub(crate) tape_arn: std::option::Option<std::string::String>,
    pub(crate) bypass_governance_retention: std::option::Option<bool>,
}
impl DeleteTapeArchiveInputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).</p>
    pub fn tape_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.tape_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).</p>
    pub fn set_tape_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.tape_arn = input;
        self
    }
    /// <p>Set to <code>TRUE</code> to delete an archived tape that belongs to a custom pool with tape retention lock. Only archived tapes with tape retention lock set to <code>governance</code> can be deleted. Archived tapes with tape retention lock set to <code>compliance</code> can't be deleted.</p>
    pub fn bypass_governance_retention(mut self, input: bool) -> Self {
        self.bypass_governance_retention = Some(input);
        self
    }
    /// <p>Set to <code>TRUE</code> to delete an archived tape that belongs to a custom pool with tape retention lock. Only archived tapes with tape retention lock set to <code>governance</code> can be deleted. Archived tapes with tape retention lock set to <code>compliance</code> can't be deleted.</p>
    pub fn set_bypass_governance_retention(mut self, input: std::option::Option<bool>) -> Self {
        self.bypass_governance_retention = input;
        self
    }
    /// Consumes the builder and constructs a [`DeleteTapeArchiveInput`](crate::operation::delete_tape_archive::DeleteTapeArchiveInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_tape_archive::DeleteTapeArchiveInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_tape_archive::DeleteTapeArchiveInput {
                tape_arn: self.tape_arn,
                bypass_governance_retention: self.bypass_governance_retention.unwrap_or_default(),
            },
        )
    }
}
