// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateSnapshotFromVolumeRecoveryPointOutput {
    /// <p>The ID of the snapshot.</p>
    #[doc(hidden)]
    pub snapshot_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return to retrieve the TargetARN for specified VolumeARN.</p>
    #[doc(hidden)]
    pub volume_arn: std::option::Option<std::string::String>,
    /// <p>The time the volume was created from the recovery point.</p>
    #[doc(hidden)]
    pub volume_recovery_point_time: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateSnapshotFromVolumeRecoveryPointOutput {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(&self) -> std::option::Option<&str> {
        self.snapshot_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return to retrieve the TargetARN for specified VolumeARN.</p>
    pub fn volume_arn(&self) -> std::option::Option<&str> {
        self.volume_arn.as_deref()
    }
    /// <p>The time the volume was created from the recovery point.</p>
    pub fn volume_recovery_point_time(&self) -> std::option::Option<&str> {
        self.volume_recovery_point_time.as_deref()
    }
}
impl aws_http::request_id::RequestId for CreateSnapshotFromVolumeRecoveryPointOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateSnapshotFromVolumeRecoveryPointOutput {
    /// Creates a new builder-style object to manufacture [`CreateSnapshotFromVolumeRecoveryPointOutput`](crate::operation::create_snapshot_from_volume_recovery_point::CreateSnapshotFromVolumeRecoveryPointOutput).
    pub fn builder() -> crate::operation::create_snapshot_from_volume_recovery_point::builders::CreateSnapshotFromVolumeRecoveryPointOutputBuilder{
        crate::operation::create_snapshot_from_volume_recovery_point::builders::CreateSnapshotFromVolumeRecoveryPointOutputBuilder::default()
    }
}

/// A builder for [`CreateSnapshotFromVolumeRecoveryPointOutput`](crate::operation::create_snapshot_from_volume_recovery_point::CreateSnapshotFromVolumeRecoveryPointOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateSnapshotFromVolumeRecoveryPointOutputBuilder {
    pub(crate) snapshot_id: std::option::Option<std::string::String>,
    pub(crate) volume_arn: std::option::Option<std::string::String>,
    pub(crate) volume_recovery_point_time: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl CreateSnapshotFromVolumeRecoveryPointOutputBuilder {
    /// <p>The ID of the snapshot.</p>
    pub fn snapshot_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.snapshot_id = Some(input.into());
        self
    }
    /// <p>The ID of the snapshot.</p>
    pub fn set_snapshot_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.snapshot_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return to retrieve the TargetARN for specified VolumeARN.</p>
    pub fn volume_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the iSCSI volume target. Use the <code>DescribeStorediSCSIVolumes</code> operation to return to retrieve the TargetARN for specified VolumeARN.</p>
    pub fn set_volume_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.volume_arn = input;
        self
    }
    /// <p>The time the volume was created from the recovery point.</p>
    pub fn volume_recovery_point_time(mut self, input: impl Into<std::string::String>) -> Self {
        self.volume_recovery_point_time = Some(input.into());
        self
    }
    /// <p>The time the volume was created from the recovery point.</p>
    pub fn set_volume_recovery_point_time(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.volume_recovery_point_time = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateSnapshotFromVolumeRecoveryPointOutput`](crate::operation::create_snapshot_from_volume_recovery_point::CreateSnapshotFromVolumeRecoveryPointOutput).
    pub fn build(self) -> crate::operation::create_snapshot_from_volume_recovery_point::CreateSnapshotFromVolumeRecoveryPointOutput{
        crate::operation::create_snapshot_from_volume_recovery_point::CreateSnapshotFromVolumeRecoveryPointOutput {
            snapshot_id: self.snapshot_id
            ,
            volume_arn: self.volume_arn
            ,
            volume_recovery_point_time: self.volume_recovery_point_time
            ,
            _request_id: self._request_id,
        }
    }
}
