// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_operation_crate_operation_put_raw_message_content(
    input: &crate::input::PutRawMessageContentInput,
) -> Result<smithy_http::body::SdkBody, smithy_types::Error> {
    let mut out = String::new();
    let mut object = smithy_json::serialize::JsonObjectWriter::new(&mut out);
    crate::json_ser::serialize_structure_crate_input_put_raw_message_content_input(
        &mut object,
        input,
    );
    object.finish();
    Ok(smithy_http::body::SdkBody::from(out))
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_raw_message_content(
    op_response: &mut smithy_http::operation::Response,
) -> std::result::Result<
    crate::output::GetRawMessageContentOutput,
    crate::error::GetRawMessageContentError,
> {
    let response = op_response.http_mut();
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::get_raw_message_content_output::Builder::default();
        let _ = response;
        output = output.set_message_content(
            Some(crate::http_serde::deser_payload_get_raw_message_content_get_raw_message_content_output_message_content(response.body_mut())?)
        );
        output.build()
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_get_raw_message_content_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::GetRawMessageContentOutput,
    crate::error::GetRawMessageContentError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::GetRawMessageContentError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::GetRawMessageContentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "ResourceNotFoundException" => crate::error::GetRawMessageContentError {
            meta: generic,
            kind: crate::error::GetRawMessageContentErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::GetRawMessageContentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::GetRawMessageContentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_raw_message_content_error(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PutRawMessageContentOutput,
    crate::error::PutRawMessageContentError,
> {
    let generic = crate::json_deser::parse_http_generic_error(response)
        .map_err(crate::error::PutRawMessageContentError::unhandled)?;
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::error::PutRawMessageContentError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "InvalidContentLocation" => crate::error::PutRawMessageContentError {
            meta: generic,
            kind: crate::error::PutRawMessageContentErrorKind::InvalidContentLocation({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::invalid_content_location::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_invalid_content_locationjson_err(response.body().as_ref(), output).map_err(crate::error::PutRawMessageContentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "MessageFrozen" => crate::error::PutRawMessageContentError {
            meta: generic,
            kind: crate::error::PutRawMessageContentErrorKind::MessageFrozen({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::message_frozen::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_message_frozenjson_err(
                        response.body().as_ref(),
                        output,
                    )
                    .map_err(crate::error::PutRawMessageContentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        "MessageRejected" => {
            crate::error::PutRawMessageContentError {
                meta: generic,
                kind: crate::error::PutRawMessageContentErrorKind::MessageRejected({
                    #[allow(unused_mut)]
                    let mut tmp = {
                        #[allow(unused_mut)]
                        let mut output = crate::error::message_rejected::Builder::default();
                        let _ = response;
                        output = crate::json_deser::deser_structure_crate_error_message_rejectedjson_err(response.body().as_ref(), output).map_err(crate::error::PutRawMessageContentError::unhandled)?;
                        output.build()
                    };
                    if (&tmp.message).is_none() {
                        tmp.message = _error_message;
                    }
                    tmp
                }),
            }
        }
        "ResourceNotFoundException" => crate::error::PutRawMessageContentError {
            meta: generic,
            kind: crate::error::PutRawMessageContentErrorKind::ResourceNotFoundException({
                #[allow(unused_mut)]
                let mut tmp = {
                    #[allow(unused_mut)]
                    let mut output = crate::error::resource_not_found_exception::Builder::default();
                    let _ = response;
                    output = crate::json_deser::deser_structure_crate_error_resource_not_found_exceptionjson_err(response.body().as_ref(), output).map_err(crate::error::PutRawMessageContentError::unhandled)?;
                    output.build()
                };
                if (&tmp.message).is_none() {
                    tmp.message = _error_message;
                }
                tmp
            }),
        },
        _ => crate::error::PutRawMessageContentError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn parse_put_raw_message_content_response(
    response: &http::Response<bytes::Bytes>,
) -> std::result::Result<
    crate::output::PutRawMessageContentOutput,
    crate::error::PutRawMessageContentError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::output::put_raw_message_content_output::Builder::default();
        let _ = response;
        output.build()
    })
}
