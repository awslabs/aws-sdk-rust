// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    InvalidContentLocation(crate::error::InvalidContentLocation),
    MessageFrozen(crate::error::MessageFrozen),
    MessageRejected(crate::error::MessageRejected),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InvalidContentLocation(inner) => inner.fmt(f),
            Error::MessageFrozen(inner) => inner.fmt(f),
            Error::MessageRejected(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetRawMessageContentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetRawMessageContentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetRawMessageContentErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetRawMessageContentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::PutRawMessageContentError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::PutRawMessageContentError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::PutRawMessageContentErrorKind::InvalidContentLocation(inner) => {
                    Error::InvalidContentLocation(inner)
                }
                crate::error::PutRawMessageContentErrorKind::MessageFrozen(inner) => {
                    Error::MessageFrozen(inner)
                }
                crate::error::PutRawMessageContentErrorKind::MessageRejected(inner) => {
                    Error::MessageRejected(inner)
                }
                crate::error::PutRawMessageContentErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::PutRawMessageContentErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
