// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>WorkMail could not access the updated email content. Possible reasons:</p>
    /// <ul>
    /// <li> <p>You made the request in a region other than your S3 bucket region.</p> </li>
    /// <li> <p>The <a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/bucket-owner-condition.html">S3 bucket owner</a> is not the same as the calling AWS account.</p> </li>
    /// <li> <p>You have an incomplete or missing S3 bucket policy. For more information about policies, see <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html"> Updating message content with AWS Lambda </a> in the <i>WorkMail Administrator Guide</i>.</p> </li>
    /// </ul>
    InvalidContentLocation(crate::types::error::InvalidContentLocation),
    /// <p>The requested email is not eligible for update. This is usually the case for a redirected email.</p>
    MessageFrozen(crate::types::error::MessageFrozen),
    /// <p>The requested email could not be updated due to an error in the MIME content. Check the error message for more information about what caused the error.</p>
    MessageRejected(crate::types::error::MessageRejected),
    /// <p>The requested email message is not found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::InvalidContentLocation(inner) => inner.fmt(f),
            Error::MessageFrozen(inner) => inner.fmt(f),
            Error::MessageRejected(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_raw_message_content::GetRawMessageContentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_raw_message_content::GetRawMessageContentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_raw_message_content::GetRawMessageContentError> for Error {
    fn from(err: crate::operation::get_raw_message_content::GetRawMessageContentError) -> Self {
        match err {
            crate::operation::get_raw_message_content::GetRawMessageContentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_raw_message_content::GetRawMessageContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_raw_message_content::PutRawMessageContentError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_raw_message_content::PutRawMessageContentError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_raw_message_content::PutRawMessageContentError> for Error {
    fn from(err: crate::operation::put_raw_message_content::PutRawMessageContentError) -> Self {
        match err {
            crate::operation::put_raw_message_content::PutRawMessageContentError::InvalidContentLocation(inner) => Error::InvalidContentLocation(inner),
            crate::operation::put_raw_message_content::PutRawMessageContentError::MessageFrozen(inner) => Error::MessageFrozen(inner),
            crate::operation::put_raw_message_content::PutRawMessageContentError::MessageRejected(inner) => Error::MessageRejected(inner),
            crate::operation::put_raw_message_content::PutRawMessageContentError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_raw_message_content::PutRawMessageContentError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::InvalidContentLocation(e) => e.request_id(),
            Self::MessageFrozen(e) => e.request_id(),
            Self::MessageRejected(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
