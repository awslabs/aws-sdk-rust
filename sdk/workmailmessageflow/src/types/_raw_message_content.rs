// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides the MIME content of the updated email message as an S3 object. All MIME content must meet the following criteria:</p>
/// <ul>
/// <li> <p>Each part of a multipart MIME message must be formatted properly.</p> </li>
/// <li> <p>Attachments must be of a content type that Amazon SES supports. For more information, see <a href="https://docs.aws.amazon.com/ses/latest/DeveloperGuide/mime-types-appendix.html">Unsupported Attachment Types</a>.</p> </li>
/// <li> <p>If any of the MIME parts in a message contain content that is outside of the 7-bit ASCII character range, we recommend encoding that content.</p> </li>
/// <li> <p>Per <a href="https://tools.ietf.org/html/rfc5321#section-4.5.3.1.6">RFC 5321</a>, the maximum length of each line of text, including the <crlf>
/// , must not exceed 1,000 characters.
/// </crlf></p> </li>
/// <li> <p>The message must contain all the required header fields. Check the returned error message for more information.</p> </li>
/// <li> <p>The value of immutable headers must remain unchanged. Check the returned error message for more information.</p> </li>
/// <li> <p>Certain unique headers can only appear once. Check the returned error message for more information.</p> </li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RawMessageContent {
    /// <p>The S3 reference of an email message.</p>
    pub s3_reference: ::std::option::Option<crate::types::S3Reference>,
}
impl RawMessageContent {
    /// <p>The S3 reference of an email message.</p>
    pub fn s3_reference(&self) -> ::std::option::Option<&crate::types::S3Reference> {
        self.s3_reference.as_ref()
    }
}
impl RawMessageContent {
    /// Creates a new builder-style object to manufacture [`RawMessageContent`](crate::types::RawMessageContent).
    pub fn builder() -> crate::types::builders::RawMessageContentBuilder {
        crate::types::builders::RawMessageContentBuilder::default()
    }
}

/// A builder for [`RawMessageContent`](crate::types::RawMessageContent).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RawMessageContentBuilder {
    pub(crate) s3_reference: ::std::option::Option<crate::types::S3Reference>,
}
impl RawMessageContentBuilder {
    /// <p>The S3 reference of an email message.</p>
    /// This field is required.
    pub fn s3_reference(mut self, input: crate::types::S3Reference) -> Self {
        self.s3_reference = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 reference of an email message.</p>
    pub fn set_s3_reference(mut self, input: ::std::option::Option<crate::types::S3Reference>) -> Self {
        self.s3_reference = input;
        self
    }
    /// <p>The S3 reference of an email message.</p>
    pub fn get_s3_reference(&self) -> &::std::option::Option<crate::types::S3Reference> {
        &self.s3_reference
    }
    /// Consumes the builder and constructs a [`RawMessageContent`](crate::types::RawMessageContent).
    pub fn build(self) -> crate::types::RawMessageContent {
        crate::types::RawMessageContent {
            s3_reference: self.s3_reference,
        }
    }
}
