// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Amazon S3 object representing the updated message content, in MIME format.</p> <note>
/// <p>The region for the S3 bucket containing the S3 object must match the region used for WorkMail operations. Also, for WorkMail to process an S3 object, it must have permission to access that object. For more information, see <a href="https://docs.aws.amazon.com/workmail/latest/adminguide/update-with-lambda.html"> Updating message content with AWS Lambda</a>.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3Reference {
    /// <p>The S3 bucket name.</p>
    #[doc(hidden)]
    pub bucket: std::option::Option<std::string::String>,
    /// <p>The S3 key object name.</p>
    #[doc(hidden)]
    pub key: std::option::Option<std::string::String>,
    /// <p>If you enable versioning for the bucket, you can specify the object version.</p>
    #[doc(hidden)]
    pub object_version: std::option::Option<std::string::String>,
}
impl S3Reference {
    /// <p>The S3 bucket name.</p>
    pub fn bucket(&self) -> std::option::Option<&str> {
        self.bucket.as_deref()
    }
    /// <p>The S3 key object name.</p>
    pub fn key(&self) -> std::option::Option<&str> {
        self.key.as_deref()
    }
    /// <p>If you enable versioning for the bucket, you can specify the object version.</p>
    pub fn object_version(&self) -> std::option::Option<&str> {
        self.object_version.as_deref()
    }
}
impl S3Reference {
    /// Creates a new builder-style object to manufacture [`S3Reference`](crate::types::S3Reference).
    pub fn builder() -> crate::types::builders::S3ReferenceBuilder {
        crate::types::builders::S3ReferenceBuilder::default()
    }
}

/// A builder for [`S3Reference`](crate::types::S3Reference).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3ReferenceBuilder {
    pub(crate) bucket: std::option::Option<std::string::String>,
    pub(crate) key: std::option::Option<std::string::String>,
    pub(crate) object_version: std::option::Option<std::string::String>,
}
impl S3ReferenceBuilder {
    /// <p>The S3 bucket name.</p>
    pub fn bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.bucket = Some(input.into());
        self
    }
    /// <p>The S3 bucket name.</p>
    pub fn set_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.bucket = input;
        self
    }
    /// <p>The S3 key object name.</p>
    pub fn key(mut self, input: impl Into<std::string::String>) -> Self {
        self.key = Some(input.into());
        self
    }
    /// <p>The S3 key object name.</p>
    pub fn set_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.key = input;
        self
    }
    /// <p>If you enable versioning for the bucket, you can specify the object version.</p>
    pub fn object_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.object_version = Some(input.into());
        self
    }
    /// <p>If you enable versioning for the bucket, you can specify the object version.</p>
    pub fn set_object_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.object_version = input;
        self
    }
    /// Consumes the builder and constructs a [`S3Reference`](crate::types::S3Reference).
    pub fn build(self) -> crate::types::S3Reference {
        crate::types::S3Reference {
            bucket: self.bucket,
            key: self.key,
            object_version: self.object_version,
        }
    }
}
