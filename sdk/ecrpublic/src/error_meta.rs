// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The specified layer upload doesn't contain any layer parts.</p>
    EmptyUploadException(crate::error::EmptyUploadException),
    /// <p>The specified image has already been pushed, and there were no changes to the manifest or image tag after the last push.</p>
    ImageAlreadyExistsException(crate::error::ImageAlreadyExistsException),
    /// <p>The specified image digest doesn't match the digest that Amazon ECR calculated for the image.</p>
    ImageDigestDoesNotMatchException(crate::error::ImageDigestDoesNotMatchException),
    /// <p>The image requested doesn't exist in the specified repository.</p>
    ImageNotFoundException(crate::error::ImageNotFoundException),
    /// <p>The specified image is tagged with a tag that already exists. The repository is configured for tag immutability.</p>
    ImageTagAlreadyExistsException(crate::error::ImageTagAlreadyExistsException),
    /// <p>The layer digest calculation performed by Amazon ECR when the image layer doesn't match the digest specified.</p>
    InvalidLayerException(crate::error::InvalidLayerException),
    /// <p>The layer part size isn't valid, or the first byte specified isn't consecutive to the last byte of a previous layer part upload.</p>
    InvalidLayerPartException(crate::error::InvalidLayerPartException),
    /// <p>The specified parameter is invalid. Review the available parameters for the API request.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>An invalid parameter has been specified. Tag keys can have a maximum character length of 128 characters, and tag values can have a maximum length of 256 characters.</p>
    InvalidTagParameterException(crate::error::InvalidTagParameterException),
    /// <p>The image layer already exists in the associated repository.</p>
    LayerAlreadyExistsException(crate::error::LayerAlreadyExistsException),
    /// <p>Layer parts must be at least 5 MiB in size.</p>
    LayerPartTooSmallException(crate::error::LayerPartTooSmallException),
    /// <p>The specified layers can't be found, or the specified layer isn't valid for this repository.</p>
    LayersNotFoundException(crate::error::LayersNotFoundException),
    /// <p>The operation didn't succeed because it would have exceeded a service limit for your account. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/service-quotas.html">Amazon ECR Service Quotas</a> in the Amazon Elastic Container Registry User Guide.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The manifest list is referencing an image that doesn't exist.</p>
    ReferencedImagesNotFoundException(crate::error::ReferencedImagesNotFoundException),
    /// <p>The registry doesn't exist.</p>
    RegistryNotFoundException(crate::error::RegistryNotFoundException),
    /// <p>The specified repository already exists in the specified registry.</p>
    RepositoryAlreadyExistsException(crate::error::RepositoryAlreadyExistsException),
    /// <p>The repository catalog data doesn't exist.</p>
    RepositoryCatalogDataNotFoundException(crate::error::RepositoryCatalogDataNotFoundException),
    /// <p>The specified repository contains images. To delete a repository that contains images, you must force the deletion with the <code>force</code> parameter.</p>
    RepositoryNotEmptyException(crate::error::RepositoryNotEmptyException),
    /// <p>The specified repository can't be found. Check the spelling of the specified repository and ensure that you're performing operations on the correct registry.</p>
    RepositoryNotFoundException(crate::error::RepositoryNotFoundException),
    /// <p>The specified repository and registry combination doesn't have an associated repository policy.</p>
    RepositoryPolicyNotFoundException(crate::error::RepositoryPolicyNotFoundException),
    /// <p>These errors are usually caused by a server-side issue.</p>
    ServerException(crate::error::ServerException),
    /// <p>The list of tags on the repository is over the limit. The maximum number of tags that can be applied to a repository is 50.</p>
    TooManyTagsException(crate::error::TooManyTagsException),
    /// <p>The action isn't supported in this Region.</p>
    UnsupportedCommandException(crate::error::UnsupportedCommandException),
    /// <p>The upload can't be found, or the specified upload ID isn't valid for this repository.</p>
    UploadNotFoundException(crate::error::UploadNotFoundException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::EmptyUploadException(inner) => inner.fmt(f),
            Error::ImageAlreadyExistsException(inner) => inner.fmt(f),
            Error::ImageDigestDoesNotMatchException(inner) => inner.fmt(f),
            Error::ImageNotFoundException(inner) => inner.fmt(f),
            Error::ImageTagAlreadyExistsException(inner) => inner.fmt(f),
            Error::InvalidLayerException(inner) => inner.fmt(f),
            Error::InvalidLayerPartException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidTagParameterException(inner) => inner.fmt(f),
            Error::LayerAlreadyExistsException(inner) => inner.fmt(f),
            Error::LayerPartTooSmallException(inner) => inner.fmt(f),
            Error::LayersNotFoundException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ReferencedImagesNotFoundException(inner) => inner.fmt(f),
            Error::RegistryNotFoundException(inner) => inner.fmt(f),
            Error::RepositoryAlreadyExistsException(inner) => inner.fmt(f),
            Error::RepositoryCatalogDataNotFoundException(inner) => inner.fmt(f),
            Error::RepositoryNotEmptyException(inner) => inner.fmt(f),
            Error::RepositoryNotFoundException(inner) => inner.fmt(f),
            Error::RepositoryPolicyNotFoundException(inner) => inner.fmt(f),
            Error::ServerException(inner) => inner.fmt(f),
            Error::TooManyTagsException(inner) => inner.fmt(f),
            Error::UnsupportedCommandException(inner) => inner.fmt(f),
            Error::UploadNotFoundException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchCheckLayerAvailabilityError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchCheckLayerAvailabilityError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchCheckLayerAvailabilityError> for Error {
    fn from(err: crate::error::BatchCheckLayerAvailabilityError) -> Self {
        match err {
            crate::error::BatchCheckLayerAvailabilityError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::BatchCheckLayerAvailabilityError::RegistryNotFoundException(inner) => {
                Error::RegistryNotFoundException(inner)
            }
            crate::error::BatchCheckLayerAvailabilityError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::BatchCheckLayerAvailabilityError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::BatchCheckLayerAvailabilityError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::BatchCheckLayerAvailabilityError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteImageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDeleteImageError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeleteImageError> for Error {
    fn from(err: crate::error::BatchDeleteImageError) -> Self {
        match err {
            crate::error::BatchDeleteImageError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::BatchDeleteImageError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::BatchDeleteImageError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::BatchDeleteImageError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::BatchDeleteImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CompleteLayerUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CompleteLayerUploadError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CompleteLayerUploadError> for Error {
    fn from(err: crate::error::CompleteLayerUploadError) -> Self {
        match err {
            crate::error::CompleteLayerUploadError::EmptyUploadException(inner) => {
                Error::EmptyUploadException(inner)
            }
            crate::error::CompleteLayerUploadError::InvalidLayerException(inner) => {
                Error::InvalidLayerException(inner)
            }
            crate::error::CompleteLayerUploadError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CompleteLayerUploadError::LayerAlreadyExistsException(inner) => {
                Error::LayerAlreadyExistsException(inner)
            }
            crate::error::CompleteLayerUploadError::LayerPartTooSmallException(inner) => {
                Error::LayerPartTooSmallException(inner)
            }
            crate::error::CompleteLayerUploadError::RegistryNotFoundException(inner) => {
                Error::RegistryNotFoundException(inner)
            }
            crate::error::CompleteLayerUploadError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::CompleteLayerUploadError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::CompleteLayerUploadError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::CompleteLayerUploadError::UploadNotFoundException(inner) => {
                Error::UploadNotFoundException(inner)
            }
            crate::error::CompleteLayerUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRepositoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRepositoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRepositoryError> for Error {
    fn from(err: crate::error::CreateRepositoryError) -> Self {
        match err {
            crate::error::CreateRepositoryError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateRepositoryError::InvalidTagParameterException(inner) => {
                Error::InvalidTagParameterException(inner)
            }
            crate::error::CreateRepositoryError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRepositoryError::RepositoryAlreadyExistsException(inner) => {
                Error::RepositoryAlreadyExistsException(inner)
            }
            crate::error::CreateRepositoryError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::CreateRepositoryError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::CreateRepositoryError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::CreateRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRepositoryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRepositoryError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRepositoryError> for Error {
    fn from(err: crate::error::DeleteRepositoryError) -> Self {
        match err {
            crate::error::DeleteRepositoryError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteRepositoryError::RepositoryNotEmptyException(inner) => {
                Error::RepositoryNotEmptyException(inner)
            }
            crate::error::DeleteRepositoryError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::DeleteRepositoryError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeleteRepositoryError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::DeleteRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRepositoryPolicyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRepositoryPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRepositoryPolicyError> for Error {
    fn from(err: crate::error::DeleteRepositoryPolicyError) -> Self {
        match err {
            crate::error::DeleteRepositoryPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteRepositoryPolicyError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::DeleteRepositoryPolicyError::RepositoryPolicyNotFoundException(inner) => {
                Error::RepositoryPolicyNotFoundException(inner)
            }
            crate::error::DeleteRepositoryPolicyError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DeleteRepositoryPolicyError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::DeleteRepositoryPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeImagesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeImagesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeImagesError> for Error {
    fn from(err: crate::error::DescribeImagesError) -> Self {
        match err {
            crate::error::DescribeImagesError::ImageNotFoundException(inner) => {
                Error::ImageNotFoundException(inner)
            }
            crate::error::DescribeImagesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeImagesError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::DescribeImagesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeImagesError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::DescribeImagesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeImageTagsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeImageTagsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeImageTagsError> for Error {
    fn from(err: crate::error::DescribeImageTagsError) -> Self {
        match err {
            crate::error::DescribeImageTagsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeImageTagsError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::DescribeImageTagsError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeImageTagsError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::DescribeImageTagsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRegistriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRegistriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRegistriesError> for Error {
    fn from(err: crate::error::DescribeRegistriesError) -> Self {
        match err {
            crate::error::DescribeRegistriesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeRegistriesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeRegistriesError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::DescribeRegistriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRepositoriesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRepositoriesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRepositoriesError> for Error {
    fn from(err: crate::error::DescribeRepositoriesError) -> Self {
        match err {
            crate::error::DescribeRepositoriesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeRepositoriesError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::DescribeRepositoriesError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::DescribeRepositoriesError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::DescribeRepositoriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetAuthorizationTokenError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetAuthorizationTokenError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetAuthorizationTokenError> for Error {
    fn from(err: crate::error::GetAuthorizationTokenError) -> Self {
        match err {
            crate::error::GetAuthorizationTokenError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetAuthorizationTokenError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::GetAuthorizationTokenError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::GetAuthorizationTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRegistryCatalogDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRegistryCatalogDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRegistryCatalogDataError> for Error {
    fn from(err: crate::error::GetRegistryCatalogDataError) -> Self {
        match err {
            crate::error::GetRegistryCatalogDataError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::GetRegistryCatalogDataError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::GetRegistryCatalogDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRepositoryCatalogDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRepositoryCatalogDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRepositoryCatalogDataError> for Error {
    fn from(err: crate::error::GetRepositoryCatalogDataError) -> Self {
        match err {
            crate::error::GetRepositoryCatalogDataError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetRepositoryCatalogDataError::RepositoryCatalogDataNotFoundException(
                inner,
            ) => Error::RepositoryCatalogDataNotFoundException(inner),
            crate::error::GetRepositoryCatalogDataError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::GetRepositoryCatalogDataError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::GetRepositoryCatalogDataError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::GetRepositoryCatalogDataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetRepositoryPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetRepositoryPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetRepositoryPolicyError> for Error {
    fn from(err: crate::error::GetRepositoryPolicyError) -> Self {
        match err {
            crate::error::GetRepositoryPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetRepositoryPolicyError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::GetRepositoryPolicyError::RepositoryPolicyNotFoundException(inner) => {
                Error::RepositoryPolicyNotFoundException(inner)
            }
            crate::error::GetRepositoryPolicyError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::GetRepositoryPolicyError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::GetRepositoryPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InitiateLayerUploadError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::InitiateLayerUploadError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InitiateLayerUploadError> for Error {
    fn from(err: crate::error::InitiateLayerUploadError) -> Self {
        match err {
            crate::error::InitiateLayerUploadError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::InitiateLayerUploadError::RegistryNotFoundException(inner) => {
                Error::RegistryNotFoundException(inner)
            }
            crate::error::InitiateLayerUploadError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::InitiateLayerUploadError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::InitiateLayerUploadError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::InitiateLayerUploadError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::ListTagsForResourceError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutImageError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::PutImageError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutImageError> for Error {
    fn from(err: crate::error::PutImageError) -> Self {
        match err {
            crate::error::PutImageError::ImageAlreadyExistsException(inner) => {
                Error::ImageAlreadyExistsException(inner)
            }
            crate::error::PutImageError::ImageDigestDoesNotMatchException(inner) => {
                Error::ImageDigestDoesNotMatchException(inner)
            }
            crate::error::PutImageError::ImageTagAlreadyExistsException(inner) => {
                Error::ImageTagAlreadyExistsException(inner)
            }
            crate::error::PutImageError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutImageError::LayersNotFoundException(inner) => {
                Error::LayersNotFoundException(inner)
            }
            crate::error::PutImageError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::PutImageError::ReferencedImagesNotFoundException(inner) => {
                Error::ReferencedImagesNotFoundException(inner)
            }
            crate::error::PutImageError::RegistryNotFoundException(inner) => {
                Error::RegistryNotFoundException(inner)
            }
            crate::error::PutImageError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::PutImageError::ServerException(inner) => Error::ServerException(inner),
            crate::error::PutImageError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::PutImageError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRegistryCatalogDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutRegistryCatalogDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRegistryCatalogDataError> for Error {
    fn from(err: crate::error::PutRegistryCatalogDataError) -> Self {
        match err {
            crate::error::PutRegistryCatalogDataError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutRegistryCatalogDataError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::PutRegistryCatalogDataError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::PutRegistryCatalogDataError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::PutRepositoryCatalogDataError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::PutRepositoryCatalogDataError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::PutRepositoryCatalogDataError> for Error {
    fn from(err: crate::error::PutRepositoryCatalogDataError) -> Self {
        match err {
            crate::error::PutRepositoryCatalogDataError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::PutRepositoryCatalogDataError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::PutRepositoryCatalogDataError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::PutRepositoryCatalogDataError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::PutRepositoryCatalogDataError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetRepositoryPolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetRepositoryPolicyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetRepositoryPolicyError> for Error {
    fn from(err: crate::error::SetRepositoryPolicyError) -> Self {
        match err {
            crate::error::SetRepositoryPolicyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SetRepositoryPolicyError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::SetRepositoryPolicyError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::SetRepositoryPolicyError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::SetRepositoryPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TagResourceError::InvalidTagParameterException(inner) => {
                Error::InvalidTagParameterException(inner)
            }
            crate::error::TagResourceError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::TagResourceError::ServerException(inner) => Error::ServerException(inner),
            crate::error::TagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::TagResourceError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UntagResourceError::InvalidTagParameterException(inner) => {
                Error::InvalidTagParameterException(inner)
            }
            crate::error::UntagResourceError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::UntagResourceError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UntagResourceError::TooManyTagsException(inner) => {
                Error::TooManyTagsException(inner)
            }
            crate::error::UntagResourceError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UploadLayerPartError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UploadLayerPartError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UploadLayerPartError> for Error {
    fn from(err: crate::error::UploadLayerPartError) -> Self {
        match err {
            crate::error::UploadLayerPartError::InvalidLayerPartException(inner) => {
                Error::InvalidLayerPartException(inner)
            }
            crate::error::UploadLayerPartError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UploadLayerPartError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UploadLayerPartError::RegistryNotFoundException(inner) => {
                Error::RegistryNotFoundException(inner)
            }
            crate::error::UploadLayerPartError::RepositoryNotFoundException(inner) => {
                Error::RepositoryNotFoundException(inner)
            }
            crate::error::UploadLayerPartError::ServerException(inner) => {
                Error::ServerException(inner)
            }
            crate::error::UploadLayerPartError::UnsupportedCommandException(inner) => {
                Error::UnsupportedCommandException(inner)
            }
            crate::error::UploadLayerPartError::UploadNotFoundException(inner) => {
                Error::UploadNotFoundException(inner)
            }
            crate::error::UploadLayerPartError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::EmptyUploadException(e) => e.request_id(),
            Self::ImageAlreadyExistsException(e) => e.request_id(),
            Self::ImageDigestDoesNotMatchException(e) => e.request_id(),
            Self::ImageNotFoundException(e) => e.request_id(),
            Self::ImageTagAlreadyExistsException(e) => e.request_id(),
            Self::InvalidLayerException(e) => e.request_id(),
            Self::InvalidLayerPartException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidTagParameterException(e) => e.request_id(),
            Self::LayerAlreadyExistsException(e) => e.request_id(),
            Self::LayerPartTooSmallException(e) => e.request_id(),
            Self::LayersNotFoundException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ReferencedImagesNotFoundException(e) => e.request_id(),
            Self::RegistryNotFoundException(e) => e.request_id(),
            Self::RepositoryAlreadyExistsException(e) => e.request_id(),
            Self::RepositoryCatalogDataNotFoundException(e) => e.request_id(),
            Self::RepositoryNotEmptyException(e) => e.request_id(),
            Self::RepositoryNotFoundException(e) => e.request_id(),
            Self::RepositoryPolicyNotFoundException(e) => e.request_id(),
            Self::ServerException(e) => e.request_id(),
            Self::TooManyTagsException(e) => e.request_id(),
            Self::UnsupportedCommandException(e) => e.request_id(),
            Self::UploadNotFoundException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
