// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`PutRepositoryCatalogData`](crate::client::fluent_builders::PutRepositoryCatalogData) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`registry_id(impl Into<String>)`](crate::client::fluent_builders::PutRepositoryCatalogData::registry_id) / [`set_registry_id(Option<String>)`](crate::client::fluent_builders::PutRepositoryCatalogData::set_registry_id): <p>The Amazon Web Services account ID that's associated with the public registry the repository is in. If you do not specify a registry, the default public registry is assumed.</p>
    ///   - [`repository_name(impl Into<String>)`](crate::client::fluent_builders::PutRepositoryCatalogData::repository_name) / [`set_repository_name(Option<String>)`](crate::client::fluent_builders::PutRepositoryCatalogData::set_repository_name): <p>The name of the repository to create or update the catalog data for.</p>
    ///   - [`catalog_data(RepositoryCatalogDataInput)`](crate::client::fluent_builders::PutRepositoryCatalogData::catalog_data) / [`set_catalog_data(Option<RepositoryCatalogDataInput>)`](crate::client::fluent_builders::PutRepositoryCatalogData::set_catalog_data): <p>An object containing the catalog data for a repository. This data is publicly visible in the Amazon ECR Public Gallery.</p>
    /// - On success, responds with [`PutRepositoryCatalogDataOutput`](crate::output::PutRepositoryCatalogDataOutput) with field(s):
    ///   - [`catalog_data(Option<RepositoryCatalogData>)`](crate::output::PutRepositoryCatalogDataOutput::catalog_data): <p>The catalog data for the repository.</p>
    /// - On failure, responds with [`SdkError<PutRepositoryCatalogDataError>`](crate::error::PutRepositoryCatalogDataError)
    pub fn put_repository_catalog_data(
        &self,
    ) -> crate::client::fluent_builders::PutRepositoryCatalogData {
        crate::client::fluent_builders::PutRepositoryCatalogData::new(self.handle.clone())
    }
}
