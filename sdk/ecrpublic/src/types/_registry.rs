// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The details of a public registry.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Registry {
    /// <p>The Amazon Web Services account ID that's associated with the registry. If you do not specify a registry, the default public registry is assumed.</p>
    #[doc(hidden)]
    pub registry_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the public registry.</p>
    #[doc(hidden)]
    pub registry_arn: std::option::Option<std::string::String>,
    /// <p>The URI of a public registry. The URI contains a universal prefix and the registry alias.</p>
    #[doc(hidden)]
    pub registry_uri: std::option::Option<std::string::String>,
    /// <p>Indicates whether the account is a verified Amazon Web Services Marketplace vendor. If an account is verified, each public repository receives a verified account badge on the Amazon ECR Public Gallery.</p>
    #[doc(hidden)]
    pub verified: std::option::Option<bool>,
    /// <p>An array of objects that represents the aliases for a public registry.</p>
    #[doc(hidden)]
    pub aliases: std::option::Option<std::vec::Vec<crate::types::RegistryAlias>>,
}
impl Registry {
    /// <p>The Amazon Web Services account ID that's associated with the registry. If you do not specify a registry, the default public registry is assumed.</p>
    pub fn registry_id(&self) -> std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the public registry.</p>
    pub fn registry_arn(&self) -> std::option::Option<&str> {
        self.registry_arn.as_deref()
    }
    /// <p>The URI of a public registry. The URI contains a universal prefix and the registry alias.</p>
    pub fn registry_uri(&self) -> std::option::Option<&str> {
        self.registry_uri.as_deref()
    }
    /// <p>Indicates whether the account is a verified Amazon Web Services Marketplace vendor. If an account is verified, each public repository receives a verified account badge on the Amazon ECR Public Gallery.</p>
    pub fn verified(&self) -> std::option::Option<bool> {
        self.verified
    }
    /// <p>An array of objects that represents the aliases for a public registry.</p>
    pub fn aliases(&self) -> std::option::Option<&[crate::types::RegistryAlias]> {
        self.aliases.as_deref()
    }
}
impl Registry {
    /// Creates a new builder-style object to manufacture [`Registry`](crate::types::Registry).
    pub fn builder() -> crate::types::builders::RegistryBuilder {
        crate::types::builders::RegistryBuilder::default()
    }
}

/// A builder for [`Registry`](crate::types::Registry).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegistryBuilder {
    pub(crate) registry_id: std::option::Option<std::string::String>,
    pub(crate) registry_arn: std::option::Option<std::string::String>,
    pub(crate) registry_uri: std::option::Option<std::string::String>,
    pub(crate) verified: std::option::Option<bool>,
    pub(crate) aliases: std::option::Option<std::vec::Vec<crate::types::RegistryAlias>>,
}
impl RegistryBuilder {
    /// <p>The Amazon Web Services account ID that's associated with the registry. If you do not specify a registry, the default public registry is assumed.</p>
    pub fn registry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that's associated with the registry. If you do not specify a registry, the default public registry is assumed.</p>
    pub fn set_registry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the public registry.</p>
    pub fn registry_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the public registry.</p>
    pub fn set_registry_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_arn = input;
        self
    }
    /// <p>The URI of a public registry. The URI contains a universal prefix and the registry alias.</p>
    pub fn registry_uri(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_uri = Some(input.into());
        self
    }
    /// <p>The URI of a public registry. The URI contains a universal prefix and the registry alias.</p>
    pub fn set_registry_uri(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_uri = input;
        self
    }
    /// <p>Indicates whether the account is a verified Amazon Web Services Marketplace vendor. If an account is verified, each public repository receives a verified account badge on the Amazon ECR Public Gallery.</p>
    pub fn verified(mut self, input: bool) -> Self {
        self.verified = Some(input);
        self
    }
    /// <p>Indicates whether the account is a verified Amazon Web Services Marketplace vendor. If an account is verified, each public repository receives a verified account badge on the Amazon ECR Public Gallery.</p>
    pub fn set_verified(mut self, input: std::option::Option<bool>) -> Self {
        self.verified = input;
        self
    }
    /// Appends an item to `aliases`.
    ///
    /// To override the contents of this collection use [`set_aliases`](Self::set_aliases).
    ///
    /// <p>An array of objects that represents the aliases for a public registry.</p>
    pub fn aliases(mut self, input: crate::types::RegistryAlias) -> Self {
        let mut v = self.aliases.unwrap_or_default();
        v.push(input);
        self.aliases = Some(v);
        self
    }
    /// <p>An array of objects that represents the aliases for a public registry.</p>
    pub fn set_aliases(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RegistryAlias>>,
    ) -> Self {
        self.aliases = input;
        self
    }
    /// Consumes the builder and constructs a [`Registry`](crate::types::Registry).
    pub fn build(self) -> crate::types::Registry {
        crate::types::Registry {
            registry_id: self.registry_id,
            registry_arn: self.registry_arn,
            registry_uri: self.registry_uri,
            verified: self.verified,
            aliases: self.aliases,
        }
    }
}
