// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing the aliases for a public registry. A public registry is given an alias when it's created. However, a custom alias can be set using the Amazon ECR console. For more information, see <a href="https://docs.aws.amazon.com/AmazonECR/latest/userguide/Registries.html">Registries</a> in the <i>Amazon Elastic Container Registry User Guide</i>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct RegistryAlias {
    /// <p>The name of the registry alias.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The status of the registry alias.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::RegistryAliasStatus>,
    /// <p>Indicates whether the registry alias is the primary alias for the registry. If true, the alias is the primary registry alias and is displayed in both the repository URL and the image URI used in the <code>docker pull</code> commands on the Amazon ECR Public Gallery.</p> <note>
    /// <p>A registry alias that isn't the primary registry alias can be used in the repository URI in a <code>docker pull</code> command.</p>
    /// </note>
    #[doc(hidden)]
    pub primary_registry_alias: bool,
    /// <p>Indicates whether the registry alias is the default alias for the registry. When the first public repository is created, your public registry is assigned a default registry alias.</p>
    #[doc(hidden)]
    pub default_registry_alias: bool,
}
impl RegistryAlias {
    /// <p>The name of the registry alias.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The status of the registry alias.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::RegistryAliasStatus> {
        self.status.as_ref()
    }
    /// <p>Indicates whether the registry alias is the primary alias for the registry. If true, the alias is the primary registry alias and is displayed in both the repository URL and the image URI used in the <code>docker pull</code> commands on the Amazon ECR Public Gallery.</p> <note>
    /// <p>A registry alias that isn't the primary registry alias can be used in the repository URI in a <code>docker pull</code> command.</p>
    /// </note>
    pub fn primary_registry_alias(&self) -> bool {
        self.primary_registry_alias
    }
    /// <p>Indicates whether the registry alias is the default alias for the registry. When the first public repository is created, your public registry is assigned a default registry alias.</p>
    pub fn default_registry_alias(&self) -> bool {
        self.default_registry_alias
    }
}
impl RegistryAlias {
    /// Creates a new builder-style object to manufacture [`RegistryAlias`](crate::types::RegistryAlias).
    pub fn builder() -> crate::types::builders::RegistryAliasBuilder {
        crate::types::builders::RegistryAliasBuilder::default()
    }
}

/// A builder for [`RegistryAlias`](crate::types::RegistryAlias).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct RegistryAliasBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::RegistryAliasStatus>,
    pub(crate) primary_registry_alias: std::option::Option<bool>,
    pub(crate) default_registry_alias: std::option::Option<bool>,
}
impl RegistryAliasBuilder {
    /// <p>The name of the registry alias.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the registry alias.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The status of the registry alias.</p>
    pub fn status(mut self, input: crate::types::RegistryAliasStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the registry alias.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::RegistryAliasStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>Indicates whether the registry alias is the primary alias for the registry. If true, the alias is the primary registry alias and is displayed in both the repository URL and the image URI used in the <code>docker pull</code> commands on the Amazon ECR Public Gallery.</p> <note>
    /// <p>A registry alias that isn't the primary registry alias can be used in the repository URI in a <code>docker pull</code> command.</p>
    /// </note>
    pub fn primary_registry_alias(mut self, input: bool) -> Self {
        self.primary_registry_alias = Some(input);
        self
    }
    /// <p>Indicates whether the registry alias is the primary alias for the registry. If true, the alias is the primary registry alias and is displayed in both the repository URL and the image URI used in the <code>docker pull</code> commands on the Amazon ECR Public Gallery.</p> <note>
    /// <p>A registry alias that isn't the primary registry alias can be used in the repository URI in a <code>docker pull</code> command.</p>
    /// </note>
    pub fn set_primary_registry_alias(mut self, input: std::option::Option<bool>) -> Self {
        self.primary_registry_alias = input;
        self
    }
    /// <p>Indicates whether the registry alias is the default alias for the registry. When the first public repository is created, your public registry is assigned a default registry alias.</p>
    pub fn default_registry_alias(mut self, input: bool) -> Self {
        self.default_registry_alias = Some(input);
        self
    }
    /// <p>Indicates whether the registry alias is the default alias for the registry. When the first public repository is created, your public registry is assigned a default registry alias.</p>
    pub fn set_default_registry_alias(mut self, input: std::option::Option<bool>) -> Self {
        self.default_registry_alias = input;
        self
    }
    /// Consumes the builder and constructs a [`RegistryAlias`](crate::types::RegistryAlias).
    pub fn build(self) -> crate::types::RegistryAlias {
        crate::types::RegistryAlias {
            name: self.name,
            status: self.status,
            primary_registry_alias: self.primary_registry_alias.unwrap_or_default(),
            default_registry_alias: self.default_registry_alias.unwrap_or_default(),
        }
    }
}
