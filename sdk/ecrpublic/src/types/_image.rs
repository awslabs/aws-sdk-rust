// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that represents an Amazon ECR image.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct Image {
    /// <p>The Amazon Web Services account ID that's associated with the registry containing the image.</p>
    #[doc(hidden)]
    pub registry_id: std::option::Option<std::string::String>,
    /// <p>The name of the repository that's associated with the image.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
    /// <p>An object that contains the image tag and image digest associated with an image.</p>
    #[doc(hidden)]
    pub image_id: std::option::Option<crate::types::ImageIdentifier>,
    /// <p>The image manifest that's associated with the image.</p>
    #[doc(hidden)]
    pub image_manifest: std::option::Option<std::string::String>,
    /// <p>The manifest media type of the image.</p>
    #[doc(hidden)]
    pub image_manifest_media_type: std::option::Option<std::string::String>,
}
impl Image {
    /// <p>The Amazon Web Services account ID that's associated with the registry containing the image.</p>
    pub fn registry_id(&self) -> std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The name of the repository that's associated with the image.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>An object that contains the image tag and image digest associated with an image.</p>
    pub fn image_id(&self) -> std::option::Option<&crate::types::ImageIdentifier> {
        self.image_id.as_ref()
    }
    /// <p>The image manifest that's associated with the image.</p>
    pub fn image_manifest(&self) -> std::option::Option<&str> {
        self.image_manifest.as_deref()
    }
    /// <p>The manifest media type of the image.</p>
    pub fn image_manifest_media_type(&self) -> std::option::Option<&str> {
        self.image_manifest_media_type.as_deref()
    }
}
impl Image {
    /// Creates a new builder-style object to manufacture [`Image`](crate::types::Image).
    pub fn builder() -> crate::types::builders::ImageBuilder {
        crate::types::builders::ImageBuilder::default()
    }
}

/// A builder for [`Image`](crate::types::Image).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ImageBuilder {
    pub(crate) registry_id: std::option::Option<std::string::String>,
    pub(crate) repository_name: std::option::Option<std::string::String>,
    pub(crate) image_id: std::option::Option<crate::types::ImageIdentifier>,
    pub(crate) image_manifest: std::option::Option<std::string::String>,
    pub(crate) image_manifest_media_type: std::option::Option<std::string::String>,
}
impl ImageBuilder {
    /// <p>The Amazon Web Services account ID that's associated with the registry containing the image.</p>
    pub fn registry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that's associated with the registry containing the image.</p>
    pub fn set_registry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The name of the repository that's associated with the image.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository that's associated with the image.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>An object that contains the image tag and image digest associated with an image.</p>
    pub fn image_id(mut self, input: crate::types::ImageIdentifier) -> Self {
        self.image_id = Some(input);
        self
    }
    /// <p>An object that contains the image tag and image digest associated with an image.</p>
    pub fn set_image_id(
        mut self,
        input: std::option::Option<crate::types::ImageIdentifier>,
    ) -> Self {
        self.image_id = input;
        self
    }
    /// <p>The image manifest that's associated with the image.</p>
    pub fn image_manifest(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_manifest = Some(input.into());
        self
    }
    /// <p>The image manifest that's associated with the image.</p>
    pub fn set_image_manifest(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_manifest = input;
        self
    }
    /// <p>The manifest media type of the image.</p>
    pub fn image_manifest_media_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_manifest_media_type = Some(input.into());
        self
    }
    /// <p>The manifest media type of the image.</p>
    pub fn set_image_manifest_media_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.image_manifest_media_type = input;
        self
    }
    /// Consumes the builder and constructs a [`Image`](crate::types::Image).
    pub fn build(self) -> crate::types::Image {
        crate::types::Image {
            registry_id: self.registry_id,
            repository_name: self.repository_name,
            image_id: self.image_id,
            image_manifest: self.image_manifest,
            image_manifest_media_type: self.image_manifest_media_type,
        }
    }
}
