// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that describes the image tag details that are returned by a <code>DescribeImageTags</code> action.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ReferencedImageDetail {
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    #[doc(hidden)]
    pub image_digest: std::option::Option<std::string::String>,
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    #[doc(hidden)]
    pub image_size_in_bytes: std::option::Option<i64>,
    /// <p>The date and time, expressed in standard JavaScript date format, which the current image tag was pushed to the repository at.</p>
    #[doc(hidden)]
    pub image_pushed_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The media type of the image manifest.</p>
    #[doc(hidden)]
    pub image_manifest_media_type: std::option::Option<std::string::String>,
    /// <p>The artifact media type of the image.</p>
    #[doc(hidden)]
    pub artifact_media_type: std::option::Option<std::string::String>,
}
impl ReferencedImageDetail {
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(&self) -> std::option::Option<&str> {
        self.image_digest.as_deref()
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn image_size_in_bytes(&self) -> std::option::Option<i64> {
        self.image_size_in_bytes
    }
    /// <p>The date and time, expressed in standard JavaScript date format, which the current image tag was pushed to the repository at.</p>
    pub fn image_pushed_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.image_pushed_at.as_ref()
    }
    /// <p>The media type of the image manifest.</p>
    pub fn image_manifest_media_type(&self) -> std::option::Option<&str> {
        self.image_manifest_media_type.as_deref()
    }
    /// <p>The artifact media type of the image.</p>
    pub fn artifact_media_type(&self) -> std::option::Option<&str> {
        self.artifact_media_type.as_deref()
    }
}
impl ReferencedImageDetail {
    /// Creates a new builder-style object to manufacture [`ReferencedImageDetail`](crate::types::ReferencedImageDetail).
    pub fn builder() -> crate::types::builders::ReferencedImageDetailBuilder {
        crate::types::builders::ReferencedImageDetailBuilder::default()
    }
}

/// A builder for [`ReferencedImageDetail`](crate::types::ReferencedImageDetail).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ReferencedImageDetailBuilder {
    pub(crate) image_digest: std::option::Option<std::string::String>,
    pub(crate) image_size_in_bytes: std::option::Option<i64>,
    pub(crate) image_pushed_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) image_manifest_media_type: std::option::Option<std::string::String>,
    pub(crate) artifact_media_type: std::option::Option<std::string::String>,
}
impl ReferencedImageDetailBuilder {
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_digest = Some(input.into());
        self
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn set_image_digest(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_digest = input;
        self
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn image_size_in_bytes(mut self, input: i64) -> Self {
        self.image_size_in_bytes = Some(input);
        self
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn set_image_size_in_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.image_size_in_bytes = input;
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, which the current image tag was pushed to the repository at.</p>
    pub fn image_pushed_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.image_pushed_at = Some(input);
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, which the current image tag was pushed to the repository at.</p>
    pub fn set_image_pushed_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.image_pushed_at = input;
        self
    }
    /// <p>The media type of the image manifest.</p>
    pub fn image_manifest_media_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_manifest_media_type = Some(input.into());
        self
    }
    /// <p>The media type of the image manifest.</p>
    pub fn set_image_manifest_media_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.image_manifest_media_type = input;
        self
    }
    /// <p>The artifact media type of the image.</p>
    pub fn artifact_media_type(mut self, input: impl Into<std::string::String>) -> Self {
        self.artifact_media_type = Some(input.into());
        self
    }
    /// <p>The artifact media type of the image.</p>
    pub fn set_artifact_media_type(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.artifact_media_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ReferencedImageDetail`](crate::types::ReferencedImageDetail).
    pub fn build(self) -> crate::types::ReferencedImageDetail {
        crate::types::ReferencedImageDetail {
            image_digest: self.image_digest,
            image_size_in_bytes: self.image_size_in_bytes,
            image_pushed_at: self.image_pushed_at,
            image_manifest_media_type: self.image_manifest_media_type,
            artifact_media_type: self.artifact_media_type,
        }
    }
}
