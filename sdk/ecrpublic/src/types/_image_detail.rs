// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object that describes an image that's returned by a <code>DescribeImages</code> operation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ImageDetail {
    /// <p>The Amazon Web Services account ID that's associated with the public registry where this image belongs.</p>
    pub registry_id: ::std::option::Option<::std::string::String>,
    /// <p>The name of the repository where this image belongs.</p>
    pub repository_name: ::std::option::Option<::std::string::String>,
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub image_digest: ::std::option::Option<::std::string::String>,
    /// <p>The list of tags that's associated with this image.</p>
    pub image_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub image_size_in_bytes: ::std::option::Option<i64>,
    /// <p>The date and time, expressed in standard JavaScript date format, that the current image was pushed to the repository at. </p>
    pub image_pushed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The media type of the image manifest.</p>
    pub image_manifest_media_type: ::std::option::Option<::std::string::String>,
    /// <p>The artifact media type of the image.</p>
    pub artifact_media_type: ::std::option::Option<::std::string::String>,
}
impl ImageDetail {
    /// <p>The Amazon Web Services account ID that's associated with the public registry where this image belongs.</p>
    pub fn registry_id(&self) -> ::std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The name of the repository where this image belongs.</p>
    pub fn repository_name(&self) -> ::std::option::Option<&str> {
        self.repository_name.as_deref()
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(&self) -> ::std::option::Option<&str> {
        self.image_digest.as_deref()
    }
    /// <p>The list of tags that's associated with this image.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.image_tags.is_none()`.
    pub fn image_tags(&self) -> &[::std::string::String] {
        self.image_tags.as_deref().unwrap_or_default()
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn image_size_in_bytes(&self) -> ::std::option::Option<i64> {
        self.image_size_in_bytes
    }
    /// <p>The date and time, expressed in standard JavaScript date format, that the current image was pushed to the repository at. </p>
    pub fn image_pushed_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.image_pushed_at.as_ref()
    }
    /// <p>The media type of the image manifest.</p>
    pub fn image_manifest_media_type(&self) -> ::std::option::Option<&str> {
        self.image_manifest_media_type.as_deref()
    }
    /// <p>The artifact media type of the image.</p>
    pub fn artifact_media_type(&self) -> ::std::option::Option<&str> {
        self.artifact_media_type.as_deref()
    }
}
impl ImageDetail {
    /// Creates a new builder-style object to manufacture [`ImageDetail`](crate::types::ImageDetail).
    pub fn builder() -> crate::types::builders::ImageDetailBuilder {
        crate::types::builders::ImageDetailBuilder::default()
    }
}

/// A builder for [`ImageDetail`](crate::types::ImageDetail).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ImageDetailBuilder {
    pub(crate) registry_id: ::std::option::Option<::std::string::String>,
    pub(crate) repository_name: ::std::option::Option<::std::string::String>,
    pub(crate) image_digest: ::std::option::Option<::std::string::String>,
    pub(crate) image_tags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) image_size_in_bytes: ::std::option::Option<i64>,
    pub(crate) image_pushed_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) image_manifest_media_type: ::std::option::Option<::std::string::String>,
    pub(crate) artifact_media_type: ::std::option::Option<::std::string::String>,
}
impl ImageDetailBuilder {
    /// <p>The Amazon Web Services account ID that's associated with the public registry where this image belongs.</p>
    pub fn registry_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that's associated with the public registry where this image belongs.</p>
    pub fn set_registry_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The Amazon Web Services account ID that's associated with the public registry where this image belongs.</p>
    pub fn get_registry_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_id
    }
    /// <p>The name of the repository where this image belongs.</p>
    pub fn repository_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the repository where this image belongs.</p>
    pub fn set_repository_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// <p>The name of the repository where this image belongs.</p>
    pub fn get_repository_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository_name
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn image_digest(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_digest = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn set_image_digest(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_digest = input;
        self
    }
    /// <p>The <code>sha256</code> digest of the image manifest.</p>
    pub fn get_image_digest(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_digest
    }
    /// Appends an item to `image_tags`.
    ///
    /// To override the contents of this collection use [`set_image_tags`](Self::set_image_tags).
    ///
    /// <p>The list of tags that's associated with this image.</p>
    pub fn image_tags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.image_tags.unwrap_or_default();
        v.push(input.into());
        self.image_tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of tags that's associated with this image.</p>
    pub fn set_image_tags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.image_tags = input;
        self
    }
    /// <p>The list of tags that's associated with this image.</p>
    pub fn get_image_tags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.image_tags
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn image_size_in_bytes(mut self, input: i64) -> Self {
        self.image_size_in_bytes = ::std::option::Option::Some(input);
        self
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn set_image_size_in_bytes(mut self, input: ::std::option::Option<i64>) -> Self {
        self.image_size_in_bytes = input;
        self
    }
    /// <p>The size, in bytes, of the image in the repository.</p>
    /// <p>If the image is a manifest list, this is the max size of all manifests in the list.</p> <note>
    /// <p>Beginning with Docker version 1.9, the Docker client compresses image layers before pushing them to a V2 Docker registry. The output of the <code>docker images</code> command shows the uncompressed image size, so it might return a larger image size than the image sizes that are returned by <code>DescribeImages</code>.</p>
    /// </note>
    pub fn get_image_size_in_bytes(&self) -> &::std::option::Option<i64> {
        &self.image_size_in_bytes
    }
    /// <p>The date and time, expressed in standard JavaScript date format, that the current image was pushed to the repository at. </p>
    pub fn image_pushed_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.image_pushed_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, that the current image was pushed to the repository at. </p>
    pub fn set_image_pushed_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.image_pushed_at = input;
        self
    }
    /// <p>The date and time, expressed in standard JavaScript date format, that the current image was pushed to the repository at. </p>
    pub fn get_image_pushed_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.image_pushed_at
    }
    /// <p>The media type of the image manifest.</p>
    pub fn image_manifest_media_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_manifest_media_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The media type of the image manifest.</p>
    pub fn set_image_manifest_media_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_manifest_media_type = input;
        self
    }
    /// <p>The media type of the image manifest.</p>
    pub fn get_image_manifest_media_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_manifest_media_type
    }
    /// <p>The artifact media type of the image.</p>
    pub fn artifact_media_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.artifact_media_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The artifact media type of the image.</p>
    pub fn set_artifact_media_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.artifact_media_type = input;
        self
    }
    /// <p>The artifact media type of the image.</p>
    pub fn get_artifact_media_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.artifact_media_type
    }
    /// Consumes the builder and constructs a [`ImageDetail`](crate::types::ImageDetail).
    pub fn build(self) -> crate::types::ImageDetail {
        crate::types::ImageDetail {
            registry_id: self.registry_id,
            repository_name: self.repository_name,
            image_digest: self.image_digest,
            image_tags: self.image_tags,
            image_size_in_bytes: self.image_size_in_bytes,
            image_pushed_at: self.image_pushed_at,
            image_manifest_media_type: self.image_manifest_media_type,
            artifact_media_type: self.artifact_media_type,
        }
    }
}
