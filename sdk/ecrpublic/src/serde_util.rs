// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn describe_registries_output_correct_errors(
    mut builder: crate::operation::describe_registries::builders::DescribeRegistriesOutputBuilder,
) -> crate::operation::describe_registries::builders::DescribeRegistriesOutputBuilder {
    if builder.registries.is_none() {
        builder.registries = Some(Default::default())
    }
    builder
}

pub(crate) fn get_registry_catalog_data_output_correct_errors(
    mut builder: crate::operation::get_registry_catalog_data::builders::GetRegistryCatalogDataOutputBuilder,
) -> crate::operation::get_registry_catalog_data::builders::GetRegistryCatalogDataOutputBuilder {
    if builder.registry_catalog_data.is_none() {
        builder.registry_catalog_data = {
            let builder = crate::types::builders::RegistryCatalogDataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn put_registry_catalog_data_output_correct_errors(
    mut builder: crate::operation::put_registry_catalog_data::builders::PutRegistryCatalogDataOutputBuilder,
) -> crate::operation::put_registry_catalog_data::builders::PutRegistryCatalogDataOutputBuilder {
    if builder.registry_catalog_data.is_none() {
        builder.registry_catalog_data = {
            let builder = crate::types::builders::RegistryCatalogDataBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn registry_correct_errors(mut builder: crate::types::builders::RegistryBuilder) -> crate::types::builders::RegistryBuilder {
    if builder.registry_id.is_none() {
        builder.registry_id = Some(Default::default())
    }
    if builder.registry_arn.is_none() {
        builder.registry_arn = Some(Default::default())
    }
    if builder.registry_uri.is_none() {
        builder.registry_uri = Some(Default::default())
    }
    if builder.verified.is_none() {
        builder.verified = Some(Default::default())
    }
    if builder.aliases.is_none() {
        builder.aliases = Some(Default::default())
    }
    builder
}

pub(crate) fn registry_alias_correct_errors(
    mut builder: crate::types::builders::RegistryAliasBuilder,
) -> crate::types::builders::RegistryAliasBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RegistryAliasStatus>().ok()
    }
    if builder.primary_registry_alias.is_none() {
        builder.primary_registry_alias = Some(Default::default())
    }
    if builder.default_registry_alias.is_none() {
        builder.default_registry_alias = Some(Default::default())
    }
    builder
}
