// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::batch_delete_image::_batch_delete_image_output::BatchDeleteImageOutputBuilder;

pub use crate::operation::batch_delete_image::_batch_delete_image_input::BatchDeleteImageInputBuilder;

/// Fluent builder constructing a request to `BatchDeleteImage`.
///
/// <p>Deletes a list of specified images that are within a repository in a public registry. Images are specified with either an <code>imageTag</code> or <code>imageDigest</code>.</p>
/// <p>You can remove a tag from an image by specifying the image's tag in your request. When you remove the last tag from an image, the image is deleted from your repository.</p>
/// <p>You can completely delete an image (and all of its tags) by specifying the digest of the image in your request.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct BatchDeleteImageFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::batch_delete_image::builders::BatchDeleteImageInputBuilder,
}
impl BatchDeleteImageFluentBuilder {
    /// Creates a new `BatchDeleteImage`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::batch_delete_image::BatchDeleteImage,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_image::BatchDeleteImageError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::batch_delete_image::BatchDeleteImageOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::batch_delete_image::BatchDeleteImageError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The Amazon Web Services account ID that's associated with the registry that contains the image to delete. If you do not specify a registry, the default public registry is assumed.</p>
    pub fn registry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.registry_id(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID that's associated with the registry that contains the image to delete. If you do not specify a registry, the default public registry is assumed.</p>
    pub fn set_registry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_registry_id(input);
        self
    }
    /// <p>The repository in a public registry that contains the image to delete.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository_name(input.into());
        self
    }
    /// <p>The repository in a public registry that contains the image to delete.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository_name(input);
        self
    }
    /// Appends an item to `imageIds`.
    ///
    /// To override the contents of this collection use [`set_image_ids`](Self::set_image_ids).
    ///
    /// <p>A list of image ID references that correspond to images to delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.</p>
    pub fn image_ids(mut self, input: crate::types::ImageIdentifier) -> Self {
        self.inner = self.inner.image_ids(input);
        self
    }
    /// <p>A list of image ID references that correspond to images to delete. The format of the <code>imageIds</code> reference is <code>imageTag=tag</code> or <code>imageDigest=digest</code>.</p>
    pub fn set_image_ids(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ImageIdentifier>>,
    ) -> Self {
        self.inner = self.inner.set_image_ids(input);
        self
    }
}
