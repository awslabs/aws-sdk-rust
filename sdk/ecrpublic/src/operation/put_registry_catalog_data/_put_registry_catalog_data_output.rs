// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutRegistryCatalogDataOutput {
    /// <p>The catalog data for the public registry.</p>
    pub registry_catalog_data: ::std::option::Option<crate::types::RegistryCatalogData>,
    _request_id: Option<String>,
}
impl PutRegistryCatalogDataOutput {
    /// <p>The catalog data for the public registry.</p>
    pub fn registry_catalog_data(&self) -> ::std::option::Option<&crate::types::RegistryCatalogData> {
        self.registry_catalog_data.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for PutRegistryCatalogDataOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl PutRegistryCatalogDataOutput {
    /// Creates a new builder-style object to manufacture [`PutRegistryCatalogDataOutput`](crate::operation::put_registry_catalog_data::PutRegistryCatalogDataOutput).
    pub fn builder() -> crate::operation::put_registry_catalog_data::builders::PutRegistryCatalogDataOutputBuilder {
        crate::operation::put_registry_catalog_data::builders::PutRegistryCatalogDataOutputBuilder::default()
    }
}

/// A builder for [`PutRegistryCatalogDataOutput`](crate::operation::put_registry_catalog_data::PutRegistryCatalogDataOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutRegistryCatalogDataOutputBuilder {
    pub(crate) registry_catalog_data: ::std::option::Option<crate::types::RegistryCatalogData>,
    _request_id: Option<String>,
}
impl PutRegistryCatalogDataOutputBuilder {
    /// <p>The catalog data for the public registry.</p>
    /// This field is required.
    pub fn registry_catalog_data(mut self, input: crate::types::RegistryCatalogData) -> Self {
        self.registry_catalog_data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The catalog data for the public registry.</p>
    pub fn set_registry_catalog_data(mut self, input: ::std::option::Option<crate::types::RegistryCatalogData>) -> Self {
        self.registry_catalog_data = input;
        self
    }
    /// <p>The catalog data for the public registry.</p>
    pub fn get_registry_catalog_data(&self) -> &::std::option::Option<crate::types::RegistryCatalogData> {
        &self.registry_catalog_data
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`PutRegistryCatalogDataOutput`](crate::operation::put_registry_catalog_data::PutRegistryCatalogDataOutput).
    pub fn build(self) -> crate::operation::put_registry_catalog_data::PutRegistryCatalogDataOutput {
        crate::operation::put_registry_catalog_data::PutRegistryCatalogDataOutput {
            registry_catalog_data: self.registry_catalog_data,
            _request_id: self._request_id,
        }
    }
}
