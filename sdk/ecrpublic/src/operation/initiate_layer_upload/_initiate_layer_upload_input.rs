// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct InitiateLayerUploadInput {
    /// <p>The Amazon Web Services account ID, or registry alias, that's associated with the registry to which you intend to upload layers. If you do not specify a registry, the default public registry is assumed.</p>
    #[doc(hidden)]
    pub registry_id: std::option::Option<std::string::String>,
    /// <p>The name of the repository that you want to upload layers to.</p>
    #[doc(hidden)]
    pub repository_name: std::option::Option<std::string::String>,
}
impl InitiateLayerUploadInput {
    /// <p>The Amazon Web Services account ID, or registry alias, that's associated with the registry to which you intend to upload layers. If you do not specify a registry, the default public registry is assumed.</p>
    pub fn registry_id(&self) -> std::option::Option<&str> {
        self.registry_id.as_deref()
    }
    /// <p>The name of the repository that you want to upload layers to.</p>
    pub fn repository_name(&self) -> std::option::Option<&str> {
        self.repository_name.as_deref()
    }
}
impl InitiateLayerUploadInput {
    /// Creates a new builder-style object to manufacture [`InitiateLayerUploadInput`](crate::operation::initiate_layer_upload::InitiateLayerUploadInput).
    pub fn builder(
    ) -> crate::operation::initiate_layer_upload::builders::InitiateLayerUploadInputBuilder {
        crate::operation::initiate_layer_upload::builders::InitiateLayerUploadInputBuilder::default(
        )
    }
}

/// A builder for [`InitiateLayerUploadInput`](crate::operation::initiate_layer_upload::InitiateLayerUploadInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct InitiateLayerUploadInputBuilder {
    pub(crate) registry_id: std::option::Option<std::string::String>,
    pub(crate) repository_name: std::option::Option<std::string::String>,
}
impl InitiateLayerUploadInputBuilder {
    /// <p>The Amazon Web Services account ID, or registry alias, that's associated with the registry to which you intend to upload layers. If you do not specify a registry, the default public registry is assumed.</p>
    pub fn registry_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_id = Some(input.into());
        self
    }
    /// <p>The Amazon Web Services account ID, or registry alias, that's associated with the registry to which you intend to upload layers. If you do not specify a registry, the default public registry is assumed.</p>
    pub fn set_registry_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_id = input;
        self
    }
    /// <p>The name of the repository that you want to upload layers to.</p>
    pub fn repository_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository_name = Some(input.into());
        self
    }
    /// <p>The name of the repository that you want to upload layers to.</p>
    pub fn set_repository_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository_name = input;
        self
    }
    /// Consumes the builder and constructs a [`InitiateLayerUploadInput`](crate::operation::initiate_layer_upload::InitiateLayerUploadInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::initiate_layer_upload::InitiateLayerUploadInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::initiate_layer_upload::InitiateLayerUploadInput {
                registry_id: self.registry_id,
                repository_name: self.repository_name,
            },
        )
    }
}
