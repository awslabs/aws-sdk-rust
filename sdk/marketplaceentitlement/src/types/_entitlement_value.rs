// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The EntitlementValue represents the amount of capacity that the customer is entitled to for the product.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct EntitlementValue {
    /// <p>The IntegerValue field will be populated with an integer value when the entitlement is an integer type. Otherwise, the field will not be set.</p>
    #[doc(hidden)]
    pub integer_value: std::option::Option<i32>,
    /// <p>The DoubleValue field will be populated with a double value when the entitlement is a double type. Otherwise, the field will not be set.</p>
    #[doc(hidden)]
    pub double_value: std::option::Option<f64>,
    /// <p>The BooleanValue field will be populated with a boolean value when the entitlement is a boolean type. Otherwise, the field will not be set.</p>
    #[doc(hidden)]
    pub boolean_value: std::option::Option<bool>,
    /// <p>The StringValue field will be populated with a string value when the entitlement is a string type. Otherwise, the field will not be set.</p>
    #[doc(hidden)]
    pub string_value: std::option::Option<std::string::String>,
}
impl EntitlementValue {
    /// <p>The IntegerValue field will be populated with an integer value when the entitlement is an integer type. Otherwise, the field will not be set.</p>
    pub fn integer_value(&self) -> std::option::Option<i32> {
        self.integer_value
    }
    /// <p>The DoubleValue field will be populated with a double value when the entitlement is a double type. Otherwise, the field will not be set.</p>
    pub fn double_value(&self) -> std::option::Option<f64> {
        self.double_value
    }
    /// <p>The BooleanValue field will be populated with a boolean value when the entitlement is a boolean type. Otherwise, the field will not be set.</p>
    pub fn boolean_value(&self) -> std::option::Option<bool> {
        self.boolean_value
    }
    /// <p>The StringValue field will be populated with a string value when the entitlement is a string type. Otherwise, the field will not be set.</p>
    pub fn string_value(&self) -> std::option::Option<&str> {
        self.string_value.as_deref()
    }
}
impl EntitlementValue {
    /// Creates a new builder-style object to manufacture [`EntitlementValue`](crate::types::EntitlementValue).
    pub fn builder() -> crate::types::builders::EntitlementValueBuilder {
        crate::types::builders::EntitlementValueBuilder::default()
    }
}

/// A builder for [`EntitlementValue`](crate::types::EntitlementValue).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct EntitlementValueBuilder {
    pub(crate) integer_value: std::option::Option<i32>,
    pub(crate) double_value: std::option::Option<f64>,
    pub(crate) boolean_value: std::option::Option<bool>,
    pub(crate) string_value: std::option::Option<std::string::String>,
}
impl EntitlementValueBuilder {
    /// <p>The IntegerValue field will be populated with an integer value when the entitlement is an integer type. Otherwise, the field will not be set.</p>
    pub fn integer_value(mut self, input: i32) -> Self {
        self.integer_value = Some(input);
        self
    }
    /// <p>The IntegerValue field will be populated with an integer value when the entitlement is an integer type. Otherwise, the field will not be set.</p>
    pub fn set_integer_value(mut self, input: std::option::Option<i32>) -> Self {
        self.integer_value = input;
        self
    }
    /// <p>The DoubleValue field will be populated with a double value when the entitlement is a double type. Otherwise, the field will not be set.</p>
    pub fn double_value(mut self, input: f64) -> Self {
        self.double_value = Some(input);
        self
    }
    /// <p>The DoubleValue field will be populated with a double value when the entitlement is a double type. Otherwise, the field will not be set.</p>
    pub fn set_double_value(mut self, input: std::option::Option<f64>) -> Self {
        self.double_value = input;
        self
    }
    /// <p>The BooleanValue field will be populated with a boolean value when the entitlement is a boolean type. Otherwise, the field will not be set.</p>
    pub fn boolean_value(mut self, input: bool) -> Self {
        self.boolean_value = Some(input);
        self
    }
    /// <p>The BooleanValue field will be populated with a boolean value when the entitlement is a boolean type. Otherwise, the field will not be set.</p>
    pub fn set_boolean_value(mut self, input: std::option::Option<bool>) -> Self {
        self.boolean_value = input;
        self
    }
    /// <p>The StringValue field will be populated with a string value when the entitlement is a string type. Otherwise, the field will not be set.</p>
    pub fn string_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.string_value = Some(input.into());
        self
    }
    /// <p>The StringValue field will be populated with a string value when the entitlement is a string type. Otherwise, the field will not be set.</p>
    pub fn set_string_value(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.string_value = input;
        self
    }
    /// Consumes the builder and constructs a [`EntitlementValue`](crate::types::EntitlementValue).
    pub fn build(self) -> crate::types::EntitlementValue {
        crate::types::EntitlementValue {
            integer_value: self.integer_value,
            double_value: self.double_value,
            boolean_value: self.boolean_value,
            string_value: self.string_value,
        }
    }
}
