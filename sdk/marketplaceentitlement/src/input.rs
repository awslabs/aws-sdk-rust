// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
use std::fmt::Write;
/// See [`GetEntitlementsInput`](crate::input::GetEntitlementsInput)
pub mod get_entitlements_input {
    /// A builder for [`GetEntitlementsInput`](crate::input::GetEntitlementsInput)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {
        pub(crate) product_code: std::option::Option<std::string::String>,
        pub(crate) filter: std::option::Option<
            std::collections::HashMap<
                crate::model::GetEntitlementFilterName,
                std::vec::Vec<std::string::String>,
            >,
        >,
        pub(crate) next_token: std::option::Option<std::string::String>,
        pub(crate) max_results: std::option::Option<i32>,
    }
    impl Builder {
        /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code
        /// will be provided by AWS Marketplace when the product listing is created.</p>
        pub fn product_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.product_code = Some(input.into());
            self
        }
        /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code
        /// will be provided by AWS Marketplace when the product listing is created.</p>
        pub fn set_product_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.product_code = input;
            self
        }
        /// Adds a key-value pair to `filter`.
        ///
        /// To override the contents of this collection use [`set_filter`](Self::set_filter).
        ///
        /// <p>Filter is used to return entitlements for a specific customer or for a specific
        /// dimension. Filters are described as keys mapped to a lists of values. Filtered requests are
        /// <i>unioned</i> for each value in the value list, and then
        /// <i>intersected</i> for each filter key.</p>
        pub fn filter(
            mut self,
            k: impl Into<crate::model::GetEntitlementFilterName>,
            v: impl Into<std::vec::Vec<std::string::String>>,
        ) -> Self {
            let mut hash_map = self.filter.unwrap_or_default();
            hash_map.insert(k.into(), v.into());
            self.filter = Some(hash_map);
            self
        }
        /// <p>Filter is used to return entitlements for a specific customer or for a specific
        /// dimension. Filters are described as keys mapped to a lists of values. Filtered requests are
        /// <i>unioned</i> for each value in the value list, and then
        /// <i>intersected</i> for each filter key.</p>
        pub fn set_filter(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<
                    crate::model::GetEntitlementFilterName,
                    std::vec::Vec<std::string::String>,
                >,
            >,
        ) -> Self {
            self.filter = input;
            self
        }
        /// <p>For paginated calls to GetEntitlements, pass the NextToken from the previous
        /// GetEntitlementsResult.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.next_token = Some(input.into());
            self
        }
        /// <p>For paginated calls to GetEntitlements, pass the NextToken from the previous
        /// GetEntitlementsResult.</p>
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.next_token = input;
            self
        }
        /// <p>The maximum number of items to retrieve from the GetEntitlements operation. For
        /// pagination, use the NextToken field in subsequent calls to GetEntitlements.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.max_results = Some(input);
            self
        }
        /// <p>The maximum number of items to retrieve from the GetEntitlements operation. For
        /// pagination, use the NextToken field in subsequent calls to GetEntitlements.</p>
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.max_results = input;
            self
        }
        /// Consumes the builder and constructs a [`GetEntitlementsInput`](crate::input::GetEntitlementsInput)
        pub fn build(
            self,
        ) -> std::result::Result<
            crate::input::GetEntitlementsInput,
            aws_smithy_http::operation::BuildError,
        > {
            Ok(crate::input::GetEntitlementsInput {
                product_code: self.product_code,
                filter: self.filter,
                next_token: self.next_token,
                max_results: self.max_results,
            })
        }
    }
}
#[doc(hidden)]
pub type GetEntitlementsInputOperationOutputAlias = crate::operation::GetEntitlements;
#[doc(hidden)]
pub type GetEntitlementsInputOperationRetryAlias = aws_http::AwsErrorRetryPolicy;
impl GetEntitlementsInput {
    /// Consumes the builder and constructs an Operation<[`GetEntitlements`](crate::operation::GetEntitlements)>
    #[allow(clippy::let_and_return)]
    pub async fn make_operation(
        &self,
        _config: &crate::config::Config,
    ) -> std::result::Result<
        aws_smithy_http::operation::Operation<
            crate::operation::GetEntitlements,
            aws_http::AwsErrorRetryPolicy,
        >,
        aws_smithy_http::operation::BuildError,
    > {
        fn uri_base(
            _input: &crate::input::GetEntitlementsInput,
            output: &mut String,
        ) -> Result<(), aws_smithy_http::operation::BuildError> {
            write!(output, "/").expect("formatting should succeed");
            Ok(())
        }
        #[allow(clippy::unnecessary_wraps)]
        fn update_http_builder(
            input: &crate::input::GetEntitlementsInput,
            builder: http::request::Builder,
        ) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError>
        {
            let mut uri = String::new();
            uri_base(input, &mut uri)?;
            Ok(builder.method("POST").uri(uri))
        }
        #[allow(clippy::unnecessary_wraps)]
        fn request_builder_base(
            input: &crate::input::GetEntitlementsInput,
        ) -> std::result::Result<http::request::Builder, aws_smithy_http::operation::BuildError>
        {
            #[allow(unused_mut)]
            let mut builder = update_http_builder(input, http::request::Builder::new())?;
            builder = aws_smithy_http::header::set_header_if_absent(
                builder,
                http::header::HeaderName::from_static("content-type"),
                "application/x-amz-json-1.1",
            );
            builder = aws_smithy_http::header::set_header_if_absent(
                builder,
                http::header::HeaderName::from_static("x-amz-target"),
                "AWSMPEntitlementService.GetEntitlements",
            );
            Ok(builder)
        }
        let properties = aws_smithy_http::property_bag::SharedPropertyBag::new();
        let request = request_builder_base(&self)?;
        let body =
            crate::operation_ser::serialize_operation_crate_operation_get_entitlements(&self)
                .map_err(|err| {
                    aws_smithy_http::operation::BuildError::SerializationError(err.into())
                })?;
        let request = Self::assemble(request, body);
        #[allow(unused_mut)]
        let mut request = aws_smithy_http::operation::Request::from_parts(
            request.map(aws_smithy_http::body::SdkBody::from),
            properties,
        );
        request
            .properties_mut()
            .insert(aws_http::user_agent::AwsUserAgent::new_from_environment(
                crate::API_METADATA.clone(),
            ));
        #[allow(unused_mut)]
        let mut signing_config = aws_sig_auth::signer::OperationSigningConfig::default_config();
        request.properties_mut().insert(signing_config);
        request
            .properties_mut()
            .insert(aws_types::SigningService::from_static(
                _config.signing_service(),
            ));
        aws_endpoint::set_endpoint_resolver(
            &mut request.properties_mut(),
            _config.endpoint_resolver.clone(),
        );
        if let Some(region) = &_config.region {
            request.properties_mut().insert(region.clone());
        }
        aws_http::auth::set_provider(
            &mut request.properties_mut(),
            _config.credentials_provider.clone(),
        );
        let op = aws_smithy_http::operation::Operation::new(
            request,
            crate::operation::GetEntitlements::new(),
        )
        .with_metadata(aws_smithy_http::operation::Metadata::new(
            "GetEntitlements",
            "marketplaceentitlementservice",
        ));
        let op = op.with_retry_policy(aws_http::AwsErrorRetryPolicy::new());
        Ok(op)
    }
    fn assemble(
        builder: http::request::Builder,
        body: aws_smithy_http::body::SdkBody,
    ) -> http::request::Request<aws_smithy_http::body::SdkBody> {
        let mut builder = builder;
        if let Some(content_length) = body.content_length() {
            builder = aws_smithy_http::header::set_header_if_absent(
                builder,
                http::header::CONTENT_LENGTH,
                content_length,
            );
        }
        builder.body(body).expect("should be valid request")
    }
    /// Creates a new builder-style object to manufacture [`GetEntitlementsInput`](crate::input::GetEntitlementsInput)
    pub fn builder() -> crate::input::get_entitlements_input::Builder {
        crate::input::get_entitlements_input::Builder::default()
    }
}

/// <p>The GetEntitlementsRequest contains parameters for the GetEntitlements
/// operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetEntitlementsInput {
    /// <p>Product code is used to uniquely identify a product in AWS Marketplace. The product code
    /// will be provided by AWS Marketplace when the product listing is created.</p>
    pub product_code: std::option::Option<std::string::String>,
    /// <p>Filter is used to return entitlements for a specific customer or for a specific
    /// dimension. Filters are described as keys mapped to a lists of values. Filtered requests are
    /// <i>unioned</i> for each value in the value list, and then
    /// <i>intersected</i> for each filter key.</p>
    pub filter: std::option::Option<
        std::collections::HashMap<
            crate::model::GetEntitlementFilterName,
            std::vec::Vec<std::string::String>,
        >,
    >,
    /// <p>For paginated calls to GetEntitlements, pass the NextToken from the previous
    /// GetEntitlementsResult.</p>
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The maximum number of items to retrieve from the GetEntitlements operation. For
    /// pagination, use the NextToken field in subsequent calls to GetEntitlements.</p>
    pub max_results: std::option::Option<i32>,
}
impl std::fmt::Debug for GetEntitlementsInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("GetEntitlementsInput");
        formatter.field("product_code", &self.product_code);
        formatter.field("filter", &self.filter);
        formatter.field("next_token", &self.next_token);
        formatter.field("max_results", &self.max_results);
        formatter.finish()
    }
}
