// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn admin_get_device_output_correct_errors(
    mut builder: crate::operation::admin_get_device::builders::AdminGetDeviceOutputBuilder,
) -> crate::operation::admin_get_device::builders::AdminGetDeviceOutputBuilder {
    if builder.device.is_none() {
        builder.device = {
            let builder = crate::types::builders::DeviceTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn admin_get_user_output_correct_errors(
    mut builder: crate::operation::admin_get_user::builders::AdminGetUserOutputBuilder,
) -> crate::operation::admin_get_user::builders::AdminGetUserOutputBuilder {
    if builder.username.is_none() {
        builder.username = Some(Default::default())
    }
    builder
}

pub(crate) fn create_identity_provider_output_correct_errors(
    mut builder: crate::operation::create_identity_provider::builders::CreateIdentityProviderOutputBuilder,
) -> crate::operation::create_identity_provider::builders::CreateIdentityProviderOutputBuilder {
    if builder.identity_provider.is_none() {
        builder.identity_provider = {
            let builder = crate::types::builders::IdentityProviderTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn create_resource_server_output_correct_errors(
    mut builder: crate::operation::create_resource_server::builders::CreateResourceServerOutputBuilder,
) -> crate::operation::create_resource_server::builders::CreateResourceServerOutputBuilder {
    if builder.resource_server.is_none() {
        builder.resource_server = {
            let builder = crate::types::builders::ResourceServerTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_identity_provider_output_correct_errors(
    mut builder: crate::operation::describe_identity_provider::builders::DescribeIdentityProviderOutputBuilder,
) -> crate::operation::describe_identity_provider::builders::DescribeIdentityProviderOutputBuilder {
    if builder.identity_provider.is_none() {
        builder.identity_provider = {
            let builder = crate::types::builders::IdentityProviderTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_resource_server_output_correct_errors(
    mut builder: crate::operation::describe_resource_server::builders::DescribeResourceServerOutputBuilder,
) -> crate::operation::describe_resource_server::builders::DescribeResourceServerOutputBuilder {
    if builder.resource_server.is_none() {
        builder.resource_server = {
            let builder = crate::types::builders::ResourceServerTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_risk_configuration_output_correct_errors(
    mut builder: crate::operation::describe_risk_configuration::builders::DescribeRiskConfigurationOutputBuilder,
) -> crate::operation::describe_risk_configuration::builders::DescribeRiskConfigurationOutputBuilder {
    if builder.risk_configuration.is_none() {
        builder.risk_configuration = {
            let builder = crate::types::builders::RiskConfigurationTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_device_output_correct_errors(
    mut builder: crate::operation::get_device::builders::GetDeviceOutputBuilder,
) -> crate::operation::get_device::builders::GetDeviceOutputBuilder {
    if builder.device.is_none() {
        builder.device = {
            let builder = crate::types::builders::DeviceTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_identity_provider_by_identifier_output_correct_errors(
    mut builder: crate::operation::get_identity_provider_by_identifier::builders::GetIdentityProviderByIdentifierOutputBuilder,
) -> crate::operation::get_identity_provider_by_identifier::builders::GetIdentityProviderByIdentifierOutputBuilder {
    if builder.identity_provider.is_none() {
        builder.identity_provider = {
            let builder = crate::types::builders::IdentityProviderTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_ui_customization_output_correct_errors(
    mut builder: crate::operation::get_ui_customization::builders::GetUiCustomizationOutputBuilder,
) -> crate::operation::get_ui_customization::builders::GetUiCustomizationOutputBuilder {
    if builder.ui_customization.is_none() {
        builder.ui_customization = {
            let builder = crate::types::builders::UiCustomizationTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn get_user_output_correct_errors(
    mut builder: crate::operation::get_user::builders::GetUserOutputBuilder,
) -> crate::operation::get_user::builders::GetUserOutputBuilder {
    if builder.username.is_none() {
        builder.username = Some(Default::default())
    }
    if builder.user_attributes.is_none() {
        builder.user_attributes = Some(Default::default())
    }
    builder
}

pub(crate) fn list_identity_providers_output_correct_errors(
    mut builder: crate::operation::list_identity_providers::builders::ListIdentityProvidersOutputBuilder,
) -> crate::operation::list_identity_providers::builders::ListIdentityProvidersOutputBuilder {
    if builder.providers.is_none() {
        builder.providers = Some(Default::default())
    }
    builder
}

pub(crate) fn list_resource_servers_output_correct_errors(
    mut builder: crate::operation::list_resource_servers::builders::ListResourceServersOutputBuilder,
) -> crate::operation::list_resource_servers::builders::ListResourceServersOutputBuilder {
    if builder.resource_servers.is_none() {
        builder.resource_servers = Some(Default::default())
    }
    builder
}

pub(crate) fn set_risk_configuration_output_correct_errors(
    mut builder: crate::operation::set_risk_configuration::builders::SetRiskConfigurationOutputBuilder,
) -> crate::operation::set_risk_configuration::builders::SetRiskConfigurationOutputBuilder {
    if builder.risk_configuration.is_none() {
        builder.risk_configuration = {
            let builder = crate::types::builders::RiskConfigurationTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn set_ui_customization_output_correct_errors(
    mut builder: crate::operation::set_ui_customization::builders::SetUiCustomizationOutputBuilder,
) -> crate::operation::set_ui_customization::builders::SetUiCustomizationOutputBuilder {
    if builder.ui_customization.is_none() {
        builder.ui_customization = {
            let builder = crate::types::builders::UiCustomizationTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn sign_up_output_correct_errors(
    mut builder: crate::operation::sign_up::builders::SignUpOutputBuilder,
) -> crate::operation::sign_up::builders::SignUpOutputBuilder {
    if builder.user_confirmed.is_none() {
        builder.user_confirmed = Some(Default::default())
    }
    if builder.user_sub.is_none() {
        builder.user_sub = Some(Default::default())
    }
    builder
}

pub(crate) fn update_identity_provider_output_correct_errors(
    mut builder: crate::operation::update_identity_provider::builders::UpdateIdentityProviderOutputBuilder,
) -> crate::operation::update_identity_provider::builders::UpdateIdentityProviderOutputBuilder {
    if builder.identity_provider.is_none() {
        builder.identity_provider = {
            let builder = crate::types::builders::IdentityProviderTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn update_resource_server_output_correct_errors(
    mut builder: crate::operation::update_resource_server::builders::UpdateResourceServerOutputBuilder,
) -> crate::operation::update_resource_server::builders::UpdateResourceServerOutputBuilder {
    if builder.resource_server.is_none() {
        builder.resource_server = {
            let builder = crate::types::builders::ResourceServerTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn log_delivery_configuration_type_correct_errors(
    mut builder: crate::types::builders::LogDeliveryConfigurationTypeBuilder,
) -> crate::types::builders::LogDeliveryConfigurationTypeBuilder {
    if builder.user_pool_id.is_none() {
        builder.user_pool_id = Some(Default::default())
    }
    if builder.log_configurations.is_none() {
        builder.log_configurations = Some(Default::default())
    }
    builder
}

pub(crate) fn account_takeover_risk_configuration_type_correct_errors(
    mut builder: crate::types::builders::AccountTakeoverRiskConfigurationTypeBuilder,
) -> crate::types::builders::AccountTakeoverRiskConfigurationTypeBuilder {
    if builder.actions.is_none() {
        builder.actions = {
            let builder = crate::types::builders::AccountTakeoverActionsTypeBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn attribute_type_correct_errors(
    mut builder: crate::types::builders::AttributeTypeBuilder,
) -> crate::types::builders::AttributeTypeBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn compromised_credentials_risk_configuration_type_correct_errors(
    mut builder: crate::types::builders::CompromisedCredentialsRiskConfigurationTypeBuilder,
) -> crate::types::builders::CompromisedCredentialsRiskConfigurationTypeBuilder {
    if builder.actions.is_none() {
        builder.actions = {
            let builder = crate::types::builders::CompromisedCredentialsActionsTypeBuilder::default();
            crate::serde_util::compromised_credentials_actions_type_correct_errors(builder)
                .build()
                .ok()
        }
    }
    builder
}

pub(crate) fn custom_domain_config_type_correct_errors(
    mut builder: crate::types::builders::CustomDomainConfigTypeBuilder,
) -> crate::types::builders::CustomDomainConfigTypeBuilder {
    if builder.certificate_arn.is_none() {
        builder.certificate_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn sms_configuration_type_correct_errors(
    mut builder: crate::types::builders::SmsConfigurationTypeBuilder,
) -> crate::types::builders::SmsConfigurationTypeBuilder {
    if builder.sns_caller_arn.is_none() {
        builder.sns_caller_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn user_pool_add_ons_type_correct_errors(
    mut builder: crate::types::builders::UserPoolAddOnsTypeBuilder,
) -> crate::types::builders::UserPoolAddOnsTypeBuilder {
    if builder.advanced_security_mode.is_none() {
        builder.advanced_security_mode = "no value was set".parse::<crate::types::AdvancedSecurityModeType>().ok()
    }
    builder
}

pub(crate) fn username_configuration_type_correct_errors(
    mut builder: crate::types::builders::UsernameConfigurationTypeBuilder,
) -> crate::types::builders::UsernameConfigurationTypeBuilder {
    if builder.case_sensitive.is_none() {
        builder.case_sensitive = Some(Default::default())
    }
    builder
}

pub(crate) fn compromised_credentials_actions_type_correct_errors(
    mut builder: crate::types::builders::CompromisedCredentialsActionsTypeBuilder,
) -> crate::types::builders::CompromisedCredentialsActionsTypeBuilder {
    if builder.event_action.is_none() {
        builder.event_action = "no value was set".parse::<crate::types::CompromisedCredentialsEventActionType>().ok()
    }
    builder
}

pub(crate) fn custom_email_lambda_version_config_type_correct_errors(
    mut builder: crate::types::builders::CustomEmailLambdaVersionConfigTypeBuilder,
) -> crate::types::builders::CustomEmailLambdaVersionConfigTypeBuilder {
    if builder.lambda_version.is_none() {
        builder.lambda_version = "no value was set".parse::<crate::types::CustomEmailSenderLambdaVersionType>().ok()
    }
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_sms_lambda_version_config_type_correct_errors(
    mut builder: crate::types::builders::CustomSmsLambdaVersionConfigTypeBuilder,
) -> crate::types::builders::CustomSmsLambdaVersionConfigTypeBuilder {
    if builder.lambda_version.is_none() {
        builder.lambda_version = "no value was set".parse::<crate::types::CustomSmsSenderLambdaVersionType>().ok()
    }
    if builder.lambda_arn.is_none() {
        builder.lambda_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn event_feedback_type_correct_errors(
    mut builder: crate::types::builders::EventFeedbackTypeBuilder,
) -> crate::types::builders::EventFeedbackTypeBuilder {
    if builder.feedback_value.is_none() {
        builder.feedback_value = "no value was set".parse::<crate::types::FeedbackValueType>().ok()
    }
    if builder.provider.is_none() {
        builder.provider = Some(Default::default())
    }
    builder
}

pub(crate) fn log_configuration_type_correct_errors(
    mut builder: crate::types::builders::LogConfigurationTypeBuilder,
) -> crate::types::builders::LogConfigurationTypeBuilder {
    if builder.log_level.is_none() {
        builder.log_level = "no value was set".parse::<crate::types::LogLevel>().ok()
    }
    if builder.event_source.is_none() {
        builder.event_source = "no value was set".parse::<crate::types::EventSourceName>().ok()
    }
    builder
}

pub(crate) fn notify_configuration_type_correct_errors(
    mut builder: crate::types::builders::NotifyConfigurationTypeBuilder,
) -> crate::types::builders::NotifyConfigurationTypeBuilder {
    if builder.source_arn.is_none() {
        builder.source_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_server_scope_type_correct_errors(
    mut builder: crate::types::builders::ResourceServerScopeTypeBuilder,
) -> crate::types::builders::ResourceServerScopeTypeBuilder {
    if builder.scope_name.is_none() {
        builder.scope_name = Some(Default::default())
    }
    if builder.scope_description.is_none() {
        builder.scope_description = Some(Default::default())
    }
    builder
}

pub(crate) fn account_takeover_action_type_correct_errors(
    mut builder: crate::types::builders::AccountTakeoverActionTypeBuilder,
) -> crate::types::builders::AccountTakeoverActionTypeBuilder {
    if builder.notify.is_none() {
        builder.notify = Some(Default::default())
    }
    if builder.event_action.is_none() {
        builder.event_action = "no value was set".parse::<crate::types::AccountTakeoverEventActionType>().ok()
    }
    builder
}

pub(crate) fn notify_email_type_correct_errors(
    mut builder: crate::types::builders::NotifyEmailTypeBuilder,
) -> crate::types::builders::NotifyEmailTypeBuilder {
    if builder.subject.is_none() {
        builder.subject = Some(Default::default())
    }
    builder
}

pub(crate) fn recovery_option_type_correct_errors(
    mut builder: crate::types::builders::RecoveryOptionTypeBuilder,
) -> crate::types::builders::RecoveryOptionTypeBuilder {
    if builder.priority.is_none() {
        builder.priority = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = "no value was set".parse::<crate::types::RecoveryOptionNameType>().ok()
    }
    builder
}
