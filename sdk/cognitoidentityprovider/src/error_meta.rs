// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    AliasExistsException(crate::error::AliasExistsException),
    CodeDeliveryFailureException(crate::error::CodeDeliveryFailureException),
    CodeMismatchException(crate::error::CodeMismatchException),
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    DuplicateProviderException(crate::error::DuplicateProviderException),
    EnableSoftwareTokenMfaException(crate::error::EnableSoftwareTokenMfaException),
    ExpiredCodeException(crate::error::ExpiredCodeException),
    GroupExistsException(crate::error::GroupExistsException),
    InternalErrorException(crate::error::InternalErrorException),
    InvalidEmailRoleAccessPolicyException(crate::error::InvalidEmailRoleAccessPolicyException),
    InvalidLambdaResponseException(crate::error::InvalidLambdaResponseException),
    InvalidOAuthFlowException(crate::error::InvalidOAuthFlowException),
    InvalidParameterException(crate::error::InvalidParameterException),
    InvalidPasswordException(crate::error::InvalidPasswordException),
    InvalidSmsRoleAccessPolicyException(crate::error::InvalidSmsRoleAccessPolicyException),
    InvalidSmsRoleTrustRelationshipException(
        crate::error::InvalidSmsRoleTrustRelationshipException,
    ),
    InvalidUserPoolConfigurationException(crate::error::InvalidUserPoolConfigurationException),
    LimitExceededException(crate::error::LimitExceededException),
    MfaMethodNotFoundException(crate::error::MfaMethodNotFoundException),
    NotAuthorizedException(crate::error::NotAuthorizedException),
    PasswordResetRequiredException(crate::error::PasswordResetRequiredException),
    PreconditionNotMetException(crate::error::PreconditionNotMetException),
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    ScopeDoesNotExistException(crate::error::ScopeDoesNotExistException),
    SoftwareTokenMfaNotFoundException(crate::error::SoftwareTokenMfaNotFoundException),
    TooManyFailedAttemptsException(crate::error::TooManyFailedAttemptsException),
    TooManyRequestsException(crate::error::TooManyRequestsException),
    UnauthorizedException(crate::error::UnauthorizedException),
    UnexpectedLambdaException(crate::error::UnexpectedLambdaException),
    UnsupportedIdentityProviderException(crate::error::UnsupportedIdentityProviderException),
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    UnsupportedTokenTypeException(crate::error::UnsupportedTokenTypeException),
    UnsupportedUserStateException(crate::error::UnsupportedUserStateException),
    UserImportInProgressException(crate::error::UserImportInProgressException),
    UserLambdaValidationException(crate::error::UserLambdaValidationException),
    UserNotConfirmedException(crate::error::UserNotConfirmedException),
    UserNotFoundException(crate::error::UserNotFoundException),
    UserPoolAddOnNotEnabledException(crate::error::UserPoolAddOnNotEnabledException),
    UserPoolTaggingException(crate::error::UserPoolTaggingException),
    UsernameExistsException(crate::error::UsernameExistsException),
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AliasExistsException(inner) => inner.fmt(f),
            Error::CodeDeliveryFailureException(inner) => inner.fmt(f),
            Error::CodeMismatchException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::DuplicateProviderException(inner) => inner.fmt(f),
            Error::EnableSoftwareTokenMfaException(inner) => inner.fmt(f),
            Error::ExpiredCodeException(inner) => inner.fmt(f),
            Error::GroupExistsException(inner) => inner.fmt(f),
            Error::InternalErrorException(inner) => inner.fmt(f),
            Error::InvalidEmailRoleAccessPolicyException(inner) => inner.fmt(f),
            Error::InvalidLambdaResponseException(inner) => inner.fmt(f),
            Error::InvalidOAuthFlowException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidPasswordException(inner) => inner.fmt(f),
            Error::InvalidSmsRoleAccessPolicyException(inner) => inner.fmt(f),
            Error::InvalidSmsRoleTrustRelationshipException(inner) => inner.fmt(f),
            Error::InvalidUserPoolConfigurationException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MfaMethodNotFoundException(inner) => inner.fmt(f),
            Error::NotAuthorizedException(inner) => inner.fmt(f),
            Error::PasswordResetRequiredException(inner) => inner.fmt(f),
            Error::PreconditionNotMetException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ScopeDoesNotExistException(inner) => inner.fmt(f),
            Error::SoftwareTokenMfaNotFoundException(inner) => inner.fmt(f),
            Error::TooManyFailedAttemptsException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::UnexpectedLambdaException(inner) => inner.fmt(f),
            Error::UnsupportedIdentityProviderException(inner) => inner.fmt(f),
            Error::UnsupportedOperationException(inner) => inner.fmt(f),
            Error::UnsupportedTokenTypeException(inner) => inner.fmt(f),
            Error::UnsupportedUserStateException(inner) => inner.fmt(f),
            Error::UserImportInProgressException(inner) => inner.fmt(f),
            Error::UserLambdaValidationException(inner) => inner.fmt(f),
            Error::UserNotConfirmedException(inner) => inner.fmt(f),
            Error::UserNotFoundException(inner) => inner.fmt(f),
            Error::UserPoolAddOnNotEnabledException(inner) => inner.fmt(f),
            Error::UserPoolTaggingException(inner) => inner.fmt(f),
            Error::UsernameExistsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AddCustomAttributesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AddCustomAttributesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AddCustomAttributesErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AddCustomAttributesErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AddCustomAttributesErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AddCustomAttributesErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AddCustomAttributesErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AddCustomAttributesErrorKind::UserImportInProgressException(
                    inner,
                ) => Error::UserImportInProgressException(inner),
                crate::error::AddCustomAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminAddUserToGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminAddUserToGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminAddUserToGroupErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminAddUserToGroupErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminAddUserToGroupErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminAddUserToGroupErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminAddUserToGroupErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminAddUserToGroupErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminAddUserToGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminConfirmSignUpError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminConfirmSignUpError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminConfirmSignUpErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::InvalidLambdaResponseException(
                    inner,
                ) => Error::InvalidLambdaResponseException(inner),
                crate::error::AdminConfirmSignUpErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::TooManyFailedAttemptsException(
                    inner,
                ) => Error::TooManyFailedAttemptsException(inner),
                crate::error::AdminConfirmSignUpErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::UnexpectedLambdaException(inner) => {
                    Error::UnexpectedLambdaException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::UserLambdaValidationException(inner) => {
                    Error::UserLambdaValidationException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminConfirmSignUpErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminCreateUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminCreateUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminCreateUserErrorKind::CodeDeliveryFailureException(inner) => Error::CodeDeliveryFailureException(inner),
                crate::error::AdminCreateUserErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminCreateUserErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::AdminCreateUserErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminCreateUserErrorKind::InvalidPasswordException(inner) => Error::InvalidPasswordException(inner),
                crate::error::AdminCreateUserErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::AdminCreateUserErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::AdminCreateUserErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminCreateUserErrorKind::PreconditionNotMetException(inner) => Error::PreconditionNotMetException(inner),
                crate::error::AdminCreateUserErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminCreateUserErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::AdminCreateUserErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::AdminCreateUserErrorKind::UnsupportedUserStateException(inner) => Error::UnsupportedUserStateException(inner),
                crate::error::AdminCreateUserErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::AdminCreateUserErrorKind::UsernameExistsException(inner) => Error::UsernameExistsException(inner),
                crate::error::AdminCreateUserErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminCreateUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminDeleteUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminDeleteUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminDeleteUserErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminDeleteUserErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminDeleteUserErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminDeleteUserErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminDeleteUserErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminDeleteUserErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminDeleteUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminDeleteUserAttributesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminDeleteUserAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminDeleteUserAttributesErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminDeleteUserAttributesErrorKind::InvalidParameterException(
                    inner,
                ) => Error::InvalidParameterException(inner),
                crate::error::AdminDeleteUserAttributesErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminDeleteUserAttributesErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::AdminDeleteUserAttributesErrorKind::TooManyRequestsException(
                    inner,
                ) => Error::TooManyRequestsException(inner),
                crate::error::AdminDeleteUserAttributesErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminDeleteUserAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminDisableProviderForUserError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminDisableProviderForUserError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminDisableProviderForUserErrorKind::AliasExistsException(inner) => {
                    Error::AliasExistsException(inner)
                }
                crate::error::AdminDisableProviderForUserErrorKind::InternalErrorException(
                    inner,
                ) => Error::InternalErrorException(inner),
                crate::error::AdminDisableProviderForUserErrorKind::InvalidParameterException(
                    inner,
                ) => Error::InvalidParameterException(inner),
                crate::error::AdminDisableProviderForUserErrorKind::NotAuthorizedException(
                    inner,
                ) => Error::NotAuthorizedException(inner),
                crate::error::AdminDisableProviderForUserErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::AdminDisableProviderForUserErrorKind::TooManyRequestsException(
                    inner,
                ) => Error::TooManyRequestsException(inner),
                crate::error::AdminDisableProviderForUserErrorKind::UserNotFoundException(
                    inner,
                ) => Error::UserNotFoundException(inner),
                crate::error::AdminDisableProviderForUserErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminDisableUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminDisableUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminDisableUserErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminDisableUserErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminDisableUserErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminDisableUserErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminDisableUserErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminDisableUserErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminDisableUserErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminEnableUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminEnableUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminEnableUserErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminEnableUserErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminEnableUserErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminEnableUserErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminEnableUserErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminEnableUserErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminEnableUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminForgetDeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminForgetDeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminForgetDeviceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminForgetDeviceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminForgetDeviceErrorKind::InvalidUserPoolConfigurationException(
                    inner,
                ) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::AdminForgetDeviceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminForgetDeviceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminForgetDeviceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminForgetDeviceErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminForgetDeviceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminGetDeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminGetDeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminGetDeviceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminGetDeviceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminGetDeviceErrorKind::InvalidUserPoolConfigurationException(
                    inner,
                ) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::AdminGetDeviceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminGetDeviceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminGetDeviceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminGetDeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminGetUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminGetUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminGetUserErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminGetUserErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminGetUserErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminGetUserErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminGetUserErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminGetUserErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminGetUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminInitiateAuthError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminInitiateAuthError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminInitiateAuthErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminInitiateAuthErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::AdminInitiateAuthErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminInitiateAuthErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::AdminInitiateAuthErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::AdminInitiateAuthErrorKind::InvalidUserPoolConfigurationException(inner) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::AdminInitiateAuthErrorKind::MfaMethodNotFoundException(inner) => Error::MfaMethodNotFoundException(inner),
                crate::error::AdminInitiateAuthErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminInitiateAuthErrorKind::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
                crate::error::AdminInitiateAuthErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminInitiateAuthErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::AdminInitiateAuthErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::AdminInitiateAuthErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::AdminInitiateAuthErrorKind::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
                crate::error::AdminInitiateAuthErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminInitiateAuthErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminLinkProviderForUserError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminLinkProviderForUserError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminLinkProviderForUserErrorKind::AliasExistsException(inner) => {
                    Error::AliasExistsException(inner)
                }
                crate::error::AdminLinkProviderForUserErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminLinkProviderForUserErrorKind::InvalidParameterException(
                    inner,
                ) => Error::InvalidParameterException(inner),
                crate::error::AdminLinkProviderForUserErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::AdminLinkProviderForUserErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminLinkProviderForUserErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::AdminLinkProviderForUserErrorKind::TooManyRequestsException(
                    inner,
                ) => Error::TooManyRequestsException(inner),
                crate::error::AdminLinkProviderForUserErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminLinkProviderForUserErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminListDevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminListDevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminListDevicesErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminListDevicesErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminListDevicesErrorKind::InvalidUserPoolConfigurationException(
                    inner,
                ) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::AdminListDevicesErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminListDevicesErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminListDevicesErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminListDevicesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminListGroupsForUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminListGroupsForUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminListGroupsForUserErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminListGroupsForUserErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminListGroupsForUserErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminListGroupsForUserErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminListGroupsForUserErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminListGroupsForUserErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminListGroupsForUserErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminListUserAuthEventsError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminListUserAuthEventsError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminListUserAuthEventsErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminListUserAuthEventsErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminListUserAuthEventsErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminListUserAuthEventsErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminListUserAuthEventsErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::AdminListUserAuthEventsErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminListUserAuthEventsErrorKind::UserPoolAddOnNotEnabledException(inner) => Error::UserPoolAddOnNotEnabledException(inner),
                crate::error::AdminListUserAuthEventsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminRemoveUserFromGroupError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminRemoveUserFromGroupError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminRemoveUserFromGroupErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminRemoveUserFromGroupErrorKind::InvalidParameterException(
                    inner,
                ) => Error::InvalidParameterException(inner),
                crate::error::AdminRemoveUserFromGroupErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminRemoveUserFromGroupErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::AdminRemoveUserFromGroupErrorKind::TooManyRequestsException(
                    inner,
                ) => Error::TooManyRequestsException(inner),
                crate::error::AdminRemoveUserFromGroupErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminRemoveUserFromGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminResetUserPasswordError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminResetUserPasswordError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminResetUserPasswordErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminResetUserPasswordErrorKind::InvalidEmailRoleAccessPolicyException(inner) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::AdminResetUserPasswordErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::AdminResetUserPasswordErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminResetUserPasswordErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::AdminResetUserPasswordErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::AdminResetUserPasswordErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
                crate::error::AdminResetUserPasswordErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminResetUserPasswordErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminResetUserPasswordErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::AdminResetUserPasswordErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::AdminResetUserPasswordErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::AdminResetUserPasswordErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminResetUserPasswordErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminRespondToAuthChallengeError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminRespondToAuthChallengeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminRespondToAuthChallengeErrorKind::AliasExistsException(inner) => Error::AliasExistsException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::CodeMismatchException(inner) => Error::CodeMismatchException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::ExpiredCodeException(inner) => Error::ExpiredCodeException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::InvalidPasswordException(inner) => Error::InvalidPasswordException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::InvalidUserPoolConfigurationException(inner) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::MfaMethodNotFoundException(inner) => Error::MfaMethodNotFoundException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::SoftwareTokenMfaNotFoundException(inner) => Error::SoftwareTokenMfaNotFoundException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminRespondToAuthChallengeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminSetUserMFAPreferenceError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminSetUserMFAPreferenceError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminSetUserMFAPreferenceErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminSetUserMFAPreferenceErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminSetUserMFAPreferenceErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminSetUserMFAPreferenceErrorKind::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
                crate::error::AdminSetUserMFAPreferenceErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminSetUserMFAPreferenceErrorKind::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
                crate::error::AdminSetUserMFAPreferenceErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminSetUserMFAPreferenceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminSetUserPasswordError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminSetUserPasswordError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminSetUserPasswordErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminSetUserPasswordErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminSetUserPasswordErrorKind::InvalidPasswordException(inner) => {
                    Error::InvalidPasswordException(inner)
                }
                crate::error::AdminSetUserPasswordErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminSetUserPasswordErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminSetUserPasswordErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminSetUserPasswordErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminSetUserPasswordErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminSetUserSettingsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminSetUserSettingsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminSetUserSettingsErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminSetUserSettingsErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminSetUserSettingsErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminSetUserSettingsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminSetUserSettingsErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminSetUserSettingsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminUpdateAuthEventFeedbackError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminUpdateAuthEventFeedbackError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminUpdateAuthEventFeedbackErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminUpdateAuthEventFeedbackErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminUpdateAuthEventFeedbackErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminUpdateAuthEventFeedbackErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminUpdateAuthEventFeedbackErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::AdminUpdateAuthEventFeedbackErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminUpdateAuthEventFeedbackErrorKind::UserPoolAddOnNotEnabledException(inner) => Error::UserPoolAddOnNotEnabledException(inner),
                crate::error::AdminUpdateAuthEventFeedbackErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminUpdateDeviceStatusError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminUpdateDeviceStatusError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminUpdateDeviceStatusErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminUpdateDeviceStatusErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminUpdateDeviceStatusErrorKind::InvalidUserPoolConfigurationException(inner) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::AdminUpdateDeviceStatusErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminUpdateDeviceStatusErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminUpdateDeviceStatusErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::AdminUpdateDeviceStatusErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminUpdateDeviceStatusErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminUpdateUserAttributesError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::AdminUpdateUserAttributesError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AdminUpdateUserAttributesErrorKind::AliasExistsException(inner) => Error::AliasExistsException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::InvalidEmailRoleAccessPolicyException(inner) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::AdminUpdateUserAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AdminUserGlobalSignOutError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AdminUserGlobalSignOutError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::AdminUserGlobalSignOutErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::AdminUserGlobalSignOutErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::AdminUserGlobalSignOutErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::AdminUserGlobalSignOutErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::AdminUserGlobalSignOutErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::AdminUserGlobalSignOutErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::AdminUserGlobalSignOutErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::AssociateSoftwareTokenError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::AssociateSoftwareTokenError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::AssociateSoftwareTokenErrorKind::ConcurrentModificationException(inner) => Error::ConcurrentModificationException(inner),
                crate::error::AssociateSoftwareTokenErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::AssociateSoftwareTokenErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::AssociateSoftwareTokenErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::AssociateSoftwareTokenErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::AssociateSoftwareTokenErrorKind::SoftwareTokenMfaNotFoundException(inner) => Error::SoftwareTokenMfaNotFoundException(inner),
                crate::error::AssociateSoftwareTokenErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ChangePasswordError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ChangePasswordError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ChangePasswordErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ChangePasswordErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ChangePasswordErrorKind::InvalidPasswordException(inner) => {
                    Error::InvalidPasswordException(inner)
                }
                crate::error::ChangePasswordErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ChangePasswordErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ChangePasswordErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::ChangePasswordErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ChangePasswordErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ChangePasswordErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::ChangePasswordErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::ChangePasswordErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ConfirmDeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ConfirmDeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ConfirmDeviceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::InvalidLambdaResponseException(inner) => {
                    Error::InvalidLambdaResponseException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::InvalidPasswordException(inner) => {
                    Error::InvalidPasswordException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::InvalidUserPoolConfigurationException(
                    inner,
                ) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::ConfirmDeviceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::UsernameExistsException(inner) => {
                    Error::UsernameExistsException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::ConfirmDeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ConfirmForgotPasswordError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ConfirmForgotPasswordError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ConfirmForgotPasswordErrorKind::CodeMismatchException(inner) => {
                    Error::CodeMismatchException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::ExpiredCodeException(inner) => {
                    Error::ExpiredCodeException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::InvalidLambdaResponseException(
                    inner,
                ) => Error::InvalidLambdaResponseException(inner),
                crate::error::ConfirmForgotPasswordErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::InvalidPasswordException(inner) => {
                    Error::InvalidPasswordException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::TooManyFailedAttemptsException(
                    inner,
                ) => Error::TooManyFailedAttemptsException(inner),
                crate::error::ConfirmForgotPasswordErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::UnexpectedLambdaException(inner) => {
                    Error::UnexpectedLambdaException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::UserLambdaValidationException(
                    inner,
                ) => Error::UserLambdaValidationException(inner),
                crate::error::ConfirmForgotPasswordErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::ConfirmForgotPasswordErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ConfirmSignUpError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ConfirmSignUpError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ConfirmSignUpErrorKind::AliasExistsException(inner) => {
                    Error::AliasExistsException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::CodeMismatchException(inner) => {
                    Error::CodeMismatchException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::ExpiredCodeException(inner) => {
                    Error::ExpiredCodeException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::InvalidLambdaResponseException(inner) => {
                    Error::InvalidLambdaResponseException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::TooManyFailedAttemptsException(inner) => {
                    Error::TooManyFailedAttemptsException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::UnexpectedLambdaException(inner) => {
                    Error::UnexpectedLambdaException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::UserLambdaValidationException(inner) => {
                    Error::UserLambdaValidationException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::ConfirmSignUpErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateGroupErrorKind::GroupExistsException(inner) => {
                    Error::GroupExistsException(inner)
                }
                crate::error::CreateGroupErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::CreateGroupErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::CreateGroupErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateGroupErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::CreateGroupErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateGroupErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateIdentityProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateIdentityProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateIdentityProviderErrorKind::DuplicateProviderException(
                    inner,
                ) => Error::DuplicateProviderException(inner),
                crate::error::CreateIdentityProviderErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::CreateIdentityProviderErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::CreateIdentityProviderErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateIdentityProviderErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::CreateIdentityProviderErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateIdentityProviderErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateIdentityProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateResourceServerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateResourceServerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateResourceServerErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::CreateResourceServerErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::CreateResourceServerErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateResourceServerErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::CreateResourceServerErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateResourceServerErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateResourceServerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUserImportJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUserImportJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUserImportJobErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::CreateUserImportJobErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::CreateUserImportJobErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateUserImportJobErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::CreateUserImportJobErrorKind::PreconditionNotMetException(inner) => {
                    Error::PreconditionNotMetException(inner)
                }
                crate::error::CreateUserImportJobErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateUserImportJobErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateUserImportJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUserPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUserPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUserPoolErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::CreateUserPoolErrorKind::InvalidEmailRoleAccessPolicyException(
                    inner,
                ) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::CreateUserPoolErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::CreateUserPoolErrorKind::InvalidSmsRoleAccessPolicyException(
                    inner,
                ) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::CreateUserPoolErrorKind::InvalidSmsRoleTrustRelationshipException(
                    inner,
                ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::CreateUserPoolErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateUserPoolErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::CreateUserPoolErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateUserPoolErrorKind::UserPoolTaggingException(inner) => {
                    Error::UserPoolTaggingException(inner)
                }
                crate::error::CreateUserPoolErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUserPoolClientError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUserPoolClientError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUserPoolClientErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::CreateUserPoolClientErrorKind::InvalidOAuthFlowException(inner) => {
                    Error::InvalidOAuthFlowException(inner)
                }
                crate::error::CreateUserPoolClientErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::CreateUserPoolClientErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateUserPoolClientErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::CreateUserPoolClientErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateUserPoolClientErrorKind::ScopeDoesNotExistException(inner) => {
                    Error::ScopeDoesNotExistException(inner)
                }
                crate::error::CreateUserPoolClientErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::CreateUserPoolClientErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::CreateUserPoolDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::CreateUserPoolDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::CreateUserPoolDomainErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::CreateUserPoolDomainErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::CreateUserPoolDomainErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::CreateUserPoolDomainErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::CreateUserPoolDomainErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::CreateUserPoolDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteGroupErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DeleteGroupErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DeleteGroupErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DeleteGroupErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteGroupErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeleteGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteIdentityProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteIdentityProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DeleteIdentityProviderErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::DeleteIdentityProviderErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::DeleteIdentityProviderErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::DeleteIdentityProviderErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::DeleteIdentityProviderErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::DeleteIdentityProviderErrorKind::UnsupportedIdentityProviderException(inner) => Error::UnsupportedIdentityProviderException(inner),
                crate::error::DeleteIdentityProviderErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteResourceServerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteResourceServerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteResourceServerErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DeleteResourceServerErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DeleteResourceServerErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DeleteResourceServerErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteResourceServerErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeleteResourceServerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DeleteUserErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DeleteUserErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DeleteUserErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::DeleteUserErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteUserErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeleteUserErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::DeleteUserErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::DeleteUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserAttributesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserAttributesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserAttributesErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DeleteUserAttributesErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DeleteUserAttributesErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DeleteUserAttributesErrorKind::PasswordResetRequiredException(
                    inner,
                ) => Error::PasswordResetRequiredException(inner),
                crate::error::DeleteUserAttributesErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteUserAttributesErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeleteUserAttributesErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::DeleteUserAttributesErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::DeleteUserAttributesErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserPoolErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DeleteUserPoolErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DeleteUserPoolErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DeleteUserPoolErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteUserPoolErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeleteUserPoolErrorKind::UserImportInProgressException(inner) => {
                    Error::UserImportInProgressException(inner)
                }
                crate::error::DeleteUserPoolErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserPoolClientError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserPoolClientError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserPoolClientErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DeleteUserPoolClientErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DeleteUserPoolClientErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DeleteUserPoolClientErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteUserPoolClientErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DeleteUserPoolClientErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DeleteUserPoolDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DeleteUserPoolDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DeleteUserPoolDomainErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DeleteUserPoolDomainErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DeleteUserPoolDomainErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DeleteUserPoolDomainErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DeleteUserPoolDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeIdentityProviderError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeIdentityProviderError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeIdentityProviderErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DescribeIdentityProviderErrorKind::InvalidParameterException(
                    inner,
                ) => Error::InvalidParameterException(inner),
                crate::error::DescribeIdentityProviderErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DescribeIdentityProviderErrorKind::ResourceNotFoundException(
                    inner,
                ) => Error::ResourceNotFoundException(inner),
                crate::error::DescribeIdentityProviderErrorKind::TooManyRequestsException(
                    inner,
                ) => Error::TooManyRequestsException(inner),
                crate::error::DescribeIdentityProviderErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeResourceServerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeResourceServerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeResourceServerErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DescribeResourceServerErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DescribeResourceServerErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DescribeResourceServerErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeResourceServerErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DescribeResourceServerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeRiskConfigurationError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::DescribeRiskConfigurationError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::DescribeRiskConfigurationErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::DescribeRiskConfigurationErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::DescribeRiskConfigurationErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::DescribeRiskConfigurationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::DescribeRiskConfigurationErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::DescribeRiskConfigurationErrorKind::UserPoolAddOnNotEnabledException(inner) => Error::UserPoolAddOnNotEnabledException(inner),
                crate::error::DescribeRiskConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeUserImportJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeUserImportJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeUserImportJobErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DescribeUserImportJobErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DescribeUserImportJobErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DescribeUserImportJobErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeUserImportJobErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DescribeUserImportJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeUserPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeUserPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeUserPoolErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DescribeUserPoolErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DescribeUserPoolErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DescribeUserPoolErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeUserPoolErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DescribeUserPoolErrorKind::UserPoolTaggingException(inner) => {
                    Error::UserPoolTaggingException(inner)
                }
                crate::error::DescribeUserPoolErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeUserPoolClientError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeUserPoolClientError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeUserPoolClientErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DescribeUserPoolClientErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DescribeUserPoolClientErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DescribeUserPoolClientErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeUserPoolClientErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::DescribeUserPoolClientErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::DescribeUserPoolDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::DescribeUserPoolDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::DescribeUserPoolDomainErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::DescribeUserPoolDomainErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::DescribeUserPoolDomainErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::DescribeUserPoolDomainErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::DescribeUserPoolDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ForgetDeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ForgetDeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ForgetDeviceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ForgetDeviceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ForgetDeviceErrorKind::InvalidUserPoolConfigurationException(
                    inner,
                ) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::ForgetDeviceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ForgetDeviceErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::ForgetDeviceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ForgetDeviceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ForgetDeviceErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::ForgetDeviceErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::ForgetDeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ForgotPasswordError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ForgotPasswordError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ForgotPasswordErrorKind::CodeDeliveryFailureException(inner) => {
                    Error::CodeDeliveryFailureException(inner)
                }
                crate::error::ForgotPasswordErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ForgotPasswordErrorKind::InvalidEmailRoleAccessPolicyException(
                    inner,
                ) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::ForgotPasswordErrorKind::InvalidLambdaResponseException(inner) => {
                    Error::InvalidLambdaResponseException(inner)
                }
                crate::error::ForgotPasswordErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ForgotPasswordErrorKind::InvalidSmsRoleAccessPolicyException(
                    inner,
                ) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::ForgotPasswordErrorKind::InvalidSmsRoleTrustRelationshipException(
                    inner,
                ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::ForgotPasswordErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::ForgotPasswordErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ForgotPasswordErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ForgotPasswordErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ForgotPasswordErrorKind::UnexpectedLambdaException(inner) => {
                    Error::UnexpectedLambdaException(inner)
                }
                crate::error::ForgotPasswordErrorKind::UserLambdaValidationException(inner) => {
                    Error::UserLambdaValidationException(inner)
                }
                crate::error::ForgotPasswordErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::ForgotPasswordErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::ForgotPasswordErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetCSVHeaderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetCSVHeaderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetCSVHeaderErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::GetCSVHeaderErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::GetCSVHeaderErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::GetCSVHeaderErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetCSVHeaderErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::GetCSVHeaderErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetDeviceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetDeviceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetDeviceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::GetDeviceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::GetDeviceErrorKind::InvalidUserPoolConfigurationException(inner) => {
                    Error::InvalidUserPoolConfigurationException(inner)
                }
                crate::error::GetDeviceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::GetDeviceErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::GetDeviceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetDeviceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::GetDeviceErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::GetDeviceErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::GetDeviceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetGroupErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::GetGroupErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::GetGroupErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::GetGroupErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetGroupErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::GetGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetIdentityProviderByIdentifierError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetIdentityProviderByIdentifierError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetIdentityProviderByIdentifierErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::GetIdentityProviderByIdentifierErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::GetIdentityProviderByIdentifierErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::GetIdentityProviderByIdentifierErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::GetIdentityProviderByIdentifierErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::GetIdentityProviderByIdentifierErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetSigningCertificateError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetSigningCertificateError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetSigningCertificateErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::GetSigningCertificateErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::GetSigningCertificateErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetSigningCertificateErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUICustomizationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUICustomizationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUICustomizationErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::GetUICustomizationErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::GetUICustomizationErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::GetUICustomizationErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetUICustomizationErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::GetUICustomizationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUserError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUserError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUserErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::GetUserErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::GetUserErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::GetUserErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::GetUserErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetUserErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::GetUserErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::GetUserErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::GetUserErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUserAttributeVerificationCodeError>>
    for Error
{
    fn from(
        err: smithy_http::result::SdkError<crate::error::GetUserAttributeVerificationCodeError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::GetUserAttributeVerificationCodeErrorKind::CodeDeliveryFailureException(inner) => Error::CodeDeliveryFailureException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::InvalidEmailRoleAccessPolicyException(inner) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::GetUserAttributeVerificationCodeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GetUserPoolMfaConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GetUserPoolMfaConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GetUserPoolMfaConfigErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::GetUserPoolMfaConfigErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::GetUserPoolMfaConfigErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::GetUserPoolMfaConfigErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GetUserPoolMfaConfigErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::GetUserPoolMfaConfigErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::GlobalSignOutError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::GlobalSignOutError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::GlobalSignOutErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::GlobalSignOutErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::GlobalSignOutErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::GlobalSignOutErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::GlobalSignOutErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::GlobalSignOutErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::GlobalSignOutErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::GlobalSignOutErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::InitiateAuthError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::InitiateAuthError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::InitiateAuthErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::InitiateAuthErrorKind::InvalidLambdaResponseException(inner) => {
                    Error::InvalidLambdaResponseException(inner)
                }
                crate::error::InitiateAuthErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::InitiateAuthErrorKind::InvalidSmsRoleAccessPolicyException(inner) => {
                    Error::InvalidSmsRoleAccessPolicyException(inner)
                }
                crate::error::InitiateAuthErrorKind::InvalidSmsRoleTrustRelationshipException(
                    inner,
                ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::InitiateAuthErrorKind::InvalidUserPoolConfigurationException(
                    inner,
                ) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::InitiateAuthErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::InitiateAuthErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::InitiateAuthErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::InitiateAuthErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::InitiateAuthErrorKind::UnexpectedLambdaException(inner) => {
                    Error::UnexpectedLambdaException(inner)
                }
                crate::error::InitiateAuthErrorKind::UserLambdaValidationException(inner) => {
                    Error::UserLambdaValidationException(inner)
                }
                crate::error::InitiateAuthErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::InitiateAuthErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::InitiateAuthErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListDevicesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListDevicesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListDevicesErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListDevicesErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListDevicesErrorKind::InvalidUserPoolConfigurationException(
                    inner,
                ) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::ListDevicesErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListDevicesErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::ListDevicesErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListDevicesErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListDevicesErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::ListDevicesErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::ListDevicesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListGroupsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListGroupsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListGroupsErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListGroupsErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListGroupsErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListGroupsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListGroupsErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListGroupsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListIdentityProvidersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListIdentityProvidersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListIdentityProvidersErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListIdentityProvidersErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListIdentityProvidersErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListIdentityProvidersErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListIdentityProvidersErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListIdentityProvidersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListResourceServersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListResourceServersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListResourceServersErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListResourceServersErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListResourceServersErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListResourceServersErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListResourceServersErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListResourceServersErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListTagsForResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListTagsForResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListTagsForResourceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListTagsForResourceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUserImportJobsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUserImportJobsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUserImportJobsErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListUserImportJobsErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListUserImportJobsErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListUserImportJobsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListUserImportJobsErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListUserImportJobsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUserPoolClientsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUserPoolClientsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUserPoolClientsErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListUserPoolClientsErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListUserPoolClientsErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListUserPoolClientsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListUserPoolClientsErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListUserPoolClientsErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUserPoolsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUserPoolsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUserPoolsErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListUserPoolsErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListUserPoolsErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListUserPoolsErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListUserPoolsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUsersError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUsersError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUsersErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListUsersErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListUsersErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListUsersErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListUsersErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListUsersErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ListUsersInGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ListUsersInGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::ListUsersInGroupErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::ListUsersInGroupErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::ListUsersInGroupErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::ListUsersInGroupErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::ListUsersInGroupErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::ListUsersInGroupErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::ResendConfirmationCodeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::ResendConfirmationCodeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::ResendConfirmationCodeErrorKind::CodeDeliveryFailureException(inner) => Error::CodeDeliveryFailureException(inner),
                crate::error::ResendConfirmationCodeErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::ResendConfirmationCodeErrorKind::InvalidEmailRoleAccessPolicyException(inner) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::ResendConfirmationCodeErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::ResendConfirmationCodeErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::ResendConfirmationCodeErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::ResendConfirmationCodeErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::ResendConfirmationCodeErrorKind::LimitExceededException(inner) => Error::LimitExceededException(inner),
                crate::error::ResendConfirmationCodeErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::ResendConfirmationCodeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::ResendConfirmationCodeErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::ResendConfirmationCodeErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::ResendConfirmationCodeErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::ResendConfirmationCodeErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::ResendConfirmationCodeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RespondToAuthChallengeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RespondToAuthChallengeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::RespondToAuthChallengeErrorKind::AliasExistsException(inner) => Error::AliasExistsException(inner),
                crate::error::RespondToAuthChallengeErrorKind::CodeMismatchException(inner) => Error::CodeMismatchException(inner),
                crate::error::RespondToAuthChallengeErrorKind::ExpiredCodeException(inner) => Error::ExpiredCodeException(inner),
                crate::error::RespondToAuthChallengeErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::RespondToAuthChallengeErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::RespondToAuthChallengeErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::RespondToAuthChallengeErrorKind::InvalidPasswordException(inner) => Error::InvalidPasswordException(inner),
                crate::error::RespondToAuthChallengeErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::RespondToAuthChallengeErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::RespondToAuthChallengeErrorKind::InvalidUserPoolConfigurationException(inner) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::RespondToAuthChallengeErrorKind::MfaMethodNotFoundException(inner) => Error::MfaMethodNotFoundException(inner),
                crate::error::RespondToAuthChallengeErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::RespondToAuthChallengeErrorKind::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
                crate::error::RespondToAuthChallengeErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::RespondToAuthChallengeErrorKind::SoftwareTokenMfaNotFoundException(inner) => Error::SoftwareTokenMfaNotFoundException(inner),
                crate::error::RespondToAuthChallengeErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::RespondToAuthChallengeErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::RespondToAuthChallengeErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::RespondToAuthChallengeErrorKind::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
                crate::error::RespondToAuthChallengeErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::RespondToAuthChallengeErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::RevokeTokenError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::RevokeTokenError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::RevokeTokenErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::RevokeTokenErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::RevokeTokenErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::RevokeTokenErrorKind::UnauthorizedException(inner) => {
                    Error::UnauthorizedException(inner)
                }
                crate::error::RevokeTokenErrorKind::UnsupportedOperationException(inner) => {
                    Error::UnsupportedOperationException(inner)
                }
                crate::error::RevokeTokenErrorKind::UnsupportedTokenTypeException(inner) => {
                    Error::UnsupportedTokenTypeException(inner)
                }
                crate::error::RevokeTokenErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetRiskConfigurationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetRiskConfigurationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::SetRiskConfigurationErrorKind::CodeDeliveryFailureException(inner) => Error::CodeDeliveryFailureException(inner),
                crate::error::SetRiskConfigurationErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::SetRiskConfigurationErrorKind::InvalidEmailRoleAccessPolicyException(inner) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::SetRiskConfigurationErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::SetRiskConfigurationErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::SetRiskConfigurationErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::SetRiskConfigurationErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::SetRiskConfigurationErrorKind::UserPoolAddOnNotEnabledException(inner) => Error::UserPoolAddOnNotEnabledException(inner),
                crate::error::SetRiskConfigurationErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetUICustomizationError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetUICustomizationError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetUICustomizationErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::SetUICustomizationErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::SetUICustomizationErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::SetUICustomizationErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::SetUICustomizationErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::SetUICustomizationErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetUserMFAPreferenceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetUserMFAPreferenceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetUserMFAPreferenceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::SetUserMFAPreferenceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::SetUserMFAPreferenceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::SetUserMFAPreferenceErrorKind::PasswordResetRequiredException(
                    inner,
                ) => Error::PasswordResetRequiredException(inner),
                crate::error::SetUserMFAPreferenceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::SetUserMFAPreferenceErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::SetUserMFAPreferenceErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::SetUserMFAPreferenceErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetUserPoolMfaConfigError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetUserPoolMfaConfigError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::SetUserPoolMfaConfigErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::SetUserPoolMfaConfigErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::SetUserPoolMfaConfigErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::SetUserPoolMfaConfigErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::SetUserPoolMfaConfigErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::SetUserPoolMfaConfigErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::SetUserPoolMfaConfigErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::SetUserPoolMfaConfigErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SetUserSettingsError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SetUserSettingsError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SetUserSettingsErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::SetUserSettingsErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::SetUserSettingsErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::SetUserSettingsErrorKind::PasswordResetRequiredException(inner) => {
                    Error::PasswordResetRequiredException(inner)
                }
                crate::error::SetUserSettingsErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::SetUserSettingsErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::SetUserSettingsErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::SetUserSettingsErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::SignUpError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::SignUpError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::SignUpErrorKind::CodeDeliveryFailureException(inner) => {
                    Error::CodeDeliveryFailureException(inner)
                }
                crate::error::SignUpErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::SignUpErrorKind::InvalidEmailRoleAccessPolicyException(inner) => {
                    Error::InvalidEmailRoleAccessPolicyException(inner)
                }
                crate::error::SignUpErrorKind::InvalidLambdaResponseException(inner) => {
                    Error::InvalidLambdaResponseException(inner)
                }
                crate::error::SignUpErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::SignUpErrorKind::InvalidPasswordException(inner) => {
                    Error::InvalidPasswordException(inner)
                }
                crate::error::SignUpErrorKind::InvalidSmsRoleAccessPolicyException(inner) => {
                    Error::InvalidSmsRoleAccessPolicyException(inner)
                }
                crate::error::SignUpErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => {
                    Error::InvalidSmsRoleTrustRelationshipException(inner)
                }
                crate::error::SignUpErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::SignUpErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::SignUpErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::SignUpErrorKind::UnexpectedLambdaException(inner) => {
                    Error::UnexpectedLambdaException(inner)
                }
                crate::error::SignUpErrorKind::UserLambdaValidationException(inner) => {
                    Error::UserLambdaValidationException(inner)
                }
                crate::error::SignUpErrorKind::UsernameExistsException(inner) => {
                    Error::UsernameExistsException(inner)
                }
                crate::error::SignUpErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StartUserImportJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StartUserImportJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StartUserImportJobErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::StartUserImportJobErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::StartUserImportJobErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::StartUserImportJobErrorKind::PreconditionNotMetException(inner) => {
                    Error::PreconditionNotMetException(inner)
                }
                crate::error::StartUserImportJobErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::StartUserImportJobErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::StartUserImportJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::StopUserImportJobError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::StopUserImportJobError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::StopUserImportJobErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::StopUserImportJobErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::StopUserImportJobErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::StopUserImportJobErrorKind::PreconditionNotMetException(inner) => {
                    Error::PreconditionNotMetException(inner)
                }
                crate::error::StopUserImportJobErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::StopUserImportJobErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::StopUserImportJobErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::TagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::TagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::TagResourceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::TagResourceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::TagResourceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::TagResourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::TagResourceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::TagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UntagResourceError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UntagResourceError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UntagResourceErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::UntagResourceErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::UntagResourceErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::UntagResourceErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UntagResourceErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::UntagResourceErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateAuthEventFeedbackError>> for Error {
    fn from(
        err: smithy_http::result::SdkError<crate::error::UpdateAuthEventFeedbackError>,
    ) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateAuthEventFeedbackErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::UpdateAuthEventFeedbackErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::UpdateAuthEventFeedbackErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::UpdateAuthEventFeedbackErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::UpdateAuthEventFeedbackErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::UpdateAuthEventFeedbackErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::UpdateAuthEventFeedbackErrorKind::UserPoolAddOnNotEnabledException(inner) => Error::UserPoolAddOnNotEnabledException(inner),
                crate::error::UpdateAuthEventFeedbackErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateDeviceStatusError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateDeviceStatusError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateDeviceStatusErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::UpdateDeviceStatusErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::UpdateDeviceStatusErrorKind::InvalidUserPoolConfigurationException(inner) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::UpdateDeviceStatusErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::UpdateDeviceStatusErrorKind::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
                crate::error::UpdateDeviceStatusErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::UpdateDeviceStatusErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::UpdateDeviceStatusErrorKind::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
                crate::error::UpdateDeviceStatusErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::UpdateDeviceStatusErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateGroupError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateGroupError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateGroupErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::UpdateGroupErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::UpdateGroupErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::UpdateGroupErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateGroupErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::UpdateGroupErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateIdentityProviderError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateIdentityProviderError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateIdentityProviderErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::UpdateIdentityProviderErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::UpdateIdentityProviderErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::UpdateIdentityProviderErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::UpdateIdentityProviderErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::UpdateIdentityProviderErrorKind::UnsupportedIdentityProviderException(inner) => Error::UnsupportedIdentityProviderException(inner),
                crate::error::UpdateIdentityProviderErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateResourceServerError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateResourceServerError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateResourceServerErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::UpdateResourceServerErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::UpdateResourceServerErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::UpdateResourceServerErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateResourceServerErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::UpdateResourceServerErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUserAttributesError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUserAttributesError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::UpdateUserAttributesErrorKind::AliasExistsException(inner) => Error::AliasExistsException(inner),
                crate::error::UpdateUserAttributesErrorKind::CodeDeliveryFailureException(inner) => Error::CodeDeliveryFailureException(inner),
                crate::error::UpdateUserAttributesErrorKind::CodeMismatchException(inner) => Error::CodeMismatchException(inner),
                crate::error::UpdateUserAttributesErrorKind::ExpiredCodeException(inner) => Error::ExpiredCodeException(inner),
                crate::error::UpdateUserAttributesErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::UpdateUserAttributesErrorKind::InvalidEmailRoleAccessPolicyException(inner) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::UpdateUserAttributesErrorKind::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
                crate::error::UpdateUserAttributesErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::UpdateUserAttributesErrorKind::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::UpdateUserAttributesErrorKind::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::UpdateUserAttributesErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::UpdateUserAttributesErrorKind::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
                crate::error::UpdateUserAttributesErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::UpdateUserAttributesErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::UpdateUserAttributesErrorKind::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
                crate::error::UpdateUserAttributesErrorKind::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
                crate::error::UpdateUserAttributesErrorKind::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
                crate::error::UpdateUserAttributesErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::UpdateUserAttributesErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUserPoolError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUserPoolError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateUserPoolErrorKind::ConcurrentModificationException(inner) => {
                    Error::ConcurrentModificationException(inner)
                }
                crate::error::UpdateUserPoolErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::UpdateUserPoolErrorKind::InvalidEmailRoleAccessPolicyException(
                    inner,
                ) => Error::InvalidEmailRoleAccessPolicyException(inner),
                crate::error::UpdateUserPoolErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::UpdateUserPoolErrorKind::InvalidSmsRoleAccessPolicyException(
                    inner,
                ) => Error::InvalidSmsRoleAccessPolicyException(inner),
                crate::error::UpdateUserPoolErrorKind::InvalidSmsRoleTrustRelationshipException(
                    inner,
                ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
                crate::error::UpdateUserPoolErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::UpdateUserPoolErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateUserPoolErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::UpdateUserPoolErrorKind::UserImportInProgressException(inner) => {
                    Error::UserImportInProgressException(inner)
                }
                crate::error::UpdateUserPoolErrorKind::UserPoolTaggingException(inner) => {
                    Error::UserPoolTaggingException(inner)
                }
                crate::error::UpdateUserPoolErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUserPoolClientError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUserPoolClientError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateUserPoolClientErrorKind::ConcurrentModificationException(
                    inner,
                ) => Error::ConcurrentModificationException(inner),
                crate::error::UpdateUserPoolClientErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::UpdateUserPoolClientErrorKind::InvalidOAuthFlowException(inner) => {
                    Error::InvalidOAuthFlowException(inner)
                }
                crate::error::UpdateUserPoolClientErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::UpdateUserPoolClientErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::UpdateUserPoolClientErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateUserPoolClientErrorKind::ScopeDoesNotExistException(inner) => {
                    Error::ScopeDoesNotExistException(inner)
                }
                crate::error::UpdateUserPoolClientErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::UpdateUserPoolClientErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::UpdateUserPoolDomainError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::UpdateUserPoolDomainError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::UpdateUserPoolDomainErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::UpdateUserPoolDomainErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::UpdateUserPoolDomainErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::UpdateUserPoolDomainErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::UpdateUserPoolDomainErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::UpdateUserPoolDomainErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::VerifySoftwareTokenError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::VerifySoftwareTokenError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, ..} => match err.kind {
                crate::error::VerifySoftwareTokenErrorKind::CodeMismatchException(inner) => Error::CodeMismatchException(inner),
                crate::error::VerifySoftwareTokenErrorKind::EnableSoftwareTokenMfaException(inner) => Error::EnableSoftwareTokenMfaException(inner),
                crate::error::VerifySoftwareTokenErrorKind::InternalErrorException(inner) => Error::InternalErrorException(inner),
                crate::error::VerifySoftwareTokenErrorKind::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
                crate::error::VerifySoftwareTokenErrorKind::InvalidUserPoolConfigurationException(inner) => Error::InvalidUserPoolConfigurationException(inner),
                crate::error::VerifySoftwareTokenErrorKind::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
                crate::error::VerifySoftwareTokenErrorKind::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
                crate::error::VerifySoftwareTokenErrorKind::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
                crate::error::VerifySoftwareTokenErrorKind::SoftwareTokenMfaNotFoundException(inner) => Error::SoftwareTokenMfaNotFoundException(inner),
                crate::error::VerifySoftwareTokenErrorKind::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
                crate::error::VerifySoftwareTokenErrorKind::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
                crate::error::VerifySoftwareTokenErrorKind::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
                crate::error::VerifySoftwareTokenErrorKind::Unhandled(inner) => Error::Unhandled(inner),
            }
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl From<smithy_http::result::SdkError<crate::error::VerifyUserAttributeError>> for Error {
    fn from(err: smithy_http::result::SdkError<crate::error::VerifyUserAttributeError>) -> Self {
        match err {
            smithy_http::result::SdkError::ServiceError { err, .. } => match err.kind {
                crate::error::VerifyUserAttributeErrorKind::CodeMismatchException(inner) => {
                    Error::CodeMismatchException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::ExpiredCodeException(inner) => {
                    Error::ExpiredCodeException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::InternalErrorException(inner) => {
                    Error::InternalErrorException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::InvalidParameterException(inner) => {
                    Error::InvalidParameterException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::LimitExceededException(inner) => {
                    Error::LimitExceededException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::NotAuthorizedException(inner) => {
                    Error::NotAuthorizedException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::PasswordResetRequiredException(
                    inner,
                ) => Error::PasswordResetRequiredException(inner),
                crate::error::VerifyUserAttributeErrorKind::ResourceNotFoundException(inner) => {
                    Error::ResourceNotFoundException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::TooManyRequestsException(inner) => {
                    Error::TooManyRequestsException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::UserNotConfirmedException(inner) => {
                    Error::UserNotConfirmedException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::UserNotFoundException(inner) => {
                    Error::UserNotFoundException(inner)
                }
                crate::error::VerifyUserAttributeErrorKind::Unhandled(inner) => {
                    Error::Unhandled(inner)
                }
            },
            _ => Error::Unhandled(err.into()),
        }
    }
}
impl std::error::Error for Error {}
