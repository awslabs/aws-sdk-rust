// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>This exception is thrown when a user tries to confirm the account with an email address or phone number that has already been supplied as an alias for a different user profile. This exception indicates that an account with this email address or phone already exists in a user pool that you've configured to use email address or phone number as a sign-in alias.</p>
    AliasExistsException(crate::error::AliasExistsException),
    /// <p>This exception is thrown when a verification code fails to deliver successfully.</p>
    CodeDeliveryFailureException(crate::error::CodeDeliveryFailureException),
    /// <p>This exception is thrown if the provided code doesn't match what the server was expecting.</p>
    CodeMismatchException(crate::error::CodeMismatchException),
    /// <p>This exception is thrown if two or more modifications are happening concurrently.</p>
    ConcurrentModificationException(crate::error::ConcurrentModificationException),
    /// <p>This exception is thrown when the provider is already supported by the user pool.</p>
    DuplicateProviderException(crate::error::DuplicateProviderException),
    /// <p>This exception is thrown when there is a code mismatch and the service fails to configure the software token TOTP multi-factor authentication (MFA).</p>
    EnableSoftwareTokenMfaException(crate::error::EnableSoftwareTokenMfaException),
    /// <p>This exception is thrown if a code has expired.</p>
    ExpiredCodeException(crate::error::ExpiredCodeException),
    /// <p>This exception is thrown when WAF doesn't allow your request based on a web ACL that's associated with your user pool.</p>
    ForbiddenException(crate::error::ForbiddenException),
    /// <p>This exception is thrown when Amazon Cognito encounters a group that already exists in the user pool.</p>
    GroupExistsException(crate::error::GroupExistsException),
    /// <p>This exception is thrown when Amazon Cognito encounters an internal error.</p>
    InternalErrorException(crate::error::InternalErrorException),
    /// <p>This exception is thrown when Amazon Cognito isn't allowed to use your email identity. HTTP status code: 400.</p>
    InvalidEmailRoleAccessPolicyException(crate::error::InvalidEmailRoleAccessPolicyException),
    /// <p>This exception is thrown when Amazon Cognito encounters an invalid Lambda response.</p>
    InvalidLambdaResponseException(crate::error::InvalidLambdaResponseException),
    /// <p>This exception is thrown when the specified OAuth flow is not valid.</p>
    InvalidOAuthFlowException(crate::error::InvalidOAuthFlowException),
    /// <p>This exception is thrown when the Amazon Cognito service encounters an invalid parameter.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>This exception is thrown when Amazon Cognito encounters an invalid password.</p>
    InvalidPasswordException(crate::error::InvalidPasswordException),
    /// <p>This exception is returned when the role provided for SMS configuration doesn't have permission to publish using Amazon SNS.</p>
    InvalidSmsRoleAccessPolicyException(crate::error::InvalidSmsRoleAccessPolicyException),
    /// <p>This exception is thrown when the trust relationship is not valid for the role provided for SMS configuration. This can happen if you don't trust <code>cognito-idp.amazonaws.com</code> or the external ID provided in the role does not match what is provided in the SMS configuration for the user pool.</p>
    InvalidSmsRoleTrustRelationshipException(
        crate::error::InvalidSmsRoleTrustRelationshipException,
    ),
    /// <p>This exception is thrown when the user pool configuration is not valid.</p>
    InvalidUserPoolConfigurationException(crate::error::InvalidUserPoolConfigurationException),
    /// <p>This exception is thrown when a user exceeds the limit for a requested Amazon Web Services resource.</p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>This exception is thrown when Amazon Cognito can't find a multi-factor authentication (MFA) method.</p>
    MfaMethodNotFoundException(crate::error::MfaMethodNotFoundException),
    /// <p>This exception is thrown when a user isn't authorized.</p>
    NotAuthorizedException(crate::error::NotAuthorizedException),
    /// <p>This exception is thrown when a password reset is required.</p>
    PasswordResetRequiredException(crate::error::PasswordResetRequiredException),
    /// <p>This exception is thrown when a precondition is not met.</p>
    PreconditionNotMetException(crate::error::PreconditionNotMetException),
    /// <p>This exception is thrown when the Amazon Cognito service can't find the requested resource.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>This exception is thrown when the specified scope doesn't exist.</p>
    ScopeDoesNotExistException(crate::error::ScopeDoesNotExistException),
    /// <p>This exception is thrown when the software token time-based one-time password (TOTP) multi-factor authentication (MFA) isn't activated for the user pool.</p>
    SoftwareTokenMfaNotFoundException(crate::error::SoftwareTokenMfaNotFoundException),
    /// <p>This exception is thrown when the user has made too many failed attempts for a given action, such as sign-in.</p>
    TooManyFailedAttemptsException(crate::error::TooManyFailedAttemptsException),
    /// <p>This exception is thrown when the user has made too many requests for a given operation.</p>
    TooManyRequestsException(crate::error::TooManyRequestsException),
    /// <p>Exception that is thrown when the request isn't authorized. This can happen due to an invalid access token in the request.</p>
    UnauthorizedException(crate::error::UnauthorizedException),
    /// <p>This exception is thrown when Amazon Cognito encounters an unexpected exception with Lambda.</p>
    UnexpectedLambdaException(crate::error::UnexpectedLambdaException),
    /// <p>This exception is thrown when the specified identifier isn't supported.</p>
    UnsupportedIdentityProviderException(crate::error::UnsupportedIdentityProviderException),
    /// <p>Exception that is thrown when you attempt to perform an operation that isn't enabled for the user pool client.</p>
    UnsupportedOperationException(crate::error::UnsupportedOperationException),
    /// <p>Exception that is thrown when an unsupported token is passed to an operation.</p>
    UnsupportedTokenTypeException(crate::error::UnsupportedTokenTypeException),
    /// <p>The request failed because the user is in an unsupported state.</p>
    UnsupportedUserStateException(crate::error::UnsupportedUserStateException),
    /// <p>This exception is thrown when you're trying to modify a user pool while a user import job is in progress for that pool.</p>
    UserImportInProgressException(crate::error::UserImportInProgressException),
    /// <p>This exception is thrown when the Amazon Cognito service encounters a user validation exception with the Lambda service.</p>
    UserLambdaValidationException(crate::error::UserLambdaValidationException),
    /// <p>This exception is thrown when a user isn't confirmed successfully.</p>
    UserNotConfirmedException(crate::error::UserNotConfirmedException),
    /// <p>This exception is thrown when a user isn't found.</p>
    UserNotFoundException(crate::error::UserNotFoundException),
    /// <p>This exception is thrown when user pool add-ons aren't enabled.</p>
    UserPoolAddOnNotEnabledException(crate::error::UserPoolAddOnNotEnabledException),
    /// <p>This exception is thrown when a user pool tag can't be set or updated.</p>
    UserPoolTaggingException(crate::error::UserPoolTaggingException),
    /// <p>This exception is thrown when Amazon Cognito encounters a user name that already exists in the user pool.</p>
    UsernameExistsException(crate::error::UsernameExistsException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AliasExistsException(inner) => inner.fmt(f),
            Error::CodeDeliveryFailureException(inner) => inner.fmt(f),
            Error::CodeMismatchException(inner) => inner.fmt(f),
            Error::ConcurrentModificationException(inner) => inner.fmt(f),
            Error::DuplicateProviderException(inner) => inner.fmt(f),
            Error::EnableSoftwareTokenMfaException(inner) => inner.fmt(f),
            Error::ExpiredCodeException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::GroupExistsException(inner) => inner.fmt(f),
            Error::InternalErrorException(inner) => inner.fmt(f),
            Error::InvalidEmailRoleAccessPolicyException(inner) => inner.fmt(f),
            Error::InvalidLambdaResponseException(inner) => inner.fmt(f),
            Error::InvalidOAuthFlowException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::InvalidPasswordException(inner) => inner.fmt(f),
            Error::InvalidSmsRoleAccessPolicyException(inner) => inner.fmt(f),
            Error::InvalidSmsRoleTrustRelationshipException(inner) => inner.fmt(f),
            Error::InvalidUserPoolConfigurationException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::MfaMethodNotFoundException(inner) => inner.fmt(f),
            Error::NotAuthorizedException(inner) => inner.fmt(f),
            Error::PasswordResetRequiredException(inner) => inner.fmt(f),
            Error::PreconditionNotMetException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ScopeDoesNotExistException(inner) => inner.fmt(f),
            Error::SoftwareTokenMfaNotFoundException(inner) => inner.fmt(f),
            Error::TooManyFailedAttemptsException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::UnexpectedLambdaException(inner) => inner.fmt(f),
            Error::UnsupportedIdentityProviderException(inner) => inner.fmt(f),
            Error::UnsupportedOperationException(inner) => inner.fmt(f),
            Error::UnsupportedTokenTypeException(inner) => inner.fmt(f),
            Error::UnsupportedUserStateException(inner) => inner.fmt(f),
            Error::UserImportInProgressException(inner) => inner.fmt(f),
            Error::UserLambdaValidationException(inner) => inner.fmt(f),
            Error::UserNotConfirmedException(inner) => inner.fmt(f),
            Error::UserNotFoundException(inner) => inner.fmt(f),
            Error::UserPoolAddOnNotEnabledException(inner) => inner.fmt(f),
            Error::UserPoolTaggingException(inner) => inner.fmt(f),
            Error::UsernameExistsException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AddCustomAttributesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AddCustomAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AddCustomAttributesError> for Error {
    fn from(err: crate::error::AddCustomAttributesError) -> Self {
        match err {
            crate::error::AddCustomAttributesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AddCustomAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AddCustomAttributesError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AddCustomAttributesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AddCustomAttributesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AddCustomAttributesError::UserImportInProgressException(inner) => {
                Error::UserImportInProgressException(inner)
            }
            crate::error::AddCustomAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminAddUserToGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminAddUserToGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminAddUserToGroupError> for Error {
    fn from(err: crate::error::AdminAddUserToGroupError) -> Self {
        match err {
            crate::error::AdminAddUserToGroupError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminAddUserToGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminAddUserToGroupError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminAddUserToGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminAddUserToGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminAddUserToGroupError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminAddUserToGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminConfirmSignUpError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminConfirmSignUpError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminConfirmSignUpError> for Error {
    fn from(err: crate::error::AdminConfirmSignUpError) -> Self {
        match err {
            crate::error::AdminConfirmSignUpError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminConfirmSignUpError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::AdminConfirmSignUpError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminConfirmSignUpError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AdminConfirmSignUpError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminConfirmSignUpError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminConfirmSignUpError::TooManyFailedAttemptsException(inner) => {
                Error::TooManyFailedAttemptsException(inner)
            }
            crate::error::AdminConfirmSignUpError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminConfirmSignUpError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::AdminConfirmSignUpError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::AdminConfirmSignUpError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminConfirmSignUpError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminCreateUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AdminCreateUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminCreateUserError> for Error {
    fn from(err: crate::error::AdminCreateUserError) -> Self {
        match err {
            crate::error::AdminCreateUserError::CodeDeliveryFailureException(inner) => {
                Error::CodeDeliveryFailureException(inner)
            }
            crate::error::AdminCreateUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminCreateUserError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::AdminCreateUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminCreateUserError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::AdminCreateUserError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::AdminCreateUserError::InvalidSmsRoleTrustRelationshipException(inner) => {
                Error::InvalidSmsRoleTrustRelationshipException(inner)
            }
            crate::error::AdminCreateUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminCreateUserError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::AdminCreateUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminCreateUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminCreateUserError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::AdminCreateUserError::UnsupportedUserStateException(inner) => {
                Error::UnsupportedUserStateException(inner)
            }
            crate::error::AdminCreateUserError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::AdminCreateUserError::UsernameExistsException(inner) => {
                Error::UsernameExistsException(inner)
            }
            crate::error::AdminCreateUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminCreateUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminDeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AdminDeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminDeleteUserError> for Error {
    fn from(err: crate::error::AdminDeleteUserError) -> Self {
        match err {
            crate::error::AdminDeleteUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminDeleteUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminDeleteUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminDeleteUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminDeleteUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminDeleteUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminDeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminDeleteUserAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminDeleteUserAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminDeleteUserAttributesError> for Error {
    fn from(err: crate::error::AdminDeleteUserAttributesError) -> Self {
        match err {
            crate::error::AdminDeleteUserAttributesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminDeleteUserAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminDeleteUserAttributesError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminDeleteUserAttributesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminDeleteUserAttributesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminDeleteUserAttributesError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminDeleteUserAttributesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminDisableProviderForUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminDisableProviderForUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminDisableProviderForUserError> for Error {
    fn from(err: crate::error::AdminDisableProviderForUserError) -> Self {
        match err {
            crate::error::AdminDisableProviderForUserError::AliasExistsException(inner) => {
                Error::AliasExistsException(inner)
            }
            crate::error::AdminDisableProviderForUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminDisableProviderForUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminDisableProviderForUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminDisableProviderForUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminDisableProviderForUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminDisableProviderForUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminDisableProviderForUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminDisableUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminDisableUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminDisableUserError> for Error {
    fn from(err: crate::error::AdminDisableUserError) -> Self {
        match err {
            crate::error::AdminDisableUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminDisableUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminDisableUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminDisableUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminDisableUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminDisableUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminDisableUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminEnableUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AdminEnableUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminEnableUserError> for Error {
    fn from(err: crate::error::AdminEnableUserError) -> Self {
        match err {
            crate::error::AdminEnableUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminEnableUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminEnableUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminEnableUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminEnableUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminEnableUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminEnableUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminForgetDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminForgetDeviceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminForgetDeviceError> for Error {
    fn from(err: crate::error::AdminForgetDeviceError) -> Self {
        match err {
            crate::error::AdminForgetDeviceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminForgetDeviceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminForgetDeviceError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::AdminForgetDeviceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminForgetDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminForgetDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminForgetDeviceError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminForgetDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminGetDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AdminGetDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminGetDeviceError> for Error {
    fn from(err: crate::error::AdminGetDeviceError) -> Self {
        match err {
            crate::error::AdminGetDeviceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminGetDeviceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminGetDeviceError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::AdminGetDeviceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminGetDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminGetDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminGetDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminGetUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::AdminGetUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminGetUserError> for Error {
    fn from(err: crate::error::AdminGetUserError) -> Self {
        match err {
            crate::error::AdminGetUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminGetUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminGetUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminGetUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminGetUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminGetUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminGetUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminInitiateAuthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminInitiateAuthError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminInitiateAuthError> for Error {
    fn from(err: crate::error::AdminInitiateAuthError) -> Self {
        match err {
            crate::error::AdminInitiateAuthError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminInitiateAuthError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::AdminInitiateAuthError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminInitiateAuthError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::AdminInitiateAuthError::InvalidSmsRoleTrustRelationshipException(
                inner,
            ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::AdminInitiateAuthError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::AdminInitiateAuthError::MfaMethodNotFoundException(inner) => {
                Error::MfaMethodNotFoundException(inner)
            }
            crate::error::AdminInitiateAuthError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminInitiateAuthError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::AdminInitiateAuthError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminInitiateAuthError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminInitiateAuthError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::AdminInitiateAuthError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::AdminInitiateAuthError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::AdminInitiateAuthError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminInitiateAuthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminLinkProviderForUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminLinkProviderForUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminLinkProviderForUserError> for Error {
    fn from(err: crate::error::AdminLinkProviderForUserError) -> Self {
        match err {
            crate::error::AdminLinkProviderForUserError::AliasExistsException(inner) => {
                Error::AliasExistsException(inner)
            }
            crate::error::AdminLinkProviderForUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminLinkProviderForUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminLinkProviderForUserError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AdminLinkProviderForUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminLinkProviderForUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminLinkProviderForUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminLinkProviderForUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminLinkProviderForUserError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminListDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminListDevicesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminListDevicesError> for Error {
    fn from(err: crate::error::AdminListDevicesError) -> Self {
        match err {
            crate::error::AdminListDevicesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminListDevicesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminListDevicesError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::AdminListDevicesError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminListDevicesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminListDevicesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminListDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminListGroupsForUserError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminListGroupsForUserError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminListGroupsForUserError> for Error {
    fn from(err: crate::error::AdminListGroupsForUserError) -> Self {
        match err {
            crate::error::AdminListGroupsForUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminListGroupsForUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminListGroupsForUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminListGroupsForUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminListGroupsForUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminListGroupsForUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminListGroupsForUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminListUserAuthEventsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminListUserAuthEventsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminListUserAuthEventsError> for Error {
    fn from(err: crate::error::AdminListUserAuthEventsError) -> Self {
        match err {
            crate::error::AdminListUserAuthEventsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminListUserAuthEventsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminListUserAuthEventsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminListUserAuthEventsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminListUserAuthEventsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminListUserAuthEventsError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminListUserAuthEventsError::UserPoolAddOnNotEnabledException(inner) => {
                Error::UserPoolAddOnNotEnabledException(inner)
            }
            crate::error::AdminListUserAuthEventsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminRemoveUserFromGroupError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminRemoveUserFromGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminRemoveUserFromGroupError> for Error {
    fn from(err: crate::error::AdminRemoveUserFromGroupError) -> Self {
        match err {
            crate::error::AdminRemoveUserFromGroupError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminRemoveUserFromGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminRemoveUserFromGroupError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminRemoveUserFromGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminRemoveUserFromGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminRemoveUserFromGroupError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminRemoveUserFromGroupError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminResetUserPasswordError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminResetUserPasswordError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminResetUserPasswordError> for Error {
    fn from(err: crate::error::AdminResetUserPasswordError) -> Self {
        match err {
            crate::error::AdminResetUserPasswordError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminResetUserPasswordError::InvalidEmailRoleAccessPolicyException(
                inner,
            ) => Error::InvalidEmailRoleAccessPolicyException(inner),
            crate::error::AdminResetUserPasswordError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::AdminResetUserPasswordError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminResetUserPasswordError::InvalidSmsRoleAccessPolicyException(
                inner,
            ) => Error::InvalidSmsRoleAccessPolicyException(inner),
            crate::error::AdminResetUserPasswordError::InvalidSmsRoleTrustRelationshipException(
                inner,
            ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::AdminResetUserPasswordError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::AdminResetUserPasswordError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminResetUserPasswordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminResetUserPasswordError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminResetUserPasswordError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::AdminResetUserPasswordError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::AdminResetUserPasswordError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminResetUserPasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminRespondToAuthChallengeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminRespondToAuthChallengeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminRespondToAuthChallengeError> for Error {
    fn from(err: crate::error::AdminRespondToAuthChallengeError) -> Self {
        match err {
            crate::error::AdminRespondToAuthChallengeError::AliasExistsException(inner) => Error::AliasExistsException(inner),
            crate::error::AdminRespondToAuthChallengeError::CodeMismatchException(inner) => Error::CodeMismatchException(inner),
            crate::error::AdminRespondToAuthChallengeError::ExpiredCodeException(inner) => Error::ExpiredCodeException(inner),
            crate::error::AdminRespondToAuthChallengeError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::error::AdminRespondToAuthChallengeError::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
            crate::error::AdminRespondToAuthChallengeError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::AdminRespondToAuthChallengeError::InvalidPasswordException(inner) => Error::InvalidPasswordException(inner),
            crate::error::AdminRespondToAuthChallengeError::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
            crate::error::AdminRespondToAuthChallengeError::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::AdminRespondToAuthChallengeError::InvalidUserPoolConfigurationException(inner) => Error::InvalidUserPoolConfigurationException(inner),
            crate::error::AdminRespondToAuthChallengeError::MfaMethodNotFoundException(inner) => Error::MfaMethodNotFoundException(inner),
            crate::error::AdminRespondToAuthChallengeError::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
            crate::error::AdminRespondToAuthChallengeError::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
            crate::error::AdminRespondToAuthChallengeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AdminRespondToAuthChallengeError::SoftwareTokenMfaNotFoundException(inner) => Error::SoftwareTokenMfaNotFoundException(inner),
            crate::error::AdminRespondToAuthChallengeError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::AdminRespondToAuthChallengeError::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
            crate::error::AdminRespondToAuthChallengeError::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
            crate::error::AdminRespondToAuthChallengeError::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
            crate::error::AdminRespondToAuthChallengeError::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
            crate::error::AdminRespondToAuthChallengeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminSetUserMFAPreferenceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminSetUserMFAPreferenceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminSetUserMFAPreferenceError> for Error {
    fn from(err: crate::error::AdminSetUserMFAPreferenceError) -> Self {
        match err {
            crate::error::AdminSetUserMFAPreferenceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminSetUserMFAPreferenceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminSetUserMFAPreferenceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminSetUserMFAPreferenceError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::AdminSetUserMFAPreferenceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminSetUserMFAPreferenceError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::AdminSetUserMFAPreferenceError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminSetUserMFAPreferenceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminSetUserPasswordError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminSetUserPasswordError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminSetUserPasswordError> for Error {
    fn from(err: crate::error::AdminSetUserPasswordError) -> Self {
        match err {
            crate::error::AdminSetUserPasswordError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminSetUserPasswordError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminSetUserPasswordError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::AdminSetUserPasswordError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminSetUserPasswordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminSetUserPasswordError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminSetUserPasswordError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminSetUserPasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminSetUserSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminSetUserSettingsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminSetUserSettingsError> for Error {
    fn from(err: crate::error::AdminSetUserSettingsError) -> Self {
        match err {
            crate::error::AdminSetUserSettingsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminSetUserSettingsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminSetUserSettingsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminSetUserSettingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminSetUserSettingsError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminSetUserSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminUpdateAuthEventFeedbackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminUpdateAuthEventFeedbackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminUpdateAuthEventFeedbackError> for Error {
    fn from(err: crate::error::AdminUpdateAuthEventFeedbackError) -> Self {
        match err {
            crate::error::AdminUpdateAuthEventFeedbackError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminUpdateAuthEventFeedbackError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminUpdateAuthEventFeedbackError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminUpdateAuthEventFeedbackError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminUpdateAuthEventFeedbackError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminUpdateAuthEventFeedbackError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminUpdateAuthEventFeedbackError::UserPoolAddOnNotEnabledException(
                inner,
            ) => Error::UserPoolAddOnNotEnabledException(inner),
            crate::error::AdminUpdateAuthEventFeedbackError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminUpdateDeviceStatusError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminUpdateDeviceStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminUpdateDeviceStatusError> for Error {
    fn from(err: crate::error::AdminUpdateDeviceStatusError) -> Self {
        match err {
            crate::error::AdminUpdateDeviceStatusError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminUpdateDeviceStatusError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminUpdateDeviceStatusError::InvalidUserPoolConfigurationException(
                inner,
            ) => Error::InvalidUserPoolConfigurationException(inner),
            crate::error::AdminUpdateDeviceStatusError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminUpdateDeviceStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminUpdateDeviceStatusError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminUpdateDeviceStatusError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminUpdateDeviceStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminUpdateUserAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminUpdateUserAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminUpdateUserAttributesError> for Error {
    fn from(err: crate::error::AdminUpdateUserAttributesError) -> Self {
        match err {
            crate::error::AdminUpdateUserAttributesError::AliasExistsException(inner) => Error::AliasExistsException(inner),
            crate::error::AdminUpdateUserAttributesError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::error::AdminUpdateUserAttributesError::InvalidEmailRoleAccessPolicyException(inner) => Error::InvalidEmailRoleAccessPolicyException(inner),
            crate::error::AdminUpdateUserAttributesError::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
            crate::error::AdminUpdateUserAttributesError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::AdminUpdateUserAttributesError::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
            crate::error::AdminUpdateUserAttributesError::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::AdminUpdateUserAttributesError::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
            crate::error::AdminUpdateUserAttributesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::AdminUpdateUserAttributesError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::AdminUpdateUserAttributesError::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
            crate::error::AdminUpdateUserAttributesError::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
            crate::error::AdminUpdateUserAttributesError::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
            crate::error::AdminUpdateUserAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AdminUserGlobalSignOutError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AdminUserGlobalSignOutError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AdminUserGlobalSignOutError> for Error {
    fn from(err: crate::error::AdminUserGlobalSignOutError) -> Self {
        match err {
            crate::error::AdminUserGlobalSignOutError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AdminUserGlobalSignOutError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AdminUserGlobalSignOutError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AdminUserGlobalSignOutError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AdminUserGlobalSignOutError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::AdminUserGlobalSignOutError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::AdminUserGlobalSignOutError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::AssociateSoftwareTokenError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::AssociateSoftwareTokenError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::AssociateSoftwareTokenError> for Error {
    fn from(err: crate::error::AssociateSoftwareTokenError) -> Self {
        match err {
            crate::error::AssociateSoftwareTokenError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::AssociateSoftwareTokenError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::AssociateSoftwareTokenError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::AssociateSoftwareTokenError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::AssociateSoftwareTokenError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::AssociateSoftwareTokenError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::AssociateSoftwareTokenError::SoftwareTokenMfaNotFoundException(inner) => {
                Error::SoftwareTokenMfaNotFoundException(inner)
            }
            crate::error::AssociateSoftwareTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ChangePasswordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ChangePasswordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ChangePasswordError> for Error {
    fn from(err: crate::error::ChangePasswordError) -> Self {
        match err {
            crate::error::ChangePasswordError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ChangePasswordError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ChangePasswordError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ChangePasswordError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::ChangePasswordError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ChangePasswordError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ChangePasswordError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::ChangePasswordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ChangePasswordError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ChangePasswordError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::ChangePasswordError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::ChangePasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ConfirmDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ConfirmDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ConfirmDeviceError> for Error {
    fn from(err: crate::error::ConfirmDeviceError) -> Self {
        match err {
            crate::error::ConfirmDeviceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ConfirmDeviceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ConfirmDeviceError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::ConfirmDeviceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ConfirmDeviceError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::ConfirmDeviceError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::ConfirmDeviceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ConfirmDeviceError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::ConfirmDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ConfirmDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ConfirmDeviceError::UsernameExistsException(inner) => {
                Error::UsernameExistsException(inner)
            }
            crate::error::ConfirmDeviceError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::ConfirmDeviceError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::ConfirmDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ConfirmForgotPasswordError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ConfirmForgotPasswordError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ConfirmForgotPasswordError> for Error {
    fn from(err: crate::error::ConfirmForgotPasswordError) -> Self {
        match err {
            crate::error::ConfirmForgotPasswordError::CodeMismatchException(inner) => {
                Error::CodeMismatchException(inner)
            }
            crate::error::ConfirmForgotPasswordError::ExpiredCodeException(inner) => {
                Error::ExpiredCodeException(inner)
            }
            crate::error::ConfirmForgotPasswordError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ConfirmForgotPasswordError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ConfirmForgotPasswordError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::ConfirmForgotPasswordError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ConfirmForgotPasswordError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::ConfirmForgotPasswordError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ConfirmForgotPasswordError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ConfirmForgotPasswordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ConfirmForgotPasswordError::TooManyFailedAttemptsException(inner) => {
                Error::TooManyFailedAttemptsException(inner)
            }
            crate::error::ConfirmForgotPasswordError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ConfirmForgotPasswordError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::ConfirmForgotPasswordError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::ConfirmForgotPasswordError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::ConfirmForgotPasswordError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::ConfirmForgotPasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ConfirmSignUpError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ConfirmSignUpError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ConfirmSignUpError> for Error {
    fn from(err: crate::error::ConfirmSignUpError) -> Self {
        match err {
            crate::error::ConfirmSignUpError::AliasExistsException(inner) => {
                Error::AliasExistsException(inner)
            }
            crate::error::ConfirmSignUpError::CodeMismatchException(inner) => {
                Error::CodeMismatchException(inner)
            }
            crate::error::ConfirmSignUpError::ExpiredCodeException(inner) => {
                Error::ExpiredCodeException(inner)
            }
            crate::error::ConfirmSignUpError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ConfirmSignUpError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ConfirmSignUpError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::ConfirmSignUpError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ConfirmSignUpError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ConfirmSignUpError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ConfirmSignUpError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ConfirmSignUpError::TooManyFailedAttemptsException(inner) => {
                Error::TooManyFailedAttemptsException(inner)
            }
            crate::error::ConfirmSignUpError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ConfirmSignUpError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::ConfirmSignUpError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::ConfirmSignUpError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::ConfirmSignUpError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateGroupError> for Error {
    fn from(err: crate::error::CreateGroupError) -> Self {
        match err {
            crate::error::CreateGroupError::GroupExistsException(inner) => {
                Error::GroupExistsException(inner)
            }
            crate::error::CreateGroupError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateGroupError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateGroupError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::CreateGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateIdentityProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateIdentityProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateIdentityProviderError> for Error {
    fn from(err: crate::error::CreateIdentityProviderError) -> Self {
        match err {
            crate::error::CreateIdentityProviderError::DuplicateProviderException(inner) => {
                Error::DuplicateProviderException(inner)
            }
            crate::error::CreateIdentityProviderError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateIdentityProviderError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateIdentityProviderError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateIdentityProviderError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::CreateIdentityProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateIdentityProviderError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateIdentityProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateResourceServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateResourceServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateResourceServerError> for Error {
    fn from(err: crate::error::CreateResourceServerError) -> Self {
        match err {
            crate::error::CreateResourceServerError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateResourceServerError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateResourceServerError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateResourceServerError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::CreateResourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateResourceServerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateResourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateUserImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserImportJobError> for Error {
    fn from(err: crate::error::CreateUserImportJobError) -> Self {
        match err {
            crate::error::CreateUserImportJobError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateUserImportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateUserImportJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUserImportJobError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::CreateUserImportJobError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::CreateUserImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateUserImportJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateUserImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateUserPoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserPoolError> for Error {
    fn from(err: crate::error::CreateUserPoolError) -> Self {
        match err {
            crate::error::CreateUserPoolError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateUserPoolError::InvalidEmailRoleAccessPolicyException(inner) => {
                Error::InvalidEmailRoleAccessPolicyException(inner)
            }
            crate::error::CreateUserPoolError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateUserPoolError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::CreateUserPoolError::InvalidSmsRoleTrustRelationshipException(inner) => {
                Error::InvalidSmsRoleTrustRelationshipException(inner)
            }
            crate::error::CreateUserPoolError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUserPoolError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::CreateUserPoolError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateUserPoolError::UserPoolTaggingException(inner) => {
                Error::UserPoolTaggingException(inner)
            }
            crate::error::CreateUserPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserPoolClientError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateUserPoolClientError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserPoolClientError> for Error {
    fn from(err: crate::error::CreateUserPoolClientError) -> Self {
        match err {
            crate::error::CreateUserPoolClientError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateUserPoolClientError::InvalidOAuthFlowException(inner) => {
                Error::InvalidOAuthFlowException(inner)
            }
            crate::error::CreateUserPoolClientError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateUserPoolClientError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUserPoolClientError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::CreateUserPoolClientError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateUserPoolClientError::ScopeDoesNotExistException(inner) => {
                Error::ScopeDoesNotExistException(inner)
            }
            crate::error::CreateUserPoolClientError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::CreateUserPoolClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateUserPoolDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateUserPoolDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateUserPoolDomainError> for Error {
    fn from(err: crate::error::CreateUserPoolDomainError) -> Self {
        match err {
            crate::error::CreateUserPoolDomainError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::CreateUserPoolDomainError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateUserPoolDomainError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateUserPoolDomainError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::CreateUserPoolDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateUserPoolDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteGroupError> for Error {
    fn from(err: crate::error::DeleteGroupError) -> Self {
        match err {
            crate::error::DeleteGroupError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteGroupError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteIdentityProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteIdentityProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteIdentityProviderError> for Error {
    fn from(err: crate::error::DeleteIdentityProviderError) -> Self {
        match err {
            crate::error::DeleteIdentityProviderError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteIdentityProviderError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteIdentityProviderError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteIdentityProviderError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteIdentityProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteIdentityProviderError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteIdentityProviderError::UnsupportedIdentityProviderException(
                inner,
            ) => Error::UnsupportedIdentityProviderException(inner),
            crate::error::DeleteIdentityProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteResourceServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteResourceServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteResourceServerError> for Error {
    fn from(err: crate::error::DeleteResourceServerError) -> Self {
        match err {
            crate::error::DeleteResourceServerError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteResourceServerError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteResourceServerError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteResourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteResourceServerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteResourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserError> for Error {
    fn from(err: crate::error::DeleteUserError) -> Self {
        match err {
            crate::error::DeleteUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteUserError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::DeleteUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteUserError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::DeleteUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::DeleteUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserAttributesError> for Error {
    fn from(err: crate::error::DeleteUserAttributesError) -> Self {
        match err {
            crate::error::DeleteUserAttributesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::DeleteUserAttributesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteUserAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteUserAttributesError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteUserAttributesError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::DeleteUserAttributesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserAttributesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteUserAttributesError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::DeleteUserAttributesError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::DeleteUserAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteUserPoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserPoolError> for Error {
    fn from(err: crate::error::DeleteUserPoolError) -> Self {
        match err {
            crate::error::DeleteUserPoolError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteUserPoolError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteUserPoolError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteUserPoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserPoolError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteUserPoolError::UserImportInProgressException(inner) => {
                Error::UserImportInProgressException(inner)
            }
            crate::error::DeleteUserPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserPoolClientError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserPoolClientError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserPoolClientError> for Error {
    fn from(err: crate::error::DeleteUserPoolClientError) -> Self {
        match err {
            crate::error::DeleteUserPoolClientError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::DeleteUserPoolClientError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteUserPoolClientError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteUserPoolClientError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteUserPoolClientError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserPoolClientError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DeleteUserPoolClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteUserPoolDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteUserPoolDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteUserPoolDomainError> for Error {
    fn from(err: crate::error::DeleteUserPoolDomainError) -> Self {
        match err {
            crate::error::DeleteUserPoolDomainError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DeleteUserPoolDomainError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteUserPoolDomainError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DeleteUserPoolDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteUserPoolDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeIdentityProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeIdentityProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeIdentityProviderError> for Error {
    fn from(err: crate::error::DescribeIdentityProviderError) -> Self {
        match err {
            crate::error::DescribeIdentityProviderError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeIdentityProviderError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeIdentityProviderError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeIdentityProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeIdentityProviderError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeIdentityProviderError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeResourceServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeResourceServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeResourceServerError> for Error {
    fn from(err: crate::error::DescribeResourceServerError) -> Self {
        match err {
            crate::error::DescribeResourceServerError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeResourceServerError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeResourceServerError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeResourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeResourceServerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeResourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRiskConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRiskConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRiskConfigurationError> for Error {
    fn from(err: crate::error::DescribeRiskConfigurationError) -> Self {
        match err {
            crate::error::DescribeRiskConfigurationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeRiskConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeRiskConfigurationError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeRiskConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeRiskConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeRiskConfigurationError::UserPoolAddOnNotEnabledException(
                inner,
            ) => Error::UserPoolAddOnNotEnabledException(inner),
            crate::error::DescribeRiskConfigurationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserImportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUserImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserImportJobError> for Error {
    fn from(err: crate::error::DescribeUserImportJobError) -> Self {
        match err {
            crate::error::DescribeUserImportJobError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeUserImportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeUserImportJobError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeUserImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeUserImportJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeUserImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUserPoolError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserPoolError> for Error {
    fn from(err: crate::error::DescribeUserPoolError) -> Self {
        match err {
            crate::error::DescribeUserPoolError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeUserPoolError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeUserPoolError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeUserPoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeUserPoolError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeUserPoolError::UserPoolTaggingException(inner) => {
                Error::UserPoolTaggingException(inner)
            }
            crate::error::DescribeUserPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserPoolClientError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUserPoolClientError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserPoolClientError> for Error {
    fn from(err: crate::error::DescribeUserPoolClientError) -> Self {
        match err {
            crate::error::DescribeUserPoolClientError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeUserPoolClientError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeUserPoolClientError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeUserPoolClientError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeUserPoolClientError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::DescribeUserPoolClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeUserPoolDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeUserPoolDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeUserPoolDomainError> for Error {
    fn from(err: crate::error::DescribeUserPoolDomainError) -> Self {
        match err {
            crate::error::DescribeUserPoolDomainError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::DescribeUserPoolDomainError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeUserPoolDomainError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::DescribeUserPoolDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeUserPoolDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ForgetDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ForgetDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ForgetDeviceError> for Error {
    fn from(err: crate::error::ForgetDeviceError) -> Self {
        match err {
            crate::error::ForgetDeviceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ForgetDeviceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ForgetDeviceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ForgetDeviceError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::ForgetDeviceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ForgetDeviceError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::ForgetDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ForgetDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ForgetDeviceError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::ForgetDeviceError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::ForgetDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ForgotPasswordError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ForgotPasswordError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ForgotPasswordError> for Error {
    fn from(err: crate::error::ForgotPasswordError) -> Self {
        match err {
            crate::error::ForgotPasswordError::CodeDeliveryFailureException(inner) => {
                Error::CodeDeliveryFailureException(inner)
            }
            crate::error::ForgotPasswordError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ForgotPasswordError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ForgotPasswordError::InvalidEmailRoleAccessPolicyException(inner) => {
                Error::InvalidEmailRoleAccessPolicyException(inner)
            }
            crate::error::ForgotPasswordError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::ForgotPasswordError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ForgotPasswordError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::ForgotPasswordError::InvalidSmsRoleTrustRelationshipException(inner) => {
                Error::InvalidSmsRoleTrustRelationshipException(inner)
            }
            crate::error::ForgotPasswordError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ForgotPasswordError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ForgotPasswordError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ForgotPasswordError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ForgotPasswordError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::ForgotPasswordError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::ForgotPasswordError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::ForgotPasswordError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetCSVHeaderError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetCSVHeaderError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetCSVHeaderError> for Error {
    fn from(err: crate::error::GetCSVHeaderError) -> Self {
        match err {
            crate::error::GetCSVHeaderError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetCSVHeaderError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetCSVHeaderError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetCSVHeaderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetCSVHeaderError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetCSVHeaderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetDeviceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetDeviceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetDeviceError> for Error {
    fn from(err: crate::error::GetDeviceError) -> Self {
        match err {
            crate::error::GetDeviceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetDeviceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetDeviceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetDeviceError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::GetDeviceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetDeviceError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::GetDeviceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetDeviceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetDeviceError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::GetDeviceError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::GetDeviceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetGroupError> for Error {
    fn from(err: crate::error::GetGroupError) -> Self {
        match err {
            crate::error::GetGroupError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetGroupError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetIdentityProviderByIdentifierError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetIdentityProviderByIdentifierError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetIdentityProviderByIdentifierError> for Error {
    fn from(err: crate::error::GetIdentityProviderByIdentifierError) -> Self {
        match err {
            crate::error::GetIdentityProviderByIdentifierError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetIdentityProviderByIdentifierError::InvalidParameterException(
                inner,
            ) => Error::InvalidParameterException(inner),
            crate::error::GetIdentityProviderByIdentifierError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetIdentityProviderByIdentifierError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::error::GetIdentityProviderByIdentifierError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetIdentityProviderByIdentifierError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetSigningCertificateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetSigningCertificateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetSigningCertificateError> for Error {
    fn from(err: crate::error::GetSigningCertificateError) -> Self {
        match err {
            crate::error::GetSigningCertificateError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetSigningCertificateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetSigningCertificateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetSigningCertificateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUICustomizationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUICustomizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUICustomizationError> for Error {
    fn from(err: crate::error::GetUICustomizationError) -> Self {
        match err {
            crate::error::GetUICustomizationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetUICustomizationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetUICustomizationError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetUICustomizationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUICustomizationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUICustomizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GetUserError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUserError> for Error {
    fn from(err: crate::error::GetUserError) -> Self {
        match err {
            crate::error::GetUserError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GetUserError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetUserError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetUserError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetUserError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::GetUserError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUserError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUserError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::GetUserError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::GetUserError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::error::GetUserAttributeVerificationCodeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::GetUserAttributeVerificationCodeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUserAttributeVerificationCodeError> for Error {
    fn from(err: crate::error::GetUserAttributeVerificationCodeError) -> Self {
        match err {
            crate::error::GetUserAttributeVerificationCodeError::CodeDeliveryFailureException(inner) => Error::CodeDeliveryFailureException(inner),
            crate::error::GetUserAttributeVerificationCodeError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::error::GetUserAttributeVerificationCodeError::InternalErrorException(inner) => Error::InternalErrorException(inner),
            crate::error::GetUserAttributeVerificationCodeError::InvalidEmailRoleAccessPolicyException(inner) => Error::InvalidEmailRoleAccessPolicyException(inner),
            crate::error::GetUserAttributeVerificationCodeError::InvalidLambdaResponseException(inner) => Error::InvalidLambdaResponseException(inner),
            crate::error::GetUserAttributeVerificationCodeError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::GetUserAttributeVerificationCodeError::InvalidSmsRoleAccessPolicyException(inner) => Error::InvalidSmsRoleAccessPolicyException(inner),
            crate::error::GetUserAttributeVerificationCodeError::InvalidSmsRoleTrustRelationshipException(inner) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::GetUserAttributeVerificationCodeError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::GetUserAttributeVerificationCodeError::NotAuthorizedException(inner) => Error::NotAuthorizedException(inner),
            crate::error::GetUserAttributeVerificationCodeError::PasswordResetRequiredException(inner) => Error::PasswordResetRequiredException(inner),
            crate::error::GetUserAttributeVerificationCodeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::error::GetUserAttributeVerificationCodeError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::error::GetUserAttributeVerificationCodeError::UnexpectedLambdaException(inner) => Error::UnexpectedLambdaException(inner),
            crate::error::GetUserAttributeVerificationCodeError::UserLambdaValidationException(inner) => Error::UserLambdaValidationException(inner),
            crate::error::GetUserAttributeVerificationCodeError::UserNotConfirmedException(inner) => Error::UserNotConfirmedException(inner),
            crate::error::GetUserAttributeVerificationCodeError::UserNotFoundException(inner) => Error::UserNotFoundException(inner),
            crate::error::GetUserAttributeVerificationCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetUserPoolMfaConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetUserPoolMfaConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetUserPoolMfaConfigError> for Error {
    fn from(err: crate::error::GetUserPoolMfaConfigError) -> Self {
        match err {
            crate::error::GetUserPoolMfaConfigError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GetUserPoolMfaConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetUserPoolMfaConfigError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GetUserPoolMfaConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetUserPoolMfaConfigError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GetUserPoolMfaConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GlobalSignOutError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::GlobalSignOutError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GlobalSignOutError> for Error {
    fn from(err: crate::error::GlobalSignOutError) -> Self {
        match err {
            crate::error::GlobalSignOutError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::GlobalSignOutError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::GlobalSignOutError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GlobalSignOutError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::GlobalSignOutError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::GlobalSignOutError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GlobalSignOutError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::GlobalSignOutError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::GlobalSignOutError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::InitiateAuthError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::InitiateAuthError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::InitiateAuthError> for Error {
    fn from(err: crate::error::InitiateAuthError) -> Self {
        match err {
            crate::error::InitiateAuthError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::InitiateAuthError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::InitiateAuthError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::InitiateAuthError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::InitiateAuthError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::InitiateAuthError::InvalidSmsRoleTrustRelationshipException(inner) => {
                Error::InvalidSmsRoleTrustRelationshipException(inner)
            }
            crate::error::InitiateAuthError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::InitiateAuthError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::InitiateAuthError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::InitiateAuthError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::InitiateAuthError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::InitiateAuthError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::InitiateAuthError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::InitiateAuthError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::InitiateAuthError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::InitiateAuthError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDevicesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListDevicesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDevicesError> for Error {
    fn from(err: crate::error::ListDevicesError) -> Self {
        match err {
            crate::error::ListDevicesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ListDevicesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListDevicesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListDevicesError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::ListDevicesError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListDevicesError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::ListDevicesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDevicesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListDevicesError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::ListDevicesError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::ListDevicesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListGroupsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListGroupsError> for Error {
    fn from(err: crate::error::ListGroupsError) -> Self {
        match err {
            crate::error::ListGroupsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListGroupsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListGroupsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListGroupsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListGroupsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListGroupsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListIdentityProvidersError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListIdentityProvidersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListIdentityProvidersError> for Error {
    fn from(err: crate::error::ListIdentityProvidersError) -> Self {
        match err {
            crate::error::ListIdentityProvidersError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListIdentityProvidersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListIdentityProvidersError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListIdentityProvidersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListIdentityProvidersError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListIdentityProvidersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListResourceServersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListResourceServersError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListResourceServersError> for Error {
    fn from(err: crate::error::ListResourceServersError) -> Self {
        match err {
            crate::error::ListResourceServersError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListResourceServersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListResourceServersError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListResourceServersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListResourceServersError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListResourceServersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUserImportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListUserImportJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUserImportJobsError> for Error {
    fn from(err: crate::error::ListUserImportJobsError) -> Self {
        match err {
            crate::error::ListUserImportJobsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListUserImportJobsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListUserImportJobsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListUserImportJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUserImportJobsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListUserImportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUserPoolClientsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListUserPoolClientsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUserPoolClientsError> for Error {
    fn from(err: crate::error::ListUserPoolClientsError) -> Self {
        match err {
            crate::error::ListUserPoolClientsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListUserPoolClientsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListUserPoolClientsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListUserPoolClientsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUserPoolClientsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListUserPoolClientsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUserPoolsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUserPoolsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUserPoolsError> for Error {
    fn from(err: crate::error::ListUserPoolsError) -> Self {
        match err {
            crate::error::ListUserPoolsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListUserPoolsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListUserPoolsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListUserPoolsError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListUserPoolsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListUsersError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsersError> for Error {
    fn from(err: crate::error::ListUsersError) -> Self {
        match err {
            crate::error::ListUsersError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListUsersError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListUsersError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListUsersError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUsersError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListUsersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListUsersInGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListUsersInGroupError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListUsersInGroupError> for Error {
    fn from(err: crate::error::ListUsersInGroupError) -> Self {
        match err {
            crate::error::ListUsersInGroupError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ListUsersInGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListUsersInGroupError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ListUsersInGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListUsersInGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ListUsersInGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ResendConfirmationCodeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ResendConfirmationCodeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ResendConfirmationCodeError> for Error {
    fn from(err: crate::error::ResendConfirmationCodeError) -> Self {
        match err {
            crate::error::ResendConfirmationCodeError::CodeDeliveryFailureException(inner) => {
                Error::CodeDeliveryFailureException(inner)
            }
            crate::error::ResendConfirmationCodeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::ResendConfirmationCodeError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::ResendConfirmationCodeError::InvalidEmailRoleAccessPolicyException(
                inner,
            ) => Error::InvalidEmailRoleAccessPolicyException(inner),
            crate::error::ResendConfirmationCodeError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::ResendConfirmationCodeError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ResendConfirmationCodeError::InvalidSmsRoleAccessPolicyException(
                inner,
            ) => Error::InvalidSmsRoleAccessPolicyException(inner),
            crate::error::ResendConfirmationCodeError::InvalidSmsRoleTrustRelationshipException(
                inner,
            ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::ResendConfirmationCodeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::ResendConfirmationCodeError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::ResendConfirmationCodeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ResendConfirmationCodeError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::ResendConfirmationCodeError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::ResendConfirmationCodeError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::ResendConfirmationCodeError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::ResendConfirmationCodeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RespondToAuthChallengeError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RespondToAuthChallengeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RespondToAuthChallengeError> for Error {
    fn from(err: crate::error::RespondToAuthChallengeError) -> Self {
        match err {
            crate::error::RespondToAuthChallengeError::AliasExistsException(inner) => {
                Error::AliasExistsException(inner)
            }
            crate::error::RespondToAuthChallengeError::CodeMismatchException(inner) => {
                Error::CodeMismatchException(inner)
            }
            crate::error::RespondToAuthChallengeError::ExpiredCodeException(inner) => {
                Error::ExpiredCodeException(inner)
            }
            crate::error::RespondToAuthChallengeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RespondToAuthChallengeError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::RespondToAuthChallengeError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::RespondToAuthChallengeError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RespondToAuthChallengeError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::RespondToAuthChallengeError::InvalidSmsRoleAccessPolicyException(
                inner,
            ) => Error::InvalidSmsRoleAccessPolicyException(inner),
            crate::error::RespondToAuthChallengeError::InvalidSmsRoleTrustRelationshipException(
                inner,
            ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::RespondToAuthChallengeError::InvalidUserPoolConfigurationException(
                inner,
            ) => Error::InvalidUserPoolConfigurationException(inner),
            crate::error::RespondToAuthChallengeError::MfaMethodNotFoundException(inner) => {
                Error::MfaMethodNotFoundException(inner)
            }
            crate::error::RespondToAuthChallengeError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::RespondToAuthChallengeError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::RespondToAuthChallengeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RespondToAuthChallengeError::SoftwareTokenMfaNotFoundException(inner) => {
                Error::SoftwareTokenMfaNotFoundException(inner)
            }
            crate::error::RespondToAuthChallengeError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::RespondToAuthChallengeError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::RespondToAuthChallengeError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::RespondToAuthChallengeError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::RespondToAuthChallengeError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::RespondToAuthChallengeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RevokeTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RevokeTokenError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RevokeTokenError> for Error {
    fn from(err: crate::error::RevokeTokenError) -> Self {
        match err {
            crate::error::RevokeTokenError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::RevokeTokenError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::RevokeTokenError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RevokeTokenError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::RevokeTokenError::UnauthorizedException(inner) => {
                Error::UnauthorizedException(inner)
            }
            crate::error::RevokeTokenError::UnsupportedOperationException(inner) => {
                Error::UnsupportedOperationException(inner)
            }
            crate::error::RevokeTokenError::UnsupportedTokenTypeException(inner) => {
                Error::UnsupportedTokenTypeException(inner)
            }
            crate::error::RevokeTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetRiskConfigurationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetRiskConfigurationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetRiskConfigurationError> for Error {
    fn from(err: crate::error::SetRiskConfigurationError) -> Self {
        match err {
            crate::error::SetRiskConfigurationError::CodeDeliveryFailureException(inner) => {
                Error::CodeDeliveryFailureException(inner)
            }
            crate::error::SetRiskConfigurationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SetRiskConfigurationError::InvalidEmailRoleAccessPolicyException(
                inner,
            ) => Error::InvalidEmailRoleAccessPolicyException(inner),
            crate::error::SetRiskConfigurationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SetRiskConfigurationError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SetRiskConfigurationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetRiskConfigurationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SetRiskConfigurationError::UserPoolAddOnNotEnabledException(inner) => {
                Error::UserPoolAddOnNotEnabledException(inner)
            }
            crate::error::SetRiskConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetUICustomizationError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetUICustomizationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetUICustomizationError> for Error {
    fn from(err: crate::error::SetUICustomizationError) -> Self {
        match err {
            crate::error::SetUICustomizationError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SetUICustomizationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SetUICustomizationError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SetUICustomizationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetUICustomizationError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SetUICustomizationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetUserMFAPreferenceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetUserMFAPreferenceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetUserMFAPreferenceError> for Error {
    fn from(err: crate::error::SetUserMFAPreferenceError) -> Self {
        match err {
            crate::error::SetUserMFAPreferenceError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SetUserMFAPreferenceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SetUserMFAPreferenceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SetUserMFAPreferenceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SetUserMFAPreferenceError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::SetUserMFAPreferenceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetUserMFAPreferenceError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::SetUserMFAPreferenceError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::SetUserMFAPreferenceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetUserPoolMfaConfigError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SetUserPoolMfaConfigError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetUserPoolMfaConfigError> for Error {
    fn from(err: crate::error::SetUserPoolMfaConfigError) -> Self {
        match err {
            crate::error::SetUserPoolMfaConfigError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SetUserPoolMfaConfigError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SetUserPoolMfaConfigError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::SetUserPoolMfaConfigError::InvalidSmsRoleTrustRelationshipException(
                inner,
            ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::SetUserPoolMfaConfigError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SetUserPoolMfaConfigError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetUserPoolMfaConfigError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SetUserPoolMfaConfigError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SetUserSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SetUserSettingsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SetUserSettingsError> for Error {
    fn from(err: crate::error::SetUserSettingsError) -> Self {
        match err {
            crate::error::SetUserSettingsError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SetUserSettingsError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SetUserSettingsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SetUserSettingsError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SetUserSettingsError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::SetUserSettingsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SetUserSettingsError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::SetUserSettingsError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::SetUserSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SignUpError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::SignUpError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SignUpError> for Error {
    fn from(err: crate::error::SignUpError) -> Self {
        match err {
            crate::error::SignUpError::CodeDeliveryFailureException(inner) => {
                Error::CodeDeliveryFailureException(inner)
            }
            crate::error::SignUpError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::SignUpError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::SignUpError::InvalidEmailRoleAccessPolicyException(inner) => {
                Error::InvalidEmailRoleAccessPolicyException(inner)
            }
            crate::error::SignUpError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::SignUpError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SignUpError::InvalidPasswordException(inner) => {
                Error::InvalidPasswordException(inner)
            }
            crate::error::SignUpError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::SignUpError::InvalidSmsRoleTrustRelationshipException(inner) => {
                Error::InvalidSmsRoleTrustRelationshipException(inner)
            }
            crate::error::SignUpError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::SignUpError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SignUpError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::SignUpError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::SignUpError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::SignUpError::UsernameExistsException(inner) => {
                Error::UsernameExistsException(inner)
            }
            crate::error::SignUpError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartUserImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartUserImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartUserImportJobError> for Error {
    fn from(err: crate::error::StartUserImportJobError) -> Self {
        match err {
            crate::error::StartUserImportJobError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::StartUserImportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartUserImportJobError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::StartUserImportJobError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::StartUserImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StartUserImportJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StartUserImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StopUserImportJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StopUserImportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StopUserImportJobError> for Error {
    fn from(err: crate::error::StopUserImportJobError) -> Self {
        match err {
            crate::error::StopUserImportJobError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::StopUserImportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StopUserImportJobError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::StopUserImportJobError::PreconditionNotMetException(inner) => {
                Error::PreconditionNotMetException(inner)
            }
            crate::error::StopUserImportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::StopUserImportJobError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::StopUserImportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::TagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TagResourceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UntagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UntagResourceError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateAuthEventFeedbackError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateAuthEventFeedbackError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateAuthEventFeedbackError> for Error {
    fn from(err: crate::error::UpdateAuthEventFeedbackError) -> Self {
        match err {
            crate::error::UpdateAuthEventFeedbackError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateAuthEventFeedbackError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateAuthEventFeedbackError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateAuthEventFeedbackError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateAuthEventFeedbackError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateAuthEventFeedbackError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::UpdateAuthEventFeedbackError::UserPoolAddOnNotEnabledException(inner) => {
                Error::UserPoolAddOnNotEnabledException(inner)
            }
            crate::error::UpdateAuthEventFeedbackError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateDeviceStatusError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateDeviceStatusError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateDeviceStatusError> for Error {
    fn from(err: crate::error::UpdateDeviceStatusError) -> Self {
        match err {
            crate::error::UpdateDeviceStatusError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateDeviceStatusError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateDeviceStatusError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateDeviceStatusError::InvalidUserPoolConfigurationException(inner) => {
                Error::InvalidUserPoolConfigurationException(inner)
            }
            crate::error::UpdateDeviceStatusError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateDeviceStatusError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::UpdateDeviceStatusError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateDeviceStatusError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateDeviceStatusError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::UpdateDeviceStatusError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::UpdateDeviceStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateGroupError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateGroupError> for Error {
    fn from(err: crate::error::UpdateGroupError) -> Self {
        match err {
            crate::error::UpdateGroupError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateGroupError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateGroupError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateGroupError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateGroupError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateGroupError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateIdentityProviderError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateIdentityProviderError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateIdentityProviderError> for Error {
    fn from(err: crate::error::UpdateIdentityProviderError) -> Self {
        match err {
            crate::error::UpdateIdentityProviderError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateIdentityProviderError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateIdentityProviderError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateIdentityProviderError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateIdentityProviderError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateIdentityProviderError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateIdentityProviderError::UnsupportedIdentityProviderException(
                inner,
            ) => Error::UnsupportedIdentityProviderException(inner),
            crate::error::UpdateIdentityProviderError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateResourceServerError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateResourceServerError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateResourceServerError> for Error {
    fn from(err: crate::error::UpdateResourceServerError) -> Self {
        match err {
            crate::error::UpdateResourceServerError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateResourceServerError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateResourceServerError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateResourceServerError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateResourceServerError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateResourceServerError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserAttributesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserAttributesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserAttributesError> for Error {
    fn from(err: crate::error::UpdateUserAttributesError) -> Self {
        match err {
            crate::error::UpdateUserAttributesError::AliasExistsException(inner) => {
                Error::AliasExistsException(inner)
            }
            crate::error::UpdateUserAttributesError::CodeDeliveryFailureException(inner) => {
                Error::CodeDeliveryFailureException(inner)
            }
            crate::error::UpdateUserAttributesError::CodeMismatchException(inner) => {
                Error::CodeMismatchException(inner)
            }
            crate::error::UpdateUserAttributesError::ExpiredCodeException(inner) => {
                Error::ExpiredCodeException(inner)
            }
            crate::error::UpdateUserAttributesError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::UpdateUserAttributesError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateUserAttributesError::InvalidEmailRoleAccessPolicyException(
                inner,
            ) => Error::InvalidEmailRoleAccessPolicyException(inner),
            crate::error::UpdateUserAttributesError::InvalidLambdaResponseException(inner) => {
                Error::InvalidLambdaResponseException(inner)
            }
            crate::error::UpdateUserAttributesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserAttributesError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::UpdateUserAttributesError::InvalidSmsRoleTrustRelationshipException(
                inner,
            ) => Error::InvalidSmsRoleTrustRelationshipException(inner),
            crate::error::UpdateUserAttributesError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateUserAttributesError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::UpdateUserAttributesError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserAttributesError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateUserAttributesError::UnexpectedLambdaException(inner) => {
                Error::UnexpectedLambdaException(inner)
            }
            crate::error::UpdateUserAttributesError::UserLambdaValidationException(inner) => {
                Error::UserLambdaValidationException(inner)
            }
            crate::error::UpdateUserAttributesError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::UpdateUserAttributesError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::UpdateUserAttributesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserPoolError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UpdateUserPoolError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserPoolError> for Error {
    fn from(err: crate::error::UpdateUserPoolError) -> Self {
        match err {
            crate::error::UpdateUserPoolError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateUserPoolError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateUserPoolError::InvalidEmailRoleAccessPolicyException(inner) => {
                Error::InvalidEmailRoleAccessPolicyException(inner)
            }
            crate::error::UpdateUserPoolError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserPoolError::InvalidSmsRoleAccessPolicyException(inner) => {
                Error::InvalidSmsRoleAccessPolicyException(inner)
            }
            crate::error::UpdateUserPoolError::InvalidSmsRoleTrustRelationshipException(inner) => {
                Error::InvalidSmsRoleTrustRelationshipException(inner)
            }
            crate::error::UpdateUserPoolError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateUserPoolError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserPoolError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateUserPoolError::UserImportInProgressException(inner) => {
                Error::UserImportInProgressException(inner)
            }
            crate::error::UpdateUserPoolError::UserPoolTaggingException(inner) => {
                Error::UserPoolTaggingException(inner)
            }
            crate::error::UpdateUserPoolError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserPoolClientError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserPoolClientError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserPoolClientError> for Error {
    fn from(err: crate::error::UpdateUserPoolClientError) -> Self {
        match err {
            crate::error::UpdateUserPoolClientError::ConcurrentModificationException(inner) => {
                Error::ConcurrentModificationException(inner)
            }
            crate::error::UpdateUserPoolClientError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateUserPoolClientError::InvalidOAuthFlowException(inner) => {
                Error::InvalidOAuthFlowException(inner)
            }
            crate::error::UpdateUserPoolClientError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserPoolClientError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateUserPoolClientError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserPoolClientError::ScopeDoesNotExistException(inner) => {
                Error::ScopeDoesNotExistException(inner)
            }
            crate::error::UpdateUserPoolClientError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateUserPoolClientError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateUserPoolDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateUserPoolDomainError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateUserPoolDomainError> for Error {
    fn from(err: crate::error::UpdateUserPoolDomainError) -> Self {
        match err {
            crate::error::UpdateUserPoolDomainError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::UpdateUserPoolDomainError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateUserPoolDomainError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::UpdateUserPoolDomainError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateUserPoolDomainError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::UpdateUserPoolDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::VerifySoftwareTokenError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::VerifySoftwareTokenError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::VerifySoftwareTokenError> for Error {
    fn from(err: crate::error::VerifySoftwareTokenError) -> Self {
        match err {
            crate::error::VerifySoftwareTokenError::CodeMismatchException(inner) => {
                Error::CodeMismatchException(inner)
            }
            crate::error::VerifySoftwareTokenError::EnableSoftwareTokenMfaException(inner) => {
                Error::EnableSoftwareTokenMfaException(inner)
            }
            crate::error::VerifySoftwareTokenError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::VerifySoftwareTokenError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::VerifySoftwareTokenError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::VerifySoftwareTokenError::InvalidUserPoolConfigurationException(
                inner,
            ) => Error::InvalidUserPoolConfigurationException(inner),
            crate::error::VerifySoftwareTokenError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::VerifySoftwareTokenError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::VerifySoftwareTokenError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::VerifySoftwareTokenError::SoftwareTokenMfaNotFoundException(inner) => {
                Error::SoftwareTokenMfaNotFoundException(inner)
            }
            crate::error::VerifySoftwareTokenError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::VerifySoftwareTokenError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::VerifySoftwareTokenError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::VerifySoftwareTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::VerifyUserAttributeError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::VerifyUserAttributeError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::VerifyUserAttributeError> for Error {
    fn from(err: crate::error::VerifyUserAttributeError) -> Self {
        match err {
            crate::error::VerifyUserAttributeError::AliasExistsException(inner) => {
                Error::AliasExistsException(inner)
            }
            crate::error::VerifyUserAttributeError::CodeMismatchException(inner) => {
                Error::CodeMismatchException(inner)
            }
            crate::error::VerifyUserAttributeError::ExpiredCodeException(inner) => {
                Error::ExpiredCodeException(inner)
            }
            crate::error::VerifyUserAttributeError::ForbiddenException(inner) => {
                Error::ForbiddenException(inner)
            }
            crate::error::VerifyUserAttributeError::InternalErrorException(inner) => {
                Error::InternalErrorException(inner)
            }
            crate::error::VerifyUserAttributeError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::VerifyUserAttributeError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::VerifyUserAttributeError::NotAuthorizedException(inner) => {
                Error::NotAuthorizedException(inner)
            }
            crate::error::VerifyUserAttributeError::PasswordResetRequiredException(inner) => {
                Error::PasswordResetRequiredException(inner)
            }
            crate::error::VerifyUserAttributeError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::VerifyUserAttributeError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::error::VerifyUserAttributeError::UserNotConfirmedException(inner) => {
                Error::UserNotConfirmedException(inner)
            }
            crate::error::VerifyUserAttributeError::UserNotFoundException(inner) => {
                Error::UserNotFoundException(inner)
            }
            crate::error::VerifyUserAttributeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AliasExistsException(e) => e.request_id(),
            Self::CodeDeliveryFailureException(e) => e.request_id(),
            Self::CodeMismatchException(e) => e.request_id(),
            Self::ConcurrentModificationException(e) => e.request_id(),
            Self::DuplicateProviderException(e) => e.request_id(),
            Self::EnableSoftwareTokenMfaException(e) => e.request_id(),
            Self::ExpiredCodeException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::GroupExistsException(e) => e.request_id(),
            Self::InternalErrorException(e) => e.request_id(),
            Self::InvalidEmailRoleAccessPolicyException(e) => e.request_id(),
            Self::InvalidLambdaResponseException(e) => e.request_id(),
            Self::InvalidOAuthFlowException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::InvalidPasswordException(e) => e.request_id(),
            Self::InvalidSmsRoleAccessPolicyException(e) => e.request_id(),
            Self::InvalidSmsRoleTrustRelationshipException(e) => e.request_id(),
            Self::InvalidUserPoolConfigurationException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::MfaMethodNotFoundException(e) => e.request_id(),
            Self::NotAuthorizedException(e) => e.request_id(),
            Self::PasswordResetRequiredException(e) => e.request_id(),
            Self::PreconditionNotMetException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ScopeDoesNotExistException(e) => e.request_id(),
            Self::SoftwareTokenMfaNotFoundException(e) => e.request_id(),
            Self::TooManyFailedAttemptsException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::UnexpectedLambdaException(e) => e.request_id(),
            Self::UnsupportedIdentityProviderException(e) => e.request_id(),
            Self::UnsupportedOperationException(e) => e.request_id(),
            Self::UnsupportedTokenTypeException(e) => e.request_id(),
            Self::UnsupportedUserStateException(e) => e.request_id(),
            Self::UserImportInProgressException(e) => e.request_id(),
            Self::UserLambdaValidationException(e) => e.request_id(),
            Self::UserNotConfirmedException(e) => e.request_id(),
            Self::UserNotFoundException(e) => e.request_id(),
            Self::UserPoolAddOnNotEnabledException(e) => e.request_id(),
            Self::UserPoolTaggingException(e) => e.request_id(),
            Self::UsernameExistsException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
