// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`GetUser`](crate::operation::get_user::builders::GetUserFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`access_token(impl Into<String>)`](crate::operation::get_user::builders::GetUserFluentBuilder::access_token) / [`set_access_token(Option<String>)`](crate::operation::get_user::builders::GetUserFluentBuilder::set_access_token): <p>A non-expired access token for the user whose information you want to query.</p>
    /// - On success, responds with [`GetUserOutput`](crate::operation::get_user::GetUserOutput) with field(s):
    ///   - [`username(Option<String>)`](crate::operation::get_user::GetUserOutput::username): <p>The user name of the user you want to retrieve from the get user request.</p>
    ///   - [`user_attributes(Option<Vec<AttributeType>>)`](crate::operation::get_user::GetUserOutput::user_attributes): <p>An array of name-value pairs representing user attributes.</p>  <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    ///   - [`mfa_options(Option<Vec<MfaOptionType>>)`](crate::operation::get_user::GetUserOutput::mfa_options): <p> <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.</p>
    ///   - [`preferred_mfa_setting(Option<String>)`](crate::operation::get_user::GetUserOutput::preferred_mfa_setting): <p>The user's preferred MFA setting.</p>
    ///   - [`user_mfa_setting_list(Option<Vec<String>>)`](crate::operation::get_user::GetUserOutput::user_mfa_setting_list): <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    /// - On failure, responds with [`SdkError<GetUserError>`](crate::operation::get_user::GetUserError)
    pub fn get_user(&self) -> crate::operation::get_user::builders::GetUserFluentBuilder {
        crate::operation::get_user::builders::GetUserFluentBuilder::new(self.handle.clone())
    }
}
