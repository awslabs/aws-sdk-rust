// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_admin_list_groups_for_user_output_next_token(
    input: &crate::operation::admin_list_groups_for_user::AdminListGroupsForUserOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_admin_list_user_auth_events_output_next_token(
    input: &crate::operation::admin_list_user_auth_events::AdminListUserAuthEventsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_groups_output_next_token(
    input: &crate::operation::list_groups::ListGroupsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_identity_providers_output_next_token(
    input: &crate::operation::list_identity_providers::ListIdentityProvidersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_resource_servers_output_next_token(
    input: &crate::operation::list_resource_servers::ListResourceServersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_user_pool_clients_output_next_token(
    input: &crate::operation::list_user_pool_clients::ListUserPoolClientsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_user_pools_output_next_token(
    input: &crate::operation::list_user_pools::ListUserPoolsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_users_output_pagination_token(
    input: &crate::operation::list_users::ListUsersOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.pagination_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_users_in_group_output_next_token(
    input: &crate::operation::list_users_in_group::ListUsersInGroupOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_admin_list_groups_for_user_output_groups(
    input: crate::operation::admin_list_groups_for_user::AdminListGroupsForUserOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GroupType>> {
    let input = match input.groups {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_admin_list_user_auth_events_output_auth_events(
    input: crate::operation::admin_list_user_auth_events::AdminListUserAuthEventsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::AuthEventType>> {
    let input = match input.auth_events {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_groups_output_groups(
    input: crate::operation::list_groups::ListGroupsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GroupType>> {
    let input = match input.groups {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_identity_providers_output_providers(
    input: crate::operation::list_identity_providers::ListIdentityProvidersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProviderDescription>> {
    let input = input.providers;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_resource_servers_output_resource_servers(
    input: crate::operation::list_resource_servers::ListResourceServersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ResourceServerType>> {
    let input = input.resource_servers;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_user_pool_clients_output_user_pool_clients(
    input: crate::operation::list_user_pool_clients::ListUserPoolClientsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UserPoolClientDescription>> {
    let input = match input.user_pool_clients {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_user_pools_output_user_pools(
    input: crate::operation::list_user_pools::ListUserPoolsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UserPoolDescriptionType>> {
    let input = match input.user_pools {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_users_output_users(
    input: crate::operation::list_users::ListUsersOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UserType>> {
    let input = match input.users {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_users_in_group_output_users(
    input: crate::operation::list_users_in_group::ListUsersInGroupOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::UserType>> {
    let input = match input.users {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
