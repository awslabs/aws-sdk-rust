// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_structure_crate_output_admin_list_groups_for_user_output_next_token(
    input: &crate::output::AdminListGroupsForUserOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_admin_list_user_auth_events_output_next_token(
    input: &crate::output::AdminListUserAuthEventsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_groups_output_next_token(
    input: &crate::output::ListGroupsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_identity_providers_output_next_token(
    input: &crate::output::ListIdentityProvidersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_resource_servers_output_next_token(
    input: &crate::output::ListResourceServersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_user_pool_clients_output_next_token(
    input: &crate::output::ListUserPoolClientsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_user_pools_output_next_token(
    input: &crate::output::ListUserPoolsOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_users_output_pagination_token(
    input: &crate::output::ListUsersOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.pagination_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn reflens_structure_crate_output_list_users_in_group_output_next_token(
    input: &crate::output::ListUsersInGroupOutput,
) -> std::option::Option<&std::string::String> {
    let input = match &input.next_token {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_admin_list_groups_for_user_output_groups(
    input: crate::output::AdminListGroupsForUserOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GroupType>> {
    let input = match input.groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_admin_list_user_auth_events_output_auth_events(
    input: crate::output::AdminListUserAuthEventsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::AuthEventType>> {
    let input = match input.auth_events {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_groups_output_groups(
    input: crate::output::ListGroupsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::GroupType>> {
    let input = match input.groups {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_identity_providers_output_providers(
    input: crate::output::ListIdentityProvidersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ProviderDescription>> {
    let input = match input.providers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_resource_servers_output_resource_servers(
    input: crate::output::ListResourceServersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::ResourceServerType>> {
    let input = match input.resource_servers {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_user_pool_clients_output_user_pool_clients(
    input: crate::output::ListUserPoolClientsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UserPoolClientDescription>> {
    let input = match input.user_pool_clients {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_user_pools_output_user_pools(
    input: crate::output::ListUserPoolsOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UserPoolDescriptionType>> {
    let input = match input.user_pools {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_users_output_users(
    input: crate::output::ListUsersOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UserType>> {
    let input = match input.users {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}

pub(crate) fn lens_structure_crate_output_list_users_in_group_output_users(
    input: crate::output::ListUsersInGroupOutput,
) -> std::option::Option<std::vec::Vec<crate::model::UserType>> {
    let input = match input.users {
        None => return None,
        Some(t) => t,
    };
    Some(input)
}
