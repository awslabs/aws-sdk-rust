// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Account takeover actions type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AccountTakeoverActionsType {
    /// <p>Action to take for a low risk.</p>
    #[doc(hidden)]
    pub low_action: std::option::Option<crate::types::AccountTakeoverActionType>,
    /// <p>Action to take for a medium risk.</p>
    #[doc(hidden)]
    pub medium_action: std::option::Option<crate::types::AccountTakeoverActionType>,
    /// <p>Action to take for a high risk.</p>
    #[doc(hidden)]
    pub high_action: std::option::Option<crate::types::AccountTakeoverActionType>,
}
impl AccountTakeoverActionsType {
    /// <p>Action to take for a low risk.</p>
    pub fn low_action(&self) -> std::option::Option<&crate::types::AccountTakeoverActionType> {
        self.low_action.as_ref()
    }
    /// <p>Action to take for a medium risk.</p>
    pub fn medium_action(&self) -> std::option::Option<&crate::types::AccountTakeoverActionType> {
        self.medium_action.as_ref()
    }
    /// <p>Action to take for a high risk.</p>
    pub fn high_action(&self) -> std::option::Option<&crate::types::AccountTakeoverActionType> {
        self.high_action.as_ref()
    }
}
impl AccountTakeoverActionsType {
    /// Creates a new builder-style object to manufacture [`AccountTakeoverActionsType`](crate::types::AccountTakeoverActionsType).
    pub fn builder() -> crate::types::builders::AccountTakeoverActionsTypeBuilder {
        crate::types::builders::AccountTakeoverActionsTypeBuilder::default()
    }
}

/// A builder for [`AccountTakeoverActionsType`](crate::types::AccountTakeoverActionsType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AccountTakeoverActionsTypeBuilder {
    pub(crate) low_action: std::option::Option<crate::types::AccountTakeoverActionType>,
    pub(crate) medium_action: std::option::Option<crate::types::AccountTakeoverActionType>,
    pub(crate) high_action: std::option::Option<crate::types::AccountTakeoverActionType>,
}
impl AccountTakeoverActionsTypeBuilder {
    /// <p>Action to take for a low risk.</p>
    pub fn low_action(mut self, input: crate::types::AccountTakeoverActionType) -> Self {
        self.low_action = Some(input);
        self
    }
    /// <p>Action to take for a low risk.</p>
    pub fn set_low_action(
        mut self,
        input: std::option::Option<crate::types::AccountTakeoverActionType>,
    ) -> Self {
        self.low_action = input;
        self
    }
    /// <p>Action to take for a medium risk.</p>
    pub fn medium_action(mut self, input: crate::types::AccountTakeoverActionType) -> Self {
        self.medium_action = Some(input);
        self
    }
    /// <p>Action to take for a medium risk.</p>
    pub fn set_medium_action(
        mut self,
        input: std::option::Option<crate::types::AccountTakeoverActionType>,
    ) -> Self {
        self.medium_action = input;
        self
    }
    /// <p>Action to take for a high risk.</p>
    pub fn high_action(mut self, input: crate::types::AccountTakeoverActionType) -> Self {
        self.high_action = Some(input);
        self
    }
    /// <p>Action to take for a high risk.</p>
    pub fn set_high_action(
        mut self,
        input: std::option::Option<crate::types::AccountTakeoverActionType>,
    ) -> Self {
        self.high_action = input;
        self
    }
    /// Consumes the builder and constructs a [`AccountTakeoverActionsType`](crate::types::AccountTakeoverActionsType).
    pub fn build(self) -> crate::types::AccountTakeoverActionsType {
        crate::types::AccountTakeoverActionsType {
            low_action: self.low_action,
            medium_action: self.medium_action,
            high_action: self.high_action,
        }
    }
}
