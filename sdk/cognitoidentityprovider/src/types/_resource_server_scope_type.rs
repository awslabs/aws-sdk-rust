// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A resource server scope.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceServerScopeType {
    /// <p>The name of the scope.</p>
    #[doc(hidden)]
    pub scope_name: std::option::Option<std::string::String>,
    /// <p>A description of the scope.</p>
    #[doc(hidden)]
    pub scope_description: std::option::Option<std::string::String>,
}
impl ResourceServerScopeType {
    /// <p>The name of the scope.</p>
    pub fn scope_name(&self) -> std::option::Option<&str> {
        self.scope_name.as_deref()
    }
    /// <p>A description of the scope.</p>
    pub fn scope_description(&self) -> std::option::Option<&str> {
        self.scope_description.as_deref()
    }
}
impl ResourceServerScopeType {
    /// Creates a new builder-style object to manufacture [`ResourceServerScopeType`](crate::types::ResourceServerScopeType).
    pub fn builder() -> crate::types::builders::ResourceServerScopeTypeBuilder {
        crate::types::builders::ResourceServerScopeTypeBuilder::default()
    }
}

/// A builder for [`ResourceServerScopeType`](crate::types::ResourceServerScopeType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceServerScopeTypeBuilder {
    pub(crate) scope_name: std::option::Option<std::string::String>,
    pub(crate) scope_description: std::option::Option<std::string::String>,
}
impl ResourceServerScopeTypeBuilder {
    /// <p>The name of the scope.</p>
    pub fn scope_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.scope_name = Some(input.into());
        self
    }
    /// <p>The name of the scope.</p>
    pub fn set_scope_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.scope_name = input;
        self
    }
    /// <p>A description of the scope.</p>
    pub fn scope_description(mut self, input: impl Into<std::string::String>) -> Self {
        self.scope_description = Some(input.into());
        self
    }
    /// <p>A description of the scope.</p>
    pub fn set_scope_description(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.scope_description = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceServerScopeType`](crate::types::ResourceServerScopeType).
    pub fn build(self) -> crate::types::ResourceServerScopeType {
        crate::types::ResourceServerScopeType {
            scope_name: self.scope_name,
            scope_description: self.scope_description,
        }
    }
}
