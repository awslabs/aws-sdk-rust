// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The user pool add-ons type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserPoolAddOnsType {
    /// <p>The advanced security mode.</p>
    #[doc(hidden)]
    pub advanced_security_mode: std::option::Option<crate::types::AdvancedSecurityModeType>,
}
impl UserPoolAddOnsType {
    /// <p>The advanced security mode.</p>
    pub fn advanced_security_mode(
        &self,
    ) -> std::option::Option<&crate::types::AdvancedSecurityModeType> {
        self.advanced_security_mode.as_ref()
    }
}
impl UserPoolAddOnsType {
    /// Creates a new builder-style object to manufacture [`UserPoolAddOnsType`](crate::types::UserPoolAddOnsType).
    pub fn builder() -> crate::types::builders::UserPoolAddOnsTypeBuilder {
        crate::types::builders::UserPoolAddOnsTypeBuilder::default()
    }
}

/// A builder for [`UserPoolAddOnsType`](crate::types::UserPoolAddOnsType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserPoolAddOnsTypeBuilder {
    pub(crate) advanced_security_mode: std::option::Option<crate::types::AdvancedSecurityModeType>,
}
impl UserPoolAddOnsTypeBuilder {
    /// <p>The advanced security mode.</p>
    pub fn advanced_security_mode(mut self, input: crate::types::AdvancedSecurityModeType) -> Self {
        self.advanced_security_mode = Some(input);
        self
    }
    /// <p>The advanced security mode.</p>
    pub fn set_advanced_security_mode(
        mut self,
        input: std::option::Option<crate::types::AdvancedSecurityModeType>,
    ) -> Self {
        self.advanced_security_mode = input;
        self
    }
    /// Consumes the builder and constructs a [`UserPoolAddOnsType`](crate::types::UserPoolAddOnsType).
    pub fn build(self) -> crate::types::UserPoolAddOnsType {
        crate::types::UserPoolAddOnsType {
            advanced_security_mode: self.advanced_security_mode,
        }
    }
}
