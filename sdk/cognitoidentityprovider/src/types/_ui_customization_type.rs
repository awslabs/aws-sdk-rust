// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for the UI customization information for a user pool's built-in app UI.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UiCustomizationType {
    /// <p>The user pool ID for the user pool.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The client ID for the client app.</p>
    #[doc(hidden)]
    pub client_id: std::option::Option<std::string::String>,
    /// <p>The logo image for the UI customization.</p>
    #[doc(hidden)]
    pub image_url: std::option::Option<std::string::String>,
    /// <p>The CSS values in the UI customization.</p>
    #[doc(hidden)]
    pub css: std::option::Option<std::string::String>,
    /// <p>The CSS version number.</p>
    #[doc(hidden)]
    pub css_version: std::option::Option<std::string::String>,
    /// <p>The last-modified date for the UI customization.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The creation date for the UI customization.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl UiCustomizationType {
    /// <p>The user pool ID for the user pool.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The client ID for the client app.</p>
    pub fn client_id(&self) -> std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The logo image for the UI customization.</p>
    pub fn image_url(&self) -> std::option::Option<&str> {
        self.image_url.as_deref()
    }
    /// <p>The CSS values in the UI customization.</p>
    pub fn css(&self) -> std::option::Option<&str> {
        self.css.as_deref()
    }
    /// <p>The CSS version number.</p>
    pub fn css_version(&self) -> std::option::Option<&str> {
        self.css_version.as_deref()
    }
    /// <p>The last-modified date for the UI customization.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>The creation date for the UI customization.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
}
impl std::fmt::Debug for UiCustomizationType {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UiCustomizationType");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("image_url", &self.image_url);
        formatter.field("css", &self.css);
        formatter.field("css_version", &self.css_version);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.field("creation_date", &self.creation_date);
        formatter.finish()
    }
}
impl UiCustomizationType {
    /// Creates a new builder-style object to manufacture [`UiCustomizationType`](crate::types::UiCustomizationType).
    pub fn builder() -> crate::types::builders::UiCustomizationTypeBuilder {
        crate::types::builders::UiCustomizationTypeBuilder::default()
    }
}

/// A builder for [`UiCustomizationType`](crate::types::UiCustomizationType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UiCustomizationTypeBuilder {
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) client_id: std::option::Option<std::string::String>,
    pub(crate) image_url: std::option::Option<std::string::String>,
    pub(crate) css: std::option::Option<std::string::String>,
    pub(crate) css_version: std::option::Option<std::string::String>,
    pub(crate) last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
}
impl UiCustomizationTypeBuilder {
    /// <p>The user pool ID for the user pool.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The client ID for the client app.</p>
    pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_id = Some(input.into());
        self
    }
    /// <p>The client ID for the client app.</p>
    pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The logo image for the UI customization.</p>
    pub fn image_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.image_url = Some(input.into());
        self
    }
    /// <p>The logo image for the UI customization.</p>
    pub fn set_image_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.image_url = input;
        self
    }
    /// <p>The CSS values in the UI customization.</p>
    pub fn css(mut self, input: impl Into<std::string::String>) -> Self {
        self.css = Some(input.into());
        self
    }
    /// <p>The CSS values in the UI customization.</p>
    pub fn set_css(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.css = input;
        self
    }
    /// <p>The CSS version number.</p>
    pub fn css_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.css_version = Some(input.into());
        self
    }
    /// <p>The CSS version number.</p>
    pub fn set_css_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.css_version = input;
        self
    }
    /// <p>The last-modified date for the UI customization.</p>
    pub fn last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>The last-modified date for the UI customization.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The creation date for the UI customization.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The creation date for the UI customization.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// Consumes the builder and constructs a [`UiCustomizationType`](crate::types::UiCustomizationType).
    pub fn build(self) -> crate::types::UiCustomizationType {
        crate::types::UiCustomizationType {
            user_pool_id: self.user_pool_id,
            client_id: self.client_id,
            image_url: self.image_url,
            css: self.css,
            css_version: self.css_version,
            last_modified_date: self.last_modified_date,
            creation_date: self.creation_date,
        }
    }
}
impl std::fmt::Debug for UiCustomizationTypeBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UiCustomizationTypeBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("image_url", &self.image_url);
        formatter.field("css", &self.css);
        formatter.field("css_version", &self.css_version);
        formatter.field("last_modified_date", &self.last_modified_date);
        formatter.field("creation_date", &self.creation_date);
        formatter.finish()
    }
}
