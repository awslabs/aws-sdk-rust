// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The password policy type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PasswordPolicyType {
    /// <p>The minimum length of the password in the policy that you have set. This value can't be less than 6.</p>
    #[doc(hidden)]
    pub minimum_length: i32,
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.</p>
    #[doc(hidden)]
    pub require_uppercase: bool,
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.</p>
    #[doc(hidden)]
    pub require_lowercase: bool,
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one number in their password.</p>
    #[doc(hidden)]
    pub require_numbers: bool,
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.</p>
    #[doc(hidden)]
    pub require_symbols: bool,
    /// <p>The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password.</p> <note>
    /// <p>When you set <code>TemporaryPasswordValidityDays</code> for a user pool, you can no longer set a value for the legacy <code>UnusedAccountValidityDays</code> parameter in that user pool.</p>
    /// </note>
    #[doc(hidden)]
    pub temporary_password_validity_days: i32,
}
impl PasswordPolicyType {
    /// <p>The minimum length of the password in the policy that you have set. This value can't be less than 6.</p>
    pub fn minimum_length(&self) -> i32 {
        self.minimum_length
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.</p>
    pub fn require_uppercase(&self) -> bool {
        self.require_uppercase
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.</p>
    pub fn require_lowercase(&self) -> bool {
        self.require_lowercase
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one number in their password.</p>
    pub fn require_numbers(&self) -> bool {
        self.require_numbers
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.</p>
    pub fn require_symbols(&self) -> bool {
        self.require_symbols
    }
    /// <p>The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password.</p> <note>
    /// <p>When you set <code>TemporaryPasswordValidityDays</code> for a user pool, you can no longer set a value for the legacy <code>UnusedAccountValidityDays</code> parameter in that user pool.</p>
    /// </note>
    pub fn temporary_password_validity_days(&self) -> i32 {
        self.temporary_password_validity_days
    }
}
impl PasswordPolicyType {
    /// Creates a new builder-style object to manufacture [`PasswordPolicyType`](crate::types::PasswordPolicyType).
    pub fn builder() -> crate::types::builders::PasswordPolicyTypeBuilder {
        crate::types::builders::PasswordPolicyTypeBuilder::default()
    }
}

/// A builder for [`PasswordPolicyType`](crate::types::PasswordPolicyType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PasswordPolicyTypeBuilder {
    pub(crate) minimum_length: std::option::Option<i32>,
    pub(crate) require_uppercase: std::option::Option<bool>,
    pub(crate) require_lowercase: std::option::Option<bool>,
    pub(crate) require_numbers: std::option::Option<bool>,
    pub(crate) require_symbols: std::option::Option<bool>,
    pub(crate) temporary_password_validity_days: std::option::Option<i32>,
}
impl PasswordPolicyTypeBuilder {
    /// <p>The minimum length of the password in the policy that you have set. This value can't be less than 6.</p>
    pub fn minimum_length(mut self, input: i32) -> Self {
        self.minimum_length = Some(input);
        self
    }
    /// <p>The minimum length of the password in the policy that you have set. This value can't be less than 6.</p>
    pub fn set_minimum_length(mut self, input: std::option::Option<i32>) -> Self {
        self.minimum_length = input;
        self
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.</p>
    pub fn require_uppercase(mut self, input: bool) -> Self {
        self.require_uppercase = Some(input);
        self
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one uppercase letter in their password.</p>
    pub fn set_require_uppercase(mut self, input: std::option::Option<bool>) -> Self {
        self.require_uppercase = input;
        self
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.</p>
    pub fn require_lowercase(mut self, input: bool) -> Self {
        self.require_lowercase = Some(input);
        self
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one lowercase letter in their password.</p>
    pub fn set_require_lowercase(mut self, input: std::option::Option<bool>) -> Self {
        self.require_lowercase = input;
        self
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one number in their password.</p>
    pub fn require_numbers(mut self, input: bool) -> Self {
        self.require_numbers = Some(input);
        self
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one number in their password.</p>
    pub fn set_require_numbers(mut self, input: std::option::Option<bool>) -> Self {
        self.require_numbers = input;
        self
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.</p>
    pub fn require_symbols(mut self, input: bool) -> Self {
        self.require_symbols = Some(input);
        self
    }
    /// <p>In the password policy that you have set, refers to whether you have required users to use at least one symbol in their password.</p>
    pub fn set_require_symbols(mut self, input: std::option::Option<bool>) -> Self {
        self.require_symbols = input;
        self
    }
    /// <p>The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password.</p> <note>
    /// <p>When you set <code>TemporaryPasswordValidityDays</code> for a user pool, you can no longer set a value for the legacy <code>UnusedAccountValidityDays</code> parameter in that user pool.</p>
    /// </note>
    pub fn temporary_password_validity_days(mut self, input: i32) -> Self {
        self.temporary_password_validity_days = Some(input);
        self
    }
    /// <p>The number of days a temporary password is valid in the password policy. If the user doesn't sign in during this time, an administrator must reset their password.</p> <note>
    /// <p>When you set <code>TemporaryPasswordValidityDays</code> for a user pool, you can no longer set a value for the legacy <code>UnusedAccountValidityDays</code> parameter in that user pool.</p>
    /// </note>
    pub fn set_temporary_password_validity_days(mut self, input: std::option::Option<i32>) -> Self {
        self.temporary_password_validity_days = input;
        self
    }
    /// Consumes the builder and constructs a [`PasswordPolicyType`](crate::types::PasswordPolicyType).
    pub fn build(self) -> crate::types::PasswordPolicyType {
        crate::types::PasswordPolicyType {
            minimum_length: self.minimum_length.unwrap_or_default(),
            require_uppercase: self.require_uppercase.unwrap_or_default(),
            require_lowercase: self.require_lowercase.unwrap_or_default(),
            require_numbers: self.require_numbers.unwrap_or_default(),
            require_symbols: self.require_symbols.unwrap_or_default(),
            temporary_password_validity_days: self
                .temporary_password_validity_days
                .unwrap_or_default(),
        }
    }
}
