// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for information about a resource server for a user pool.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ResourceServerType {
    /// <p>The user pool ID for the user pool that hosts the resource server.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The identifier for the resource server.</p>
    #[doc(hidden)]
    pub identifier: std::option::Option<std::string::String>,
    /// <p>The name of the resource server.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>A list of scopes that are defined for the resource server.</p>
    #[doc(hidden)]
    pub scopes: std::option::Option<std::vec::Vec<crate::types::ResourceServerScopeType>>,
}
impl ResourceServerType {
    /// <p>The user pool ID for the user pool that hosts the resource server.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The identifier for the resource server.</p>
    pub fn identifier(&self) -> std::option::Option<&str> {
        self.identifier.as_deref()
    }
    /// <p>The name of the resource server.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A list of scopes that are defined for the resource server.</p>
    pub fn scopes(&self) -> std::option::Option<&[crate::types::ResourceServerScopeType]> {
        self.scopes.as_deref()
    }
}
impl ResourceServerType {
    /// Creates a new builder-style object to manufacture [`ResourceServerType`](crate::types::ResourceServerType).
    pub fn builder() -> crate::types::builders::ResourceServerTypeBuilder {
        crate::types::builders::ResourceServerTypeBuilder::default()
    }
}

/// A builder for [`ResourceServerType`](crate::types::ResourceServerType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ResourceServerTypeBuilder {
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) identifier: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) scopes: std::option::Option<std::vec::Vec<crate::types::ResourceServerScopeType>>,
}
impl ResourceServerTypeBuilder {
    /// <p>The user pool ID for the user pool that hosts the resource server.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool that hosts the resource server.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The identifier for the resource server.</p>
    pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
        self.identifier = Some(input.into());
        self
    }
    /// <p>The identifier for the resource server.</p>
    pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The name of the resource server.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the resource server.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// Appends an item to `scopes`.
    ///
    /// To override the contents of this collection use [`set_scopes`](Self::set_scopes).
    ///
    /// <p>A list of scopes that are defined for the resource server.</p>
    pub fn scopes(mut self, input: crate::types::ResourceServerScopeType) -> Self {
        let mut v = self.scopes.unwrap_or_default();
        v.push(input);
        self.scopes = Some(v);
        self
    }
    /// <p>A list of scopes that are defined for the resource server.</p>
    pub fn set_scopes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::ResourceServerScopeType>>,
    ) -> Self {
        self.scopes = input;
        self
    }
    /// Consumes the builder and constructs a [`ResourceServerType`](crate::types::ResourceServerType).
    pub fn build(self) -> crate::types::ResourceServerType {
        crate::types::ResourceServerType {
            user_pool_id: self.user_pool_id,
            identifier: self.identifier,
            name: self.name,
            scopes: self.scopes,
        }
    }
}
