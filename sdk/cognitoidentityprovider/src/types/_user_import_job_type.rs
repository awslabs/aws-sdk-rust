// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The user import job type.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserImportJobType {
    /// <p>The job name for the user import job.</p>
    #[doc(hidden)]
    pub job_name: std::option::Option<std::string::String>,
    /// <p>The job ID for the user import job.</p>
    #[doc(hidden)]
    pub job_id: std::option::Option<std::string::String>,
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>
    #[doc(hidden)]
    pub pre_signed_url: std::option::Option<std::string::String>,
    /// <p>The date the user import job was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date when the user import job was started.</p>
    #[doc(hidden)]
    pub start_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date when the user import job was completed.</p>
    #[doc(hidden)]
    pub completion_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The status of the user import job. One of the following:</p>
    /// <ul>
    /// <li> <p> <code>Created</code> - The job was created but not started.</p> </li>
    /// <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li>
    /// <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li>
    /// <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li>
    /// <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li>
    /// <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li>
    /// <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li>
    /// <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job can't be started.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::UserImportJobStatusType>,
    /// <p>The role Amazon Resource Name (ARN) for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.</p>
    #[doc(hidden)]
    pub cloud_watch_logs_role_arn: std::option::Option<std::string::String>,
    /// <p>The number of users that were successfully imported.</p>
    #[doc(hidden)]
    pub imported_users: i64,
    /// <p>The number of users that were skipped.</p>
    #[doc(hidden)]
    pub skipped_users: i64,
    /// <p>The number of users that couldn't be imported.</p>
    #[doc(hidden)]
    pub failed_users: i64,
    /// <p>The message returned when the user import job is completed.</p>
    #[doc(hidden)]
    pub completion_message: std::option::Option<std::string::String>,
}
impl UserImportJobType {
    /// <p>The job name for the user import job.</p>
    pub fn job_name(&self) -> std::option::Option<&str> {
        self.job_name.as_deref()
    }
    /// <p>The job ID for the user import job.</p>
    pub fn job_id(&self) -> std::option::Option<&str> {
        self.job_id.as_deref()
    }
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>
    pub fn pre_signed_url(&self) -> std::option::Option<&str> {
        self.pre_signed_url.as_deref()
    }
    /// <p>The date the user import job was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>The date when the user import job was started.</p>
    pub fn start_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.start_date.as_ref()
    }
    /// <p>The date when the user import job was completed.</p>
    pub fn completion_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.completion_date.as_ref()
    }
    /// <p>The status of the user import job. One of the following:</p>
    /// <ul>
    /// <li> <p> <code>Created</code> - The job was created but not started.</p> </li>
    /// <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li>
    /// <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li>
    /// <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li>
    /// <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li>
    /// <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li>
    /// <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li>
    /// <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job can't be started.</p> </li>
    /// </ul>
    pub fn status(&self) -> std::option::Option<&crate::types::UserImportJobStatusType> {
        self.status.as_ref()
    }
    /// <p>The role Amazon Resource Name (ARN) for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.</p>
    pub fn cloud_watch_logs_role_arn(&self) -> std::option::Option<&str> {
        self.cloud_watch_logs_role_arn.as_deref()
    }
    /// <p>The number of users that were successfully imported.</p>
    pub fn imported_users(&self) -> i64 {
        self.imported_users
    }
    /// <p>The number of users that were skipped.</p>
    pub fn skipped_users(&self) -> i64 {
        self.skipped_users
    }
    /// <p>The number of users that couldn't be imported.</p>
    pub fn failed_users(&self) -> i64 {
        self.failed_users
    }
    /// <p>The message returned when the user import job is completed.</p>
    pub fn completion_message(&self) -> std::option::Option<&str> {
        self.completion_message.as_deref()
    }
}
impl UserImportJobType {
    /// Creates a new builder-style object to manufacture [`UserImportJobType`](crate::types::UserImportJobType).
    pub fn builder() -> crate::types::builders::UserImportJobTypeBuilder {
        crate::types::builders::UserImportJobTypeBuilder::default()
    }
}

/// A builder for [`UserImportJobType`](crate::types::UserImportJobType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserImportJobTypeBuilder {
    pub(crate) job_name: std::option::Option<std::string::String>,
    pub(crate) job_id: std::option::Option<std::string::String>,
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) pre_signed_url: std::option::Option<std::string::String>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) start_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) completion_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) status: std::option::Option<crate::types::UserImportJobStatusType>,
    pub(crate) cloud_watch_logs_role_arn: std::option::Option<std::string::String>,
    pub(crate) imported_users: std::option::Option<i64>,
    pub(crate) skipped_users: std::option::Option<i64>,
    pub(crate) failed_users: std::option::Option<i64>,
    pub(crate) completion_message: std::option::Option<std::string::String>,
}
impl UserImportJobTypeBuilder {
    /// <p>The job name for the user import job.</p>
    pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_name = Some(input.into());
        self
    }
    /// <p>The job name for the user import job.</p>
    pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_name = input;
        self
    }
    /// <p>The job ID for the user import job.</p>
    pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.job_id = Some(input.into());
        self
    }
    /// <p>The job ID for the user import job.</p>
    pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.job_id = input;
        self
    }
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>
    pub fn pre_signed_url(mut self, input: impl Into<std::string::String>) -> Self {
        self.pre_signed_url = Some(input.into());
        self
    }
    /// <p>The pre-signed URL to be used to upload the <code>.csv</code> file.</p>
    pub fn set_pre_signed_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pre_signed_url = input;
        self
    }
    /// <p>The date the user import job was created.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The date the user import job was created.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// <p>The date when the user import job was started.</p>
    pub fn start_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.start_date = Some(input);
        self
    }
    /// <p>The date when the user import job was started.</p>
    pub fn set_start_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.start_date = input;
        self
    }
    /// <p>The date when the user import job was completed.</p>
    pub fn completion_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.completion_date = Some(input);
        self
    }
    /// <p>The date when the user import job was completed.</p>
    pub fn set_completion_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.completion_date = input;
        self
    }
    /// <p>The status of the user import job. One of the following:</p>
    /// <ul>
    /// <li> <p> <code>Created</code> - The job was created but not started.</p> </li>
    /// <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li>
    /// <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li>
    /// <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li>
    /// <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li>
    /// <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li>
    /// <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li>
    /// <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job can't be started.</p> </li>
    /// </ul>
    pub fn status(mut self, input: crate::types::UserImportJobStatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the user import job. One of the following:</p>
    /// <ul>
    /// <li> <p> <code>Created</code> - The job was created but not started.</p> </li>
    /// <li> <p> <code>Pending</code> - A transition state. You have started the job, but it has not begun importing users yet.</p> </li>
    /// <li> <p> <code>InProgress</code> - The job has started, and users are being imported.</p> </li>
    /// <li> <p> <code>Stopping</code> - You have stopped the job, but the job has not stopped importing users yet.</p> </li>
    /// <li> <p> <code>Stopped</code> - You have stopped the job, and the job has stopped importing users.</p> </li>
    /// <li> <p> <code>Succeeded</code> - The job has completed successfully.</p> </li>
    /// <li> <p> <code>Failed</code> - The job has stopped due to an error.</p> </li>
    /// <li> <p> <code>Expired</code> - You created a job, but did not start the job within 24-48 hours. All data associated with the job was deleted, and the job can't be started.</p> </li>
    /// </ul>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::UserImportJobStatusType>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The role Amazon Resource Name (ARN) for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.</p>
    pub fn cloud_watch_logs_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.cloud_watch_logs_role_arn = Some(input.into());
        self
    }
    /// <p>The role Amazon Resource Name (ARN) for the Amazon CloudWatch Logging role for the user import job. For more information, see "Creating the CloudWatch Logs IAM Role" in the Amazon Cognito Developer Guide.</p>
    pub fn set_cloud_watch_logs_role_arn(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.cloud_watch_logs_role_arn = input;
        self
    }
    /// <p>The number of users that were successfully imported.</p>
    pub fn imported_users(mut self, input: i64) -> Self {
        self.imported_users = Some(input);
        self
    }
    /// <p>The number of users that were successfully imported.</p>
    pub fn set_imported_users(mut self, input: std::option::Option<i64>) -> Self {
        self.imported_users = input;
        self
    }
    /// <p>The number of users that were skipped.</p>
    pub fn skipped_users(mut self, input: i64) -> Self {
        self.skipped_users = Some(input);
        self
    }
    /// <p>The number of users that were skipped.</p>
    pub fn set_skipped_users(mut self, input: std::option::Option<i64>) -> Self {
        self.skipped_users = input;
        self
    }
    /// <p>The number of users that couldn't be imported.</p>
    pub fn failed_users(mut self, input: i64) -> Self {
        self.failed_users = Some(input);
        self
    }
    /// <p>The number of users that couldn't be imported.</p>
    pub fn set_failed_users(mut self, input: std::option::Option<i64>) -> Self {
        self.failed_users = input;
        self
    }
    /// <p>The message returned when the user import job is completed.</p>
    pub fn completion_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.completion_message = Some(input.into());
        self
    }
    /// <p>The message returned when the user import job is completed.</p>
    pub fn set_completion_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.completion_message = input;
        self
    }
    /// Consumes the builder and constructs a [`UserImportJobType`](crate::types::UserImportJobType).
    pub fn build(self) -> crate::types::UserImportJobType {
        crate::types::UserImportJobType {
            job_name: self.job_name,
            job_id: self.job_id,
            user_pool_id: self.user_pool_id,
            pre_signed_url: self.pre_signed_url,
            creation_date: self.creation_date,
            start_date: self.start_date,
            completion_date: self.completion_date,
            status: self.status,
            cloud_watch_logs_role_arn: self.cloud_watch_logs_role_arn,
            imported_users: self.imported_users.unwrap_or_default(),
            skipped_users: self.skipped_users.unwrap_or_default(),
            failed_users: self.failed_users.unwrap_or_default(),
            completion_message: self.completion_message,
        }
    }
}
