// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The type used for enabling software token MFA at the user level. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted. If you want MFA to be applied selectively based on the assessed risk level of sign-in attempts, deactivate MFA for users and turn on Adaptive Authentication for the user pool.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SoftwareTokenMfaSettingsType {
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    #[doc(hidden)]
    pub preferred_mfa: bool,
}
impl SoftwareTokenMfaSettingsType {
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    pub fn preferred_mfa(&self) -> bool {
        self.preferred_mfa
    }
}
impl SoftwareTokenMfaSettingsType {
    /// Creates a new builder-style object to manufacture [`SoftwareTokenMfaSettingsType`](crate::types::SoftwareTokenMfaSettingsType).
    pub fn builder() -> crate::types::builders::SoftwareTokenMfaSettingsTypeBuilder {
        crate::types::builders::SoftwareTokenMfaSettingsTypeBuilder::default()
    }
}

/// A builder for [`SoftwareTokenMfaSettingsType`](crate::types::SoftwareTokenMfaSettingsType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SoftwareTokenMfaSettingsTypeBuilder {
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) preferred_mfa: std::option::Option<bool>,
}
impl SoftwareTokenMfaSettingsTypeBuilder {
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Specifies whether software token MFA is activated. If an MFA type is activated for a user, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    pub fn preferred_mfa(mut self, input: bool) -> Self {
        self.preferred_mfa = Some(input);
        self
    }
    /// <p>Specifies whether software token MFA is the preferred MFA method.</p>
    pub fn set_preferred_mfa(mut self, input: std::option::Option<bool>) -> Self {
        self.preferred_mfa = input;
        self
    }
    /// Consumes the builder and constructs a [`SoftwareTokenMfaSettingsType`](crate::types::SoftwareTokenMfaSettingsType).
    pub fn build(self) -> crate::types::SoftwareTokenMfaSettingsType {
        crate::types::SoftwareTokenMfaSettingsType {
            enabled: self.enabled.unwrap_or_default(),
            preferred_mfa: self.preferred_mfa.unwrap_or_default(),
        }
    }
}
