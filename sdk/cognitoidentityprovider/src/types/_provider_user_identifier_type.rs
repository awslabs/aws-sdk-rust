// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for information about an IdP for a user pool.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ProviderUserIdentifierType {
    /// <p>The name of the provider, such as Facebook, Google, or Login with Amazon.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>The name of the provider attribute to link to, such as <code>NameID</code>.</p>
    #[doc(hidden)]
    pub provider_attribute_name: std::option::Option<std::string::String>,
    /// <p>The value of the provider attribute to link to, such as <code>xxxxx_account</code>.</p>
    #[doc(hidden)]
    pub provider_attribute_value: std::option::Option<std::string::String>,
}
impl ProviderUserIdentifierType {
    /// <p>The name of the provider, such as Facebook, Google, or Login with Amazon.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The name of the provider attribute to link to, such as <code>NameID</code>.</p>
    pub fn provider_attribute_name(&self) -> std::option::Option<&str> {
        self.provider_attribute_name.as_deref()
    }
    /// <p>The value of the provider attribute to link to, such as <code>xxxxx_account</code>.</p>
    pub fn provider_attribute_value(&self) -> std::option::Option<&str> {
        self.provider_attribute_value.as_deref()
    }
}
impl ProviderUserIdentifierType {
    /// Creates a new builder-style object to manufacture [`ProviderUserIdentifierType`](crate::types::ProviderUserIdentifierType).
    pub fn builder() -> crate::types::builders::ProviderUserIdentifierTypeBuilder {
        crate::types::builders::ProviderUserIdentifierTypeBuilder::default()
    }
}

/// A builder for [`ProviderUserIdentifierType`](crate::types::ProviderUserIdentifierType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ProviderUserIdentifierTypeBuilder {
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) provider_attribute_name: std::option::Option<std::string::String>,
    pub(crate) provider_attribute_value: std::option::Option<std::string::String>,
}
impl ProviderUserIdentifierTypeBuilder {
    /// <p>The name of the provider, such as Facebook, Google, or Login with Amazon.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The name of the provider, such as Facebook, Google, or Login with Amazon.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// <p>The name of the provider attribute to link to, such as <code>NameID</code>.</p>
    pub fn provider_attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_attribute_name = Some(input.into());
        self
    }
    /// <p>The name of the provider attribute to link to, such as <code>NameID</code>.</p>
    pub fn set_provider_attribute_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provider_attribute_name = input;
        self
    }
    /// <p>The value of the provider attribute to link to, such as <code>xxxxx_account</code>.</p>
    pub fn provider_attribute_value(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_attribute_value = Some(input.into());
        self
    }
    /// <p>The value of the provider attribute to link to, such as <code>xxxxx_account</code>.</p>
    pub fn set_provider_attribute_value(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.provider_attribute_value = input;
        self
    }
    /// Consumes the builder and constructs a [`ProviderUserIdentifierType`](crate::types::ProviderUserIdentifierType).
    pub fn build(self) -> crate::types::ProviderUserIdentifierType {
        crate::types::ProviderUserIdentifierType {
            provider_name: self.provider_name,
            provider_attribute_name: self.provider_attribute_name,
            provider_attribute_value: self.provider_attribute_value,
        }
    }
}
