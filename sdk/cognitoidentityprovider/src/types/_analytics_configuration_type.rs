// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The Amazon Pinpoint analytics configuration necessary to collect metrics for a user pool.</p> <note>
/// <p>In Regions where Amazon Pinpointisn't available, user pools only support sending events to Amazon Pinpoint projects in us-east-1. In Regions where Amazon Pinpoint is available, user pools support sending events to Amazon Pinpoint projects within that same Region.</p>
/// </note>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct AnalyticsConfigurationType {
    /// <p>The application ID for an Amazon Pinpoint application.</p>
    #[doc(hidden)]
    pub application_id: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project to integrate with the chosen user pool Client. Amazon Cognito publishes events to the Amazon Pinpoint project that the app ARN declares.</p>
    #[doc(hidden)]
    pub application_arn: std::option::Option<std::string::String>,
    /// <p>The ARN of an Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.</p>
    #[doc(hidden)]
    pub role_arn: std::option::Option<std::string::String>,
    /// <p>The external ID.</p>
    #[doc(hidden)]
    pub external_id: std::option::Option<std::string::String>,
    /// <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito includes user data in the events that it publishes to Amazon Pinpoint analytics.</p>
    #[doc(hidden)]
    pub user_data_shared: bool,
}
impl AnalyticsConfigurationType {
    /// <p>The application ID for an Amazon Pinpoint application.</p>
    pub fn application_id(&self) -> std::option::Option<&str> {
        self.application_id.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project to integrate with the chosen user pool Client. Amazon Cognito publishes events to the Amazon Pinpoint project that the app ARN declares.</p>
    pub fn application_arn(&self) -> std::option::Option<&str> {
        self.application_arn.as_deref()
    }
    /// <p>The ARN of an Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.</p>
    pub fn role_arn(&self) -> std::option::Option<&str> {
        self.role_arn.as_deref()
    }
    /// <p>The external ID.</p>
    pub fn external_id(&self) -> std::option::Option<&str> {
        self.external_id.as_deref()
    }
    /// <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito includes user data in the events that it publishes to Amazon Pinpoint analytics.</p>
    pub fn user_data_shared(&self) -> bool {
        self.user_data_shared
    }
}
impl AnalyticsConfigurationType {
    /// Creates a new builder-style object to manufacture [`AnalyticsConfigurationType`](crate::types::AnalyticsConfigurationType).
    pub fn builder() -> crate::types::builders::AnalyticsConfigurationTypeBuilder {
        crate::types::builders::AnalyticsConfigurationTypeBuilder::default()
    }
}

/// A builder for [`AnalyticsConfigurationType`](crate::types::AnalyticsConfigurationType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct AnalyticsConfigurationTypeBuilder {
    pub(crate) application_id: std::option::Option<std::string::String>,
    pub(crate) application_arn: std::option::Option<std::string::String>,
    pub(crate) role_arn: std::option::Option<std::string::String>,
    pub(crate) external_id: std::option::Option<std::string::String>,
    pub(crate) user_data_shared: std::option::Option<bool>,
}
impl AnalyticsConfigurationTypeBuilder {
    /// <p>The application ID for an Amazon Pinpoint application.</p>
    pub fn application_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_id = Some(input.into());
        self
    }
    /// <p>The application ID for an Amazon Pinpoint application.</p>
    pub fn set_application_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_id = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project to integrate with the chosen user pool Client. Amazon Cognito publishes events to the Amazon Pinpoint project that the app ARN declares.</p>
    pub fn application_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.application_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an Amazon Pinpoint project. You can use the Amazon Pinpoint project to integrate with the chosen user pool Client. Amazon Cognito publishes events to the Amazon Pinpoint project that the app ARN declares.</p>
    pub fn set_application_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.application_arn = input;
        self
    }
    /// <p>The ARN of an Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.</p>
    pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.role_arn = Some(input.into());
        self
    }
    /// <p>The ARN of an Identity and Access Management role that authorizes Amazon Cognito to publish events to Amazon Pinpoint analytics.</p>
    pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.role_arn = input;
        self
    }
    /// <p>The external ID.</p>
    pub fn external_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.external_id = Some(input.into());
        self
    }
    /// <p>The external ID.</p>
    pub fn set_external_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.external_id = input;
        self
    }
    /// <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito includes user data in the events that it publishes to Amazon Pinpoint analytics.</p>
    pub fn user_data_shared(mut self, input: bool) -> Self {
        self.user_data_shared = Some(input);
        self
    }
    /// <p>If <code>UserDataShared</code> is <code>true</code>, Amazon Cognito includes user data in the events that it publishes to Amazon Pinpoint analytics.</p>
    pub fn set_user_data_shared(mut self, input: std::option::Option<bool>) -> Self {
        self.user_data_shared = input;
        self
    }
    /// Consumes the builder and constructs a [`AnalyticsConfigurationType`](crate::types::AnalyticsConfigurationType).
    pub fn build(self) -> crate::types::AnalyticsConfigurationType {
        crate::types::AnalyticsConfigurationType {
            application_id: self.application_id,
            application_arn: self.application_arn,
            role_arn: self.role_arn,
            external_id: self.external_id,
            user_data_shared: self.user_data_shared.unwrap_or_default(),
        }
    }
}
