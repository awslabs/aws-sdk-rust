// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A container for information about the user pool.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserPoolType {
    /// <p>The ID of the user pool.</p>
    #[doc(hidden)]
    pub id: std::option::Option<std::string::String>,
    /// <p>The name of the user pool.</p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p>The policies associated with the user pool.</p>
    #[doc(hidden)]
    pub policies: std::option::Option<crate::types::UserPoolPolicyType>,
    /// <p>When active, <code>DeletionProtection</code> prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature.</p>
    /// <p>When you try to delete a protected user pool in a <code>DeleteUserPool</code> API request, Amazon Cognito returns an <code>InvalidParameterException</code> error. To delete a protected user pool, send a new <code>DeleteUserPool</code> request after you deactivate deletion protection in an <code>UpdateUserPool</code> API request.</p>
    #[doc(hidden)]
    pub deletion_protection: std::option::Option<crate::types::DeletionProtectionType>,
    /// <p>The Lambda triggers associated with the user pool.</p>
    #[doc(hidden)]
    pub lambda_config: std::option::Option<crate::types::LambdaConfigType>,
    /// <p>The status of a user pool.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::StatusType>,
    /// <p>The date the user pool was last modified.</p>
    #[doc(hidden)]
    pub last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date the user pool was created.</p>
    #[doc(hidden)]
    pub creation_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>A container with the schema attributes of a user pool.</p>
    #[doc(hidden)]
    pub schema_attributes: std::option::Option<std::vec::Vec<crate::types::SchemaAttributeType>>,
    /// <p>The attributes that are auto-verified in a user pool.</p>
    #[doc(hidden)]
    pub auto_verified_attributes:
        std::option::Option<std::vec::Vec<crate::types::VerifiedAttributeType>>,
    /// <p>The attributes that are aliased in a user pool.</p>
    #[doc(hidden)]
    pub alias_attributes: std::option::Option<std::vec::Vec<crate::types::AliasAttributeType>>,
    /// <p>Specifies whether a user can use an email address or phone number as a username when they sign up.</p>
    #[doc(hidden)]
    pub username_attributes:
        std::option::Option<std::vec::Vec<crate::types::UsernameAttributeType>>,
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    #[doc(hidden)]
    pub sms_verification_message: std::option::Option<std::string::String>,
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    #[doc(hidden)]
    pub email_verification_message: std::option::Option<std::string::String>,
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    #[doc(hidden)]
    pub email_verification_subject: std::option::Option<std::string::String>,
    /// <p>The template for verification messages.</p>
    #[doc(hidden)]
    pub verification_message_template:
        std::option::Option<crate::types::VerificationMessageTemplateType>,
    /// <p>The contents of the SMS authentication message.</p>
    #[doc(hidden)]
    pub sms_authentication_message: std::option::Option<std::string::String>,
    /// <p>The settings for updates to user attributes. These settings include the property <code>AttributesRequireVerificationBeforeUpdate</code>, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates"> Verifying updates to email addresses and phone numbers</a>.</p>
    #[doc(hidden)]
    pub user_attribute_update_settings:
        std::option::Option<crate::types::UserAttributeUpdateSettingsType>,
    /// <p>Can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>OFF</code> - MFA tokens aren't required and can't be specified during user registration.</p> </li>
    /// <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you're initially creating a user pool.</p> </li>
    /// <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li>
    /// </ul>
    #[doc(hidden)]
    pub mfa_configuration: std::option::Option<crate::types::UserPoolMfaType>,
    /// <p>The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool.</p> <note>
    /// <p>When you provide a value for any <code>DeviceConfiguration</code> field, you activate the Amazon Cognito device-remembering feature.</p>
    /// </note>
    #[doc(hidden)]
    pub device_configuration: std::option::Option<crate::types::DeviceConfigurationType>,
    /// <p>A number estimating the size of the user pool.</p>
    #[doc(hidden)]
    pub estimated_number_of_users: i32,
    /// <p>The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages tfrom your user pool.</p>
    #[doc(hidden)]
    pub email_configuration: std::option::Option<crate::types::EmailConfigurationType>,
    /// <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    #[doc(hidden)]
    pub sms_configuration: std::option::Option<crate::types::SmsConfigurationType>,
    /// <p>The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p>
    #[doc(hidden)]
    pub user_pool_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The reason why the SMS configuration can't send the messages to your users.</p>
    /// <p>This message might include comma-separated values to describe why your SMS configuration can't send messages to user pool end users.</p>
    /// <dl>
    /// <dt>
    /// InvalidSmsRoleAccessPolicyException
    /// </dt>
    /// <dd>
    /// <p>The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly configured. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html">SmsConfigurationType</a>.</p>
    /// </dd>
    /// <dt>
    /// SNSSandbox
    /// </dt>
    /// <dd>
    /// <p>The Amazon Web Services account is in the SNS SMS Sandbox and messages will only reach verified end users. This parameter won’t get populated with SNSSandbox if the IAM user creating the user pool doesn’t have SNS permissions. To learn how to move your Amazon Web Services account out of the sandbox, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html">Moving out of the SMS sandbox</a>.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub sms_configuration_failure: std::option::Option<std::string::String>,
    /// <p>Deprecated. Review error codes from API requests with <code>EventSource:cognito-idp.amazonaws.com</code> in CloudTrail for information about problems with user pool email configuration.</p>
    #[doc(hidden)]
    pub email_configuration_failure: std::option::Option<std::string::String>,
    /// <p>The domain prefix, if the user pool has a domain associated with it.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p>A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be <code>auth.example.com</code>.</p>
    /// <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
    #[doc(hidden)]
    pub custom_domain: std::option::Option<std::string::String>,
    /// <p>The configuration for <code>AdminCreateUser</code> requests.</p>
    #[doc(hidden)]
    pub admin_create_user_config: std::option::Option<crate::types::AdminCreateUserConfigType>,
    /// <p>The user pool add-ons.</p>
    #[doc(hidden)]
    pub user_pool_add_ons: std::option::Option<crate::types::UserPoolAddOnsType>,
    /// <p>Case sensitivity of the username input for the selected sign-in option. For example, when case sensitivity is set to <code>False</code>, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
    #[doc(hidden)]
    pub username_configuration: std::option::Option<crate::types::UsernameConfigurationType>,
    /// <p>The Amazon Resource Name (ARN) for the user pool.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The available verified method a user can use to recover their password when they call <code>ForgotPassword</code>. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.</p>
    #[doc(hidden)]
    pub account_recovery_setting: std::option::Option<crate::types::AccountRecoverySettingType>,
}
impl UserPoolType {
    /// <p>The ID of the user pool.</p>
    pub fn id(&self) -> std::option::Option<&str> {
        self.id.as_deref()
    }
    /// <p>The name of the user pool.</p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The policies associated with the user pool.</p>
    pub fn policies(&self) -> std::option::Option<&crate::types::UserPoolPolicyType> {
        self.policies.as_ref()
    }
    /// <p>When active, <code>DeletionProtection</code> prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature.</p>
    /// <p>When you try to delete a protected user pool in a <code>DeleteUserPool</code> API request, Amazon Cognito returns an <code>InvalidParameterException</code> error. To delete a protected user pool, send a new <code>DeleteUserPool</code> request after you deactivate deletion protection in an <code>UpdateUserPool</code> API request.</p>
    pub fn deletion_protection(
        &self,
    ) -> std::option::Option<&crate::types::DeletionProtectionType> {
        self.deletion_protection.as_ref()
    }
    /// <p>The Lambda triggers associated with the user pool.</p>
    pub fn lambda_config(&self) -> std::option::Option<&crate::types::LambdaConfigType> {
        self.lambda_config.as_ref()
    }
    /// <p>The status of a user pool.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::StatusType> {
        self.status.as_ref()
    }
    /// <p>The date the user pool was last modified.</p>
    pub fn last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.last_modified_date.as_ref()
    }
    /// <p>The date the user pool was created.</p>
    pub fn creation_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.creation_date.as_ref()
    }
    /// <p>A container with the schema attributes of a user pool.</p>
    pub fn schema_attributes(&self) -> std::option::Option<&[crate::types::SchemaAttributeType]> {
        self.schema_attributes.as_deref()
    }
    /// <p>The attributes that are auto-verified in a user pool.</p>
    pub fn auto_verified_attributes(
        &self,
    ) -> std::option::Option<&[crate::types::VerifiedAttributeType]> {
        self.auto_verified_attributes.as_deref()
    }
    /// <p>The attributes that are aliased in a user pool.</p>
    pub fn alias_attributes(&self) -> std::option::Option<&[crate::types::AliasAttributeType]> {
        self.alias_attributes.as_deref()
    }
    /// <p>Specifies whether a user can use an email address or phone number as a username when they sign up.</p>
    pub fn username_attributes(
        &self,
    ) -> std::option::Option<&[crate::types::UsernameAttributeType]> {
        self.username_attributes.as_deref()
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn sms_verification_message(&self) -> std::option::Option<&str> {
        self.sms_verification_message.as_deref()
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn email_verification_message(&self) -> std::option::Option<&str> {
        self.email_verification_message.as_deref()
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn email_verification_subject(&self) -> std::option::Option<&str> {
        self.email_verification_subject.as_deref()
    }
    /// <p>The template for verification messages.</p>
    pub fn verification_message_template(
        &self,
    ) -> std::option::Option<&crate::types::VerificationMessageTemplateType> {
        self.verification_message_template.as_ref()
    }
    /// <p>The contents of the SMS authentication message.</p>
    pub fn sms_authentication_message(&self) -> std::option::Option<&str> {
        self.sms_authentication_message.as_deref()
    }
    /// <p>The settings for updates to user attributes. These settings include the property <code>AttributesRequireVerificationBeforeUpdate</code>, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates"> Verifying updates to email addresses and phone numbers</a>.</p>
    pub fn user_attribute_update_settings(
        &self,
    ) -> std::option::Option<&crate::types::UserAttributeUpdateSettingsType> {
        self.user_attribute_update_settings.as_ref()
    }
    /// <p>Can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>OFF</code> - MFA tokens aren't required and can't be specified during user registration.</p> </li>
    /// <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you're initially creating a user pool.</p> </li>
    /// <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li>
    /// </ul>
    pub fn mfa_configuration(&self) -> std::option::Option<&crate::types::UserPoolMfaType> {
        self.mfa_configuration.as_ref()
    }
    /// <p>The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool.</p> <note>
    /// <p>When you provide a value for any <code>DeviceConfiguration</code> field, you activate the Amazon Cognito device-remembering feature.</p>
    /// </note>
    pub fn device_configuration(
        &self,
    ) -> std::option::Option<&crate::types::DeviceConfigurationType> {
        self.device_configuration.as_ref()
    }
    /// <p>A number estimating the size of the user pool.</p>
    pub fn estimated_number_of_users(&self) -> i32 {
        self.estimated_number_of_users
    }
    /// <p>The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages tfrom your user pool.</p>
    pub fn email_configuration(
        &self,
    ) -> std::option::Option<&crate::types::EmailConfigurationType> {
        self.email_configuration.as_ref()
    }
    /// <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    pub fn sms_configuration(&self) -> std::option::Option<&crate::types::SmsConfigurationType> {
        self.sms_configuration.as_ref()
    }
    /// <p>The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p>
    pub fn user_pool_tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.user_pool_tags.as_ref()
    }
    /// <p>The reason why the SMS configuration can't send the messages to your users.</p>
    /// <p>This message might include comma-separated values to describe why your SMS configuration can't send messages to user pool end users.</p>
    /// <dl>
    /// <dt>
    /// InvalidSmsRoleAccessPolicyException
    /// </dt>
    /// <dd>
    /// <p>The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly configured. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html">SmsConfigurationType</a>.</p>
    /// </dd>
    /// <dt>
    /// SNSSandbox
    /// </dt>
    /// <dd>
    /// <p>The Amazon Web Services account is in the SNS SMS Sandbox and messages will only reach verified end users. This parameter won’t get populated with SNSSandbox if the IAM user creating the user pool doesn’t have SNS permissions. To learn how to move your Amazon Web Services account out of the sandbox, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html">Moving out of the SMS sandbox</a>.</p>
    /// </dd>
    /// </dl>
    pub fn sms_configuration_failure(&self) -> std::option::Option<&str> {
        self.sms_configuration_failure.as_deref()
    }
    /// <p>Deprecated. Review error codes from API requests with <code>EventSource:cognito-idp.amazonaws.com</code> in CloudTrail for information about problems with user pool email configuration.</p>
    pub fn email_configuration_failure(&self) -> std::option::Option<&str> {
        self.email_configuration_failure.as_deref()
    }
    /// <p>The domain prefix, if the user pool has a domain associated with it.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p>A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be <code>auth.example.com</code>.</p>
    /// <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
    pub fn custom_domain(&self) -> std::option::Option<&str> {
        self.custom_domain.as_deref()
    }
    /// <p>The configuration for <code>AdminCreateUser</code> requests.</p>
    pub fn admin_create_user_config(
        &self,
    ) -> std::option::Option<&crate::types::AdminCreateUserConfigType> {
        self.admin_create_user_config.as_ref()
    }
    /// <p>The user pool add-ons.</p>
    pub fn user_pool_add_ons(&self) -> std::option::Option<&crate::types::UserPoolAddOnsType> {
        self.user_pool_add_ons.as_ref()
    }
    /// <p>Case sensitivity of the username input for the selected sign-in option. For example, when case sensitivity is set to <code>False</code>, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
    pub fn username_configuration(
        &self,
    ) -> std::option::Option<&crate::types::UsernameConfigurationType> {
        self.username_configuration.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) for the user pool.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The available verified method a user can use to recover their password when they call <code>ForgotPassword</code>. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.</p>
    pub fn account_recovery_setting(
        &self,
    ) -> std::option::Option<&crate::types::AccountRecoverySettingType> {
        self.account_recovery_setting.as_ref()
    }
}
impl UserPoolType {
    /// Creates a new builder-style object to manufacture [`UserPoolType`](crate::types::UserPoolType).
    pub fn builder() -> crate::types::builders::UserPoolTypeBuilder {
        crate::types::builders::UserPoolTypeBuilder::default()
    }
}

/// A builder for [`UserPoolType`](crate::types::UserPoolType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserPoolTypeBuilder {
    pub(crate) id: std::option::Option<std::string::String>,
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) policies: std::option::Option<crate::types::UserPoolPolicyType>,
    pub(crate) deletion_protection: std::option::Option<crate::types::DeletionProtectionType>,
    pub(crate) lambda_config: std::option::Option<crate::types::LambdaConfigType>,
    pub(crate) status: std::option::Option<crate::types::StatusType>,
    pub(crate) last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) creation_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) schema_attributes:
        std::option::Option<std::vec::Vec<crate::types::SchemaAttributeType>>,
    pub(crate) auto_verified_attributes:
        std::option::Option<std::vec::Vec<crate::types::VerifiedAttributeType>>,
    pub(crate) alias_attributes:
        std::option::Option<std::vec::Vec<crate::types::AliasAttributeType>>,
    pub(crate) username_attributes:
        std::option::Option<std::vec::Vec<crate::types::UsernameAttributeType>>,
    pub(crate) sms_verification_message: std::option::Option<std::string::String>,
    pub(crate) email_verification_message: std::option::Option<std::string::String>,
    pub(crate) email_verification_subject: std::option::Option<std::string::String>,
    pub(crate) verification_message_template:
        std::option::Option<crate::types::VerificationMessageTemplateType>,
    pub(crate) sms_authentication_message: std::option::Option<std::string::String>,
    pub(crate) user_attribute_update_settings:
        std::option::Option<crate::types::UserAttributeUpdateSettingsType>,
    pub(crate) mfa_configuration: std::option::Option<crate::types::UserPoolMfaType>,
    pub(crate) device_configuration: std::option::Option<crate::types::DeviceConfigurationType>,
    pub(crate) estimated_number_of_users: std::option::Option<i32>,
    pub(crate) email_configuration: std::option::Option<crate::types::EmailConfigurationType>,
    pub(crate) sms_configuration: std::option::Option<crate::types::SmsConfigurationType>,
    pub(crate) user_pool_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) sms_configuration_failure: std::option::Option<std::string::String>,
    pub(crate) email_configuration_failure: std::option::Option<std::string::String>,
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) custom_domain: std::option::Option<std::string::String>,
    pub(crate) admin_create_user_config:
        std::option::Option<crate::types::AdminCreateUserConfigType>,
    pub(crate) user_pool_add_ons: std::option::Option<crate::types::UserPoolAddOnsType>,
    pub(crate) username_configuration: std::option::Option<crate::types::UsernameConfigurationType>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) account_recovery_setting:
        std::option::Option<crate::types::AccountRecoverySettingType>,
}
impl UserPoolTypeBuilder {
    /// <p>The ID of the user pool.</p>
    pub fn id(mut self, input: impl Into<std::string::String>) -> Self {
        self.id = Some(input.into());
        self
    }
    /// <p>The ID of the user pool.</p>
    pub fn set_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The name of the user pool.</p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p>The name of the user pool.</p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The policies associated with the user pool.</p>
    pub fn policies(mut self, input: crate::types::UserPoolPolicyType) -> Self {
        self.policies = Some(input);
        self
    }
    /// <p>The policies associated with the user pool.</p>
    pub fn set_policies(
        mut self,
        input: std::option::Option<crate::types::UserPoolPolicyType>,
    ) -> Self {
        self.policies = input;
        self
    }
    /// <p>When active, <code>DeletionProtection</code> prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature.</p>
    /// <p>When you try to delete a protected user pool in a <code>DeleteUserPool</code> API request, Amazon Cognito returns an <code>InvalidParameterException</code> error. To delete a protected user pool, send a new <code>DeleteUserPool</code> request after you deactivate deletion protection in an <code>UpdateUserPool</code> API request.</p>
    pub fn deletion_protection(mut self, input: crate::types::DeletionProtectionType) -> Self {
        self.deletion_protection = Some(input);
        self
    }
    /// <p>When active, <code>DeletionProtection</code> prevents accidental deletion of your user pool. Before you can delete a user pool that you have protected against deletion, you must deactivate this feature.</p>
    /// <p>When you try to delete a protected user pool in a <code>DeleteUserPool</code> API request, Amazon Cognito returns an <code>InvalidParameterException</code> error. To delete a protected user pool, send a new <code>DeleteUserPool</code> request after you deactivate deletion protection in an <code>UpdateUserPool</code> API request.</p>
    pub fn set_deletion_protection(
        mut self,
        input: std::option::Option<crate::types::DeletionProtectionType>,
    ) -> Self {
        self.deletion_protection = input;
        self
    }
    /// <p>The Lambda triggers associated with the user pool.</p>
    pub fn lambda_config(mut self, input: crate::types::LambdaConfigType) -> Self {
        self.lambda_config = Some(input);
        self
    }
    /// <p>The Lambda triggers associated with the user pool.</p>
    pub fn set_lambda_config(
        mut self,
        input: std::option::Option<crate::types::LambdaConfigType>,
    ) -> Self {
        self.lambda_config = input;
        self
    }
    /// <p>The status of a user pool.</p>
    pub fn status(mut self, input: crate::types::StatusType) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of a user pool.</p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::StatusType>) -> Self {
        self.status = input;
        self
    }
    /// <p>The date the user pool was last modified.</p>
    pub fn last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.last_modified_date = Some(input);
        self
    }
    /// <p>The date the user pool was last modified.</p>
    pub fn set_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.last_modified_date = input;
        self
    }
    /// <p>The date the user pool was created.</p>
    pub fn creation_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.creation_date = Some(input);
        self
    }
    /// <p>The date the user pool was created.</p>
    pub fn set_creation_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.creation_date = input;
        self
    }
    /// Appends an item to `schema_attributes`.
    ///
    /// To override the contents of this collection use [`set_schema_attributes`](Self::set_schema_attributes).
    ///
    /// <p>A container with the schema attributes of a user pool.</p>
    pub fn schema_attributes(mut self, input: crate::types::SchemaAttributeType) -> Self {
        let mut v = self.schema_attributes.unwrap_or_default();
        v.push(input);
        self.schema_attributes = Some(v);
        self
    }
    /// <p>A container with the schema attributes of a user pool.</p>
    pub fn set_schema_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SchemaAttributeType>>,
    ) -> Self {
        self.schema_attributes = input;
        self
    }
    /// Appends an item to `auto_verified_attributes`.
    ///
    /// To override the contents of this collection use [`set_auto_verified_attributes`](Self::set_auto_verified_attributes).
    ///
    /// <p>The attributes that are auto-verified in a user pool.</p>
    pub fn auto_verified_attributes(mut self, input: crate::types::VerifiedAttributeType) -> Self {
        let mut v = self.auto_verified_attributes.unwrap_or_default();
        v.push(input);
        self.auto_verified_attributes = Some(v);
        self
    }
    /// <p>The attributes that are auto-verified in a user pool.</p>
    pub fn set_auto_verified_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::VerifiedAttributeType>>,
    ) -> Self {
        self.auto_verified_attributes = input;
        self
    }
    /// Appends an item to `alias_attributes`.
    ///
    /// To override the contents of this collection use [`set_alias_attributes`](Self::set_alias_attributes).
    ///
    /// <p>The attributes that are aliased in a user pool.</p>
    pub fn alias_attributes(mut self, input: crate::types::AliasAttributeType) -> Self {
        let mut v = self.alias_attributes.unwrap_or_default();
        v.push(input);
        self.alias_attributes = Some(v);
        self
    }
    /// <p>The attributes that are aliased in a user pool.</p>
    pub fn set_alias_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AliasAttributeType>>,
    ) -> Self {
        self.alias_attributes = input;
        self
    }
    /// Appends an item to `username_attributes`.
    ///
    /// To override the contents of this collection use [`set_username_attributes`](Self::set_username_attributes).
    ///
    /// <p>Specifies whether a user can use an email address or phone number as a username when they sign up.</p>
    pub fn username_attributes(mut self, input: crate::types::UsernameAttributeType) -> Self {
        let mut v = self.username_attributes.unwrap_or_default();
        v.push(input);
        self.username_attributes = Some(v);
        self
    }
    /// <p>Specifies whether a user can use an email address or phone number as a username when they sign up.</p>
    pub fn set_username_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::UsernameAttributeType>>,
    ) -> Self {
        self.username_attributes = input;
        self
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn sms_verification_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.sms_verification_message = Some(input.into());
        self
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn set_sms_verification_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sms_verification_message = input;
        self
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn email_verification_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_verification_message = Some(input.into());
        self
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn set_email_verification_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.email_verification_message = input;
        self
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn email_verification_subject(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_verification_subject = Some(input.into());
        self
    }
    /// <p>This parameter is no longer used. See <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_VerificationMessageTemplateType.html">VerificationMessageTemplateType</a>.</p>
    pub fn set_email_verification_subject(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.email_verification_subject = input;
        self
    }
    /// <p>The template for verification messages.</p>
    pub fn verification_message_template(
        mut self,
        input: crate::types::VerificationMessageTemplateType,
    ) -> Self {
        self.verification_message_template = Some(input);
        self
    }
    /// <p>The template for verification messages.</p>
    pub fn set_verification_message_template(
        mut self,
        input: std::option::Option<crate::types::VerificationMessageTemplateType>,
    ) -> Self {
        self.verification_message_template = input;
        self
    }
    /// <p>The contents of the SMS authentication message.</p>
    pub fn sms_authentication_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.sms_authentication_message = Some(input.into());
        self
    }
    /// <p>The contents of the SMS authentication message.</p>
    pub fn set_sms_authentication_message(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sms_authentication_message = input;
        self
    }
    /// <p>The settings for updates to user attributes. These settings include the property <code>AttributesRequireVerificationBeforeUpdate</code>, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates"> Verifying updates to email addresses and phone numbers</a>.</p>
    pub fn user_attribute_update_settings(
        mut self,
        input: crate::types::UserAttributeUpdateSettingsType,
    ) -> Self {
        self.user_attribute_update_settings = Some(input);
        self
    }
    /// <p>The settings for updates to user attributes. These settings include the property <code>AttributesRequireVerificationBeforeUpdate</code>, a user-pool setting that tells Amazon Cognito how to handle changes to the value of your users' email address and phone number attributes. For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pool-settings-email-phone-verification.html#user-pool-settings-verifications-verify-attribute-updates"> Verifying updates to email addresses and phone numbers</a>.</p>
    pub fn set_user_attribute_update_settings(
        mut self,
        input: std::option::Option<crate::types::UserAttributeUpdateSettingsType>,
    ) -> Self {
        self.user_attribute_update_settings = input;
        self
    }
    /// <p>Can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>OFF</code> - MFA tokens aren't required and can't be specified during user registration.</p> </li>
    /// <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you're initially creating a user pool.</p> </li>
    /// <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li>
    /// </ul>
    pub fn mfa_configuration(mut self, input: crate::types::UserPoolMfaType) -> Self {
        self.mfa_configuration = Some(input);
        self
    }
    /// <p>Can be one of the following values:</p>
    /// <ul>
    /// <li> <p> <code>OFF</code> - MFA tokens aren't required and can't be specified during user registration.</p> </li>
    /// <li> <p> <code>ON</code> - MFA tokens are required for all user registrations. You can only specify required when you're initially creating a user pool.</p> </li>
    /// <li> <p> <code>OPTIONAL</code> - Users have the option when registering to create an MFA token.</p> </li>
    /// </ul>
    pub fn set_mfa_configuration(
        mut self,
        input: std::option::Option<crate::types::UserPoolMfaType>,
    ) -> Self {
        self.mfa_configuration = input;
        self
    }
    /// <p>The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool.</p> <note>
    /// <p>When you provide a value for any <code>DeviceConfiguration</code> field, you activate the Amazon Cognito device-remembering feature.</p>
    /// </note>
    pub fn device_configuration(mut self, input: crate::types::DeviceConfigurationType) -> Self {
        self.device_configuration = Some(input);
        self
    }
    /// <p>The device-remembering configuration for a user pool. A null value indicates that you have deactivated device remembering in your user pool.</p> <note>
    /// <p>When you provide a value for any <code>DeviceConfiguration</code> field, you activate the Amazon Cognito device-remembering feature.</p>
    /// </note>
    pub fn set_device_configuration(
        mut self,
        input: std::option::Option<crate::types::DeviceConfigurationType>,
    ) -> Self {
        self.device_configuration = input;
        self
    }
    /// <p>A number estimating the size of the user pool.</p>
    pub fn estimated_number_of_users(mut self, input: i32) -> Self {
        self.estimated_number_of_users = Some(input);
        self
    }
    /// <p>A number estimating the size of the user pool.</p>
    pub fn set_estimated_number_of_users(mut self, input: std::option::Option<i32>) -> Self {
        self.estimated_number_of_users = input;
        self
    }
    /// <p>The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages tfrom your user pool.</p>
    pub fn email_configuration(mut self, input: crate::types::EmailConfigurationType) -> Self {
        self.email_configuration = Some(input);
        self
    }
    /// <p>The email configuration of your user pool. The email configuration type sets your preferred sending method, Amazon Web Services Region, and sender for messages tfrom your user pool.</p>
    pub fn set_email_configuration(
        mut self,
        input: std::option::Option<crate::types::EmailConfigurationType>,
    ) -> Self {
        self.email_configuration = input;
        self
    }
    /// <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    pub fn sms_configuration(mut self, input: crate::types::SmsConfigurationType) -> Self {
        self.sms_configuration = Some(input);
        self
    }
    /// <p>The SMS configuration with the settings that your Amazon Cognito user pool must use to send an SMS message from your Amazon Web Services account through Amazon Simple Notification Service. To send SMS messages with Amazon SNS in the Amazon Web Services Region that you want, the Amazon Cognito user pool uses an Identity and Access Management (IAM) role in your Amazon Web Services account.</p>
    pub fn set_sms_configuration(
        mut self,
        input: std::option::Option<crate::types::SmsConfigurationType>,
    ) -> Self {
        self.sms_configuration = input;
        self
    }
    /// Adds a key-value pair to `user_pool_tags`.
    ///
    /// To override the contents of this collection use [`set_user_pool_tags`](Self::set_user_pool_tags).
    ///
    /// <p>The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p>
    pub fn user_pool_tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.user_pool_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.user_pool_tags = Some(hash_map);
        self
    }
    /// <p>The tags that are assigned to the user pool. A tag is a label that you can apply to user pools to categorize and manage them in different ways, such as by purpose, owner, environment, or other criteria.</p>
    pub fn set_user_pool_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.user_pool_tags = input;
        self
    }
    /// <p>The reason why the SMS configuration can't send the messages to your users.</p>
    /// <p>This message might include comma-separated values to describe why your SMS configuration can't send messages to user pool end users.</p>
    /// <dl>
    /// <dt>
    /// InvalidSmsRoleAccessPolicyException
    /// </dt>
    /// <dd>
    /// <p>The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly configured. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html">SmsConfigurationType</a>.</p>
    /// </dd>
    /// <dt>
    /// SNSSandbox
    /// </dt>
    /// <dd>
    /// <p>The Amazon Web Services account is in the SNS SMS Sandbox and messages will only reach verified end users. This parameter won’t get populated with SNSSandbox if the IAM user creating the user pool doesn’t have SNS permissions. To learn how to move your Amazon Web Services account out of the sandbox, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html">Moving out of the SMS sandbox</a>.</p>
    /// </dd>
    /// </dl>
    pub fn sms_configuration_failure(mut self, input: impl Into<std::string::String>) -> Self {
        self.sms_configuration_failure = Some(input.into());
        self
    }
    /// <p>The reason why the SMS configuration can't send the messages to your users.</p>
    /// <p>This message might include comma-separated values to describe why your SMS configuration can't send messages to user pool end users.</p>
    /// <dl>
    /// <dt>
    /// InvalidSmsRoleAccessPolicyException
    /// </dt>
    /// <dd>
    /// <p>The Identity and Access Management role that Amazon Cognito uses to send SMS messages isn't properly configured. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html">SmsConfigurationType</a>.</p>
    /// </dd>
    /// <dt>
    /// SNSSandbox
    /// </dt>
    /// <dd>
    /// <p>The Amazon Web Services account is in the SNS SMS Sandbox and messages will only reach verified end users. This parameter won’t get populated with SNSSandbox if the IAM user creating the user pool doesn’t have SNS permissions. To learn how to move your Amazon Web Services account out of the sandbox, see <a href="https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html">Moving out of the SMS sandbox</a>.</p>
    /// </dd>
    /// </dl>
    pub fn set_sms_configuration_failure(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.sms_configuration_failure = input;
        self
    }
    /// <p>Deprecated. Review error codes from API requests with <code>EventSource:cognito-idp.amazonaws.com</code> in CloudTrail for information about problems with user pool email configuration.</p>
    pub fn email_configuration_failure(mut self, input: impl Into<std::string::String>) -> Self {
        self.email_configuration_failure = Some(input.into());
        self
    }
    /// <p>Deprecated. Review error codes from API requests with <code>EventSource:cognito-idp.amazonaws.com</code> in CloudTrail for information about problems with user pool email configuration.</p>
    pub fn set_email_configuration_failure(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.email_configuration_failure = input;
        self
    }
    /// <p>The domain prefix, if the user pool has a domain associated with it.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The domain prefix, if the user pool has a domain associated with it.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p>A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be <code>auth.example.com</code>.</p>
    /// <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
    pub fn custom_domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.custom_domain = Some(input.into());
        self
    }
    /// <p>A custom domain name that you provide to Amazon Cognito. This parameter applies only if you use a custom domain to host the sign-up and sign-in pages for your application. An example of a custom domain name might be <code>auth.example.com</code>.</p>
    /// <p>For more information about adding a custom domain to your user pool, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html">Using Your Own Domain for the Hosted UI</a>.</p>
    pub fn set_custom_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.custom_domain = input;
        self
    }
    /// <p>The configuration for <code>AdminCreateUser</code> requests.</p>
    pub fn admin_create_user_config(
        mut self,
        input: crate::types::AdminCreateUserConfigType,
    ) -> Self {
        self.admin_create_user_config = Some(input);
        self
    }
    /// <p>The configuration for <code>AdminCreateUser</code> requests.</p>
    pub fn set_admin_create_user_config(
        mut self,
        input: std::option::Option<crate::types::AdminCreateUserConfigType>,
    ) -> Self {
        self.admin_create_user_config = input;
        self
    }
    /// <p>The user pool add-ons.</p>
    pub fn user_pool_add_ons(mut self, input: crate::types::UserPoolAddOnsType) -> Self {
        self.user_pool_add_ons = Some(input);
        self
    }
    /// <p>The user pool add-ons.</p>
    pub fn set_user_pool_add_ons(
        mut self,
        input: std::option::Option<crate::types::UserPoolAddOnsType>,
    ) -> Self {
        self.user_pool_add_ons = input;
        self
    }
    /// <p>Case sensitivity of the username input for the selected sign-in option. For example, when case sensitivity is set to <code>False</code>, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
    pub fn username_configuration(
        mut self,
        input: crate::types::UsernameConfigurationType,
    ) -> Self {
        self.username_configuration = Some(input);
        self
    }
    /// <p>Case sensitivity of the username input for the selected sign-in option. For example, when case sensitivity is set to <code>False</code>, users can sign in using either "username" or "Username". This configuration is immutable once it has been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
    pub fn set_username_configuration(
        mut self,
        input: std::option::Option<crate::types::UsernameConfigurationType>,
    ) -> Self {
        self.username_configuration = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the user pool.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) for the user pool.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The available verified method a user can use to recover their password when they call <code>ForgotPassword</code>. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.</p>
    pub fn account_recovery_setting(
        mut self,
        input: crate::types::AccountRecoverySettingType,
    ) -> Self {
        self.account_recovery_setting = Some(input);
        self
    }
    /// <p>The available verified method a user can use to recover their password when they call <code>ForgotPassword</code>. You can use this setting to define a preferred method when a user has more than one method available. With this setting, SMS doesn't qualify for a valid password recovery mechanism if the user also has SMS multi-factor authentication (MFA) activated. In the absence of this setting, Amazon Cognito uses the legacy behavior to determine the recovery method where SMS is preferred through email.</p>
    pub fn set_account_recovery_setting(
        mut self,
        input: std::option::Option<crate::types::AccountRecoverySettingType>,
    ) -> Self {
        self.account_recovery_setting = input;
        self
    }
    /// Consumes the builder and constructs a [`UserPoolType`](crate::types::UserPoolType).
    pub fn build(self) -> crate::types::UserPoolType {
        crate::types::UserPoolType {
            id: self.id,
            name: self.name,
            policies: self.policies,
            deletion_protection: self.deletion_protection,
            lambda_config: self.lambda_config,
            status: self.status,
            last_modified_date: self.last_modified_date,
            creation_date: self.creation_date,
            schema_attributes: self.schema_attributes,
            auto_verified_attributes: self.auto_verified_attributes,
            alias_attributes: self.alias_attributes,
            username_attributes: self.username_attributes,
            sms_verification_message: self.sms_verification_message,
            email_verification_message: self.email_verification_message,
            email_verification_subject: self.email_verification_subject,
            verification_message_template: self.verification_message_template,
            sms_authentication_message: self.sms_authentication_message,
            user_attribute_update_settings: self.user_attribute_update_settings,
            mfa_configuration: self.mfa_configuration,
            device_configuration: self.device_configuration,
            estimated_number_of_users: self.estimated_number_of_users.unwrap_or_default(),
            email_configuration: self.email_configuration,
            sms_configuration: self.sms_configuration,
            user_pool_tags: self.user_pool_tags,
            sms_configuration_failure: self.sms_configuration_failure,
            email_configuration_failure: self.email_configuration_failure,
            domain: self.domain,
            custom_domain: self.custom_domain,
            admin_create_user_config: self.admin_create_user_config,
            user_pool_add_ons: self.user_pool_add_ons,
            username_configuration: self.username_configuration,
            arn: self.arn,
            account_recovery_setting: self.account_recovery_setting,
        }
    }
}
