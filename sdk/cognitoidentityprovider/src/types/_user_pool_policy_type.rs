// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The policy associated with a user pool.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UserPoolPolicyType {
    /// <p>The password policy.</p>
    #[doc(hidden)]
    pub password_policy: std::option::Option<crate::types::PasswordPolicyType>,
}
impl UserPoolPolicyType {
    /// <p>The password policy.</p>
    pub fn password_policy(&self) -> std::option::Option<&crate::types::PasswordPolicyType> {
        self.password_policy.as_ref()
    }
}
impl UserPoolPolicyType {
    /// Creates a new builder-style object to manufacture [`UserPoolPolicyType`](crate::types::UserPoolPolicyType).
    pub fn builder() -> crate::types::builders::UserPoolPolicyTypeBuilder {
        crate::types::builders::UserPoolPolicyTypeBuilder::default()
    }
}

/// A builder for [`UserPoolPolicyType`](crate::types::UserPoolPolicyType).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UserPoolPolicyTypeBuilder {
    pub(crate) password_policy: std::option::Option<crate::types::PasswordPolicyType>,
}
impl UserPoolPolicyTypeBuilder {
    /// <p>The password policy.</p>
    pub fn password_policy(mut self, input: crate::types::PasswordPolicyType) -> Self {
        self.password_policy = Some(input);
        self
    }
    /// <p>The password policy.</p>
    pub fn set_password_policy(
        mut self,
        input: std::option::Option<crate::types::PasswordPolicyType>,
    ) -> Self {
        self.password_policy = input;
        self
    }
    /// Consumes the builder and constructs a [`UserPoolPolicyType`](crate::types::UserPoolPolicyType).
    pub fn build(self) -> crate::types::UserPoolPolicyType {
        crate::types::UserPoolPolicyType {
            password_policy: self.password_policy,
        }
    }
}
