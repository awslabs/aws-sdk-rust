// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>User preferences for multi-factor authentication with email messages. Activates or deactivates email MFA and sets it as the preferred MFA method when multiple methods are available. To activate this setting, <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html"> advanced security features</a> must be active in your user pool.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EmailMfaSettingsType {
    /// <p>Specifies whether email message MFA is active for a user. When the value of this parameter is <code>Enabled</code>, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub enabled: bool,
    /// <p>Specifies whether email message MFA is the user's preferred method.</p>
    pub preferred_mfa: bool,
}
impl EmailMfaSettingsType {
    /// <p>Specifies whether email message MFA is active for a user. When the value of this parameter is <code>Enabled</code>, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>Specifies whether email message MFA is the user's preferred method.</p>
    pub fn preferred_mfa(&self) -> bool {
        self.preferred_mfa
    }
}
impl EmailMfaSettingsType {
    /// Creates a new builder-style object to manufacture [`EmailMfaSettingsType`](crate::types::EmailMfaSettingsType).
    pub fn builder() -> crate::types::builders::EmailMfaSettingsTypeBuilder {
        crate::types::builders::EmailMfaSettingsTypeBuilder::default()
    }
}

/// A builder for [`EmailMfaSettingsType`](crate::types::EmailMfaSettingsType).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct EmailMfaSettingsTypeBuilder {
    pub(crate) enabled: ::std::option::Option<bool>,
    pub(crate) preferred_mfa: ::std::option::Option<bool>,
}
impl EmailMfaSettingsTypeBuilder {
    /// <p>Specifies whether email message MFA is active for a user. When the value of this parameter is <code>Enabled</code>, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether email message MFA is active for a user. When the value of this parameter is <code>Enabled</code>, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn set_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>Specifies whether email message MFA is active for a user. When the value of this parameter is <code>Enabled</code>, the user will be prompted for MFA during all sign-in attempts, unless device tracking is turned on and the device has been trusted.</p>
    pub fn get_enabled(&self) -> &::std::option::Option<bool> {
        &self.enabled
    }
    /// <p>Specifies whether email message MFA is the user's preferred method.</p>
    pub fn preferred_mfa(mut self, input: bool) -> Self {
        self.preferred_mfa = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies whether email message MFA is the user's preferred method.</p>
    pub fn set_preferred_mfa(mut self, input: ::std::option::Option<bool>) -> Self {
        self.preferred_mfa = input;
        self
    }
    /// <p>Specifies whether email message MFA is the user's preferred method.</p>
    pub fn get_preferred_mfa(&self) -> &::std::option::Option<bool> {
        &self.preferred_mfa
    }
    /// Consumes the builder and constructs a [`EmailMfaSettingsType`](crate::types::EmailMfaSettingsType).
    pub fn build(self) -> crate::types::EmailMfaSettingsType {
        crate::types::EmailMfaSettingsType {
            enabled: self.enabled.unwrap_or_default(),
            preferred_mfa: self.preferred_mfa.unwrap_or_default(),
        }
    }
}
