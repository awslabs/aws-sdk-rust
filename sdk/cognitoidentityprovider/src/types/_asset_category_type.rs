// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `AssetCategoryType`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let assetcategorytype = unimplemented!();
/// match assetcategorytype {
///     AssetCategoryType::AuthAppGraphic => { /* ... */ },
///     AssetCategoryType::EmailGraphic => { /* ... */ },
///     AssetCategoryType::FaviconIco => { /* ... */ },
///     AssetCategoryType::FaviconSvg => { /* ... */ },
///     AssetCategoryType::FormBackground => { /* ... */ },
///     AssetCategoryType::FormLogo => { /* ... */ },
///     AssetCategoryType::IdpButtonIcon => { /* ... */ },
///     AssetCategoryType::PageBackground => { /* ... */ },
///     AssetCategoryType::PageFooterBackground => { /* ... */ },
///     AssetCategoryType::PageFooterLogo => { /* ... */ },
///     AssetCategoryType::PageHeaderBackground => { /* ... */ },
///     AssetCategoryType::PageHeaderLogo => { /* ... */ },
///     AssetCategoryType::PasskeyGraphic => { /* ... */ },
///     AssetCategoryType::PasswordGraphic => { /* ... */ },
///     AssetCategoryType::SmsGraphic => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `assetcategorytype` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `AssetCategoryType::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `AssetCategoryType::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `AssetCategoryType::NewFeature` is defined.
/// Specifically, when `assetcategorytype` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `AssetCategoryType::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
///
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    ::std::clone::Clone, ::std::cmp::Eq, ::std::cmp::Ord, ::std::cmp::PartialEq, ::std::cmp::PartialOrd, ::std::fmt::Debug, ::std::hash::Hash,
)]
pub enum AssetCategoryType {
    #[allow(missing_docs)] // documentation missing in model
    AuthAppGraphic,
    #[allow(missing_docs)] // documentation missing in model
    EmailGraphic,
    #[allow(missing_docs)] // documentation missing in model
    FaviconIco,
    #[allow(missing_docs)] // documentation missing in model
    FaviconSvg,
    #[allow(missing_docs)] // documentation missing in model
    FormBackground,
    #[allow(missing_docs)] // documentation missing in model
    FormLogo,
    #[allow(missing_docs)] // documentation missing in model
    IdpButtonIcon,
    #[allow(missing_docs)] // documentation missing in model
    PageBackground,
    #[allow(missing_docs)] // documentation missing in model
    PageFooterBackground,
    #[allow(missing_docs)] // documentation missing in model
    PageFooterLogo,
    #[allow(missing_docs)] // documentation missing in model
    PageHeaderBackground,
    #[allow(missing_docs)] // documentation missing in model
    PageHeaderLogo,
    #[allow(missing_docs)] // documentation missing in model
    PasskeyGraphic,
    #[allow(missing_docs)] // documentation missing in model
    PasswordGraphic,
    #[allow(missing_docs)] // documentation missing in model
    SmsGraphic,
    /// `Unknown` contains new variants that have been added since this code was generated.
    #[deprecated(note = "Don't directly match on `Unknown`. See the docs on this enum for the correct way to handle unknown variants.")]
    Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue),
}
impl ::std::convert::From<&str> for AssetCategoryType {
    fn from(s: &str) -> Self {
        match s {
            "AUTH_APP_GRAPHIC" => AssetCategoryType::AuthAppGraphic,
            "EMAIL_GRAPHIC" => AssetCategoryType::EmailGraphic,
            "FAVICON_ICO" => AssetCategoryType::FaviconIco,
            "FAVICON_SVG" => AssetCategoryType::FaviconSvg,
            "FORM_BACKGROUND" => AssetCategoryType::FormBackground,
            "FORM_LOGO" => AssetCategoryType::FormLogo,
            "IDP_BUTTON_ICON" => AssetCategoryType::IdpButtonIcon,
            "PAGE_BACKGROUND" => AssetCategoryType::PageBackground,
            "PAGE_FOOTER_BACKGROUND" => AssetCategoryType::PageFooterBackground,
            "PAGE_FOOTER_LOGO" => AssetCategoryType::PageFooterLogo,
            "PAGE_HEADER_BACKGROUND" => AssetCategoryType::PageHeaderBackground,
            "PAGE_HEADER_LOGO" => AssetCategoryType::PageHeaderLogo,
            "PASSKEY_GRAPHIC" => AssetCategoryType::PasskeyGraphic,
            "PASSWORD_GRAPHIC" => AssetCategoryType::PasswordGraphic,
            "SMS_GRAPHIC" => AssetCategoryType::SmsGraphic,
            other => AssetCategoryType::Unknown(crate::primitives::sealed_enum_unknown::UnknownVariantValue(other.to_owned())),
        }
    }
}
impl ::std::str::FromStr for AssetCategoryType {
    type Err = ::std::convert::Infallible;

    fn from_str(s: &str) -> ::std::result::Result<Self, <Self as ::std::str::FromStr>::Err> {
        ::std::result::Result::Ok(AssetCategoryType::from(s))
    }
}
impl AssetCategoryType {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            AssetCategoryType::AuthAppGraphic => "AUTH_APP_GRAPHIC",
            AssetCategoryType::EmailGraphic => "EMAIL_GRAPHIC",
            AssetCategoryType::FaviconIco => "FAVICON_ICO",
            AssetCategoryType::FaviconSvg => "FAVICON_SVG",
            AssetCategoryType::FormBackground => "FORM_BACKGROUND",
            AssetCategoryType::FormLogo => "FORM_LOGO",
            AssetCategoryType::IdpButtonIcon => "IDP_BUTTON_ICON",
            AssetCategoryType::PageBackground => "PAGE_BACKGROUND",
            AssetCategoryType::PageFooterBackground => "PAGE_FOOTER_BACKGROUND",
            AssetCategoryType::PageFooterLogo => "PAGE_FOOTER_LOGO",
            AssetCategoryType::PageHeaderBackground => "PAGE_HEADER_BACKGROUND",
            AssetCategoryType::PageHeaderLogo => "PAGE_HEADER_LOGO",
            AssetCategoryType::PasskeyGraphic => "PASSKEY_GRAPHIC",
            AssetCategoryType::PasswordGraphic => "PASSWORD_GRAPHIC",
            AssetCategoryType::SmsGraphic => "SMS_GRAPHIC",
            AssetCategoryType::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "AUTH_APP_GRAPHIC",
            "EMAIL_GRAPHIC",
            "FAVICON_ICO",
            "FAVICON_SVG",
            "FORM_BACKGROUND",
            "FORM_LOGO",
            "IDP_BUTTON_ICON",
            "PAGE_BACKGROUND",
            "PAGE_FOOTER_BACKGROUND",
            "PAGE_FOOTER_LOGO",
            "PAGE_HEADER_BACKGROUND",
            "PAGE_HEADER_LOGO",
            "PASSKEY_GRAPHIC",
            "PASSWORD_GRAPHIC",
            "SMS_GRAPHIC",
        ]
    }
}
impl ::std::convert::AsRef<str> for AssetCategoryType {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
impl AssetCategoryType {
    /// Parses the enum value while disallowing unknown variants.
    ///
    /// Unknown variants will result in an error.
    pub fn try_parse(value: &str) -> ::std::result::Result<Self, crate::error::UnknownVariantError> {
        match Self::from(value) {
            #[allow(deprecated)]
            Self::Unknown(_) => ::std::result::Result::Err(crate::error::UnknownVariantError::new(value)),
            known => Ok(known),
        }
    }
}
impl ::std::fmt::Display for AssetCategoryType {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        match self {
            AssetCategoryType::AuthAppGraphic => write!(f, "AUTH_APP_GRAPHIC"),
            AssetCategoryType::EmailGraphic => write!(f, "EMAIL_GRAPHIC"),
            AssetCategoryType::FaviconIco => write!(f, "FAVICON_ICO"),
            AssetCategoryType::FaviconSvg => write!(f, "FAVICON_SVG"),
            AssetCategoryType::FormBackground => write!(f, "FORM_BACKGROUND"),
            AssetCategoryType::FormLogo => write!(f, "FORM_LOGO"),
            AssetCategoryType::IdpButtonIcon => write!(f, "IDP_BUTTON_ICON"),
            AssetCategoryType::PageBackground => write!(f, "PAGE_BACKGROUND"),
            AssetCategoryType::PageFooterBackground => write!(f, "PAGE_FOOTER_BACKGROUND"),
            AssetCategoryType::PageFooterLogo => write!(f, "PAGE_FOOTER_LOGO"),
            AssetCategoryType::PageHeaderBackground => write!(f, "PAGE_HEADER_BACKGROUND"),
            AssetCategoryType::PageHeaderLogo => write!(f, "PAGE_HEADER_LOGO"),
            AssetCategoryType::PasskeyGraphic => write!(f, "PASSKEY_GRAPHIC"),
            AssetCategoryType::PasswordGraphic => write!(f, "PASSWORD_GRAPHIC"),
            AssetCategoryType::SmsGraphic => write!(f, "SMS_GRAPHIC"),
            AssetCategoryType::Unknown(value) => write!(f, "{value}"),
        }
    }
}
