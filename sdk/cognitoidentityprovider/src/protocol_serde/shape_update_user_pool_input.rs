// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_user_pool_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_user_pool::UpdateUserPoolInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.user_pool_id {
        object.key("UserPoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.policies {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Policies").start_object();
        crate::protocol_serde::shape_user_pool_policy_type::ser_user_pool_policy_type(
            &mut object_3,
            var_2,
        )?;
        object_3.finish();
    }
    if let Some(var_4) = &input.deletion_protection {
        object.key("DeletionProtection").string(var_4.as_str());
    }
    if let Some(var_5) = &input.lambda_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("LambdaConfig").start_object();
        crate::protocol_serde::shape_lambda_config_type::ser_lambda_config_type(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.auto_verified_attributes {
        let mut array_8 = object.key("AutoVerifiedAttributes").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.sms_verification_message {
        object.key("SmsVerificationMessage").string(var_10.as_str());
    }
    if let Some(var_11) = &input.email_verification_message {
        object
            .key("EmailVerificationMessage")
            .string(var_11.as_str());
    }
    if let Some(var_12) = &input.email_verification_subject {
        object
            .key("EmailVerificationSubject")
            .string(var_12.as_str());
    }
    if let Some(var_13) = &input.verification_message_template {
        #[allow(unused_mut)]
        let mut object_14 = object.key("VerificationMessageTemplate").start_object();
        crate::protocol_serde::shape_verification_message_template_type::ser_verification_message_template_type(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.sms_authentication_message {
        object
            .key("SmsAuthenticationMessage")
            .string(var_15.as_str());
    }
    if let Some(var_16) = &input.user_attribute_update_settings {
        #[allow(unused_mut)]
        let mut object_17 = object.key("UserAttributeUpdateSettings").start_object();
        crate::protocol_serde::shape_user_attribute_update_settings_type::ser_user_attribute_update_settings_type(&mut object_17, var_16)?;
        object_17.finish();
    }
    if let Some(var_18) = &input.mfa_configuration {
        object.key("MfaConfiguration").string(var_18.as_str());
    }
    if let Some(var_19) = &input.device_configuration {
        #[allow(unused_mut)]
        let mut object_20 = object.key("DeviceConfiguration").start_object();
        crate::protocol_serde::shape_device_configuration_type::ser_device_configuration_type(
            &mut object_20,
            var_19,
        )?;
        object_20.finish();
    }
    if let Some(var_21) = &input.email_configuration {
        #[allow(unused_mut)]
        let mut object_22 = object.key("EmailConfiguration").start_object();
        crate::protocol_serde::shape_email_configuration_type::ser_email_configuration_type(
            &mut object_22,
            var_21,
        )?;
        object_22.finish();
    }
    if let Some(var_23) = &input.sms_configuration {
        #[allow(unused_mut)]
        let mut object_24 = object.key("SmsConfiguration").start_object();
        crate::protocol_serde::shape_sms_configuration_type::ser_sms_configuration_type(
            &mut object_24,
            var_23,
        )?;
        object_24.finish();
    }
    if let Some(var_25) = &input.user_pool_tags {
        #[allow(unused_mut)]
        let mut object_26 = object.key("UserPoolTags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27.as_str()).string(value_28.as_str());
            }
        }
        object_26.finish();
    }
    if let Some(var_29) = &input.admin_create_user_config {
        #[allow(unused_mut)]
        let mut object_30 = object.key("AdminCreateUserConfig").start_object();
        crate::protocol_serde::shape_admin_create_user_config_type::ser_admin_create_user_config_type(&mut object_30, var_29)?;
        object_30.finish();
    }
    if let Some(var_31) = &input.user_pool_add_ons {
        #[allow(unused_mut)]
        let mut object_32 = object.key("UserPoolAddOns").start_object();
        crate::protocol_serde::shape_user_pool_add_ons_type::ser_user_pool_add_ons_type(
            &mut object_32,
            var_31,
        )?;
        object_32.finish();
    }
    if let Some(var_33) = &input.account_recovery_setting {
        #[allow(unused_mut)]
        let mut object_34 = object.key("AccountRecoverySetting").start_object();
        crate::protocol_serde::shape_account_recovery_setting_type::ser_account_recovery_setting_type(&mut object_34, var_33)?;
        object_34.finish();
    }
    Ok(())
}
