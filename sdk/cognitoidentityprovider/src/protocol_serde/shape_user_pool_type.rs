// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_user_pool_type<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<Option<crate::types::UserPoolType>, aws_smithy_json::deserialize::error::DeserializeError>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::UserPoolTypeBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "Id" => {
                                builder = builder.set_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Name" => {
                                builder = builder.set_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Policies" => {
                                builder = builder.set_policies(
                                    crate::protocol_serde::shape_user_pool_policy_type::de_user_pool_policy_type(tokens)?
                                );
                            }
                            "DeletionProtection" => {
                                builder = builder.set_deletion_protection(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::DeletionProtectionType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "LambdaConfig" => {
                                builder = builder.set_lambda_config(
                                    crate::protocol_serde::shape_lambda_config_type::de_lambda_config_type(tokens)?
                                );
                            }
                            "Status" => {
                                builder = builder.set_status(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped()
                                            .map(|u| crate::types::StatusType::from(u.as_ref()))
                                    })
                                    .transpose()?,
                                );
                            }
                            "LastModifiedDate" => {
                                builder = builder.set_last_modified_date(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "CreationDate" => {
                                builder = builder.set_creation_date(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "SchemaAttributes" => {
                                builder = builder.set_schema_attributes(
                                    crate::protocol_serde::shape_schema_attributes_list_type::de_schema_attributes_list_type(tokens)?
                                );
                            }
                            "AutoVerifiedAttributes" => {
                                builder = builder.set_auto_verified_attributes(
                                    crate::protocol_serde::shape_verified_attributes_list_type::de_verified_attributes_list_type(tokens)?
                                );
                            }
                            "AliasAttributes" => {
                                builder = builder.set_alias_attributes(
                                    crate::protocol_serde::shape_alias_attributes_list_type::de_alias_attributes_list_type(tokens)?
                                );
                            }
                            "UsernameAttributes" => {
                                builder = builder.set_username_attributes(
                                    crate::protocol_serde::shape_username_attributes_list_type::de_username_attributes_list_type(tokens)?
                                );
                            }
                            "SmsVerificationMessage" => {
                                builder = builder.set_sms_verification_message(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EmailVerificationMessage" => {
                                builder = builder.set_email_verification_message(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EmailVerificationSubject" => {
                                builder = builder.set_email_verification_subject(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "VerificationMessageTemplate" => {
                                builder = builder.set_verification_message_template(
                                    crate::protocol_serde::shape_verification_message_template_type::de_verification_message_template_type(tokens)?
                                );
                            }
                            "SmsAuthenticationMessage" => {
                                builder = builder.set_sms_authentication_message(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "UserAttributeUpdateSettings" => {
                                builder = builder.set_user_attribute_update_settings(
                                    crate::protocol_serde::shape_user_attribute_update_settings_type::de_user_attribute_update_settings_type(tokens)?
                                );
                            }
                            "MfaConfiguration" => {
                                builder = builder.set_mfa_configuration(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::UserPoolMfaType::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "DeviceConfiguration" => {
                                builder = builder.set_device_configuration(
                                    crate::protocol_serde::shape_device_configuration_type::de_device_configuration_type(tokens)?
                                );
                            }
                            "EstimatedNumberOfUsers" => {
                                builder = builder.set_estimated_number_of_users(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "EmailConfiguration" => {
                                builder = builder.set_email_configuration(
                                    crate::protocol_serde::shape_email_configuration_type::de_email_configuration_type(tokens)?
                                );
                            }
                            "SmsConfiguration" => {
                                builder = builder.set_sms_configuration(
                                    crate::protocol_serde::shape_sms_configuration_type::de_sms_configuration_type(tokens)?
                                );
                            }
                            "UserPoolTags" => {
                                builder = builder.set_user_pool_tags(
                                    crate::protocol_serde::shape_user_pool_tags_type::de_user_pool_tags_type(tokens)?
                                );
                            }
                            "SmsConfigurationFailure" => {
                                builder = builder.set_sms_configuration_failure(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "EmailConfigurationFailure" => {
                                builder = builder.set_email_configuration_failure(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "Domain" => {
                                builder = builder.set_domain(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "CustomDomain" => {
                                builder = builder.set_custom_domain(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AdminCreateUserConfig" => {
                                builder = builder.set_admin_create_user_config(
                                    crate::protocol_serde::shape_admin_create_user_config_type::de_admin_create_user_config_type(tokens)?
                                );
                            }
                            "UserPoolAddOns" => {
                                builder = builder.set_user_pool_add_ons(
                                    crate::protocol_serde::shape_user_pool_add_ons_type::de_user_pool_add_ons_type(tokens)?
                                );
                            }
                            "UsernameConfiguration" => {
                                builder = builder.set_username_configuration(
                                    crate::protocol_serde::shape_username_configuration_type::de_username_configuration_type(tokens)?
                                );
                            }
                            "Arn" => {
                                builder = builder.set_arn(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AccountRecoverySetting" => {
                                builder = builder.set_account_recovery_setting(
                                    crate::protocol_serde::shape_account_recovery_setting_type::de_account_recovery_setting_type(tokens)?
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
