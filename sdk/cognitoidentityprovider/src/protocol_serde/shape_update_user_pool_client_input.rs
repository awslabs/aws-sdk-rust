// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_update_user_pool_client_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::update_user_pool_client::UpdateUserPoolClientInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.user_pool_id {
        object.key("UserPoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_id {
        object.key("ClientId").string(var_2.as_str());
    }
    if let Some(var_3) = &input.client_name {
        object.key("ClientName").string(var_3.as_str());
    }
    if input.refresh_token_validity != 0 {
        object.key("RefreshTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.refresh_token_validity).into()),
        );
    }
    if let Some(var_4) = &input.access_token_validity {
        object.key("AccessTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.id_token_validity {
        object.key("IdTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_5).into()),
        );
    }
    if let Some(var_6) = &input.token_validity_units {
        #[allow(unused_mut)]
        let mut object_7 = object.key("TokenValidityUnits").start_object();
        crate::protocol_serde::shape_token_validity_units_type::ser_token_validity_units_type(
            &mut object_7,
            var_6,
        )?;
        object_7.finish();
    }
    if let Some(var_8) = &input.read_attributes {
        let mut array_9 = object.key("ReadAttributes").start_array();
        for item_10 in var_8 {
            {
                array_9.value().string(item_10.as_str());
            }
        }
        array_9.finish();
    }
    if let Some(var_11) = &input.write_attributes {
        let mut array_12 = object.key("WriteAttributes").start_array();
        for item_13 in var_11 {
            {
                array_12.value().string(item_13.as_str());
            }
        }
        array_12.finish();
    }
    if let Some(var_14) = &input.explicit_auth_flows {
        let mut array_15 = object.key("ExplicitAuthFlows").start_array();
        for item_16 in var_14 {
            {
                array_15.value().string(item_16.as_str());
            }
        }
        array_15.finish();
    }
    if let Some(var_17) = &input.supported_identity_providers {
        let mut array_18 = object.key("SupportedIdentityProviders").start_array();
        for item_19 in var_17 {
            {
                array_18.value().string(item_19.as_str());
            }
        }
        array_18.finish();
    }
    if let Some(var_20) = &input.callback_ur_ls {
        let mut array_21 = object.key("CallbackURLs").start_array();
        for item_22 in var_20 {
            {
                array_21.value().string(item_22.as_str());
            }
        }
        array_21.finish();
    }
    if let Some(var_23) = &input.logout_ur_ls {
        let mut array_24 = object.key("LogoutURLs").start_array();
        for item_25 in var_23 {
            {
                array_24.value().string(item_25.as_str());
            }
        }
        array_24.finish();
    }
    if let Some(var_26) = &input.default_redirect_uri {
        object.key("DefaultRedirectURI").string(var_26.as_str());
    }
    if let Some(var_27) = &input.allowed_o_auth_flows {
        let mut array_28 = object.key("AllowedOAuthFlows").start_array();
        for item_29 in var_27 {
            {
                array_28.value().string(item_29.as_str());
            }
        }
        array_28.finish();
    }
    if let Some(var_30) = &input.allowed_o_auth_scopes {
        let mut array_31 = object.key("AllowedOAuthScopes").start_array();
        for item_32 in var_30 {
            {
                array_31.value().string(item_32.as_str());
            }
        }
        array_31.finish();
    }
    if input.allowed_o_auth_flows_user_pool_client {
        object
            .key("AllowedOAuthFlowsUserPoolClient")
            .boolean(input.allowed_o_auth_flows_user_pool_client);
    }
    if let Some(var_33) = &input.analytics_configuration {
        #[allow(unused_mut)]
        let mut object_34 = object.key("AnalyticsConfiguration").start_object();
        crate::protocol_serde::shape_analytics_configuration_type::ser_analytics_configuration_type(&mut object_34, var_33)?;
        object_34.finish();
    }
    if let Some(var_35) = &input.prevent_user_existence_errors {
        object
            .key("PreventUserExistenceErrors")
            .string(var_35.as_str());
    }
    if let Some(var_36) = &input.enable_token_revocation {
        object.key("EnableTokenRevocation").boolean(*var_36);
    }
    if let Some(var_37) = &input.enable_propagate_additional_user_context_data {
        object
            .key("EnablePropagateAdditionalUserContextData")
            .boolean(*var_37);
    }
    if let Some(var_38) = &input.auth_session_validity {
        object.key("AuthSessionValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_38).into()),
        );
    }
    Ok(())
}
