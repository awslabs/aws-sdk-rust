// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_sign_up_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::sign_up::SignUpInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_id {
        object.key("ClientId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.secret_hash {
        object.key("SecretHash").string(var_2.as_str());
    }
    if let Some(var_3) = &input.username {
        object.key("Username").string(var_3.as_str());
    }
    if let Some(var_4) = &input.password {
        object.key("Password").string(var_4.as_str());
    }
    if let Some(var_5) = &input.user_attributes {
        let mut array_6 = object.key("UserAttributes").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_attribute_type::ser_attribute_type(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.validation_data {
        let mut array_10 = object.key("ValidationData").start_array();
        for item_11 in var_9 {
            {
                #[allow(unused_mut)]
                let mut object_12 = array_10.value().start_object();
                crate::protocol_serde::shape_attribute_type::ser_attribute_type(
                    &mut object_12,
                    item_11,
                )?;
                object_12.finish();
            }
        }
        array_10.finish();
    }
    if let Some(var_13) = &input.analytics_metadata {
        #[allow(unused_mut)]
        let mut object_14 = object.key("AnalyticsMetadata").start_object();
        crate::protocol_serde::shape_analytics_metadata_type::ser_analytics_metadata_type(
            &mut object_14,
            var_13,
        )?;
        object_14.finish();
    }
    if let Some(var_15) = &input.user_context_data {
        #[allow(unused_mut)]
        let mut object_16 = object.key("UserContextData").start_object();
        crate::protocol_serde::shape_user_context_data_type::ser_user_context_data_type(
            &mut object_16,
            var_15,
        )?;
        object_16.finish();
    }
    if let Some(var_17) = &input.client_metadata {
        #[allow(unused_mut)]
        let mut object_18 = object.key("ClientMetadata").start_object();
        for (key_19, value_20) in var_17 {
            {
                object_18.key(key_19.as_str()).string(value_20.as_str());
            }
        }
        object_18.finish();
    }
    Ok(())
}
