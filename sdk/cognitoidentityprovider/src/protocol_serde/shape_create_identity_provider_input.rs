// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_identity_provider_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_identity_provider::CreateIdentityProviderInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.user_pool_id {
        object.key("UserPoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.provider_name {
        object.key("ProviderName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.provider_type {
        object.key("ProviderType").string(var_3.as_str());
    }
    if let Some(var_4) = &input.provider_details {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ProviderDetails").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.attribute_mapping {
        #[allow(unused_mut)]
        let mut object_9 = object.key("AttributeMapping").start_object();
        for (key_10, value_11) in var_8 {
            {
                object_9.key(key_10.as_str()).string(value_11.as_str());
            }
        }
        object_9.finish();
    }
    if let Some(var_12) = &input.idp_identifiers {
        let mut array_13 = object.key("IdpIdentifiers").start_array();
        for item_14 in var_12 {
            {
                array_13.value().string(item_14.as_str());
            }
        }
        array_13.finish();
    }
    Ok(())
}
