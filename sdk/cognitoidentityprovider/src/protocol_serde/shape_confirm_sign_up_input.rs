// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_confirm_sign_up_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::confirm_sign_up::ConfirmSignUpInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_id {
        object.key("ClientId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.secret_hash {
        object.key("SecretHash").string(var_2.as_str());
    }
    if let Some(var_3) = &input.username {
        object.key("Username").string(var_3.as_str());
    }
    if let Some(var_4) = &input.confirmation_code {
        object.key("ConfirmationCode").string(var_4.as_str());
    }
    if let Some(var_5) = &input.force_alias_creation {
        object.key("ForceAliasCreation").boolean(*var_5);
    }
    if let Some(var_6) = &input.analytics_metadata {
        #[allow(unused_mut)]
        let mut object_7 = object.key("AnalyticsMetadata").start_object();
        crate::protocol_serde::shape_analytics_metadata_type::ser_analytics_metadata_type(&mut object_7, var_6)?;
        object_7.finish();
    }
    if let Some(var_8) = &input.user_context_data {
        #[allow(unused_mut)]
        let mut object_9 = object.key("UserContextData").start_object();
        crate::protocol_serde::shape_user_context_data_type::ser_user_context_data_type(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.client_metadata {
        #[allow(unused_mut)]
        let mut object_11 = object.key("ClientMetadata").start_object();
        for (key_12, value_13) in var_10 {
            {
                object_11.key(key_12.as_str()).string(value_13.as_str());
            }
        }
        object_11.finish();
    }
    Ok(())
}
