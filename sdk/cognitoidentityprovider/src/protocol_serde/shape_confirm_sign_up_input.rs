// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_confirm_sign_up_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::confirm_sign_up::ConfirmSignUpInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.client_id {
        object.key("ClientId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.secret_hash {
        object.key("SecretHash").string(var_2.as_str());
    }
    if let Some(var_3) = &input.username {
        object.key("Username").string(var_3.as_str());
    }
    if let Some(var_4) = &input.confirmation_code {
        object.key("ConfirmationCode").string(var_4.as_str());
    }
    if input.force_alias_creation {
        object
            .key("ForceAliasCreation")
            .boolean(input.force_alias_creation);
    }
    if let Some(var_5) = &input.analytics_metadata {
        #[allow(unused_mut)]
        let mut object_6 = object.key("AnalyticsMetadata").start_object();
        crate::protocol_serde::shape_analytics_metadata_type::ser_analytics_metadata_type(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.user_context_data {
        #[allow(unused_mut)]
        let mut object_8 = object.key("UserContextData").start_object();
        crate::protocol_serde::shape_user_context_data_type::ser_user_context_data_type(
            &mut object_8,
            var_7,
        )?;
        object_8.finish();
    }
    if let Some(var_9) = &input.client_metadata {
        #[allow(unused_mut)]
        let mut object_10 = object.key("ClientMetadata").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11.as_str()).string(value_12.as_str());
            }
        }
        object_10.finish();
    }
    Ok(())
}
