// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_user_pool_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_user_pool::CreateUserPoolInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.pool_name {
        object.key("PoolName").string(var_1.as_str());
    }
    if let Some(var_2) = &input.policies {
        #[allow(unused_mut)]
        let mut object_3 = object.key("Policies").start_object();
        crate::protocol_serde::shape_user_pool_policy_type::ser_user_pool_policy_type(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.deletion_protection {
        object.key("DeletionProtection").string(var_4.as_str());
    }
    if let Some(var_5) = &input.lambda_config {
        #[allow(unused_mut)]
        let mut object_6 = object.key("LambdaConfig").start_object();
        crate::protocol_serde::shape_lambda_config_type::ser_lambda_config_type(&mut object_6, var_5)?;
        object_6.finish();
    }
    if let Some(var_7) = &input.auto_verified_attributes {
        let mut array_8 = object.key("AutoVerifiedAttributes").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.alias_attributes {
        let mut array_11 = object.key("AliasAttributes").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.username_attributes {
        let mut array_14 = object.key("UsernameAttributes").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.sms_verification_message {
        object.key("SmsVerificationMessage").string(var_16.as_str());
    }
    if let Some(var_17) = &input.email_verification_message {
        object.key("EmailVerificationMessage").string(var_17.as_str());
    }
    if let Some(var_18) = &input.email_verification_subject {
        object.key("EmailVerificationSubject").string(var_18.as_str());
    }
    if let Some(var_19) = &input.verification_message_template {
        #[allow(unused_mut)]
        let mut object_20 = object.key("VerificationMessageTemplate").start_object();
        crate::protocol_serde::shape_verification_message_template_type::ser_verification_message_template_type(&mut object_20, var_19)?;
        object_20.finish();
    }
    if let Some(var_21) = &input.sms_authentication_message {
        object.key("SmsAuthenticationMessage").string(var_21.as_str());
    }
    if let Some(var_22) = &input.mfa_configuration {
        object.key("MfaConfiguration").string(var_22.as_str());
    }
    if let Some(var_23) = &input.user_attribute_update_settings {
        #[allow(unused_mut)]
        let mut object_24 = object.key("UserAttributeUpdateSettings").start_object();
        crate::protocol_serde::shape_user_attribute_update_settings_type::ser_user_attribute_update_settings_type(&mut object_24, var_23)?;
        object_24.finish();
    }
    if let Some(var_25) = &input.device_configuration {
        #[allow(unused_mut)]
        let mut object_26 = object.key("DeviceConfiguration").start_object();
        crate::protocol_serde::shape_device_configuration_type::ser_device_configuration_type(&mut object_26, var_25)?;
        object_26.finish();
    }
    if let Some(var_27) = &input.email_configuration {
        #[allow(unused_mut)]
        let mut object_28 = object.key("EmailConfiguration").start_object();
        crate::protocol_serde::shape_email_configuration_type::ser_email_configuration_type(&mut object_28, var_27)?;
        object_28.finish();
    }
    if let Some(var_29) = &input.sms_configuration {
        #[allow(unused_mut)]
        let mut object_30 = object.key("SmsConfiguration").start_object();
        crate::protocol_serde::shape_sms_configuration_type::ser_sms_configuration_type(&mut object_30, var_29)?;
        object_30.finish();
    }
    if let Some(var_31) = &input.user_pool_tags {
        #[allow(unused_mut)]
        let mut object_32 = object.key("UserPoolTags").start_object();
        for (key_33, value_34) in var_31 {
            {
                object_32.key(key_33.as_str()).string(value_34.as_str());
            }
        }
        object_32.finish();
    }
    if let Some(var_35) = &input.admin_create_user_config {
        #[allow(unused_mut)]
        let mut object_36 = object.key("AdminCreateUserConfig").start_object();
        crate::protocol_serde::shape_admin_create_user_config_type::ser_admin_create_user_config_type(&mut object_36, var_35)?;
        object_36.finish();
    }
    if let Some(var_37) = &input.schema {
        let mut array_38 = object.key("Schema").start_array();
        for item_39 in var_37 {
            {
                #[allow(unused_mut)]
                let mut object_40 = array_38.value().start_object();
                crate::protocol_serde::shape_schema_attribute_type::ser_schema_attribute_type(&mut object_40, item_39)?;
                object_40.finish();
            }
        }
        array_38.finish();
    }
    if let Some(var_41) = &input.user_pool_add_ons {
        #[allow(unused_mut)]
        let mut object_42 = object.key("UserPoolAddOns").start_object();
        crate::protocol_serde::shape_user_pool_add_ons_type::ser_user_pool_add_ons_type(&mut object_42, var_41)?;
        object_42.finish();
    }
    if let Some(var_43) = &input.username_configuration {
        #[allow(unused_mut)]
        let mut object_44 = object.key("UsernameConfiguration").start_object();
        crate::protocol_serde::shape_username_configuration_type::ser_username_configuration_type(&mut object_44, var_43)?;
        object_44.finish();
    }
    if let Some(var_45) = &input.account_recovery_setting {
        #[allow(unused_mut)]
        let mut object_46 = object.key("AccountRecoverySetting").start_object();
        crate::protocol_serde::shape_account_recovery_setting_type::ser_account_recovery_setting_type(&mut object_46, var_45)?;
        object_46.finish();
    }
    Ok(())
}
