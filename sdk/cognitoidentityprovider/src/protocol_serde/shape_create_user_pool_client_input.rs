// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_user_pool_client_input(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_user_pool_client::CreateUserPoolClientInput,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.user_pool_id {
        object.key("UserPoolId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.client_name {
        object.key("ClientName").string(var_2.as_str());
    }
    if input.generate_secret {
        object.key("GenerateSecret").boolean(input.generate_secret);
    }
    if input.refresh_token_validity != 0 {
        object.key("RefreshTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.refresh_token_validity).into()),
        );
    }
    if let Some(var_3) = &input.access_token_validity {
        object.key("AccessTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_3).into()),
        );
    }
    if let Some(var_4) = &input.id_token_validity {
        object.key("IdTokenValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_4).into()),
        );
    }
    if let Some(var_5) = &input.token_validity_units {
        #[allow(unused_mut)]
        let mut object_6 = object.key("TokenValidityUnits").start_object();
        crate::protocol_serde::shape_token_validity_units_type::ser_token_validity_units_type(
            &mut object_6,
            var_5,
        )?;
        object_6.finish();
    }
    if let Some(var_7) = &input.read_attributes {
        let mut array_8 = object.key("ReadAttributes").start_array();
        for item_9 in var_7 {
            {
                array_8.value().string(item_9.as_str());
            }
        }
        array_8.finish();
    }
    if let Some(var_10) = &input.write_attributes {
        let mut array_11 = object.key("WriteAttributes").start_array();
        for item_12 in var_10 {
            {
                array_11.value().string(item_12.as_str());
            }
        }
        array_11.finish();
    }
    if let Some(var_13) = &input.explicit_auth_flows {
        let mut array_14 = object.key("ExplicitAuthFlows").start_array();
        for item_15 in var_13 {
            {
                array_14.value().string(item_15.as_str());
            }
        }
        array_14.finish();
    }
    if let Some(var_16) = &input.supported_identity_providers {
        let mut array_17 = object.key("SupportedIdentityProviders").start_array();
        for item_18 in var_16 {
            {
                array_17.value().string(item_18.as_str());
            }
        }
        array_17.finish();
    }
    if let Some(var_19) = &input.callback_ur_ls {
        let mut array_20 = object.key("CallbackURLs").start_array();
        for item_21 in var_19 {
            {
                array_20.value().string(item_21.as_str());
            }
        }
        array_20.finish();
    }
    if let Some(var_22) = &input.logout_ur_ls {
        let mut array_23 = object.key("LogoutURLs").start_array();
        for item_24 in var_22 {
            {
                array_23.value().string(item_24.as_str());
            }
        }
        array_23.finish();
    }
    if let Some(var_25) = &input.default_redirect_uri {
        object.key("DefaultRedirectURI").string(var_25.as_str());
    }
    if let Some(var_26) = &input.allowed_o_auth_flows {
        let mut array_27 = object.key("AllowedOAuthFlows").start_array();
        for item_28 in var_26 {
            {
                array_27.value().string(item_28.as_str());
            }
        }
        array_27.finish();
    }
    if let Some(var_29) = &input.allowed_o_auth_scopes {
        let mut array_30 = object.key("AllowedOAuthScopes").start_array();
        for item_31 in var_29 {
            {
                array_30.value().string(item_31.as_str());
            }
        }
        array_30.finish();
    }
    if input.allowed_o_auth_flows_user_pool_client {
        object
            .key("AllowedOAuthFlowsUserPoolClient")
            .boolean(input.allowed_o_auth_flows_user_pool_client);
    }
    if let Some(var_32) = &input.analytics_configuration {
        #[allow(unused_mut)]
        let mut object_33 = object.key("AnalyticsConfiguration").start_object();
        crate::protocol_serde::shape_analytics_configuration_type::ser_analytics_configuration_type(&mut object_33, var_32)?;
        object_33.finish();
    }
    if let Some(var_34) = &input.prevent_user_existence_errors {
        object
            .key("PreventUserExistenceErrors")
            .string(var_34.as_str());
    }
    if let Some(var_35) = &input.enable_token_revocation {
        object.key("EnableTokenRevocation").boolean(*var_35);
    }
    if let Some(var_36) = &input.enable_propagate_additional_user_context_data {
        object
            .key("EnablePropagateAdditionalUserContextData")
            .boolean(*var_36);
    }
    if let Some(var_37) = &input.auth_session_validity {
        object.key("AuthSessionValidity").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((*var_37).into()),
        );
    }
    Ok(())
}
