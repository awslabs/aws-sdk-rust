// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_respond_to_auth_challenge_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::respond_to_auth_challenge::RespondToAuthChallengeInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_id {
        object.key("ClientId").string(var_1.as_str());
    }
    if let Some(var_2) = &input.challenge_name {
        object.key("ChallengeName").string(var_2.as_str());
    }
    if let Some(var_3) = &input.session {
        object.key("Session").string(var_3.as_str());
    }
    if let Some(var_4) = &input.challenge_responses {
        #[allow(unused_mut)]
        let mut object_5 = object.key("ChallengeResponses").start_object();
        for (key_6, value_7) in var_4 {
            {
                object_5.key(key_6.as_str()).string(value_7.as_str());
            }
        }
        object_5.finish();
    }
    if let Some(var_8) = &input.analytics_metadata {
        #[allow(unused_mut)]
        let mut object_9 = object.key("AnalyticsMetadata").start_object();
        crate::protocol_serde::shape_analytics_metadata_type::ser_analytics_metadata_type(&mut object_9, var_8)?;
        object_9.finish();
    }
    if let Some(var_10) = &input.user_context_data {
        #[allow(unused_mut)]
        let mut object_11 = object.key("UserContextData").start_object();
        crate::protocol_serde::shape_user_context_data_type::ser_user_context_data_type(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.client_metadata {
        #[allow(unused_mut)]
        let mut object_13 = object.key("ClientMetadata").start_object();
        for (key_14, value_15) in var_12 {
            {
                object_13.key(key_14.as_str()).string(value_15.as_str());
            }
        }
        object_13.finish();
    }
    Ok(())
}
