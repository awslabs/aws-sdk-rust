// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn de_user_pool_client_type<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::UserPoolClientType>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::UserPoolClientTypeBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "UserPoolId" => {
                                builder = builder.set_user_pool_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ClientName" => {
                                builder = builder.set_client_name(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ClientId" => {
                                builder = builder.set_client_id(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "ClientSecret" => {
                                builder = builder.set_client_secret(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "LastModifiedDate" => {
                                builder = builder.set_last_modified_date(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "CreationDate" => {
                                builder = builder.set_creation_date(
                                    aws_smithy_json::deserialize::token::expect_timestamp_or_null(
                                        tokens.next(),
                                        aws_smithy_types::date_time::Format::EpochSeconds,
                                    )?,
                                );
                            }
                            "RefreshTokenValidity" => {
                                builder = builder.set_refresh_token_validity(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "AccessTokenValidity" => {
                                builder = builder.set_access_token_validity(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "IdTokenValidity" => {
                                builder = builder.set_id_token_validity(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            "TokenValidityUnits" => {
                                builder = builder.set_token_validity_units(
                                    crate::protocol_serde::shape_token_validity_units_type::de_token_validity_units_type(tokens)?
                                );
                            }
                            "ReadAttributes" => {
                                builder = builder.set_read_attributes(
                                    crate::protocol_serde::shape_client_permission_list_type::de_client_permission_list_type(tokens)?
                                );
                            }
                            "WriteAttributes" => {
                                builder = builder.set_write_attributes(
                                    crate::protocol_serde::shape_client_permission_list_type::de_client_permission_list_type(tokens)?
                                );
                            }
                            "ExplicitAuthFlows" => {
                                builder = builder.set_explicit_auth_flows(
                                    crate::protocol_serde::shape_explicit_auth_flows_list_type::de_explicit_auth_flows_list_type(tokens)?
                                );
                            }
                            "SupportedIdentityProviders" => {
                                builder = builder.set_supported_identity_providers(
                                    crate::protocol_serde::shape_supported_identity_providers_list_type::de_supported_identity_providers_list_type(tokens)?
                                );
                            }
                            "CallbackURLs" => {
                                builder = builder.set_callback_ur_ls(
                                    crate::protocol_serde::shape_callback_ur_ls_list_type::de_callback_ur_ls_list_type(tokens)?
                                );
                            }
                            "LogoutURLs" => {
                                builder = builder.set_logout_ur_ls(
                                    crate::protocol_serde::shape_logout_ur_ls_list_type::de_logout_ur_ls_list_type(tokens)?
                                );
                            }
                            "DefaultRedirectURI" => {
                                builder = builder.set_default_redirect_uri(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "AllowedOAuthFlows" => {
                                builder = builder.set_allowed_o_auth_flows(
                                    crate::protocol_serde::shape_o_auth_flows_type::de_o_auth_flows_type(tokens)?
                                );
                            }
                            "AllowedOAuthScopes" => {
                                builder = builder.set_allowed_o_auth_scopes(
                                    crate::protocol_serde::shape_scope_list_type::de_scope_list_type(tokens)?
                                );
                            }
                            "AllowedOAuthFlowsUserPoolClient" => {
                                builder = builder.set_allowed_o_auth_flows_user_pool_client(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "AnalyticsConfiguration" => {
                                builder = builder.set_analytics_configuration(
                                    crate::protocol_serde::shape_analytics_configuration_type::de_analytics_configuration_type(tokens)?
                                );
                            }
                            "PreventUserExistenceErrors" => {
                                builder = builder.set_prevent_user_existence_errors(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::PreventUserExistenceErrorTypes::from(
                                                u.as_ref(),
                                            )
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "EnableTokenRevocation" => {
                                builder = builder.set_enable_token_revocation(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "EnablePropagateAdditionalUserContextData" => {
                                builder = builder
                                    .set_enable_propagate_additional_user_context_data(
                                        aws_smithy_json::deserialize::token::expect_bool_or_null(
                                            tokens.next(),
                                        )?,
                                    );
                            }
                            "AuthSessionValidity" => {
                                builder = builder.set_auth_session_validity(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i32::try_from)
                                    .transpose()?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
