// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[derive(std::fmt::Debug)]
pub(crate) struct Handle<C = aws_hyper::DynConnector> {
    client: aws_hyper::Client<C>,
    conf: crate::Config,
}

#[derive(Clone, std::fmt::Debug)]
pub struct Client<C = aws_hyper::DynConnector> {
    handle: std::sync::Arc<Handle<C>>,
}
impl<C> Client<C> {
    pub fn from_conf_conn(conf: crate::Config, conn: C) -> Self {
        let client = aws_hyper::Client::new(conn);
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_env() -> Self {
        Self::from_conf(crate::Config::builder().build())
    }

    #[cfg(any(feature = "rustls", feature = "native-tls"))]
    pub fn from_conf(conf: crate::Config) -> Self {
        let client = aws_hyper::Client::https();
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}
impl<C> Client<C>
where
    C: aws_hyper::SmithyConnector,
{
    pub fn add_custom_attributes(&self) -> fluent_builders::AddCustomAttributes<C> {
        fluent_builders::AddCustomAttributes::new(self.handle.clone())
    }
    pub fn admin_add_user_to_group(&self) -> fluent_builders::AdminAddUserToGroup<C> {
        fluent_builders::AdminAddUserToGroup::new(self.handle.clone())
    }
    pub fn admin_confirm_sign_up(&self) -> fluent_builders::AdminConfirmSignUp<C> {
        fluent_builders::AdminConfirmSignUp::new(self.handle.clone())
    }
    pub fn admin_create_user(&self) -> fluent_builders::AdminCreateUser<C> {
        fluent_builders::AdminCreateUser::new(self.handle.clone())
    }
    pub fn admin_delete_user(&self) -> fluent_builders::AdminDeleteUser<C> {
        fluent_builders::AdminDeleteUser::new(self.handle.clone())
    }
    pub fn admin_delete_user_attributes(&self) -> fluent_builders::AdminDeleteUserAttributes<C> {
        fluent_builders::AdminDeleteUserAttributes::new(self.handle.clone())
    }
    pub fn admin_disable_provider_for_user(
        &self,
    ) -> fluent_builders::AdminDisableProviderForUser<C> {
        fluent_builders::AdminDisableProviderForUser::new(self.handle.clone())
    }
    pub fn admin_disable_user(&self) -> fluent_builders::AdminDisableUser<C> {
        fluent_builders::AdminDisableUser::new(self.handle.clone())
    }
    pub fn admin_enable_user(&self) -> fluent_builders::AdminEnableUser<C> {
        fluent_builders::AdminEnableUser::new(self.handle.clone())
    }
    pub fn admin_forget_device(&self) -> fluent_builders::AdminForgetDevice<C> {
        fluent_builders::AdminForgetDevice::new(self.handle.clone())
    }
    pub fn admin_get_device(&self) -> fluent_builders::AdminGetDevice<C> {
        fluent_builders::AdminGetDevice::new(self.handle.clone())
    }
    pub fn admin_get_user(&self) -> fluent_builders::AdminGetUser<C> {
        fluent_builders::AdminGetUser::new(self.handle.clone())
    }
    pub fn admin_initiate_auth(&self) -> fluent_builders::AdminInitiateAuth<C> {
        fluent_builders::AdminInitiateAuth::new(self.handle.clone())
    }
    pub fn admin_link_provider_for_user(&self) -> fluent_builders::AdminLinkProviderForUser<C> {
        fluent_builders::AdminLinkProviderForUser::new(self.handle.clone())
    }
    pub fn admin_list_devices(&self) -> fluent_builders::AdminListDevices<C> {
        fluent_builders::AdminListDevices::new(self.handle.clone())
    }
    pub fn admin_list_groups_for_user(&self) -> fluent_builders::AdminListGroupsForUser<C> {
        fluent_builders::AdminListGroupsForUser::new(self.handle.clone())
    }
    pub fn admin_list_user_auth_events(&self) -> fluent_builders::AdminListUserAuthEvents<C> {
        fluent_builders::AdminListUserAuthEvents::new(self.handle.clone())
    }
    pub fn admin_remove_user_from_group(&self) -> fluent_builders::AdminRemoveUserFromGroup<C> {
        fluent_builders::AdminRemoveUserFromGroup::new(self.handle.clone())
    }
    pub fn admin_reset_user_password(&self) -> fluent_builders::AdminResetUserPassword<C> {
        fluent_builders::AdminResetUserPassword::new(self.handle.clone())
    }
    pub fn admin_respond_to_auth_challenge(
        &self,
    ) -> fluent_builders::AdminRespondToAuthChallenge<C> {
        fluent_builders::AdminRespondToAuthChallenge::new(self.handle.clone())
    }
    pub fn admin_set_user_mfa_preference(&self) -> fluent_builders::AdminSetUserMFAPreference<C> {
        fluent_builders::AdminSetUserMFAPreference::new(self.handle.clone())
    }
    pub fn admin_set_user_password(&self) -> fluent_builders::AdminSetUserPassword<C> {
        fluent_builders::AdminSetUserPassword::new(self.handle.clone())
    }
    pub fn admin_set_user_settings(&self) -> fluent_builders::AdminSetUserSettings<C> {
        fluent_builders::AdminSetUserSettings::new(self.handle.clone())
    }
    pub fn admin_update_auth_event_feedback(
        &self,
    ) -> fluent_builders::AdminUpdateAuthEventFeedback<C> {
        fluent_builders::AdminUpdateAuthEventFeedback::new(self.handle.clone())
    }
    pub fn admin_update_device_status(&self) -> fluent_builders::AdminUpdateDeviceStatus<C> {
        fluent_builders::AdminUpdateDeviceStatus::new(self.handle.clone())
    }
    pub fn admin_update_user_attributes(&self) -> fluent_builders::AdminUpdateUserAttributes<C> {
        fluent_builders::AdminUpdateUserAttributes::new(self.handle.clone())
    }
    pub fn admin_user_global_sign_out(&self) -> fluent_builders::AdminUserGlobalSignOut<C> {
        fluent_builders::AdminUserGlobalSignOut::new(self.handle.clone())
    }
    pub fn associate_software_token(&self) -> fluent_builders::AssociateSoftwareToken<C> {
        fluent_builders::AssociateSoftwareToken::new(self.handle.clone())
    }
    pub fn change_password(&self) -> fluent_builders::ChangePassword<C> {
        fluent_builders::ChangePassword::new(self.handle.clone())
    }
    pub fn confirm_device(&self) -> fluent_builders::ConfirmDevice<C> {
        fluent_builders::ConfirmDevice::new(self.handle.clone())
    }
    pub fn confirm_forgot_password(&self) -> fluent_builders::ConfirmForgotPassword<C> {
        fluent_builders::ConfirmForgotPassword::new(self.handle.clone())
    }
    pub fn confirm_sign_up(&self) -> fluent_builders::ConfirmSignUp<C> {
        fluent_builders::ConfirmSignUp::new(self.handle.clone())
    }
    pub fn create_group(&self) -> fluent_builders::CreateGroup<C> {
        fluent_builders::CreateGroup::new(self.handle.clone())
    }
    pub fn create_identity_provider(&self) -> fluent_builders::CreateIdentityProvider<C> {
        fluent_builders::CreateIdentityProvider::new(self.handle.clone())
    }
    pub fn create_resource_server(&self) -> fluent_builders::CreateResourceServer<C> {
        fluent_builders::CreateResourceServer::new(self.handle.clone())
    }
    pub fn create_user_import_job(&self) -> fluent_builders::CreateUserImportJob<C> {
        fluent_builders::CreateUserImportJob::new(self.handle.clone())
    }
    pub fn create_user_pool(&self) -> fluent_builders::CreateUserPool<C> {
        fluent_builders::CreateUserPool::new(self.handle.clone())
    }
    pub fn create_user_pool_client(&self) -> fluent_builders::CreateUserPoolClient<C> {
        fluent_builders::CreateUserPoolClient::new(self.handle.clone())
    }
    pub fn create_user_pool_domain(&self) -> fluent_builders::CreateUserPoolDomain<C> {
        fluent_builders::CreateUserPoolDomain::new(self.handle.clone())
    }
    pub fn delete_group(&self) -> fluent_builders::DeleteGroup<C> {
        fluent_builders::DeleteGroup::new(self.handle.clone())
    }
    pub fn delete_identity_provider(&self) -> fluent_builders::DeleteIdentityProvider<C> {
        fluent_builders::DeleteIdentityProvider::new(self.handle.clone())
    }
    pub fn delete_resource_server(&self) -> fluent_builders::DeleteResourceServer<C> {
        fluent_builders::DeleteResourceServer::new(self.handle.clone())
    }
    pub fn delete_user(&self) -> fluent_builders::DeleteUser<C> {
        fluent_builders::DeleteUser::new(self.handle.clone())
    }
    pub fn delete_user_attributes(&self) -> fluent_builders::DeleteUserAttributes<C> {
        fluent_builders::DeleteUserAttributes::new(self.handle.clone())
    }
    pub fn delete_user_pool(&self) -> fluent_builders::DeleteUserPool<C> {
        fluent_builders::DeleteUserPool::new(self.handle.clone())
    }
    pub fn delete_user_pool_client(&self) -> fluent_builders::DeleteUserPoolClient<C> {
        fluent_builders::DeleteUserPoolClient::new(self.handle.clone())
    }
    pub fn delete_user_pool_domain(&self) -> fluent_builders::DeleteUserPoolDomain<C> {
        fluent_builders::DeleteUserPoolDomain::new(self.handle.clone())
    }
    pub fn describe_identity_provider(&self) -> fluent_builders::DescribeIdentityProvider<C> {
        fluent_builders::DescribeIdentityProvider::new(self.handle.clone())
    }
    pub fn describe_resource_server(&self) -> fluent_builders::DescribeResourceServer<C> {
        fluent_builders::DescribeResourceServer::new(self.handle.clone())
    }
    pub fn describe_risk_configuration(&self) -> fluent_builders::DescribeRiskConfiguration<C> {
        fluent_builders::DescribeRiskConfiguration::new(self.handle.clone())
    }
    pub fn describe_user_import_job(&self) -> fluent_builders::DescribeUserImportJob<C> {
        fluent_builders::DescribeUserImportJob::new(self.handle.clone())
    }
    pub fn describe_user_pool(&self) -> fluent_builders::DescribeUserPool<C> {
        fluent_builders::DescribeUserPool::new(self.handle.clone())
    }
    pub fn describe_user_pool_client(&self) -> fluent_builders::DescribeUserPoolClient<C> {
        fluent_builders::DescribeUserPoolClient::new(self.handle.clone())
    }
    pub fn describe_user_pool_domain(&self) -> fluent_builders::DescribeUserPoolDomain<C> {
        fluent_builders::DescribeUserPoolDomain::new(self.handle.clone())
    }
    pub fn forget_device(&self) -> fluent_builders::ForgetDevice<C> {
        fluent_builders::ForgetDevice::new(self.handle.clone())
    }
    pub fn forgot_password(&self) -> fluent_builders::ForgotPassword<C> {
        fluent_builders::ForgotPassword::new(self.handle.clone())
    }
    pub fn get_csv_header(&self) -> fluent_builders::GetCSVHeader<C> {
        fluent_builders::GetCSVHeader::new(self.handle.clone())
    }
    pub fn get_device(&self) -> fluent_builders::GetDevice<C> {
        fluent_builders::GetDevice::new(self.handle.clone())
    }
    pub fn get_group(&self) -> fluent_builders::GetGroup<C> {
        fluent_builders::GetGroup::new(self.handle.clone())
    }
    pub fn get_identity_provider_by_identifier(
        &self,
    ) -> fluent_builders::GetIdentityProviderByIdentifier<C> {
        fluent_builders::GetIdentityProviderByIdentifier::new(self.handle.clone())
    }
    pub fn get_signing_certificate(&self) -> fluent_builders::GetSigningCertificate<C> {
        fluent_builders::GetSigningCertificate::new(self.handle.clone())
    }
    pub fn get_ui_customization(&self) -> fluent_builders::GetUICustomization<C> {
        fluent_builders::GetUICustomization::new(self.handle.clone())
    }
    pub fn get_user(&self) -> fluent_builders::GetUser<C> {
        fluent_builders::GetUser::new(self.handle.clone())
    }
    pub fn get_user_attribute_verification_code(
        &self,
    ) -> fluent_builders::GetUserAttributeVerificationCode<C> {
        fluent_builders::GetUserAttributeVerificationCode::new(self.handle.clone())
    }
    pub fn get_user_pool_mfa_config(&self) -> fluent_builders::GetUserPoolMfaConfig<C> {
        fluent_builders::GetUserPoolMfaConfig::new(self.handle.clone())
    }
    pub fn global_sign_out(&self) -> fluent_builders::GlobalSignOut<C> {
        fluent_builders::GlobalSignOut::new(self.handle.clone())
    }
    pub fn initiate_auth(&self) -> fluent_builders::InitiateAuth<C> {
        fluent_builders::InitiateAuth::new(self.handle.clone())
    }
    pub fn list_devices(&self) -> fluent_builders::ListDevices<C> {
        fluent_builders::ListDevices::new(self.handle.clone())
    }
    pub fn list_groups(&self) -> fluent_builders::ListGroups<C> {
        fluent_builders::ListGroups::new(self.handle.clone())
    }
    pub fn list_identity_providers(&self) -> fluent_builders::ListIdentityProviders<C> {
        fluent_builders::ListIdentityProviders::new(self.handle.clone())
    }
    pub fn list_resource_servers(&self) -> fluent_builders::ListResourceServers<C> {
        fluent_builders::ListResourceServers::new(self.handle.clone())
    }
    pub fn list_tags_for_resource(&self) -> fluent_builders::ListTagsForResource<C> {
        fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    pub fn list_user_import_jobs(&self) -> fluent_builders::ListUserImportJobs<C> {
        fluent_builders::ListUserImportJobs::new(self.handle.clone())
    }
    pub fn list_user_pool_clients(&self) -> fluent_builders::ListUserPoolClients<C> {
        fluent_builders::ListUserPoolClients::new(self.handle.clone())
    }
    pub fn list_user_pools(&self) -> fluent_builders::ListUserPools<C> {
        fluent_builders::ListUserPools::new(self.handle.clone())
    }
    pub fn list_users(&self) -> fluent_builders::ListUsers<C> {
        fluent_builders::ListUsers::new(self.handle.clone())
    }
    pub fn list_users_in_group(&self) -> fluent_builders::ListUsersInGroup<C> {
        fluent_builders::ListUsersInGroup::new(self.handle.clone())
    }
    pub fn resend_confirmation_code(&self) -> fluent_builders::ResendConfirmationCode<C> {
        fluent_builders::ResendConfirmationCode::new(self.handle.clone())
    }
    pub fn respond_to_auth_challenge(&self) -> fluent_builders::RespondToAuthChallenge<C> {
        fluent_builders::RespondToAuthChallenge::new(self.handle.clone())
    }
    pub fn revoke_token(&self) -> fluent_builders::RevokeToken<C> {
        fluent_builders::RevokeToken::new(self.handle.clone())
    }
    pub fn set_risk_configuration(&self) -> fluent_builders::SetRiskConfiguration<C> {
        fluent_builders::SetRiskConfiguration::new(self.handle.clone())
    }
    pub fn set_ui_customization(&self) -> fluent_builders::SetUICustomization<C> {
        fluent_builders::SetUICustomization::new(self.handle.clone())
    }
    pub fn set_user_mfa_preference(&self) -> fluent_builders::SetUserMFAPreference<C> {
        fluent_builders::SetUserMFAPreference::new(self.handle.clone())
    }
    pub fn set_user_pool_mfa_config(&self) -> fluent_builders::SetUserPoolMfaConfig<C> {
        fluent_builders::SetUserPoolMfaConfig::new(self.handle.clone())
    }
    pub fn set_user_settings(&self) -> fluent_builders::SetUserSettings<C> {
        fluent_builders::SetUserSettings::new(self.handle.clone())
    }
    pub fn sign_up(&self) -> fluent_builders::SignUp<C> {
        fluent_builders::SignUp::new(self.handle.clone())
    }
    pub fn start_user_import_job(&self) -> fluent_builders::StartUserImportJob<C> {
        fluent_builders::StartUserImportJob::new(self.handle.clone())
    }
    pub fn stop_user_import_job(&self) -> fluent_builders::StopUserImportJob<C> {
        fluent_builders::StopUserImportJob::new(self.handle.clone())
    }
    pub fn tag_resource(&self) -> fluent_builders::TagResource<C> {
        fluent_builders::TagResource::new(self.handle.clone())
    }
    pub fn untag_resource(&self) -> fluent_builders::UntagResource<C> {
        fluent_builders::UntagResource::new(self.handle.clone())
    }
    pub fn update_auth_event_feedback(&self) -> fluent_builders::UpdateAuthEventFeedback<C> {
        fluent_builders::UpdateAuthEventFeedback::new(self.handle.clone())
    }
    pub fn update_device_status(&self) -> fluent_builders::UpdateDeviceStatus<C> {
        fluent_builders::UpdateDeviceStatus::new(self.handle.clone())
    }
    pub fn update_group(&self) -> fluent_builders::UpdateGroup<C> {
        fluent_builders::UpdateGroup::new(self.handle.clone())
    }
    pub fn update_identity_provider(&self) -> fluent_builders::UpdateIdentityProvider<C> {
        fluent_builders::UpdateIdentityProvider::new(self.handle.clone())
    }
    pub fn update_resource_server(&self) -> fluent_builders::UpdateResourceServer<C> {
        fluent_builders::UpdateResourceServer::new(self.handle.clone())
    }
    pub fn update_user_attributes(&self) -> fluent_builders::UpdateUserAttributes<C> {
        fluent_builders::UpdateUserAttributes::new(self.handle.clone())
    }
    pub fn update_user_pool(&self) -> fluent_builders::UpdateUserPool<C> {
        fluent_builders::UpdateUserPool::new(self.handle.clone())
    }
    pub fn update_user_pool_client(&self) -> fluent_builders::UpdateUserPoolClient<C> {
        fluent_builders::UpdateUserPoolClient::new(self.handle.clone())
    }
    pub fn update_user_pool_domain(&self) -> fluent_builders::UpdateUserPoolDomain<C> {
        fluent_builders::UpdateUserPoolDomain::new(self.handle.clone())
    }
    pub fn verify_software_token(&self) -> fluent_builders::VerifySoftwareToken<C> {
        fluent_builders::VerifySoftwareToken::new(self.handle.clone())
    }
    pub fn verify_user_attribute(&self) -> fluent_builders::VerifyUserAttribute<C> {
        fluent_builders::VerifyUserAttribute::new(self.handle.clone())
    }
}
pub mod fluent_builders {
    #[derive(std::fmt::Debug)]
    pub struct AddCustomAttributes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::add_custom_attributes_input::Builder,
    }
    impl<C> AddCustomAttributes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AddCustomAttributesOutput,
            smithy_http::result::SdkError<crate::error::AddCustomAttributesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to add custom attributes.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>An array of custom attributes, such as Mutable and Name.</p>
        pub fn custom_attributes(
            mut self,
            inp: impl Into<crate::model::SchemaAttributeType>,
        ) -> Self {
            self.inner = self.inner.custom_attributes(inp);
            self
        }
        pub fn set_custom_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SchemaAttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_custom_attributes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminAddUserToGroup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_add_user_to_group_input::Builder,
    }
    impl<C> AdminAddUserToGroup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminAddUserToGroupOutput,
            smithy_http::result::SdkError<crate::error::AdminAddUserToGroupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The username for the user.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The group name.</p>
        pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_name(input);
            self
        }
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminConfirmSignUp<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_confirm_sign_up_input::Builder,
    }
    impl<C> AdminConfirmSignUp<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminConfirmSignUpOutput,
            smithy_http::result::SdkError<crate::error::AdminConfirmSignUpError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for which you want to confirm user registration.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name for which you want to confirm user registration.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>If your user pool configuration includes triggers, the AdminConfirmSignUp API action
        /// invokes the AWS Lambda function that is specified for the <i>post
        /// confirmation</i> trigger. When Amazon Cognito invokes this function, it
        /// passes a JSON payload, which the function receives as input. In this payload, the
        /// <code>clientMetadata</code> attribute provides the data that you assigned to the
        /// ClientMetadata parameter in your AdminConfirmSignUp request. In your function code in
        /// AWS Lambda, you can process the ClientMetadata value to enhance your workflow for your
        /// specific needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminCreateUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_create_user_input::Builder,
    }
    impl<C> AdminCreateUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminCreateUserOutput,
            smithy_http::result::SdkError<crate::error::AdminCreateUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where the user will be created.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The username for the user. Must be unique within the user pool. Must be a UTF-8 string
        /// between 1 and 128 characters. After the user is created, the username cannot be
        /// changed.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>An array of name-value pairs that contain user attributes and attribute values to be
        /// set for the user to be created. You can create a user without specifying any attributes
        /// other than <code>Username</code>. However, any attributes that you specify as required
        /// (when creating a user pool or in the <b>Attributes</b> tab of
        /// the console) must be supplied either by you (in your call to
        /// <code>AdminCreateUser</code>) or by the user (when he or she signs up in response to
        /// your welcome message).</p>
        /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
        /// attribute name.</p>
        /// <p>To send a message inviting the user to sign up, you must specify the user's email
        /// address or phone number. This can be done in your call to AdminCreateUser or in the
        /// <b>Users</b> tab of the Amazon Cognito console for
        /// managing your user pools.</p>
        /// <p>In your call to <code>AdminCreateUser</code>, you can set the
        /// <code>email_verified</code> attribute to <code>True</code>, and you can set the
        /// <code>phone_number_verified</code> attribute to <code>True</code>. (You can also do
        /// this by calling <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminUpdateUserAttributes.html">AdminUpdateUserAttributes</a>.)</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <b>email</b>: The email address of the user to whom
        /// the message that contains the code and username will be sent. Required if the
        /// <code>email_verified</code> attribute is set to <code>True</code>, or if
        /// <code>"EMAIL"</code> is specified in the <code>DesiredDeliveryMediums</code>
        /// parameter.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <b>phone_number</b>: The phone number of the user to
        /// whom the message that contains the code and username will be sent. Required if
        /// the <code>phone_number_verified</code> attribute is set to <code>True</code>, or
        /// if <code>"SMS"</code> is specified in the <code>DesiredDeliveryMediums</code>
        /// parameter.</p>
        /// </li>
        /// </ul>
        pub fn user_attributes(mut self, inp: impl Into<crate::model::AttributeType>) -> Self {
            self.inner = self.inner.user_attributes(inp);
            self
        }
        pub fn set_user_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_user_attributes(input);
            self
        }
        /// <p>The user's validation data. This is an array of name-value pairs that contain user
        /// attributes and attribute values that you can use for custom validation, such as
        /// restricting the types of user accounts that can be registered. For example, you might
        /// choose to allow or disallow user sign-up based on the user's domain.</p>
        /// <p>To configure custom validation, you must create a Pre Sign-up Lambda trigger for the
        /// user pool as described in the Amazon Cognito Developer Guide. The Lambda trigger
        /// receives the validation data and uses it in the validation process.</p>
        /// <p>The user's validation data is not persisted.</p>
        pub fn validation_data(mut self, inp: impl Into<crate::model::AttributeType>) -> Self {
            self.inner = self.inner.validation_data(inp);
            self
        }
        pub fn set_validation_data(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_validation_data(input);
            self
        }
        /// <p>The user's temporary password. This password must conform to the password policy that
        /// you specified when you created the user pool.</p>
        /// <p>The temporary password is valid only once. To complete the Admin Create User flow, the
        /// user must enter the temporary password in the sign-in page along with a new password to
        /// be used in all future sign-ins.</p>
        /// <p>This parameter is not required. If you do not specify a value, Amazon Cognito
        /// generates one for you.</p>
        /// <p>The temporary password can only be used until the user account expiration limit that
        /// you specified when you created the user pool. To reset the account after that time
        /// limit, you must call <code>AdminCreateUser</code> again, specifying
        /// <code>"RESEND"</code> for the <code>MessageAction</code> parameter.</p>
        pub fn temporary_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.temporary_password(input);
            self
        }
        pub fn set_temporary_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_temporary_password(input);
            self
        }
        /// <p>This parameter is only used if the <code>phone_number_verified</code> or
        /// <code>email_verified</code> attribute is set to <code>True</code>. Otherwise, it is
        /// ignored.</p>
        /// <p>If this parameter is set to <code>True</code> and the phone number or email address
        /// specified in the UserAttributes parameter already exists as an alias with a different
        /// user, the API call will migrate the alias from the previous user to the newly created
        /// user. The previous user will no longer be able to log in using that alias.</p>
        /// <p>If this parameter is set to <code>False</code>, the API throws an
        /// <code>AliasExistsException</code> error if the alias already exists. The default
        /// value is <code>False</code>.</p>
        pub fn force_alias_creation(mut self, input: bool) -> Self {
            self.inner = self.inner.force_alias_creation(input);
            self
        }
        pub fn set_force_alias_creation(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_force_alias_creation(input);
            self
        }
        /// <p>Set to <code>"RESEND"</code> to resend the invitation message to a user that already
        /// exists and reset the expiration limit on the user's account. Set to
        /// <code>"SUPPRESS"</code> to suppress sending the message. Only one value can be
        /// specified.</p>
        pub fn message_action(mut self, input: crate::model::MessageActionType) -> Self {
            self.inner = self.inner.message_action(input);
            self
        }
        pub fn set_message_action(
            mut self,
            input: std::option::Option<crate::model::MessageActionType>,
        ) -> Self {
            self.inner = self.inner.set_message_action(input);
            self
        }
        /// <p>Specify <code>"EMAIL"</code> if email will be used to send the welcome message.
        /// Specify <code>"SMS"</code> if the phone number will be used. The default value is
        /// <code>"SMS"</code>. More than one value can be specified.</p>
        pub fn desired_delivery_mediums(
            mut self,
            inp: impl Into<crate::model::DeliveryMediumType>,
        ) -> Self {
            self.inner = self.inner.desired_delivery_mediums(inp);
            self
        }
        pub fn set_desired_delivery_mediums(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::DeliveryMediumType>>,
        ) -> Self {
            self.inner = self.inner.set_desired_delivery_mediums(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the AdminCreateUser API action, Amazon Cognito invokes the function that is
        /// assigned to the <i>pre sign-up</i> trigger. When Amazon Cognito invokes
        /// this function, it passes a JSON payload, which the function receives as input. This
        /// payload contains a <code>clientMetadata</code> attribute, which provides the data that
        /// you assigned to the ClientMetadata parameter in your AdminCreateUser request. In your
        /// function code in AWS Lambda, you can process the <code>clientMetadata</code> value to
        /// enhance your workflow for your specific needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminDeleteUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_delete_user_input::Builder,
    }
    impl<C> AdminDeleteUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminDeleteUserOutput,
            smithy_http::result::SdkError<crate::error::AdminDeleteUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to delete the user.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user you wish to delete.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminDeleteUserAttributes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_delete_user_attributes_input::Builder,
    }
    impl<C> AdminDeleteUserAttributes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminDeleteUserAttributesOutput,
            smithy_http::result::SdkError<crate::error::AdminDeleteUserAttributesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to delete user attributes.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user from which you would like to delete attributes.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>An array of strings representing the user attribute names you wish to delete.</p>
        /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
        /// attribute name.</p>
        pub fn user_attribute_names(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_attribute_names(inp);
            self
        }
        pub fn set_user_attribute_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_user_attribute_names(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminDisableProviderForUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_disable_provider_for_user_input::Builder,
    }
    impl<C> AdminDisableProviderForUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminDisableProviderForUserOutput,
            smithy_http::result::SdkError<crate::error::AdminDisableProviderForUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user to be disabled.</p>
        pub fn user(mut self, input: crate::model::ProviderUserIdentifierType) -> Self {
            self.inner = self.inner.user(input);
            self
        }
        pub fn set_user(
            mut self,
            input: std::option::Option<crate::model::ProviderUserIdentifierType>,
        ) -> Self {
            self.inner = self.inner.set_user(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminDisableUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_disable_user_input::Builder,
    }
    impl<C> AdminDisableUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminDisableUserOutput,
            smithy_http::result::SdkError<crate::error::AdminDisableUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to disable the user.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user you wish to disable.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminEnableUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_enable_user_input::Builder,
    }
    impl<C> AdminEnableUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminEnableUserOutput,
            smithy_http::result::SdkError<crate::error::AdminEnableUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to enable the user.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user you wish to enable.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminForgetDevice<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_forget_device_input::Builder,
    }
    impl<C> AdminForgetDevice<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminForgetDeviceOutput,
            smithy_http::result::SdkError<crate::error::AdminForgetDeviceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The device key.</p>
        pub fn device_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.device_key(input);
            self
        }
        pub fn set_device_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_device_key(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminGetDevice<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_get_device_input::Builder,
    }
    impl<C> AdminGetDevice<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminGetDeviceOutput,
            smithy_http::result::SdkError<crate::error::AdminGetDeviceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The device key.</p>
        pub fn device_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.device_key(input);
            self
        }
        pub fn set_device_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_device_key(input);
            self
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminGetUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_get_user_input::Builder,
    }
    impl<C> AdminGetUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminGetUserOutput,
            smithy_http::result::SdkError<crate::error::AdminGetUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to get information about the
        /// user.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user you wish to retrieve.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminInitiateAuth<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_initiate_auth_input::Builder,
    }
    impl<C> AdminInitiateAuth<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminInitiateAuthOutput,
            smithy_http::result::SdkError<crate::error::AdminInitiateAuthError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon Cognito user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The app client ID.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>The authentication flow for this call to execute. The API action will depend on this
        /// value. For example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return
        /// new tokens.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and
        /// <code>SRP_A</code> and return the SRP variables to be used for next
        /// challenge execution.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and
        /// <code>PASSWORD</code> and return the next challenge or tokens.</p>
        /// </li>
        /// </ul>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password
        /// (SRP) protocol.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication
        /// flow for refreshing the access token and ID token by supplying a valid refresh
        /// token.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CUSTOM_AUTH</code>: Custom authentication flow.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ADMIN_NO_SRP_AUTH</code>: Non-SRP authentication flow; you can pass in
        /// the USERNAME and PASSWORD directly if the flow is enabled for calling the app
        /// client.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and
        /// PASSWORD are passed directly. If a user migration Lambda trigger is set, this
        /// flow will invoke the user migration Lambda if the USERNAME is not found in the
        /// user pool. </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ADMIN_USER_PASSWORD_AUTH</code>: Admin-based user password
        /// authentication. This replaces the <code>ADMIN_NO_SRP_AUTH</code> authentication
        /// flow. In this flow, Cognito receives the password in the request instead of
        /// using the SRP process to verify passwords.</p>
        /// </li>
        /// </ul>
        pub fn auth_flow(mut self, input: crate::model::AuthFlowType) -> Self {
            self.inner = self.inner.auth_flow(input);
            self
        }
        pub fn set_auth_flow(
            mut self,
            input: std::option::Option<crate::model::AuthFlowType>,
        ) -> Self {
            self.inner = self.inner.set_auth_flow(input);
            self
        }
        /// <p>The authentication parameters. These are inputs corresponding to the
        /// <code>AuthFlow</code> that you are invoking. The required values depend on the value
        /// of <code>AuthFlow</code>:</p>
        /// <ul>
        /// <li>
        /// <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required),
        /// <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app
        /// client is configured with a client secret), <code>DEVICE_KEY</code>.</p>
        /// </li>
        /// <li>
        /// <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code>
        /// (required), <code>SECRET_HASH</code> (required if the app client is configured
        /// with a client secret), <code>DEVICE_KEY</code>.</p>
        /// </li>
        /// <li>
        /// <p>For <code>ADMIN_NO_SRP_AUTH</code>: <code>USERNAME</code> (required),
        /// <code>SECRET_HASH</code> (if app client is configured with client secret),
        /// <code>PASSWORD</code> (required), <code>DEVICE_KEY</code>.</p>
        /// </li>
        /// <li>
        /// <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required),
        /// <code>SECRET_HASH</code> (if app client is configured with client secret),
        /// <code>DEVICE_KEY</code>. To start the authentication flow with password
        /// verification, include <code>ChallengeName: SRP_A</code> and <code>SRP_A: (The
        /// SRP_A Value)</code>.</p>
        /// </li>
        /// </ul>
        pub fn auth_parameters(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.auth_parameters(k, v);
            self
        }
        pub fn set_auth_parameters(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_auth_parameters(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for certain custom
        /// workflows that this action triggers.</p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the AdminInitiateAuth API action, Amazon Cognito invokes the AWS Lambda
        /// functions that are specified for various triggers. The ClientMetadata value is passed as
        /// input to the functions for only the following triggers:</p>
        /// <ul>
        /// <li>
        /// <p>Pre signup</p>
        /// </li>
        /// <li>
        /// <p>Pre authentication</p>
        /// </li>
        /// <li>
        /// <p>User migration</p>
        /// </li>
        /// </ul>
        /// <p>When Amazon Cognito invokes the functions for these triggers, it passes a JSON
        /// payload, which the function receives as input. This payload contains a
        /// <code>validationData</code> attribute, which provides the data that you assigned to
        /// the ClientMetadata parameter in your AdminInitiateAuth request. In your function code in
        /// AWS Lambda, you can process the <code>validationData</code> value to enhance your
        /// workflow for your specific needs.</p>
        /// <p>When you use the AdminInitiateAuth API action, Amazon Cognito also invokes the
        /// functions for the following triggers, but it does not provide the ClientMetadata value
        /// as input:</p>
        /// <ul>
        /// <li>
        /// <p>Post authentication</p>
        /// </li>
        /// <li>
        /// <p>Custom message</p>
        /// </li>
        /// <li>
        /// <p>Pre token generation</p>
        /// </li>
        /// <li>
        /// <p>Create auth challenge</p>
        /// </li>
        /// <li>
        /// <p>Define auth challenge</p>
        /// </li>
        /// <li>
        /// <p>Verify auth challenge</p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
        /// <p>The analytics metadata for collecting Amazon Pinpoint metrics for
        /// <code>AdminInitiateAuth</code> calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn context_data(mut self, input: crate::model::ContextDataType) -> Self {
            self.inner = self.inner.context_data(input);
            self
        }
        pub fn set_context_data(
            mut self,
            input: std::option::Option<crate::model::ContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_context_data(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminLinkProviderForUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_link_provider_for_user_input::Builder,
    }
    impl<C> AdminLinkProviderForUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminLinkProviderForUserOutput,
            smithy_http::result::SdkError<crate::error::AdminLinkProviderForUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The existing user in the user pool to be linked to the external identity provider user
        /// account. Can be a native (Username + Password) Cognito User Pools user or a federated
        /// user (for example, a SAML or Facebook user). If the user doesn't exist, an exception is
        /// thrown. This is the user that is returned when the new user (with the linked identity
        /// provider attribute) signs in.</p>
        /// <p>For a native username + password user, the <code>ProviderAttributeValue</code> for the
        /// <code>DestinationUser</code> should be the username in the user pool. For a
        /// federated user, it should be the provider-specific <code>user_id</code>.</p>
        /// <p>The <code>ProviderAttributeName</code> of the <code>DestinationUser</code> is
        /// ignored.</p>
        /// <p>The <code>ProviderName</code> should be set to <code>Cognito</code> for users in
        /// Cognito user pools.</p>
        pub fn destination_user(mut self, input: crate::model::ProviderUserIdentifierType) -> Self {
            self.inner = self.inner.destination_user(input);
            self
        }
        pub fn set_destination_user(
            mut self,
            input: std::option::Option<crate::model::ProviderUserIdentifierType>,
        ) -> Self {
            self.inner = self.inner.set_destination_user(input);
            self
        }
        /// <p>An external identity provider account for a user who does not currently exist yet in
        /// the user pool. This user must be a federated user (for example, a SAML or Facebook
        /// user), not another native user.</p>
        /// <p>If the <code>SourceUser</code> is a federated social identity provider user (Facebook,
        /// Google, or Login with Amazon), you must set the <code>ProviderAttributeName</code> to
        /// <code>Cognito_Subject</code>. For social identity providers, the
        /// <code>ProviderName</code> will be <code>Facebook</code>, <code>Google</code>, or
        /// <code>LoginWithAmazon</code>, and Cognito will automatically parse the Facebook,
        /// Google, and Login with Amazon tokens for <code>id</code>, <code>sub</code>, and
        /// <code>user_id</code>, respectively. The <code>ProviderAttributeValue</code> for the
        /// user must be the same value as the <code>id</code>, <code>sub</code>, or
        /// <code>user_id</code> value found in the social identity provider token.</p>
        /// <p></p>
        /// <p>For SAML, the <code>ProviderAttributeName</code> can be any value that matches a claim
        /// in the SAML assertion. If you wish to link SAML users based on the subject of the SAML
        /// assertion, you should map the subject to a claim through the SAML identity provider and
        /// submit that claim name as the <code>ProviderAttributeName</code>. If you set
        /// <code>ProviderAttributeName</code> to <code>Cognito_Subject</code>, Cognito will
        /// automatically parse the default unique identifier found in the subject from the SAML
        /// token.</p>
        pub fn source_user(mut self, input: crate::model::ProviderUserIdentifierType) -> Self {
            self.inner = self.inner.source_user(input);
            self
        }
        pub fn set_source_user(
            mut self,
            input: std::option::Option<crate::model::ProviderUserIdentifierType>,
        ) -> Self {
            self.inner = self.inner.set_source_user(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminListDevices<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_list_devices_input::Builder,
    }
    impl<C> AdminListDevices<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminListDevicesOutput,
            smithy_http::result::SdkError<crate::error::AdminListDevicesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The limit of the devices request.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>The pagination token.</p>
        pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pagination_token(input);
            self
        }
        pub fn set_pagination_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pagination_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminListGroupsForUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_list_groups_for_user_input::Builder,
    }
    impl<C> AdminListGroupsForUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminListGroupsForUserOutput,
            smithy_http::result::SdkError<crate::error::AdminListGroupsForUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The username for the user.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The limit of the request to list groups.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>An identifier that was returned from the previous call to this operation, which can be
        /// used to return the next set of items in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminListUserAuthEvents<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_list_user_auth_events_input::Builder,
    }
    impl<C> AdminListUserAuthEvents<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminListUserAuthEventsOutput,
            smithy_http::result::SdkError<crate::error::AdminListUserAuthEventsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user pool username or an alias.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The maximum number of authentication events to return.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>A pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminRemoveUserFromGroup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_remove_user_from_group_input::Builder,
    }
    impl<C> AdminRemoveUserFromGroup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminRemoveUserFromGroupOutput,
            smithy_http::result::SdkError<crate::error::AdminRemoveUserFromGroupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The username for the user.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The group name.</p>
        pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_name(input);
            self
        }
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminResetUserPassword<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_reset_user_password_input::Builder,
    }
    impl<C> AdminResetUserPassword<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminResetUserPasswordOutput,
            smithy_http::result::SdkError<crate::error::AdminResetUserPasswordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to reset the user's password.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user whose password you wish to reset.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the AdminResetUserPassword API action, Amazon Cognito invokes the function
        /// that is assigned to the <i>custom message</i> trigger. When Amazon Cognito
        /// invokes this function, it passes a JSON payload, which the function receives as input.
        /// This payload contains a <code>clientMetadata</code> attribute, which provides the data
        /// that you assigned to the ClientMetadata parameter in your AdminResetUserPassword
        /// request. In your function code in AWS Lambda, you can process the
        /// <code>clientMetadata</code> value to enhance your workflow for your specific
        /// needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminRespondToAuthChallenge<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_respond_to_auth_challenge_input::Builder,
    }
    impl<C> AdminRespondToAuthChallenge<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminRespondToAuthChallengeOutput,
            smithy_http::result::SdkError<crate::error::AdminRespondToAuthChallengeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the Amazon Cognito user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The app client ID.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AdminInitiateAuth.html">AdminInitiateAuth</a>.</p>
        pub fn challenge_name(mut self, input: crate::model::ChallengeNameType) -> Self {
            self.inner = self.inner.challenge_name(input);
            self
        }
        pub fn set_challenge_name(
            mut self,
            input: std::option::Option<crate::model::ChallengeNameType>,
        ) -> Self {
            self.inner = self.inner.set_challenge_name(input);
            self
        }
        /// <p>The challenge responses. These are inputs corresponding to the value of
        /// <code>ChallengeName</code>, for example:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>,
        /// <code>SECRET_HASH</code> (if app client is configured with client
        /// secret).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
        /// <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
        /// <code>USERNAME</code>, <code>SECRET_HASH</code> (if app client is configured
        /// with client secret).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ADMIN_NO_SRP_AUTH</code>: <code>PASSWORD</code>, <code>USERNAME</code>,
        /// <code>SECRET_HASH</code> (if app client is configured with client secret).
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other
        /// required attributes, <code>USERNAME</code>, <code>SECRET_HASH</code> (if app
        /// client is configured with client secret). </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>MFA_SETUP</code> requires <code>USERNAME</code>, plus you need to use
        /// the session value returned by <code>VerifySoftwareToken</code> in the
        /// <code>Session</code> parameter.</p>
        /// </li>
        /// </ul>
        /// <p>The value of the <code>USERNAME</code> attribute must be the user's actual username,
        /// not an alias (such as email address or phone number). To make this easier, the
        /// <code>AdminInitiateAuth</code> response includes the actual username value in the
        /// <code>USERNAMEUSER_ID_FOR_SRP</code> attribute, even if you specified an alias in
        /// your call to <code>AdminInitiateAuth</code>.</p>
        pub fn challenge_responses(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.challenge_responses(k, v);
            self
        }
        pub fn set_challenge_responses(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_challenge_responses(input);
            self
        }
        /// <p>The session which should be passed both ways in challenge-response calls to the
        /// service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call
        /// determines that the caller needs to go through another challenge, they return a session
        /// with other challenge parameters. This session should be passed as it is to the next
        /// <code>RespondToAuthChallenge</code> API call.</p>
        pub fn session(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session(input);
            self
        }
        pub fn set_session(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_session(input);
            self
        }
        /// <p>The analytics metadata for collecting Amazon Pinpoint metrics for
        /// <code>AdminRespondToAuthChallenge</code> calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn context_data(mut self, input: crate::model::ContextDataType) -> Self {
            self.inner = self.inner.context_data(input);
            self
        }
        pub fn set_context_data(
            mut self,
            input: std::option::Option<crate::model::ContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_context_data(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the AdminRespondToAuthChallenge API action, Amazon Cognito invokes any
        /// functions that are assigned to the following triggers: <i>pre sign-up</i>,
        /// <i>custom message</i>, <i>post authentication</i>,
        /// <i>user migration</i>, <i>pre token generation</i>,
        /// <i>define auth challenge</i>, <i>create auth
        /// challenge</i>, and <i>verify auth challenge response</i>. When
        /// Amazon Cognito invokes any of these functions, it passes a JSON payload, which the
        /// function receives as input. This payload contains a <code>clientMetadata</code>
        /// attribute, which provides the data that you assigned to the ClientMetadata parameter in
        /// your AdminRespondToAuthChallenge request. In your function code in AWS Lambda, you can
        /// process the <code>clientMetadata</code> value to enhance your workflow for your specific
        /// needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminSetUserMFAPreference<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_set_user_mfa_preference_input::Builder,
    }
    impl<C> AdminSetUserMFAPreference<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminSetUserMfaPreferenceOutput,
            smithy_http::result::SdkError<crate::error::AdminSetUserMFAPreferenceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The SMS text message MFA settings.</p>
        pub fn sms_mfa_settings(mut self, input: crate::model::SmsMfaSettingsType) -> Self {
            self.inner = self.inner.sms_mfa_settings(input);
            self
        }
        pub fn set_sms_mfa_settings(
            mut self,
            input: std::option::Option<crate::model::SmsMfaSettingsType>,
        ) -> Self {
            self.inner = self.inner.set_sms_mfa_settings(input);
            self
        }
        /// <p>The time-based one-time password software token MFA settings.</p>
        pub fn software_token_mfa_settings(
            mut self,
            input: crate::model::SoftwareTokenMfaSettingsType,
        ) -> Self {
            self.inner = self.inner.software_token_mfa_settings(input);
            self
        }
        pub fn set_software_token_mfa_settings(
            mut self,
            input: std::option::Option<crate::model::SoftwareTokenMfaSettingsType>,
        ) -> Self {
            self.inner = self.inner.set_software_token_mfa_settings(input);
            self
        }
        /// <p>The user pool username or alias.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminSetUserPassword<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_set_user_password_input::Builder,
    }
    impl<C> AdminSetUserPassword<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminSetUserPasswordOutput,
            smithy_http::result::SdkError<crate::error::AdminSetUserPasswordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to set the user's password.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user whose password you wish to set.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The password for the user.</p>
        pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.password(input);
            self
        }
        pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_password(input);
            self
        }
        /// <p>
        /// <code>True</code> if the password is permanent, <code>False</code> if it is
        /// temporary.</p>
        pub fn permanent(mut self, input: bool) -> Self {
            self.inner = self.inner.permanent(input);
            self
        }
        pub fn set_permanent(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_permanent(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminSetUserSettings<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_set_user_settings_input::Builder,
    }
    impl<C> AdminSetUserSettings<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminSetUserSettingsOutput,
            smithy_http::result::SdkError<crate::error::AdminSetUserSettingsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the user pool that contains the user that you are setting options
        /// for.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user that you are setting options for.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>You can use this parameter only to set an SMS configuration that uses SMS for
        /// delivery.</p>
        pub fn mfa_options(mut self, inp: impl Into<crate::model::MfaOptionType>) -> Self {
            self.inner = self.inner.mfa_options(inp);
            self
        }
        pub fn set_mfa_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MfaOptionType>>,
        ) -> Self {
            self.inner = self.inner.set_mfa_options(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminUpdateAuthEventFeedback<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_update_auth_event_feedback_input::Builder,
    }
    impl<C> AdminUpdateAuthEventFeedback<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminUpdateAuthEventFeedbackOutput,
            smithy_http::result::SdkError<crate::error::AdminUpdateAuthEventFeedbackError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user pool username.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The authentication event ID.</p>
        pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.event_id(input);
            self
        }
        pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_event_id(input);
            self
        }
        /// <p>The authentication event feedback value.</p>
        pub fn feedback_value(mut self, input: crate::model::FeedbackValueType) -> Self {
            self.inner = self.inner.feedback_value(input);
            self
        }
        pub fn set_feedback_value(
            mut self,
            input: std::option::Option<crate::model::FeedbackValueType>,
        ) -> Self {
            self.inner = self.inner.set_feedback_value(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminUpdateDeviceStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_update_device_status_input::Builder,
    }
    impl<C> AdminUpdateDeviceStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminUpdateDeviceStatusOutput,
            smithy_http::result::SdkError<crate::error::AdminUpdateDeviceStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The device key.</p>
        pub fn device_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.device_key(input);
            self
        }
        pub fn set_device_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_device_key(input);
            self
        }
        /// <p>The status indicating whether a device has been remembered or not.</p>
        pub fn device_remembered_status(
            mut self,
            input: crate::model::DeviceRememberedStatusType,
        ) -> Self {
            self.inner = self.inner.device_remembered_status(input);
            self
        }
        pub fn set_device_remembered_status(
            mut self,
            input: std::option::Option<crate::model::DeviceRememberedStatusType>,
        ) -> Self {
            self.inner = self.inner.set_device_remembered_status(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminUpdateUserAttributes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_update_user_attributes_input::Builder,
    }
    impl<C> AdminUpdateUserAttributes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminUpdateUserAttributesOutput,
            smithy_http::result::SdkError<crate::error::AdminUpdateUserAttributesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to update user attributes.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name of the user for whom you want to update user attributes.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>An array of name-value pairs representing user attributes.</p>
        /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
        /// attribute name.</p>
        pub fn user_attributes(mut self, inp: impl Into<crate::model::AttributeType>) -> Self {
            self.inner = self.inner.user_attributes(inp);
            self
        }
        pub fn set_user_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_user_attributes(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the AdminUpdateUserAttributes API action, Amazon Cognito invokes the
        /// function that is assigned to the <i>custom message</i> trigger. When
        /// Amazon Cognito invokes this function, it passes a JSON payload, which the function
        /// receives as input. This payload contains a <code>clientMetadata</code> attribute, which
        /// provides the data that you assigned to the ClientMetadata parameter in your
        /// AdminUpdateUserAttributes request. In your function code in AWS Lambda, you can process
        /// the <code>clientMetadata</code> value to enhance your workflow for your specific
        /// needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AdminUserGlobalSignOut<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::admin_user_global_sign_out_input::Builder,
    }
    impl<C> AdminUserGlobalSignOut<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AdminUserGlobalSignOutOutput,
            smithy_http::result::SdkError<crate::error::AdminUserGlobalSignOutError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user name.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct AssociateSoftwareToken<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::associate_software_token_input::Builder,
    }
    impl<C> AssociateSoftwareToken<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::AssociateSoftwareTokenOutput,
            smithy_http::result::SdkError<crate::error::AssociateSoftwareTokenError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>The session which should be passed both ways in challenge-response calls to the
        /// service. This allows authentication of the user as part of the MFA setup process.</p>
        pub fn session(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session(input);
            self
        }
        pub fn set_session(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_session(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ChangePassword<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::change_password_input::Builder,
    }
    impl<C> ChangePassword<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ChangePasswordOutput,
            smithy_http::result::SdkError<crate::error::ChangePasswordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The old password.</p>
        pub fn previous_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.previous_password(input);
            self
        }
        pub fn set_previous_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_previous_password(input);
            self
        }
        /// <p>The new password.</p>
        pub fn proposed_password(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.proposed_password(input);
            self
        }
        pub fn set_proposed_password(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_proposed_password(input);
            self
        }
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ConfirmDevice<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::confirm_device_input::Builder,
    }
    impl<C> ConfirmDevice<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ConfirmDeviceOutput,
            smithy_http::result::SdkError<crate::error::ConfirmDeviceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>The device key.</p>
        pub fn device_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.device_key(input);
            self
        }
        pub fn set_device_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_device_key(input);
            self
        }
        /// <p>The configuration of the device secret verifier.</p>
        pub fn device_secret_verifier_config(
            mut self,
            input: crate::model::DeviceSecretVerifierConfigType,
        ) -> Self {
            self.inner = self.inner.device_secret_verifier_config(input);
            self
        }
        pub fn set_device_secret_verifier_config(
            mut self,
            input: std::option::Option<crate::model::DeviceSecretVerifierConfigType>,
        ) -> Self {
            self.inner = self.inner.set_device_secret_verifier_config(input);
            self
        }
        /// <p>The device name.</p>
        pub fn device_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.device_name(input);
            self
        }
        pub fn set_device_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_device_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ConfirmForgotPassword<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::confirm_forgot_password_input::Builder,
    }
    impl<C> ConfirmForgotPassword<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ConfirmForgotPasswordOutput,
            smithy_http::result::SdkError<crate::error::ConfirmForgotPasswordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The app client ID of the app associated with the user pool.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
        /// user pool client and username plus the client ID in the message.</p>
        pub fn secret_hash(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_hash(input);
            self
        }
        pub fn set_secret_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_hash(input);
            self
        }
        /// <p>The user name of the user for whom you want to enter a code to retrieve a forgotten
        /// password.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The confirmation code sent by a user's request to retrieve a forgotten password. For
        /// more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html">ForgotPassword</a>.</p>
        pub fn confirmation_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.confirmation_code(input);
            self
        }
        pub fn set_confirmation_code(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_confirmation_code(input);
            self
        }
        /// <p>The password sent by a user's request to retrieve a forgotten password.</p>
        pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.password(input);
            self
        }
        pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_password(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for
        /// <code>ConfirmForgotPassword</code> calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn user_context_data(mut self, input: crate::model::UserContextDataType) -> Self {
            self.inner = self.inner.user_context_data(input);
            self
        }
        pub fn set_user_context_data(
            mut self,
            input: std::option::Option<crate::model::UserContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_user_context_data(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function
        /// that is assigned to the <i>post confirmation</i> trigger. When Amazon
        /// Cognito invokes this function, it passes a JSON payload, which the function receives as
        /// input. This payload contains a <code>clientMetadata</code> attribute, which provides the
        /// data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword
        /// request. In your function code in AWS Lambda, you can process the
        /// <code>clientMetadata</code> value to enhance your workflow for your specific
        /// needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ConfirmSignUp<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::confirm_sign_up_input::Builder,
    }
    impl<C> ConfirmSignUp<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ConfirmSignUpOutput,
            smithy_http::result::SdkError<crate::error::ConfirmSignUpError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the app client associated with the user pool.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
        /// user pool client and username plus the client ID in the message.</p>
        pub fn secret_hash(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_hash(input);
            self
        }
        pub fn set_secret_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_hash(input);
            self
        }
        /// <p>The user name of the user whose registration you wish to confirm.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The confirmation code sent by a user's request to confirm registration.</p>
        pub fn confirmation_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.confirmation_code(input);
            self
        }
        pub fn set_confirmation_code(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_confirmation_code(input);
            self
        }
        /// <p>Boolean to be specified to force user confirmation irrespective of existing alias. By
        /// default set to <code>False</code>. If this parameter is set to <code>True</code> and the
        /// phone number/email used for sign up confirmation already exists as an alias with a
        /// different user, the API call will migrate the alias from the previous user to the newly
        /// created user being confirmed. If set to <code>False</code>, the API will throw an
        /// <b>AliasExistsException</b> error.</p>
        pub fn force_alias_creation(mut self, input: bool) -> Self {
            self.inner = self.inner.force_alias_creation(input);
            self
        }
        pub fn set_force_alias_creation(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_force_alias_creation(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for
        /// <code>ConfirmSignUp</code> calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn user_context_data(mut self, input: crate::model::UserContextDataType) -> Self {
            self.inner = self.inner.user_context_data(input);
            self
        }
        pub fn set_user_context_data(
            mut self,
            input: std::option::Option<crate::model::UserContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_user_context_data(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the ConfirmSignUp API action, Amazon Cognito invokes the function that is
        /// assigned to the <i>post confirmation</i> trigger. When Amazon Cognito
        /// invokes this function, it passes a JSON payload, which the function receives as input.
        /// This payload contains a <code>clientMetadata</code> attribute, which provides the data
        /// that you assigned to the ClientMetadata parameter in your ConfirmSignUp request. In your
        /// function code in AWS Lambda, you can process the <code>clientMetadata</code> value to
        /// enhance your workflow for your specific needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateGroup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_group_input::Builder,
    }
    impl<C> CreateGroup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateGroupOutput,
            smithy_http::result::SdkError<crate::error::CreateGroupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the group. Must be unique.</p>
        pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_name(input);
            self
        }
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_name(input);
            self
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>A string containing the description of the group.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The role ARN for the group.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(input);
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(input);
            self
        }
        /// <p>A nonnegative integer value that specifies the precedence of this group relative to
        /// the other groups that a user can belong to in the user pool. Zero is the highest
        /// precedence value. Groups with lower <code>Precedence</code> values take precedence over
        /// groups with higher or null <code>Precedence</code> values. If a user belongs to two or
        /// more groups, it is the group with the lowest precedence value whose role ARN will be
        /// used in the <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in
        /// the user's tokens.</p>
        /// <p>Two groups can have the same <code>Precedence</code> value. If this happens, neither
        /// group takes precedence over the other. If two groups with the same
        /// <code>Precedence</code> have the same role ARN, that role is used in the
        /// <code>cognito:preferred_role</code> claim in tokens for users in each group. If the
        /// two groups have different role ARNs, the <code>cognito:preferred_role</code> claim is
        /// not set in users' tokens.</p>
        /// <p>The default <code>Precedence</code> value is null.</p>
        pub fn precedence(mut self, input: i32) -> Self {
            self.inner = self.inner.precedence(input);
            self
        }
        pub fn set_precedence(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_precedence(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateIdentityProvider<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_identity_provider_input::Builder,
    }
    impl<C> CreateIdentityProvider<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateIdentityProviderOutput,
            smithy_http::result::SdkError<crate::error::CreateIdentityProviderError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The identity provider name.</p>
        pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(input);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>The identity provider type.</p>
        pub fn provider_type(mut self, input: crate::model::IdentityProviderTypeType) -> Self {
            self.inner = self.inner.provider_type(input);
            self
        }
        pub fn set_provider_type(
            mut self,
            input: std::option::Option<crate::model::IdentityProviderTypeType>,
        ) -> Self {
            self.inner = self.inner.set_provider_type(input);
            self
        }
        /// <p>The identity provider details. The following list describes the provider detail keys
        /// for each identity provider type.</p>
        /// <ul>
        /// <li>
        /// <p>For Google and Login with Amazon:</p>
        /// <ul>
        /// <li>
        /// <p>client_id</p>
        /// </li>
        /// <li>
        /// <p>client_secret</p>
        /// </li>
        /// <li>
        /// <p>authorize_scopes</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>For Facebook:</p>
        /// <ul>
        /// <li>
        /// <p>client_id</p>
        /// </li>
        /// <li>
        /// <p>client_secret</p>
        /// </li>
        /// <li>
        /// <p>authorize_scopes</p>
        /// </li>
        /// <li>
        /// <p>api_version</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>For Sign in with Apple:</p>
        /// <ul>
        /// <li>
        /// <p>client_id</p>
        /// </li>
        /// <li>
        /// <p>team_id</p>
        /// </li>
        /// <li>
        /// <p>key_id</p>
        /// </li>
        /// <li>
        /// <p>private_key</p>
        /// </li>
        /// <li>
        /// <p>authorize_scopes</p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>For OIDC providers:</p>
        /// <ul>
        /// <li>
        /// <p>client_id</p>
        /// </li>
        /// <li>
        /// <p>client_secret</p>
        /// </li>
        /// <li>
        /// <p>attributes_request_method</p>
        /// </li>
        /// <li>
        /// <p>oidc_issuer</p>
        /// </li>
        /// <li>
        /// <p>authorize_scopes</p>
        /// </li>
        /// <li>
        /// <p>authorize_url <i>if not available from discovery URL specified
        /// by oidc_issuer key</i>
        /// </p>
        /// </li>
        /// <li>
        /// <p>token_url <i>if not available from discovery URL specified by
        /// oidc_issuer key</i>
        /// </p>
        /// </li>
        /// <li>
        /// <p>attributes_url <i>if not available from discovery URL specified
        /// by oidc_issuer key</i>
        /// </p>
        /// </li>
        /// <li>
        /// <p>jwks_uri <i>if not available from discovery URL specified by
        /// oidc_issuer key</i>
        /// </p>
        /// </li>
        /// </ul>
        /// </li>
        /// <li>
        /// <p>For SAML providers:</p>
        /// <ul>
        /// <li>
        /// <p>MetadataFile OR MetadataURL</p>
        /// </li>
        /// <li>
        /// <p>IDPSignout <i>optional</i>
        /// </p>
        /// </li>
        /// </ul>
        /// </li>
        /// </ul>
        pub fn provider_details(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.provider_details(k, v);
            self
        }
        pub fn set_provider_details(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_provider_details(input);
            self
        }
        /// <p>A mapping of identity provider attributes to standard and custom user pool
        /// attributes.</p>
        pub fn attribute_mapping(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attribute_mapping(k, v);
            self
        }
        pub fn set_attribute_mapping(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attribute_mapping(input);
            self
        }
        /// <p>A list of identity provider identifiers.</p>
        pub fn idp_identifiers(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idp_identifiers(inp);
            self
        }
        pub fn set_idp_identifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_idp_identifiers(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateResourceServer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_resource_server_input::Builder,
    }
    impl<C> CreateResourceServer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateResourceServerOutput,
            smithy_http::result::SdkError<crate::error::CreateResourceServerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>A unique resource server identifier for the resource server. This could be an HTTPS
        /// endpoint where the resource server is located. For example,
        /// <code>https://my-weather-api.example.com</code>.</p>
        pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identifier(input);
            self
        }
        pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identifier(input);
            self
        }
        /// <p>A friendly name for the resource server.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>A list of scopes. Each scope is map, where the keys are <code>name</code> and
        /// <code>description</code>.</p>
        pub fn scopes(mut self, inp: impl Into<crate::model::ResourceServerScopeType>) -> Self {
            self.inner = self.inner.scopes(inp);
            self
        }
        pub fn set_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceServerScopeType>>,
        ) -> Self {
            self.inner = self.inner.set_scopes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateUserImportJob<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_user_import_job_input::Builder,
    }
    impl<C> CreateUserImportJob<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateUserImportJobOutput,
            smithy_http::result::SdkError<crate::error::CreateUserImportJobError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The job name for the user import job.</p>
        pub fn job_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_name(input);
            self
        }
        pub fn set_job_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_name(input);
            self
        }
        /// <p>The user pool ID for the user pool that the users are being imported into.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The role ARN for the Amazon CloudWatch Logging role for the user import job.</p>
        pub fn cloud_watch_logs_role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.cloud_watch_logs_role_arn(input);
            self
        }
        pub fn set_cloud_watch_logs_role_arn(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_cloud_watch_logs_role_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateUserPool<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_user_pool_input::Builder,
    }
    impl<C> CreateUserPool<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateUserPoolOutput,
            smithy_http::result::SdkError<crate::error::CreateUserPoolError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>A string used to name the user pool.</p>
        pub fn pool_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pool_name(input);
            self
        }
        pub fn set_pool_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_pool_name(input);
            self
        }
        /// <p>The policies associated with the new user pool.</p>
        pub fn policies(mut self, input: crate::model::UserPoolPolicyType) -> Self {
            self.inner = self.inner.policies(input);
            self
        }
        pub fn set_policies(
            mut self,
            input: std::option::Option<crate::model::UserPoolPolicyType>,
        ) -> Self {
            self.inner = self.inner.set_policies(input);
            self
        }
        /// <p>The Lambda trigger configuration information for the new user pool.</p>
        /// <note>
        /// <p>In a push model, event sources (such as Amazon S3 and custom applications) need
        /// permission to invoke a function. So you will need to make an extra call to add
        /// permission for these event sources to invoke your Lambda function.</p>
        /// <p></p>
        /// <p>For more information on using the Lambda API to add permission, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html">
        /// AddPermission </a>. </p>
        /// <p>For adding permission using the AWS CLI, see <a href="https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html"> add-permission
        /// </a>.</p>
        /// </note>
        pub fn lambda_config(mut self, input: crate::model::LambdaConfigType) -> Self {
            self.inner = self.inner.lambda_config(input);
            self
        }
        pub fn set_lambda_config(
            mut self,
            input: std::option::Option<crate::model::LambdaConfigType>,
        ) -> Self {
            self.inner = self.inner.set_lambda_config(input);
            self
        }
        /// <p>The attributes to be auto-verified. Possible values: <b>email</b>, <b>phone_number</b>.</p>
        pub fn auto_verified_attributes(
            mut self,
            inp: impl Into<crate::model::VerifiedAttributeType>,
        ) -> Self {
            self.inner = self.inner.auto_verified_attributes(inp);
            self
        }
        pub fn set_auto_verified_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VerifiedAttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_auto_verified_attributes(input);
            self
        }
        /// <p>Attributes supported as an alias for this user pool. Possible values: <b>phone_number</b>, <b>email</b>, or
        /// <b>preferred_username</b>.</p>
        pub fn alias_attributes(
            mut self,
            inp: impl Into<crate::model::AliasAttributeType>,
        ) -> Self {
            self.inner = self.inner.alias_attributes(inp);
            self
        }
        pub fn set_alias_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AliasAttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_alias_attributes(input);
            self
        }
        /// <p>Specifies whether email addresses or phone numbers can be specified as usernames when
        /// a user signs up.</p>
        pub fn username_attributes(
            mut self,
            inp: impl Into<crate::model::UsernameAttributeType>,
        ) -> Self {
            self.inner = self.inner.username_attributes(inp);
            self
        }
        pub fn set_username_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::UsernameAttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_username_attributes(input);
            self
        }
        /// <p>A string representing the SMS verification message.</p>
        pub fn sms_verification_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sms_verification_message(input);
            self
        }
        pub fn set_sms_verification_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sms_verification_message(input);
            self
        }
        /// <p>A string representing the email verification message. EmailVerificationMessage is
        /// allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
        pub fn email_verification_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_verification_message(input);
            self
        }
        pub fn set_email_verification_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_verification_message(input);
            self
        }
        /// <p>A string representing the email verification subject. EmailVerificationSubject is
        /// allowed only if <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount">EmailSendingAccount</a> is DEVELOPER. </p>
        pub fn email_verification_subject(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_verification_subject(input);
            self
        }
        pub fn set_email_verification_subject(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_verification_subject(input);
            self
        }
        /// <p>The template for the verification message that the user sees when the app requests
        /// permission to access the user's information.</p>
        pub fn verification_message_template(
            mut self,
            input: crate::model::VerificationMessageTemplateType,
        ) -> Self {
            self.inner = self.inner.verification_message_template(input);
            self
        }
        pub fn set_verification_message_template(
            mut self,
            input: std::option::Option<crate::model::VerificationMessageTemplateType>,
        ) -> Self {
            self.inner = self.inner.set_verification_message_template(input);
            self
        }
        /// <p>A string representing the SMS authentication message.</p>
        pub fn sms_authentication_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sms_authentication_message(input);
            self
        }
        pub fn set_sms_authentication_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sms_authentication_message(input);
            self
        }
        /// <p>Specifies MFA configuration details.</p>
        pub fn mfa_configuration(mut self, input: crate::model::UserPoolMfaType) -> Self {
            self.inner = self.inner.mfa_configuration(input);
            self
        }
        pub fn set_mfa_configuration(
            mut self,
            input: std::option::Option<crate::model::UserPoolMfaType>,
        ) -> Self {
            self.inner = self.inner.set_mfa_configuration(input);
            self
        }
        /// <p>The device configuration.</p>
        pub fn device_configuration(
            mut self,
            input: crate::model::DeviceConfigurationType,
        ) -> Self {
            self.inner = self.inner.device_configuration(input);
            self
        }
        pub fn set_device_configuration(
            mut self,
            input: std::option::Option<crate::model::DeviceConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_device_configuration(input);
            self
        }
        /// <p>The email configuration.</p>
        pub fn email_configuration(mut self, input: crate::model::EmailConfigurationType) -> Self {
            self.inner = self.inner.email_configuration(input);
            self
        }
        pub fn set_email_configuration(
            mut self,
            input: std::option::Option<crate::model::EmailConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_email_configuration(input);
            self
        }
        /// <p>The SMS configuration.</p>
        pub fn sms_configuration(mut self, input: crate::model::SmsConfigurationType) -> Self {
            self.inner = self.inner.sms_configuration(input);
            self
        }
        pub fn set_sms_configuration(
            mut self,
            input: std::option::Option<crate::model::SmsConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_sms_configuration(input);
            self
        }
        /// <p>The tag keys and values to assign to the user pool. A tag is a label that you can use
        /// to categorize and manage user pools in different ways, such as by purpose, owner,
        /// environment, or other criteria.</p>
        pub fn user_pool_tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.user_pool_tags(k, v);
            self
        }
        pub fn set_user_pool_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_user_pool_tags(input);
            self
        }
        /// <p>The configuration for <code>AdminCreateUser</code> requests.</p>
        pub fn admin_create_user_config(
            mut self,
            input: crate::model::AdminCreateUserConfigType,
        ) -> Self {
            self.inner = self.inner.admin_create_user_config(input);
            self
        }
        pub fn set_admin_create_user_config(
            mut self,
            input: std::option::Option<crate::model::AdminCreateUserConfigType>,
        ) -> Self {
            self.inner = self.inner.set_admin_create_user_config(input);
            self
        }
        /// <p>An array of schema attributes for the new user pool. These attributes can be standard
        /// or custom attributes.</p>
        pub fn schema(mut self, inp: impl Into<crate::model::SchemaAttributeType>) -> Self {
            self.inner = self.inner.schema(inp);
            self
        }
        pub fn set_schema(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::SchemaAttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_schema(input);
            self
        }
        /// <p>Used to enable advanced security risk detection. Set the key
        /// <code>AdvancedSecurityMode</code> to the value "AUDIT".</p>
        pub fn user_pool_add_ons(mut self, input: crate::model::UserPoolAddOnsType) -> Self {
            self.inner = self.inner.user_pool_add_ons(input);
            self
        }
        pub fn set_user_pool_add_ons(
            mut self,
            input: std::option::Option<crate::model::UserPoolAddOnsType>,
        ) -> Self {
            self.inner = self.inner.set_user_pool_add_ons(input);
            self
        }
        /// <p>You can choose to set case sensitivity on the username input for the selected sign-in
        /// option. For example, when this is set to <code>False</code>, users will be able to sign
        /// in using either "username" or "Username". This configuration is immutable once it has
        /// been set. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html">UsernameConfigurationType</a>.</p>
        pub fn username_configuration(
            mut self,
            input: crate::model::UsernameConfigurationType,
        ) -> Self {
            self.inner = self.inner.username_configuration(input);
            self
        }
        pub fn set_username_configuration(
            mut self,
            input: std::option::Option<crate::model::UsernameConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_username_configuration(input);
            self
        }
        /// <p>Use this setting to define which verified available method a user can use to recover
        /// their password when they call <code>ForgotPassword</code>. It allows you to define a
        /// preferred method when a user has more than one method available. With this setting, SMS
        /// does not qualify for a valid password recovery mechanism if the user also has SMS MFA
        /// enabled. In the absence of this setting, Cognito uses the legacy behavior to determine
        /// the recovery method where SMS is preferred over email.</p>
        pub fn account_recovery_setting(
            mut self,
            input: crate::model::AccountRecoverySettingType,
        ) -> Self {
            self.inner = self.inner.account_recovery_setting(input);
            self
        }
        pub fn set_account_recovery_setting(
            mut self,
            input: std::option::Option<crate::model::AccountRecoverySettingType>,
        ) -> Self {
            self.inner = self.inner.set_account_recovery_setting(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateUserPoolClient<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_user_pool_client_input::Builder,
    }
    impl<C> CreateUserPoolClient<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateUserPoolClientOutput,
            smithy_http::result::SdkError<crate::error::CreateUserPoolClientError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to create a user pool client.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The client name for the user pool client you would like to create.</p>
        pub fn client_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_name(input);
            self
        }
        pub fn set_client_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_name(input);
            self
        }
        /// <p>Boolean to specify whether you want to generate a secret for the user pool client
        /// being created.</p>
        pub fn generate_secret(mut self, input: bool) -> Self {
            self.inner = self.inner.generate_secret(input);
            self
        }
        pub fn set_generate_secret(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_generate_secret(input);
            self
        }
        /// <p>The time limit, in days, after which the refresh token is no longer valid and cannot
        /// be used.</p>
        pub fn refresh_token_validity(mut self, input: i32) -> Self {
            self.inner = self.inner.refresh_token_validity(input);
            self
        }
        pub fn set_refresh_token_validity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_refresh_token_validity(input);
            self
        }
        /// <p>The time limit, between 5 minutes and 1 day, after which the access token is no longer
        /// valid and cannot be used. This value will be overridden if you have entered a value in
        /// TokenValidityUnits.</p>
        pub fn access_token_validity(mut self, input: i32) -> Self {
            self.inner = self.inner.access_token_validity(input);
            self
        }
        pub fn set_access_token_validity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_access_token_validity(input);
            self
        }
        /// <p>The time limit, between 5 minutes and 1 day, after which the ID token is no longer
        /// valid and cannot be used. This value will be overridden if you have entered a value in
        /// TokenValidityUnits.</p>
        pub fn id_token_validity(mut self, input: i32) -> Self {
            self.inner = self.inner.id_token_validity(input);
            self
        }
        pub fn set_id_token_validity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_id_token_validity(input);
            self
        }
        /// <p>The units in which the validity times are represented in. Default for RefreshToken is
        /// days, and default for ID and access tokens are hours.</p>
        pub fn token_validity_units(mut self, input: crate::model::TokenValidityUnitsType) -> Self {
            self.inner = self.inner.token_validity_units(input);
            self
        }
        pub fn set_token_validity_units(
            mut self,
            input: std::option::Option<crate::model::TokenValidityUnitsType>,
        ) -> Self {
            self.inner = self.inner.set_token_validity_units(input);
            self
        }
        /// <p>The read attributes.</p>
        pub fn read_attributes(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.read_attributes(inp);
            self
        }
        pub fn set_read_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_read_attributes(input);
            self
        }
        /// <p>The user pool attributes that the app client can write to.</p>
        /// <p>If your app client allows users to sign in through an identity provider, this array
        /// must include all attributes that are mapped to identity provider attributes. Amazon
        /// Cognito updates mapped attributes when users sign in to your application through an
        /// identity provider. If your app client lacks write access to a mapped attribute, Amazon
        /// Cognito throws an error when it attempts to update the attribute. For more information,
        /// see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-specifying-attribute-mapping.html">Specifying Identity Provider Attribute Mappings for Your User
        /// Pool</a>.</p>
        pub fn write_attributes(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.write_attributes(inp);
            self
        }
        pub fn set_write_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_write_attributes(input);
            self
        }
        /// <p>The authentication flows that are supported by the user pool clients. Flow names
        /// without the <code>ALLOW_</code> prefix are deprecated in favor of new names with the
        /// <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix cannot
        /// be used along with values without <code>ALLOW_</code> prefix.</p>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password
        /// authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces
        /// the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow,
        /// Cognito receives the password in the request instead of using the SRP (Secure
        /// Remote Password protocol) protocol to verify passwords.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based
        /// authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based
        /// authentication. In this flow, Cognito receives the password in the request
        /// instead of using the SRP protocol to verify passwords.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP based authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh
        /// tokens.</p>
        /// </li>
        /// </ul>
        pub fn explicit_auth_flows(
            mut self,
            inp: impl Into<crate::model::ExplicitAuthFlowsType>,
        ) -> Self {
            self.inner = self.inner.explicit_auth_flows(inp);
            self
        }
        pub fn set_explicit_auth_flows(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExplicitAuthFlowsType>>,
        ) -> Self {
            self.inner = self.inner.set_explicit_auth_flows(input);
            self
        }
        /// <p>A list of provider names for the identity providers that are supported on this client.
        /// The following are supported: <code>COGNITO</code>, <code>Facebook</code>,
        /// <code>Google</code> and <code>LoginWithAmazon</code>.</p>
        pub fn supported_identity_providers(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.supported_identity_providers(inp);
            self
        }
        pub fn set_supported_identity_providers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_supported_identity_providers(input);
            self
        }
        /// <p>A list of allowed redirect (callback) URLs for the identity providers.</p>
        /// <p>A redirect URI must:</p>
        /// <ul>
        /// <li>
        /// <p>Be an absolute URI.</p>
        /// </li>
        /// <li>
        /// <p>Be registered with the authorization server.</p>
        /// </li>
        /// <li>
        /// <p>Not include a fragment component.</p>
        /// </li>
        /// </ul>
        /// <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
        /// Redirection Endpoint</a>.</p>
        /// <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing
        /// purposes only.</p>
        /// <p>App callback URLs such as myapp://example are also supported.</p>
        pub fn callback_ur_ls(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.callback_ur_ls(inp);
            self
        }
        pub fn set_callback_ur_ls(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_callback_ur_ls(input);
            self
        }
        /// <p>A list of allowed logout URLs for the identity providers.</p>
        pub fn logout_ur_ls(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.logout_ur_ls(inp);
            self
        }
        pub fn set_logout_ur_ls(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_logout_ur_ls(input);
            self
        }
        /// <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>
        /// <p>A redirect URI must:</p>
        /// <ul>
        /// <li>
        /// <p>Be an absolute URI.</p>
        /// </li>
        /// <li>
        /// <p>Be registered with the authorization server.</p>
        /// </li>
        /// <li>
        /// <p>Not include a fragment component.</p>
        /// </li>
        /// </ul>
        /// <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
        /// Redirection Endpoint</a>.</p>
        /// <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing
        /// purposes only.</p>
        /// <p>App callback URLs such as myapp://example are also supported.</p>
        pub fn default_redirect_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_redirect_uri(input);
            self
        }
        pub fn set_default_redirect_uri(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_redirect_uri(input);
            self
        }
        /// <p>The allowed OAuth flows.</p>
        /// <p>Set to <code>code</code> to initiate a code grant flow, which provides an
        /// authorization code as the response. This code can be exchanged for access tokens with
        /// the token endpoint.</p>
        /// <p>Set to <code>implicit</code> to specify that the client should get the access token
        /// (and, optionally, ID token, based on scopes) directly.</p>
        /// <p>Set to <code>client_credentials</code> to specify that the client should get the
        /// access token (and, optionally, ID token, based on scopes) from the token endpoint using
        /// a combination of client and client_secret.</p>
        pub fn allowed_o_auth_flows(mut self, inp: impl Into<crate::model::OAuthFlowType>) -> Self {
            self.inner = self.inner.allowed_o_auth_flows(inp);
            self
        }
        pub fn set_allowed_o_auth_flows(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OAuthFlowType>>,
        ) -> Self {
            self.inner = self.inner.set_allowed_o_auth_flows(input);
            self
        }
        /// <p>The allowed OAuth scopes. Possible values provided by OAuth are: <code>phone</code>,
        /// <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values
        /// provided by AWS are: <code>aws.cognito.signin.user.admin</code>. Custom scopes created
        /// in Resource Servers are also supported.</p>
        pub fn allowed_o_auth_scopes(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.allowed_o_auth_scopes(inp);
            self
        }
        pub fn set_allowed_o_auth_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_allowed_o_auth_scopes(input);
            self
        }
        /// <p>Set to true if the client is allowed to follow the OAuth protocol when interacting
        /// with Cognito user pools.</p>
        pub fn allowed_o_auth_flows_user_pool_client(mut self, input: bool) -> Self {
            self.inner = self.inner.allowed_o_auth_flows_user_pool_client(input);
            self
        }
        pub fn set_allowed_o_auth_flows_user_pool_client(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.inner = self.inner.set_allowed_o_auth_flows_user_pool_client(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics configuration for collecting metrics for this user
        /// pool.</p>
        /// <note>
        /// <p>In regions where Pinpoint is not available, Cognito User Pools only supports
        /// sending events to Amazon Pinpoint projects in us-east-1. In regions where Pinpoint
        /// is available, Cognito User Pools will support sending events to Amazon Pinpoint
        /// projects within that same region. </p>
        /// </note>
        pub fn analytics_configuration(
            mut self,
            input: crate::model::AnalyticsConfigurationType,
        ) -> Self {
            self.inner = self.inner.analytics_configuration(input);
            self
        }
        pub fn set_analytics_configuration(
            mut self,
            input: std::option::Option<crate::model::AnalyticsConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_configuration(input);
            self
        }
        /// <p>Use this setting to choose which errors and responses are returned by Cognito APIs
        /// during authentication, account confirmation, and password recovery when the user does
        /// not exist in the user pool. When set to <code>ENABLED</code> and the user does not
        /// exist, authentication returns an error indicating either the username or password was
        /// incorrect, and account confirmation and password recovery return a response indicating a
        /// code was sent to a simulated destination. When set to <code>LEGACY</code>, those APIs
        /// will return a <code>UserNotFoundException</code> exception if the user does not exist in
        /// the user pool.</p>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ENABLED</code> - This prevents user existence-related errors.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>LEGACY</code> - This represents the old behavior of Cognito where user
        /// existence related errors are not prevented.</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>After February 15th 2020, the value of <code>PreventUserExistenceErrors</code>
        /// will default to <code>ENABLED</code> for newly created user pool clients if no value
        /// is provided.</p>
        /// </note>
        pub fn prevent_user_existence_errors(
            mut self,
            input: crate::model::PreventUserExistenceErrorTypes,
        ) -> Self {
            self.inner = self.inner.prevent_user_existence_errors(input);
            self
        }
        pub fn set_prevent_user_existence_errors(
            mut self,
            input: std::option::Option<crate::model::PreventUserExistenceErrorTypes>,
        ) -> Self {
            self.inner = self.inner.set_prevent_user_existence_errors(input);
            self
        }
        /// <p>Enables or disables token revocation. For more information
        /// about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
        /// <p>If you don't include this parameter, token revocation is automatically enabled for the new user pool client.</p>
        pub fn enable_token_revocation(mut self, input: bool) -> Self {
            self.inner = self.inner.enable_token_revocation(input);
            self
        }
        pub fn set_enable_token_revocation(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_token_revocation(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct CreateUserPoolDomain<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::create_user_pool_domain_input::Builder,
    }
    impl<C> CreateUserPoolDomain<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::CreateUserPoolDomainOutput,
            smithy_http::result::SdkError<crate::error::CreateUserPoolDomainError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The domain string.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain(input);
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain(input);
            self
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The configuration for a custom domain that hosts the sign-up and sign-in webpages for
        /// your application.</p>
        /// <p>Provide this parameter only if you want to use a custom domain for your user pool.
        /// Otherwise, you can exclude this parameter and use the Amazon Cognito hosted domain
        /// instead.</p>
        /// <p>For more information about the hosted domain and custom domains, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html">Configuring a User Pool Domain</a>.</p>
        pub fn custom_domain_config(mut self, input: crate::model::CustomDomainConfigType) -> Self {
            self.inner = self.inner.custom_domain_config(input);
            self
        }
        pub fn set_custom_domain_config(
            mut self,
            input: std::option::Option<crate::model::CustomDomainConfigType>,
        ) -> Self {
            self.inner = self.inner.set_custom_domain_config(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteGroup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_group_input::Builder,
    }
    impl<C> DeleteGroup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteGroupOutput,
            smithy_http::result::SdkError<crate::error::DeleteGroupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the group.</p>
        pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_name(input);
            self
        }
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_name(input);
            self
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteIdentityProvider<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_identity_provider_input::Builder,
    }
    impl<C> DeleteIdentityProvider<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteIdentityProviderOutput,
            smithy_http::result::SdkError<crate::error::DeleteIdentityProviderError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The identity provider name.</p>
        pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(input);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteResourceServer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_resource_server_input::Builder,
    }
    impl<C> DeleteResourceServer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteResourceServerOutput,
            smithy_http::result::SdkError<crate::error::DeleteResourceServerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool that hosts the resource server.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The identifier for the resource server.</p>
        pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identifier(input);
            self
        }
        pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identifier(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_user_input::Builder,
    }
    impl<C> DeleteUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteUserOutput,
            smithy_http::result::SdkError<crate::error::DeleteUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token from a request to delete a user.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteUserAttributes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_user_attributes_input::Builder,
    }
    impl<C> DeleteUserAttributes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteUserAttributesOutput,
            smithy_http::result::SdkError<crate::error::DeleteUserAttributesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An array of strings representing the user attribute names you wish to delete.</p>
        /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
        /// attribute name.</p>
        pub fn user_attribute_names(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_attribute_names(inp);
            self
        }
        pub fn set_user_attribute_names(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_user_attribute_names(input);
            self
        }
        /// <p>The access token used in the request to delete user attributes.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteUserPool<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_user_pool_input::Builder,
    }
    impl<C> DeleteUserPool<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteUserPoolOutput,
            smithy_http::result::SdkError<crate::error::DeleteUserPoolError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool you want to delete.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteUserPoolClient<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_user_pool_client_input::Builder,
    }
    impl<C> DeleteUserPoolClient<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteUserPoolClientOutput,
            smithy_http::result::SdkError<crate::error::DeleteUserPoolClientError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to delete the client.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The app client ID of the app associated with the user pool.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DeleteUserPoolDomain<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::delete_user_pool_domain_input::Builder,
    }
    impl<C> DeleteUserPoolDomain<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DeleteUserPoolDomainOutput,
            smithy_http::result::SdkError<crate::error::DeleteUserPoolDomainError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The domain string.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain(input);
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain(input);
            self
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeIdentityProvider<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_identity_provider_input::Builder,
    }
    impl<C> DescribeIdentityProvider<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeIdentityProviderOutput,
            smithy_http::result::SdkError<crate::error::DescribeIdentityProviderError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The identity provider name.</p>
        pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(input);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeResourceServer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_resource_server_input::Builder,
    }
    impl<C> DescribeResourceServer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeResourceServerOutput,
            smithy_http::result::SdkError<crate::error::DescribeResourceServerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool that hosts the resource server.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The identifier for the resource server</p>
        pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identifier(input);
            self
        }
        pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identifier(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeRiskConfiguration<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_risk_configuration_input::Builder,
    }
    impl<C> DescribeRiskConfiguration<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeRiskConfigurationOutput,
            smithy_http::result::SdkError<crate::error::DescribeRiskConfigurationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The app client ID.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeUserImportJob<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_user_import_job_input::Builder,
    }
    impl<C> DescribeUserImportJob<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeUserImportJobOutput,
            smithy_http::result::SdkError<crate::error::DescribeUserImportJobError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool that the users are being imported into.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The job ID for the user import job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input);
            self
        }
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeUserPool<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_user_pool_input::Builder,
    }
    impl<C> DescribeUserPool<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeUserPoolOutput,
            smithy_http::result::SdkError<crate::error::DescribeUserPoolError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool you want to describe.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeUserPoolClient<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_user_pool_client_input::Builder,
    }
    impl<C> DescribeUserPoolClient<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeUserPoolClientOutput,
            smithy_http::result::SdkError<crate::error::DescribeUserPoolClientError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool you want to describe.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The app client ID of the app associated with the user pool.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct DescribeUserPoolDomain<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::describe_user_pool_domain_input::Builder,
    }
    impl<C> DescribeUserPoolDomain<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::DescribeUserPoolDomainOutput,
            smithy_http::result::SdkError<crate::error::DescribeUserPoolDomainError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The domain string.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain(input);
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ForgetDevice<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::forget_device_input::Builder,
    }
    impl<C> ForgetDevice<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ForgetDeviceOutput,
            smithy_http::result::SdkError<crate::error::ForgetDeviceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token for the forgotten device request.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>The device key.</p>
        pub fn device_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.device_key(input);
            self
        }
        pub fn set_device_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_device_key(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ForgotPassword<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::forgot_password_input::Builder,
    }
    impl<C> ForgotPassword<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ForgotPasswordOutput,
            smithy_http::result::SdkError<crate::error::ForgotPasswordError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the client associated with the user pool.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
        /// user pool client and username plus the client ID in the message.</p>
        pub fn secret_hash(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_hash(input);
            self
        }
        pub fn set_secret_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_hash(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn user_context_data(mut self, input: crate::model::UserContextDataType) -> Self {
            self.inner = self.inner.user_context_data(input);
            self
        }
        pub fn set_user_context_data(
            mut self,
            input: std::option::Option<crate::model::UserContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_user_context_data(input);
            self
        }
        /// <p>The user name of the user for whom you want to enter a code to reset a forgotten
        /// password.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for
        /// <code>ForgotPassword</code> calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the ForgotPassword API action, Amazon Cognito invokes any functions that
        /// are assigned to the following triggers: <i>pre sign-up</i>,
        /// <i>custom message</i>, and <i>user migration</i>. When
        /// Amazon Cognito invokes any of these functions, it passes a JSON payload, which the
        /// function receives as input. This payload contains a <code>clientMetadata</code>
        /// attribute, which provides the data that you assigned to the ClientMetadata parameter in
        /// your ForgotPassword request. In your function code in AWS Lambda, you can process the
        /// <code>clientMetadata</code> value to enhance your workflow for your specific
        /// needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetCSVHeader<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_csv_header_input::Builder,
    }
    impl<C> GetCSVHeader<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetCsvHeaderOutput,
            smithy_http::result::SdkError<crate::error::GetCSVHeaderError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool that the users are to be imported into.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetDevice<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_device_input::Builder,
    }
    impl<C> GetDevice<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetDeviceOutput,
            smithy_http::result::SdkError<crate::error::GetDeviceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The device key.</p>
        pub fn device_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.device_key(input);
            self
        }
        pub fn set_device_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_device_key(input);
            self
        }
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetGroup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_group_input::Builder,
    }
    impl<C> GetGroup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetGroupOutput,
            smithy_http::result::SdkError<crate::error::GetGroupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the group.</p>
        pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_name(input);
            self
        }
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_name(input);
            self
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetIdentityProviderByIdentifier<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_identity_provider_by_identifier_input::Builder,
    }
    impl<C> GetIdentityProviderByIdentifier<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetIdentityProviderByIdentifierOutput,
            smithy_http::result::SdkError<crate::error::GetIdentityProviderByIdentifierError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The identity provider ID.</p>
        pub fn idp_identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idp_identifier(input);
            self
        }
        pub fn set_idp_identifier(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_idp_identifier(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetSigningCertificate<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_signing_certificate_input::Builder,
    }
    impl<C> GetSigningCertificate<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetSigningCertificateOutput,
            smithy_http::result::SdkError<crate::error::GetSigningCertificateError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetUICustomization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_ui_customization_input::Builder,
    }
    impl<C> GetUICustomization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetUiCustomizationOutput,
            smithy_http::result::SdkError<crate::error::GetUICustomizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The client ID for the client app.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetUser<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_user_input::Builder,
    }
    impl<C> GetUser<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetUserOutput,
            smithy_http::result::SdkError<crate::error::GetUserError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token returned by the server response to get information about the
        /// user.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetUserAttributeVerificationCode<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_user_attribute_verification_code_input::Builder,
    }
    impl<C> GetUserAttributeVerificationCode<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetUserAttributeVerificationCodeOutput,
            smithy_http::result::SdkError<crate::error::GetUserAttributeVerificationCodeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token returned by the server response to get the user attribute
        /// verification code.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>The attribute name returned by the server response to get the user attribute
        /// verification code.</p>
        pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attribute_name(input);
            self
        }
        pub fn set_attribute_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attribute_name(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the GetUserAttributeVerificationCode API action, Amazon Cognito invokes the
        /// function that is assigned to the <i>custom message</i> trigger. When
        /// Amazon Cognito invokes this function, it passes a JSON payload, which the function
        /// receives as input. This payload contains a <code>clientMetadata</code> attribute, which
        /// provides the data that you assigned to the ClientMetadata parameter in your
        /// GetUserAttributeVerificationCode request. In your function code in AWS Lambda, you can
        /// process the <code>clientMetadata</code> value to enhance your workflow for your specific
        /// needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GetUserPoolMfaConfig<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::get_user_pool_mfa_config_input::Builder,
    }
    impl<C> GetUserPoolMfaConfig<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GetUserPoolMfaConfigOutput,
            smithy_http::result::SdkError<crate::error::GetUserPoolMfaConfigError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct GlobalSignOut<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::global_sign_out_input::Builder,
    }
    impl<C> GlobalSignOut<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::GlobalSignOutOutput,
            smithy_http::result::SdkError<crate::error::GlobalSignOutError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct InitiateAuth<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::initiate_auth_input::Builder,
    }
    impl<C> InitiateAuth<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::InitiateAuthOutput,
            smithy_http::result::SdkError<crate::error::InitiateAuthError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The authentication flow for this call to execute. The API action will depend on this
        /// value. For example: </p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>REFRESH_TOKEN_AUTH</code> will take in a valid refresh token and return
        /// new tokens.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>USER_SRP_AUTH</code> will take in <code>USERNAME</code> and
        /// <code>SRP_A</code> and return the SRP variables to be used for next
        /// challenge execution.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>USER_PASSWORD_AUTH</code> will take in <code>USERNAME</code> and
        /// <code>PASSWORD</code> and return the next challenge or tokens.</p>
        /// </li>
        /// </ul>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>USER_SRP_AUTH</code>: Authentication flow for the Secure Remote Password
        /// (SRP) protocol.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>REFRESH_TOKEN_AUTH</code>/<code>REFRESH_TOKEN</code>: Authentication
        /// flow for refreshing the access token and ID token by supplying a valid refresh
        /// token.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>CUSTOM_AUTH</code>: Custom authentication flow.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>USER_PASSWORD_AUTH</code>: Non-SRP authentication flow; USERNAME and
        /// PASSWORD are passed directly. If a user migration Lambda trigger is set, this
        /// flow will invoke the user migration Lambda if the USERNAME is not found in the
        /// user pool. </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ADMIN_USER_PASSWORD_AUTH</code>: Admin-based user password
        /// authentication. This replaces the <code>ADMIN_NO_SRP_AUTH</code> authentication
        /// flow. In this flow, Cognito receives the password in the request instead of
        /// using the SRP process to verify passwords.</p>
        /// </li>
        /// </ul>
        /// <p>
        /// <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>
        pub fn auth_flow(mut self, input: crate::model::AuthFlowType) -> Self {
            self.inner = self.inner.auth_flow(input);
            self
        }
        pub fn set_auth_flow(
            mut self,
            input: std::option::Option<crate::model::AuthFlowType>,
        ) -> Self {
            self.inner = self.inner.set_auth_flow(input);
            self
        }
        /// <p>The authentication parameters. These are inputs corresponding to the
        /// <code>AuthFlow</code> that you are invoking. The required values depend on the value
        /// of <code>AuthFlow</code>:</p>
        /// <ul>
        /// <li>
        /// <p>For <code>USER_SRP_AUTH</code>: <code>USERNAME</code> (required),
        /// <code>SRP_A</code> (required), <code>SECRET_HASH</code> (required if the app
        /// client is configured with a client secret), <code>DEVICE_KEY</code>.</p>
        /// </li>
        /// <li>
        /// <p>For <code>REFRESH_TOKEN_AUTH/REFRESH_TOKEN</code>: <code>REFRESH_TOKEN</code>
        /// (required), <code>SECRET_HASH</code> (required if the app client is configured
        /// with a client secret), <code>DEVICE_KEY</code>.</p>
        /// </li>
        /// <li>
        /// <p>For <code>CUSTOM_AUTH</code>: <code>USERNAME</code> (required),
        /// <code>SECRET_HASH</code> (if app client is configured with client secret),
        /// <code>DEVICE_KEY</code>. To start the authentication flow with password
        /// verification, include <code>ChallengeName: SRP_A</code> and <code>SRP_A: (The
        /// SRP_A Value)</code>.</p>
        /// </li>
        /// </ul>
        pub fn auth_parameters(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.auth_parameters(k, v);
            self
        }
        pub fn set_auth_parameters(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_auth_parameters(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for certain custom
        /// workflows that this action triggers.</p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the InitiateAuth API action, Amazon Cognito invokes the AWS Lambda
        /// functions that are specified for various triggers. The ClientMetadata value is passed as
        /// input to the functions for only the following triggers:</p>
        /// <ul>
        /// <li>
        /// <p>Pre signup</p>
        /// </li>
        /// <li>
        /// <p>Pre authentication</p>
        /// </li>
        /// <li>
        /// <p>User migration</p>
        /// </li>
        /// </ul>
        /// <p>When Amazon Cognito invokes the functions for these triggers, it passes a JSON
        /// payload, which the function receives as input. This payload contains a
        /// <code>validationData</code> attribute, which provides the data that you assigned to
        /// the ClientMetadata parameter in your InitiateAuth request. In your function code in AWS
        /// Lambda, you can process the <code>validationData</code> value to enhance your workflow
        /// for your specific needs.</p>
        /// <p>When you use the InitiateAuth API action, Amazon Cognito also invokes the functions
        /// for the following triggers, but it does not provide the ClientMetadata value as
        /// input:</p>
        /// <ul>
        /// <li>
        /// <p>Post authentication</p>
        /// </li>
        /// <li>
        /// <p>Custom message</p>
        /// </li>
        /// <li>
        /// <p>Pre token generation</p>
        /// </li>
        /// <li>
        /// <p>Create auth challenge</p>
        /// </li>
        /// <li>
        /// <p>Define auth challenge</p>
        /// </li>
        /// <li>
        /// <p>Verify auth challenge</p>
        /// </li>
        /// </ul>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
        /// <p>The app client ID.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for
        /// <code>InitiateAuth</code> calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn user_context_data(mut self, input: crate::model::UserContextDataType) -> Self {
            self.inner = self.inner.user_context_data(input);
            self
        }
        pub fn set_user_context_data(
            mut self,
            input: std::option::Option<crate::model::UserContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_user_context_data(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListDevices<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_devices_input::Builder,
    }
    impl<C> ListDevices<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListDevicesOutput,
            smithy_http::result::SdkError<crate::error::ListDevicesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access tokens for the request to list devices.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>The limit of the device request.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>The pagination token for the list request.</p>
        pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pagination_token(input);
            self
        }
        pub fn set_pagination_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pagination_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListGroups<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_groups_input::Builder,
    }
    impl<C> ListGroups<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListGroupsOutput,
            smithy_http::result::SdkError<crate::error::ListGroupsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The limit of the request to list groups.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>An identifier that was returned from the previous call to this operation, which can be
        /// used to return the next set of items in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListIdentityProviders<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_identity_providers_input::Builder,
    }
    impl<C> ListIdentityProviders<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListIdentityProvidersOutput,
            smithy_http::result::SdkError<crate::error::ListIdentityProvidersError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The maximum number of identity providers to return.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>A pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListResourceServers<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_resource_servers_input::Builder,
    }
    impl<C> ListResourceServers<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListResourceServersOutput,
            smithy_http::result::SdkError<crate::error::ListResourceServersError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The maximum number of resource servers to return.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>A pagination token.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListTagsForResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_tags_for_resource_input::Builder,
    }
    impl<C> ListTagsForResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListTagsForResourceOutput,
            smithy_http::result::SdkError<crate::error::ListTagsForResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListUserImportJobs<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_user_import_jobs_input::Builder,
    }
    impl<C> ListUserImportJobs<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListUserImportJobsOutput,
            smithy_http::result::SdkError<crate::error::ListUserImportJobsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool that the users are being imported into.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The maximum number of import jobs you want the request to return.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>An identifier that was returned from the previous call to
        /// <code>ListUserImportJobs</code>, which can be used to return the next set of import
        /// jobs in the list.</p>
        pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pagination_token(input);
            self
        }
        pub fn set_pagination_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pagination_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListUserPoolClients<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_user_pool_clients_input::Builder,
    }
    impl<C> ListUserPoolClients<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListUserPoolClientsOutput,
            smithy_http::result::SdkError<crate::error::ListUserPoolClientsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to list user pool clients.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The maximum number of results you want the request to return when listing the user
        /// pool clients.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
        /// <p>An identifier that was returned from the previous call to this operation, which can be
        /// used to return the next set of items in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListUserPools<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_user_pools_input::Builder,
    }
    impl<C> ListUserPools<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListUserPoolsOutput,
            smithy_http::result::SdkError<crate::error::ListUserPoolsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An identifier that was returned from the previous call to this operation, which can be
        /// used to return the next set of items in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
        /// <p>The maximum number of results you want the request to return when listing the user
        /// pools.</p>
        pub fn max_results(mut self, input: i32) -> Self {
            self.inner = self.inner.max_results(input);
            self
        }
        pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_max_results(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListUsers<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_users_input::Builder,
    }
    impl<C> ListUsers<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListUsersOutput,
            smithy_http::result::SdkError<crate::error::ListUsersError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool on which the search should be performed.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>An array of strings, where each string is the name of a user attribute to be returned
        /// for each user in the search results. If the array is null, all attributes are
        /// returned.</p>
        pub fn attributes_to_get(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attributes_to_get(inp);
            self
        }
        pub fn set_attributes_to_get(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_attributes_to_get(input);
            self
        }
        /// <p>Maximum number of users to be returned.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>An identifier that was returned from the previous call to this operation, which can be
        /// used to return the next set of items in the list.</p>
        pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.pagination_token(input);
            self
        }
        pub fn set_pagination_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_pagination_token(input);
            self
        }
        /// <p>A filter string of the form "<i>AttributeName</i>
        /// <i>Filter-Type</i> "<i>AttributeValue</i>"". Quotation marks
        /// within the filter string must be escaped using the backslash (\) character. For example,
        /// "<code>family_name</code> = \"Reddy\"".</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <i>AttributeName</i>: The name of the attribute to search for.
        /// You can only search for one attribute at a time.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <i>Filter-Type</i>: For an exact match, use =, for example,
        /// "<code>given_name</code> = \"Jon\"". For a prefix ("starts with") match, use
        /// ^=, for example, "<code>given_name</code> ^= \"Jon\"". </p>
        /// </li>
        /// <li>
        /// <p>
        /// <i>AttributeValue</i>: The attribute value that must be matched
        /// for each user.</p>
        /// </li>
        /// </ul>
        /// <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user
        /// pool.</p>
        /// <p>You can only search for the following standard attributes:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>username</code> (case-sensitive)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>email</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>phone_number</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>name</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>given_name</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>family_name</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>preferred_username</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>status (called <b>Enabled</b> in the Console)
        /// (case-sensitive)</code>
        /// </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>sub</code>
        /// </p>
        /// </li>
        /// </ul>
        /// <p>Custom attributes are not searchable.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api">Searching for Users Using the ListUsers API</a> and <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito
        /// Developer Guide</i>.</p>
        pub fn filter(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.filter(input);
            self
        }
        pub fn set_filter(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_filter(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ListUsersInGroup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::list_users_in_group_input::Builder,
    }
    impl<C> ListUsersInGroup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ListUsersInGroupOutput,
            smithy_http::result::SdkError<crate::error::ListUsersInGroupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The name of the group.</p>
        pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_name(input);
            self
        }
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_name(input);
            self
        }
        /// <p>The limit of the request to list users.</p>
        pub fn limit(mut self, input: i32) -> Self {
            self.inner = self.inner.limit(input);
            self
        }
        pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_limit(input);
            self
        }
        /// <p>An identifier that was returned from the previous call to this operation, which can be
        /// used to return the next set of items in the list.</p>
        pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.next_token(input);
            self
        }
        pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_next_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct ResendConfirmationCode<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::resend_confirmation_code_input::Builder,
    }
    impl<C> ResendConfirmationCode<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::ResendConfirmationCodeOutput,
            smithy_http::result::SdkError<crate::error::ResendConfirmationCodeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the client associated with the user pool.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
        /// user pool client and username plus the client ID in the message.</p>
        pub fn secret_hash(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_hash(input);
            self
        }
        pub fn set_secret_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_hash(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn user_context_data(mut self, input: crate::model::UserContextDataType) -> Self {
            self.inner = self.inner.user_context_data(input);
            self
        }
        pub fn set_user_context_data(
            mut self,
            input: std::option::Option<crate::model::UserContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_user_context_data(input);
            self
        }
        /// <p>The user name of the user to whom you wish to resend a confirmation code.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for
        /// <code>ResendConfirmationCode</code> calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the ResendConfirmationCode API action, Amazon Cognito invokes the function
        /// that is assigned to the <i>custom message</i> trigger. When Amazon Cognito
        /// invokes this function, it passes a JSON payload, which the function receives as input.
        /// This payload contains a <code>clientMetadata</code> attribute, which provides the data
        /// that you assigned to the ClientMetadata parameter in your ResendConfirmationCode
        /// request. In your function code in AWS Lambda, you can process the
        /// <code>clientMetadata</code> value to enhance your workflow for your specific
        /// needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RespondToAuthChallenge<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::respond_to_auth_challenge_input::Builder,
    }
    impl<C> RespondToAuthChallenge<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RespondToAuthChallengeOutput,
            smithy_http::result::SdkError<crate::error::RespondToAuthChallengeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The app client ID.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>The challenge name. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_InitiateAuth.html">InitiateAuth</a>.</p>
        /// <p>
        /// <code>ADMIN_NO_SRP_AUTH</code> is not a valid value.</p>
        pub fn challenge_name(mut self, input: crate::model::ChallengeNameType) -> Self {
            self.inner = self.inner.challenge_name(input);
            self
        }
        pub fn set_challenge_name(
            mut self,
            input: std::option::Option<crate::model::ChallengeNameType>,
        ) -> Self {
            self.inner = self.inner.set_challenge_name(input);
            self
        }
        /// <p>The session which should be passed both ways in challenge-response calls to the
        /// service. If <code>InitiateAuth</code> or <code>RespondToAuthChallenge</code> API call
        /// determines that the caller needs to go through another challenge, they return a session
        /// with other challenge parameters. This session should be passed as it is to the next
        /// <code>RespondToAuthChallenge</code> API call.</p>
        pub fn session(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session(input);
            self
        }
        pub fn set_session(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_session(input);
            self
        }
        /// <p>The challenge responses. These are inputs corresponding to the value of
        /// <code>ChallengeName</code>, for example:</p>
        /// <note>
        /// <p>
        /// <code>SECRET_HASH</code> (if app client is configured with client secret) applies
        /// to all inputs below (including <code>SOFTWARE_TOKEN_MFA</code>).</p>
        /// </note>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>SMS_MFA</code>: <code>SMS_MFA_CODE</code>, <code>USERNAME</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>PASSWORD_VERIFIER</code>: <code>PASSWORD_CLAIM_SIGNATURE</code>,
        /// <code>PASSWORD_CLAIM_SECRET_BLOCK</code>, <code>TIMESTAMP</code>,
        /// <code>USERNAME</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>NEW_PASSWORD_REQUIRED</code>: <code>NEW_PASSWORD</code>, any other
        /// required attributes, <code>USERNAME</code>. </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>SOFTWARE_TOKEN_MFA</code>: <code>USERNAME</code> and
        /// <code>SOFTWARE_TOKEN_MFA_CODE</code> are required attributes.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DEVICE_SRP_AUTH</code> requires <code>USERNAME</code>,
        /// <code>DEVICE_KEY</code>, <code>SRP_A</code> (and
        /// <code>SECRET_HASH</code>).</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>DEVICE_PASSWORD_VERIFIER</code> requires everything that
        /// <code>PASSWORD_VERIFIER</code> requires plus <code>DEVICE_KEY</code>.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>MFA_SETUP</code> requires <code>USERNAME</code>, plus you need to use
        /// the session value returned by <code>VerifySoftwareToken</code> in the
        /// <code>Session</code> parameter.</p>
        /// </li>
        /// </ul>
        pub fn challenge_responses(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.challenge_responses(k, v);
            self
        }
        pub fn set_challenge_responses(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_challenge_responses(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for
        /// <code>RespondToAuthChallenge</code> calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn user_context_data(mut self, input: crate::model::UserContextDataType) -> Self {
            self.inner = self.inner.user_context_data(input);
            self
        }
        pub fn set_user_context_data(
            mut self,
            input: std::option::Option<crate::model::UserContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_user_context_data(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the RespondToAuthChallenge API action, Amazon Cognito invokes any functions
        /// that are assigned to the following triggers: <i>post authentication</i>,
        /// <i>pre token generation</i>, <i>define auth
        /// challenge</i>, <i>create auth challenge</i>, and
        /// <i>verify auth challenge</i>. When Amazon Cognito invokes any of these
        /// functions, it passes a JSON payload, which the function receives as input. This payload
        /// contains a <code>clientMetadata</code> attribute, which provides the data that you
        /// assigned to the ClientMetadata parameter in your RespondToAuthChallenge request. In your
        /// function code in AWS Lambda, you can process the <code>clientMetadata</code> value to
        /// enhance your workflow for your specific needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct RevokeToken<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::revoke_token_input::Builder,
    }
    impl<C> RevokeToken<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::RevokeTokenOutput,
            smithy_http::result::SdkError<crate::error::RevokeTokenError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The token that you want to revoke.</p>
        pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.token(input);
            self
        }
        pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_token(input);
            self
        }
        /// <p>The client ID for the token that you want to revoke.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>The secret for the client ID. This is required only if the client ID has a secret.</p>
        pub fn client_secret(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_secret(input);
            self
        }
        pub fn set_client_secret(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_client_secret(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetRiskConfiguration<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_risk_configuration_input::Builder,
    }
    impl<C> SetRiskConfiguration<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetRiskConfigurationOutput,
            smithy_http::result::SdkError<crate::error::SetRiskConfigurationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID. </p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is
        /// mapped to <code>userPoolId</code>. When the client ID is null, the same risk
        /// configuration is applied to all the clients in the userPool.</p>
        /// <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID is not
        /// null, the user pool configuration is overridden and the risk configuration for the
        /// client is used instead.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>The compromised credentials risk configuration.</p>
        pub fn compromised_credentials_risk_configuration(
            mut self,
            input: crate::model::CompromisedCredentialsRiskConfigurationType,
        ) -> Self {
            self.inner = self.inner.compromised_credentials_risk_configuration(input);
            self
        }
        pub fn set_compromised_credentials_risk_configuration(
            mut self,
            input: std::option::Option<crate::model::CompromisedCredentialsRiskConfigurationType>,
        ) -> Self {
            self.inner = self
                .inner
                .set_compromised_credentials_risk_configuration(input);
            self
        }
        /// <p>The account takeover risk configuration.</p>
        pub fn account_takeover_risk_configuration(
            mut self,
            input: crate::model::AccountTakeoverRiskConfigurationType,
        ) -> Self {
            self.inner = self.inner.account_takeover_risk_configuration(input);
            self
        }
        pub fn set_account_takeover_risk_configuration(
            mut self,
            input: std::option::Option<crate::model::AccountTakeoverRiskConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_account_takeover_risk_configuration(input);
            self
        }
        /// <p>The configuration to override the risk decision.</p>
        pub fn risk_exception_configuration(
            mut self,
            input: crate::model::RiskExceptionConfigurationType,
        ) -> Self {
            self.inner = self.inner.risk_exception_configuration(input);
            self
        }
        pub fn set_risk_exception_configuration(
            mut self,
            input: std::option::Option<crate::model::RiskExceptionConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_risk_exception_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetUICustomization<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_ui_customization_input::Builder,
    }
    impl<C> SetUICustomization<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetUiCustomizationOutput,
            smithy_http::result::SdkError<crate::error::SetUICustomizationError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The client ID for the client app.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>The CSS values in the UI customization.</p>
        pub fn css(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.css(input);
            self
        }
        pub fn set_css(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_css(input);
            self
        }
        /// <p>The uploaded logo image for the UI customization.</p>
        pub fn image_file(mut self, input: smithy_types::Blob) -> Self {
            self.inner = self.inner.image_file(input);
            self
        }
        pub fn set_image_file(mut self, input: std::option::Option<smithy_types::Blob>) -> Self {
            self.inner = self.inner.set_image_file(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetUserMFAPreference<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_user_mfa_preference_input::Builder,
    }
    impl<C> SetUserMFAPreference<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetUserMfaPreferenceOutput,
            smithy_http::result::SdkError<crate::error::SetUserMFAPreferenceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The SMS text message multi-factor authentication (MFA) settings.</p>
        pub fn sms_mfa_settings(mut self, input: crate::model::SmsMfaSettingsType) -> Self {
            self.inner = self.inner.sms_mfa_settings(input);
            self
        }
        pub fn set_sms_mfa_settings(
            mut self,
            input: std::option::Option<crate::model::SmsMfaSettingsType>,
        ) -> Self {
            self.inner = self.inner.set_sms_mfa_settings(input);
            self
        }
        /// <p>The time-based one-time password software token MFA settings.</p>
        pub fn software_token_mfa_settings(
            mut self,
            input: crate::model::SoftwareTokenMfaSettingsType,
        ) -> Self {
            self.inner = self.inner.software_token_mfa_settings(input);
            self
        }
        pub fn set_software_token_mfa_settings(
            mut self,
            input: std::option::Option<crate::model::SoftwareTokenMfaSettingsType>,
        ) -> Self {
            self.inner = self.inner.set_software_token_mfa_settings(input);
            self
        }
        /// <p>The access token for the user.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetUserPoolMfaConfig<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_user_pool_mfa_config_input::Builder,
    }
    impl<C> SetUserPoolMfaConfig<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetUserPoolMfaConfigOutput,
            smithy_http::result::SdkError<crate::error::SetUserPoolMfaConfigError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The SMS text message MFA configuration.</p>
        pub fn sms_mfa_configuration(mut self, input: crate::model::SmsMfaConfigType) -> Self {
            self.inner = self.inner.sms_mfa_configuration(input);
            self
        }
        pub fn set_sms_mfa_configuration(
            mut self,
            input: std::option::Option<crate::model::SmsMfaConfigType>,
        ) -> Self {
            self.inner = self.inner.set_sms_mfa_configuration(input);
            self
        }
        /// <p>The software token MFA configuration.</p>
        pub fn software_token_mfa_configuration(
            mut self,
            input: crate::model::SoftwareTokenMfaConfigType,
        ) -> Self {
            self.inner = self.inner.software_token_mfa_configuration(input);
            self
        }
        pub fn set_software_token_mfa_configuration(
            mut self,
            input: std::option::Option<crate::model::SoftwareTokenMfaConfigType>,
        ) -> Self {
            self.inner = self.inner.set_software_token_mfa_configuration(input);
            self
        }
        /// <p>The MFA configuration. Users who don't have an MFA factor set up won't be able to
        /// sign-in if you set the MfaConfiguration value to ‘ON’. See <a href="cognito/latest/developerguide/user-pool-settings-mfa.html">Adding Multi-Factor
        /// Authentication (MFA) to a User Pool</a> to learn more. Valid values
        /// include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>OFF</code> MFA will not be used for any users.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ON</code> MFA is required for all users to sign in.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>OPTIONAL</code> MFA will be required only for individual users who have
        /// an MFA factor enabled.</p>
        /// </li>
        /// </ul>
        pub fn mfa_configuration(mut self, input: crate::model::UserPoolMfaType) -> Self {
            self.inner = self.inner.mfa_configuration(input);
            self
        }
        pub fn set_mfa_configuration(
            mut self,
            input: std::option::Option<crate::model::UserPoolMfaType>,
        ) -> Self {
            self.inner = self.inner.set_mfa_configuration(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SetUserSettings<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::set_user_settings_input::Builder,
    }
    impl<C> SetUserSettings<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SetUserSettingsOutput,
            smithy_http::result::SdkError<crate::error::SetUserSettingsError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token for the set user settings request.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>You can use this parameter only to set an SMS configuration that uses SMS for
        /// delivery.</p>
        pub fn mfa_options(mut self, inp: impl Into<crate::model::MfaOptionType>) -> Self {
            self.inner = self.inner.mfa_options(inp);
            self
        }
        pub fn set_mfa_options(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::MfaOptionType>>,
        ) -> Self {
            self.inner = self.inner.set_mfa_options(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct SignUp<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::sign_up_input::Builder,
    }
    impl<C> SignUp<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::SignUpOutput,
            smithy_http::result::SdkError<crate::error::SignUpError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The ID of the client associated with the user pool.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a
        /// user pool client and username plus the client ID in the message.</p>
        pub fn secret_hash(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.secret_hash(input);
            self
        }
        pub fn set_secret_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_secret_hash(input);
            self
        }
        /// <p>The user name of the user you wish to register.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The password of the user you wish to register.</p>
        pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.password(input);
            self
        }
        pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_password(input);
            self
        }
        /// <p>An array of name-value pairs representing user attributes.</p>
        /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
        /// attribute name.</p>
        pub fn user_attributes(mut self, inp: impl Into<crate::model::AttributeType>) -> Self {
            self.inner = self.inner.user_attributes(inp);
            self
        }
        pub fn set_user_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_user_attributes(input);
            self
        }
        /// <p>The validation data in the request to register a user.</p>
        pub fn validation_data(mut self, inp: impl Into<crate::model::AttributeType>) -> Self {
            self.inner = self.inner.validation_data(inp);
            self
        }
        pub fn set_validation_data(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_validation_data(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>SignUp</code>
        /// calls.</p>
        pub fn analytics_metadata(mut self, input: crate::model::AnalyticsMetadataType) -> Self {
            self.inner = self.inner.analytics_metadata(input);
            self
        }
        pub fn set_analytics_metadata(
            mut self,
            input: std::option::Option<crate::model::AnalyticsMetadataType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_metadata(input);
            self
        }
        /// <p>Contextual data such as the user's device fingerprint, IP address, or location used
        /// for evaluating the risk of an unexpected event by Amazon Cognito advanced
        /// security.</p>
        pub fn user_context_data(mut self, input: crate::model::UserContextDataType) -> Self {
            self.inner = self.inner.user_context_data(input);
            self
        }
        pub fn set_user_context_data(
            mut self,
            input: std::option::Option<crate::model::UserContextDataType>,
        ) -> Self {
            self.inner = self.inner.set_user_context_data(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the SignUp API action, Amazon Cognito invokes any functions that are
        /// assigned to the following triggers: <i>pre sign-up</i>, <i>custom
        /// message</i>, and <i>post confirmation</i>. When Amazon Cognito
        /// invokes any of these functions, it passes a JSON payload, which the function receives as
        /// input. This payload contains a <code>clientMetadata</code> attribute, which provides the
        /// data that you assigned to the ClientMetadata parameter in your SignUp request. In your
        /// function code in AWS Lambda, you can process the <code>clientMetadata</code> value to
        /// enhance your workflow for your specific needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StartUserImportJob<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::start_user_import_job_input::Builder,
    }
    impl<C> StartUserImportJob<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StartUserImportJobOutput,
            smithy_http::result::SdkError<crate::error::StartUserImportJobError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool that the users are being imported into.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The job ID for the user import job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input);
            self
        }
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct StopUserImportJob<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::stop_user_import_job_input::Builder,
    }
    impl<C> StopUserImportJob<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::StopUserImportJobOutput,
            smithy_http::result::SdkError<crate::error::StopUserImportJobError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool that the users are being imported into.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The job ID for the user import job.</p>
        pub fn job_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.job_id(input);
            self
        }
        pub fn set_job_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_job_id(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct TagResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::tag_resource_input::Builder,
    }
    impl<C> TagResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::TagResourceOutput,
            smithy_http::result::SdkError<crate::error::TagResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the user pool to assign the tags to.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The tags to assign to the user pool.</p>
        pub fn tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.tags(k, v);
            self
        }
        pub fn set_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_tags(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UntagResource<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::untag_resource_input::Builder,
    }
    impl<C> UntagResource<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UntagResourceOutput,
            smithy_http::result::SdkError<crate::error::UntagResourceError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The Amazon Resource Name (ARN) of the user pool that the tags are assigned to.</p>
        pub fn resource_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.resource_arn(input);
            self
        }
        pub fn set_resource_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_resource_arn(input);
            self
        }
        /// <p>The keys of the tags to remove from the user pool.</p>
        pub fn tag_keys(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.tag_keys(inp);
            self
        }
        pub fn set_tag_keys(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_tag_keys(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateAuthEventFeedback<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_auth_event_feedback_input::Builder,
    }
    impl<C> UpdateAuthEventFeedback<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateAuthEventFeedbackOutput,
            smithy_http::result::SdkError<crate::error::UpdateAuthEventFeedbackError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The user pool username.</p>
        pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.username(input);
            self
        }
        pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_username(input);
            self
        }
        /// <p>The event ID.</p>
        pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.event_id(input);
            self
        }
        pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_event_id(input);
            self
        }
        /// <p>The feedback token.</p>
        pub fn feedback_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.feedback_token(input);
            self
        }
        pub fn set_feedback_token(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_feedback_token(input);
            self
        }
        /// <p>The authentication event feedback value.</p>
        pub fn feedback_value(mut self, input: crate::model::FeedbackValueType) -> Self {
            self.inner = self.inner.feedback_value(input);
            self
        }
        pub fn set_feedback_value(
            mut self,
            input: std::option::Option<crate::model::FeedbackValueType>,
        ) -> Self {
            self.inner = self.inner.set_feedback_value(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateDeviceStatus<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_device_status_input::Builder,
    }
    impl<C> UpdateDeviceStatus<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateDeviceStatusOutput,
            smithy_http::result::SdkError<crate::error::UpdateDeviceStatusError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>The device key.</p>
        pub fn device_key(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.device_key(input);
            self
        }
        pub fn set_device_key(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_device_key(input);
            self
        }
        /// <p>The status of whether a device is remembered.</p>
        pub fn device_remembered_status(
            mut self,
            input: crate::model::DeviceRememberedStatusType,
        ) -> Self {
            self.inner = self.inner.device_remembered_status(input);
            self
        }
        pub fn set_device_remembered_status(
            mut self,
            input: std::option::Option<crate::model::DeviceRememberedStatusType>,
        ) -> Self {
            self.inner = self.inner.set_device_remembered_status(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateGroup<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_group_input::Builder,
    }
    impl<C> UpdateGroup<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateGroupOutput,
            smithy_http::result::SdkError<crate::error::UpdateGroupError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The name of the group.</p>
        pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.group_name(input);
            self
        }
        pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_group_name(input);
            self
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>A string containing the new description of the group.</p>
        pub fn description(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.description(input);
            self
        }
        pub fn set_description(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_description(input);
            self
        }
        /// <p>The new role ARN for the group. This is used for setting the
        /// <code>cognito:roles</code> and <code>cognito:preferred_role</code> claims in the
        /// token.</p>
        pub fn role_arn(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.role_arn(input);
            self
        }
        pub fn set_role_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_role_arn(input);
            self
        }
        /// <p>The new precedence value for the group. For more information about this parameter, see
        /// <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_CreateGroup.html">CreateGroup</a>.</p>
        pub fn precedence(mut self, input: i32) -> Self {
            self.inner = self.inner.precedence(input);
            self
        }
        pub fn set_precedence(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_precedence(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateIdentityProvider<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_identity_provider_input::Builder,
    }
    impl<C> UpdateIdentityProvider<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateIdentityProviderOutput,
            smithy_http::result::SdkError<crate::error::UpdateIdentityProviderError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The identity provider name.</p>
        pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.provider_name(input);
            self
        }
        pub fn set_provider_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_provider_name(input);
            self
        }
        /// <p>The identity provider details to be updated, such as <code>MetadataURL</code> and
        /// <code>MetadataFile</code>.</p>
        pub fn provider_details(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.provider_details(k, v);
            self
        }
        pub fn set_provider_details(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_provider_details(input);
            self
        }
        /// <p>The identity provider attribute mapping to be changed.</p>
        pub fn attribute_mapping(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.attribute_mapping(k, v);
            self
        }
        pub fn set_attribute_mapping(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_attribute_mapping(input);
            self
        }
        /// <p>A list of identity provider identifiers.</p>
        pub fn idp_identifiers(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.idp_identifiers(inp);
            self
        }
        pub fn set_idp_identifiers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_idp_identifiers(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateResourceServer<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_resource_server_input::Builder,
    }
    impl<C> UpdateResourceServer<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateResourceServerOutput,
            smithy_http::result::SdkError<crate::error::UpdateResourceServerError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The identifier for the resource server.</p>
        pub fn identifier(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.identifier(input);
            self
        }
        pub fn set_identifier(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_identifier(input);
            self
        }
        /// <p>The name of the resource server.</p>
        pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.name(input);
            self
        }
        pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_name(input);
            self
        }
        /// <p>The scope values to be set for the resource server.</p>
        pub fn scopes(mut self, inp: impl Into<crate::model::ResourceServerScopeType>) -> Self {
            self.inner = self.inner.scopes(inp);
            self
        }
        pub fn set_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ResourceServerScopeType>>,
        ) -> Self {
            self.inner = self.inner.set_scopes(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateUserAttributes<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_user_attributes_input::Builder,
    }
    impl<C> UpdateUserAttributes<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateUserAttributesOutput,
            smithy_http::result::SdkError<crate::error::UpdateUserAttributesError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>An array of name-value pairs representing user attributes.</p>
        /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the
        /// attribute name.</p>
        pub fn user_attributes(mut self, inp: impl Into<crate::model::AttributeType>) -> Self {
            self.inner = self.inner.user_attributes(inp);
            self
        }
        pub fn set_user_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::AttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_user_attributes(input);
            self
        }
        /// <p>The access token for the request to update user attributes.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows
        /// that this action triggers. </p>
        /// <p>You create custom workflows by assigning AWS Lambda functions to user pool triggers.
        /// When you use the UpdateUserAttributes API action, Amazon Cognito invokes the function
        /// that is assigned to the <i>custom message</i> trigger. When Amazon Cognito
        /// invokes this function, it passes a JSON payload, which the function receives as input.
        /// This payload contains a <code>clientMetadata</code> attribute, which provides the data
        /// that you assigned to the ClientMetadata parameter in your UpdateUserAttributes request.
        /// In your function code in AWS Lambda, you can process the <code>clientMetadata</code>
        /// value to enhance your workflow for your specific needs.</p>
        /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html">Customizing User Pool Workflows with Lambda Triggers</a> in the
        /// <i>Amazon Cognito Developer Guide</i>.</p>
        /// <note>
        /// <p>Take the following limitations into consideration when you use the ClientMetadata
        /// parameter:</p>
        /// <ul>
        /// <li>
        /// <p>Amazon Cognito does not store the ClientMetadata value. This data is
        /// available only to AWS Lambda triggers that are assigned to a user pool to
        /// support custom workflows. If your user pool configuration does not include
        /// triggers, the ClientMetadata parameter serves no purpose.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not validate the ClientMetadata value.</p>
        /// </li>
        /// <li>
        /// <p>Amazon Cognito does not encrypt the the ClientMetadata value, so don't use
        /// it to provide sensitive information.</p>
        /// </li>
        /// </ul>
        /// </note>
        pub fn client_metadata(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.client_metadata(k, v);
            self
        }
        pub fn set_client_metadata(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_client_metadata(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateUserPool<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_user_pool_input::Builder,
    }
    impl<C> UpdateUserPool<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateUserPoolOutput,
            smithy_http::result::SdkError<crate::error::UpdateUserPoolError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool you want to update.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>A container with the policies you wish to update in a user pool.</p>
        pub fn policies(mut self, input: crate::model::UserPoolPolicyType) -> Self {
            self.inner = self.inner.policies(input);
            self
        }
        pub fn set_policies(
            mut self,
            input: std::option::Option<crate::model::UserPoolPolicyType>,
        ) -> Self {
            self.inner = self.inner.set_policies(input);
            self
        }
        /// <p>The AWS Lambda configuration information from the request to update the user
        /// pool.</p>
        pub fn lambda_config(mut self, input: crate::model::LambdaConfigType) -> Self {
            self.inner = self.inner.lambda_config(input);
            self
        }
        pub fn set_lambda_config(
            mut self,
            input: std::option::Option<crate::model::LambdaConfigType>,
        ) -> Self {
            self.inner = self.inner.set_lambda_config(input);
            self
        }
        /// <p>The attributes that are automatically verified when the Amazon Cognito service makes a
        /// request to update user pools.</p>
        pub fn auto_verified_attributes(
            mut self,
            inp: impl Into<crate::model::VerifiedAttributeType>,
        ) -> Self {
            self.inner = self.inner.auto_verified_attributes(inp);
            self
        }
        pub fn set_auto_verified_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::VerifiedAttributeType>>,
        ) -> Self {
            self.inner = self.inner.set_auto_verified_attributes(input);
            self
        }
        /// <p>A container with information about the SMS verification message.</p>
        pub fn sms_verification_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sms_verification_message(input);
            self
        }
        pub fn set_sms_verification_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sms_verification_message(input);
            self
        }
        /// <p>The contents of the email verification message.</p>
        pub fn email_verification_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_verification_message(input);
            self
        }
        pub fn set_email_verification_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_verification_message(input);
            self
        }
        /// <p>The subject of the email verification message.</p>
        pub fn email_verification_subject(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.email_verification_subject(input);
            self
        }
        pub fn set_email_verification_subject(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_email_verification_subject(input);
            self
        }
        /// <p>The template for verification messages.</p>
        pub fn verification_message_template(
            mut self,
            input: crate::model::VerificationMessageTemplateType,
        ) -> Self {
            self.inner = self.inner.verification_message_template(input);
            self
        }
        pub fn set_verification_message_template(
            mut self,
            input: std::option::Option<crate::model::VerificationMessageTemplateType>,
        ) -> Self {
            self.inner = self.inner.set_verification_message_template(input);
            self
        }
        /// <p>The contents of the SMS authentication message.</p>
        pub fn sms_authentication_message(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.sms_authentication_message(input);
            self
        }
        pub fn set_sms_authentication_message(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_sms_authentication_message(input);
            self
        }
        /// <p>Can be one of the following values:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>OFF</code> - MFA tokens are not required and cannot be specified during
        /// user registration.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ON</code> - MFA tokens are required for all user registrations. You can
        /// only specify ON when you are initially creating a user pool. You can use the
        /// <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SetUserPoolMfaConfig.html">SetUserPoolMfaConfig</a> API operation to turn MFA "ON" for existing
        /// user pools. </p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>OPTIONAL</code> - Users have the option when registering to create an MFA
        /// token.</p>
        /// </li>
        /// </ul>
        pub fn mfa_configuration(mut self, input: crate::model::UserPoolMfaType) -> Self {
            self.inner = self.inner.mfa_configuration(input);
            self
        }
        pub fn set_mfa_configuration(
            mut self,
            input: std::option::Option<crate::model::UserPoolMfaType>,
        ) -> Self {
            self.inner = self.inner.set_mfa_configuration(input);
            self
        }
        /// <p>Device configuration.</p>
        pub fn device_configuration(
            mut self,
            input: crate::model::DeviceConfigurationType,
        ) -> Self {
            self.inner = self.inner.device_configuration(input);
            self
        }
        pub fn set_device_configuration(
            mut self,
            input: std::option::Option<crate::model::DeviceConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_device_configuration(input);
            self
        }
        /// <p>Email configuration.</p>
        pub fn email_configuration(mut self, input: crate::model::EmailConfigurationType) -> Self {
            self.inner = self.inner.email_configuration(input);
            self
        }
        pub fn set_email_configuration(
            mut self,
            input: std::option::Option<crate::model::EmailConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_email_configuration(input);
            self
        }
        /// <p>SMS configuration.</p>
        pub fn sms_configuration(mut self, input: crate::model::SmsConfigurationType) -> Self {
            self.inner = self.inner.sms_configuration(input);
            self
        }
        pub fn set_sms_configuration(
            mut self,
            input: std::option::Option<crate::model::SmsConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_sms_configuration(input);
            self
        }
        /// <p>The tag keys and values to assign to the user pool. A tag is a label that you can use
        /// to categorize and manage user pools in different ways, such as by purpose, owner,
        /// environment, or other criteria.</p>
        pub fn user_pool_tags(
            mut self,
            k: impl Into<std::string::String>,
            v: impl Into<std::string::String>,
        ) -> Self {
            self.inner = self.inner.user_pool_tags(k, v);
            self
        }
        pub fn set_user_pool_tags(
            mut self,
            input: std::option::Option<
                std::collections::HashMap<std::string::String, std::string::String>,
            >,
        ) -> Self {
            self.inner = self.inner.set_user_pool_tags(input);
            self
        }
        /// <p>The configuration for <code>AdminCreateUser</code> requests.</p>
        pub fn admin_create_user_config(
            mut self,
            input: crate::model::AdminCreateUserConfigType,
        ) -> Self {
            self.inner = self.inner.admin_create_user_config(input);
            self
        }
        pub fn set_admin_create_user_config(
            mut self,
            input: std::option::Option<crate::model::AdminCreateUserConfigType>,
        ) -> Self {
            self.inner = self.inner.set_admin_create_user_config(input);
            self
        }
        /// <p>Used to enable advanced security risk detection. Set the key
        /// <code>AdvancedSecurityMode</code> to the value "AUDIT".</p>
        pub fn user_pool_add_ons(mut self, input: crate::model::UserPoolAddOnsType) -> Self {
            self.inner = self.inner.user_pool_add_ons(input);
            self
        }
        pub fn set_user_pool_add_ons(
            mut self,
            input: std::option::Option<crate::model::UserPoolAddOnsType>,
        ) -> Self {
            self.inner = self.inner.set_user_pool_add_ons(input);
            self
        }
        /// <p>Use this setting to define which verified available method a user can use to recover
        /// their password when they call <code>ForgotPassword</code>. It allows you to define a
        /// preferred method when a user has more than one method available. With this setting, SMS
        /// does not qualify for a valid password recovery mechanism if the user also has SMS MFA
        /// enabled. In the absence of this setting, Cognito uses the legacy behavior to determine
        /// the recovery method where SMS is preferred over email.</p>
        pub fn account_recovery_setting(
            mut self,
            input: crate::model::AccountRecoverySettingType,
        ) -> Self {
            self.inner = self.inner.account_recovery_setting(input);
            self
        }
        pub fn set_account_recovery_setting(
            mut self,
            input: std::option::Option<crate::model::AccountRecoverySettingType>,
        ) -> Self {
            self.inner = self.inner.set_account_recovery_setting(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateUserPoolClient<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_user_pool_client_input::Builder,
    }
    impl<C> UpdateUserPoolClient<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateUserPoolClientOutput,
            smithy_http::result::SdkError<crate::error::UpdateUserPoolClientError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The user pool ID for the user pool where you want to update the user pool
        /// client.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The ID of the client associated with the user pool.</p>
        pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_id(input);
            self
        }
        pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_id(input);
            self
        }
        /// <p>The client name from the update user pool client request.</p>
        pub fn client_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.client_name(input);
            self
        }
        pub fn set_client_name(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_client_name(input);
            self
        }
        /// <p>The time limit, in days, after which the refresh token is no longer valid and cannot
        /// be used.</p>
        pub fn refresh_token_validity(mut self, input: i32) -> Self {
            self.inner = self.inner.refresh_token_validity(input);
            self
        }
        pub fn set_refresh_token_validity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_refresh_token_validity(input);
            self
        }
        /// <p>The time limit, after which the access token is no longer valid and cannot be
        /// used.</p>
        pub fn access_token_validity(mut self, input: i32) -> Self {
            self.inner = self.inner.access_token_validity(input);
            self
        }
        pub fn set_access_token_validity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_access_token_validity(input);
            self
        }
        /// <p>The time limit, after which the ID token is no longer valid and cannot be used.</p>
        pub fn id_token_validity(mut self, input: i32) -> Self {
            self.inner = self.inner.id_token_validity(input);
            self
        }
        pub fn set_id_token_validity(mut self, input: std::option::Option<i32>) -> Self {
            self.inner = self.inner.set_id_token_validity(input);
            self
        }
        /// <p>The units in which the validity times are represented in. Default for RefreshToken is
        /// days, and default for ID and access tokens are hours.</p>
        pub fn token_validity_units(mut self, input: crate::model::TokenValidityUnitsType) -> Self {
            self.inner = self.inner.token_validity_units(input);
            self
        }
        pub fn set_token_validity_units(
            mut self,
            input: std::option::Option<crate::model::TokenValidityUnitsType>,
        ) -> Self {
            self.inner = self.inner.set_token_validity_units(input);
            self
        }
        /// <p>The read-only attributes of the user pool.</p>
        pub fn read_attributes(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.read_attributes(inp);
            self
        }
        pub fn set_read_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_read_attributes(input);
            self
        }
        /// <p>The writeable attributes of the user pool.</p>
        pub fn write_attributes(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.write_attributes(inp);
            self
        }
        pub fn set_write_attributes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_write_attributes(input);
            self
        }
        /// <p>The authentication flows that are supported by the user pool clients. Flow names
        /// without the <code>ALLOW_</code> prefix are deprecated in favor of new names with the
        /// <code>ALLOW_</code> prefix. Note that values with <code>ALLOW_</code> prefix cannot
        /// be used along with values without <code>ALLOW_</code> prefix.</p>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ALLOW_ADMIN_USER_PASSWORD_AUTH</code>: Enable admin based user password
        /// authentication flow <code>ADMIN_USER_PASSWORD_AUTH</code>. This setting replaces
        /// the <code>ADMIN_NO_SRP_AUTH</code> setting. With this authentication flow,
        /// Cognito receives the password in the request instead of using the SRP (Secure
        /// Remote Password protocol) protocol to verify passwords.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALLOW_CUSTOM_AUTH</code>: Enable Lambda trigger based
        /// authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALLOW_USER_PASSWORD_AUTH</code>: Enable user password-based
        /// authentication. In this flow, Cognito receives the password in the request
        /// instead of using the SRP protocol to verify passwords.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALLOW_USER_SRP_AUTH</code>: Enable SRP based authentication.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>ALLOW_REFRESH_TOKEN_AUTH</code>: Enable authflow to refresh
        /// tokens.</p>
        /// </li>
        /// </ul>
        pub fn explicit_auth_flows(
            mut self,
            inp: impl Into<crate::model::ExplicitAuthFlowsType>,
        ) -> Self {
            self.inner = self.inner.explicit_auth_flows(inp);
            self
        }
        pub fn set_explicit_auth_flows(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::ExplicitAuthFlowsType>>,
        ) -> Self {
            self.inner = self.inner.set_explicit_auth_flows(input);
            self
        }
        /// <p>A list of provider names for the identity providers that are supported on this
        /// client.</p>
        pub fn supported_identity_providers(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.supported_identity_providers(inp);
            self
        }
        pub fn set_supported_identity_providers(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_supported_identity_providers(input);
            self
        }
        /// <p>A list of allowed redirect (callback) URLs for the identity providers.</p>
        /// <p>A redirect URI must:</p>
        /// <ul>
        /// <li>
        /// <p>Be an absolute URI.</p>
        /// </li>
        /// <li>
        /// <p>Be registered with the authorization server.</p>
        /// </li>
        /// <li>
        /// <p>Not include a fragment component.</p>
        /// </li>
        /// </ul>
        /// <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
        /// Redirection Endpoint</a>.</p>
        /// <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing
        /// purposes only.</p>
        /// <p>App callback URLs such as myapp://example are also supported.</p>
        pub fn callback_ur_ls(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.callback_ur_ls(inp);
            self
        }
        pub fn set_callback_ur_ls(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_callback_ur_ls(input);
            self
        }
        /// <p>A list of allowed logout URLs for the identity providers.</p>
        pub fn logout_ur_ls(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.logout_ur_ls(inp);
            self
        }
        pub fn set_logout_ur_ls(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_logout_ur_ls(input);
            self
        }
        /// <p>The default redirect URI. Must be in the <code>CallbackURLs</code> list.</p>
        /// <p>A redirect URI must:</p>
        /// <ul>
        /// <li>
        /// <p>Be an absolute URI.</p>
        /// </li>
        /// <li>
        /// <p>Be registered with the authorization server.</p>
        /// </li>
        /// <li>
        /// <p>Not include a fragment component.</p>
        /// </li>
        /// </ul>
        /// <p>See <a href="https://tools.ietf.org/html/rfc6749#section-3.1.2">OAuth 2.0 -
        /// Redirection Endpoint</a>.</p>
        /// <p>Amazon Cognito requires HTTPS over HTTP except for http://localhost for testing
        /// purposes only.</p>
        /// <p>App callback URLs such as myapp://example are also supported.</p>
        pub fn default_redirect_uri(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.default_redirect_uri(input);
            self
        }
        pub fn set_default_redirect_uri(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_default_redirect_uri(input);
            self
        }
        /// <p>The allowed OAuth flows.</p>
        /// <p>Set to <code>code</code> to initiate a code grant flow, which provides an
        /// authorization code as the response. This code can be exchanged for access tokens with
        /// the token endpoint.</p>
        /// <p>Set to <code>implicit</code> to specify that the client should get the access token
        /// (and, optionally, ID token, based on scopes) directly.</p>
        /// <p>Set to <code>client_credentials</code> to specify that the client should get the
        /// access token (and, optionally, ID token, based on scopes) from the token endpoint using
        /// a combination of client and client_secret.</p>
        pub fn allowed_o_auth_flows(mut self, inp: impl Into<crate::model::OAuthFlowType>) -> Self {
            self.inner = self.inner.allowed_o_auth_flows(inp);
            self
        }
        pub fn set_allowed_o_auth_flows(
            mut self,
            input: std::option::Option<std::vec::Vec<crate::model::OAuthFlowType>>,
        ) -> Self {
            self.inner = self.inner.set_allowed_o_auth_flows(input);
            self
        }
        /// <p>The allowed OAuth scopes. Possible values provided by OAuth are: <code>phone</code>,
        /// <code>email</code>, <code>openid</code>, and <code>profile</code>. Possible values
        /// provided by AWS are: <code>aws.cognito.signin.user.admin</code>. Custom scopes created
        /// in Resource Servers are also supported.</p>
        pub fn allowed_o_auth_scopes(mut self, inp: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.allowed_o_auth_scopes(inp);
            self
        }
        pub fn set_allowed_o_auth_scopes(
            mut self,
            input: std::option::Option<std::vec::Vec<std::string::String>>,
        ) -> Self {
            self.inner = self.inner.set_allowed_o_auth_scopes(input);
            self
        }
        /// <p>Set to true if the client is allowed to follow the OAuth protocol when interacting
        /// with Cognito user pools.</p>
        pub fn allowed_o_auth_flows_user_pool_client(mut self, input: bool) -> Self {
            self.inner = self.inner.allowed_o_auth_flows_user_pool_client(input);
            self
        }
        pub fn set_allowed_o_auth_flows_user_pool_client(
            mut self,
            input: std::option::Option<bool>,
        ) -> Self {
            self.inner = self.inner.set_allowed_o_auth_flows_user_pool_client(input);
            self
        }
        /// <p>The Amazon Pinpoint analytics configuration for collecting metrics for this user
        /// pool.</p>
        /// <note>
        /// <p>In regions where Pinpoint is not available, Cognito User Pools only supports
        /// sending events to Amazon Pinpoint projects in us-east-1. In regions where Pinpoint
        /// is available, Cognito User Pools will support sending events to Amazon Pinpoint
        /// projects within that same region. </p>
        /// </note>
        pub fn analytics_configuration(
            mut self,
            input: crate::model::AnalyticsConfigurationType,
        ) -> Self {
            self.inner = self.inner.analytics_configuration(input);
            self
        }
        pub fn set_analytics_configuration(
            mut self,
            input: std::option::Option<crate::model::AnalyticsConfigurationType>,
        ) -> Self {
            self.inner = self.inner.set_analytics_configuration(input);
            self
        }
        /// <p>Use this setting to choose which errors and responses are returned by Cognito APIs
        /// during authentication, account confirmation, and password recovery when the user does
        /// not exist in the user pool. When set to <code>ENABLED</code> and the user does not
        /// exist, authentication returns an error indicating either the username or password was
        /// incorrect, and account confirmation and password recovery return a response indicating a
        /// code was sent to a simulated destination. When set to <code>LEGACY</code>, those APIs
        /// will return a <code>UserNotFoundException</code> exception if the user does not exist in
        /// the user pool.</p>
        /// <p>Valid values include:</p>
        /// <ul>
        /// <li>
        /// <p>
        /// <code>ENABLED</code> - This prevents user existence-related errors.</p>
        /// </li>
        /// <li>
        /// <p>
        /// <code>LEGACY</code> - This represents the old behavior of Cognito where user
        /// existence related errors are not prevented.</p>
        /// </li>
        /// </ul>
        /// <note>
        /// <p>After February 15th 2020, the value of <code>PreventUserExistenceErrors</code>
        /// will default to <code>ENABLED</code> for newly created user pool clients if no value
        /// is provided.</p>
        /// </note>
        pub fn prevent_user_existence_errors(
            mut self,
            input: crate::model::PreventUserExistenceErrorTypes,
        ) -> Self {
            self.inner = self.inner.prevent_user_existence_errors(input);
            self
        }
        pub fn set_prevent_user_existence_errors(
            mut self,
            input: std::option::Option<crate::model::PreventUserExistenceErrorTypes>,
        ) -> Self {
            self.inner = self.inner.set_prevent_user_existence_errors(input);
            self
        }
        /// <p>Enables or disables token revocation. For more information
        /// about revoking tokens, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_RevokeToken.html">RevokeToken</a>.</p>
        pub fn enable_token_revocation(mut self, input: bool) -> Self {
            self.inner = self.inner.enable_token_revocation(input);
            self
        }
        pub fn set_enable_token_revocation(mut self, input: std::option::Option<bool>) -> Self {
            self.inner = self.inner.set_enable_token_revocation(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct UpdateUserPoolDomain<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::update_user_pool_domain_input::Builder,
    }
    impl<C> UpdateUserPoolDomain<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::UpdateUserPoolDomainOutput,
            smithy_http::result::SdkError<crate::error::UpdateUserPoolDomainError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The domain name for the custom domain that hosts the sign-up and sign-in pages for
        /// your application. For example: <code>auth.example.com</code>. </p>
        /// <p>This string can include only lowercase letters, numbers, and hyphens. Do not use a
        /// hyphen for the first or last character. Use periods to separate subdomain names.</p>
        pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.domain(input);
            self
        }
        pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_domain(input);
            self
        }
        /// <p>The ID of the user pool that is associated with the custom domain that you are
        /// updating the certificate for.</p>
        pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_pool_id(input);
            self
        }
        pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_pool_id(input);
            self
        }
        /// <p>The configuration for a custom domain that hosts the sign-up and sign-in pages for
        /// your application. Use this object to specify an SSL certificate that is managed by
        /// ACM.</p>
        pub fn custom_domain_config(mut self, input: crate::model::CustomDomainConfigType) -> Self {
            self.inner = self.inner.custom_domain_config(input);
            self
        }
        pub fn set_custom_domain_config(
            mut self,
            input: std::option::Option<crate::model::CustomDomainConfigType>,
        ) -> Self {
            self.inner = self.inner.set_custom_domain_config(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct VerifySoftwareToken<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::verify_software_token_input::Builder,
    }
    impl<C> VerifySoftwareToken<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::VerifySoftwareTokenOutput,
            smithy_http::result::SdkError<crate::error::VerifySoftwareTokenError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>The access token.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>The session which should be passed both ways in challenge-response calls to the
        /// service.</p>
        pub fn session(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.session(input);
            self
        }
        pub fn set_session(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_session(input);
            self
        }
        /// <p>The one time password computed using the secret code returned by <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html">AssociateSoftwareToken"</a>.</p>
        pub fn user_code(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.user_code(input);
            self
        }
        pub fn set_user_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_user_code(input);
            self
        }
        /// <p>The friendly device name.</p>
        pub fn friendly_device_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.friendly_device_name(input);
            self
        }
        pub fn set_friendly_device_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_friendly_device_name(input);
            self
        }
    }
    #[derive(std::fmt::Debug)]
    pub struct VerifyUserAttribute<C = aws_hyper::DynConnector> {
        handle: std::sync::Arc<super::Handle<C>>,
        inner: crate::input::verify_user_attribute_input::Builder,
    }
    impl<C> VerifyUserAttribute<C> {
        pub(crate) fn new(handle: std::sync::Arc<super::Handle<C>>) -> Self {
            Self {
                handle,
                inner: Default::default(),
            }
        }

        pub async fn send(
            self,
        ) -> std::result::Result<
            crate::output::VerifyUserAttributeOutput,
            smithy_http::result::SdkError<crate::error::VerifyUserAttributeError>,
        >
        where
            C: aws_hyper::SmithyConnector,
        {
            let input = self
                .inner
                .build()
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            let op = input
                .make_operation(&self.handle.conf)
                .map_err(|err| smithy_http::result::SdkError::ConstructionFailure(err.into()))?;
            self.handle.client.call(op).await
        }
        /// <p>Represents the access token of the request to verify user attributes.</p>
        pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.access_token(input);
            self
        }
        pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_access_token(input);
            self
        }
        /// <p>The attribute name in the request to verify user attributes.</p>
        pub fn attribute_name(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.attribute_name(input);
            self
        }
        pub fn set_attribute_name(
            mut self,
            input: std::option::Option<std::string::String>,
        ) -> Self {
            self.inner = self.inner.set_attribute_name(input);
            self
        }
        /// <p>The verification code in the request to verify user attributes.</p>
        pub fn code(mut self, input: impl Into<std::string::String>) -> Self {
            self.inner = self.inner.code(input);
            self
        }
        pub fn set_code(mut self, input: std::option::Option<std::string::String>) -> Self {
            self.inner = self.inner.set_code(input);
            self
        }
    }
}
