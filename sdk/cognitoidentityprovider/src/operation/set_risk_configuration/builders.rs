// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::set_risk_configuration::_set_risk_configuration_output::SetRiskConfigurationOutputBuilder;

pub use crate::operation::set_risk_configuration::_set_risk_configuration_input::SetRiskConfigurationInputBuilder;

/// Fluent builder constructing a request to `SetRiskConfiguration`.
///
/// <p>Configures actions on detected risks. To delete the risk configuration for <code>UserPoolId</code> or <code>ClientId</code>, pass null values for all four configuration types.</p>
/// <p>To activate Amazon Cognito advanced security features, update the user pool to include the <code>UserPoolAddOns</code> key<code>AdvancedSecurityMode</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct SetRiskConfigurationFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::set_risk_configuration::builders::SetRiskConfigurationInputBuilder,
}
impl SetRiskConfigurationFluentBuilder {
    /// Creates a new `SetRiskConfiguration`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::set_risk_configuration::SetRiskConfiguration,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::set_risk_configuration::SetRiskConfigurationError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::set_risk_configuration::SetRiskConfigurationOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::set_risk_configuration::SetRiskConfigurationError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The user pool ID. </p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The user pool ID. </p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is mapped to <code>userPoolId</code>. When the client ID is null, the same risk configuration is applied to all the clients in the userPool.</p>
    /// <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID isn't null, the user pool configuration is overridden and the risk configuration for the client is used instead.</p>
    pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_id(input.into());
        self
    }
    /// <p>The app client ID. If <code>ClientId</code> is null, then the risk configuration is mapped to <code>userPoolId</code>. When the client ID is null, the same risk configuration is applied to all the clients in the userPool.</p>
    /// <p>Otherwise, <code>ClientId</code> is mapped to the client. When the client ID isn't null, the user pool configuration is overridden and the risk configuration for the client is used instead.</p>
    pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_client_id(input);
        self
    }
    /// <p>The compromised credentials risk configuration.</p>
    pub fn compromised_credentials_risk_configuration(
        mut self,
        input: crate::types::CompromisedCredentialsRiskConfigurationType,
    ) -> Self {
        self.inner = self.inner.compromised_credentials_risk_configuration(input);
        self
    }
    /// <p>The compromised credentials risk configuration.</p>
    pub fn set_compromised_credentials_risk_configuration(
        mut self,
        input: std::option::Option<crate::types::CompromisedCredentialsRiskConfigurationType>,
    ) -> Self {
        self.inner = self
            .inner
            .set_compromised_credentials_risk_configuration(input);
        self
    }
    /// <p>The account takeover risk configuration.</p>
    pub fn account_takeover_risk_configuration(
        mut self,
        input: crate::types::AccountTakeoverRiskConfigurationType,
    ) -> Self {
        self.inner = self.inner.account_takeover_risk_configuration(input);
        self
    }
    /// <p>The account takeover risk configuration.</p>
    pub fn set_account_takeover_risk_configuration(
        mut self,
        input: std::option::Option<crate::types::AccountTakeoverRiskConfigurationType>,
    ) -> Self {
        self.inner = self.inner.set_account_takeover_risk_configuration(input);
        self
    }
    /// <p>The configuration to override the risk decision.</p>
    pub fn risk_exception_configuration(
        mut self,
        input: crate::types::RiskExceptionConfigurationType,
    ) -> Self {
        self.inner = self.inner.risk_exception_configuration(input);
        self
    }
    /// <p>The configuration to override the risk decision.</p>
    pub fn set_risk_exception_configuration(
        mut self,
        input: std::option::Option<crate::types::RiskExceptionConfigurationType>,
    ) -> Self {
        self.inner = self.inner.set_risk_exception_configuration(input);
        self
    }
}
