// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetUserMfaPreferenceInput {
    /// <p>The SMS text message multi-factor authentication (MFA) settings.</p>
    #[doc(hidden)]
    pub sms_mfa_settings: std::option::Option<crate::types::SmsMfaSettingsType>,
    /// <p>The time-based one-time password (TOTP) software token MFA settings.</p>
    #[doc(hidden)]
    pub software_token_mfa_settings:
        std::option::Option<crate::types::SoftwareTokenMfaSettingsType>,
    /// <p>A valid access token that Amazon Cognito issued to the user whose MFA preference you want to set.</p>
    #[doc(hidden)]
    pub access_token: std::option::Option<std::string::String>,
}
impl SetUserMfaPreferenceInput {
    /// <p>The SMS text message multi-factor authentication (MFA) settings.</p>
    pub fn sms_mfa_settings(&self) -> std::option::Option<&crate::types::SmsMfaSettingsType> {
        self.sms_mfa_settings.as_ref()
    }
    /// <p>The time-based one-time password (TOTP) software token MFA settings.</p>
    pub fn software_token_mfa_settings(
        &self,
    ) -> std::option::Option<&crate::types::SoftwareTokenMfaSettingsType> {
        self.software_token_mfa_settings.as_ref()
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose MFA preference you want to set.</p>
    pub fn access_token(&self) -> std::option::Option<&str> {
        self.access_token.as_deref()
    }
}
impl std::fmt::Debug for SetUserMfaPreferenceInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetUserMfaPreferenceInput");
        formatter.field("sms_mfa_settings", &self.sms_mfa_settings);
        formatter.field(
            "software_token_mfa_settings",
            &self.software_token_mfa_settings,
        );
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl SetUserMfaPreferenceInput {
    /// Creates a new builder-style object to manufacture [`SetUserMfaPreferenceInput`](crate::operation::set_user_mfa_preference::SetUserMfaPreferenceInput).
    pub fn builder(
    ) -> crate::operation::set_user_mfa_preference::builders::SetUserMfaPreferenceInputBuilder {
        crate::operation::set_user_mfa_preference::builders::SetUserMfaPreferenceInputBuilder::default()
    }
}

/// A builder for [`SetUserMfaPreferenceInput`](crate::operation::set_user_mfa_preference::SetUserMfaPreferenceInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct SetUserMfaPreferenceInputBuilder {
    pub(crate) sms_mfa_settings: std::option::Option<crate::types::SmsMfaSettingsType>,
    pub(crate) software_token_mfa_settings:
        std::option::Option<crate::types::SoftwareTokenMfaSettingsType>,
    pub(crate) access_token: std::option::Option<std::string::String>,
}
impl SetUserMfaPreferenceInputBuilder {
    /// <p>The SMS text message multi-factor authentication (MFA) settings.</p>
    pub fn sms_mfa_settings(mut self, input: crate::types::SmsMfaSettingsType) -> Self {
        self.sms_mfa_settings = Some(input);
        self
    }
    /// <p>The SMS text message multi-factor authentication (MFA) settings.</p>
    pub fn set_sms_mfa_settings(
        mut self,
        input: std::option::Option<crate::types::SmsMfaSettingsType>,
    ) -> Self {
        self.sms_mfa_settings = input;
        self
    }
    /// <p>The time-based one-time password (TOTP) software token MFA settings.</p>
    pub fn software_token_mfa_settings(
        mut self,
        input: crate::types::SoftwareTokenMfaSettingsType,
    ) -> Self {
        self.software_token_mfa_settings = Some(input);
        self
    }
    /// <p>The time-based one-time password (TOTP) software token MFA settings.</p>
    pub fn set_software_token_mfa_settings(
        mut self,
        input: std::option::Option<crate::types::SoftwareTokenMfaSettingsType>,
    ) -> Self {
        self.software_token_mfa_settings = input;
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose MFA preference you want to set.</p>
    pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_token = Some(input.into());
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose MFA preference you want to set.</p>
    pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// Consumes the builder and constructs a [`SetUserMfaPreferenceInput`](crate::operation::set_user_mfa_preference::SetUserMfaPreferenceInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::set_user_mfa_preference::SetUserMfaPreferenceInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::set_user_mfa_preference::SetUserMfaPreferenceInput {
                sms_mfa_settings: self.sms_mfa_settings,
                software_token_mfa_settings: self.software_token_mfa_settings,
                access_token: self.access_token,
            },
        )
    }
}
impl std::fmt::Debug for SetUserMfaPreferenceInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetUserMfaPreferenceInputBuilder");
        formatter.field("sms_mfa_settings", &self.sms_mfa_settings);
        formatter.field(
            "software_token_mfa_settings",
            &self.software_token_mfa_settings,
        );
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
