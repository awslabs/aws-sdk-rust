// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_identity_provider::_create_identity_provider_output::CreateIdentityProviderOutputBuilder;

pub use crate::operation::create_identity_provider::_create_identity_provider_input::CreateIdentityProviderInputBuilder;

impl CreateIdentityProviderInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_identity_provider::CreateIdentityProviderOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_identity_provider::CreateIdentityProviderError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_identity_provider();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateIdentityProvider`.
///
/// <p>Creates an IdP for a user pool.</p> <note>
/// <p>Amazon Cognito evaluates Identity and Access Management (IAM) policies in requests for this API operation. For this operation, you must use IAM credentials to authorize requests, and you must grant yourself the corresponding IAM permission in a policy.</p>
/// <p class="title"> <b>Learn more</b> </p>
/// <ul>
/// <li> <p> <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_aws-signing.html">Signing Amazon Web Services API Requests</a> </p> </li>
/// <li> <p> <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/user-pools-API-operations.html">Using the Amazon Cognito user pools API and user pool endpoints</a> </p> </li>
/// </ul>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateIdentityProviderFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_identity_provider::builders::CreateIdentityProviderInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_identity_provider::CreateIdentityProviderOutput,
        crate::operation::create_identity_provider::CreateIdentityProviderError,
    > for CreateIdentityProviderFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_identity_provider::CreateIdentityProviderOutput,
            crate::operation::create_identity_provider::CreateIdentityProviderError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateIdentityProviderFluentBuilder {
    /// Creates a new `CreateIdentityProvider`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateIdentityProvider as a reference.
    pub fn as_input(&self) -> &crate::operation::create_identity_provider::builders::CreateIdentityProviderInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_identity_provider::CreateIdentityProviderOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_identity_provider::CreateIdentityProviderError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_identity_provider::CreateIdentityProvider::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_identity_provider::CreateIdentityProvider::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_identity_provider::CreateIdentityProviderOutput,
        crate::operation::create_identity_provider::CreateIdentityProviderError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl Into<crate::config::Builder>) -> Self {
        self.set_config_override(Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The user pool ID.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The user pool ID.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_user_pool_id()
    }
    /// <p>The IdP name.</p>
    pub fn provider_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.provider_name(input.into());
        self
    }
    /// <p>The IdP name.</p>
    pub fn set_provider_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_provider_name(input);
        self
    }
    /// <p>The IdP name.</p>
    pub fn get_provider_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_provider_name()
    }
    /// <p>The IdP type.</p>
    pub fn provider_type(mut self, input: crate::types::IdentityProviderTypeType) -> Self {
        self.inner = self.inner.provider_type(input);
        self
    }
    /// <p>The IdP type.</p>
    pub fn set_provider_type(mut self, input: ::std::option::Option<crate::types::IdentityProviderTypeType>) -> Self {
        self.inner = self.inner.set_provider_type(input);
        self
    }
    /// <p>The IdP type.</p>
    pub fn get_provider_type(&self) -> &::std::option::Option<crate::types::IdentityProviderTypeType> {
        self.inner.get_provider_type()
    }
    /// Adds a key-value pair to `ProviderDetails`.
    ///
    /// To override the contents of this collection use [`set_provider_details`](Self::set_provider_details).
    ///
    /// <p>The IdP details. The following list describes the provider detail keys for each IdP type.</p>
    /// <ul>
    /// <li> <p>For Google and Login with Amazon:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// </ul> </li>
    /// <li> <p>For Facebook:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// <li> <p>api_version</p> </li>
    /// </ul> </li>
    /// <li> <p>For Sign in with Apple:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>team_id</p> </li>
    /// <li> <p>key_id</p> </li>
    /// <li> <p>private_key</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// </ul> </li>
    /// <li> <p>For OpenID Connect (OIDC) providers:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>attributes_request_method</p> </li>
    /// <li> <p>oidc_issuer</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// <li> <p>The following keys are only present if Amazon Cognito didn't discover them at the <code>oidc_issuer</code> URL.</p>
    /// <ul>
    /// <li> <p>authorize_url </p> </li>
    /// <li> <p>token_url </p> </li>
    /// <li> <p>attributes_url </p> </li>
    /// <li> <p>jwks_uri </p> </li>
    /// </ul> </li>
    /// <li> <p>Amazon Cognito sets the value of the following keys automatically. They are read-only.</p>
    /// <ul>
    /// <li> <p>attributes_url_add_attributes </p> </li>
    /// </ul> </li>
    /// </ul> </li>
    /// <li> <p>For SAML providers:</p>
    /// <ul>
    /// <li> <p>MetadataFile or MetadataURL</p> </li>
    /// <li> <p>IDPSignout <i>optional</i> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn provider_details(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.provider_details(k.into(), v.into());
        self
    }
    /// <p>The IdP details. The following list describes the provider detail keys for each IdP type.</p>
    /// <ul>
    /// <li> <p>For Google and Login with Amazon:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// </ul> </li>
    /// <li> <p>For Facebook:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// <li> <p>api_version</p> </li>
    /// </ul> </li>
    /// <li> <p>For Sign in with Apple:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>team_id</p> </li>
    /// <li> <p>key_id</p> </li>
    /// <li> <p>private_key</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// </ul> </li>
    /// <li> <p>For OpenID Connect (OIDC) providers:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>attributes_request_method</p> </li>
    /// <li> <p>oidc_issuer</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// <li> <p>The following keys are only present if Amazon Cognito didn't discover them at the <code>oidc_issuer</code> URL.</p>
    /// <ul>
    /// <li> <p>authorize_url </p> </li>
    /// <li> <p>token_url </p> </li>
    /// <li> <p>attributes_url </p> </li>
    /// <li> <p>jwks_uri </p> </li>
    /// </ul> </li>
    /// <li> <p>Amazon Cognito sets the value of the following keys automatically. They are read-only.</p>
    /// <ul>
    /// <li> <p>attributes_url_add_attributes </p> </li>
    /// </ul> </li>
    /// </ul> </li>
    /// <li> <p>For SAML providers:</p>
    /// <ul>
    /// <li> <p>MetadataFile or MetadataURL</p> </li>
    /// <li> <p>IDPSignout <i>optional</i> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn set_provider_details(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_provider_details(input);
        self
    }
    /// <p>The IdP details. The following list describes the provider detail keys for each IdP type.</p>
    /// <ul>
    /// <li> <p>For Google and Login with Amazon:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// </ul> </li>
    /// <li> <p>For Facebook:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// <li> <p>api_version</p> </li>
    /// </ul> </li>
    /// <li> <p>For Sign in with Apple:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>team_id</p> </li>
    /// <li> <p>key_id</p> </li>
    /// <li> <p>private_key</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// </ul> </li>
    /// <li> <p>For OpenID Connect (OIDC) providers:</p>
    /// <ul>
    /// <li> <p>client_id</p> </li>
    /// <li> <p>client_secret</p> </li>
    /// <li> <p>attributes_request_method</p> </li>
    /// <li> <p>oidc_issuer</p> </li>
    /// <li> <p>authorize_scopes</p> </li>
    /// <li> <p>The following keys are only present if Amazon Cognito didn't discover them at the <code>oidc_issuer</code> URL.</p>
    /// <ul>
    /// <li> <p>authorize_url </p> </li>
    /// <li> <p>token_url </p> </li>
    /// <li> <p>attributes_url </p> </li>
    /// <li> <p>jwks_uri </p> </li>
    /// </ul> </li>
    /// <li> <p>Amazon Cognito sets the value of the following keys automatically. They are read-only.</p>
    /// <ul>
    /// <li> <p>attributes_url_add_attributes </p> </li>
    /// </ul> </li>
    /// </ul> </li>
    /// <li> <p>For SAML providers:</p>
    /// <ul>
    /// <li> <p>MetadataFile or MetadataURL</p> </li>
    /// <li> <p>IDPSignout <i>optional</i> </p> </li>
    /// </ul> </li>
    /// </ul>
    pub fn get_provider_details(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_provider_details()
    }
    /// Adds a key-value pair to `AttributeMapping`.
    ///
    /// To override the contents of this collection use [`set_attribute_mapping`](Self::set_attribute_mapping).
    ///
    /// <p>A mapping of IdP attributes to standard and custom user pool attributes.</p>
    pub fn attribute_mapping(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.attribute_mapping(k.into(), v.into());
        self
    }
    /// <p>A mapping of IdP attributes to standard and custom user pool attributes.</p>
    pub fn set_attribute_mapping(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_attribute_mapping(input);
        self
    }
    /// <p>A mapping of IdP attributes to standard and custom user pool attributes.</p>
    pub fn get_attribute_mapping(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_attribute_mapping()
    }
    /// Appends an item to `IdpIdentifiers`.
    ///
    /// To override the contents of this collection use [`set_idp_identifiers`](Self::set_idp_identifiers).
    ///
    /// <p>A list of IdP identifiers.</p>
    pub fn idp_identifiers(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.idp_identifiers(input.into());
        self
    }
    /// <p>A list of IdP identifiers.</p>
    pub fn set_idp_identifiers(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_idp_identifiers(input);
        self
    }
    /// <p>A list of IdP identifiers.</p>
    pub fn get_idp_identifiers(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_idp_identifiers()
    }
}
