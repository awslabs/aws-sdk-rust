// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AdminSetUserMfaPreferenceInput {
    /// <p>The SMS text message MFA settings.</p>
    pub sms_mfa_settings: ::std::option::Option<crate::types::SmsMfaSettingsType>,
    /// <p>The time-based one-time password software token MFA settings.</p>
    pub software_token_mfa_settings: ::std::option::Option<crate::types::SoftwareTokenMfaSettingsType>,
    /// <p>The user pool username or alias.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The user pool ID.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
}
impl AdminSetUserMfaPreferenceInput {
    /// <p>The SMS text message MFA settings.</p>
    pub fn sms_mfa_settings(&self) -> ::std::option::Option<&crate::types::SmsMfaSettingsType> {
        self.sms_mfa_settings.as_ref()
    }
    /// <p>The time-based one-time password software token MFA settings.</p>
    pub fn software_token_mfa_settings(&self) -> ::std::option::Option<&crate::types::SoftwareTokenMfaSettingsType> {
        self.software_token_mfa_settings.as_ref()
    }
    /// <p>The user pool username or alias.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
}
impl ::std::fmt::Debug for AdminSetUserMfaPreferenceInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminSetUserMfaPreferenceInput");
        formatter.field("sms_mfa_settings", &self.sms_mfa_settings);
        formatter.field("software_token_mfa_settings", &self.software_token_mfa_settings);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.finish()
    }
}
impl AdminSetUserMfaPreferenceInput {
    /// Creates a new builder-style object to manufacture [`AdminSetUserMfaPreferenceInput`](crate::operation::admin_set_user_mfa_preference::AdminSetUserMfaPreferenceInput).
    pub fn builder() -> crate::operation::admin_set_user_mfa_preference::builders::AdminSetUserMfaPreferenceInputBuilder {
        crate::operation::admin_set_user_mfa_preference::builders::AdminSetUserMfaPreferenceInputBuilder::default()
    }
}

/// A builder for [`AdminSetUserMfaPreferenceInput`](crate::operation::admin_set_user_mfa_preference::AdminSetUserMfaPreferenceInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AdminSetUserMfaPreferenceInputBuilder {
    pub(crate) sms_mfa_settings: ::std::option::Option<crate::types::SmsMfaSettingsType>,
    pub(crate) software_token_mfa_settings: ::std::option::Option<crate::types::SoftwareTokenMfaSettingsType>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
}
impl AdminSetUserMfaPreferenceInputBuilder {
    /// <p>The SMS text message MFA settings.</p>
    pub fn sms_mfa_settings(mut self, input: crate::types::SmsMfaSettingsType) -> Self {
        self.sms_mfa_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The SMS text message MFA settings.</p>
    pub fn set_sms_mfa_settings(mut self, input: ::std::option::Option<crate::types::SmsMfaSettingsType>) -> Self {
        self.sms_mfa_settings = input;
        self
    }
    /// <p>The SMS text message MFA settings.</p>
    pub fn get_sms_mfa_settings(&self) -> &::std::option::Option<crate::types::SmsMfaSettingsType> {
        &self.sms_mfa_settings
    }
    /// <p>The time-based one-time password software token MFA settings.</p>
    pub fn software_token_mfa_settings(mut self, input: crate::types::SoftwareTokenMfaSettingsType) -> Self {
        self.software_token_mfa_settings = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time-based one-time password software token MFA settings.</p>
    pub fn set_software_token_mfa_settings(mut self, input: ::std::option::Option<crate::types::SoftwareTokenMfaSettingsType>) -> Self {
        self.software_token_mfa_settings = input;
        self
    }
    /// <p>The time-based one-time password software token MFA settings.</p>
    pub fn get_software_token_mfa_settings(&self) -> &::std::option::Option<crate::types::SoftwareTokenMfaSettingsType> {
        &self.software_token_mfa_settings
    }
    /// <p>The user pool username or alias.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user pool username or alias.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The user pool username or alias.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The user pool ID.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user pool ID.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The user pool ID.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// Consumes the builder and constructs a [`AdminSetUserMfaPreferenceInput`](crate::operation::admin_set_user_mfa_preference::AdminSetUserMfaPreferenceInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::admin_set_user_mfa_preference::AdminSetUserMfaPreferenceInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::admin_set_user_mfa_preference::AdminSetUserMfaPreferenceInput {
            sms_mfa_settings: self.sms_mfa_settings,
            software_token_mfa_settings: self.software_token_mfa_settings,
            username: self.username,
            user_pool_id: self.user_pool_id,
        })
    }
}
impl ::std::fmt::Debug for AdminSetUserMfaPreferenceInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminSetUserMfaPreferenceInputBuilder");
        formatter.field("sms_mfa_settings", &self.sms_mfa_settings);
        formatter.field("software_token_mfa_settings", &self.software_token_mfa_settings);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.finish()
    }
}
