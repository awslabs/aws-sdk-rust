// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_users::_list_users_output::ListUsersOutputBuilder;

pub use crate::operation::list_users::_list_users_input::ListUsersInputBuilder;

/// Fluent builder constructing a request to `ListUsers`.
///
/// <p>Lists the users in the Amazon Cognito user pool.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListUsersFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_users::builders::ListUsersInputBuilder,
}
impl ListUsersFluentBuilder {
    /// Creates a new `ListUsers`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_users::ListUsers,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<crate::operation::list_users::ListUsersError>,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_users::ListUsersOutput,
        aws_smithy_http::result::SdkError<crate::operation::list_users::ListUsersError>,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_users::paginator::ListUsersPaginator::send) which returns a `Stream`.
    pub fn into_paginator(self) -> crate::operation::list_users::paginator::ListUsersPaginator {
        crate::operation::list_users::paginator::ListUsersPaginator::new(self.handle, self.inner)
    }
    /// <p>The user pool ID for the user pool on which the search should be performed.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The user pool ID for the user pool on which the search should be performed.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// Appends an item to `AttributesToGet`.
    ///
    /// To override the contents of this collection use [`set_attributes_to_get`](Self::set_attributes_to_get).
    ///
    /// <p>An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.</p>
    pub fn attributes_to_get(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.attributes_to_get(input.into());
        self
    }
    /// <p>An array of strings, where each string is the name of a user attribute to be returned for each user in the search results. If the array is null, all attributes are returned.</p>
    pub fn set_attributes_to_get(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_attributes_to_get(input);
        self
    }
    /// <p>Maximum number of users to be returned.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>Maximum number of users to be returned.</p>
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn pagination_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.pagination_token(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.</p>
    pub fn set_pagination_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_pagination_token(input);
        self
    }
    /// <p>A filter string of the form "<i>AttributeName</i> <i>Filter-Type</i> "<i>AttributeValue</i>"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "<code>family_name</code> = \"Reddy\"".</p>
    /// <ul>
    /// <li> <p> <i>AttributeName</i>: The name of the attribute to search for. You can only search for one attribute at a time.</p> </li>
    /// <li> <p> <i>Filter-Type</i>: For an exact match, use =, for example, "<code>given_name</code> = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "<code>given_name</code> ^= \"Jon\"". </p> </li>
    /// <li> <p> <i>AttributeValue</i>: The attribute value that must be matched for each user.</p> </li>
    /// </ul>
    /// <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user pool.</p>
    /// <p>You can only search for the following standard attributes:</p>
    /// <ul>
    /// <li> <p> <code>username</code> (case-sensitive)</p> </li>
    /// <li> <p> <code>email</code> </p> </li>
    /// <li> <p> <code>phone_number</code> </p> </li>
    /// <li> <p> <code>name</code> </p> </li>
    /// <li> <p> <code>given_name</code> </p> </li>
    /// <li> <p> <code>family_name</code> </p> </li>
    /// <li> <p> <code>preferred_username</code> </p> </li>
    /// <li> <p> <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p> </li>
    /// <li> <p> <code>status (called <b>Enabled</b> in the Console) (case-sensitive)</code> </p> </li>
    /// <li> <p> <code>sub</code> </p> </li>
    /// </ul>
    /// <p>Custom attributes aren't searchable.</p> <note>
    /// <p>You can also list users with a client-side filter. The server-side filter matches no more than one attribute. For an advanced search, use a client-side filter with the <code>--query</code> parameter of the <code>list-users</code> action in the CLI. When you use a client-side filter, ListUsers returns a paginated list of zero or more users. You can receive multiple pages in a row with zero results. Repeat the query with each pagination token that is returned until you receive a null pagination token value, and then review the combined result. </p>
    /// <p>For more information about server-side and client-side filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">FilteringCLI output</a> in the <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Command Line Interface User Guide</a>. </p>
    /// </note>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api">Searching for Users Using the ListUsers API</a> and <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
    pub fn filter(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.filter(input.into());
        self
    }
    /// <p>A filter string of the form "<i>AttributeName</i> <i>Filter-Type</i> "<i>AttributeValue</i>"". Quotation marks within the filter string must be escaped using the backslash (\) character. For example, "<code>family_name</code> = \"Reddy\"".</p>
    /// <ul>
    /// <li> <p> <i>AttributeName</i>: The name of the attribute to search for. You can only search for one attribute at a time.</p> </li>
    /// <li> <p> <i>Filter-Type</i>: For an exact match, use =, for example, "<code>given_name</code> = \"Jon\"". For a prefix ("starts with") match, use ^=, for example, "<code>given_name</code> ^= \"Jon\"". </p> </li>
    /// <li> <p> <i>AttributeValue</i>: The attribute value that must be matched for each user.</p> </li>
    /// </ul>
    /// <p>If the filter string is empty, <code>ListUsers</code> returns all users in the user pool.</p>
    /// <p>You can only search for the following standard attributes:</p>
    /// <ul>
    /// <li> <p> <code>username</code> (case-sensitive)</p> </li>
    /// <li> <p> <code>email</code> </p> </li>
    /// <li> <p> <code>phone_number</code> </p> </li>
    /// <li> <p> <code>name</code> </p> </li>
    /// <li> <p> <code>given_name</code> </p> </li>
    /// <li> <p> <code>family_name</code> </p> </li>
    /// <li> <p> <code>preferred_username</code> </p> </li>
    /// <li> <p> <code>cognito:user_status</code> (called <b>Status</b> in the Console) (case-insensitive)</p> </li>
    /// <li> <p> <code>status (called <b>Enabled</b> in the Console) (case-sensitive)</code> </p> </li>
    /// <li> <p> <code>sub</code> </p> </li>
    /// </ul>
    /// <p>Custom attributes aren't searchable.</p> <note>
    /// <p>You can also list users with a client-side filter. The server-side filter matches no more than one attribute. For an advanced search, use a client-side filter with the <code>--query</code> parameter of the <code>list-users</code> action in the CLI. When you use a client-side filter, ListUsers returns a paginated list of zero or more users. You can receive multiple pages in a row with zero results. Repeat the query with each pagination token that is returned until you receive a null pagination token value, and then review the combined result. </p>
    /// <p>For more information about server-side and client-side filtering, see <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">FilteringCLI output</a> in the <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-filter.html">Command Line Interface User Guide</a>. </p>
    /// </note>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-using-listusers-api">Searching for Users Using the ListUsers API</a> and <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/how-to-manage-user-accounts.html#cognito-user-pools-searching-for-users-listusers-api-examples">Examples of Using the ListUsers API</a> in the <i>Amazon Cognito Developer Guide</i>.</p>
    pub fn set_filter(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_filter(input);
        self
    }
}
