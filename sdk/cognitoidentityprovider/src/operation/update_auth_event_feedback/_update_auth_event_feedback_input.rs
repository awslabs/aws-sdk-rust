// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateAuthEventFeedbackInput {
    /// <p>The user pool ID.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The user pool username.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The event ID.</p>
    #[doc(hidden)]
    pub event_id: std::option::Option<std::string::String>,
    /// <p>The feedback token.</p>
    #[doc(hidden)]
    pub feedback_token: std::option::Option<std::string::String>,
    /// <p>The authentication event feedback value.</p>
    #[doc(hidden)]
    pub feedback_value: std::option::Option<crate::types::FeedbackValueType>,
}
impl UpdateAuthEventFeedbackInput {
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The user pool username.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The event ID.</p>
    pub fn event_id(&self) -> std::option::Option<&str> {
        self.event_id.as_deref()
    }
    /// <p>The feedback token.</p>
    pub fn feedback_token(&self) -> std::option::Option<&str> {
        self.feedback_token.as_deref()
    }
    /// <p>The authentication event feedback value.</p>
    pub fn feedback_value(&self) -> std::option::Option<&crate::types::FeedbackValueType> {
        self.feedback_value.as_ref()
    }
}
impl std::fmt::Debug for UpdateAuthEventFeedbackInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAuthEventFeedbackInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("event_id", &self.event_id);
        formatter.field("feedback_token", &"*** Sensitive Data Redacted ***");
        formatter.field("feedback_value", &self.feedback_value);
        formatter.finish()
    }
}
impl UpdateAuthEventFeedbackInput {
    /// Creates a new builder-style object to manufacture [`UpdateAuthEventFeedbackInput`](crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput).
    pub fn builder(
    ) -> crate::operation::update_auth_event_feedback::builders::UpdateAuthEventFeedbackInputBuilder
    {
        crate::operation::update_auth_event_feedback::builders::UpdateAuthEventFeedbackInputBuilder::default()
    }
}

/// A builder for [`UpdateAuthEventFeedbackInput`](crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct UpdateAuthEventFeedbackInputBuilder {
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) event_id: std::option::Option<std::string::String>,
    pub(crate) feedback_token: std::option::Option<std::string::String>,
    pub(crate) feedback_value: std::option::Option<crate::types::FeedbackValueType>,
}
impl UpdateAuthEventFeedbackInputBuilder {
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The user pool ID.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The user pool username.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The user pool username.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The event ID.</p>
    pub fn event_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.event_id = Some(input.into());
        self
    }
    /// <p>The event ID.</p>
    pub fn set_event_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.event_id = input;
        self
    }
    /// <p>The feedback token.</p>
    pub fn feedback_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.feedback_token = Some(input.into());
        self
    }
    /// <p>The feedback token.</p>
    pub fn set_feedback_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.feedback_token = input;
        self
    }
    /// <p>The authentication event feedback value.</p>
    pub fn feedback_value(mut self, input: crate::types::FeedbackValueType) -> Self {
        self.feedback_value = Some(input);
        self
    }
    /// <p>The authentication event feedback value.</p>
    pub fn set_feedback_value(
        mut self,
        input: std::option::Option<crate::types::FeedbackValueType>,
    ) -> Self {
        self.feedback_value = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateAuthEventFeedbackInput`](crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_auth_event_feedback::UpdateAuthEventFeedbackInput {
                user_pool_id: self.user_pool_id,
                username: self.username,
                event_id: self.event_id,
                feedback_token: self.feedback_token,
                feedback_value: self.feedback_value,
            },
        )
    }
}
impl std::fmt::Debug for UpdateAuthEventFeedbackInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateAuthEventFeedbackInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("event_id", &self.event_id);
        formatter.field("feedback_token", &"*** Sensitive Data Redacted ***");
        formatter.field("feedback_value", &self.feedback_value);
        formatter.finish()
    }
}
