// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct SetUiCustomizationInput {
    /// <p>The user pool ID for the user pool.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The client ID for the client app.</p>
    #[doc(hidden)]
    pub client_id: std::option::Option<std::string::String>,
    /// <p>The CSS values in the UI customization.</p>
    #[doc(hidden)]
    pub css: std::option::Option<std::string::String>,
    /// <p>The uploaded logo image for the UI customization.</p>
    #[doc(hidden)]
    pub image_file: std::option::Option<aws_smithy_types::Blob>,
}
impl SetUiCustomizationInput {
    /// <p>The user pool ID for the user pool.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The client ID for the client app.</p>
    pub fn client_id(&self) -> std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The CSS values in the UI customization.</p>
    pub fn css(&self) -> std::option::Option<&str> {
        self.css.as_deref()
    }
    /// <p>The uploaded logo image for the UI customization.</p>
    pub fn image_file(&self) -> std::option::Option<&aws_smithy_types::Blob> {
        self.image_file.as_ref()
    }
}
impl std::fmt::Debug for SetUiCustomizationInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetUiCustomizationInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("css", &self.css);
        formatter.field("image_file", &self.image_file);
        formatter.finish()
    }
}
impl SetUiCustomizationInput {
    /// Creates a new builder-style object to manufacture [`SetUiCustomizationInput`](crate::operation::set_ui_customization::SetUiCustomizationInput).
    pub fn builder(
    ) -> crate::operation::set_ui_customization::builders::SetUiCustomizationInputBuilder {
        crate::operation::set_ui_customization::builders::SetUiCustomizationInputBuilder::default()
    }
}

/// A builder for [`SetUiCustomizationInput`](crate::operation::set_ui_customization::SetUiCustomizationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct SetUiCustomizationInputBuilder {
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) client_id: std::option::Option<std::string::String>,
    pub(crate) css: std::option::Option<std::string::String>,
    pub(crate) image_file: std::option::Option<aws_smithy_types::Blob>,
}
impl SetUiCustomizationInputBuilder {
    /// <p>The user pool ID for the user pool.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The client ID for the client app.</p>
    pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_id = Some(input.into());
        self
    }
    /// <p>The client ID for the client app.</p>
    pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The CSS values in the UI customization.</p>
    pub fn css(mut self, input: impl Into<std::string::String>) -> Self {
        self.css = Some(input.into());
        self
    }
    /// <p>The CSS values in the UI customization.</p>
    pub fn set_css(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.css = input;
        self
    }
    /// <p>The uploaded logo image for the UI customization.</p>
    pub fn image_file(mut self, input: aws_smithy_types::Blob) -> Self {
        self.image_file = Some(input);
        self
    }
    /// <p>The uploaded logo image for the UI customization.</p>
    pub fn set_image_file(mut self, input: std::option::Option<aws_smithy_types::Blob>) -> Self {
        self.image_file = input;
        self
    }
    /// Consumes the builder and constructs a [`SetUiCustomizationInput`](crate::operation::set_ui_customization::SetUiCustomizationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::set_ui_customization::SetUiCustomizationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::set_ui_customization::SetUiCustomizationInput {
                user_pool_id: self.user_pool_id,
                client_id: self.client_id,
                css: self.css,
                image_file: self.image_file,
            },
        )
    }
}
impl std::fmt::Debug for SetUiCustomizationInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("SetUiCustomizationInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("css", &self.css);
        formatter.field("image_file", &self.image_file);
        formatter.finish()
    }
}
