// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AdminSetUserPasswordInput {
    /// <p>The user pool ID for the user pool where you want to set the user's password.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The user name of the user whose password you want to set.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>The password for the user.</p>
    pub password: ::std::option::Option<::std::string::String>,
    /// <p> <code>True</code> if the password is permanent, <code>False</code> if it is temporary.</p>
    pub permanent: ::std::option::Option<bool>,
}
impl AdminSetUserPasswordInput {
    /// <p>The user pool ID for the user pool where you want to set the user's password.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The user name of the user whose password you want to set.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The password for the user.</p>
    pub fn password(&self) -> ::std::option::Option<&str> {
        self.password.as_deref()
    }
    /// <p> <code>True</code> if the password is permanent, <code>False</code> if it is temporary.</p>
    pub fn permanent(&self) -> ::std::option::Option<bool> {
        self.permanent
    }
}
impl ::std::fmt::Debug for AdminSetUserPasswordInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminSetUserPasswordInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("permanent", &self.permanent);
        formatter.finish()
    }
}
impl AdminSetUserPasswordInput {
    /// Creates a new builder-style object to manufacture [`AdminSetUserPasswordInput`](crate::operation::admin_set_user_password::AdminSetUserPasswordInput).
    pub fn builder() -> crate::operation::admin_set_user_password::builders::AdminSetUserPasswordInputBuilder {
        crate::operation::admin_set_user_password::builders::AdminSetUserPasswordInputBuilder::default()
    }
}

/// A builder for [`AdminSetUserPasswordInput`](crate::operation::admin_set_user_password::AdminSetUserPasswordInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AdminSetUserPasswordInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) password: ::std::option::Option<::std::string::String>,
    pub(crate) permanent: ::std::option::Option<bool>,
}
impl AdminSetUserPasswordInputBuilder {
    /// <p>The user pool ID for the user pool where you want to set the user's password.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool where you want to set the user's password.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The user pool ID for the user pool where you want to set the user's password.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The user name of the user whose password you want to set.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name of the user whose password you want to set.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The user name of the user whose password you want to set.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// <p>The password for the user.</p>
    /// This field is required.
    pub fn password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The password for the user.</p>
    pub fn set_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// <p>The password for the user.</p>
    pub fn get_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.password
    }
    /// <p> <code>True</code> if the password is permanent, <code>False</code> if it is temporary.</p>
    pub fn permanent(mut self, input: bool) -> Self {
        self.permanent = ::std::option::Option::Some(input);
        self
    }
    /// <p> <code>True</code> if the password is permanent, <code>False</code> if it is temporary.</p>
    pub fn set_permanent(mut self, input: ::std::option::Option<bool>) -> Self {
        self.permanent = input;
        self
    }
    /// <p> <code>True</code> if the password is permanent, <code>False</code> if it is temporary.</p>
    pub fn get_permanent(&self) -> &::std::option::Option<bool> {
        &self.permanent
    }
    /// Consumes the builder and constructs a [`AdminSetUserPasswordInput`](crate::operation::admin_set_user_password::AdminSetUserPasswordInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::admin_set_user_password::AdminSetUserPasswordInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::admin_set_user_password::AdminSetUserPasswordInput {
            user_pool_id: self.user_pool_id,
            username: self.username,
            password: self.password,
            permanent: self.permanent,
        })
    }
}
impl ::std::fmt::Debug for AdminSetUserPasswordInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminSetUserPasswordInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("permanent", &self.permanent);
        formatter.finish()
    }
}
