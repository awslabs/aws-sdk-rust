// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::admin_set_user_password::_admin_set_user_password_output::AdminSetUserPasswordOutputBuilder;

pub use crate::operation::admin_set_user_password::_admin_set_user_password_input::AdminSetUserPasswordInputBuilder;

/// Fluent builder constructing a request to `AdminSetUserPassword`.
///
/// <p>Sets the specified user's password in a user pool as an administrator. Works on any user. </p>
/// <p>The password can be temporary or permanent. If it is temporary, the user status enters the <code>FORCE_CHANGE_PASSWORD</code> state. When the user next tries to sign in, the InitiateAuth/AdminInitiateAuth response will contain the <code>NEW_PASSWORD_REQUIRED</code> challenge. If the user doesn't sign in before it expires, the user won't be able to sign in, and an administrator must reset their password. </p>
/// <p>Once the user has set a new password, or the password is permanent, the user status is set to <code>Confirmed</code>.</p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct AdminSetUserPasswordFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::admin_set_user_password::builders::AdminSetUserPasswordInputBuilder,
}
impl AdminSetUserPasswordFluentBuilder {
    /// Creates a new `AdminSetUserPassword`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::admin_set_user_password::AdminSetUserPassword,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::admin_set_user_password::AdminSetUserPasswordError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::admin_set_user_password::AdminSetUserPasswordOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::admin_set_user_password::AdminSetUserPasswordError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The user pool ID for the user pool where you want to set the user's password.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.user_pool_id(input.into());
        self
    }
    /// <p>The user pool ID for the user pool where you want to set the user's password.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_user_pool_id(input);
        self
    }
    /// <p>The user name of the user whose password you want to set.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.username(input.into());
        self
    }
    /// <p>The user name of the user whose password you want to set.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_username(input);
        self
    }
    /// <p>The password for the user.</p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.password(input.into());
        self
    }
    /// <p>The password for the user.</p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_password(input);
        self
    }
    /// <p> <code>True</code> if the password is permanent, <code>False</code> if it is temporary.</p>
    pub fn permanent(mut self, input: bool) -> Self {
        self.inner = self.inner.permanent(input);
        self
    }
    /// <p> <code>True</code> if the password is permanent, <code>False</code> if it is temporary.</p>
    pub fn set_permanent(mut self, input: std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_permanent(input);
        self
    }
}
