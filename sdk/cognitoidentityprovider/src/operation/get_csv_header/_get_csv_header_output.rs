// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the response from the server to the request to get the header information of the CSV file for the user import job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetCsvHeaderOutput {
    /// <p>The user pool ID for the user pool that the users are to be imported into.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The header information of the CSV file for the user import job.</p>
    pub csv_header: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetCsvHeaderOutput {
    /// <p>The user pool ID for the user pool that the users are to be imported into.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The header information of the CSV file for the user import job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.csv_header.is_none()`.
    pub fn csv_header(&self) -> &[::std::string::String] {
        self.csv_header.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for GetCsvHeaderOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetCsvHeaderOutput {
    /// Creates a new builder-style object to manufacture [`GetCsvHeaderOutput`](crate::operation::get_csv_header::GetCsvHeaderOutput).
    pub fn builder() -> crate::operation::get_csv_header::builders::GetCsvHeaderOutputBuilder {
        crate::operation::get_csv_header::builders::GetCsvHeaderOutputBuilder::default()
    }
}

/// A builder for [`GetCsvHeaderOutput`](crate::operation::get_csv_header::GetCsvHeaderOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetCsvHeaderOutputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) csv_header: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl GetCsvHeaderOutputBuilder {
    /// <p>The user pool ID for the user pool that the users are to be imported into.</p>
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool that the users are to be imported into.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The user pool ID for the user pool that the users are to be imported into.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// Appends an item to `csv_header`.
    ///
    /// To override the contents of this collection use [`set_csv_header`](Self::set_csv_header).
    ///
    /// <p>The header information of the CSV file for the user import job.</p>
    pub fn csv_header(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.csv_header.unwrap_or_default();
        v.push(input.into());
        self.csv_header = ::std::option::Option::Some(v);
        self
    }
    /// <p>The header information of the CSV file for the user import job.</p>
    pub fn set_csv_header(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.csv_header = input;
        self
    }
    /// <p>The header information of the CSV file for the user import job.</p>
    pub fn get_csv_header(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.csv_header
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetCsvHeaderOutput`](crate::operation::get_csv_header::GetCsvHeaderOutput).
    pub fn build(self) -> crate::operation::get_csv_header::GetCsvHeaderOutput {
        crate::operation::get_csv_header::GetCsvHeaderOutput {
            user_pool_id: self.user_pool_id,
            csv_header: self.csv_header,
            _request_id: self._request_id,
        }
    }
}
