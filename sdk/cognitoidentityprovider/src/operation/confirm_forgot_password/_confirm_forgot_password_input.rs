// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request representing the confirmation for a password reset.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConfirmForgotPasswordInput {
    /// <p>The app client ID of the app associated with the user pool.</p>
    #[doc(hidden)]
    pub client_id: std::option::Option<std::string::String>,
    /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
    #[doc(hidden)]
    pub secret_hash: std::option::Option<std::string::String>,
    /// <p>The user name of the user for whom you want to enter a code to retrieve a forgotten password.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The confirmation code from your user's request to reset their password. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html">ForgotPassword</a>.</p>
    #[doc(hidden)]
    pub confirmation_code: std::option::Option<std::string::String>,
    /// <p>The new password that your user wants to set.</p>
    #[doc(hidden)]
    pub password: std::option::Option<std::string::String>,
    /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.</p>
    #[doc(hidden)]
    pub analytics_metadata: std::option::Option<crate::types::AnalyticsMetadataType>,
    /// <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.</p>
    #[doc(hidden)]
    pub user_context_data: std::option::Option<crate::types::UserContextDataType>,
    /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
    /// <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"> Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note>
    /// <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
    /// <ul>
    /// <li> <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p> </li>
    /// <li> <p>Validate the ClientMetadata value.</p> </li>
    /// <li> <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p> </li>
    /// </ul>
    /// </note>
    #[doc(hidden)]
    pub client_metadata:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ConfirmForgotPasswordInput {
    /// <p>The app client ID of the app associated with the user pool.</p>
    pub fn client_id(&self) -> std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
    pub fn secret_hash(&self) -> std::option::Option<&str> {
        self.secret_hash.as_deref()
    }
    /// <p>The user name of the user for whom you want to enter a code to retrieve a forgotten password.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The confirmation code from your user's request to reset their password. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html">ForgotPassword</a>.</p>
    pub fn confirmation_code(&self) -> std::option::Option<&str> {
        self.confirmation_code.as_deref()
    }
    /// <p>The new password that your user wants to set.</p>
    pub fn password(&self) -> std::option::Option<&str> {
        self.password.as_deref()
    }
    /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.</p>
    pub fn analytics_metadata(&self) -> std::option::Option<&crate::types::AnalyticsMetadataType> {
        self.analytics_metadata.as_ref()
    }
    /// <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.</p>
    pub fn user_context_data(&self) -> std::option::Option<&crate::types::UserContextDataType> {
        self.user_context_data.as_ref()
    }
    /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
    /// <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"> Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note>
    /// <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
    /// <ul>
    /// <li> <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p> </li>
    /// <li> <p>Validate the ClientMetadata value.</p> </li>
    /// <li> <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p> </li>
    /// </ul>
    /// </note>
    pub fn client_metadata(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.client_metadata.as_ref()
    }
}
impl std::fmt::Debug for ConfirmForgotPasswordInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConfirmForgotPasswordInput");
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("secret_hash", &"*** Sensitive Data Redacted ***");
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("confirmation_code", &self.confirmation_code);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("analytics_metadata", &self.analytics_metadata);
        formatter.field("user_context_data", &self.user_context_data);
        formatter.field("client_metadata", &self.client_metadata);
        formatter.finish()
    }
}
impl ConfirmForgotPasswordInput {
    /// Creates a new builder-style object to manufacture [`ConfirmForgotPasswordInput`](crate::operation::confirm_forgot_password::ConfirmForgotPasswordInput).
    pub fn builder(
    ) -> crate::operation::confirm_forgot_password::builders::ConfirmForgotPasswordInputBuilder
    {
        crate::operation::confirm_forgot_password::builders::ConfirmForgotPasswordInputBuilder::default()
    }
}

/// A builder for [`ConfirmForgotPasswordInput`](crate::operation::confirm_forgot_password::ConfirmForgotPasswordInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct ConfirmForgotPasswordInputBuilder {
    pub(crate) client_id: std::option::Option<std::string::String>,
    pub(crate) secret_hash: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) confirmation_code: std::option::Option<std::string::String>,
    pub(crate) password: std::option::Option<std::string::String>,
    pub(crate) analytics_metadata: std::option::Option<crate::types::AnalyticsMetadataType>,
    pub(crate) user_context_data: std::option::Option<crate::types::UserContextDataType>,
    pub(crate) client_metadata:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl ConfirmForgotPasswordInputBuilder {
    /// <p>The app client ID of the app associated with the user pool.</p>
    pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_id = Some(input.into());
        self
    }
    /// <p>The app client ID of the app associated with the user pool.</p>
    pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
    pub fn secret_hash(mut self, input: impl Into<std::string::String>) -> Self {
        self.secret_hash = Some(input.into());
        self
    }
    /// <p>A keyed-hash message authentication code (HMAC) calculated using the secret key of a user pool client and username plus the client ID in the message.</p>
    pub fn set_secret_hash(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.secret_hash = input;
        self
    }
    /// <p>The user name of the user for whom you want to enter a code to retrieve a forgotten password.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The user name of the user for whom you want to enter a code to retrieve a forgotten password.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The confirmation code from your user's request to reset their password. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html">ForgotPassword</a>.</p>
    pub fn confirmation_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.confirmation_code = Some(input.into());
        self
    }
    /// <p>The confirmation code from your user's request to reset their password. For more information, see <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_ForgotPassword.html">ForgotPassword</a>.</p>
    pub fn set_confirmation_code(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.confirmation_code = input;
        self
    }
    /// <p>The new password that your user wants to set.</p>
    pub fn password(mut self, input: impl Into<std::string::String>) -> Self {
        self.password = Some(input.into());
        self
    }
    /// <p>The new password that your user wants to set.</p>
    pub fn set_password(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.password = input;
        self
    }
    /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.</p>
    pub fn analytics_metadata(mut self, input: crate::types::AnalyticsMetadataType) -> Self {
        self.analytics_metadata = Some(input);
        self
    }
    /// <p>The Amazon Pinpoint analytics metadata for collecting metrics for <code>ConfirmForgotPassword</code> calls.</p>
    pub fn set_analytics_metadata(
        mut self,
        input: std::option::Option<crate::types::AnalyticsMetadataType>,
    ) -> Self {
        self.analytics_metadata = input;
        self
    }
    /// <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.</p>
    pub fn user_context_data(mut self, input: crate::types::UserContextDataType) -> Self {
        self.user_context_data = Some(input);
        self
    }
    /// <p>Contextual data about your user session, such as the device fingerprint, IP address, or location. Amazon Cognito advanced security evaluates the risk of an authentication event based on the context that your app generates and passes to Amazon Cognito when it makes API requests.</p>
    pub fn set_user_context_data(
        mut self,
        input: std::option::Option<crate::types::UserContextDataType>,
    ) -> Self {
        self.user_context_data = input;
        self
    }
    /// Adds a key-value pair to `client_metadata`.
    ///
    /// To override the contents of this collection use [`set_client_metadata`](Self::set_client_metadata).
    ///
    /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
    /// <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"> Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note>
    /// <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
    /// <ul>
    /// <li> <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p> </li>
    /// <li> <p>Validate the ClientMetadata value.</p> </li>
    /// <li> <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p> </li>
    /// </ul>
    /// </note>
    pub fn client_metadata(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.client_metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.client_metadata = Some(hash_map);
        self
    }
    /// <p>A map of custom key-value pairs that you can provide as input for any custom workflows that this action triggers.</p>
    /// <p>You create custom workflows by assigning Lambda functions to user pool triggers. When you use the ConfirmForgotPassword API action, Amazon Cognito invokes the function that is assigned to the <i>post confirmation</i> trigger. When Amazon Cognito invokes this function, it passes a JSON payload, which the function receives as input. This payload contains a <code>clientMetadata</code> attribute, which provides the data that you assigned to the ClientMetadata parameter in your ConfirmForgotPassword request. In your function code in Lambda, you can process the <code>clientMetadata</code> value to enhance your workflow for your specific needs.</p>
    /// <p>For more information, see <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools-working-with-aws-lambda-triggers.html"> Customizing user pool Workflows with Lambda Triggers</a> in the <i>Amazon Cognito Developer Guide</i>.</p> <note>
    /// <p>When you use the ClientMetadata parameter, remember that Amazon Cognito won't do the following:</p>
    /// <ul>
    /// <li> <p>Store the ClientMetadata value. This data is available only to Lambda triggers that are assigned to a user pool to support custom workflows. If your user pool configuration doesn't include triggers, the ClientMetadata parameter serves no purpose.</p> </li>
    /// <li> <p>Validate the ClientMetadata value.</p> </li>
    /// <li> <p>Encrypt the ClientMetadata value. Don't use Amazon Cognito to provide sensitive information.</p> </li>
    /// </ul>
    /// </note>
    pub fn set_client_metadata(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.client_metadata = input;
        self
    }
    /// Consumes the builder and constructs a [`ConfirmForgotPasswordInput`](crate::operation::confirm_forgot_password::ConfirmForgotPasswordInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::confirm_forgot_password::ConfirmForgotPasswordInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::confirm_forgot_password::ConfirmForgotPasswordInput {
                client_id: self.client_id,
                secret_hash: self.secret_hash,
                username: self.username,
                confirmation_code: self.confirmation_code,
                password: self.password,
                analytics_metadata: self.analytics_metadata,
                user_context_data: self.user_context_data,
                client_metadata: self.client_metadata,
            },
        )
    }
}
impl std::fmt::Debug for ConfirmForgotPasswordInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ConfirmForgotPasswordInputBuilder");
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("secret_hash", &"*** Sensitive Data Redacted ***");
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("confirmation_code", &self.confirmation_code);
        formatter.field("password", &"*** Sensitive Data Redacted ***");
        formatter.field("analytics_metadata", &self.analytics_metadata);
        formatter.field("user_context_data", &self.user_context_data);
        formatter.field("client_metadata", &self.client_metadata);
        formatter.finish()
    }
}
