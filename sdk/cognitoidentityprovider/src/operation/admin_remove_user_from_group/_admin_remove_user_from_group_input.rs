// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AdminRemoveUserFromGroupInput {
    /// <p>The user pool ID for the user pool.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The username for the user.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>The group name.</p>
    #[doc(hidden)]
    pub group_name: std::option::Option<std::string::String>,
}
impl AdminRemoveUserFromGroupInput {
    /// <p>The user pool ID for the user pool.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The username for the user.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>The group name.</p>
    pub fn group_name(&self) -> std::option::Option<&str> {
        self.group_name.as_deref()
    }
}
impl std::fmt::Debug for AdminRemoveUserFromGroupInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AdminRemoveUserFromGroupInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("group_name", &self.group_name);
        formatter.finish()
    }
}
impl AdminRemoveUserFromGroupInput {
    /// Creates a new builder-style object to manufacture [`AdminRemoveUserFromGroupInput`](crate::operation::admin_remove_user_from_group::AdminRemoveUserFromGroupInput).
    pub fn builder() -> crate::operation::admin_remove_user_from_group::builders::AdminRemoveUserFromGroupInputBuilder{
        crate::operation::admin_remove_user_from_group::builders::AdminRemoveUserFromGroupInputBuilder::default()
    }
}

/// A builder for [`AdminRemoveUserFromGroupInput`](crate::operation::admin_remove_user_from_group::AdminRemoveUserFromGroupInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct AdminRemoveUserFromGroupInputBuilder {
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) group_name: std::option::Option<std::string::String>,
}
impl AdminRemoveUserFromGroupInputBuilder {
    /// <p>The user pool ID for the user pool.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The username for the user.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The username for the user.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The group name.</p>
    pub fn group_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.group_name = Some(input.into());
        self
    }
    /// <p>The group name.</p>
    pub fn set_group_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.group_name = input;
        self
    }
    /// Consumes the builder and constructs a [`AdminRemoveUserFromGroupInput`](crate::operation::admin_remove_user_from_group::AdminRemoveUserFromGroupInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::admin_remove_user_from_group::AdminRemoveUserFromGroupInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::admin_remove_user_from_group::AdminRemoveUserFromGroupInput {
                user_pool_id: self.user_pool_id,
                username: self.username,
                group_name: self.group_name,
            },
        )
    }
}
impl std::fmt::Debug for AdminRemoveUserFromGroupInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AdminRemoveUserFromGroupInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("group_name", &self.group_name);
        formatter.finish()
    }
}
