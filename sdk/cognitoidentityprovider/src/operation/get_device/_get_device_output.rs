// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Gets the device response.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetDeviceOutput {
    /// <p>The device.</p>
    pub device: ::std::option::Option<crate::types::DeviceType>,
    _request_id: Option<String>,
}
impl GetDeviceOutput {
    /// <p>The device.</p>
    pub fn device(&self) -> ::std::option::Option<&crate::types::DeviceType> {
        self.device.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for GetDeviceOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetDeviceOutput {
    /// Creates a new builder-style object to manufacture [`GetDeviceOutput`](crate::operation::get_device::GetDeviceOutput).
    pub fn builder() -> crate::operation::get_device::builders::GetDeviceOutputBuilder {
        crate::operation::get_device::builders::GetDeviceOutputBuilder::default()
    }
}

/// A builder for [`GetDeviceOutput`](crate::operation::get_device::GetDeviceOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetDeviceOutputBuilder {
    pub(crate) device: ::std::option::Option<crate::types::DeviceType>,
    _request_id: Option<String>,
}
impl GetDeviceOutputBuilder {
    /// <p>The device.</p>
    /// This field is required.
    pub fn device(mut self, input: crate::types::DeviceType) -> Self {
        self.device = ::std::option::Option::Some(input);
        self
    }
    /// <p>The device.</p>
    pub fn set_device(mut self, input: ::std::option::Option<crate::types::DeviceType>) -> Self {
        self.device = input;
        self
    }
    /// <p>The device.</p>
    pub fn get_device(&self) -> &::std::option::Option<crate::types::DeviceType> {
        &self.device
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetDeviceOutput`](crate::operation::get_device::GetDeviceOutput).
    pub fn build(self) -> crate::operation::get_device::GetDeviceOutput {
        crate::operation::get_device::GetDeviceOutput {
            device: self.device,
            _request_id: self._request_id,
        }
    }
}
