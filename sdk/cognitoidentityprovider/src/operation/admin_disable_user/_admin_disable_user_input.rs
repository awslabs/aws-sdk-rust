// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the request to disable the user as an administrator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AdminDisableUserInput {
    /// <p>The user pool ID for the user pool where you want to disable the user.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The user name of the user you want to disable.</p>
    pub username: ::std::option::Option<::std::string::String>,
}
impl AdminDisableUserInput {
    /// <p>The user pool ID for the user pool where you want to disable the user.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The user name of the user you want to disable.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
}
impl ::std::fmt::Debug for AdminDisableUserInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminDisableUserInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl AdminDisableUserInput {
    /// Creates a new builder-style object to manufacture [`AdminDisableUserInput`](crate::operation::admin_disable_user::AdminDisableUserInput).
    pub fn builder() -> crate::operation::admin_disable_user::builders::AdminDisableUserInputBuilder {
        crate::operation::admin_disable_user::builders::AdminDisableUserInputBuilder::default()
    }
}

/// A builder for [`AdminDisableUserInput`](crate::operation::admin_disable_user::AdminDisableUserInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AdminDisableUserInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
}
impl AdminDisableUserInputBuilder {
    /// <p>The user pool ID for the user pool where you want to disable the user.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool where you want to disable the user.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The user pool ID for the user pool where you want to disable the user.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The user name of the user you want to disable.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name of the user you want to disable.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The user name of the user you want to disable.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// Consumes the builder and constructs a [`AdminDisableUserInput`](crate::operation::admin_disable_user::AdminDisableUserInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::admin_disable_user::AdminDisableUserInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::admin_disable_user::AdminDisableUserInput {
            user_pool_id: self.user_pool_id,
            username: self.username,
        })
    }
}
impl ::std::fmt::Debug for AdminDisableUserInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminDisableUserInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
