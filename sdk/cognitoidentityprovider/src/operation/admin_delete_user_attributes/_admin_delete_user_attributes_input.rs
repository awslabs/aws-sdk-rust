// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the request to delete user attributes as an administrator.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AdminDeleteUserAttributesInput {
    /// <p>The user pool ID for the user pool where you want to delete user attributes.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The user name of the user from which you would like to delete attributes.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    pub user_attribute_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AdminDeleteUserAttributesInput {
    /// <p>The user pool ID for the user pool where you want to delete user attributes.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The user name of the user from which you would like to delete attributes.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_attribute_names.is_none()`.
    pub fn user_attribute_names(&self) -> &[::std::string::String] {
        self.user_attribute_names.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for AdminDeleteUserAttributesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminDeleteUserAttributesInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("user_attribute_names", &self.user_attribute_names);
        formatter.finish()
    }
}
impl AdminDeleteUserAttributesInput {
    /// Creates a new builder-style object to manufacture [`AdminDeleteUserAttributesInput`](crate::operation::admin_delete_user_attributes::AdminDeleteUserAttributesInput).
    pub fn builder() -> crate::operation::admin_delete_user_attributes::builders::AdminDeleteUserAttributesInputBuilder {
        crate::operation::admin_delete_user_attributes::builders::AdminDeleteUserAttributesInputBuilder::default()
    }
}

/// A builder for [`AdminDeleteUserAttributesInput`](crate::operation::admin_delete_user_attributes::AdminDeleteUserAttributesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AdminDeleteUserAttributesInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) user_attribute_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl AdminDeleteUserAttributesInputBuilder {
    /// <p>The user pool ID for the user pool where you want to delete user attributes.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool where you want to delete user attributes.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The user pool ID for the user pool where you want to delete user attributes.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The user name of the user from which you would like to delete attributes.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name of the user from which you would like to delete attributes.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The user name of the user from which you would like to delete attributes.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// Appends an item to `user_attribute_names`.
    ///
    /// To override the contents of this collection use [`set_user_attribute_names`](Self::set_user_attribute_names).
    ///
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    pub fn user_attribute_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.user_attribute_names.unwrap_or_default();
        v.push(input.into());
        self.user_attribute_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    pub fn set_user_attribute_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.user_attribute_names = input;
        self
    }
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prepend the <code>custom:</code> prefix to the attribute name.</p>
    pub fn get_user_attribute_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.user_attribute_names
    }
    /// Consumes the builder and constructs a [`AdminDeleteUserAttributesInput`](crate::operation::admin_delete_user_attributes::AdminDeleteUserAttributesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::admin_delete_user_attributes::AdminDeleteUserAttributesInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::admin_delete_user_attributes::AdminDeleteUserAttributesInput {
            user_pool_id: self.user_pool_id,
            username: self.username,
            user_attribute_names: self.user_attribute_names,
        })
    }
}
impl ::std::fmt::Debug for AdminDeleteUserAttributesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminDeleteUserAttributesInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("user_attribute_names", &self.user_attribute_names);
        formatter.finish()
    }
}
