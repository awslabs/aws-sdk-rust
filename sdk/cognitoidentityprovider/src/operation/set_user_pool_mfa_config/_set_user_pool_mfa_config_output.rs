// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SetUserPoolMfaConfigOutput {
    /// <p>Shows user pool SMS message configuration for MFA. Includes the message template and the SMS message sending configuration for Amazon SNS.</p>
    pub sms_mfa_configuration: ::std::option::Option<crate::types::SmsMfaConfigType>,
    /// <p>Shows user pool configuration for time-based one-time password (TOTP) MFA. Includes TOTP enabled or disabled state.</p>
    pub software_token_mfa_configuration: ::std::option::Option<crate::types::SoftwareTokenMfaConfigType>,
    /// <p>Shows user pool email message configuration for MFA. Includes the subject and body of the email message template for MFA messages. To activate this setting, <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html"> advanced security features</a> must be active in your user pool.</p>
    pub email_mfa_configuration: ::std::option::Option<crate::types::EmailMfaConfigType>,
    /// <p>The MFA configuration. Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>OFF</code> MFA won't be used for any users.</p></li>
    /// <li>
    /// <p><code>ON</code> MFA is required for all users to sign in.</p></li>
    /// <li>
    /// <p><code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p></li>
    /// </ul>
    pub mfa_configuration: ::std::option::Option<crate::types::UserPoolMfaType>,
    _request_id: Option<String>,
}
impl SetUserPoolMfaConfigOutput {
    /// <p>Shows user pool SMS message configuration for MFA. Includes the message template and the SMS message sending configuration for Amazon SNS.</p>
    pub fn sms_mfa_configuration(&self) -> ::std::option::Option<&crate::types::SmsMfaConfigType> {
        self.sms_mfa_configuration.as_ref()
    }
    /// <p>Shows user pool configuration for time-based one-time password (TOTP) MFA. Includes TOTP enabled or disabled state.</p>
    pub fn software_token_mfa_configuration(&self) -> ::std::option::Option<&crate::types::SoftwareTokenMfaConfigType> {
        self.software_token_mfa_configuration.as_ref()
    }
    /// <p>Shows user pool email message configuration for MFA. Includes the subject and body of the email message template for MFA messages. To activate this setting, <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html"> advanced security features</a> must be active in your user pool.</p>
    pub fn email_mfa_configuration(&self) -> ::std::option::Option<&crate::types::EmailMfaConfigType> {
        self.email_mfa_configuration.as_ref()
    }
    /// <p>The MFA configuration. Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>OFF</code> MFA won't be used for any users.</p></li>
    /// <li>
    /// <p><code>ON</code> MFA is required for all users to sign in.</p></li>
    /// <li>
    /// <p><code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p></li>
    /// </ul>
    pub fn mfa_configuration(&self) -> ::std::option::Option<&crate::types::UserPoolMfaType> {
        self.mfa_configuration.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for SetUserPoolMfaConfigOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SetUserPoolMfaConfigOutput {
    /// Creates a new builder-style object to manufacture [`SetUserPoolMfaConfigOutput`](crate::operation::set_user_pool_mfa_config::SetUserPoolMfaConfigOutput).
    pub fn builder() -> crate::operation::set_user_pool_mfa_config::builders::SetUserPoolMfaConfigOutputBuilder {
        crate::operation::set_user_pool_mfa_config::builders::SetUserPoolMfaConfigOutputBuilder::default()
    }
}

/// A builder for [`SetUserPoolMfaConfigOutput`](crate::operation::set_user_pool_mfa_config::SetUserPoolMfaConfigOutput).
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
#[non_exhaustive]
pub struct SetUserPoolMfaConfigOutputBuilder {
    pub(crate) sms_mfa_configuration: ::std::option::Option<crate::types::SmsMfaConfigType>,
    pub(crate) software_token_mfa_configuration: ::std::option::Option<crate::types::SoftwareTokenMfaConfigType>,
    pub(crate) email_mfa_configuration: ::std::option::Option<crate::types::EmailMfaConfigType>,
    pub(crate) mfa_configuration: ::std::option::Option<crate::types::UserPoolMfaType>,
    _request_id: Option<String>,
}
impl SetUserPoolMfaConfigOutputBuilder {
    /// <p>Shows user pool SMS message configuration for MFA. Includes the message template and the SMS message sending configuration for Amazon SNS.</p>
    pub fn sms_mfa_configuration(mut self, input: crate::types::SmsMfaConfigType) -> Self {
        self.sms_mfa_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Shows user pool SMS message configuration for MFA. Includes the message template and the SMS message sending configuration for Amazon SNS.</p>
    pub fn set_sms_mfa_configuration(mut self, input: ::std::option::Option<crate::types::SmsMfaConfigType>) -> Self {
        self.sms_mfa_configuration = input;
        self
    }
    /// <p>Shows user pool SMS message configuration for MFA. Includes the message template and the SMS message sending configuration for Amazon SNS.</p>
    pub fn get_sms_mfa_configuration(&self) -> &::std::option::Option<crate::types::SmsMfaConfigType> {
        &self.sms_mfa_configuration
    }
    /// <p>Shows user pool configuration for time-based one-time password (TOTP) MFA. Includes TOTP enabled or disabled state.</p>
    pub fn software_token_mfa_configuration(mut self, input: crate::types::SoftwareTokenMfaConfigType) -> Self {
        self.software_token_mfa_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Shows user pool configuration for time-based one-time password (TOTP) MFA. Includes TOTP enabled or disabled state.</p>
    pub fn set_software_token_mfa_configuration(mut self, input: ::std::option::Option<crate::types::SoftwareTokenMfaConfigType>) -> Self {
        self.software_token_mfa_configuration = input;
        self
    }
    /// <p>Shows user pool configuration for time-based one-time password (TOTP) MFA. Includes TOTP enabled or disabled state.</p>
    pub fn get_software_token_mfa_configuration(&self) -> &::std::option::Option<crate::types::SoftwareTokenMfaConfigType> {
        &self.software_token_mfa_configuration
    }
    /// <p>Shows user pool email message configuration for MFA. Includes the subject and body of the email message template for MFA messages. To activate this setting, <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html"> advanced security features</a> must be active in your user pool.</p>
    pub fn email_mfa_configuration(mut self, input: crate::types::EmailMfaConfigType) -> Self {
        self.email_mfa_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Shows user pool email message configuration for MFA. Includes the subject and body of the email message template for MFA messages. To activate this setting, <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html"> advanced security features</a> must be active in your user pool.</p>
    pub fn set_email_mfa_configuration(mut self, input: ::std::option::Option<crate::types::EmailMfaConfigType>) -> Self {
        self.email_mfa_configuration = input;
        self
    }
    /// <p>Shows user pool email message configuration for MFA. Includes the subject and body of the email message template for MFA messages. To activate this setting, <a href="https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pool-settings-advanced-security.html"> advanced security features</a> must be active in your user pool.</p>
    pub fn get_email_mfa_configuration(&self) -> &::std::option::Option<crate::types::EmailMfaConfigType> {
        &self.email_mfa_configuration
    }
    /// <p>The MFA configuration. Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>OFF</code> MFA won't be used for any users.</p></li>
    /// <li>
    /// <p><code>ON</code> MFA is required for all users to sign in.</p></li>
    /// <li>
    /// <p><code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p></li>
    /// </ul>
    pub fn mfa_configuration(mut self, input: crate::types::UserPoolMfaType) -> Self {
        self.mfa_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The MFA configuration. Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>OFF</code> MFA won't be used for any users.</p></li>
    /// <li>
    /// <p><code>ON</code> MFA is required for all users to sign in.</p></li>
    /// <li>
    /// <p><code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p></li>
    /// </ul>
    pub fn set_mfa_configuration(mut self, input: ::std::option::Option<crate::types::UserPoolMfaType>) -> Self {
        self.mfa_configuration = input;
        self
    }
    /// <p>The MFA configuration. Valid values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>OFF</code> MFA won't be used for any users.</p></li>
    /// <li>
    /// <p><code>ON</code> MFA is required for all users to sign in.</p></li>
    /// <li>
    /// <p><code>OPTIONAL</code> MFA will be required only for individual users who have an MFA factor enabled.</p></li>
    /// </ul>
    pub fn get_mfa_configuration(&self) -> &::std::option::Option<crate::types::UserPoolMfaType> {
        &self.mfa_configuration
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SetUserPoolMfaConfigOutput`](crate::operation::set_user_pool_mfa_config::SetUserPoolMfaConfigOutput).
    pub fn build(self) -> crate::operation::set_user_pool_mfa_config::SetUserPoolMfaConfigOutput {
        crate::operation::set_user_pool_mfa_config::SetUserPoolMfaConfigOutput {
            sms_mfa_configuration: self.sms_mfa_configuration,
            software_token_mfa_configuration: self.software_token_mfa_configuration,
            email_mfa_configuration: self.email_mfa_configuration,
            mfa_configuration: self.mfa_configuration,
            _request_id: self._request_id,
        }
    }
}
