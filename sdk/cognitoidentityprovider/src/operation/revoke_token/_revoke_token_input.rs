// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RevokeTokenInput {
    /// <p>The refresh token that you want to revoke.</p>
    #[doc(hidden)]
    pub token: std::option::Option<std::string::String>,
    /// <p>The client ID for the token that you want to revoke.</p>
    #[doc(hidden)]
    pub client_id: std::option::Option<std::string::String>,
    /// <p>The secret for the client ID. This is required only if the client ID has a secret.</p>
    #[doc(hidden)]
    pub client_secret: std::option::Option<std::string::String>,
}
impl RevokeTokenInput {
    /// <p>The refresh token that you want to revoke.</p>
    pub fn token(&self) -> std::option::Option<&str> {
        self.token.as_deref()
    }
    /// <p>The client ID for the token that you want to revoke.</p>
    pub fn client_id(&self) -> std::option::Option<&str> {
        self.client_id.as_deref()
    }
    /// <p>The secret for the client ID. This is required only if the client ID has a secret.</p>
    pub fn client_secret(&self) -> std::option::Option<&str> {
        self.client_secret.as_deref()
    }
}
impl std::fmt::Debug for RevokeTokenInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokeTokenInput");
        formatter.field("token", &"*** Sensitive Data Redacted ***");
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl RevokeTokenInput {
    /// Creates a new builder-style object to manufacture [`RevokeTokenInput`](crate::operation::revoke_token::RevokeTokenInput).
    pub fn builder() -> crate::operation::revoke_token::builders::RevokeTokenInputBuilder {
        crate::operation::revoke_token::builders::RevokeTokenInputBuilder::default()
    }
}

/// A builder for [`RevokeTokenInput`](crate::operation::revoke_token::RevokeTokenInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct RevokeTokenInputBuilder {
    pub(crate) token: std::option::Option<std::string::String>,
    pub(crate) client_id: std::option::Option<std::string::String>,
    pub(crate) client_secret: std::option::Option<std::string::String>,
}
impl RevokeTokenInputBuilder {
    /// <p>The refresh token that you want to revoke.</p>
    pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
        self.token = Some(input.into());
        self
    }
    /// <p>The refresh token that you want to revoke.</p>
    pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.token = input;
        self
    }
    /// <p>The client ID for the token that you want to revoke.</p>
    pub fn client_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_id = Some(input.into());
        self
    }
    /// <p>The client ID for the token that you want to revoke.</p>
    pub fn set_client_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_id = input;
        self
    }
    /// <p>The secret for the client ID. This is required only if the client ID has a secret.</p>
    pub fn client_secret(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_secret = Some(input.into());
        self
    }
    /// <p>The secret for the client ID. This is required only if the client ID has a secret.</p>
    pub fn set_client_secret(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.client_secret = input;
        self
    }
    /// Consumes the builder and constructs a [`RevokeTokenInput`](crate::operation::revoke_token::RevokeTokenInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::revoke_token::RevokeTokenInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::revoke_token::RevokeTokenInput {
            token: self.token,
            client_id: self.client_id,
            client_secret: self.client_secret,
        })
    }
}
impl std::fmt::Debug for RevokeTokenInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("RevokeTokenInputBuilder");
        formatter.field("token", &"*** Sensitive Data Redacted ***");
        formatter.field("client_id", &"*** Sensitive Data Redacted ***");
        formatter.field("client_secret", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
