// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the response from the server from the request to get the specified user as an administrator.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct AdminGetUserOutput {
    /// <p>The user name of the user about whom you're receiving information.</p>
    #[doc(hidden)]
    pub username: std::option::Option<std::string::String>,
    /// <p>An array of name-value pairs representing user attributes.</p>
    #[doc(hidden)]
    pub user_attributes: std::option::Option<std::vec::Vec<crate::types::AttributeType>>,
    /// <p>The date the user was created.</p>
    #[doc(hidden)]
    pub user_create_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The date the user was last modified.</p>
    #[doc(hidden)]
    pub user_last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>Indicates that the status is <code>enabled</code>.</p>
    #[doc(hidden)]
    pub enabled: bool,
    /// <p>The user status. Can be one of the following:</p>
    /// <ul>
    /// <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li>
    /// <li> <p>CONFIRMED - User has been confirmed.</p> </li>
    /// <li> <p>ARCHIVED - User is no longer active.</p> </li>
    /// <li> <p>UNKNOWN - User status isn't known.</p> </li>
    /// <li> <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.</p> </li>
    /// <li> <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value before doing anything else. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub user_status: std::option::Option<crate::types::UserStatusType>,
    /// <p> <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.</p>
    #[doc(hidden)]
    pub mfa_options: std::option::Option<std::vec::Vec<crate::types::MfaOptionType>>,
    /// <p>The user's preferred MFA setting.</p>
    #[doc(hidden)]
    pub preferred_mfa_setting: std::option::Option<std::string::String>,
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    #[doc(hidden)]
    pub user_mfa_setting_list: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl AdminGetUserOutput {
    /// <p>The user name of the user about whom you're receiving information.</p>
    pub fn username(&self) -> std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>An array of name-value pairs representing user attributes.</p>
    pub fn user_attributes(&self) -> std::option::Option<&[crate::types::AttributeType]> {
        self.user_attributes.as_deref()
    }
    /// <p>The date the user was created.</p>
    pub fn user_create_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.user_create_date.as_ref()
    }
    /// <p>The date the user was last modified.</p>
    pub fn user_last_modified_date(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.user_last_modified_date.as_ref()
    }
    /// <p>Indicates that the status is <code>enabled</code>.</p>
    pub fn enabled(&self) -> bool {
        self.enabled
    }
    /// <p>The user status. Can be one of the following:</p>
    /// <ul>
    /// <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li>
    /// <li> <p>CONFIRMED - User has been confirmed.</p> </li>
    /// <li> <p>ARCHIVED - User is no longer active.</p> </li>
    /// <li> <p>UNKNOWN - User status isn't known.</p> </li>
    /// <li> <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.</p> </li>
    /// <li> <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value before doing anything else. </p> </li>
    /// </ul>
    pub fn user_status(&self) -> std::option::Option<&crate::types::UserStatusType> {
        self.user_status.as_ref()
    }
    /// <p> <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.</p>
    pub fn mfa_options(&self) -> std::option::Option<&[crate::types::MfaOptionType]> {
        self.mfa_options.as_deref()
    }
    /// <p>The user's preferred MFA setting.</p>
    pub fn preferred_mfa_setting(&self) -> std::option::Option<&str> {
        self.preferred_mfa_setting.as_deref()
    }
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    pub fn user_mfa_setting_list(&self) -> std::option::Option<&[std::string::String]> {
        self.user_mfa_setting_list.as_deref()
    }
}
impl std::fmt::Debug for AdminGetUserOutput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AdminGetUserOutput");
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("user_attributes", &self.user_attributes);
        formatter.field("user_create_date", &self.user_create_date);
        formatter.field("user_last_modified_date", &self.user_last_modified_date);
        formatter.field("enabled", &self.enabled);
        formatter.field("user_status", &self.user_status);
        formatter.field("mfa_options", &self.mfa_options);
        formatter.field("preferred_mfa_setting", &self.preferred_mfa_setting);
        formatter.field("user_mfa_setting_list", &self.user_mfa_setting_list);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl aws_http::request_id::RequestId for AdminGetUserOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl AdminGetUserOutput {
    /// Creates a new builder-style object to manufacture [`AdminGetUserOutput`](crate::operation::admin_get_user::AdminGetUserOutput).
    pub fn builder() -> crate::operation::admin_get_user::builders::AdminGetUserOutputBuilder {
        crate::operation::admin_get_user::builders::AdminGetUserOutputBuilder::default()
    }
}

/// A builder for [`AdminGetUserOutput`](crate::operation::admin_get_user::AdminGetUserOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct AdminGetUserOutputBuilder {
    pub(crate) username: std::option::Option<std::string::String>,
    pub(crate) user_attributes: std::option::Option<std::vec::Vec<crate::types::AttributeType>>,
    pub(crate) user_create_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) user_last_modified_date: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) enabled: std::option::Option<bool>,
    pub(crate) user_status: std::option::Option<crate::types::UserStatusType>,
    pub(crate) mfa_options: std::option::Option<std::vec::Vec<crate::types::MfaOptionType>>,
    pub(crate) preferred_mfa_setting: std::option::Option<std::string::String>,
    pub(crate) user_mfa_setting_list: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl AdminGetUserOutputBuilder {
    /// <p>The user name of the user about whom you're receiving information.</p>
    pub fn username(mut self, input: impl Into<std::string::String>) -> Self {
        self.username = Some(input.into());
        self
    }
    /// <p>The user name of the user about whom you're receiving information.</p>
    pub fn set_username(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// Appends an item to `user_attributes`.
    ///
    /// To override the contents of this collection use [`set_user_attributes`](Self::set_user_attributes).
    ///
    /// <p>An array of name-value pairs representing user attributes.</p>
    pub fn user_attributes(mut self, input: crate::types::AttributeType) -> Self {
        let mut v = self.user_attributes.unwrap_or_default();
        v.push(input);
        self.user_attributes = Some(v);
        self
    }
    /// <p>An array of name-value pairs representing user attributes.</p>
    pub fn set_user_attributes(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::AttributeType>>,
    ) -> Self {
        self.user_attributes = input;
        self
    }
    /// <p>The date the user was created.</p>
    pub fn user_create_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.user_create_date = Some(input);
        self
    }
    /// <p>The date the user was created.</p>
    pub fn set_user_create_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.user_create_date = input;
        self
    }
    /// <p>The date the user was last modified.</p>
    pub fn user_last_modified_date(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.user_last_modified_date = Some(input);
        self
    }
    /// <p>The date the user was last modified.</p>
    pub fn set_user_last_modified_date(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.user_last_modified_date = input;
        self
    }
    /// <p>Indicates that the status is <code>enabled</code>.</p>
    pub fn enabled(mut self, input: bool) -> Self {
        self.enabled = Some(input);
        self
    }
    /// <p>Indicates that the status is <code>enabled</code>.</p>
    pub fn set_enabled(mut self, input: std::option::Option<bool>) -> Self {
        self.enabled = input;
        self
    }
    /// <p>The user status. Can be one of the following:</p>
    /// <ul>
    /// <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li>
    /// <li> <p>CONFIRMED - User has been confirmed.</p> </li>
    /// <li> <p>ARCHIVED - User is no longer active.</p> </li>
    /// <li> <p>UNKNOWN - User status isn't known.</p> </li>
    /// <li> <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.</p> </li>
    /// <li> <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value before doing anything else. </p> </li>
    /// </ul>
    pub fn user_status(mut self, input: crate::types::UserStatusType) -> Self {
        self.user_status = Some(input);
        self
    }
    /// <p>The user status. Can be one of the following:</p>
    /// <ul>
    /// <li> <p>UNCONFIRMED - User has been created but not confirmed.</p> </li>
    /// <li> <p>CONFIRMED - User has been confirmed.</p> </li>
    /// <li> <p>ARCHIVED - User is no longer active.</p> </li>
    /// <li> <p>UNKNOWN - User status isn't known.</p> </li>
    /// <li> <p>RESET_REQUIRED - User is confirmed, but the user must request a code and reset their password before they can sign in.</p> </li>
    /// <li> <p>FORCE_CHANGE_PASSWORD - The user is confirmed and the user can sign in using a temporary password, but on first sign-in, the user must change their password to a new value before doing anything else. </p> </li>
    /// </ul>
    pub fn set_user_status(
        mut self,
        input: std::option::Option<crate::types::UserStatusType>,
    ) -> Self {
        self.user_status = input;
        self
    }
    /// Appends an item to `mfa_options`.
    ///
    /// To override the contents of this collection use [`set_mfa_options`](Self::set_mfa_options).
    ///
    /// <p> <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.</p>
    pub fn mfa_options(mut self, input: crate::types::MfaOptionType) -> Self {
        let mut v = self.mfa_options.unwrap_or_default();
        v.push(input);
        self.mfa_options = Some(v);
        self
    }
    /// <p> <i>This response parameter is no longer supported.</i> It provides information only about SMS MFA configurations. It doesn't provide information about time-based one-time password (TOTP) software token MFA configurations. To look up information about either type of MFA configuration, use UserMFASettingList instead.</p>
    pub fn set_mfa_options(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::MfaOptionType>>,
    ) -> Self {
        self.mfa_options = input;
        self
    }
    /// <p>The user's preferred MFA setting.</p>
    pub fn preferred_mfa_setting(mut self, input: impl Into<std::string::String>) -> Self {
        self.preferred_mfa_setting = Some(input.into());
        self
    }
    /// <p>The user's preferred MFA setting.</p>
    pub fn set_preferred_mfa_setting(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.preferred_mfa_setting = input;
        self
    }
    /// Appends an item to `user_mfa_setting_list`.
    ///
    /// To override the contents of this collection use [`set_user_mfa_setting_list`](Self::set_user_mfa_setting_list).
    ///
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    pub fn user_mfa_setting_list(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.user_mfa_setting_list.unwrap_or_default();
        v.push(input.into());
        self.user_mfa_setting_list = Some(v);
        self
    }
    /// <p>The MFA options that are activated for the user. The possible values in this list are <code>SMS_MFA</code> and <code>SOFTWARE_TOKEN_MFA</code>.</p>
    pub fn set_user_mfa_setting_list(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.user_mfa_setting_list = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`AdminGetUserOutput`](crate::operation::admin_get_user::AdminGetUserOutput).
    pub fn build(self) -> crate::operation::admin_get_user::AdminGetUserOutput {
        crate::operation::admin_get_user::AdminGetUserOutput {
            username: self.username,
            user_attributes: self.user_attributes,
            user_create_date: self.user_create_date,
            user_last_modified_date: self.user_last_modified_date,
            enabled: self.enabled.unwrap_or_default(),
            user_status: self.user_status,
            mfa_options: self.mfa_options,
            preferred_mfa_setting: self.preferred_mfa_setting,
            user_mfa_setting_list: self.user_mfa_setting_list,
            _request_id: self._request_id,
        }
    }
}
impl std::fmt::Debug for AdminGetUserOutputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("AdminGetUserOutputBuilder");
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("user_attributes", &self.user_attributes);
        formatter.field("user_create_date", &self.user_create_date);
        formatter.field("user_last_modified_date", &self.user_last_modified_date);
        formatter.field("enabled", &self.enabled);
        formatter.field("user_status", &self.user_status);
        formatter.field("mfa_options", &self.mfa_options);
        formatter.field("preferred_mfa_setting", &self.preferred_mfa_setting);
        formatter.field("user_mfa_setting_list", &self.user_mfa_setting_list);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
