// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>You can use this parameter to set an MFA configuration that uses the SMS delivery medium.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct AdminSetUserSettingsInput {
    /// <p>The ID of the user pool that contains the user whose options you're setting.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The user name of the user whose options you're setting.</p>
    pub username: ::std::option::Option<::std::string::String>,
    /// <p>You can use this parameter only to set an SMS configuration that uses SMS for delivery.</p>
    pub mfa_options: ::std::option::Option<::std::vec::Vec<crate::types::MfaOptionType>>,
}
impl AdminSetUserSettingsInput {
    /// <p>The ID of the user pool that contains the user whose options you're setting.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The user name of the user whose options you're setting.</p>
    pub fn username(&self) -> ::std::option::Option<&str> {
        self.username.as_deref()
    }
    /// <p>You can use this parameter only to set an SMS configuration that uses SMS for delivery.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.mfa_options.is_none()`.
    pub fn mfa_options(&self) -> &[crate::types::MfaOptionType] {
        self.mfa_options.as_deref().unwrap_or_default()
    }
}
impl ::std::fmt::Debug for AdminSetUserSettingsInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminSetUserSettingsInput");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("mfa_options", &self.mfa_options);
        formatter.finish()
    }
}
impl AdminSetUserSettingsInput {
    /// Creates a new builder-style object to manufacture [`AdminSetUserSettingsInput`](crate::operation::admin_set_user_settings::AdminSetUserSettingsInput).
    pub fn builder() -> crate::operation::admin_set_user_settings::builders::AdminSetUserSettingsInputBuilder {
        crate::operation::admin_set_user_settings::builders::AdminSetUserSettingsInputBuilder::default()
    }
}

/// A builder for [`AdminSetUserSettingsInput`](crate::operation::admin_set_user_settings::AdminSetUserSettingsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct AdminSetUserSettingsInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) username: ::std::option::Option<::std::string::String>,
    pub(crate) mfa_options: ::std::option::Option<::std::vec::Vec<crate::types::MfaOptionType>>,
}
impl AdminSetUserSettingsInputBuilder {
    /// <p>The ID of the user pool that contains the user whose options you're setting.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the user pool that contains the user whose options you're setting.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The ID of the user pool that contains the user whose options you're setting.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The user name of the user whose options you're setting.</p>
    /// This field is required.
    pub fn username(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.username = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user name of the user whose options you're setting.</p>
    pub fn set_username(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.username = input;
        self
    }
    /// <p>The user name of the user whose options you're setting.</p>
    pub fn get_username(&self) -> &::std::option::Option<::std::string::String> {
        &self.username
    }
    /// Appends an item to `mfa_options`.
    ///
    /// To override the contents of this collection use [`set_mfa_options`](Self::set_mfa_options).
    ///
    /// <p>You can use this parameter only to set an SMS configuration that uses SMS for delivery.</p>
    pub fn mfa_options(mut self, input: crate::types::MfaOptionType) -> Self {
        let mut v = self.mfa_options.unwrap_or_default();
        v.push(input);
        self.mfa_options = ::std::option::Option::Some(v);
        self
    }
    /// <p>You can use this parameter only to set an SMS configuration that uses SMS for delivery.</p>
    pub fn set_mfa_options(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::MfaOptionType>>) -> Self {
        self.mfa_options = input;
        self
    }
    /// <p>You can use this parameter only to set an SMS configuration that uses SMS for delivery.</p>
    pub fn get_mfa_options(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::MfaOptionType>> {
        &self.mfa_options
    }
    /// Consumes the builder and constructs a [`AdminSetUserSettingsInput`](crate::operation::admin_set_user_settings::AdminSetUserSettingsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::admin_set_user_settings::AdminSetUserSettingsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::admin_set_user_settings::AdminSetUserSettingsInput {
            user_pool_id: self.user_pool_id,
            username: self.username,
            mfa_options: self.mfa_options,
        })
    }
}
impl ::std::fmt::Debug for AdminSetUserSettingsInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("AdminSetUserSettingsInputBuilder");
        formatter.field("user_pool_id", &self.user_pool_id);
        formatter.field("username", &"*** Sensitive Data Redacted ***");
        formatter.field("mfa_options", &self.mfa_options);
        formatter.finish()
    }
}
