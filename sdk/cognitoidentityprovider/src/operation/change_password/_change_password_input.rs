// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the request to change a user password.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ChangePasswordInput {
    /// <p>The old password.</p>
    pub previous_password: ::std::option::Option<::std::string::String>,
    /// <p>The new password.</p>
    pub proposed_password: ::std::option::Option<::std::string::String>,
    /// <p>A valid access token that Amazon Cognito issued to the user whose password you want to change.</p>
    pub access_token: ::std::option::Option<::std::string::String>,
}
impl ChangePasswordInput {
    /// <p>The old password.</p>
    pub fn previous_password(&self) -> ::std::option::Option<&str> {
        self.previous_password.as_deref()
    }
    /// <p>The new password.</p>
    pub fn proposed_password(&self) -> ::std::option::Option<&str> {
        self.proposed_password.as_deref()
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose password you want to change.</p>
    pub fn access_token(&self) -> ::std::option::Option<&str> {
        self.access_token.as_deref()
    }
}
impl ::std::fmt::Debug for ChangePasswordInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ChangePasswordInput");
        formatter.field("previous_password", &"*** Sensitive Data Redacted ***");
        formatter.field("proposed_password", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ChangePasswordInput {
    /// Creates a new builder-style object to manufacture [`ChangePasswordInput`](crate::operation::change_password::ChangePasswordInput).
    pub fn builder() -> crate::operation::change_password::builders::ChangePasswordInputBuilder {
        crate::operation::change_password::builders::ChangePasswordInputBuilder::default()
    }
}

/// A builder for [`ChangePasswordInput`](crate::operation::change_password::ChangePasswordInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ChangePasswordInputBuilder {
    pub(crate) previous_password: ::std::option::Option<::std::string::String>,
    pub(crate) proposed_password: ::std::option::Option<::std::string::String>,
    pub(crate) access_token: ::std::option::Option<::std::string::String>,
}
impl ChangePasswordInputBuilder {
    /// <p>The old password.</p>
    /// This field is required.
    pub fn previous_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.previous_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The old password.</p>
    pub fn set_previous_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.previous_password = input;
        self
    }
    /// <p>The old password.</p>
    pub fn get_previous_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.previous_password
    }
    /// <p>The new password.</p>
    /// This field is required.
    pub fn proposed_password(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.proposed_password = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The new password.</p>
    pub fn set_proposed_password(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.proposed_password = input;
        self
    }
    /// <p>The new password.</p>
    pub fn get_proposed_password(&self) -> &::std::option::Option<::std::string::String> {
        &self.proposed_password
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose password you want to change.</p>
    /// This field is required.
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose password you want to change.</p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose password you want to change.</p>
    pub fn get_access_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_token
    }
    /// Consumes the builder and constructs a [`ChangePasswordInput`](crate::operation::change_password::ChangePasswordInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::change_password::ChangePasswordInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::change_password::ChangePasswordInput {
            previous_password: self.previous_password,
            proposed_password: self.proposed_password,
            access_token: self.access_token,
        })
    }
}
impl ::std::fmt::Debug for ChangePasswordInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ChangePasswordInputBuilder");
        formatter.field("previous_password", &"*** Sensitive Data Redacted ***");
        formatter.field("proposed_password", &"*** Sensitive Data Redacted ***");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
