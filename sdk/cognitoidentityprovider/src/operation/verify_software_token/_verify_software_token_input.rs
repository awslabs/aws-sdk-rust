// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct VerifySoftwareTokenInput {
    /// <p>A valid access token that Amazon Cognito issued to the user whose software token you want to verify.</p>
    #[doc(hidden)]
    pub access_token: std::option::Option<std::string::String>,
    /// <p>The session that should be passed both ways in challenge-response calls to the service.</p>
    #[doc(hidden)]
    pub session: std::option::Option<std::string::String>,
    /// <p>The one- time password computed using the secret code returned by <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html">AssociateSoftwareToken</a>.</p>
    #[doc(hidden)]
    pub user_code: std::option::Option<std::string::String>,
    /// <p>The friendly device name.</p>
    #[doc(hidden)]
    pub friendly_device_name: std::option::Option<std::string::String>,
}
impl VerifySoftwareTokenInput {
    /// <p>A valid access token that Amazon Cognito issued to the user whose software token you want to verify.</p>
    pub fn access_token(&self) -> std::option::Option<&str> {
        self.access_token.as_deref()
    }
    /// <p>The session that should be passed both ways in challenge-response calls to the service.</p>
    pub fn session(&self) -> std::option::Option<&str> {
        self.session.as_deref()
    }
    /// <p>The one- time password computed using the secret code returned by <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html">AssociateSoftwareToken</a>.</p>
    pub fn user_code(&self) -> std::option::Option<&str> {
        self.user_code.as_deref()
    }
    /// <p>The friendly device name.</p>
    pub fn friendly_device_name(&self) -> std::option::Option<&str> {
        self.friendly_device_name.as_deref()
    }
}
impl std::fmt::Debug for VerifySoftwareTokenInput {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VerifySoftwareTokenInput");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("session", &self.session);
        formatter.field("user_code", &self.user_code);
        formatter.field("friendly_device_name", &self.friendly_device_name);
        formatter.finish()
    }
}
impl VerifySoftwareTokenInput {
    /// Creates a new builder-style object to manufacture [`VerifySoftwareTokenInput`](crate::operation::verify_software_token::VerifySoftwareTokenInput).
    pub fn builder(
    ) -> crate::operation::verify_software_token::builders::VerifySoftwareTokenInputBuilder {
        crate::operation::verify_software_token::builders::VerifySoftwareTokenInputBuilder::default(
        )
    }
}

/// A builder for [`VerifySoftwareTokenInput`](crate::operation::verify_software_token::VerifySoftwareTokenInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default)]
pub struct VerifySoftwareTokenInputBuilder {
    pub(crate) access_token: std::option::Option<std::string::String>,
    pub(crate) session: std::option::Option<std::string::String>,
    pub(crate) user_code: std::option::Option<std::string::String>,
    pub(crate) friendly_device_name: std::option::Option<std::string::String>,
}
impl VerifySoftwareTokenInputBuilder {
    /// <p>A valid access token that Amazon Cognito issued to the user whose software token you want to verify.</p>
    pub fn access_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.access_token = Some(input.into());
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose software token you want to verify.</p>
    pub fn set_access_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p>The session that should be passed both ways in challenge-response calls to the service.</p>
    pub fn session(mut self, input: impl Into<std::string::String>) -> Self {
        self.session = Some(input.into());
        self
    }
    /// <p>The session that should be passed both ways in challenge-response calls to the service.</p>
    pub fn set_session(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.session = input;
        self
    }
    /// <p>The one- time password computed using the secret code returned by <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html">AssociateSoftwareToken</a>.</p>
    pub fn user_code(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_code = Some(input.into());
        self
    }
    /// <p>The one- time password computed using the secret code returned by <a href="https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_AssociateSoftwareToken.html">AssociateSoftwareToken</a>.</p>
    pub fn set_user_code(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_code = input;
        self
    }
    /// <p>The friendly device name.</p>
    pub fn friendly_device_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.friendly_device_name = Some(input.into());
        self
    }
    /// <p>The friendly device name.</p>
    pub fn set_friendly_device_name(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.friendly_device_name = input;
        self
    }
    /// Consumes the builder and constructs a [`VerifySoftwareTokenInput`](crate::operation::verify_software_token::VerifySoftwareTokenInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::verify_software_token::VerifySoftwareTokenInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::verify_software_token::VerifySoftwareTokenInput {
                access_token: self.access_token,
                session: self.session,
                user_code: self.user_code,
                friendly_device_name: self.friendly_device_name,
            },
        )
    }
}
impl std::fmt::Debug for VerifySoftwareTokenInputBuilder {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("VerifySoftwareTokenInputBuilder");
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.field("session", &self.session);
        formatter.field("user_code", &self.user_code);
        formatter.field("friendly_device_name", &self.friendly_device_name);
        formatter.finish()
    }
}
