// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the request to list the user import jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListUserImportJobsInput {
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    pub user_pool_id: ::std::option::Option<::std::string::String>,
    /// <p>The maximum number of import jobs you want the request to return.</p>
    pub max_results: ::std::option::Option<i32>,
    /// <p>An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.</p>
    pub pagination_token: ::std::option::Option<::std::string::String>,
}
impl ListUserImportJobsInput {
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    pub fn user_pool_id(&self) -> ::std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The maximum number of import jobs you want the request to return.</p>
    pub fn max_results(&self) -> ::std::option::Option<i32> {
        self.max_results
    }
    /// <p>An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.</p>
    pub fn pagination_token(&self) -> ::std::option::Option<&str> {
        self.pagination_token.as_deref()
    }
}
impl ListUserImportJobsInput {
    /// Creates a new builder-style object to manufacture [`ListUserImportJobsInput`](crate::operation::list_user_import_jobs::ListUserImportJobsInput).
    pub fn builder() -> crate::operation::list_user_import_jobs::builders::ListUserImportJobsInputBuilder {
        crate::operation::list_user_import_jobs::builders::ListUserImportJobsInputBuilder::default()
    }
}

/// A builder for [`ListUserImportJobsInput`](crate::operation::list_user_import_jobs::ListUserImportJobsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListUserImportJobsInputBuilder {
    pub(crate) user_pool_id: ::std::option::Option<::std::string::String>,
    pub(crate) max_results: ::std::option::Option<i32>,
    pub(crate) pagination_token: ::std::option::Option<::std::string::String>,
}
impl ListUserImportJobsInputBuilder {
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    /// This field is required.
    pub fn user_pool_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.user_pool_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    pub fn set_user_pool_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The user pool ID for the user pool that the users are being imported into.</p>
    pub fn get_user_pool_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.user_pool_id
    }
    /// <p>The maximum number of import jobs you want the request to return.</p>
    /// This field is required.
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of import jobs you want the request to return.</p>
    pub fn set_max_results(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p>The maximum number of import jobs you want the request to return.</p>
    pub fn get_max_results(&self) -> &::std::option::Option<i32> {
        &self.max_results
    }
    /// <p>An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.</p>
    pub fn pagination_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pagination_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.</p>
    pub fn set_pagination_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pagination_token = input;
        self
    }
    /// <p>An identifier that was returned from the previous call to <code>ListUserImportJobs</code>, which can be used to return the next set of import jobs in the list.</p>
    pub fn get_pagination_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.pagination_token
    }
    /// Consumes the builder and constructs a [`ListUserImportJobsInput`](crate::operation::list_user_import_jobs::ListUserImportJobsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_user_import_jobs::ListUserImportJobsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_user_import_jobs::ListUserImportJobsInput {
            user_pool_id: self.user_pool_id,
            max_results: self.max_results,
            pagination_token: self.pagination_token,
        })
    }
}
