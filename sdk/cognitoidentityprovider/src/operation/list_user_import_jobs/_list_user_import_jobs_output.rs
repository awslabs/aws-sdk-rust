// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the response from the server to the request to list the user import jobs.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListUserImportJobsOutput {
    /// <p>The user import jobs.</p>
    pub user_import_jobs: ::std::option::Option<::std::vec::Vec<crate::types::UserImportJobType>>,
    /// <p>An identifier that can be used to return the next set of user import jobs in the list.</p>
    pub pagination_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListUserImportJobsOutput {
    /// <p>The user import jobs.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_import_jobs.is_none()`.
    pub fn user_import_jobs(&self) -> &[crate::types::UserImportJobType] {
        self.user_import_jobs.as_deref().unwrap_or_default()
    }
    /// <p>An identifier that can be used to return the next set of user import jobs in the list.</p>
    pub fn pagination_token(&self) -> ::std::option::Option<&str> {
        self.pagination_token.as_deref()
    }
}
impl ::aws_http::request_id::RequestId for ListUserImportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListUserImportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListUserImportJobsOutput`](crate::operation::list_user_import_jobs::ListUserImportJobsOutput).
    pub fn builder() -> crate::operation::list_user_import_jobs::builders::ListUserImportJobsOutputBuilder {
        crate::operation::list_user_import_jobs::builders::ListUserImportJobsOutputBuilder::default()
    }
}

/// A builder for [`ListUserImportJobsOutput`](crate::operation::list_user_import_jobs::ListUserImportJobsOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListUserImportJobsOutputBuilder {
    pub(crate) user_import_jobs: ::std::option::Option<::std::vec::Vec<crate::types::UserImportJobType>>,
    pub(crate) pagination_token: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl ListUserImportJobsOutputBuilder {
    /// Appends an item to `user_import_jobs`.
    ///
    /// To override the contents of this collection use [`set_user_import_jobs`](Self::set_user_import_jobs).
    ///
    /// <p>The user import jobs.</p>
    pub fn user_import_jobs(mut self, input: crate::types::UserImportJobType) -> Self {
        let mut v = self.user_import_jobs.unwrap_or_default();
        v.push(input);
        self.user_import_jobs = ::std::option::Option::Some(v);
        self
    }
    /// <p>The user import jobs.</p>
    pub fn set_user_import_jobs(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::UserImportJobType>>) -> Self {
        self.user_import_jobs = input;
        self
    }
    /// <p>The user import jobs.</p>
    pub fn get_user_import_jobs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::UserImportJobType>> {
        &self.user_import_jobs
    }
    /// <p>An identifier that can be used to return the next set of user import jobs in the list.</p>
    pub fn pagination_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.pagination_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An identifier that can be used to return the next set of user import jobs in the list.</p>
    pub fn set_pagination_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.pagination_token = input;
        self
    }
    /// <p>An identifier that can be used to return the next set of user import jobs in the list.</p>
    pub fn get_pagination_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.pagination_token
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListUserImportJobsOutput`](crate::operation::list_user_import_jobs::ListUserImportJobsOutput).
    pub fn build(self) -> crate::operation::list_user_import_jobs::ListUserImportJobsOutput {
        crate::operation::list_user_import_jobs::ListUserImportJobsOutput {
            user_import_jobs: self.user_import_jobs,
            pagination_token: self.pagination_token,
            _request_id: self._request_id,
        }
    }
}
