// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Represents the request to delete user attributes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct DeleteUserAttributesInput {
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prependattach the <code>custom:</code> prefix to the front of the attribute name.</p>
    pub user_attribute_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A valid access token that Amazon Cognito issued to the user whose attributes you want to delete.</p>
    pub access_token: ::std::option::Option<::std::string::String>,
}
impl DeleteUserAttributesInput {
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prependattach the <code>custom:</code> prefix to the front of the attribute name.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.user_attribute_names.is_none()`.
    pub fn user_attribute_names(&self) -> &[::std::string::String] {
        self.user_attribute_names.as_deref().unwrap_or_default()
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose attributes you want to delete.</p>
    pub fn access_token(&self) -> ::std::option::Option<&str> {
        self.access_token.as_deref()
    }
}
impl ::std::fmt::Debug for DeleteUserAttributesInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteUserAttributesInput");
        formatter.field("user_attribute_names", &self.user_attribute_names);
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl DeleteUserAttributesInput {
    /// Creates a new builder-style object to manufacture [`DeleteUserAttributesInput`](crate::operation::delete_user_attributes::DeleteUserAttributesInput).
    pub fn builder() -> crate::operation::delete_user_attributes::builders::DeleteUserAttributesInputBuilder {
        crate::operation::delete_user_attributes::builders::DeleteUserAttributesInputBuilder::default()
    }
}

/// A builder for [`DeleteUserAttributesInput`](crate::operation::delete_user_attributes::DeleteUserAttributesInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct DeleteUserAttributesInputBuilder {
    pub(crate) user_attribute_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) access_token: ::std::option::Option<::std::string::String>,
}
impl DeleteUserAttributesInputBuilder {
    /// Appends an item to `user_attribute_names`.
    ///
    /// To override the contents of this collection use [`set_user_attribute_names`](Self::set_user_attribute_names).
    ///
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prependattach the <code>custom:</code> prefix to the front of the attribute name.</p>
    pub fn user_attribute_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.user_attribute_names.unwrap_or_default();
        v.push(input.into());
        self.user_attribute_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prependattach the <code>custom:</code> prefix to the front of the attribute name.</p>
    pub fn set_user_attribute_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.user_attribute_names = input;
        self
    }
    /// <p>An array of strings representing the user attribute names you want to delete.</p>
    /// <p>For custom attributes, you must prependattach the <code>custom:</code> prefix to the front of the attribute name.</p>
    pub fn get_user_attribute_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.user_attribute_names
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose attributes you want to delete.</p>
    /// This field is required.
    pub fn access_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.access_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose attributes you want to delete.</p>
    pub fn set_access_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.access_token = input;
        self
    }
    /// <p>A valid access token that Amazon Cognito issued to the user whose attributes you want to delete.</p>
    pub fn get_access_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.access_token
    }
    /// Consumes the builder and constructs a [`DeleteUserAttributesInput`](crate::operation::delete_user_attributes::DeleteUserAttributesInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_user_attributes::DeleteUserAttributesInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_user_attributes::DeleteUserAttributesInput {
            user_attribute_names: self.user_attribute_names,
            access_token: self.access_token,
        })
    }
}
impl ::std::fmt::Debug for DeleteUserAttributesInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("DeleteUserAttributesInputBuilder");
        formatter.field("user_attribute_names", &self.user_attribute_names);
        formatter.field("access_token", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
