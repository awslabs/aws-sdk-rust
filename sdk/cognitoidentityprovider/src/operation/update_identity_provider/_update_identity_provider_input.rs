// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct UpdateIdentityProviderInput {
    /// <p>The user pool ID.</p>
    #[doc(hidden)]
    pub user_pool_id: std::option::Option<std::string::String>,
    /// <p>The IdP name.</p>
    #[doc(hidden)]
    pub provider_name: std::option::Option<std::string::String>,
    /// <p>The IdP details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.</p>
    #[doc(hidden)]
    pub provider_details:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>The IdP attribute mapping to be changed.</p>
    #[doc(hidden)]
    pub attribute_mapping:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A list of IdP identifiers.</p>
    #[doc(hidden)]
    pub idp_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpdateIdentityProviderInput {
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(&self) -> std::option::Option<&str> {
        self.user_pool_id.as_deref()
    }
    /// <p>The IdP name.</p>
    pub fn provider_name(&self) -> std::option::Option<&str> {
        self.provider_name.as_deref()
    }
    /// <p>The IdP details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.</p>
    pub fn provider_details(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.provider_details.as_ref()
    }
    /// <p>The IdP attribute mapping to be changed.</p>
    pub fn attribute_mapping(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.attribute_mapping.as_ref()
    }
    /// <p>A list of IdP identifiers.</p>
    pub fn idp_identifiers(&self) -> std::option::Option<&[std::string::String]> {
        self.idp_identifiers.as_deref()
    }
}
impl UpdateIdentityProviderInput {
    /// Creates a new builder-style object to manufacture [`UpdateIdentityProviderInput`](crate::operation::update_identity_provider::UpdateIdentityProviderInput).
    pub fn builder(
    ) -> crate::operation::update_identity_provider::builders::UpdateIdentityProviderInputBuilder
    {
        crate::operation::update_identity_provider::builders::UpdateIdentityProviderInputBuilder::default()
    }
}

/// A builder for [`UpdateIdentityProviderInput`](crate::operation::update_identity_provider::UpdateIdentityProviderInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct UpdateIdentityProviderInputBuilder {
    pub(crate) user_pool_id: std::option::Option<std::string::String>,
    pub(crate) provider_name: std::option::Option<std::string::String>,
    pub(crate) provider_details:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) attribute_mapping:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) idp_identifiers: std::option::Option<std::vec::Vec<std::string::String>>,
}
impl UpdateIdentityProviderInputBuilder {
    /// <p>The user pool ID.</p>
    pub fn user_pool_id(mut self, input: impl Into<std::string::String>) -> Self {
        self.user_pool_id = Some(input.into());
        self
    }
    /// <p>The user pool ID.</p>
    pub fn set_user_pool_id(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.user_pool_id = input;
        self
    }
    /// <p>The IdP name.</p>
    pub fn provider_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.provider_name = Some(input.into());
        self
    }
    /// <p>The IdP name.</p>
    pub fn set_provider_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.provider_name = input;
        self
    }
    /// Adds a key-value pair to `provider_details`.
    ///
    /// To override the contents of this collection use [`set_provider_details`](Self::set_provider_details).
    ///
    /// <p>The IdP details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.</p>
    pub fn provider_details(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.provider_details.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.provider_details = Some(hash_map);
        self
    }
    /// <p>The IdP details to be updated, such as <code>MetadataURL</code> and <code>MetadataFile</code>.</p>
    pub fn set_provider_details(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.provider_details = input;
        self
    }
    /// Adds a key-value pair to `attribute_mapping`.
    ///
    /// To override the contents of this collection use [`set_attribute_mapping`](Self::set_attribute_mapping).
    ///
    /// <p>The IdP attribute mapping to be changed.</p>
    pub fn attribute_mapping(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.attribute_mapping.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.attribute_mapping = Some(hash_map);
        self
    }
    /// <p>The IdP attribute mapping to be changed.</p>
    pub fn set_attribute_mapping(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.attribute_mapping = input;
        self
    }
    /// Appends an item to `idp_identifiers`.
    ///
    /// To override the contents of this collection use [`set_idp_identifiers`](Self::set_idp_identifiers).
    ///
    /// <p>A list of IdP identifiers.</p>
    pub fn idp_identifiers(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.idp_identifiers.unwrap_or_default();
        v.push(input.into());
        self.idp_identifiers = Some(v);
        self
    }
    /// <p>A list of IdP identifiers.</p>
    pub fn set_idp_identifiers(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.idp_identifiers = input;
        self
    }
    /// Consumes the builder and constructs a [`UpdateIdentityProviderInput`](crate::operation::update_identity_provider::UpdateIdentityProviderInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::update_identity_provider::UpdateIdentityProviderInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::update_identity_provider::UpdateIdentityProviderInput {
                user_pool_id: self.user_pool_id,
                provider_name: self.provider_name,
                provider_details: self.provider_details,
                attribute_mapping: self.attribute_mapping,
                idp_identifiers: self.idp_identifiers,
            },
        )
    }
}
