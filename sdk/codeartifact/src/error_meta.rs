// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p> The operation did not succeed because of an unauthorized access attempt. </p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p> The operation did not succeed because prerequisites are not met. </p>
    ConflictException(crate::types::error::ConflictException),
    /// <p> The operation did not succeed because of an error that occurred inside CodeArtifact. </p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p> The operation did not succeed because the resource requested is not found in the service. </p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p> The operation did not succeed because it would have exceeded a service limit for your account. </p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p> The operation did not succeed because too many requests are sent to the service. </p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p> The operation did not succeed because a parameter in the request was sent with an invalid value. </p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::associate_external_connection::AssociateExternalConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::associate_external_connection::AssociateExternalConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::associate_external_connection::AssociateExternalConnectionError>
    for Error
{
    fn from(
        err: crate::operation::associate_external_connection::AssociateExternalConnectionError,
    ) -> Self {
        match err {
            crate::operation::associate_external_connection::AssociateExternalConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::associate_external_connection::AssociateExternalConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::associate_external_connection::AssociateExternalConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::associate_external_connection::AssociateExternalConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::associate_external_connection::AssociateExternalConnectionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::associate_external_connection::AssociateExternalConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::associate_external_connection::AssociateExternalConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::associate_external_connection::AssociateExternalConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::copy_package_versions::CopyPackageVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::copy_package_versions::CopyPackageVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::copy_package_versions::CopyPackageVersionsError> for Error {
    fn from(err: crate::operation::copy_package_versions::CopyPackageVersionsError) -> Self {
        match err {
            crate::operation::copy_package_versions::CopyPackageVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::copy_package_versions::CopyPackageVersionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::copy_package_versions::CopyPackageVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::copy_package_versions::CopyPackageVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::copy_package_versions::CopyPackageVersionsError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::copy_package_versions::CopyPackageVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::copy_package_versions::CopyPackageVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::copy_package_versions::CopyPackageVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::create_domain::CreateDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_domain::CreateDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_domain::CreateDomainError> for Error {
    fn from(err: crate::operation::create_domain::CreateDomainError) -> Self {
        match err {
            crate::operation::create_domain::CreateDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::create_domain::CreateDomainError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::create_domain::CreateDomainError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_domain::CreateDomainError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::create_domain::CreateDomainError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_domain::CreateDomainError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::create_domain::CreateDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::create_domain::CreateDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::create_repository::CreateRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::create_repository::CreateRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_repository::CreateRepositoryError> for Error {
    fn from(err: crate::operation::create_repository::CreateRepositoryError) -> Self {
        match err {
            crate::operation::create_repository::CreateRepositoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_repository::CreateRepositoryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_repository::CreateRepositoryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::create_repository::CreateRepositoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::create_repository::CreateRepositoryError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::create_repository::CreateRepositoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_repository::CreateRepositoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_repository::CreateRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::delete_domain::DeleteDomainError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_domain::DeleteDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_domain::DeleteDomainError> for Error {
    fn from(err: crate::operation::delete_domain::DeleteDomainError) -> Self {
        match err {
            crate::operation::delete_domain::DeleteDomainError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::ConflictException(inner) => {
                Error::ConflictException(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::delete_domain::DeleteDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError>
    for Error
{
    fn from(
        err: crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError,
    ) -> Self {
        match err {
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_domain_permissions_policy::DeleteDomainPermissionsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_package_versions::DeletePackageVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_package_versions::DeletePackageVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_package_versions::DeletePackageVersionsError> for Error {
    fn from(err: crate::operation::delete_package_versions::DeletePackageVersionsError) -> Self {
        match err {
            crate::operation::delete_package_versions::DeletePackageVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_package_versions::DeletePackageVersionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_package_versions::DeletePackageVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_package_versions::DeletePackageVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_package_versions::DeletePackageVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_package_versions::DeletePackageVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_package_versions::DeletePackageVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::delete_repository::DeleteRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::delete_repository::DeleteRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_repository::DeleteRepositoryError> for Error {
    fn from(err: crate::operation::delete_repository::DeleteRepositoryError) -> Self {
        match err {
            crate::operation::delete_repository::DeleteRepositoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_repository::DeleteRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError> for Error {
    fn from(err: crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError) -> Self {
        match err {
            crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_repository_permissions_policy::DeleteRepositoryPermissionsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_domain::DescribeDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_domain::DescribeDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_domain::DescribeDomainError> for Error {
    fn from(err: crate::operation::describe_domain::DescribeDomainError) -> Self {
        match err {
            crate::operation::describe_domain::DescribeDomainError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_domain::DescribeDomainError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_domain::DescribeDomainError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_domain::DescribeDomainError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_domain::DescribeDomainError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::describe_domain::DescribeDomainError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_package::DescribePackageError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_package::DescribePackageError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_package::DescribePackageError> for Error {
    fn from(err: crate::operation::describe_package::DescribePackageError) -> Self {
        match err {
            crate::operation::describe_package::DescribePackageError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::describe_package::DescribePackageError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::describe_package::DescribePackageError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_package::DescribePackageError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::describe_package::DescribePackageError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::describe_package::DescribePackageError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_package_version::DescribePackageVersionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_package_version::DescribePackageVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_package_version::DescribePackageVersionError> for Error {
    fn from(err: crate::operation::describe_package_version::DescribePackageVersionError) -> Self {
        match err {
            crate::operation::describe_package_version::DescribePackageVersionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_package_version::DescribePackageVersionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::describe_package_version::DescribePackageVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_package_version::DescribePackageVersionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_package_version::DescribePackageVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_package_version::DescribePackageVersionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_package_version::DescribePackageVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::describe_repository::DescribeRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::describe_repository::DescribeRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_repository::DescribeRepositoryError> for Error {
    fn from(err: crate::operation::describe_repository::DescribeRepositoryError) -> Self {
        match err {
            crate::operation::describe_repository::DescribeRepositoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::describe_repository::DescribeRepositoryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_repository::DescribeRepositoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::describe_repository::DescribeRepositoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_repository::DescribeRepositoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_repository::DescribeRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::disassociate_external_connection::DisassociateExternalConnectionError>
    for Error
{
    fn from(
        err: crate::operation::disassociate_external_connection::DisassociateExternalConnectionError,
    ) -> Self {
        match err {
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::disassociate_external_connection::DisassociateExternalConnectionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::dispose_package_versions::DisposePackageVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::dispose_package_versions::DisposePackageVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::dispose_package_versions::DisposePackageVersionsError> for Error {
    fn from(err: crate::operation::dispose_package_versions::DisposePackageVersionsError) -> Self {
        match err {
            crate::operation::dispose_package_versions::DisposePackageVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::dispose_package_versions::DisposePackageVersionsError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::dispose_package_versions::DisposePackageVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::dispose_package_versions::DisposePackageVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::dispose_package_versions::DisposePackageVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::dispose_package_versions::DisposePackageVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::dispose_package_versions::DisposePackageVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_authorization_token::GetAuthorizationTokenError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_authorization_token::GetAuthorizationTokenError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_authorization_token::GetAuthorizationTokenError> for Error {
    fn from(err: crate::operation::get_authorization_token::GetAuthorizationTokenError) -> Self {
        match err {
            crate::operation::get_authorization_token::GetAuthorizationTokenError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_authorization_token::GetAuthorizationTokenError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_authorization_token::GetAuthorizationTokenError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_authorization_token::GetAuthorizationTokenError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_authorization_token::GetAuthorizationTokenError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_authorization_token::GetAuthorizationTokenError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError>
    for Error
{
    fn from(
        err: crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError,
    ) -> Self {
        match err {
            crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_domain_permissions_policy::GetDomainPermissionsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_package_version_asset::GetPackageVersionAssetError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_package_version_asset::GetPackageVersionAssetError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_package_version_asset::GetPackageVersionAssetError> for Error {
    fn from(err: crate::operation::get_package_version_asset::GetPackageVersionAssetError) -> Self {
        match err {
            crate::operation::get_package_version_asset::GetPackageVersionAssetError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_package_version_asset::GetPackageVersionAssetError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::get_package_version_asset::GetPackageVersionAssetError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_package_version_asset::GetPackageVersionAssetError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_package_version_asset::GetPackageVersionAssetError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_package_version_asset::GetPackageVersionAssetError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_package_version_asset::GetPackageVersionAssetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_package_version_readme::GetPackageVersionReadmeError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_package_version_readme::GetPackageVersionReadmeError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_package_version_readme::GetPackageVersionReadmeError> for Error {
    fn from(
        err: crate::operation::get_package_version_readme::GetPackageVersionReadmeError,
    ) -> Self {
        match err {
            crate::operation::get_package_version_readme::GetPackageVersionReadmeError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_package_version_readme::GetPackageVersionReadmeError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_package_version_readme::GetPackageVersionReadmeError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_package_version_readme::GetPackageVersionReadmeError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_package_version_readme::GetPackageVersionReadmeError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_package_version_readme::GetPackageVersionReadmeError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_repository_endpoint::GetRepositoryEndpointError> for Error {
    fn from(err: crate::operation::get_repository_endpoint::GetRepositoryEndpointError) -> Self {
        match err {
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError>
    for Error
{
    fn from(
        err: crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError,
    ) -> Self {
        match err {
            crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::get_repository_permissions_policy::GetRepositoryPermissionsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_domains::ListDomainsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::list_domains::ListDomainsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_domains::ListDomainsError> for Error {
    fn from(err: crate::operation::list_domains::ListDomainsError) -> Self {
        match err {
            crate::operation::list_domains::ListDomainsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_domains::ListDomainsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_domains::ListDomainsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_domains::ListDomainsError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_domains::ListDomainsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::list_packages::ListPackagesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_packages::ListPackagesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_packages::ListPackagesError> for Error {
    fn from(err: crate::operation::list_packages::ListPackagesError) -> Self {
        match err {
            crate::operation::list_packages::ListPackagesError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::list_packages::ListPackagesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_packages::ListPackagesError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::list_packages::ListPackagesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::list_packages::ListPackagesError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::list_packages::ListPackagesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_package_version_assets::ListPackageVersionAssetsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_package_version_assets::ListPackageVersionAssetsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_package_version_assets::ListPackageVersionAssetsError> for Error {
    fn from(
        err: crate::operation::list_package_version_assets::ListPackageVersionAssetsError,
    ) -> Self {
        match err {
            crate::operation::list_package_version_assets::ListPackageVersionAssetsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_package_version_assets::ListPackageVersionAssetsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_package_version_assets::ListPackageVersionAssetsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_package_version_assets::ListPackageVersionAssetsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_package_version_assets::ListPackageVersionAssetsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_package_version_assets::ListPackageVersionAssetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError>
    for Error
{
    fn from(
        err: crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError,
    ) -> Self {
        match err {
            crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_package_version_dependencies::ListPackageVersionDependenciesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_package_versions::ListPackageVersionsError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_package_versions::ListPackageVersionsError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_package_versions::ListPackageVersionsError> for Error {
    fn from(err: crate::operation::list_package_versions::ListPackageVersionsError) -> Self {
        match err {
            crate::operation::list_package_versions::ListPackageVersionsError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_package_versions::ListPackageVersionsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_package_versions::ListPackageVersionsError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_package_versions::ListPackageVersionsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_package_versions::ListPackageVersionsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_package_versions::ListPackageVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_repositories::ListRepositoriesError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_repositories::ListRepositoriesError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_repositories::ListRepositoriesError> for Error {
    fn from(err: crate::operation::list_repositories::ListRepositoriesError) -> Self {
        match err {
            crate::operation::list_repositories::ListRepositoriesError::AccessDeniedException(
                inner,
            ) => Error::AccessDeniedException(inner),
            crate::operation::list_repositories::ListRepositoriesError::InternalServerException(
                inner,
            ) => Error::InternalServerException(inner),
            crate::operation::list_repositories::ListRepositoriesError::ThrottlingException(
                inner,
            ) => Error::ThrottlingException(inner),
            crate::operation::list_repositories::ListRepositoriesError::ValidationException(
                inner,
            ) => Error::ValidationException(inner),
            crate::operation::list_repositories::ListRepositoriesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError> for Error {
    fn from(
        err: crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError,
    ) -> Self {
        match err {
            crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_repositories_in_domain::ListRepositoriesInDomainError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::list_tags_for_resource::ListTagsForResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError>
    for Error
{
    fn from(
        err: crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError,
    ) -> Self {
        match err {
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError>
    for Error
{
    fn from(
        err: crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError,
    ) -> Self {
        match err {
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError, R>> for Error where R: Send + Sync + std::fmt::Debug + 'static {
    fn from(err: aws_smithy_http::result::SdkError<crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                                            aws_smithy_types::error::Unhandled::builder()
                                                .meta(aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                                                .source(err)
                                                .build()
                                        ),
        }
    }
}
impl From<crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError>
    for Error
{
    fn from(
        err: crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError,
    ) -> Self {
        match err {
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::operation::tag_resource::TagResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(
                inner,
            ) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<aws_smithy_http::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::untag_resource::UntagResourceError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(
                inner,
            ) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => {
                Error::ValidationException(inner)
            }
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError>
    for Error
{
    fn from(
        err: crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError,
    ) -> Self {
        match err {
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_package_versions_status::UpdatePackageVersionsStatusError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<
            crate::operation::update_repository::UpdateRepositoryError,
            R,
        >,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::operation::update_repository::UpdateRepositoryError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_repository::UpdateRepositoryError> for Error {
    fn from(err: crate::operation::update_repository::UpdateRepositoryError) -> Self {
        match err {
            crate::operation::update_repository::UpdateRepositoryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_repository::UpdateRepositoryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::update_repository::UpdateRepositoryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::update_repository::UpdateRepositoryError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::update_repository::UpdateRepositoryError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::update_repository::UpdateRepositoryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_repository::UpdateRepositoryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_repository::UpdateRepositoryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
