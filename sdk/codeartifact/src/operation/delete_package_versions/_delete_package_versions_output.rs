// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePackageVersionsOutput {
    /// <p> A list of the package versions that were successfully deleted. The status of every successful version will be <code>Deleted</code>. </p>
    #[doc(hidden)]
    pub successful_versions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::SuccessfulPackageVersionInfo>,
    >,
    /// <p> A <code>PackageVersionError</code> object that contains a map of errors codes for the deleted package that failed. The possible error codes are: </p>
    /// <ul>
    /// <li> <p> <code>ALREADY_EXISTS</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>
    /// <li> <p> <code>NOT_ALLOWED</code> </p> </li>
    /// <li> <p> <code>NOT_FOUND</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub failed_versions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::PackageVersionError>,
    >,
    _request_id: Option<String>,
}
impl DeletePackageVersionsOutput {
    /// <p> A list of the package versions that were successfully deleted. The status of every successful version will be <code>Deleted</code>. </p>
    pub fn successful_versions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::SuccessfulPackageVersionInfo>,
    > {
        self.successful_versions.as_ref()
    }
    /// <p> A <code>PackageVersionError</code> object that contains a map of errors codes for the deleted package that failed. The possible error codes are: </p>
    /// <ul>
    /// <li> <p> <code>ALREADY_EXISTS</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>
    /// <li> <p> <code>NOT_ALLOWED</code> </p> </li>
    /// <li> <p> <code>NOT_FOUND</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// </ul>
    pub fn failed_versions(
        &self,
    ) -> std::option::Option<
        &std::collections::HashMap<std::string::String, crate::types::PackageVersionError>,
    > {
        self.failed_versions.as_ref()
    }
}
impl aws_http::request_id::RequestId for DeletePackageVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DeletePackageVersionsOutput {
    /// Creates a new builder-style object to manufacture [`DeletePackageVersionsOutput`](crate::operation::delete_package_versions::DeletePackageVersionsOutput).
    pub fn builder(
    ) -> crate::operation::delete_package_versions::builders::DeletePackageVersionsOutputBuilder
    {
        crate::operation::delete_package_versions::builders::DeletePackageVersionsOutputBuilder::default()
    }
}

/// A builder for [`DeletePackageVersionsOutput`](crate::operation::delete_package_versions::DeletePackageVersionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeletePackageVersionsOutputBuilder {
    pub(crate) successful_versions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::SuccessfulPackageVersionInfo>,
    >,
    pub(crate) failed_versions: std::option::Option<
        std::collections::HashMap<std::string::String, crate::types::PackageVersionError>,
    >,
    _request_id: Option<String>,
}
impl DeletePackageVersionsOutputBuilder {
    /// Adds a key-value pair to `successful_versions`.
    ///
    /// To override the contents of this collection use [`set_successful_versions`](Self::set_successful_versions).
    ///
    /// <p> A list of the package versions that were successfully deleted. The status of every successful version will be <code>Deleted</code>. </p>
    pub fn successful_versions(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::SuccessfulPackageVersionInfo,
    ) -> Self {
        let mut hash_map = self.successful_versions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.successful_versions = Some(hash_map);
        self
    }
    /// <p> A list of the package versions that were successfully deleted. The status of every successful version will be <code>Deleted</code>. </p>
    pub fn set_successful_versions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<
                std::string::String,
                crate::types::SuccessfulPackageVersionInfo,
            >,
        >,
    ) -> Self {
        self.successful_versions = input;
        self
    }
    /// Adds a key-value pair to `failed_versions`.
    ///
    /// To override the contents of this collection use [`set_failed_versions`](Self::set_failed_versions).
    ///
    /// <p> A <code>PackageVersionError</code> object that contains a map of errors codes for the deleted package that failed. The possible error codes are: </p>
    /// <ul>
    /// <li> <p> <code>ALREADY_EXISTS</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>
    /// <li> <p> <code>NOT_ALLOWED</code> </p> </li>
    /// <li> <p> <code>NOT_FOUND</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// </ul>
    pub fn failed_versions(
        mut self,
        k: impl Into<std::string::String>,
        v: crate::types::PackageVersionError,
    ) -> Self {
        let mut hash_map = self.failed_versions.unwrap_or_default();
        hash_map.insert(k.into(), v);
        self.failed_versions = Some(hash_map);
        self
    }
    /// <p> A <code>PackageVersionError</code> object that contains a map of errors codes for the deleted package that failed. The possible error codes are: </p>
    /// <ul>
    /// <li> <p> <code>ALREADY_EXISTS</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>
    /// <li> <p> <code>NOT_ALLOWED</code> </p> </li>
    /// <li> <p> <code>NOT_FOUND</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// </ul>
    pub fn set_failed_versions(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, crate::types::PackageVersionError>,
        >,
    ) -> Self {
        self.failed_versions = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DeletePackageVersionsOutput`](crate::operation::delete_package_versions::DeletePackageVersionsOutput).
    pub fn build(self) -> crate::operation::delete_package_versions::DeletePackageVersionsOutput {
        crate::operation::delete_package_versions::DeletePackageVersionsOutput {
            successful_versions: self.successful_versions,
            failed_versions: self.failed_versions,
            _request_id: self._request_id,
        }
    }
}
