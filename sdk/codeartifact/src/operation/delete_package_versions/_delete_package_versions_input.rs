// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeletePackageVersionsInput {
    /// <p> The name of the domain that contains the package to delete. </p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    #[doc(hidden)]
    pub domain_owner: std::option::Option<std::string::String>,
    /// <p> The name of the repository that contains the package versions to delete. </p>
    #[doc(hidden)]
    pub repository: std::option::Option<std::string::String>,
    /// <p> The format of the package versions to delete. </p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::PackageFormat>,
    /// <p>The namespace of the package versions to be deleted. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when deleting Maven package versions. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p> The name of the package with the versions to delete. </p>
    #[doc(hidden)]
    pub package: std::option::Option<std::string::String>,
    /// <p> An array of strings that specify the versions of the package to delete. </p>
    #[doc(hidden)]
    pub versions: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p> The expected status of the package version to delete. </p>
    #[doc(hidden)]
    pub expected_status: std::option::Option<crate::types::PackageVersionStatus>,
}
impl DeletePackageVersionsInput {
    /// <p> The name of the domain that contains the package to delete. </p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(&self) -> std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p> The name of the repository that contains the package versions to delete. </p>
    pub fn repository(&self) -> std::option::Option<&str> {
        self.repository.as_deref()
    }
    /// <p> The format of the package versions to delete. </p>
    pub fn format(&self) -> std::option::Option<&crate::types::PackageFormat> {
        self.format.as_ref()
    }
    /// <p>The namespace of the package versions to be deleted. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when deleting Maven package versions. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p> The name of the package with the versions to delete. </p>
    pub fn package(&self) -> std::option::Option<&str> {
        self.package.as_deref()
    }
    /// <p> An array of strings that specify the versions of the package to delete. </p>
    pub fn versions(&self) -> std::option::Option<&[std::string::String]> {
        self.versions.as_deref()
    }
    /// <p> The expected status of the package version to delete. </p>
    pub fn expected_status(&self) -> std::option::Option<&crate::types::PackageVersionStatus> {
        self.expected_status.as_ref()
    }
}
impl DeletePackageVersionsInput {
    /// Creates a new builder-style object to manufacture [`DeletePackageVersionsInput`](crate::operation::delete_package_versions::DeletePackageVersionsInput).
    pub fn builder(
    ) -> crate::operation::delete_package_versions::builders::DeletePackageVersionsInputBuilder
    {
        crate::operation::delete_package_versions::builders::DeletePackageVersionsInputBuilder::default()
    }
}

/// A builder for [`DeletePackageVersionsInput`](crate::operation::delete_package_versions::DeletePackageVersionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeletePackageVersionsInputBuilder {
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) domain_owner: std::option::Option<std::string::String>,
    pub(crate) repository: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::PackageFormat>,
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) package: std::option::Option<std::string::String>,
    pub(crate) versions: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) expected_status: std::option::Option<crate::types::PackageVersionStatus>,
}
impl DeletePackageVersionsInputBuilder {
    /// <p> The name of the domain that contains the package to delete. </p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p> The name of the domain that contains the package to delete. </p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_owner = Some(input.into());
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn set_domain_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p> The name of the repository that contains the package versions to delete. </p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository = Some(input.into());
        self
    }
    /// <p> The name of the repository that contains the package versions to delete. </p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p> The format of the package versions to delete. </p>
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p> The format of the package versions to delete. </p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::PackageFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The namespace of the package versions to be deleted. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when deleting Maven package versions. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace of the package versions to be deleted. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when deleting Maven package versions. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p> The name of the package with the versions to delete. </p>
    pub fn package(mut self, input: impl Into<std::string::String>) -> Self {
        self.package = Some(input.into());
        self
    }
    /// <p> The name of the package with the versions to delete. </p>
    pub fn set_package(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package = input;
        self
    }
    /// Appends an item to `versions`.
    ///
    /// To override the contents of this collection use [`set_versions`](Self::set_versions).
    ///
    /// <p> An array of strings that specify the versions of the package to delete. </p>
    pub fn versions(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.versions.unwrap_or_default();
        v.push(input.into());
        self.versions = Some(v);
        self
    }
    /// <p> An array of strings that specify the versions of the package to delete. </p>
    pub fn set_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.versions = input;
        self
    }
    /// <p> The expected status of the package version to delete. </p>
    pub fn expected_status(mut self, input: crate::types::PackageVersionStatus) -> Self {
        self.expected_status = Some(input);
        self
    }
    /// <p> The expected status of the package version to delete. </p>
    pub fn set_expected_status(
        mut self,
        input: std::option::Option<crate::types::PackageVersionStatus>,
    ) -> Self {
        self.expected_status = input;
        self
    }
    /// Consumes the builder and constructs a [`DeletePackageVersionsInput`](crate::operation::delete_package_versions::DeletePackageVersionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::delete_package_versions::DeletePackageVersionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::delete_package_versions::DeletePackageVersionsInput {
                domain: self.domain,
                domain_owner: self.domain_owner,
                repository: self.repository,
                format: self.format,
                namespace: self.namespace,
                package: self.package,
                versions: self.versions,
                expected_status: self.expected_status,
            },
        )
    }
}
