// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutRepositoryPermissionsPolicyInput {
    /// <p> The name of the domain containing the repository to set the resource policy on. </p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    #[doc(hidden)]
    pub domain_owner: std::option::Option<std::string::String>,
    /// <p> The name of the repository to set the resource policy on. </p>
    #[doc(hidden)]
    pub repository: std::option::Option<std::string::String>,
    /// <p> Sets the revision of the resource policy that specifies permissions to access the repository. This revision is used for optimistic locking, which prevents others from overwriting your changes to the repository's resource policy. </p>
    #[doc(hidden)]
    pub policy_revision: std::option::Option<std::string::String>,
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository. </p>
    #[doc(hidden)]
    pub policy_document: std::option::Option<std::string::String>,
}
impl PutRepositoryPermissionsPolicyInput {
    /// <p> The name of the domain containing the repository to set the resource policy on. </p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(&self) -> std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p> The name of the repository to set the resource policy on. </p>
    pub fn repository(&self) -> std::option::Option<&str> {
        self.repository.as_deref()
    }
    /// <p> Sets the revision of the resource policy that specifies permissions to access the repository. This revision is used for optimistic locking, which prevents others from overwriting your changes to the repository's resource policy. </p>
    pub fn policy_revision(&self) -> std::option::Option<&str> {
        self.policy_revision.as_deref()
    }
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository. </p>
    pub fn policy_document(&self) -> std::option::Option<&str> {
        self.policy_document.as_deref()
    }
}
impl PutRepositoryPermissionsPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutRepositoryPermissionsPolicyInput`](crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyInput).
    pub fn builder() -> crate::operation::put_repository_permissions_policy::builders::PutRepositoryPermissionsPolicyInputBuilder{
        crate::operation::put_repository_permissions_policy::builders::PutRepositoryPermissionsPolicyInputBuilder::default()
    }
}

/// A builder for [`PutRepositoryPermissionsPolicyInput`](crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutRepositoryPermissionsPolicyInputBuilder {
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) domain_owner: std::option::Option<std::string::String>,
    pub(crate) repository: std::option::Option<std::string::String>,
    pub(crate) policy_revision: std::option::Option<std::string::String>,
    pub(crate) policy_document: std::option::Option<std::string::String>,
}
impl PutRepositoryPermissionsPolicyInputBuilder {
    /// <p> The name of the domain containing the repository to set the resource policy on. </p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p> The name of the domain containing the repository to set the resource policy on. </p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_owner = Some(input.into());
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn set_domain_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p> The name of the repository to set the resource policy on. </p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository = Some(input.into());
        self
    }
    /// <p> The name of the repository to set the resource policy on. </p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p> Sets the revision of the resource policy that specifies permissions to access the repository. This revision is used for optimistic locking, which prevents others from overwriting your changes to the repository's resource policy. </p>
    pub fn policy_revision(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_revision = Some(input.into());
        self
    }
    /// <p> Sets the revision of the resource policy that specifies permissions to access the repository. This revision is used for optimistic locking, which prevents others from overwriting your changes to the repository's resource policy. </p>
    pub fn set_policy_revision(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_revision = input;
        self
    }
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository. </p>
    pub fn policy_document(mut self, input: impl Into<std::string::String>) -> Self {
        self.policy_document = Some(input.into());
        self
    }
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository. </p>
    pub fn set_policy_document(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.policy_document = input;
        self
    }
    /// Consumes the builder and constructs a [`PutRepositoryPermissionsPolicyInput`](crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::put_repository_permissions_policy::PutRepositoryPermissionsPolicyInput {
                domain: self.domain
                ,
                domain_owner: self.domain_owner
                ,
                repository: self.repository
                ,
                policy_revision: self.policy_revision
                ,
                policy_document: self.policy_document
                ,
            }
        )
    }
}
