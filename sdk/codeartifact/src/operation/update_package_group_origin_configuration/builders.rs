// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::update_package_group_origin_configuration::_update_package_group_origin_configuration_output::UpdatePackageGroupOriginConfigurationOutputBuilder;

pub use crate::operation::update_package_group_origin_configuration::_update_package_group_origin_configuration_input::UpdatePackageGroupOriginConfigurationInputBuilder;

impl crate::operation::update_package_group_origin_configuration::builders::UpdatePackageGroupOriginConfigurationInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.update_package_group_origin_configuration();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `UpdatePackageGroupOriginConfiguration`.
///
/// <p>Updates the package origin configuration for a package group.</p>
/// <p>The package origin configuration determines how new versions of a package can be added to a repository. You can allow or block direct publishing of new package versions, or ingestion and retaining of new package versions from an external connection or upstream source. For more information about package group origin controls and configuration, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/package-group-origin-controls.html">Package group origin controls</a> in the <i>CodeArtifact User Guide</i>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct UpdatePackageGroupOriginConfigurationFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::update_package_group_origin_configuration::builders::UpdatePackageGroupOriginConfigurationInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationOutput,
        crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationError,
    > for UpdatePackageGroupOriginConfigurationFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationOutput,
            crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl UpdatePackageGroupOriginConfigurationFluentBuilder {
    /// Creates a new `UpdatePackageGroupOriginConfiguration`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the UpdatePackageGroupOriginConfiguration as a reference.
    pub fn as_input(
        &self,
    ) -> &crate::operation::update_package_group_origin_configuration::builders::UpdatePackageGroupOriginConfigurationInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins =
            crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfiguration::operation_runtime_plugins(
                self.handle.runtime_plugins.clone(),
                &self.handle.conf,
                self.config_override,
            );
        crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfiguration::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationOutput,
        crate::operation::update_package_group_origin_configuration::UpdatePackageGroupOriginConfigurationError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the domain which contains the package group for which to update the origin configuration.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The name of the domain which contains the package group for which to update the origin configuration.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>The name of the domain which contains the package group for which to update the origin configuration.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain()
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_owner(input.into());
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_owner(input);
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_owner()
    }
    /// <p>The pattern of the package group for which to update the origin configuration.</p>
    pub fn package_group(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.package_group(input.into());
        self
    }
    /// <p>The pattern of the package group for which to update the origin configuration.</p>
    pub fn set_package_group(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_package_group(input);
        self
    }
    /// <p>The pattern of the package group for which to update the origin configuration.</p>
    pub fn get_package_group(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_package_group()
    }
    ///
    /// Adds a key-value pair to `restrictions`.
    ///
    /// To override the contents of this collection use [`set_restrictions`](Self::set_restrictions).
    ///
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn restrictions(mut self, k: crate::types::PackageGroupOriginRestrictionType, v: crate::types::PackageGroupOriginRestrictionMode) -> Self {
        self.inner = self.inner.restrictions(k, v);
        self
    }
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn set_restrictions(
        mut self,
        input: ::std::option::Option<
            ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestrictionMode>,
        >,
    ) -> Self {
        self.inner = self.inner.set_restrictions(input);
        self
    }
    /// <p>The origin configuration settings that determine how package versions can enter repositories.</p>
    pub fn get_restrictions(
        &self,
    ) -> &::std::option::Option<
        ::std::collections::HashMap<crate::types::PackageGroupOriginRestrictionType, crate::types::PackageGroupOriginRestrictionMode>,
    > {
        self.inner.get_restrictions()
    }
    ///
    /// Appends an item to `addAllowedRepositories`.
    ///
    /// To override the contents of this collection use [`set_add_allowed_repositories`](Self::set_add_allowed_repositories).
    ///
    /// <p>The repository name and restrictions to add to the allowed repository list of the specified package group.</p>
    pub fn add_allowed_repositories(mut self, input: crate::types::PackageGroupAllowedRepository) -> Self {
        self.inner = self.inner.add_allowed_repositories(input);
        self
    }
    /// <p>The repository name and restrictions to add to the allowed repository list of the specified package group.</p>
    pub fn set_add_allowed_repositories(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>>,
    ) -> Self {
        self.inner = self.inner.set_add_allowed_repositories(input);
        self
    }
    /// <p>The repository name and restrictions to add to the allowed repository list of the specified package group.</p>
    pub fn get_add_allowed_repositories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>> {
        self.inner.get_add_allowed_repositories()
    }
    ///
    /// Appends an item to `removeAllowedRepositories`.
    ///
    /// To override the contents of this collection use [`set_remove_allowed_repositories`](Self::set_remove_allowed_repositories).
    ///
    /// <p>The repository name and restrictions to remove from the allowed repository list of the specified package group.</p>
    pub fn remove_allowed_repositories(mut self, input: crate::types::PackageGroupAllowedRepository) -> Self {
        self.inner = self.inner.remove_allowed_repositories(input);
        self
    }
    /// <p>The repository name and restrictions to remove from the allowed repository list of the specified package group.</p>
    pub fn set_remove_allowed_repositories(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>>,
    ) -> Self {
        self.inner = self.inner.set_remove_allowed_repositories(input);
        self
    }
    /// <p>The repository name and restrictions to remove from the allowed repository list of the specified package group.</p>
    pub fn get_remove_allowed_repositories(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PackageGroupAllowedRepository>> {
        self.inner.get_remove_allowed_repositories()
    }
}
