// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PutDomainPermissionsPolicyInput {
    /// <p> The name of the domain on which to set the resource policy. </p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub domain_owner: ::std::option::Option<::std::string::String>,
    /// <p> The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. </p>
    pub policy_revision: ::std::option::Option<::std::string::String>,
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. </p>
    pub policy_document: ::std::option::Option<::std::string::String>,
}
impl PutDomainPermissionsPolicyInput {
    /// <p> The name of the domain on which to set the resource policy. </p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(&self) -> ::std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p> The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. </p>
    pub fn policy_revision(&self) -> ::std::option::Option<&str> {
        self.policy_revision.as_deref()
    }
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. </p>
    pub fn policy_document(&self) -> ::std::option::Option<&str> {
        self.policy_document.as_deref()
    }
}
impl PutDomainPermissionsPolicyInput {
    /// Creates a new builder-style object to manufacture [`PutDomainPermissionsPolicyInput`](crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyInput).
    pub fn builder() -> crate::operation::put_domain_permissions_policy::builders::PutDomainPermissionsPolicyInputBuilder {
        crate::operation::put_domain_permissions_policy::builders::PutDomainPermissionsPolicyInputBuilder::default()
    }
}

/// A builder for [`PutDomainPermissionsPolicyInput`](crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PutDomainPermissionsPolicyInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_owner: ::std::option::Option<::std::string::String>,
    pub(crate) policy_revision: ::std::option::Option<::std::string::String>,
    pub(crate) policy_document: ::std::option::Option<::std::string::String>,
}
impl PutDomainPermissionsPolicyInputBuilder {
    /// <p> The name of the domain on which to set the resource policy. </p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the domain on which to set the resource policy. </p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p> The name of the domain on which to set the resource policy. </p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_owner
    }
    /// <p> The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. </p>
    pub fn policy_revision(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_revision = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. </p>
    pub fn set_policy_revision(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_revision = input;
        self
    }
    /// <p> The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. </p>
    pub fn get_policy_revision(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_revision
    }
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. </p>
    /// This field is required.
    pub fn policy_document(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.policy_document = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. </p>
    pub fn set_policy_document(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.policy_document = input;
        self
    }
    /// <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. </p>
    pub fn get_policy_document(&self) -> &::std::option::Option<::std::string::String> {
        &self.policy_document
    }
    /// Consumes the builder and constructs a [`PutDomainPermissionsPolicyInput`](crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::put_domain_permissions_policy::PutDomainPermissionsPolicyInput {
            domain: self.domain,
            domain_owner: self.domain_owner,
            policy_revision: self.policy_revision,
            policy_document: self.policy_document,
        })
    }
}
