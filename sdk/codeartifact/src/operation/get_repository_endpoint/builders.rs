// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::get_repository_endpoint::_get_repository_endpoint_output::GetRepositoryEndpointOutputBuilder;

pub use crate::operation::get_repository_endpoint::_get_repository_endpoint_input::GetRepositoryEndpointInputBuilder;

/// Fluent builder constructing a request to `GetRepositoryEndpoint`.
///
/// <p> Returns the endpoint of a repository for a specific package format. A repository has one endpoint for each package format: </p>
/// <ul>
/// <li> <p> <code>maven</code> </p> </li>
/// <li> <p> <code>npm</code> </p> </li>
/// <li> <p> <code>nuget</code> </p> </li>
/// <li> <p> <code>pypi</code> </p> </li>
/// </ul>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct GetRepositoryEndpointFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::get_repository_endpoint::builders::GetRepositoryEndpointInputBuilder,
}
impl GetRepositoryEndpointFluentBuilder {
    /// Creates a new `GetRepositoryEndpoint`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::get_repository_endpoint::GetRepositoryEndpoint,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::get_repository_endpoint::GetRepositoryEndpointOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::get_repository_endpoint::GetRepositoryEndpointError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p> The name of the domain that contains the repository. </p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p> The name of the domain that contains the repository. </p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain that contains the repository. It does not include dashes or spaces. </p>
    pub fn domain_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_owner(input.into());
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain that contains the repository. It does not include dashes or spaces. </p>
    pub fn set_domain_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_owner(input);
        self
    }
    /// <p> The name of the repository. </p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository(input.into());
        self
    }
    /// <p> The name of the repository. </p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository(input);
        self
    }
    /// <p> Returns which endpoint of a repository to return. A repository has one endpoint for each package format. </p>
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.inner = self.inner.format(input);
        self
    }
    /// <p> Returns which endpoint of a repository to return. A repository has one endpoint for each package format. </p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::PackageFormat>) -> Self {
        self.inner = self.inner.set_format(input);
        self
    }
}
