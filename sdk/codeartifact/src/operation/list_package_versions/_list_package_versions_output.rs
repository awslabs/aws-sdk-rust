// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPackageVersionsOutput {
    /// <p> The default package version to display. This depends on the package format: </p>
    /// <ul>
    /// <li> <p> For Maven and PyPI packages, it's the most recently published package version. </p> </li>
    /// <li> <p> For npm packages, it's the version referenced by the <code>latest</code> tag. If the <code>latest</code> tag is not set, it's the most recently published package version. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub default_display_version: std::option::Option<std::string::String>,
    /// <p> A format of the package. </p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::PackageFormat>,
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p> The name of the package. </p>
    #[doc(hidden)]
    pub package: std::option::Option<std::string::String>,
    /// <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a> objects. </p>
    #[doc(hidden)]
    pub versions: std::option::Option<std::vec::Vec<crate::types::PackageVersionSummary>>,
    /// <p> If there are additional results, this is the token for the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPackageVersionsOutput {
    /// <p> The default package version to display. This depends on the package format: </p>
    /// <ul>
    /// <li> <p> For Maven and PyPI packages, it's the most recently published package version. </p> </li>
    /// <li> <p> For npm packages, it's the version referenced by the <code>latest</code> tag. If the <code>latest</code> tag is not set, it's the most recently published package version. </p> </li>
    /// </ul>
    pub fn default_display_version(&self) -> std::option::Option<&str> {
        self.default_display_version.as_deref()
    }
    /// <p> A format of the package. </p>
    pub fn format(&self) -> std::option::Option<&crate::types::PackageFormat> {
        self.format.as_ref()
    }
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p> The name of the package. </p>
    pub fn package(&self) -> std::option::Option<&str> {
        self.package.as_deref()
    }
    /// <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a> objects. </p>
    pub fn versions(&self) -> std::option::Option<&[crate::types::PackageVersionSummary]> {
        self.versions.as_deref()
    }
    /// <p> If there are additional results, this is the token for the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListPackageVersionsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListPackageVersionsOutput {
    /// Creates a new builder-style object to manufacture [`ListPackageVersionsOutput`](crate::operation::list_package_versions::ListPackageVersionsOutput).
    pub fn builder(
    ) -> crate::operation::list_package_versions::builders::ListPackageVersionsOutputBuilder {
        crate::operation::list_package_versions::builders::ListPackageVersionsOutputBuilder::default(
        )
    }
}

/// A builder for [`ListPackageVersionsOutput`](crate::operation::list_package_versions::ListPackageVersionsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListPackageVersionsOutputBuilder {
    pub(crate) default_display_version: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::PackageFormat>,
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) package: std::option::Option<std::string::String>,
    pub(crate) versions: std::option::Option<std::vec::Vec<crate::types::PackageVersionSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListPackageVersionsOutputBuilder {
    /// <p> The default package version to display. This depends on the package format: </p>
    /// <ul>
    /// <li> <p> For Maven and PyPI packages, it's the most recently published package version. </p> </li>
    /// <li> <p> For npm packages, it's the version referenced by the <code>latest</code> tag. If the <code>latest</code> tag is not set, it's the most recently published package version. </p> </li>
    /// </ul>
    pub fn default_display_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.default_display_version = Some(input.into());
        self
    }
    /// <p> The default package version to display. This depends on the package format: </p>
    /// <ul>
    /// <li> <p> For Maven and PyPI packages, it's the most recently published package version. </p> </li>
    /// <li> <p> For npm packages, it's the version referenced by the <code>latest</code> tag. If the <code>latest</code> tag is not set, it's the most recently published package version. </p> </li>
    /// </ul>
    pub fn set_default_display_version(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.default_display_version = input;
        self
    }
    /// <p> A format of the package. </p>
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p> A format of the package. </p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::PackageFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p> The name of the package. </p>
    pub fn package(mut self, input: impl Into<std::string::String>) -> Self {
        self.package = Some(input.into());
        self
    }
    /// <p> The name of the package. </p>
    pub fn set_package(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package = input;
        self
    }
    /// Appends an item to `versions`.
    ///
    /// To override the contents of this collection use [`set_versions`](Self::set_versions).
    ///
    /// <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a> objects. </p>
    pub fn versions(mut self, input: crate::types::PackageVersionSummary) -> Self {
        let mut v = self.versions.unwrap_or_default();
        v.push(input);
        self.versions = Some(v);
        self
    }
    /// <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a> objects. </p>
    pub fn set_versions(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::PackageVersionSummary>>,
    ) -> Self {
        self.versions = input;
        self
    }
    /// <p> If there are additional results, this is the token for the next set of results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> If there are additional results, this is the token for the next set of results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListPackageVersionsOutput`](crate::operation::list_package_versions::ListPackageVersionsOutput).
    pub fn build(self) -> crate::operation::list_package_versions::ListPackageVersionsOutput {
        crate::operation::list_package_versions::ListPackageVersionsOutput {
            default_display_version: self.default_display_version,
            format: self.format,
            namespace: self.namespace,
            package: self.package,
            versions: self.versions,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
