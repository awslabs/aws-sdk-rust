// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_package_versions::_list_package_versions_output::ListPackageVersionsOutputBuilder;

pub use crate::operation::list_package_versions::_list_package_versions_input::ListPackageVersionsInputBuilder;

/// Fluent builder constructing a request to `ListPackageVersions`.
///
/// <p> Returns a list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a> objects for package versions in a repository that match the request parameters. </p>
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct ListPackageVersionsFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_package_versions::builders::ListPackageVersionsInputBuilder,
}
impl ListPackageVersionsFluentBuilder {
    /// Creates a new `ListPackageVersions`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::list_package_versions::ListPackageVersions,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::list_package_versions::ListPackageVersionsError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::list_package_versions::ListPackageVersionsOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::list_package_versions::ListPackageVersionsError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_package_versions::paginator::ListPackageVersionsPaginator::send) which returns a `Stream`.
    pub fn into_paginator(
        self,
    ) -> crate::operation::list_package_versions::paginator::ListPackageVersionsPaginator {
        crate::operation::list_package_versions::paginator::ListPackageVersionsPaginator::new(
            self.handle,
            self.inner,
        )
    }
    /// <p> The name of the domain that contains the repository that contains the requested package versions. </p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p> The name of the domain that contains the repository that contains the requested package versions. </p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.domain_owner(input.into());
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn set_domain_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_domain_owner(input);
        self
    }
    /// <p> The name of the repository that contains the requested package versions. </p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.repository(input.into());
        self
    }
    /// <p> The name of the repository that contains the requested package versions. </p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_repository(input);
        self
    }
    /// <p> The format of the returned package versions. </p>
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.inner = self.inner.format(input);
        self
    }
    /// <p> The format of the returned package versions. </p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::PackageFormat>) -> Self {
        self.inner = self.inner.set_format(input);
        self
    }
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.namespace(input.into());
        self
    }
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_namespace(input);
        self
    }
    /// <p> The name of the package for which you want to request package versions. </p>
    pub fn package(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.package(input.into());
        self
    }
    /// <p> The name of the package for which you want to request package versions. </p>
    pub fn set_package(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_package(input);
        self
    }
    /// <p> A string that filters the requested package versions by status. </p>
    pub fn status(mut self, input: crate::types::PackageVersionStatus) -> Self {
        self.inner = self.inner.status(input);
        self
    }
    /// <p> A string that filters the requested package versions by status. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::PackageVersionStatus>,
    ) -> Self {
        self.inner = self.inner.set_status(input);
        self
    }
    /// <p> How to sort the requested list of package versions. </p>
    pub fn sort_by(mut self, input: crate::types::PackageVersionSortType) -> Self {
        self.inner = self.inner.sort_by(input);
        self
    }
    /// <p> How to sort the requested list of package versions. </p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::PackageVersionSortType>,
    ) -> Self {
        self.inner = self.inner.set_sort_by(input);
        self
    }
    /// <p> The maximum number of results to return per page. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.inner = self.inner.max_results(input);
        self
    }
    /// <p> The maximum number of results to return per page. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_max_results(input);
        self
    }
    /// <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>The <code>originType</code> used to filter package versions. Only package versions with the provided <code>originType</code> will be returned.</p>
    pub fn origin_type(mut self, input: crate::types::PackageVersionOriginType) -> Self {
        self.inner = self.inner.origin_type(input);
        self
    }
    /// <p>The <code>originType</code> used to filter package versions. Only package versions with the provided <code>originType</code> will be returned.</p>
    pub fn set_origin_type(
        mut self,
        input: std::option::Option<crate::types::PackageVersionOriginType>,
    ) -> Self {
        self.inner = self.inner.set_origin_type(input);
        self
    }
}
