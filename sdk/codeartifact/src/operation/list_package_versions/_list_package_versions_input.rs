// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListPackageVersionsInput {
    /// <p> The name of the domain that contains the repository that contains the requested package versions. </p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    #[doc(hidden)]
    pub domain_owner: std::option::Option<std::string::String>,
    /// <p> The name of the repository that contains the requested package versions. </p>
    #[doc(hidden)]
    pub repository: std::option::Option<std::string::String>,
    /// <p> The format of the returned package versions. </p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::PackageFormat>,
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p> The name of the package for which you want to request package versions. </p>
    #[doc(hidden)]
    pub package: std::option::Option<std::string::String>,
    /// <p> A string that filters the requested package versions by status. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::PackageVersionStatus>,
    /// <p> How to sort the requested list of package versions. </p>
    #[doc(hidden)]
    pub sort_by: std::option::Option<crate::types::PackageVersionSortType>,
    /// <p> The maximum number of results to return per page. </p>
    #[doc(hidden)]
    pub max_results: std::option::Option<i32>,
    /// <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The <code>originType</code> used to filter package versions. Only package versions with the provided <code>originType</code> will be returned.</p>
    #[doc(hidden)]
    pub origin_type: std::option::Option<crate::types::PackageVersionOriginType>,
}
impl ListPackageVersionsInput {
    /// <p> The name of the domain that contains the repository that contains the requested package versions. </p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(&self) -> std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p> The name of the repository that contains the requested package versions. </p>
    pub fn repository(&self) -> std::option::Option<&str> {
        self.repository.as_deref()
    }
    /// <p> The format of the returned package versions. </p>
    pub fn format(&self) -> std::option::Option<&crate::types::PackageFormat> {
        self.format.as_ref()
    }
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p> The name of the package for which you want to request package versions. </p>
    pub fn package(&self) -> std::option::Option<&str> {
        self.package.as_deref()
    }
    /// <p> A string that filters the requested package versions by status. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::PackageVersionStatus> {
        self.status.as_ref()
    }
    /// <p> How to sort the requested list of package versions. </p>
    pub fn sort_by(&self) -> std::option::Option<&crate::types::PackageVersionSortType> {
        self.sort_by.as_ref()
    }
    /// <p> The maximum number of results to return per page. </p>
    pub fn max_results(&self) -> std::option::Option<i32> {
        self.max_results
    }
    /// <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The <code>originType</code> used to filter package versions. Only package versions with the provided <code>originType</code> will be returned.</p>
    pub fn origin_type(&self) -> std::option::Option<&crate::types::PackageVersionOriginType> {
        self.origin_type.as_ref()
    }
}
impl ListPackageVersionsInput {
    /// Creates a new builder-style object to manufacture [`ListPackageVersionsInput`](crate::operation::list_package_versions::ListPackageVersionsInput).
    pub fn builder(
    ) -> crate::operation::list_package_versions::builders::ListPackageVersionsInputBuilder {
        crate::operation::list_package_versions::builders::ListPackageVersionsInputBuilder::default(
        )
    }
}

/// A builder for [`ListPackageVersionsInput`](crate::operation::list_package_versions::ListPackageVersionsInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListPackageVersionsInputBuilder {
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) domain_owner: std::option::Option<std::string::String>,
    pub(crate) repository: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::PackageFormat>,
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) package: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::PackageVersionStatus>,
    pub(crate) sort_by: std::option::Option<crate::types::PackageVersionSortType>,
    pub(crate) max_results: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) origin_type: std::option::Option<crate::types::PackageVersionOriginType>,
}
impl ListPackageVersionsInputBuilder {
    /// <p> The name of the domain that contains the repository that contains the requested package versions. </p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p> The name of the domain that contains the repository that contains the requested package versions. </p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_owner = Some(input.into());
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn set_domain_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p> The name of the repository that contains the requested package versions. </p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository = Some(input.into());
        self
    }
    /// <p> The name of the repository that contains the requested package versions. </p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p> The format of the returned package versions. </p>
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p> The format of the returned package versions. </p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::PackageFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p> The name of the package for which you want to request package versions. </p>
    pub fn package(mut self, input: impl Into<std::string::String>) -> Self {
        self.package = Some(input.into());
        self
    }
    /// <p> The name of the package for which you want to request package versions. </p>
    pub fn set_package(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package = input;
        self
    }
    /// <p> A string that filters the requested package versions by status. </p>
    pub fn status(mut self, input: crate::types::PackageVersionStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> A string that filters the requested package versions by status. </p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::PackageVersionStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p> How to sort the requested list of package versions. </p>
    pub fn sort_by(mut self, input: crate::types::PackageVersionSortType) -> Self {
        self.sort_by = Some(input);
        self
    }
    /// <p> How to sort the requested list of package versions. </p>
    pub fn set_sort_by(
        mut self,
        input: std::option::Option<crate::types::PackageVersionSortType>,
    ) -> Self {
        self.sort_by = input;
        self
    }
    /// <p> The maximum number of results to return per page. </p>
    pub fn max_results(mut self, input: i32) -> Self {
        self.max_results = Some(input);
        self
    }
    /// <p> The maximum number of results to return per page. </p>
    pub fn set_max_results(mut self, input: std::option::Option<i32>) -> Self {
        self.max_results = input;
        self
    }
    /// <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The <code>originType</code> used to filter package versions. Only package versions with the provided <code>originType</code> will be returned.</p>
    pub fn origin_type(mut self, input: crate::types::PackageVersionOriginType) -> Self {
        self.origin_type = Some(input);
        self
    }
    /// <p>The <code>originType</code> used to filter package versions. Only package versions with the provided <code>originType</code> will be returned.</p>
    pub fn set_origin_type(
        mut self,
        input: std::option::Option<crate::types::PackageVersionOriginType>,
    ) -> Self {
        self.origin_type = input;
        self
    }
    /// Consumes the builder and constructs a [`ListPackageVersionsInput`](crate::operation::list_package_versions::ListPackageVersionsInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_package_versions::ListPackageVersionsInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::list_package_versions::ListPackageVersionsInput {
                domain: self.domain,
                domain_owner: self.domain_owner,
                repository: self.repository,
                format: self.format,
                namespace: self.namespace,
                package: self.package,
                status: self.status,
                sort_by: self.sort_by,
                max_results: self.max_results,
                next_token: self.next_token,
                origin_type: self.origin_type,
            },
        )
    }
}
