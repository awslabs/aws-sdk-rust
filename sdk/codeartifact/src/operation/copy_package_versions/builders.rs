// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::copy_package_versions::_copy_package_versions_output::CopyPackageVersionsOutputBuilder;

pub use crate::operation::copy_package_versions::_copy_package_versions_input::CopyPackageVersionsInputBuilder;

impl crate::operation::copy_package_versions::builders::CopyPackageVersionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::copy_package_versions::CopyPackageVersionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::copy_package_versions::CopyPackageVersionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.copy_package_versions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CopyPackageVersions`.
///
/// <p>Copies package versions from one repository to another repository in the same domain.</p><note>
/// <p>You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.</p>
/// </note>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CopyPackageVersionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::copy_package_versions::builders::CopyPackageVersionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::copy_package_versions::CopyPackageVersionsOutput,
        crate::operation::copy_package_versions::CopyPackageVersionsError,
    > for CopyPackageVersionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::copy_package_versions::CopyPackageVersionsOutput,
            crate::operation::copy_package_versions::CopyPackageVersionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CopyPackageVersionsFluentBuilder {
    /// Creates a new `CopyPackageVersions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CopyPackageVersions as a reference.
    pub fn as_input(&self) -> &crate::operation::copy_package_versions::builders::CopyPackageVersionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::copy_package_versions::CopyPackageVersionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::copy_package_versions::CopyPackageVersionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::copy_package_versions::CopyPackageVersions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::copy_package_versions::CopyPackageVersions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::copy_package_versions::CopyPackageVersionsOutput,
        crate::operation::copy_package_versions::CopyPackageVersionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the domain that contains the source and destination repositories.</p>
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain(input.into());
        self
    }
    /// <p>The name of the domain that contains the source and destination repositories.</p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain(input);
        self
    }
    /// <p>The name of the domain that contains the source and destination repositories.</p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain()
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.domain_owner(input.into());
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_domain_owner(input);
        self
    }
    /// <p>The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces.</p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_domain_owner()
    }
    /// <p>The name of the repository that contains the package versions to be copied.</p>
    pub fn source_repository(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.source_repository(input.into());
        self
    }
    /// <p>The name of the repository that contains the package versions to be copied.</p>
    pub fn set_source_repository(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_source_repository(input);
        self
    }
    /// <p>The name of the repository that contains the package versions to be copied.</p>
    pub fn get_source_repository(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_source_repository()
    }
    /// <p>The name of the repository into which package versions are copied.</p>
    pub fn destination_repository(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.destination_repository(input.into());
        self
    }
    /// <p>The name of the repository into which package versions are copied.</p>
    pub fn set_destination_repository(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_destination_repository(input);
        self
    }
    /// <p>The name of the repository into which package versions are copied.</p>
    pub fn get_destination_repository(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_destination_repository()
    }
    /// <p>The format of the package versions to be copied.</p>
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.inner = self.inner.format(input);
        self
    }
    /// <p>The format of the package versions to be copied.</p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::PackageFormat>) -> Self {
        self.inner = self.inner.set_format(input);
        self
    }
    /// <p>The format of the package versions to be copied.</p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::PackageFormat> {
        self.inner.get_format()
    }
    /// <p>The namespace of the package versions to be copied. The package component that specifies its namespace depends on its type. For example:</p><note>
    /// <p>The namespace is required when copying package versions of the following formats:</p>
    /// <ul>
    /// <li>
    /// <p>Maven</p></li>
    /// <li>
    /// <p>Swift</p></li>
    /// <li>
    /// <p>generic</p></li>
    /// </ul>
    /// </note>
    /// <ul>
    /// <li>
    /// <p>The namespace of a Maven package version is its <code>groupId</code>.</p></li>
    /// <li>
    /// <p>The namespace of an npm or Swift package version is its <code>scope</code>.</p></li>
    /// <li>
    /// <p>The namespace of a generic package is its <code>namespace</code>.</p></li>
    /// <li>
    /// <p>Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace.</p></li>
    /// </ul>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.namespace(input.into());
        self
    }
    /// <p>The namespace of the package versions to be copied. The package component that specifies its namespace depends on its type. For example:</p><note>
    /// <p>The namespace is required when copying package versions of the following formats:</p>
    /// <ul>
    /// <li>
    /// <p>Maven</p></li>
    /// <li>
    /// <p>Swift</p></li>
    /// <li>
    /// <p>generic</p></li>
    /// </ul>
    /// </note>
    /// <ul>
    /// <li>
    /// <p>The namespace of a Maven package version is its <code>groupId</code>.</p></li>
    /// <li>
    /// <p>The namespace of an npm or Swift package version is its <code>scope</code>.</p></li>
    /// <li>
    /// <p>The namespace of a generic package is its <code>namespace</code>.</p></li>
    /// <li>
    /// <p>Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace.</p></li>
    /// </ul>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_namespace(input);
        self
    }
    /// <p>The namespace of the package versions to be copied. The package component that specifies its namespace depends on its type. For example:</p><note>
    /// <p>The namespace is required when copying package versions of the following formats:</p>
    /// <ul>
    /// <li>
    /// <p>Maven</p></li>
    /// <li>
    /// <p>Swift</p></li>
    /// <li>
    /// <p>generic</p></li>
    /// </ul>
    /// </note>
    /// <ul>
    /// <li>
    /// <p>The namespace of a Maven package version is its <code>groupId</code>.</p></li>
    /// <li>
    /// <p>The namespace of an npm or Swift package version is its <code>scope</code>.</p></li>
    /// <li>
    /// <p>The namespace of a generic package is its <code>namespace</code>.</p></li>
    /// <li>
    /// <p>Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace.</p></li>
    /// </ul>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_namespace()
    }
    /// <p>The name of the package that contains the versions to be copied.</p>
    pub fn package(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.package(input.into());
        self
    }
    /// <p>The name of the package that contains the versions to be copied.</p>
    pub fn set_package(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_package(input);
        self
    }
    /// <p>The name of the package that contains the versions to be copied.</p>
    pub fn get_package(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_package()
    }
    ///
    /// Appends an item to `versions`.
    ///
    /// To override the contents of this collection use [`set_versions`](Self::set_versions).
    ///
    /// <p>The versions of the package to be copied.</p><note>
    /// <p>You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.</p>
    /// </note>
    pub fn versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.versions(input.into());
        self
    }
    /// <p>The versions of the package to be copied.</p><note>
    /// <p>You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.</p>
    /// </note>
    pub fn set_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.inner = self.inner.set_versions(input);
        self
    }
    /// <p>The versions of the package to be copied.</p><note>
    /// <p>You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.</p>
    /// </note>
    pub fn get_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        self.inner.get_versions()
    }
    ///
    /// Adds a key-value pair to `versionRevisions`.
    ///
    /// To override the contents of this collection use [`set_version_revisions`](Self::set_version_revisions).
    ///
    /// <p>A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation succeeds if the specified versions in the source repository match the specified package version revision.</p><note>
    /// <p>You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.</p>
    /// </note>
    pub fn version_revisions(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        self.inner = self.inner.version_revisions(k.into(), v.into());
        self
    }
    /// <p>A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation succeeds if the specified versions in the source repository match the specified package version revision.</p><note>
    /// <p>You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.</p>
    /// </note>
    pub fn set_version_revisions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.inner = self.inner.set_version_revisions(input);
        self
    }
    /// <p>A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation succeeds if the specified versions in the source repository match the specified package version revision.</p><note>
    /// <p>You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both.</p>
    /// </note>
    pub fn get_version_revisions(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.inner.get_version_revisions()
    }
    /// <p>Set to true to overwrite a package version that already exists in the destination repository. If set to false and the package version already exists in the destination repository, the package version is returned in the <code>failedVersions</code> field of the response with an <code>ALREADY_EXISTS</code> error code.</p>
    pub fn allow_overwrite(mut self, input: bool) -> Self {
        self.inner = self.inner.allow_overwrite(input);
        self
    }
    /// <p>Set to true to overwrite a package version that already exists in the destination repository. If set to false and the package version already exists in the destination repository, the package version is returned in the <code>failedVersions</code> field of the response with an <code>ALREADY_EXISTS</code> error code.</p>
    pub fn set_allow_overwrite(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_allow_overwrite(input);
        self
    }
    /// <p>Set to true to overwrite a package version that already exists in the destination repository. If set to false and the package version already exists in the destination repository, the package version is returned in the <code>failedVersions</code> field of the response with an <code>ALREADY_EXISTS</code> error code.</p>
    pub fn get_allow_overwrite(&self) -> &::std::option::Option<bool> {
        self.inner.get_allow_overwrite()
    }
    /// <p>Set to true to copy packages from repositories that are upstream from the source repository to the destination repository. The default setting is false. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>.</p>
    pub fn include_from_upstream(mut self, input: bool) -> Self {
        self.inner = self.inner.include_from_upstream(input);
        self
    }
    /// <p>Set to true to copy packages from repositories that are upstream from the source repository to the destination repository. The default setting is false. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>.</p>
    pub fn set_include_from_upstream(mut self, input: ::std::option::Option<bool>) -> Self {
        self.inner = self.inner.set_include_from_upstream(input);
        self
    }
    /// <p>Set to true to copy packages from repositories that are upstream from the source repository to the destination repository. The default setting is false. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>.</p>
    pub fn get_include_from_upstream(&self) -> &::std::option::Option<bool> {
        self.inner.get_include_from_upstream()
    }
}
