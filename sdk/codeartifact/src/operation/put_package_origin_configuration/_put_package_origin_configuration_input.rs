// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PutPackageOriginConfigurationInput {
    /// <p>The name of the domain that contains the repository that contains the package.</p>
    #[doc(hidden)]
    pub domain: std::option::Option<std::string::String>,
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    #[doc(hidden)]
    pub domain_owner: std::option::Option<std::string::String>,
    /// <p>The name of the repository that contains the package.</p>
    #[doc(hidden)]
    pub repository: std::option::Option<std::string::String>,
    /// <p>A format that specifies the type of the package to be updated.</p>
    #[doc(hidden)]
    pub format: std::option::Option<crate::types::PackageFormat>,
    /// <p>The namespace of the package to be updated. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub namespace: std::option::Option<std::string::String>,
    /// <p>The name of the package to be updated.</p>
    #[doc(hidden)]
    pub package: std::option::Option<std::string::String>,
    /// <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a> object that contains information about the <code>upstream</code> and <code>publish</code> package origin restrictions. The <code>upstream</code> restriction determines if new package versions can be ingested or retained from external connections or upstream repositories. The <code>publish</code> restriction determines if new package versions can be published directly to the repository.</p>
    /// <p>You must include both the desired <code>upstream</code> and <code>publish</code> restrictions.</p>
    #[doc(hidden)]
    pub restrictions: std::option::Option<crate::types::PackageOriginRestrictions>,
}
impl PutPackageOriginConfigurationInput {
    /// <p>The name of the domain that contains the repository that contains the package.</p>
    pub fn domain(&self) -> std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(&self) -> std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p>The name of the repository that contains the package.</p>
    pub fn repository(&self) -> std::option::Option<&str> {
        self.repository.as_deref()
    }
    /// <p>A format that specifies the type of the package to be updated.</p>
    pub fn format(&self) -> std::option::Option<&crate::types::PackageFormat> {
        self.format.as_ref()
    }
    /// <p>The namespace of the package to be updated. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(&self) -> std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p>The name of the package to be updated.</p>
    pub fn package(&self) -> std::option::Option<&str> {
        self.package.as_deref()
    }
    /// <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a> object that contains information about the <code>upstream</code> and <code>publish</code> package origin restrictions. The <code>upstream</code> restriction determines if new package versions can be ingested or retained from external connections or upstream repositories. The <code>publish</code> restriction determines if new package versions can be published directly to the repository.</p>
    /// <p>You must include both the desired <code>upstream</code> and <code>publish</code> restrictions.</p>
    pub fn restrictions(&self) -> std::option::Option<&crate::types::PackageOriginRestrictions> {
        self.restrictions.as_ref()
    }
}
impl PutPackageOriginConfigurationInput {
    /// Creates a new builder-style object to manufacture [`PutPackageOriginConfigurationInput`](crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationInput).
    pub fn builder() -> crate::operation::put_package_origin_configuration::builders::PutPackageOriginConfigurationInputBuilder{
        crate::operation::put_package_origin_configuration::builders::PutPackageOriginConfigurationInputBuilder::default()
    }
}

/// A builder for [`PutPackageOriginConfigurationInput`](crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PutPackageOriginConfigurationInputBuilder {
    pub(crate) domain: std::option::Option<std::string::String>,
    pub(crate) domain_owner: std::option::Option<std::string::String>,
    pub(crate) repository: std::option::Option<std::string::String>,
    pub(crate) format: std::option::Option<crate::types::PackageFormat>,
    pub(crate) namespace: std::option::Option<std::string::String>,
    pub(crate) package: std::option::Option<std::string::String>,
    pub(crate) restrictions: std::option::Option<crate::types::PackageOriginRestrictions>,
}
impl PutPackageOriginConfigurationInputBuilder {
    /// <p>The name of the domain that contains the repository that contains the package.</p>
    pub fn domain(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain = Some(input.into());
        self
    }
    /// <p>The name of the domain that contains the repository that contains the package.</p>
    pub fn set_domain(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.domain_owner = Some(input.into());
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn set_domain_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p>The name of the repository that contains the package.</p>
    pub fn repository(mut self, input: impl Into<std::string::String>) -> Self {
        self.repository = Some(input.into());
        self
    }
    /// <p>The name of the repository that contains the package.</p>
    pub fn set_repository(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p>A format that specifies the type of the package to be updated.</p>
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.format = Some(input);
        self
    }
    /// <p>A format that specifies the type of the package to be updated.</p>
    pub fn set_format(mut self, input: std::option::Option<crate::types::PackageFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p>The namespace of the package to be updated. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn namespace(mut self, input: impl Into<std::string::String>) -> Self {
        self.namespace = Some(input.into());
        self
    }
    /// <p>The namespace of the package to be updated. The package component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>
    /// </ul>
    pub fn set_namespace(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The name of the package to be updated.</p>
    pub fn package(mut self, input: impl Into<std::string::String>) -> Self {
        self.package = Some(input.into());
        self
    }
    /// <p>The name of the package to be updated.</p>
    pub fn set_package(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package = input;
        self
    }
    /// <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a> object that contains information about the <code>upstream</code> and <code>publish</code> package origin restrictions. The <code>upstream</code> restriction determines if new package versions can be ingested or retained from external connections or upstream repositories. The <code>publish</code> restriction determines if new package versions can be published directly to the repository.</p>
    /// <p>You must include both the desired <code>upstream</code> and <code>publish</code> restrictions.</p>
    pub fn restrictions(mut self, input: crate::types::PackageOriginRestrictions) -> Self {
        self.restrictions = Some(input);
        self
    }
    /// <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a> object that contains information about the <code>upstream</code> and <code>publish</code> package origin restrictions. The <code>upstream</code> restriction determines if new package versions can be ingested or retained from external connections or upstream repositories. The <code>publish</code> restriction determines if new package versions can be published directly to the repository.</p>
    /// <p>You must include both the desired <code>upstream</code> and <code>publish</code> restrictions.</p>
    pub fn set_restrictions(
        mut self,
        input: std::option::Option<crate::types::PackageOriginRestrictions>,
    ) -> Self {
        self.restrictions = input;
        self
    }
    /// Consumes the builder and constructs a [`PutPackageOriginConfigurationInput`](crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::put_package_origin_configuration::PutPackageOriginConfigurationInput {
                domain: self.domain
                ,
                domain_owner: self.domain_owner
                ,
                repository: self.repository
                ,
                format: self.format
                ,
                namespace: self.namespace
                ,
                package: self.package
                ,
                restrictions: self.restrictions
                ,
            }
        )
    }
}
