// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DisposePackageVersionsInput {
    /// <p> The name of the domain that contains the repository you want to dispose. </p>
    pub domain: ::std::option::Option<::std::string::String>,
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub domain_owner: ::std::option::Option<::std::string::String>,
    /// <p> The name of the repository that contains the package versions you want to dispose. </p>
    pub repository: ::std::option::Option<::std::string::String>,
    /// <p> A format that specifies the type of package versions you want to dispose. </p>
    pub format: ::std::option::Option<crate::types::PackageFormat>,
    /// <p>The namespace of the package versions to be disposed. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li>
    /// </ul>
    pub namespace: ::std::option::Option<::std::string::String>,
    /// <p> The name of the package with the versions you want to dispose. </p>
    pub package: ::std::option::Option<::std::string::String>,
    /// <p> The versions of the package you want to dispose. </p>
    pub versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p> The revisions of the package versions you want to dispose. </p>
    pub version_revisions: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p> The expected status of the package version to dispose. </p>
    pub expected_status: ::std::option::Option<crate::types::PackageVersionStatus>,
}
impl DisposePackageVersionsInput {
    /// <p> The name of the domain that contains the repository you want to dispose. </p>
    pub fn domain(&self) -> ::std::option::Option<&str> {
        self.domain.as_deref()
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(&self) -> ::std::option::Option<&str> {
        self.domain_owner.as_deref()
    }
    /// <p> The name of the repository that contains the package versions you want to dispose. </p>
    pub fn repository(&self) -> ::std::option::Option<&str> {
        self.repository.as_deref()
    }
    /// <p> A format that specifies the type of package versions you want to dispose. </p>
    pub fn format(&self) -> ::std::option::Option<&crate::types::PackageFormat> {
        self.format.as_ref()
    }
    /// <p>The namespace of the package versions to be disposed. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li>
    /// </ul>
    pub fn namespace(&self) -> ::std::option::Option<&str> {
        self.namespace.as_deref()
    }
    /// <p> The name of the package with the versions you want to dispose. </p>
    pub fn package(&self) -> ::std::option::Option<&str> {
        self.package.as_deref()
    }
    /// <p> The versions of the package you want to dispose. </p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.versions.is_none()`.
    pub fn versions(&self) -> &[::std::string::String] {
        self.versions.as_deref().unwrap_or_default()
    }
    /// <p> The revisions of the package versions you want to dispose. </p>
    pub fn version_revisions(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.version_revisions.as_ref()
    }
    /// <p> The expected status of the package version to dispose. </p>
    pub fn expected_status(&self) -> ::std::option::Option<&crate::types::PackageVersionStatus> {
        self.expected_status.as_ref()
    }
}
impl DisposePackageVersionsInput {
    /// Creates a new builder-style object to manufacture [`DisposePackageVersionsInput`](crate::operation::dispose_package_versions::DisposePackageVersionsInput).
    pub fn builder() -> crate::operation::dispose_package_versions::builders::DisposePackageVersionsInputBuilder {
        crate::operation::dispose_package_versions::builders::DisposePackageVersionsInputBuilder::default()
    }
}

/// A builder for [`DisposePackageVersionsInput`](crate::operation::dispose_package_versions::DisposePackageVersionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DisposePackageVersionsInputBuilder {
    pub(crate) domain: ::std::option::Option<::std::string::String>,
    pub(crate) domain_owner: ::std::option::Option<::std::string::String>,
    pub(crate) repository: ::std::option::Option<::std::string::String>,
    pub(crate) format: ::std::option::Option<crate::types::PackageFormat>,
    pub(crate) namespace: ::std::option::Option<::std::string::String>,
    pub(crate) package: ::std::option::Option<::std::string::String>,
    pub(crate) versions: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) version_revisions: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) expected_status: ::std::option::Option<crate::types::PackageVersionStatus>,
}
impl DisposePackageVersionsInputBuilder {
    /// <p> The name of the domain that contains the repository you want to dispose. </p>
    /// This field is required.
    pub fn domain(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the domain that contains the repository you want to dispose. </p>
    pub fn set_domain(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain = input;
        self
    }
    /// <p> The name of the domain that contains the repository you want to dispose. </p>
    pub fn get_domain(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn domain_owner(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.domain_owner = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn set_domain_owner(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.domain_owner = input;
        self
    }
    /// <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    pub fn get_domain_owner(&self) -> &::std::option::Option<::std::string::String> {
        &self.domain_owner
    }
    /// <p> The name of the repository that contains the package versions you want to dispose. </p>
    /// This field is required.
    pub fn repository(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.repository = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the repository that contains the package versions you want to dispose. </p>
    pub fn set_repository(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.repository = input;
        self
    }
    /// <p> The name of the repository that contains the package versions you want to dispose. </p>
    pub fn get_repository(&self) -> &::std::option::Option<::std::string::String> {
        &self.repository
    }
    /// <p> A format that specifies the type of package versions you want to dispose. </p>
    /// This field is required.
    pub fn format(mut self, input: crate::types::PackageFormat) -> Self {
        self.format = ::std::option::Option::Some(input);
        self
    }
    /// <p> A format that specifies the type of package versions you want to dispose. </p>
    pub fn set_format(mut self, input: ::std::option::Option<crate::types::PackageFormat>) -> Self {
        self.format = input;
        self
    }
    /// <p> A format that specifies the type of package versions you want to dispose. </p>
    pub fn get_format(&self) -> &::std::option::Option<crate::types::PackageFormat> {
        &self.format
    }
    /// <p>The namespace of the package versions to be disposed. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li>
    /// </ul>
    pub fn namespace(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.namespace = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The namespace of the package versions to be disposed. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li>
    /// </ul>
    pub fn set_namespace(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.namespace = input;
        self
    }
    /// <p>The namespace of the package versions to be disposed. The package version component that specifies its namespace depends on its type. For example:</p>
    /// <ul>
    /// <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>
    /// <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>
    /// <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>
    /// <li> <p> The namespace of a generic package is its <code>namespace</code>. </p> </li>
    /// </ul>
    pub fn get_namespace(&self) -> &::std::option::Option<::std::string::String> {
        &self.namespace
    }
    /// <p> The name of the package with the versions you want to dispose. </p>
    /// This field is required.
    pub fn package(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the package with the versions you want to dispose. </p>
    pub fn set_package(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package = input;
        self
    }
    /// <p> The name of the package with the versions you want to dispose. </p>
    pub fn get_package(&self) -> &::std::option::Option<::std::string::String> {
        &self.package
    }
    /// Appends an item to `versions`.
    ///
    /// To override the contents of this collection use [`set_versions`](Self::set_versions).
    ///
    /// <p> The versions of the package you want to dispose. </p>
    pub fn versions(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.versions.unwrap_or_default();
        v.push(input.into());
        self.versions = ::std::option::Option::Some(v);
        self
    }
    /// <p> The versions of the package you want to dispose. </p>
    pub fn set_versions(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.versions = input;
        self
    }
    /// <p> The versions of the package you want to dispose. </p>
    pub fn get_versions(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.versions
    }
    /// Adds a key-value pair to `version_revisions`.
    ///
    /// To override the contents of this collection use [`set_version_revisions`](Self::set_version_revisions).
    ///
    /// <p> The revisions of the package versions you want to dispose. </p>
    pub fn version_revisions(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.version_revisions.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.version_revisions = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> The revisions of the package versions you want to dispose. </p>
    pub fn set_version_revisions(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.version_revisions = input;
        self
    }
    /// <p> The revisions of the package versions you want to dispose. </p>
    pub fn get_version_revisions(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.version_revisions
    }
    /// <p> The expected status of the package version to dispose. </p>
    pub fn expected_status(mut self, input: crate::types::PackageVersionStatus) -> Self {
        self.expected_status = ::std::option::Option::Some(input);
        self
    }
    /// <p> The expected status of the package version to dispose. </p>
    pub fn set_expected_status(mut self, input: ::std::option::Option<crate::types::PackageVersionStatus>) -> Self {
        self.expected_status = input;
        self
    }
    /// <p> The expected status of the package version to dispose. </p>
    pub fn get_expected_status(&self) -> &::std::option::Option<crate::types::PackageVersionStatus> {
        &self.expected_status
    }
    /// Consumes the builder and constructs a [`DisposePackageVersionsInput`](crate::operation::dispose_package_versions::DisposePackageVersionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::dispose_package_versions::DisposePackageVersionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::dispose_package_versions::DisposePackageVersionsInput {
            domain: self.domain,
            domain_owner: self.domain_owner,
            repository: self.repository,
            format: self.format,
            namespace: self.namespace,
            package: self.package,
            versions: self.versions,
            version_revisions: self.version_revisions,
            expected_status: self.expected_status,
        })
    }
}
