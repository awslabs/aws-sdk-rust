// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeletePackageVersions`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::domain) / [`set_domain(Option<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::set_domain): <p> The name of the domain that contains the package to delete. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::domain_owner) / [`set_domain_owner(Option<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::repository) / [`set_repository(Option<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::set_repository): <p> The name of the repository that contains the package versions to delete. </p>
    ///   - [`format(PackageFormat)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::format) / [`set_format(Option<PackageFormat>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::set_format): <p> The format of the package versions to delete. </p>
    ///   - [`namespace(impl Into<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::namespace) / [`set_namespace(Option<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::set_namespace): <p>The namespace of the package versions to be deleted. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when deleting Maven package versions. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::package) / [`set_package(Option<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::set_package): <p> The name of the package with the versions to delete. </p>
    ///   - [`versions(Vec<String>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::versions) / [`set_versions(Option<Vec<String>>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::set_versions): <p> An array of strings that specify the versions of the package to delete. </p>
    ///   - [`expected_status(PackageVersionStatus)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::expected_status) / [`set_expected_status(Option<PackageVersionStatus>)`](crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::set_expected_status): <p> The expected status of the package version to delete. </p>
    /// - On success, responds with [`DeletePackageVersionsOutput`](crate::operation::delete_package_versions::DeletePackageVersionsOutput) with field(s):
    ///   - [`successful_versions(Option<HashMap<String, SuccessfulPackageVersionInfo>>)`](crate::operation::delete_package_versions::DeletePackageVersionsOutput::successful_versions): <p> A list of the package versions that were successfully deleted. The status of every successful version will be <code>Deleted</code>. </p>
    ///   - [`failed_versions(Option<HashMap<String, PackageVersionError>>)`](crate::operation::delete_package_versions::DeletePackageVersionsOutput::failed_versions): <p> A <code>PackageVersionError</code> object that contains a map of errors codes for the deleted package that failed. The possible error codes are: </p>  <ul>   <li> <p> <code>ALREADY_EXISTS</code> </p> </li>   <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>   <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>   <li> <p> <code>NOT_ALLOWED</code> </p> </li>   <li> <p> <code>NOT_FOUND</code> </p> </li>   <li> <p> <code>SKIPPED</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DeletePackageVersionsError>`](crate::operation::delete_package_versions::DeletePackageVersionsError)
    pub fn delete_package_versions(
        &self,
    ) -> crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder
    {
        crate::operation::delete_package_versions::builders::DeletePackageVersionsFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
