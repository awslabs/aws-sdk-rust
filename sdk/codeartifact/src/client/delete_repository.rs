// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteRepository`](crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder::domain) / [`set_domain(Option<String>)`](crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder::set_domain): <p> The name of the domain that contains the repository to delete. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder::domain_owner) / [`set_domain_owner(Option<String>)`](crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder::repository) / [`set_repository(Option<String>)`](crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder::set_repository): <p> The name of the repository to delete. </p>
    /// - On success, responds with [`DeleteRepositoryOutput`](crate::operation::delete_repository::DeleteRepositoryOutput) with field(s):
    ///   - [`repository(Option<RepositoryDescription>)`](crate::operation::delete_repository::DeleteRepositoryOutput::repository): <p> Information about the deleted repository after processing the request. </p>
    /// - On failure, responds with [`SdkError<DeleteRepositoryError>`](crate::operation::delete_repository::DeleteRepositoryError)
    pub fn delete_repository(
        &self,
    ) -> crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder {
        crate::operation::delete_repository::builders::DeleteRepositoryFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
