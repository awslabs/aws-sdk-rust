// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_quota_exceeded_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceQuotaExceededExceptionBuilder,
) -> crate::types::error::builders::ServiceQuotaExceededExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn describe_package_output_correct_errors(
    mut builder: crate::operation::describe_package::builders::DescribePackageOutputBuilder,
) -> crate::operation::describe_package::builders::DescribePackageOutputBuilder {
    if builder.package.is_none() {
        builder.package = {
            let builder = crate::types::builders::PackageDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn describe_package_version_output_correct_errors(
    mut builder: crate::operation::describe_package_version::builders::DescribePackageVersionOutputBuilder,
) -> crate::operation::describe_package_version::builders::DescribePackageVersionOutputBuilder {
    if builder.package_version.is_none() {
        builder.package_version = {
            let builder = crate::types::builders::PackageVersionDescriptionBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn asset_summary_correct_errors(mut builder: crate::types::builders::AssetSummaryBuilder) -> crate::types::builders::AssetSummaryBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}

pub(crate) fn package_origin_restrictions_correct_errors(
    mut builder: crate::types::builders::PackageOriginRestrictionsBuilder,
) -> crate::types::builders::PackageOriginRestrictionsBuilder {
    if builder.publish.is_none() {
        builder.publish = "no value was set".parse::<crate::types::AllowPublish>().ok()
    }
    if builder.upstream.is_none() {
        builder.upstream = "no value was set".parse::<crate::types::AllowUpstream>().ok()
    }
    builder
}

pub(crate) fn package_version_summary_correct_errors(
    mut builder: crate::types::builders::PackageVersionSummaryBuilder,
) -> crate::types::builders::PackageVersionSummaryBuilder {
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::PackageVersionStatus>().ok()
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}
