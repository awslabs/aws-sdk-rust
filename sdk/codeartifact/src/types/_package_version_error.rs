// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>l An error associated with package. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PackageVersionError {
    /// <p> The error code associated with the error. Valid error codes are: </p>
    /// <ul>
    /// <li> <p> <code>ALREADY_EXISTS</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>
    /// <li> <p> <code>NOT_ALLOWED</code> </p> </li>
    /// <li> <p> <code>NOT_FOUND</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// </ul>
    #[doc(hidden)]
    pub error_code: std::option::Option<crate::types::PackageVersionErrorCode>,
    /// <p> The error message associated with the error. </p>
    #[doc(hidden)]
    pub error_message: std::option::Option<std::string::String>,
}
impl PackageVersionError {
    /// <p> The error code associated with the error. Valid error codes are: </p>
    /// <ul>
    /// <li> <p> <code>ALREADY_EXISTS</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>
    /// <li> <p> <code>NOT_ALLOWED</code> </p> </li>
    /// <li> <p> <code>NOT_FOUND</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// </ul>
    pub fn error_code(&self) -> std::option::Option<&crate::types::PackageVersionErrorCode> {
        self.error_code.as_ref()
    }
    /// <p> The error message associated with the error. </p>
    pub fn error_message(&self) -> std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl PackageVersionError {
    /// Creates a new builder-style object to manufacture [`PackageVersionError`](crate::types::PackageVersionError).
    pub fn builder() -> crate::types::builders::PackageVersionErrorBuilder {
        crate::types::builders::PackageVersionErrorBuilder::default()
    }
}

/// A builder for [`PackageVersionError`](crate::types::PackageVersionError).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PackageVersionErrorBuilder {
    pub(crate) error_code: std::option::Option<crate::types::PackageVersionErrorCode>,
    pub(crate) error_message: std::option::Option<std::string::String>,
}
impl PackageVersionErrorBuilder {
    /// <p> The error code associated with the error. Valid error codes are: </p>
    /// <ul>
    /// <li> <p> <code>ALREADY_EXISTS</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>
    /// <li> <p> <code>NOT_ALLOWED</code> </p> </li>
    /// <li> <p> <code>NOT_FOUND</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// </ul>
    pub fn error_code(mut self, input: crate::types::PackageVersionErrorCode) -> Self {
        self.error_code = Some(input);
        self
    }
    /// <p> The error code associated with the error. Valid error codes are: </p>
    /// <ul>
    /// <li> <p> <code>ALREADY_EXISTS</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>
    /// <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>
    /// <li> <p> <code>NOT_ALLOWED</code> </p> </li>
    /// <li> <p> <code>NOT_FOUND</code> </p> </li>
    /// <li> <p> <code>SKIPPED</code> </p> </li>
    /// </ul>
    pub fn set_error_code(
        mut self,
        input: std::option::Option<crate::types::PackageVersionErrorCode>,
    ) -> Self {
        self.error_code = input;
        self
    }
    /// <p> The error message associated with the error. </p>
    pub fn error_message(mut self, input: impl Into<std::string::String>) -> Self {
        self.error_message = Some(input.into());
        self
    }
    /// <p> The error message associated with the error. </p>
    pub fn set_error_message(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// Consumes the builder and constructs a [`PackageVersionError`](crate::types::PackageVersionError).
    pub fn build(self) -> crate::types::PackageVersionError {
        crate::types::PackageVersionError {
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
