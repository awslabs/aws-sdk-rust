// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the origin restrictions set on the package. The package origin restrictions determine how new versions of a package can be added to a specific repository.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PackageOriginRestrictions {
    /// <p>The package origin configuration that determines if new versions of the package can be published directly to the repository.</p>
    pub publish: crate::types::AllowPublish,
    /// <p>The package origin configuration that determines if new versions of the package can be added to the repository from an external connection or upstream source.</p>
    pub upstream: crate::types::AllowUpstream,
}
impl PackageOriginRestrictions {
    /// <p>The package origin configuration that determines if new versions of the package can be published directly to the repository.</p>
    pub fn publish(&self) -> &crate::types::AllowPublish {
        &self.publish
    }
    /// <p>The package origin configuration that determines if new versions of the package can be added to the repository from an external connection or upstream source.</p>
    pub fn upstream(&self) -> &crate::types::AllowUpstream {
        &self.upstream
    }
}
impl PackageOriginRestrictions {
    /// Creates a new builder-style object to manufacture [`PackageOriginRestrictions`](crate::types::PackageOriginRestrictions).
    pub fn builder() -> crate::types::builders::PackageOriginRestrictionsBuilder {
        crate::types::builders::PackageOriginRestrictionsBuilder::default()
    }
}

/// A builder for [`PackageOriginRestrictions`](crate::types::PackageOriginRestrictions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PackageOriginRestrictionsBuilder {
    pub(crate) publish: ::std::option::Option<crate::types::AllowPublish>,
    pub(crate) upstream: ::std::option::Option<crate::types::AllowUpstream>,
}
impl PackageOriginRestrictionsBuilder {
    /// <p>The package origin configuration that determines if new versions of the package can be published directly to the repository.</p>
    /// This field is required.
    pub fn publish(mut self, input: crate::types::AllowPublish) -> Self {
        self.publish = ::std::option::Option::Some(input);
        self
    }
    /// <p>The package origin configuration that determines if new versions of the package can be published directly to the repository.</p>
    pub fn set_publish(mut self, input: ::std::option::Option<crate::types::AllowPublish>) -> Self {
        self.publish = input;
        self
    }
    /// <p>The package origin configuration that determines if new versions of the package can be published directly to the repository.</p>
    pub fn get_publish(&self) -> &::std::option::Option<crate::types::AllowPublish> {
        &self.publish
    }
    /// <p>The package origin configuration that determines if new versions of the package can be added to the repository from an external connection or upstream source.</p>
    /// This field is required.
    pub fn upstream(mut self, input: crate::types::AllowUpstream) -> Self {
        self.upstream = ::std::option::Option::Some(input);
        self
    }
    /// <p>The package origin configuration that determines if new versions of the package can be added to the repository from an external connection or upstream source.</p>
    pub fn set_upstream(mut self, input: ::std::option::Option<crate::types::AllowUpstream>) -> Self {
        self.upstream = input;
        self
    }
    /// <p>The package origin configuration that determines if new versions of the package can be added to the repository from an external connection or upstream source.</p>
    pub fn get_upstream(&self) -> &::std::option::Option<crate::types::AllowUpstream> {
        &self.upstream
    }
    /// Consumes the builder and constructs a [`PackageOriginRestrictions`](crate::types::PackageOriginRestrictions).
    /// This method will fail if any of the following fields are not set:
    /// - [`publish`](crate::types::builders::PackageOriginRestrictionsBuilder::publish)
    /// - [`upstream`](crate::types::builders::PackageOriginRestrictionsBuilder::upstream)
    pub fn build(self) -> ::std::result::Result<crate::types::PackageOriginRestrictions, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::PackageOriginRestrictions {
            publish: self.publish.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "publish",
                    "publish was not specified but it is required when building PackageOriginRestrictions",
                )
            })?,
            upstream: self.upstream.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "upstream",
                    "upstream was not specified but it is required when building PackageOriginRestrictions",
                )
            })?,
        })
    }
}
