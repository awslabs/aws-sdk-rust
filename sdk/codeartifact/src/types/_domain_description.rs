// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Information about a domain. A domain is a container for repositories. When you create a domain, it is empty until you add one or more repositories. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DomainDescription {
    /// <p> The name of the domain. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The Amazon Web Services account ID that owns the domain. </p>
    #[doc(hidden)]
    pub owner: std::option::Option<std::string::String>,
    /// <p> The Amazon Resource Name (ARN) of the domain. </p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p> The current status of a domain. </p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DomainStatus>,
    /// <p> A timestamp that represents the date and time the domain was created. </p>
    #[doc(hidden)]
    pub created_time: std::option::Option<aws_smithy_types::DateTime>,
    /// <p> The ARN of an Key Management Service (KMS) key associated with a domain. </p>
    #[doc(hidden)]
    pub encryption_key: std::option::Option<std::string::String>,
    /// <p> The number of repositories in the domain. </p>
    #[doc(hidden)]
    pub repository_count: i32,
    /// <p> The total size of all assets in the domain. </p>
    #[doc(hidden)]
    pub asset_size_bytes: i64,
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket that is used to store package assets in the domain.</p>
    #[doc(hidden)]
    pub s3_bucket_arn: std::option::Option<std::string::String>,
}
impl DomainDescription {
    /// <p> The name of the domain. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The Amazon Web Services account ID that owns the domain. </p>
    pub fn owner(&self) -> std::option::Option<&str> {
        self.owner.as_deref()
    }
    /// <p> The Amazon Resource Name (ARN) of the domain. </p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p> The current status of a domain. </p>
    pub fn status(&self) -> std::option::Option<&crate::types::DomainStatus> {
        self.status.as_ref()
    }
    /// <p> A timestamp that represents the date and time the domain was created. </p>
    pub fn created_time(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_time.as_ref()
    }
    /// <p> The ARN of an Key Management Service (KMS) key associated with a domain. </p>
    pub fn encryption_key(&self) -> std::option::Option<&str> {
        self.encryption_key.as_deref()
    }
    /// <p> The number of repositories in the domain. </p>
    pub fn repository_count(&self) -> i32 {
        self.repository_count
    }
    /// <p> The total size of all assets in the domain. </p>
    pub fn asset_size_bytes(&self) -> i64 {
        self.asset_size_bytes
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket that is used to store package assets in the domain.</p>
    pub fn s3_bucket_arn(&self) -> std::option::Option<&str> {
        self.s3_bucket_arn.as_deref()
    }
}
impl DomainDescription {
    /// Creates a new builder-style object to manufacture [`DomainDescription`](crate::types::DomainDescription).
    pub fn builder() -> crate::types::builders::DomainDescriptionBuilder {
        crate::types::builders::DomainDescriptionBuilder::default()
    }
}

/// A builder for [`DomainDescription`](crate::types::DomainDescription).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DomainDescriptionBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) owner: std::option::Option<std::string::String>,
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::DomainStatus>,
    pub(crate) created_time: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) encryption_key: std::option::Option<std::string::String>,
    pub(crate) repository_count: std::option::Option<i32>,
    pub(crate) asset_size_bytes: std::option::Option<i64>,
    pub(crate) s3_bucket_arn: std::option::Option<std::string::String>,
}
impl DomainDescriptionBuilder {
    /// <p> The name of the domain. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> The name of the domain. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The Amazon Web Services account ID that owns the domain. </p>
    pub fn owner(mut self, input: impl Into<std::string::String>) -> Self {
        self.owner = Some(input.into());
        self
    }
    /// <p> The Amazon Web Services account ID that owns the domain. </p>
    pub fn set_owner(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.owner = input;
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the domain. </p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p> The Amazon Resource Name (ARN) of the domain. </p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p> The current status of a domain. </p>
    pub fn status(mut self, input: crate::types::DomainStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p> The current status of a domain. </p>
    pub fn set_status(mut self, input: std::option::Option<crate::types::DomainStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p> A timestamp that represents the date and time the domain was created. </p>
    pub fn created_time(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_time = Some(input);
        self
    }
    /// <p> A timestamp that represents the date and time the domain was created. </p>
    pub fn set_created_time(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_time = input;
        self
    }
    /// <p> The ARN of an Key Management Service (KMS) key associated with a domain. </p>
    pub fn encryption_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.encryption_key = Some(input.into());
        self
    }
    /// <p> The ARN of an Key Management Service (KMS) key associated with a domain. </p>
    pub fn set_encryption_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.encryption_key = input;
        self
    }
    /// <p> The number of repositories in the domain. </p>
    pub fn repository_count(mut self, input: i32) -> Self {
        self.repository_count = Some(input);
        self
    }
    /// <p> The number of repositories in the domain. </p>
    pub fn set_repository_count(mut self, input: std::option::Option<i32>) -> Self {
        self.repository_count = input;
        self
    }
    /// <p> The total size of all assets in the domain. </p>
    pub fn asset_size_bytes(mut self, input: i64) -> Self {
        self.asset_size_bytes = Some(input);
        self
    }
    /// <p> The total size of all assets in the domain. </p>
    pub fn set_asset_size_bytes(mut self, input: std::option::Option<i64>) -> Self {
        self.asset_size_bytes = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket that is used to store package assets in the domain.</p>
    pub fn s3_bucket_arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket_arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Amazon S3 bucket that is used to store package assets in the domain.</p>
    pub fn set_s3_bucket_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket_arn = input;
        self
    }
    /// Consumes the builder and constructs a [`DomainDescription`](crate::types::DomainDescription).
    pub fn build(self) -> crate::types::DomainDescription {
        crate::types::DomainDescription {
            name: self.name,
            owner: self.owner,
            arn: self.arn,
            status: self.status,
            created_time: self.created_time,
            encryption_key: self.encryption_key,
            repository_count: self.repository_count.unwrap_or_default(),
            asset_size_bytes: self.asset_size_bytes.unwrap_or_default(),
            s3_bucket_arn: self.s3_bucket_arn,
        }
    }
}
