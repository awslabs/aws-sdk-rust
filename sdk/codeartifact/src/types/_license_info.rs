// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Details of the license data. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LicenseInfo {
    /// <p> Name of the license. </p>
    #[doc(hidden)]
    pub name: std::option::Option<std::string::String>,
    /// <p> The URL for license data. </p>
    #[doc(hidden)]
    pub url: std::option::Option<std::string::String>,
}
impl LicenseInfo {
    /// <p> Name of the license. </p>
    pub fn name(&self) -> std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p> The URL for license data. </p>
    pub fn url(&self) -> std::option::Option<&str> {
        self.url.as_deref()
    }
}
impl LicenseInfo {
    /// Creates a new builder-style object to manufacture [`LicenseInfo`](crate::types::LicenseInfo).
    pub fn builder() -> crate::types::builders::LicenseInfoBuilder {
        crate::types::builders::LicenseInfoBuilder::default()
    }
}

/// A builder for [`LicenseInfo`](crate::types::LicenseInfo).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LicenseInfoBuilder {
    pub(crate) name: std::option::Option<std::string::String>,
    pub(crate) url: std::option::Option<std::string::String>,
}
impl LicenseInfoBuilder {
    /// <p> Name of the license. </p>
    pub fn name(mut self, input: impl Into<std::string::String>) -> Self {
        self.name = Some(input.into());
        self
    }
    /// <p> Name of the license. </p>
    pub fn set_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The URL for license data. </p>
    pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
        self.url = Some(input.into());
        self
    }
    /// <p> The URL for license data. </p>
    pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.url = input;
        self
    }
    /// Consumes the builder and constructs a [`LicenseInfo`](crate::types::LicenseInfo).
    pub fn build(self) -> crate::types::LicenseInfo {
        crate::types::LicenseInfo {
            name: self.name,
            url: self.url,
        }
    }
}
