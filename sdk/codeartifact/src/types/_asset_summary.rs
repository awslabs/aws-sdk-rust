// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p> Contains details about a package version asset. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AssetSummary {
    /// <p> The name of the asset. </p>
    pub name: ::std::string::String,
    /// <p> The size of the asset. </p>
    pub size: ::std::option::Option<i64>,
    /// <p> The hashes of the asset. </p>
    pub hashes: ::std::option::Option<::std::collections::HashMap<crate::types::HashAlgorithm, ::std::string::String>>,
}
impl AssetSummary {
    /// <p> The name of the asset. </p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p> The size of the asset. </p>
    pub fn size(&self) -> ::std::option::Option<i64> {
        self.size
    }
    /// <p> The hashes of the asset. </p>
    pub fn hashes(&self) -> ::std::option::Option<&::std::collections::HashMap<crate::types::HashAlgorithm, ::std::string::String>> {
        self.hashes.as_ref()
    }
}
impl AssetSummary {
    /// Creates a new builder-style object to manufacture [`AssetSummary`](crate::types::AssetSummary).
    pub fn builder() -> crate::types::builders::AssetSummaryBuilder {
        crate::types::builders::AssetSummaryBuilder::default()
    }
}

/// A builder for [`AssetSummary`](crate::types::AssetSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AssetSummaryBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) size: ::std::option::Option<i64>,
    pub(crate) hashes: ::std::option::Option<::std::collections::HashMap<crate::types::HashAlgorithm, ::std::string::String>>,
}
impl AssetSummaryBuilder {
    /// <p> The name of the asset. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> The name of the asset. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p> The name of the asset. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> The size of the asset. </p>
    pub fn size(mut self, input: i64) -> Self {
        self.size = ::std::option::Option::Some(input);
        self
    }
    /// <p> The size of the asset. </p>
    pub fn set_size(mut self, input: ::std::option::Option<i64>) -> Self {
        self.size = input;
        self
    }
    /// <p> The size of the asset. </p>
    pub fn get_size(&self) -> &::std::option::Option<i64> {
        &self.size
    }
    /// Adds a key-value pair to `hashes`.
    ///
    /// To override the contents of this collection use [`set_hashes`](Self::set_hashes).
    ///
    /// <p> The hashes of the asset. </p>
    pub fn hashes(mut self, k: crate::types::HashAlgorithm, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.hashes.unwrap_or_default();
        hash_map.insert(k, v.into());
        self.hashes = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p> The hashes of the asset. </p>
    pub fn set_hashes(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<crate::types::HashAlgorithm, ::std::string::String>>,
    ) -> Self {
        self.hashes = input;
        self
    }
    /// <p> The hashes of the asset. </p>
    pub fn get_hashes(&self) -> &::std::option::Option<::std::collections::HashMap<crate::types::HashAlgorithm, ::std::string::String>> {
        &self.hashes
    }
    /// Consumes the builder and constructs a [`AssetSummary`](crate::types::AssetSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::AssetSummaryBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::AssetSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::AssetSummary {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building AssetSummary",
                )
            })?,
            size: self.size,
            hashes: self.hashes,
        })
    }
}
