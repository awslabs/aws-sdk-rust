// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about the package origin configuration of a package.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PackageOriginConfiguration {
    /// <p>A <code>PackageOriginRestrictions</code> object that contains information about the upstream and publish package origin configuration for the package.</p>
    #[doc(hidden)]
    pub restrictions: std::option::Option<crate::types::PackageOriginRestrictions>,
}
impl PackageOriginConfiguration {
    /// <p>A <code>PackageOriginRestrictions</code> object that contains information about the upstream and publish package origin configuration for the package.</p>
    pub fn restrictions(&self) -> std::option::Option<&crate::types::PackageOriginRestrictions> {
        self.restrictions.as_ref()
    }
}
impl PackageOriginConfiguration {
    /// Creates a new builder-style object to manufacture [`PackageOriginConfiguration`](crate::types::PackageOriginConfiguration).
    pub fn builder() -> crate::types::builders::PackageOriginConfigurationBuilder {
        crate::types::builders::PackageOriginConfigurationBuilder::default()
    }
}

/// A builder for [`PackageOriginConfiguration`](crate::types::PackageOriginConfiguration).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PackageOriginConfigurationBuilder {
    pub(crate) restrictions: std::option::Option<crate::types::PackageOriginRestrictions>,
}
impl PackageOriginConfigurationBuilder {
    /// <p>A <code>PackageOriginRestrictions</code> object that contains information about the upstream and publish package origin configuration for the package.</p>
    pub fn restrictions(mut self, input: crate::types::PackageOriginRestrictions) -> Self {
        self.restrictions = Some(input);
        self
    }
    /// <p>A <code>PackageOriginRestrictions</code> object that contains information about the upstream and publish package origin configuration for the package.</p>
    pub fn set_restrictions(
        mut self,
        input: std::option::Option<crate::types::PackageOriginRestrictions>,
    ) -> Self {
        self.restrictions = input;
        self
    }
    /// Consumes the builder and constructs a [`PackageOriginConfiguration`](crate::types::PackageOriginConfiguration).
    pub fn build(self) -> crate::types::PackageOriginConfiguration {
        crate::types::PackageOriginConfiguration {
            restrictions: self.restrictions,
        }
    }
}
