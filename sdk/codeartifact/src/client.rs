// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[doc(inline)]
pub use aws_smithy_client::Builder;
#[derive(Debug)]
pub(crate) struct Handle {
    pub(crate) client: aws_smithy_client::Client<
        aws_smithy_client::erase::DynConnector,
        aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
    >,
    pub(crate) conf: crate::Config,
}

/// Client for CodeArtifact
///
/// Client for invoking operations on CodeArtifact. Each operation on CodeArtifact is a method on this
/// this struct. `.send()` MUST be invoked on the generated operations to dispatch the request to the service.
///
/// # Examples
/// **Constructing a client and invoking an operation**
/// ```rust,no_run
/// # async fn docs() {
///     // create a shared configuration. This can be used & shared between multiple service clients.
///     let shared_config = aws_config::load_from_env().await;
///     let client = aws_sdk_codeartifact::Client::new(&shared_config);
///     // invoke an operation
///     /* let rsp = client
///         .<operation_name>().
///         .<param>("some value")
///         .send().await; */
/// # }
/// ```
/// **Constructing a client with custom configuration**
/// ```rust,no_run
/// use aws_config::retry::RetryConfig;
/// # async fn docs() {
/// let shared_config = aws_config::load_from_env().await;
/// let config = aws_sdk_codeartifact::config::Builder::from(&shared_config)
///   .retry_config(RetryConfig::disabled())
///   .build();
/// let client = aws_sdk_codeartifact::Client::from_conf(config);
/// # }
#[derive(std::fmt::Debug)]
pub struct Client {
    handle: std::sync::Arc<Handle>,
}

impl std::clone::Clone for Client {
    fn clone(&self) -> Self {
        Self {
            handle: self.handle.clone(),
        }
    }
}

impl
    From<
        aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    > for Client
{
    fn from(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
    ) -> Self {
        Self::with_config(client, crate::Config::builder().build())
    }
}

impl Client {
    /// Creates a client with the given service configuration.
    pub fn with_config(
        client: aws_smithy_client::Client<
            aws_smithy_client::erase::DynConnector,
            aws_smithy_client::erase::DynMiddleware<aws_smithy_client::erase::DynConnector>,
        >,
        conf: crate::Config,
    ) -> Self {
        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }

    /// Returns the client's configuration.
    pub fn conf(&self) -> &crate::Config {
        &self.handle.conf
    }
}
impl Client {
    /// Constructs a fluent builder for the [`AssociateExternalConnection`](crate::client::fluent_builders::AssociateExternalConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::AssociateExternalConnection::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::AssociateExternalConnection::set_domain): <p>The name of the domain that contains the repository.</p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::AssociateExternalConnection::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::AssociateExternalConnection::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::AssociateExternalConnection::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::AssociateExternalConnection::set_repository): <p> The name of the repository to which the external connection is added. </p>
    ///   - [`external_connection(impl Into<String>)`](crate::client::fluent_builders::AssociateExternalConnection::external_connection) / [`set_external_connection(Option<String>)`](crate::client::fluent_builders::AssociateExternalConnection::set_external_connection): <p> The name of the external connection to add to the repository. The following values are supported: </p>  <ul>   <li> <p> <code>public:npmjs</code> - for the npm public repository. </p> </li>   <li> <p> <code>public:nuget-org</code> - for the NuGet Gallery. </p> </li>   <li> <p> <code>public:pypi</code> - for the Python Package Index. </p> </li>   <li> <p> <code>public:maven-central</code> - for Maven Central. </p> </li>   <li> <p> <code>public:maven-googleandroid</code> - for the Google Android repository. </p> </li>   <li> <p> <code>public:maven-gradleplugins</code> - for the Gradle plugins repository. </p> </li>   <li> <p> <code>public:maven-commonsware</code> - for the CommonsWare Android repository. </p> </li>  </ul>
    /// - On success, responds with [`AssociateExternalConnectionOutput`](crate::output::AssociateExternalConnectionOutput) with field(s):
    ///   - [`repository(Option<RepositoryDescription>)`](crate::output::AssociateExternalConnectionOutput::repository): <p> Information about the connected repository after processing the request. </p>
    /// - On failure, responds with [`SdkError<AssociateExternalConnectionError>`](crate::error::AssociateExternalConnectionError)
    pub fn associate_external_connection(
        &self,
    ) -> crate::client::fluent_builders::AssociateExternalConnection {
        crate::client::fluent_builders::AssociateExternalConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CopyPackageVersions`](crate::client::fluent_builders::CopyPackageVersions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::CopyPackageVersions::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::CopyPackageVersions::set_domain): <p> The name of the domain that contains the source and destination repositories. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::CopyPackageVersions::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::CopyPackageVersions::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`source_repository(impl Into<String>)`](crate::client::fluent_builders::CopyPackageVersions::source_repository) / [`set_source_repository(Option<String>)`](crate::client::fluent_builders::CopyPackageVersions::set_source_repository): <p> The name of the repository that contains the package versions to be copied. </p>
    ///   - [`destination_repository(impl Into<String>)`](crate::client::fluent_builders::CopyPackageVersions::destination_repository) / [`set_destination_repository(Option<String>)`](crate::client::fluent_builders::CopyPackageVersions::set_destination_repository): <p> The name of the repository into which package versions are copied. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::CopyPackageVersions::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::CopyPackageVersions::set_format): <p> The format of the package versions to be copied. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::CopyPackageVersions::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::CopyPackageVersions::set_namespace): <p>The namespace of the package versions to be copied. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when copying Maven package versions. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::CopyPackageVersions::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::CopyPackageVersions::set_package): <p> The name of the package that contains the versions to be copied. </p>
    ///   - [`versions(Vec<String>)`](crate::client::fluent_builders::CopyPackageVersions::versions) / [`set_versions(Option<Vec<String>>)`](crate::client::fluent_builders::CopyPackageVersions::set_versions): <p> The versions of the package to be copied. </p> <note>   <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p>  </note>
    ///   - [`version_revisions(HashMap<String, String>)`](crate::client::fluent_builders::CopyPackageVersions::version_revisions) / [`set_version_revisions(Option<HashMap<String, String>>)`](crate::client::fluent_builders::CopyPackageVersions::set_version_revisions): <p> A list of key-value pairs. The keys are package versions and the values are package version revisions. A <code>CopyPackageVersion</code> operation succeeds if the specified versions in the source repository match the specified package version revision. </p> <note>   <p> You must specify <code>versions</code> or <code>versionRevisions</code>. You cannot specify both. </p>  </note>
    ///   - [`allow_overwrite(bool)`](crate::client::fluent_builders::CopyPackageVersions::allow_overwrite) / [`set_allow_overwrite(Option<bool>)`](crate::client::fluent_builders::CopyPackageVersions::set_allow_overwrite): <p> Set to true to overwrite a package version that already exists in the destination repository. If set to false and the package version already exists in the destination repository, the package version is returned in the <code>failedVersions</code> field of the response with an <code>ALREADY_EXISTS</code> error code. </p>
    ///   - [`include_from_upstream(bool)`](crate::client::fluent_builders::CopyPackageVersions::include_from_upstream) / [`set_include_from_upstream(Option<bool>)`](crate::client::fluent_builders::CopyPackageVersions::set_include_from_upstream): <p> Set to true to copy packages from repositories that are upstream from the source repository to the destination repository. The default setting is false. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. </p>
    /// - On success, responds with [`CopyPackageVersionsOutput`](crate::output::CopyPackageVersionsOutput) with field(s):
    ///   - [`successful_versions(Option<HashMap<String, SuccessfulPackageVersionInfo>>)`](crate::output::CopyPackageVersionsOutput::successful_versions): <p> A list of the package versions that were successfully copied to your repository. </p>
    ///   - [`failed_versions(Option<HashMap<String, PackageVersionError>>)`](crate::output::CopyPackageVersionsOutput::failed_versions): <p> A map of package versions that failed to copy and their error codes. The possible error codes are in the <code>PackageVersionError</code> data type. They are: </p>  <ul>   <li> <p> <code>ALREADY_EXISTS</code> </p> </li>   <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>   <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>   <li> <p> <code>NOT_ALLOWED</code> </p> </li>   <li> <p> <code>NOT_FOUND</code> </p> </li>   <li> <p> <code>SKIPPED</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<CopyPackageVersionsError>`](crate::error::CopyPackageVersionsError)
    pub fn copy_package_versions(&self) -> crate::client::fluent_builders::CopyPackageVersions {
        crate::client::fluent_builders::CopyPackageVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateDomain`](crate::client::fluent_builders::CreateDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::CreateDomain::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::CreateDomain::set_domain): <p> The name of the domain to create. All domain names in an Amazon Web Services Region that are in the same Amazon Web Services account must be unique. The domain name is used as the prefix in DNS hostnames. Do not use sensitive information in a domain name because it is publicly discoverable. </p>
    ///   - [`encryption_key(impl Into<String>)`](crate::client::fluent_builders::CreateDomain::encryption_key) / [`set_encryption_key(Option<String>)`](crate::client::fluent_builders::CreateDomain::set_encryption_key): <p> The encryption key for the domain. This is used to encrypt content stored in a domain. An encryption key can be a key ID, a key Amazon Resource Name (ARN), a key alias, or a key alias ARN. To specify an <code>encryptionKey</code>, your IAM role must have <code>kms:DescribeKey</code> and <code>kms:CreateGrant</code> permissions on the encryption key that is used. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/APIReference/API_DescribeKey.html#API_DescribeKey_RequestSyntax">DescribeKey</a> in the <i>Key Management Service API Reference</i> and <a href="https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html">Key Management Service API Permissions Reference</a> in the <i>Key Management Service Developer Guide</i>. </p> <important>   <p> CodeArtifact supports only symmetric CMKs. Do not associate an asymmetric CMK with your domain. For more information, see <a href="https://docs.aws.amazon.com/kms/latest/developerguide/symmetric-asymmetric.html">Using symmetric and asymmetric keys</a> in the <i>Key Management Service Developer Guide</i>. </p>  </important>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateDomain::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateDomain::set_tags): <p>One or more tag key-value pairs for the domain.</p>
    /// - On success, responds with [`CreateDomainOutput`](crate::output::CreateDomainOutput) with field(s):
    ///   - [`domain(Option<DomainDescription>)`](crate::output::CreateDomainOutput::domain): <p> Contains information about the created domain after processing the request. </p>
    /// - On failure, responds with [`SdkError<CreateDomainError>`](crate::error::CreateDomainError)
    pub fn create_domain(&self) -> crate::client::fluent_builders::CreateDomain {
        crate::client::fluent_builders::CreateDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`CreateRepository`](crate::client::fluent_builders::CreateRepository) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::CreateRepository::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::CreateRepository::set_domain): <p> The name of the domain that contains the created repository. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::CreateRepository::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::CreateRepository::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::CreateRepository::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::CreateRepository::set_repository): <p> The name of the repository to create. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::CreateRepository::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::CreateRepository::set_description): <p> A description of the created repository. </p>
    ///   - [`upstreams(Vec<UpstreamRepository>)`](crate::client::fluent_builders::CreateRepository::upstreams) / [`set_upstreams(Option<Vec<UpstreamRepository>>)`](crate::client::fluent_builders::CreateRepository::set_upstreams): <p> A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when CodeArtifact looks for a requested package version. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. </p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::CreateRepository::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::CreateRepository::set_tags): <p>One or more tag key-value pairs for the repository.</p>
    /// - On success, responds with [`CreateRepositoryOutput`](crate::output::CreateRepositoryOutput) with field(s):
    ///   - [`repository(Option<RepositoryDescription>)`](crate::output::CreateRepositoryOutput::repository): <p> Information about the created repository after processing the request. </p>
    /// - On failure, responds with [`SdkError<CreateRepositoryError>`](crate::error::CreateRepositoryError)
    pub fn create_repository(&self) -> crate::client::fluent_builders::CreateRepository {
        crate::client::fluent_builders::CreateRepository::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDomain`](crate::client::fluent_builders::DeleteDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DeleteDomain::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DeleteDomain::set_domain): <p> The name of the domain to delete. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DeleteDomain::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DeleteDomain::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    /// - On success, responds with [`DeleteDomainOutput`](crate::output::DeleteDomainOutput) with field(s):
    ///   - [`domain(Option<DomainDescription>)`](crate::output::DeleteDomainOutput::domain): <p> Contains information about the deleted domain after processing the request. </p>
    /// - On failure, responds with [`SdkError<DeleteDomainError>`](crate::error::DeleteDomainError)
    pub fn delete_domain(&self) -> crate::client::fluent_builders::DeleteDomain {
        crate::client::fluent_builders::DeleteDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteDomainPermissionsPolicy`](crate::client::fluent_builders::DeleteDomainPermissionsPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DeleteDomainPermissionsPolicy::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DeleteDomainPermissionsPolicy::set_domain): <p> The name of the domain associated with the resource policy to be deleted. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DeleteDomainPermissionsPolicy::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DeleteDomainPermissionsPolicy::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`policy_revision(impl Into<String>)`](crate::client::fluent_builders::DeleteDomainPermissionsPolicy::policy_revision) / [`set_policy_revision(Option<String>)`](crate::client::fluent_builders::DeleteDomainPermissionsPolicy::set_policy_revision): <p> The current revision of the resource policy to be deleted. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. </p>
    /// - On success, responds with [`DeleteDomainPermissionsPolicyOutput`](crate::output::DeleteDomainPermissionsPolicyOutput) with field(s):
    ///   - [`policy(Option<ResourcePolicy>)`](crate::output::DeleteDomainPermissionsPolicyOutput::policy): <p> Information about the deleted resource policy after processing the request. </p>
    /// - On failure, responds with [`SdkError<DeleteDomainPermissionsPolicyError>`](crate::error::DeleteDomainPermissionsPolicyError)
    pub fn delete_domain_permissions_policy(
        &self,
    ) -> crate::client::fluent_builders::DeleteDomainPermissionsPolicy {
        crate::client::fluent_builders::DeleteDomainPermissionsPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeletePackageVersions`](crate::client::fluent_builders::DeletePackageVersions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DeletePackageVersions::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DeletePackageVersions::set_domain): <p> The name of the domain that contains the package to delete. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DeletePackageVersions::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DeletePackageVersions::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::DeletePackageVersions::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::DeletePackageVersions::set_repository): <p> The name of the repository that contains the package versions to delete. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::DeletePackageVersions::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::DeletePackageVersions::set_format): <p> The format of the package versions to delete. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::DeletePackageVersions::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::DeletePackageVersions::set_namespace): <p>The namespace of the package versions to be deleted. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. The namespace is required when deleting Maven package versions. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::DeletePackageVersions::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::DeletePackageVersions::set_package): <p> The name of the package with the versions to delete. </p>
    ///   - [`versions(Vec<String>)`](crate::client::fluent_builders::DeletePackageVersions::versions) / [`set_versions(Option<Vec<String>>)`](crate::client::fluent_builders::DeletePackageVersions::set_versions): <p> An array of strings that specify the versions of the package to delete. </p>
    ///   - [`expected_status(PackageVersionStatus)`](crate::client::fluent_builders::DeletePackageVersions::expected_status) / [`set_expected_status(Option<PackageVersionStatus>)`](crate::client::fluent_builders::DeletePackageVersions::set_expected_status): <p> The expected status of the package version to delete. </p>
    /// - On success, responds with [`DeletePackageVersionsOutput`](crate::output::DeletePackageVersionsOutput) with field(s):
    ///   - [`successful_versions(Option<HashMap<String, SuccessfulPackageVersionInfo>>)`](crate::output::DeletePackageVersionsOutput::successful_versions): <p> A list of the package versions that were successfully deleted. The status of every successful version will be <code>Deleted</code>. </p>
    ///   - [`failed_versions(Option<HashMap<String, PackageVersionError>>)`](crate::output::DeletePackageVersionsOutput::failed_versions): <p> A <code>PackageVersionError</code> object that contains a map of errors codes for the deleted package that failed. The possible error codes are: </p>  <ul>   <li> <p> <code>ALREADY_EXISTS</code> </p> </li>   <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>   <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>   <li> <p> <code>NOT_ALLOWED</code> </p> </li>   <li> <p> <code>NOT_FOUND</code> </p> </li>   <li> <p> <code>SKIPPED</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DeletePackageVersionsError>`](crate::error::DeletePackageVersionsError)
    pub fn delete_package_versions(&self) -> crate::client::fluent_builders::DeletePackageVersions {
        crate::client::fluent_builders::DeletePackageVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRepository`](crate::client::fluent_builders::DeleteRepository) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DeleteRepository::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DeleteRepository::set_domain): <p> The name of the domain that contains the repository to delete. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DeleteRepository::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DeleteRepository::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::DeleteRepository::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::DeleteRepository::set_repository): <p> The name of the repository to delete. </p>
    /// - On success, responds with [`DeleteRepositoryOutput`](crate::output::DeleteRepositoryOutput) with field(s):
    ///   - [`repository(Option<RepositoryDescription>)`](crate::output::DeleteRepositoryOutput::repository): <p> Information about the deleted repository after processing the request. </p>
    /// - On failure, responds with [`SdkError<DeleteRepositoryError>`](crate::error::DeleteRepositoryError)
    pub fn delete_repository(&self) -> crate::client::fluent_builders::DeleteRepository {
        crate::client::fluent_builders::DeleteRepository::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DeleteRepositoryPermissionsPolicy`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::set_domain): <p> The name of the domain that contains the repository associated with the resource policy to be deleted. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::set_repository): <p> The name of the repository that is associated with the resource policy to be deleted </p>
    ///   - [`policy_revision(impl Into<String>)`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::policy_revision) / [`set_policy_revision(Option<String>)`](crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::set_policy_revision): <p> The revision of the repository's resource policy to be deleted. This revision is used for optimistic locking, which prevents others from accidentally overwriting your changes to the repository's resource policy. </p>
    /// - On success, responds with [`DeleteRepositoryPermissionsPolicyOutput`](crate::output::DeleteRepositoryPermissionsPolicyOutput) with field(s):
    ///   - [`policy(Option<ResourcePolicy>)`](crate::output::DeleteRepositoryPermissionsPolicyOutput::policy): <p> Information about the deleted policy after processing the request. </p>
    /// - On failure, responds with [`SdkError<DeleteRepositoryPermissionsPolicyError>`](crate::error::DeleteRepositoryPermissionsPolicyError)
    pub fn delete_repository_permissions_policy(
        &self,
    ) -> crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy {
        crate::client::fluent_builders::DeleteRepositoryPermissionsPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeDomain`](crate::client::fluent_builders::DescribeDomain) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DescribeDomain::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DescribeDomain::set_domain): <p> A string that specifies the name of the requested domain. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DescribeDomain::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DescribeDomain::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    /// - On success, responds with [`DescribeDomainOutput`](crate::output::DescribeDomainOutput) with field(s):
    ///   - [`domain(Option<DomainDescription>)`](crate::output::DescribeDomainOutput::domain): <p> Information about a domain. A domain is a container for repositories. When you create a domain, it is empty until you add one or more repositories. </p>
    /// - On failure, responds with [`SdkError<DescribeDomainError>`](crate::error::DescribeDomainError)
    pub fn describe_domain(&self) -> crate::client::fluent_builders::DescribeDomain {
        crate::client::fluent_builders::DescribeDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePackage`](crate::client::fluent_builders::DescribePackage) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DescribePackage::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DescribePackage::set_domain): <p>The name of the domain that contains the repository that contains the package.</p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DescribePackage::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DescribePackage::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::DescribePackage::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::DescribePackage::set_repository): <p>The name of the repository that contains the requested package. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::DescribePackage::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::DescribePackage::set_format): <p>A format that specifies the type of the requested package.</p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::DescribePackage::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::DescribePackage::set_namespace): <p>The namespace of the requested package. The package component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package is its <code>groupId</code>. The namespace is required when requesting Maven packages. </p> </li>   <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::DescribePackage::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::DescribePackage::set_package): <p>The name of the requested package.</p>
    /// - On success, responds with [`DescribePackageOutput`](crate::output::DescribePackageOutput) with field(s):
    ///   - [`package(Option<PackageDescription>)`](crate::output::DescribePackageOutput::package): <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDescription.html">PackageDescription</a> object that contains information about the requested package.</p>
    /// - On failure, responds with [`SdkError<DescribePackageError>`](crate::error::DescribePackageError)
    pub fn describe_package(&self) -> crate::client::fluent_builders::DescribePackage {
        crate::client::fluent_builders::DescribePackage::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribePackageVersion`](crate::client::fluent_builders::DescribePackageVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DescribePackageVersion::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DescribePackageVersion::set_domain): <p> The name of the domain that contains the repository that contains the package version. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DescribePackageVersion::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DescribePackageVersion::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::DescribePackageVersion::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::DescribePackageVersion::set_repository): <p> The name of the repository that contains the package version. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::DescribePackageVersion::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::DescribePackageVersion::set_format): <p> A format that specifies the type of the requested package version. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::DescribePackageVersion::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::DescribePackageVersion::set_namespace): <p>The namespace of the requested package version. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::DescribePackageVersion::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::DescribePackageVersion::set_package): <p> The name of the requested package version. </p>
    ///   - [`package_version(impl Into<String>)`](crate::client::fluent_builders::DescribePackageVersion::package_version) / [`set_package_version(Option<String>)`](crate::client::fluent_builders::DescribePackageVersion::set_package_version): <p> A string that contains the package version (for example, <code>3.5.2</code>). </p>
    /// - On success, responds with [`DescribePackageVersionOutput`](crate::output::DescribePackageVersionOutput) with field(s):
    ///   - [`package_version(Option<PackageVersionDescription>)`](crate::output::DescribePackageVersionOutput::package_version): <p> A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionDescription.html">PackageVersionDescription</a> object that contains information about the requested package version. </p>
    /// - On failure, responds with [`SdkError<DescribePackageVersionError>`](crate::error::DescribePackageVersionError)
    pub fn describe_package_version(
        &self,
    ) -> crate::client::fluent_builders::DescribePackageVersion {
        crate::client::fluent_builders::DescribePackageVersion::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DescribeRepository`](crate::client::fluent_builders::DescribeRepository) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DescribeRepository::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DescribeRepository::set_domain): <p> The name of the domain that contains the repository to describe. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DescribeRepository::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DescribeRepository::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::DescribeRepository::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::DescribeRepository::set_repository): <p> A string that specifies the name of the requested repository. </p>
    /// - On success, responds with [`DescribeRepositoryOutput`](crate::output::DescribeRepositoryOutput) with field(s):
    ///   - [`repository(Option<RepositoryDescription>)`](crate::output::DescribeRepositoryOutput::repository): <p> A <code>RepositoryDescription</code> object that contains the requested repository information. </p>
    /// - On failure, responds with [`SdkError<DescribeRepositoryError>`](crate::error::DescribeRepositoryError)
    pub fn describe_repository(&self) -> crate::client::fluent_builders::DescribeRepository {
        crate::client::fluent_builders::DescribeRepository::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisassociateExternalConnection`](crate::client::fluent_builders::DisassociateExternalConnection) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DisassociateExternalConnection::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DisassociateExternalConnection::set_domain): <p>The name of the domain that contains the repository from which to remove the external repository. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DisassociateExternalConnection::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DisassociateExternalConnection::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::DisassociateExternalConnection::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::DisassociateExternalConnection::set_repository): <p>The name of the repository from which the external connection will be removed. </p>
    ///   - [`external_connection(impl Into<String>)`](crate::client::fluent_builders::DisassociateExternalConnection::external_connection) / [`set_external_connection(Option<String>)`](crate::client::fluent_builders::DisassociateExternalConnection::set_external_connection): <p>The name of the external connection to be removed from the repository. </p>
    /// - On success, responds with [`DisassociateExternalConnectionOutput`](crate::output::DisassociateExternalConnectionOutput) with field(s):
    ///   - [`repository(Option<RepositoryDescription>)`](crate::output::DisassociateExternalConnectionOutput::repository): <p> The repository associated with the removed external connection. </p>
    /// - On failure, responds with [`SdkError<DisassociateExternalConnectionError>`](crate::error::DisassociateExternalConnectionError)
    pub fn disassociate_external_connection(
        &self,
    ) -> crate::client::fluent_builders::DisassociateExternalConnection {
        crate::client::fluent_builders::DisassociateExternalConnection::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`DisposePackageVersions`](crate::client::fluent_builders::DisposePackageVersions) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::DisposePackageVersions::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::DisposePackageVersions::set_domain): <p> The name of the domain that contains the repository you want to dispose. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::DisposePackageVersions::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::DisposePackageVersions::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::DisposePackageVersions::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::DisposePackageVersions::set_repository): <p> The name of the repository that contains the package versions you want to dispose. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::DisposePackageVersions::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::DisposePackageVersions::set_format): <p> A format that specifies the type of package versions you want to dispose. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::DisposePackageVersions::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::DisposePackageVersions::set_namespace): <p>The namespace of the package versions to be disposed. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::DisposePackageVersions::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::DisposePackageVersions::set_package): <p> The name of the package with the versions you want to dispose. </p>
    ///   - [`versions(Vec<String>)`](crate::client::fluent_builders::DisposePackageVersions::versions) / [`set_versions(Option<Vec<String>>)`](crate::client::fluent_builders::DisposePackageVersions::set_versions): <p> The versions of the package you want to dispose. </p>
    ///   - [`version_revisions(HashMap<String, String>)`](crate::client::fluent_builders::DisposePackageVersions::version_revisions) / [`set_version_revisions(Option<HashMap<String, String>>)`](crate::client::fluent_builders::DisposePackageVersions::set_version_revisions): <p> The revisions of the package versions you want to dispose. </p>
    ///   - [`expected_status(PackageVersionStatus)`](crate::client::fluent_builders::DisposePackageVersions::expected_status) / [`set_expected_status(Option<PackageVersionStatus>)`](crate::client::fluent_builders::DisposePackageVersions::set_expected_status): <p> The expected status of the package version to dispose. </p>
    /// - On success, responds with [`DisposePackageVersionsOutput`](crate::output::DisposePackageVersionsOutput) with field(s):
    ///   - [`successful_versions(Option<HashMap<String, SuccessfulPackageVersionInfo>>)`](crate::output::DisposePackageVersionsOutput::successful_versions): <p> A list of the package versions that were successfully disposed. </p>
    ///   - [`failed_versions(Option<HashMap<String, PackageVersionError>>)`](crate::output::DisposePackageVersionsOutput::failed_versions): <p> A <code>PackageVersionError</code> object that contains a map of errors codes for the disposed package versions that failed. The possible error codes are: </p>  <ul>   <li> <p> <code>ALREADY_EXISTS</code> </p> </li>   <li> <p> <code>MISMATCHED_REVISION</code> </p> </li>   <li> <p> <code>MISMATCHED_STATUS</code> </p> </li>   <li> <p> <code>NOT_ALLOWED</code> </p> </li>   <li> <p> <code>NOT_FOUND</code> </p> </li>   <li> <p> <code>SKIPPED</code> </p> </li>  </ul>
    /// - On failure, responds with [`SdkError<DisposePackageVersionsError>`](crate::error::DisposePackageVersionsError)
    pub fn dispose_package_versions(
        &self,
    ) -> crate::client::fluent_builders::DisposePackageVersions {
        crate::client::fluent_builders::DisposePackageVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetAuthorizationToken`](crate::client::fluent_builders::GetAuthorizationToken) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::GetAuthorizationToken::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::GetAuthorizationToken::set_domain): <p> The name of the domain that is in scope for the generated authorization token. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::GetAuthorizationToken::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::GetAuthorizationToken::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`duration_seconds(i64)`](crate::client::fluent_builders::GetAuthorizationToken::duration_seconds) / [`set_duration_seconds(Option<i64>)`](crate::client::fluent_builders::GetAuthorizationToken::set_duration_seconds): <p>The time, in seconds, that the generated authorization token is valid. Valid values are <code>0</code> and any number between <code>900</code> (15 minutes) and <code>43200</code> (12 hours). A value of <code>0</code> will set the expiration of the authorization token to the same expiration of the user's role's temporary credentials.</p>
    /// - On success, responds with [`GetAuthorizationTokenOutput`](crate::output::GetAuthorizationTokenOutput) with field(s):
    ///   - [`authorization_token(Option<String>)`](crate::output::GetAuthorizationTokenOutput::authorization_token): <p> The returned authentication token. </p>
    ///   - [`expiration(Option<DateTime>)`](crate::output::GetAuthorizationTokenOutput::expiration): <p> A timestamp that specifies the date and time the authorization token expires. </p>
    /// - On failure, responds with [`SdkError<GetAuthorizationTokenError>`](crate::error::GetAuthorizationTokenError)
    pub fn get_authorization_token(&self) -> crate::client::fluent_builders::GetAuthorizationToken {
        crate::client::fluent_builders::GetAuthorizationToken::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetDomainPermissionsPolicy`](crate::client::fluent_builders::GetDomainPermissionsPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::GetDomainPermissionsPolicy::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::GetDomainPermissionsPolicy::set_domain): <p> The name of the domain to which the resource policy is attached. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::GetDomainPermissionsPolicy::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::GetDomainPermissionsPolicy::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    /// - On success, responds with [`GetDomainPermissionsPolicyOutput`](crate::output::GetDomainPermissionsPolicyOutput) with field(s):
    ///   - [`policy(Option<ResourcePolicy>)`](crate::output::GetDomainPermissionsPolicyOutput::policy): <p> The returned resource policy. </p>
    /// - On failure, responds with [`SdkError<GetDomainPermissionsPolicyError>`](crate::error::GetDomainPermissionsPolicyError)
    pub fn get_domain_permissions_policy(
        &self,
    ) -> crate::client::fluent_builders::GetDomainPermissionsPolicy {
        crate::client::fluent_builders::GetDomainPermissionsPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPackageVersionAsset`](crate::client::fluent_builders::GetPackageVersionAsset) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_domain): <p> The name of the domain that contains the repository that contains the package version with the requested asset. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_repository): <p> The repository that contains the package version with the requested asset. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::GetPackageVersionAsset::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_format): <p> A format that specifies the type of the package version with the requested asset file. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_namespace): <p>The namespace of the package version with the requested asset file. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_package): <p> The name of the package that contains the requested asset. </p>
    ///   - [`package_version(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::package_version) / [`set_package_version(Option<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_package_version): <p> A string that contains the package version (for example, <code>3.5.2</code>). </p>
    ///   - [`asset(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::asset) / [`set_asset(Option<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_asset): <p> The name of the requested asset. </p>
    ///   - [`package_version_revision(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::package_version_revision) / [`set_package_version_revision(Option<String>)`](crate::client::fluent_builders::GetPackageVersionAsset::set_package_version_revision): <p> The name of the package version revision that contains the requested asset. </p>
    /// - On success, responds with [`GetPackageVersionAssetOutput`](crate::output::GetPackageVersionAssetOutput) with field(s):
    ///   - [`asset(ByteStream)`](crate::output::GetPackageVersionAssetOutput::asset): <p> The binary file, or asset, that is downloaded.</p>
    ///   - [`asset_name(Option<String>)`](crate::output::GetPackageVersionAssetOutput::asset_name): <p> The name of the asset that is downloaded. </p>
    ///   - [`package_version(Option<String>)`](crate::output::GetPackageVersionAssetOutput::package_version): <p> A string that contains the package version (for example, <code>3.5.2</code>). </p>
    ///   - [`package_version_revision(Option<String>)`](crate::output::GetPackageVersionAssetOutput::package_version_revision): <p> The name of the package version revision that contains the downloaded asset. </p>
    /// - On failure, responds with [`SdkError<GetPackageVersionAssetError>`](crate::error::GetPackageVersionAssetError)
    pub fn get_package_version_asset(
        &self,
    ) -> crate::client::fluent_builders::GetPackageVersionAsset {
        crate::client::fluent_builders::GetPackageVersionAsset::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetPackageVersionReadme`](crate::client::fluent_builders::GetPackageVersionReadme) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::set_domain): <p> The name of the domain that contains the repository that contains the package version with the requested readme file. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::set_repository): <p> The repository that contains the package with the requested readme file. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::GetPackageVersionReadme::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::GetPackageVersionReadme::set_format): <p> A format that specifies the type of the package version with the requested readme file. </p> <note>   <p>Although <code>maven</code> is listed as a valid value, CodeArtifact does not support displaying readme files for Maven packages.</p>  </note>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::set_namespace): <p>The namespace of the package version with the requested readme file. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::set_package): <p> The name of the package version that contains the requested readme file. </p>
    ///   - [`package_version(impl Into<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::package_version) / [`set_package_version(Option<String>)`](crate::client::fluent_builders::GetPackageVersionReadme::set_package_version): <p> A string that contains the package version (for example, <code>3.5.2</code>). </p>
    /// - On success, responds with [`GetPackageVersionReadmeOutput`](crate::output::GetPackageVersionReadmeOutput) with field(s):
    ///   - [`format(Option<PackageFormat>)`](crate::output::GetPackageVersionReadmeOutput::format): <p> The format of the package with the requested readme file. </p>
    ///   - [`namespace(Option<String>)`](crate::output::GetPackageVersionReadmeOutput::namespace): <p>The namespace of the package version with the requested readme file. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(Option<String>)`](crate::output::GetPackageVersionReadmeOutput::package): <p> The name of the package that contains the returned readme file. </p>
    ///   - [`version(Option<String>)`](crate::output::GetPackageVersionReadmeOutput::version): <p> The version of the package with the requested readme file. </p>
    ///   - [`version_revision(Option<String>)`](crate::output::GetPackageVersionReadmeOutput::version_revision): <p> The current revision associated with the package version. </p>
    ///   - [`readme(Option<String>)`](crate::output::GetPackageVersionReadmeOutput::readme): <p> The text of the returned readme file. </p>
    /// - On failure, responds with [`SdkError<GetPackageVersionReadmeError>`](crate::error::GetPackageVersionReadmeError)
    pub fn get_package_version_readme(
        &self,
    ) -> crate::client::fluent_builders::GetPackageVersionReadme {
        crate::client::fluent_builders::GetPackageVersionReadme::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRepositoryEndpoint`](crate::client::fluent_builders::GetRepositoryEndpoint) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::GetRepositoryEndpoint::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::GetRepositoryEndpoint::set_domain): <p> The name of the domain that contains the repository. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::GetRepositoryEndpoint::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::GetRepositoryEndpoint::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain that contains the repository. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::GetRepositoryEndpoint::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::GetRepositoryEndpoint::set_repository): <p> The name of the repository. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::GetRepositoryEndpoint::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::GetRepositoryEndpoint::set_format): <p> Returns which endpoint of a repository to return. A repository has one endpoint for each package format. </p>
    /// - On success, responds with [`GetRepositoryEndpointOutput`](crate::output::GetRepositoryEndpointOutput) with field(s):
    ///   - [`repository_endpoint(Option<String>)`](crate::output::GetRepositoryEndpointOutput::repository_endpoint): <p> A string that specifies the URL of the returned endpoint. </p>
    /// - On failure, responds with [`SdkError<GetRepositoryEndpointError>`](crate::error::GetRepositoryEndpointError)
    pub fn get_repository_endpoint(&self) -> crate::client::fluent_builders::GetRepositoryEndpoint {
        crate::client::fluent_builders::GetRepositoryEndpoint::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`GetRepositoryPermissionsPolicy`](crate::client::fluent_builders::GetRepositoryPermissionsPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::GetRepositoryPermissionsPolicy::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::GetRepositoryPermissionsPolicy::set_domain): <p> The name of the domain containing the repository whose associated resource policy is to be retrieved. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::GetRepositoryPermissionsPolicy::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::GetRepositoryPermissionsPolicy::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::GetRepositoryPermissionsPolicy::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::GetRepositoryPermissionsPolicy::set_repository): <p> The name of the repository whose associated resource policy is to be retrieved. </p>
    /// - On success, responds with [`GetRepositoryPermissionsPolicyOutput`](crate::output::GetRepositoryPermissionsPolicyOutput) with field(s):
    ///   - [`policy(Option<ResourcePolicy>)`](crate::output::GetRepositoryPermissionsPolicyOutput::policy): <p> The returned resource policy. </p>
    /// - On failure, responds with [`SdkError<GetRepositoryPermissionsPolicyError>`](crate::error::GetRepositoryPermissionsPolicyError)
    pub fn get_repository_permissions_policy(
        &self,
    ) -> crate::client::fluent_builders::GetRepositoryPermissionsPolicy {
        crate::client::fluent_builders::GetRepositoryPermissionsPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListDomains`](crate::client::fluent_builders::ListDomains) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListDomains::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListDomains::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListDomains::set_max_results): <p> The maximum number of results to return per page. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListDomains::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListDomains::set_next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    /// - On success, responds with [`ListDomainsOutput`](crate::output::ListDomainsOutput) with field(s):
    ///   - [`domains(Option<Vec<DomainSummary>>)`](crate::output::ListDomainsOutput::domains): <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_DomainSummary.html">DomainSummary</a> objects. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListDomainsOutput::next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    /// - On failure, responds with [`SdkError<ListDomainsError>`](crate::error::ListDomainsError)
    pub fn list_domains(&self) -> crate::client::fluent_builders::ListDomains {
        crate::client::fluent_builders::ListDomains::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPackages`](crate::client::fluent_builders::ListPackages) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPackages::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListPackages::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListPackages::set_domain): <p> The name of the domain that contains the repository that contains the requested packages. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::ListPackages::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::ListPackages::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::ListPackages::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::ListPackages::set_repository): <p> The name of the repository that contains the requested packages. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::ListPackages::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::ListPackages::set_format): <p>The format used to filter requested packages. Only packages from the provided format will be returned.</p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::ListPackages::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::ListPackages::set_namespace): <p>The namespace prefix used to filter requested packages. Only packages with a namespace that starts with the provided string value are returned. Note that although this option is called <code>--namespace</code> and not <code>--namespace-prefix</code>, it has prefix-matching behavior.</p>  <p>Each package format uses namespace as follows:</p>  <ul>   <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package_prefix(impl Into<String>)`](crate::client::fluent_builders::ListPackages::package_prefix) / [`set_package_prefix(Option<String>)`](crate::client::fluent_builders::ListPackages::set_package_prefix): <p> A prefix used to filter requested packages. Only packages with names that start with <code>packagePrefix</code> are returned. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPackages::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPackages::set_max_results): <p> The maximum number of results to return per page. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPackages::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPackages::set_next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    ///   - [`publish(AllowPublish)`](crate::client::fluent_builders::ListPackages::publish) / [`set_publish(Option<AllowPublish>)`](crate::client::fluent_builders::ListPackages::set_publish): <p>The value of the <code>Publish</code> package origin control restriction used to filter requested packages. Only packages with the provided restriction are returned. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a>.</p>
    ///   - [`upstream(AllowUpstream)`](crate::client::fluent_builders::ListPackages::upstream) / [`set_upstream(Option<AllowUpstream>)`](crate::client::fluent_builders::ListPackages::set_upstream): <p>The value of the <code>Upstream</code> package origin control restriction used to filter requested packages. Only packages with the provided restriction are returned. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a>.</p>
    /// - On success, responds with [`ListPackagesOutput`](crate::output::ListPackagesOutput) with field(s):
    ///   - [`packages(Option<Vec<PackageSummary>>)`](crate::output::ListPackagesOutput::packages): <p> The list of returned <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageSummary.html">PackageSummary</a> objects. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPackagesOutput::next_token): <p> If there are additional results, this is the token for the next set of results. </p>
    /// - On failure, responds with [`SdkError<ListPackagesError>`](crate::error::ListPackagesError)
    pub fn list_packages(&self) -> crate::client::fluent_builders::ListPackages {
        crate::client::fluent_builders::ListPackages::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPackageVersionAssets`](crate::client::fluent_builders::ListPackageVersionAssets) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPackageVersionAssets::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_domain): <p> The name of the domain that contains the repository associated with the package version assets. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_repository): <p> The name of the repository that contains the package that contains the requested package version assets. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::ListPackageVersionAssets::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_format): <p> The format of the package that contains the requested package version assets. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_namespace): <p>The namespace of the package version that contains the requested package version assets. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_package): <p> The name of the package that contains the requested package version assets. </p>
    ///   - [`package_version(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::package_version) / [`set_package_version(Option<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_package_version): <p> A string that contains the package version (for example, <code>3.5.2</code>). </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPackageVersionAssets::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_max_results): <p> The maximum number of results to return per page. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPackageVersionAssets::set_next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    /// - On success, responds with [`ListPackageVersionAssetsOutput`](crate::output::ListPackageVersionAssetsOutput) with field(s):
    ///   - [`format(Option<PackageFormat>)`](crate::output::ListPackageVersionAssetsOutput::format): <p> The format of the package that contains the requested package version assets. </p>
    ///   - [`namespace(Option<String>)`](crate::output::ListPackageVersionAssetsOutput::namespace): <p>The namespace of the package version that contains the requested package version assets. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(Option<String>)`](crate::output::ListPackageVersionAssetsOutput::package): <p> The name of the package that contains the requested package version assets. </p>
    ///   - [`version(Option<String>)`](crate::output::ListPackageVersionAssetsOutput::version): <p> The version of the package associated with the requested assets. </p>
    ///   - [`version_revision(Option<String>)`](crate::output::ListPackageVersionAssetsOutput::version_revision): <p> The current revision associated with the package version. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPackageVersionAssetsOutput::next_token): <p> If there are additional results, this is the token for the next set of results. </p>
    ///   - [`assets(Option<Vec<AssetSummary>>)`](crate::output::ListPackageVersionAssetsOutput::assets): <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_AssetSummary.html">AssetSummary</a> objects. </p>
    /// - On failure, responds with [`SdkError<ListPackageVersionAssetsError>`](crate::error::ListPackageVersionAssetsError)
    pub fn list_package_version_assets(
        &self,
    ) -> crate::client::fluent_builders::ListPackageVersionAssets {
        crate::client::fluent_builders::ListPackageVersionAssets::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPackageVersionDependencies`](crate::client::fluent_builders::ListPackageVersionDependencies) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::set_domain): <p> The name of the domain that contains the repository that contains the requested package version dependencies. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::set_repository): <p> The name of the repository that contains the requested package version. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::ListPackageVersionDependencies::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::ListPackageVersionDependencies::set_format): <p> The format of the package with the requested dependencies. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::set_namespace): <p>The namespace of the package version with the requested dependencies. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::set_package): <p> The name of the package versions' package. </p>
    ///   - [`package_version(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::package_version) / [`set_package_version(Option<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::set_package_version): <p> A string that contains the package version (for example, <code>3.5.2</code>). </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPackageVersionDependencies::set_next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    /// - On success, responds with [`ListPackageVersionDependenciesOutput`](crate::output::ListPackageVersionDependenciesOutput) with field(s):
    ///   - [`format(Option<PackageFormat>)`](crate::output::ListPackageVersionDependenciesOutput::format): <p> A format that specifies the type of the package that contains the returned dependencies. </p>
    ///   - [`namespace(Option<String>)`](crate::output::ListPackageVersionDependenciesOutput::namespace): <p>The namespace of the package version that contains the returned dependencies. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(Option<String>)`](crate::output::ListPackageVersionDependenciesOutput::package): <p> The name of the package that contains the returned package versions dependencies. </p>
    ///   - [`version(Option<String>)`](crate::output::ListPackageVersionDependenciesOutput::version): <p> The version of the package that is specified in the request. </p>
    ///   - [`version_revision(Option<String>)`](crate::output::ListPackageVersionDependenciesOutput::version_revision): <p> The current revision associated with the package version. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPackageVersionDependenciesOutput::next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    ///   - [`dependencies(Option<Vec<PackageDependency>>)`](crate::output::ListPackageVersionDependenciesOutput::dependencies): <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageDependency.html">PackageDependency</a> objects. </p>
    /// - On failure, responds with [`SdkError<ListPackageVersionDependenciesError>`](crate::error::ListPackageVersionDependenciesError)
    pub fn list_package_version_dependencies(
        &self,
    ) -> crate::client::fluent_builders::ListPackageVersionDependencies {
        crate::client::fluent_builders::ListPackageVersionDependencies::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListPackageVersions`](crate::client::fluent_builders::ListPackageVersions) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListPackageVersions::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersions::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListPackageVersions::set_domain): <p> The name of the domain that contains the repository that contains the requested package versions. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersions::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::ListPackageVersions::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersions::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::ListPackageVersions::set_repository): <p> The name of the repository that contains the requested package versions. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::ListPackageVersions::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::ListPackageVersions::set_format): <p> The format of the returned package versions. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersions::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::ListPackageVersions::set_namespace): <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersions::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::ListPackageVersions::set_package): <p> The name of the package for which you want to request package versions. </p>
    ///   - [`status(PackageVersionStatus)`](crate::client::fluent_builders::ListPackageVersions::status) / [`set_status(Option<PackageVersionStatus>)`](crate::client::fluent_builders::ListPackageVersions::set_status): <p> A string that filters the requested package versions by status. </p>
    ///   - [`sort_by(PackageVersionSortType)`](crate::client::fluent_builders::ListPackageVersions::sort_by) / [`set_sort_by(Option<PackageVersionSortType>)`](crate::client::fluent_builders::ListPackageVersions::set_sort_by): <p> How to sort the requested list of package versions. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListPackageVersions::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListPackageVersions::set_max_results): <p> The maximum number of results to return per page. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListPackageVersions::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListPackageVersions::set_next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    ///   - [`origin_type(PackageVersionOriginType)`](crate::client::fluent_builders::ListPackageVersions::origin_type) / [`set_origin_type(Option<PackageVersionOriginType>)`](crate::client::fluent_builders::ListPackageVersions::set_origin_type): <p>The <code>originType</code> used to filter package versions. Only package versions with the provided <code>originType</code> will be returned.</p>
    /// - On success, responds with [`ListPackageVersionsOutput`](crate::output::ListPackageVersionsOutput) with field(s):
    ///   - [`default_display_version(Option<String>)`](crate::output::ListPackageVersionsOutput::default_display_version): <p> The default package version to display. This depends on the package format: </p>  <ul>   <li> <p> For Maven and PyPI packages, it's the most recently published package version. </p> </li>   <li> <p> For npm packages, it's the version referenced by the <code>latest</code> tag. If the <code>latest</code> tag is not set, it's the most recently published package version. </p> </li>  </ul>
    ///   - [`format(Option<PackageFormat>)`](crate::output::ListPackageVersionsOutput::format): <p> A format of the package. </p>
    ///   - [`namespace(Option<String>)`](crate::output::ListPackageVersionsOutput::namespace): <p>The namespace of the package that contains the requested package versions. The package component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(Option<String>)`](crate::output::ListPackageVersionsOutput::package): <p> The name of the package. </p>
    ///   - [`versions(Option<Vec<PackageVersionSummary>>)`](crate::output::ListPackageVersionsOutput::versions): <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageVersionSummary.html">PackageVersionSummary</a> objects. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListPackageVersionsOutput::next_token): <p> If there are additional results, this is the token for the next set of results. </p>
    /// - On failure, responds with [`SdkError<ListPackageVersionsError>`](crate::error::ListPackageVersionsError)
    pub fn list_package_versions(&self) -> crate::client::fluent_builders::ListPackageVersions {
        crate::client::fluent_builders::ListPackageVersions::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRepositories`](crate::client::fluent_builders::ListRepositories) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRepositories::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`repository_prefix(impl Into<String>)`](crate::client::fluent_builders::ListRepositories::repository_prefix) / [`set_repository_prefix(Option<String>)`](crate::client::fluent_builders::ListRepositories::set_repository_prefix): <p> A prefix used to filter returned repositories. Only repositories with names that start with <code>repositoryPrefix</code> are returned.</p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRepositories::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRepositories::set_max_results): <p> The maximum number of results to return per page. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListRepositories::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListRepositories::set_next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    /// - On success, responds with [`ListRepositoriesOutput`](crate::output::ListRepositoriesOutput) with field(s):
    ///   - [`repositories(Option<Vec<RepositorySummary>>)`](crate::output::ListRepositoriesOutput::repositories): <p> The returned list of <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_RepositorySummary.html">RepositorySummary</a> objects. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRepositoriesOutput::next_token): <p> If there are additional results, this is the token for the next set of results. </p>
    /// - On failure, responds with [`SdkError<ListRepositoriesError>`](crate::error::ListRepositoriesError)
    pub fn list_repositories(&self) -> crate::client::fluent_builders::ListRepositories {
        crate::client::fluent_builders::ListRepositories::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListRepositoriesInDomain`](crate::client::fluent_builders::ListRepositoriesInDomain) operation.
    /// This operation supports pagination; See [`into_paginator()`](crate::client::fluent_builders::ListRepositoriesInDomain::into_paginator).
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::set_domain): <p> The name of the domain that contains the returned list of repositories. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`administrator_account(impl Into<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::administrator_account) / [`set_administrator_account(Option<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::set_administrator_account): <p> Filter the list of repositories to only include those that are managed by the Amazon Web Services account ID. </p>
    ///   - [`repository_prefix(impl Into<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::repository_prefix) / [`set_repository_prefix(Option<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::set_repository_prefix): <p> A prefix used to filter returned repositories. Only repositories with names that start with <code>repositoryPrefix</code> are returned. </p>
    ///   - [`max_results(i32)`](crate::client::fluent_builders::ListRepositoriesInDomain::max_results) / [`set_max_results(Option<i32>)`](crate::client::fluent_builders::ListRepositoriesInDomain::set_max_results): <p> The maximum number of results to return per page. </p>
    ///   - [`next_token(impl Into<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::next_token) / [`set_next_token(Option<String>)`](crate::client::fluent_builders::ListRepositoriesInDomain::set_next_token): <p> The token for the next set of results. Use the value returned in the previous response in the next request to retrieve the next set of results. </p>
    /// - On success, responds with [`ListRepositoriesInDomainOutput`](crate::output::ListRepositoriesInDomainOutput) with field(s):
    ///   - [`repositories(Option<Vec<RepositorySummary>>)`](crate::output::ListRepositoriesInDomainOutput::repositories): <p> The returned list of repositories. </p>
    ///   - [`next_token(Option<String>)`](crate::output::ListRepositoriesInDomainOutput::next_token): <p> If there are additional results, this is the token for the next set of results. </p>
    /// - On failure, responds with [`SdkError<ListRepositoriesInDomainError>`](crate::error::ListRepositoriesInDomainError)
    pub fn list_repositories_in_domain(
        &self,
    ) -> crate::client::fluent_builders::ListRepositoriesInDomain {
        crate::client::fluent_builders::ListRepositoriesInDomain::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`ListTagsForResource`](crate::client::fluent_builders::ListTagsForResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::ListTagsForResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::ListTagsForResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource to get tags for.</p>
    /// - On success, responds with [`ListTagsForResourceOutput`](crate::output::ListTagsForResourceOutput) with field(s):
    ///   - [`tags(Option<Vec<Tag>>)`](crate::output::ListTagsForResourceOutput::tags): <p>A list of tag key and value pairs associated with the specified resource.</p>
    /// - On failure, responds with [`SdkError<ListTagsForResourceError>`](crate::error::ListTagsForResourceError)
    pub fn list_tags_for_resource(&self) -> crate::client::fluent_builders::ListTagsForResource {
        crate::client::fluent_builders::ListTagsForResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutDomainPermissionsPolicy`](crate::client::fluent_builders::PutDomainPermissionsPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::PutDomainPermissionsPolicy::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::PutDomainPermissionsPolicy::set_domain): <p> The name of the domain on which to set the resource policy. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::PutDomainPermissionsPolicy::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::PutDomainPermissionsPolicy::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`policy_revision(impl Into<String>)`](crate::client::fluent_builders::PutDomainPermissionsPolicy::policy_revision) / [`set_policy_revision(Option<String>)`](crate::client::fluent_builders::PutDomainPermissionsPolicy::set_policy_revision): <p> The current revision of the resource policy to be set. This revision is used for optimistic locking, which prevents others from overwriting your changes to the domain's resource policy. </p>
    ///   - [`policy_document(impl Into<String>)`](crate::client::fluent_builders::PutDomainPermissionsPolicy::policy_document) / [`set_policy_document(Option<String>)`](crate::client::fluent_builders::PutDomainPermissionsPolicy::set_policy_document): <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided domain. </p>
    /// - On success, responds with [`PutDomainPermissionsPolicyOutput`](crate::output::PutDomainPermissionsPolicyOutput) with field(s):
    ///   - [`policy(Option<ResourcePolicy>)`](crate::output::PutDomainPermissionsPolicyOutput::policy): <p> The resource policy that was set after processing the request. </p>
    /// - On failure, responds with [`SdkError<PutDomainPermissionsPolicyError>`](crate::error::PutDomainPermissionsPolicyError)
    pub fn put_domain_permissions_policy(
        &self,
    ) -> crate::client::fluent_builders::PutDomainPermissionsPolicy {
        crate::client::fluent_builders::PutDomainPermissionsPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutPackageOriginConfiguration`](crate::client::fluent_builders::PutPackageOriginConfiguration) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::set_domain): <p>The name of the domain that contains the repository that contains the package.</p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::set_repository): <p>The name of the repository that contains the package.</p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::PutPackageOriginConfiguration::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::set_format): <p>A format that specifies the type of the package to be updated.</p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::set_namespace): <p>The namespace of the package to be updated. The package component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet packages do not contain a corresponding component, packages of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::set_package): <p>The name of the package to be updated.</p>
    ///   - [`restrictions(PackageOriginRestrictions)`](crate::client::fluent_builders::PutPackageOriginConfiguration::restrictions) / [`set_restrictions(Option<PackageOriginRestrictions>)`](crate::client::fluent_builders::PutPackageOriginConfiguration::set_restrictions): <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a> object that contains information about the <code>upstream</code> and <code>publish</code> package origin restrictions. The <code>upstream</code> restriction determines if new package versions can be ingested or retained from external connections or upstream repositories. The <code>publish</code> restriction determines if new package versions can be published directly to the repository.</p>  <p>You must include both the desired <code>upstream</code> and <code>publish</code> restrictions.</p>
    /// - On success, responds with [`PutPackageOriginConfigurationOutput`](crate::output::PutPackageOriginConfigurationOutput) with field(s):
    ///   - [`origin_configuration(Option<PackageOriginConfiguration>)`](crate::output::PutPackageOriginConfigurationOutput::origin_configuration): <p>A <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginConfiguration.html">PackageOriginConfiguration</a> object that describes the origin configuration set for the package. It contains a <a href="https://docs.aws.amazon.com/codeartifact/latest/APIReference/API_PackageOriginRestrictions.html">PackageOriginRestrictions</a> object that describes how new versions of the package can be introduced to the repository.</p>
    /// - On failure, responds with [`SdkError<PutPackageOriginConfigurationError>`](crate::error::PutPackageOriginConfigurationError)
    pub fn put_package_origin_configuration(
        &self,
    ) -> crate::client::fluent_builders::PutPackageOriginConfiguration {
        crate::client::fluent_builders::PutPackageOriginConfiguration::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`PutRepositoryPermissionsPolicy`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::set_domain): <p> The name of the domain containing the repository to set the resource policy on. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::set_repository): <p> The name of the repository to set the resource policy on. </p>
    ///   - [`policy_revision(impl Into<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::policy_revision) / [`set_policy_revision(Option<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::set_policy_revision): <p> Sets the revision of the resource policy that specifies permissions to access the repository. This revision is used for optimistic locking, which prevents others from overwriting your changes to the repository's resource policy. </p>
    ///   - [`policy_document(impl Into<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::policy_document) / [`set_policy_document(Option<String>)`](crate::client::fluent_builders::PutRepositoryPermissionsPolicy::set_policy_document): <p> A valid displayable JSON Aspen policy string to be set as the access control resource policy on the provided repository. </p>
    /// - On success, responds with [`PutRepositoryPermissionsPolicyOutput`](crate::output::PutRepositoryPermissionsPolicyOutput) with field(s):
    ///   - [`policy(Option<ResourcePolicy>)`](crate::output::PutRepositoryPermissionsPolicyOutput::policy): <p> The resource policy that was set after processing the request. </p>
    /// - On failure, responds with [`SdkError<PutRepositoryPermissionsPolicyError>`](crate::error::PutRepositoryPermissionsPolicyError)
    pub fn put_repository_permissions_policy(
        &self,
    ) -> crate::client::fluent_builders::PutRepositoryPermissionsPolicy {
        crate::client::fluent_builders::PutRepositoryPermissionsPolicy::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`TagResource`](crate::client::fluent_builders::TagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::TagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::TagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource that you want to add or update tags for.</p>
    ///   - [`tags(Vec<Tag>)`](crate::client::fluent_builders::TagResource::tags) / [`set_tags(Option<Vec<Tag>>)`](crate::client::fluent_builders::TagResource::set_tags): <p>The tags you want to modify or add to the resource.</p>
    /// - On success, responds with [`TagResourceOutput`](crate::output::TagResourceOutput)

    /// - On failure, responds with [`SdkError<TagResourceError>`](crate::error::TagResourceError)
    pub fn tag_resource(&self) -> crate::client::fluent_builders::TagResource {
        crate::client::fluent_builders::TagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UntagResource`](crate::client::fluent_builders::UntagResource) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`resource_arn(impl Into<String>)`](crate::client::fluent_builders::UntagResource::resource_arn) / [`set_resource_arn(Option<String>)`](crate::client::fluent_builders::UntagResource::set_resource_arn): <p>The Amazon Resource Name (ARN) of the resource that you want to remove tags from.</p>
    ///   - [`tag_keys(Vec<String>)`](crate::client::fluent_builders::UntagResource::tag_keys) / [`set_tag_keys(Option<Vec<String>>)`](crate::client::fluent_builders::UntagResource::set_tag_keys): <p>The tag key for each tag that you want to remove from the resource.</p>
    /// - On success, responds with [`UntagResourceOutput`](crate::output::UntagResourceOutput)

    /// - On failure, responds with [`SdkError<UntagResourceError>`](crate::error::UntagResourceError)
    pub fn untag_resource(&self) -> crate::client::fluent_builders::UntagResource {
        crate::client::fluent_builders::UntagResource::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdatePackageVersionsStatus`](crate::client::fluent_builders::UpdatePackageVersionsStatus) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_domain): <p> The name of the domain that contains the repository that contains the package versions with a status to be updated. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_repository): <p> The repository that contains the package versions with the status you want to update. </p>
    ///   - [`format(PackageFormat)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::format) / [`set_format(Option<PackageFormat>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_format): <p> A format that specifies the type of the package with the statuses to update. </p>
    ///   - [`namespace(impl Into<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::namespace) / [`set_namespace(Option<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_namespace): <p>The namespace of the package version to be updated. The package version component that specifies its namespace depends on its type. For example:</p>  <ul>   <li> <p> The namespace of a Maven package version is its <code>groupId</code>. </p> </li>   <li> <p> The namespace of an npm package version is its <code>scope</code>. </p> </li>   <li> <p> Python and NuGet package versions do not contain a corresponding component, package versions of those formats do not have a namespace. </p> </li>  </ul>
    ///   - [`package(impl Into<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::package) / [`set_package(Option<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_package): <p> The name of the package with the version statuses to update. </p>
    ///   - [`versions(Vec<String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::versions) / [`set_versions(Option<Vec<String>>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_versions): <p> An array of strings that specify the versions of the package with the statuses to update. </p>
    ///   - [`version_revisions(HashMap<String, String>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::version_revisions) / [`set_version_revisions(Option<HashMap<String, String>>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_version_revisions): <p> A map of package versions and package version revisions. The map <code>key</code> is the package version (for example, <code>3.5.2</code>), and the map <code>value</code> is the package version revision. </p>
    ///   - [`expected_status(PackageVersionStatus)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::expected_status) / [`set_expected_status(Option<PackageVersionStatus>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_expected_status): <p> The package version’s expected status before it is updated. If <code>expectedStatus</code> is provided, the package version's status is updated only if its status at the time <code>UpdatePackageVersionsStatus</code> is called matches <code>expectedStatus</code>. </p>
    ///   - [`target_status(PackageVersionStatus)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::target_status) / [`set_target_status(Option<PackageVersionStatus>)`](crate::client::fluent_builders::UpdatePackageVersionsStatus::set_target_status): <p> The status you want to change the package version status to. </p>
    /// - On success, responds with [`UpdatePackageVersionsStatusOutput`](crate::output::UpdatePackageVersionsStatusOutput) with field(s):
    ///   - [`successful_versions(Option<HashMap<String, SuccessfulPackageVersionInfo>>)`](crate::output::UpdatePackageVersionsStatusOutput::successful_versions): <p> A list of <code>PackageVersionError</code> objects, one for each package version with a status that failed to update. </p>
    ///   - [`failed_versions(Option<HashMap<String, PackageVersionError>>)`](crate::output::UpdatePackageVersionsStatusOutput::failed_versions): <p> A list of <code>SuccessfulPackageVersionInfo</code> objects, one for each package version with a status that successfully updated. </p>
    /// - On failure, responds with [`SdkError<UpdatePackageVersionsStatusError>`](crate::error::UpdatePackageVersionsStatusError)
    pub fn update_package_versions_status(
        &self,
    ) -> crate::client::fluent_builders::UpdatePackageVersionsStatus {
        crate::client::fluent_builders::UpdatePackageVersionsStatus::new(self.handle.clone())
    }
    /// Constructs a fluent builder for the [`UpdateRepository`](crate::client::fluent_builders::UpdateRepository) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`domain(impl Into<String>)`](crate::client::fluent_builders::UpdateRepository::domain) / [`set_domain(Option<String>)`](crate::client::fluent_builders::UpdateRepository::set_domain): <p> The name of the domain associated with the repository to update. </p>
    ///   - [`domain_owner(impl Into<String>)`](crate::client::fluent_builders::UpdateRepository::domain_owner) / [`set_domain_owner(Option<String>)`](crate::client::fluent_builders::UpdateRepository::set_domain_owner): <p> The 12-digit account number of the Amazon Web Services account that owns the domain. It does not include dashes or spaces. </p>
    ///   - [`repository(impl Into<String>)`](crate::client::fluent_builders::UpdateRepository::repository) / [`set_repository(Option<String>)`](crate::client::fluent_builders::UpdateRepository::set_repository): <p> The name of the repository to update. </p>
    ///   - [`description(impl Into<String>)`](crate::client::fluent_builders::UpdateRepository::description) / [`set_description(Option<String>)`](crate::client::fluent_builders::UpdateRepository::set_description): <p> An updated repository description. </p>
    ///   - [`upstreams(Vec<UpstreamRepository>)`](crate::client::fluent_builders::UpdateRepository::upstreams) / [`set_upstreams(Option<Vec<UpstreamRepository>>)`](crate::client::fluent_builders::UpdateRepository::set_upstreams): <p> A list of upstream repositories to associate with the repository. The order of the upstream repositories in the list determines their priority order when CodeArtifact looks for a requested package version. For more information, see <a href="https://docs.aws.amazon.com/codeartifact/latest/ug/repos-upstream.html">Working with upstream repositories</a>. </p>
    /// - On success, responds with [`UpdateRepositoryOutput`](crate::output::UpdateRepositoryOutput) with field(s):
    ///   - [`repository(Option<RepositoryDescription>)`](crate::output::UpdateRepositoryOutput::repository): <p> The updated repository. </p>
    /// - On failure, responds with [`SdkError<UpdateRepositoryError>`](crate::error::UpdateRepositoryError)
    pub fn update_repository(&self) -> crate::client::fluent_builders::UpdateRepository {
        crate::client::fluent_builders::UpdateRepository::new(self.handle.clone())
    }
}

impl Client {
    /// Creates a new client from an [SDK Config](aws_types::sdk_config::SdkConfig).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `sdk_config` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `sdk_config` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn new(sdk_config: &aws_types::sdk_config::SdkConfig) -> Self {
        Self::from_conf(sdk_config.into())
    }

    /// Creates a new client from the service [`Config`](crate::Config).
    ///
    /// # Panics
    ///
    /// - This method will panic if the `conf` is missing an async sleep implementation. If you experience this panic, set
    ///     the `sleep_impl` on the Config passed into this function to fix it.
    /// - This method will panic if the `conf` is missing an HTTP connector. If you experience this panic, set the
    ///     `http_connector` on the Config passed into this function to fix it.
    pub fn from_conf(conf: crate::Config) -> Self {
        let retry_config = conf
            .retry_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::retry::RetryConfig::disabled);
        let timeout_config = conf
            .timeout_config()
            .cloned()
            .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
        let sleep_impl = conf.sleep_impl();
        if (retry_config.has_retry() || timeout_config.has_timeouts()) && sleep_impl.is_none() {
            panic!("An async sleep implementation is required for retries or timeouts to work. \
                                    Set the `sleep_impl` on the Config passed into this function to fix this panic.");
        }

        let connector = conf.http_connector().and_then(|c| {
            let timeout_config = conf
                .timeout_config()
                .cloned()
                .unwrap_or_else(aws_smithy_types::timeout::TimeoutConfig::disabled);
            let connector_settings =
                aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                    &timeout_config,
                );
            c.connector(&connector_settings, conf.sleep_impl())
        });

        let builder = aws_smithy_client::Builder::new();

        let builder = match connector {
            // Use provided connector
            Some(c) => builder.connector(c),
            None => {
                #[cfg(any(feature = "rustls", feature = "native-tls"))]
                {
                    // Use default connector based on enabled features
                    builder.dyn_https_connector(
                        aws_smithy_client::http_connector::ConnectorSettings::from_timeout_config(
                            &timeout_config,
                        ),
                    )
                }
                #[cfg(not(any(feature = "rustls", feature = "native-tls")))]
                {
                    panic!("No HTTP connector was available. Enable the `rustls` or `native-tls` crate feature or set a connector to fix this.");
                }
            }
        };
        let mut builder = builder
            .middleware(aws_smithy_client::erase::DynMiddleware::new(
                crate::middleware::DefaultMiddleware::new(),
            ))
            .retry_config(retry_config.into())
            .operation_timeout_config(timeout_config.into());
        builder.set_sleep_impl(sleep_impl);
        let client = builder.build();

        Self {
            handle: std::sync::Arc::new(Handle { client, conf }),
        }
    }
}

/// Utilities to ergonomically construct a request to the service.
///
/// Fluent builders are created through the [`Client`](crate::client::Client) by calling
/// one if its operation methods. After parameters are set using the builder methods,
/// the `send` method can be called to initiate the request.
pub mod fluent_builders;
