// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SearchSchemasOutput {
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>An array of SearchSchemaSummary information.</p>
    #[doc(hidden)]
    pub schemas: std::option::Option<std::vec::Vec<crate::types::SearchSchemaSummary>>,
    _request_id: Option<String>,
}
impl SearchSchemasOutput {
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of SearchSchemaSummary information.</p>
    pub fn schemas(&self) -> std::option::Option<&[crate::types::SearchSchemaSummary]> {
        self.schemas.as_deref()
    }
}
impl aws_http::request_id::RequestId for SearchSchemasOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SearchSchemasOutput {
    /// Creates a new builder-style object to manufacture [`SearchSchemasOutput`](crate::operation::search_schemas::SearchSchemasOutput).
    pub fn builder() -> crate::operation::search_schemas::builders::SearchSchemasOutputBuilder {
        crate::operation::search_schemas::builders::SearchSchemasOutputBuilder::default()
    }
}

/// A builder for [`SearchSchemasOutput`](crate::operation::search_schemas::SearchSchemasOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SearchSchemasOutputBuilder {
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) schemas: std::option::Option<std::vec::Vec<crate::types::SearchSchemaSummary>>,
    _request_id: Option<String>,
}
impl SearchSchemasOutputBuilder {
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// Appends an item to `schemas`.
    ///
    /// To override the contents of this collection use [`set_schemas`](Self::set_schemas).
    ///
    /// <p>An array of SearchSchemaSummary information.</p>
    pub fn schemas(mut self, input: crate::types::SearchSchemaSummary) -> Self {
        let mut v = self.schemas.unwrap_or_default();
        v.push(input);
        self.schemas = Some(v);
        self
    }
    /// <p>An array of SearchSchemaSummary information.</p>
    pub fn set_schemas(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SearchSchemaSummary>>,
    ) -> Self {
        self.schemas = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SearchSchemasOutput`](crate::operation::search_schemas::SearchSchemasOutput).
    pub fn build(self) -> crate::operation::search_schemas::SearchSchemasOutput {
        crate::operation::search_schemas::SearchSchemasOutput {
            next_token: self.next_token,
            schemas: self.schemas,
            _request_id: self._request_id,
        }
    }
}
