// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListRegistriesOutput {
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
    /// <p>An array of registry summaries.</p>
    pub registries: ::std::option::Option<::std::vec::Vec<crate::types::RegistrySummary>>,
    _request_id: Option<String>,
}
impl ListRegistriesOutput {
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>An array of registry summaries.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.registries.is_none()`.
    pub fn registries(&self) -> &[crate::types::RegistrySummary] {
        self.registries.as_deref().unwrap_or_default()
    }
}
impl ::aws_http::request_id::RequestId for ListRegistriesOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListRegistriesOutput {
    /// Creates a new builder-style object to manufacture [`ListRegistriesOutput`](crate::operation::list_registries::ListRegistriesOutput).
    pub fn builder() -> crate::operation::list_registries::builders::ListRegistriesOutputBuilder {
        crate::operation::list_registries::builders::ListRegistriesOutputBuilder::default()
    }
}

/// A builder for [`ListRegistriesOutput`](crate::operation::list_registries::ListRegistriesOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListRegistriesOutputBuilder {
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
    pub(crate) registries: ::std::option::Option<::std::vec::Vec<crate::types::RegistrySummary>>,
    _request_id: Option<String>,
}
impl ListRegistriesOutputBuilder {
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Appends an item to `registries`.
    ///
    /// To override the contents of this collection use [`set_registries`](Self::set_registries).
    ///
    /// <p>An array of registry summaries.</p>
    pub fn registries(mut self, input: crate::types::RegistrySummary) -> Self {
        let mut v = self.registries.unwrap_or_default();
        v.push(input);
        self.registries = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of registry summaries.</p>
    pub fn set_registries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RegistrySummary>>) -> Self {
        self.registries = input;
        self
    }
    /// <p>An array of registry summaries.</p>
    pub fn get_registries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RegistrySummary>> {
        &self.registries
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListRegistriesOutput`](crate::operation::list_registries::ListRegistriesOutput).
    pub fn build(self) -> crate::operation::list_registries::ListRegistriesOutput {
        crate::operation::list_registries::ListRegistriesOutput {
            next_token: self.next_token,
            registries: self.registries,
            _request_id: self._request_id,
        }
    }
}
