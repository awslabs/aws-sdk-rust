// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteSchemaVersionInput {
    /// <p>The name of the registry.</p>
    pub registry_name: ::std::option::Option<::std::string::String>,
    /// <p>The name of the schema.</p>
    pub schema_name: ::std::option::Option<::std::string::String>,
    /// The version number of the schema
    pub schema_version: ::std::option::Option<::std::string::String>,
}
impl DeleteSchemaVersionInput {
    /// <p>The name of the registry.</p>
    pub fn registry_name(&self) -> ::std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(&self) -> ::std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// The version number of the schema
    pub fn schema_version(&self) -> ::std::option::Option<&str> {
        self.schema_version.as_deref()
    }
}
impl DeleteSchemaVersionInput {
    /// Creates a new builder-style object to manufacture [`DeleteSchemaVersionInput`](crate::operation::delete_schema_version::DeleteSchemaVersionInput).
    pub fn builder() -> crate::operation::delete_schema_version::builders::DeleteSchemaVersionInputBuilder {
        crate::operation::delete_schema_version::builders::DeleteSchemaVersionInputBuilder::default()
    }
}

/// A builder for [`DeleteSchemaVersionInput`](crate::operation::delete_schema_version::DeleteSchemaVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteSchemaVersionInputBuilder {
    pub(crate) registry_name: ::std::option::Option<::std::string::String>,
    pub(crate) schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) schema_version: ::std::option::Option<::std::string::String>,
}
impl DeleteSchemaVersionInputBuilder {
    /// <p>The name of the registry.</p>
    /// This field is required.
    pub fn registry_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the registry.</p>
    pub fn set_registry_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>The name of the registry.</p>
    pub fn get_registry_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_name
    }
    /// <p>The name of the schema.</p>
    /// This field is required.
    pub fn schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the schema.</p>
    pub fn set_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The name of the schema.</p>
    pub fn get_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_name
    }
    /// The version number of the schema
    /// This field is required.
    pub fn schema_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_version = ::std::option::Option::Some(input.into());
        self
    }
    /// The version number of the schema
    pub fn set_schema_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// The version number of the schema
    pub fn get_schema_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_version
    }
    /// Consumes the builder and constructs a [`DeleteSchemaVersionInput`](crate::operation::delete_schema_version::DeleteSchemaVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::delete_schema_version::DeleteSchemaVersionInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::delete_schema_version::DeleteSchemaVersionInput {
            registry_name: self.registry_name,
            schema_name: self.schema_name,
            schema_version: self.schema_version,
        })
    }
}
