// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeCodeBindingInput {
    /// <p>The language of the code binding.</p>
    #[doc(hidden)]
    pub language: std::option::Option<std::string::String>,
    /// <p>The name of the registry.</p>
    #[doc(hidden)]
    pub registry_name: std::option::Option<std::string::String>,
    /// <p>The name of the schema.</p>
    #[doc(hidden)]
    pub schema_name: std::option::Option<std::string::String>,
    /// <p>Specifying this limits the results to only this schema version.</p>
    #[doc(hidden)]
    pub schema_version: std::option::Option<std::string::String>,
}
impl DescribeCodeBindingInput {
    /// <p>The language of the code binding.</p>
    pub fn language(&self) -> std::option::Option<&str> {
        self.language.as_deref()
    }
    /// <p>The name of the registry.</p>
    pub fn registry_name(&self) -> std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(&self) -> std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>Specifying this limits the results to only this schema version.</p>
    pub fn schema_version(&self) -> std::option::Option<&str> {
        self.schema_version.as_deref()
    }
}
impl DescribeCodeBindingInput {
    /// Creates a new builder-style object to manufacture [`DescribeCodeBindingInput`](crate::operation::describe_code_binding::DescribeCodeBindingInput).
    pub fn builder(
    ) -> crate::operation::describe_code_binding::builders::DescribeCodeBindingInputBuilder {
        crate::operation::describe_code_binding::builders::DescribeCodeBindingInputBuilder::default(
        )
    }
}

/// A builder for [`DescribeCodeBindingInput`](crate::operation::describe_code_binding::DescribeCodeBindingInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeCodeBindingInputBuilder {
    pub(crate) language: std::option::Option<std::string::String>,
    pub(crate) registry_name: std::option::Option<std::string::String>,
    pub(crate) schema_name: std::option::Option<std::string::String>,
    pub(crate) schema_version: std::option::Option<std::string::String>,
}
impl DescribeCodeBindingInputBuilder {
    /// <p>The language of the code binding.</p>
    pub fn language(mut self, input: impl Into<std::string::String>) -> Self {
        self.language = Some(input.into());
        self
    }
    /// <p>The language of the code binding.</p>
    pub fn set_language(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.language = input;
        self
    }
    /// <p>The name of the registry.</p>
    pub fn registry_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_name = Some(input.into());
        self
    }
    /// <p>The name of the registry.</p>
    pub fn set_registry_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_name = Some(input.into());
        self
    }
    /// <p>The name of the schema.</p>
    pub fn set_schema_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>Specifying this limits the results to only this schema version.</p>
    pub fn schema_version(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_version = Some(input.into());
        self
    }
    /// <p>Specifying this limits the results to only this schema version.</p>
    pub fn set_schema_version(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.schema_version = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeCodeBindingInput`](crate::operation::describe_code_binding::DescribeCodeBindingInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_code_binding::DescribeCodeBindingInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::describe_code_binding::DescribeCodeBindingInput {
                language: self.language,
                registry_name: self.registry_name,
                schema_name: self.schema_name,
                schema_version: self.schema_version,
            },
        )
    }
}
