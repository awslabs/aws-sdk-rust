// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct GetDiscoveredSchemaInput {
    /// <p>An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.</p>
    #[doc(hidden)]
    pub events: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>The type of event.</p>
    #[doc(hidden)]
    pub r#type: std::option::Option<crate::types::Type>,
}
impl GetDiscoveredSchemaInput {
    /// <p>An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.</p>
    pub fn events(&self) -> std::option::Option<&[std::string::String]> {
        self.events.as_deref()
    }
    /// <p>The type of event.</p>
    pub fn r#type(&self) -> std::option::Option<&crate::types::Type> {
        self.r#type.as_ref()
    }
}
impl GetDiscoveredSchemaInput {
    /// Creates a new builder-style object to manufacture [`GetDiscoveredSchemaInput`](crate::operation::get_discovered_schema::GetDiscoveredSchemaInput).
    pub fn builder(
    ) -> crate::operation::get_discovered_schema::builders::GetDiscoveredSchemaInputBuilder {
        crate::operation::get_discovered_schema::builders::GetDiscoveredSchemaInputBuilder::default(
        )
    }
}

/// A builder for [`GetDiscoveredSchemaInput`](crate::operation::get_discovered_schema::GetDiscoveredSchemaInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct GetDiscoveredSchemaInputBuilder {
    pub(crate) events: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) r#type: std::option::Option<crate::types::Type>,
}
impl GetDiscoveredSchemaInputBuilder {
    /// Appends an item to `events`.
    ///
    /// To override the contents of this collection use [`set_events`](Self::set_events).
    ///
    /// <p>An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.</p>
    pub fn events(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.events.unwrap_or_default();
        v.push(input.into());
        self.events = Some(v);
        self
    }
    /// <p>An array of strings where each string is a JSON event. These are the events that were used to generate the schema. The array includes a single type of event and has a maximum size of 10 events.</p>
    pub fn set_events(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.events = input;
        self
    }
    /// <p>The type of event.</p>
    pub fn r#type(mut self, input: crate::types::Type) -> Self {
        self.r#type = Some(input);
        self
    }
    /// <p>The type of event.</p>
    pub fn set_type(mut self, input: std::option::Option<crate::types::Type>) -> Self {
        self.r#type = input;
        self
    }
    /// Consumes the builder and constructs a [`GetDiscoveredSchemaInput`](crate::operation::get_discovered_schema::GetDiscoveredSchemaInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::get_discovered_schema::GetDiscoveredSchemaInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::get_discovered_schema::GetDiscoveredSchemaInput {
                events: self.events,
                r#type: self.r#type,
            },
        )
    }
}
