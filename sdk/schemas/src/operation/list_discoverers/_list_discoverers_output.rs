// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDiscoverersOutput {
    /// <p>An array of DiscovererSummary information.</p>
    #[doc(hidden)]
    pub discoverers: std::option::Option<std::vec::Vec<crate::types::DiscovererSummary>>,
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListDiscoverersOutput {
    /// <p>An array of DiscovererSummary information.</p>
    pub fn discoverers(&self) -> std::option::Option<&[crate::types::DiscovererSummary]> {
        self.discoverers.as_deref()
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListDiscoverersOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListDiscoverersOutput {
    /// Creates a new builder-style object to manufacture [`ListDiscoverersOutput`](crate::operation::list_discoverers::ListDiscoverersOutput).
    pub fn builder() -> crate::operation::list_discoverers::builders::ListDiscoverersOutputBuilder {
        crate::operation::list_discoverers::builders::ListDiscoverersOutputBuilder::default()
    }
}

/// A builder for [`ListDiscoverersOutput`](crate::operation::list_discoverers::ListDiscoverersOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDiscoverersOutputBuilder {
    pub(crate) discoverers: std::option::Option<std::vec::Vec<crate::types::DiscovererSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListDiscoverersOutputBuilder {
    /// Appends an item to `discoverers`.
    ///
    /// To override the contents of this collection use [`set_discoverers`](Self::set_discoverers).
    ///
    /// <p>An array of DiscovererSummary information.</p>
    pub fn discoverers(mut self, input: crate::types::DiscovererSummary) -> Self {
        let mut v = self.discoverers.unwrap_or_default();
        v.push(input);
        self.discoverers = Some(v);
        self
    }
    /// <p>An array of DiscovererSummary information.</p>
    pub fn set_discoverers(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DiscovererSummary>>,
    ) -> Self {
        self.discoverers = input;
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListDiscoverersOutput`](crate::operation::list_discoverers::ListDiscoverersOutput).
    pub fn build(self) -> crate::operation::list_discoverers::ListDiscoverersOutput {
        crate::operation::list_discoverers::ListDiscoverersOutput {
            discoverers: self.discoverers,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
