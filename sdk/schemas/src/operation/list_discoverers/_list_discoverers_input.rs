// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListDiscoverersInput {
    /// <p>Specifying this limits the results to only those discoverer IDs that start with the specified prefix.</p>
    #[doc(hidden)]
    pub discoverer_id_prefix: std::option::Option<std::string::String>,
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub limit: i32,
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>Specifying this limits the results to only those ARNs that start with the specified prefix.</p>
    #[doc(hidden)]
    pub source_arn_prefix: std::option::Option<std::string::String>,
}
impl ListDiscoverersInput {
    /// <p>Specifying this limits the results to only those discoverer IDs that start with the specified prefix.</p>
    pub fn discoverer_id_prefix(&self) -> std::option::Option<&str> {
        self.discoverer_id_prefix.as_deref()
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn limit(&self) -> i32 {
        self.limit
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>Specifying this limits the results to only those ARNs that start with the specified prefix.</p>
    pub fn source_arn_prefix(&self) -> std::option::Option<&str> {
        self.source_arn_prefix.as_deref()
    }
}
impl ListDiscoverersInput {
    /// Creates a new builder-style object to manufacture [`ListDiscoverersInput`](crate::operation::list_discoverers::ListDiscoverersInput).
    pub fn builder() -> crate::operation::list_discoverers::builders::ListDiscoverersInputBuilder {
        crate::operation::list_discoverers::builders::ListDiscoverersInputBuilder::default()
    }
}

/// A builder for [`ListDiscoverersInput`](crate::operation::list_discoverers::ListDiscoverersInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListDiscoverersInputBuilder {
    pub(crate) discoverer_id_prefix: std::option::Option<std::string::String>,
    pub(crate) limit: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) source_arn_prefix: std::option::Option<std::string::String>,
}
impl ListDiscoverersInputBuilder {
    /// <p>Specifying this limits the results to only those discoverer IDs that start with the specified prefix.</p>
    pub fn discoverer_id_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.discoverer_id_prefix = Some(input.into());
        self
    }
    /// <p>Specifying this limits the results to only those discoverer IDs that start with the specified prefix.</p>
    pub fn set_discoverer_id_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.discoverer_id_prefix = input;
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>Specifying this limits the results to only those ARNs that start with the specified prefix.</p>
    pub fn source_arn_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.source_arn_prefix = Some(input.into());
        self
    }
    /// <p>Specifying this limits the results to only those ARNs that start with the specified prefix.</p>
    pub fn set_source_arn_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.source_arn_prefix = input;
        self
    }
    /// Consumes the builder and constructs a [`ListDiscoverersInput`](crate::operation::list_discoverers::ListDiscoverersInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_discoverers::ListDiscoverersInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_discoverers::ListDiscoverersInput {
            discoverer_id_prefix: self.discoverer_id_prefix,
            limit: self.limit.unwrap_or_default(),
            next_token: self.next_token,
            source_arn_prefix: self.source_arn_prefix,
        })
    }
}
