// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateDiscovererInput {
    /// <p>A description for the discoverer.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the event bus.</p>
    pub source_arn: ::std::option::Option<::std::string::String>,
    /// <p>Support discovery of schemas in events sent to the bus from another account. (default: true).</p>
    pub cross_account: ::std::option::Option<bool>,
    /// <p>Tags associated with the resource.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDiscovererInput {
    /// <p>A description for the discoverer.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The ARN of the event bus.</p>
    pub fn source_arn(&self) -> ::std::option::Option<&str> {
        self.source_arn.as_deref()
    }
    /// <p>Support discovery of schemas in events sent to the bus from another account. (default: true).</p>
    pub fn cross_account(&self) -> ::std::option::Option<bool> {
        self.cross_account
    }
    /// <p>Tags associated with the resource.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl CreateDiscovererInput {
    /// Creates a new builder-style object to manufacture [`CreateDiscovererInput`](crate::operation::create_discoverer::CreateDiscovererInput).
    pub fn builder() -> crate::operation::create_discoverer::builders::CreateDiscovererInputBuilder {
        crate::operation::create_discoverer::builders::CreateDiscovererInputBuilder::default()
    }
}

/// A builder for [`CreateDiscovererInput`](crate::operation::create_discoverer::CreateDiscovererInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateDiscovererInputBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) source_arn: ::std::option::Option<::std::string::String>,
    pub(crate) cross_account: ::std::option::Option<bool>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
}
impl CreateDiscovererInputBuilder {
    /// <p>A description for the discoverer.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description for the discoverer.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description for the discoverer.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The ARN of the event bus.</p>
    /// This field is required.
    pub fn source_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the event bus.</p>
    pub fn set_source_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_arn = input;
        self
    }
    /// <p>The ARN of the event bus.</p>
    pub fn get_source_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_arn
    }
    /// <p>Support discovery of schemas in events sent to the bus from another account. (default: true).</p>
    pub fn cross_account(mut self, input: bool) -> Self {
        self.cross_account = ::std::option::Option::Some(input);
        self
    }
    /// <p>Support discovery of schemas in events sent to the bus from another account. (default: true).</p>
    pub fn set_cross_account(mut self, input: ::std::option::Option<bool>) -> Self {
        self.cross_account = input;
        self
    }
    /// <p>Support discovery of schemas in events sent to the bus from another account. (default: true).</p>
    pub fn get_cross_account(&self) -> &::std::option::Option<bool> {
        &self.cross_account
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>Tags associated with the resource.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Tags associated with the resource.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>Tags associated with the resource.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// Consumes the builder and constructs a [`CreateDiscovererInput`](crate::operation::create_discoverer::CreateDiscovererInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_discoverer::CreateDiscovererInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_discoverer::CreateDiscovererInput {
            description: self.description,
            source_arn: self.source_arn,
            cross_account: self.cross_account,
            tags: self.tags,
        })
    }
}
