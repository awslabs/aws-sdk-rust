// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListSchemasInput {
    #[allow(missing_docs)] // documentation missing in model
    #[doc(hidden)]
    pub limit: i32,
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    /// <p>The name of the registry.</p>
    #[doc(hidden)]
    pub registry_name: std::option::Option<std::string::String>,
    /// <p>Specifying this limits the results to only those schema names that start with the specified prefix.</p>
    #[doc(hidden)]
    pub schema_name_prefix: std::option::Option<std::string::String>,
}
impl ListSchemasInput {
    #[allow(missing_docs)] // documentation missing in model
    pub fn limit(&self) -> i32 {
        self.limit
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
    /// <p>The name of the registry.</p>
    pub fn registry_name(&self) -> std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>Specifying this limits the results to only those schema names that start with the specified prefix.</p>
    pub fn schema_name_prefix(&self) -> std::option::Option<&str> {
        self.schema_name_prefix.as_deref()
    }
}
impl ListSchemasInput {
    /// Creates a new builder-style object to manufacture [`ListSchemasInput`](crate::operation::list_schemas::ListSchemasInput).
    pub fn builder() -> crate::operation::list_schemas::builders::ListSchemasInputBuilder {
        crate::operation::list_schemas::builders::ListSchemasInputBuilder::default()
    }
}

/// A builder for [`ListSchemasInput`](crate::operation::list_schemas::ListSchemasInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListSchemasInputBuilder {
    pub(crate) limit: std::option::Option<i32>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    pub(crate) registry_name: std::option::Option<std::string::String>,
    pub(crate) schema_name_prefix: std::option::Option<std::string::String>,
}
impl ListSchemasInputBuilder {
    #[allow(missing_docs)] // documentation missing in model
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = Some(input);
        self
    }
    #[allow(missing_docs)] // documentation missing in model
    pub fn set_limit(mut self, input: std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>The token that specifies the next page of results to return. To request the first page, leave NextToken empty. The token will expire in 24 hours, and cannot be shared with other accounts.</p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>The name of the registry.</p>
    pub fn registry_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.registry_name = Some(input.into());
        self
    }
    /// <p>The name of the registry.</p>
    pub fn set_registry_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>Specifying this limits the results to only those schema names that start with the specified prefix.</p>
    pub fn schema_name_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.schema_name_prefix = Some(input.into());
        self
    }
    /// <p>Specifying this limits the results to only those schema names that start with the specified prefix.</p>
    pub fn set_schema_name_prefix(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.schema_name_prefix = input;
        self
    }
    /// Consumes the builder and constructs a [`ListSchemasInput`](crate::operation::list_schemas::ListSchemasInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::list_schemas::ListSchemasInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::list_schemas::ListSchemasInput {
            limit: self.limit.unwrap_or_default(),
            next_token: self.next_token,
            registry_name: self.registry_name,
            schema_name_prefix: self.schema_name_prefix,
        })
    }
}
