// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) mod shape_create_discoverer;

pub fn parse_http_error_metadata(
    response: &http::Response<bytes::Bytes>,
) -> Result<
    aws_smithy_types::error::metadata::Builder,
    aws_smithy_json::deserialize::error::DeserializeError,
> {
    crate::json_errors::parse_error_metadata(response.body(), response.headers())
}

pub(crate) mod shape_create_registry;

pub(crate) mod shape_create_schema;

pub(crate) mod shape_delete_discoverer;

pub(crate) mod shape_delete_registry;

pub(crate) mod shape_delete_resource_policy;

pub(crate) mod shape_delete_schema;

pub(crate) mod shape_delete_schema_version;

pub(crate) mod shape_describe_code_binding;

pub(crate) mod shape_describe_discoverer;

pub(crate) mod shape_describe_registry;

pub(crate) mod shape_describe_schema;

pub(crate) mod shape_export_schema;

pub(crate) mod shape_get_code_binding_source;

pub(crate) mod shape_get_discovered_schema;

pub(crate) mod shape_get_resource_policy;

pub(crate) mod shape_list_discoverers;

pub(crate) mod shape_list_registries;

pub(crate) mod shape_list_schema_versions;

pub(crate) mod shape_list_schemas;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_put_code_binding;

pub(crate) mod shape_put_resource_policy;

pub(crate) mod shape_search_schemas;

pub(crate) mod shape_start_discoverer;

pub(crate) mod shape_stop_discoverer;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_discoverer;

pub(crate) mod shape_update_registry;

pub(crate) mod shape_update_schema;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_bad_request_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_discoverer_input;

pub(crate) mod shape_create_registry_input;

pub(crate) mod shape_create_schema_input;

pub(crate) mod shape_forbidden_exception;

pub(crate) mod shape_get_code_binding_source_output;

pub(crate) mod shape_get_discovered_schema_input;

pub(crate) mod shape_gone_exception;

pub(crate) mod shape_internal_server_error_exception;

pub(crate) mod shape_not_found_exception;

pub(crate) mod shape_precondition_failed_exception;

pub(crate) mod shape_put_resource_policy_input;

pub(crate) mod shape_service_unavailable_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_too_many_requests_exception;

pub(crate) mod shape_unauthorized_exception;

pub(crate) mod shape_update_discoverer_input;

pub(crate) mod shape_update_registry_input;

pub(crate) mod shape_update_schema_input;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_discoverer_summary;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_registry_summary;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_schema_summary;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_schema_version_summary;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_search_schema_summary;

pub(crate) mod shape_tags;

pub(crate) mod shape_discoverer_summary;

pub(crate) mod shape_registry_summary;

pub(crate) mod shape_schema_summary;

pub(crate) mod shape_schema_version_summary;

pub(crate) mod shape_search_schema_summary;

#[allow(non_snake_case)]
pub(crate) mod shape___list_of_search_schema_version_summary;

pub(crate) mod shape_search_schema_version_summary;
