// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn type_erase_result<O, E>(
    result: ::std::result::Result<O, E>,
) -> ::std::result::Result<
    ::aws_smithy_runtime_api::client::interceptors::context::Output,
    ::aws_smithy_runtime_api::client::orchestrator::OrchestratorError<::aws_smithy_runtime_api::client::interceptors::context::Error>,
>
where
    O: ::std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
    E: ::std::error::Error + std::fmt::Debug + ::std::marker::Send + ::std::marker::Sync + 'static,
{
    result
        .map(|output| ::aws_smithy_runtime_api::client::interceptors::context::Output::erase(output))
        .map_err(|error| ::aws_smithy_runtime_api::client::interceptors::context::Error::erase(error))
        .map_err(::std::convert::Into::into)
}

pub fn parse_http_error_metadata(
    _response_status: u16,
    response_headers: &::http::HeaderMap,
    response_body: &[u8],
) -> Result<::aws_smithy_types::error::metadata::Builder, ::aws_smithy_json::deserialize::error::DeserializeError> {
    crate::json_errors::parse_error_metadata(response_body, response_headers)
}

pub(crate) mod shape_create_discoverer;

pub(crate) mod shape_create_registry;

pub(crate) mod shape_create_schema;

pub(crate) mod shape_delete_discoverer;

pub(crate) mod shape_delete_registry;

pub(crate) mod shape_delete_resource_policy;

pub(crate) mod shape_delete_schema;

pub(crate) mod shape_delete_schema_version;

pub(crate) mod shape_describe_code_binding;

pub(crate) mod shape_describe_discoverer;

pub(crate) mod shape_describe_registry;

pub(crate) mod shape_describe_schema;

pub(crate) mod shape_export_schema;

pub(crate) mod shape_get_code_binding_source;

pub(crate) mod shape_get_discovered_schema;

pub(crate) mod shape_get_resource_policy;

pub(crate) mod shape_list_discoverers;

pub(crate) mod shape_list_registries;

pub(crate) mod shape_list_schema_versions;

pub(crate) mod shape_list_schemas;

pub(crate) mod shape_list_tags_for_resource;

pub(crate) mod shape_put_code_binding;

pub(crate) mod shape_put_resource_policy;

pub(crate) mod shape_search_schemas;

pub(crate) mod shape_start_discoverer;

pub(crate) mod shape_stop_discoverer;

pub(crate) mod shape_tag_resource;

pub(crate) mod shape_untag_resource;

pub(crate) mod shape_update_discoverer;

pub(crate) mod shape_update_registry;

pub(crate) mod shape_update_schema;

pub(crate) fn or_empty_doc(data: &[u8]) -> &[u8] {
    if data.is_empty() {
        b"{}"
    } else {
        data
    }
}

pub(crate) mod shape_bad_request_exception;

pub(crate) mod shape_conflict_exception;

pub(crate) mod shape_create_discoverer_input;

pub(crate) mod shape_create_registry_input;

pub(crate) mod shape_create_schema_input;

pub(crate) mod shape_forbidden_exception;

pub(crate) mod shape_get_code_binding_source_output;

pub(crate) mod shape_get_discovered_schema_input;

pub(crate) mod shape_gone_exception;

pub(crate) mod shape_internal_server_error_exception;

pub(crate) mod shape_not_found_exception;

pub(crate) mod shape_precondition_failed_exception;

pub(crate) mod shape_put_resource_policy_input;

pub(crate) mod shape_service_unavailable_exception;

pub(crate) mod shape_tag_resource_input;

pub(crate) mod shape_too_many_requests_exception;

pub(crate) mod shape_unauthorized_exception;

pub(crate) mod shape_update_discoverer_input;

pub(crate) mod shape_update_registry_input;

pub(crate) mod shape_update_schema_input;

pub(crate) mod shape_list_of_discoverer_summary;

pub(crate) mod shape_list_of_registry_summary;

pub(crate) mod shape_list_of_schema_summary;

pub(crate) mod shape_list_of_schema_version_summary;

pub(crate) mod shape_list_of_search_schema_summary;

pub(crate) mod shape_tags;

pub(crate) mod shape_discoverer_summary;

pub(crate) mod shape_registry_summary;

pub(crate) mod shape_schema_summary;

pub(crate) mod shape_schema_version_summary;

pub(crate) mod shape_search_schema_summary;

pub(crate) mod shape_list_of_search_schema_version_summary;

pub(crate) mod shape_search_schema_version_summary;
