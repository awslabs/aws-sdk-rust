// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn bad_request_exception_correct_errors(
    mut builder: crate::types::error::builders::BadRequestExceptionBuilder,
) -> crate::types::error::builders::BadRequestExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn forbidden_exception_correct_errors(
    mut builder: crate::types::error::builders::ForbiddenExceptionBuilder,
) -> crate::types::error::builders::ForbiddenExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_error_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerErrorExceptionBuilder,
) -> crate::types::error::builders::InternalServerErrorExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn service_unavailable_exception_correct_errors(
    mut builder: crate::types::error::builders::ServiceUnavailableExceptionBuilder,
) -> crate::types::error::builders::ServiceUnavailableExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn unauthorized_exception_correct_errors(
    mut builder: crate::types::error::builders::UnauthorizedExceptionBuilder,
) -> crate::types::error::builders::UnauthorizedExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::NotFoundExceptionBuilder,
) -> crate::types::error::builders::NotFoundExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn too_many_requests_exception_correct_errors(
    mut builder: crate::types::error::builders::TooManyRequestsExceptionBuilder,
) -> crate::types::error::builders::TooManyRequestsExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn gone_exception_correct_errors(
    mut builder: crate::types::error::builders::GoneExceptionBuilder,
) -> crate::types::error::builders::GoneExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn precondition_failed_exception_correct_errors(
    mut builder: crate::types::error::builders::PreconditionFailedExceptionBuilder,
) -> crate::types::error::builders::PreconditionFailedExceptionBuilder {
    if builder.code.is_none() {
        builder.code = Some(Default::default())
    }
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}
