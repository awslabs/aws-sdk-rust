// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_resource_policy_http_error(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::delete_resource_policy::DeleteResourcePolicyOutput,
    crate::operation::delete_resource_policy::DeleteResourcePolicyError,
> {
    #[allow(unused_mut)]
    let mut generic_builder = crate::protocol_serde::parse_http_error_metadata(_response_status, _response_headers, _response_body)
        .map_err(crate::operation::delete_resource_policy::DeleteResourcePolicyError::unhandled)?;
    generic_builder = ::aws_http::request_id::apply_request_id(generic_builder, _response_headers);
    let generic = generic_builder.build();
    let error_code = match generic.code() {
        Some(code) => code,
        None => return Err(crate::operation::delete_resource_policy::DeleteResourcePolicyError::unhandled(generic)),
    };

    let _error_message = generic.message().map(|msg| msg.to_owned());
    Err(match error_code {
        "BadRequestException" => crate::operation::delete_resource_policy::DeleteResourcePolicyError::BadRequestException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::BadRequestExceptionBuilder::default();
                output = crate::protocol_serde::shape_bad_request_exception::de_bad_request_exception_json_err(_response_body, output)
                    .map_err(crate::operation::delete_resource_policy::DeleteResourcePolicyError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::bad_request_exception_correct_errors(output).build()
            };
            tmp
        }),
        "ForbiddenException" => crate::operation::delete_resource_policy::DeleteResourcePolicyError::ForbiddenException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ForbiddenExceptionBuilder::default();
                output = crate::protocol_serde::shape_forbidden_exception::de_forbidden_exception_json_err(_response_body, output)
                    .map_err(crate::operation::delete_resource_policy::DeleteResourcePolicyError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::forbidden_exception_correct_errors(output).build()
            };
            tmp
        }),
        "InternalServerErrorException" => crate::operation::delete_resource_policy::DeleteResourcePolicyError::InternalServerErrorException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::InternalServerErrorExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_internal_server_error_exception::de_internal_server_error_exception_json_err(_response_body, output)
                        .map_err(crate::operation::delete_resource_policy::DeleteResourcePolicyError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::internal_server_error_exception_correct_errors(output).build()
            };
            tmp
        }),
        "NotFoundException" => crate::operation::delete_resource_policy::DeleteResourcePolicyError::NotFoundException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::NotFoundExceptionBuilder::default();
                output = crate::protocol_serde::shape_not_found_exception::de_not_found_exception_json_err(_response_body, output)
                    .map_err(crate::operation::delete_resource_policy::DeleteResourcePolicyError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::not_found_exception_correct_errors(output).build()
            };
            tmp
        }),
        "ServiceUnavailableException" => crate::operation::delete_resource_policy::DeleteResourcePolicyError::ServiceUnavailableException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::ServiceUnavailableExceptionBuilder::default();
                output =
                    crate::protocol_serde::shape_service_unavailable_exception::de_service_unavailable_exception_json_err(_response_body, output)
                        .map_err(crate::operation::delete_resource_policy::DeleteResourcePolicyError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::service_unavailable_exception_correct_errors(output).build()
            };
            tmp
        }),
        "UnauthorizedException" => crate::operation::delete_resource_policy::DeleteResourcePolicyError::UnauthorizedException({
            #[allow(unused_mut)]
            let mut tmp = {
                #[allow(unused_mut)]
                let mut output = crate::types::error::builders::UnauthorizedExceptionBuilder::default();
                output = crate::protocol_serde::shape_unauthorized_exception::de_unauthorized_exception_json_err(_response_body, output)
                    .map_err(crate::operation::delete_resource_policy::DeleteResourcePolicyError::unhandled)?;
                let output = output.meta(generic);
                crate::serde_util::unauthorized_exception_correct_errors(output).build()
            };
            tmp
        }),
        _ => crate::operation::delete_resource_policy::DeleteResourcePolicyError::generic(generic),
    })
}

#[allow(clippy::unnecessary_wraps)]
pub fn de_delete_resource_policy_http_response(
    _response_status: u16,
    _response_headers: &::http::header::HeaderMap,
    _response_body: &[u8],
) -> std::result::Result<
    crate::operation::delete_resource_policy::DeleteResourcePolicyOutput,
    crate::operation::delete_resource_policy::DeleteResourcePolicyError,
> {
    Ok({
        #[allow(unused_mut)]
        let mut output = crate::operation::delete_resource_policy::builders::DeleteResourcePolicyOutputBuilder::default();
        output._set_request_id(::aws_http::request_id::RequestId::request_id(_response_headers).map(str::to_string));
        output.build()
    })
}
