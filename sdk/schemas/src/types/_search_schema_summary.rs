// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SearchSchemaSummary {
    /// <p>The name of the registry.</p>
    pub registry_name: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the schema.</p>
    pub schema_arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the schema.</p>
    pub schema_name: ::std::option::Option<::std::string::String>,
    /// <p>An array of schema version summaries.</p>
    pub schema_versions: ::std::option::Option<::std::vec::Vec<crate::types::SearchSchemaVersionSummary>>,
}
impl SearchSchemaSummary {
    /// <p>The name of the registry.</p>
    pub fn registry_name(&self) -> ::std::option::Option<&str> {
        self.registry_name.as_deref()
    }
    /// <p>The ARN of the schema.</p>
    pub fn schema_arn(&self) -> ::std::option::Option<&str> {
        self.schema_arn.as_deref()
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(&self) -> ::std::option::Option<&str> {
        self.schema_name.as_deref()
    }
    /// <p>An array of schema version summaries.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.schema_versions.is_none()`.
    pub fn schema_versions(&self) -> &[crate::types::SearchSchemaVersionSummary] {
        self.schema_versions.as_deref().unwrap_or_default()
    }
}
impl SearchSchemaSummary {
    /// Creates a new builder-style object to manufacture [`SearchSchemaSummary`](crate::types::SearchSchemaSummary).
    pub fn builder() -> crate::types::builders::SearchSchemaSummaryBuilder {
        crate::types::builders::SearchSchemaSummaryBuilder::default()
    }
}

/// A builder for [`SearchSchemaSummary`](crate::types::SearchSchemaSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SearchSchemaSummaryBuilder {
    pub(crate) registry_name: ::std::option::Option<::std::string::String>,
    pub(crate) schema_arn: ::std::option::Option<::std::string::String>,
    pub(crate) schema_name: ::std::option::Option<::std::string::String>,
    pub(crate) schema_versions: ::std::option::Option<::std::vec::Vec<crate::types::SearchSchemaVersionSummary>>,
}
impl SearchSchemaSummaryBuilder {
    /// <p>The name of the registry.</p>
    pub fn registry_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.registry_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the registry.</p>
    pub fn set_registry_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.registry_name = input;
        self
    }
    /// <p>The name of the registry.</p>
    pub fn get_registry_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.registry_name
    }
    /// <p>The ARN of the schema.</p>
    pub fn schema_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the schema.</p>
    pub fn set_schema_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_arn = input;
        self
    }
    /// <p>The ARN of the schema.</p>
    pub fn get_schema_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_arn
    }
    /// <p>The name of the schema.</p>
    pub fn schema_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.schema_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the schema.</p>
    pub fn set_schema_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.schema_name = input;
        self
    }
    /// <p>The name of the schema.</p>
    pub fn get_schema_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.schema_name
    }
    /// Appends an item to `schema_versions`.
    ///
    /// To override the contents of this collection use [`set_schema_versions`](Self::set_schema_versions).
    ///
    /// <p>An array of schema version summaries.</p>
    pub fn schema_versions(mut self, input: crate::types::SearchSchemaVersionSummary) -> Self {
        let mut v = self.schema_versions.unwrap_or_default();
        v.push(input);
        self.schema_versions = ::std::option::Option::Some(v);
        self
    }
    /// <p>An array of schema version summaries.</p>
    pub fn set_schema_versions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SearchSchemaVersionSummary>>) -> Self {
        self.schema_versions = input;
        self
    }
    /// <p>An array of schema version summaries.</p>
    pub fn get_schema_versions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SearchSchemaVersionSummary>> {
        &self.schema_versions
    }
    /// Consumes the builder and constructs a [`SearchSchemaSummary`](crate::types::SearchSchemaSummary).
    pub fn build(self) -> crate::types::SearchSchemaSummary {
        crate::types::SearchSchemaSummary {
            registry_name: self.registry_name,
            schema_arn: self.schema_arn,
            schema_name: self.schema_name,
            schema_versions: self.schema_versions,
        }
    }
}
