// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    #[allow(missing_docs)] // documentation missing in model
    BadRequestException(crate::types::error::BadRequestException),
    #[allow(missing_docs)] // documentation missing in model
    ConflictException(crate::types::error::ConflictException),
    #[allow(missing_docs)] // documentation missing in model
    ForbiddenException(crate::types::error::ForbiddenException),
    #[allow(missing_docs)] // documentation missing in model
    GoneException(crate::types::error::GoneException),
    #[allow(missing_docs)] // documentation missing in model
    InternalServerErrorException(crate::types::error::InternalServerErrorException),
    #[allow(missing_docs)] // documentation missing in model
    NotFoundException(crate::types::error::NotFoundException),
    #[allow(missing_docs)] // documentation missing in model
    PreconditionFailedException(crate::types::error::PreconditionFailedException),
    #[allow(missing_docs)] // documentation missing in model
    ServiceUnavailableException(crate::types::error::ServiceUnavailableException),
    #[allow(missing_docs)] // documentation missing in model
    TooManyRequestsException(crate::types::error::TooManyRequestsException),
    #[allow(missing_docs)] // documentation missing in model
    UnauthorizedException(crate::types::error::UnauthorizedException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(::aws_smithy_types::error::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::BadRequestException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::ForbiddenException(inner) => inner.fmt(f),
            Error::GoneException(inner) => inner.fmt(f),
            Error::InternalServerErrorException(inner) => inner.fmt(f),
            Error::NotFoundException(inner) => inner.fmt(f),
            Error::PreconditionFailedException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::TooManyRequestsException(inner) => inner.fmt(f),
            Error::UnauthorizedException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_discoverer::CreateDiscovererError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_discoverer::CreateDiscovererError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_discoverer::CreateDiscovererError> for Error {
    fn from(err: crate::operation::create_discoverer::CreateDiscovererError) -> Self {
        match err {
            crate::operation::create_discoverer::CreateDiscovererError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_discoverer::CreateDiscovererError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_discoverer::CreateDiscovererError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_discoverer::CreateDiscovererError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::create_discoverer::CreateDiscovererError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::create_discoverer::CreateDiscovererError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_discoverer::CreateDiscovererError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_registry::CreateRegistryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_registry::CreateRegistryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_registry::CreateRegistryError> for Error {
    fn from(err: crate::operation::create_registry::CreateRegistryError) -> Self {
        match err {
            crate::operation::create_registry::CreateRegistryError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_registry::CreateRegistryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_registry::CreateRegistryError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_registry::CreateRegistryError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_registry::CreateRegistryError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_registry::CreateRegistryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::create_registry::CreateRegistryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_schema::CreateSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_schema::CreateSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::create_schema::CreateSchemaError> for Error {
    fn from(err: crate::operation::create_schema::CreateSchemaError) -> Self {
        match err {
            crate::operation::create_schema::CreateSchemaError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::create_schema::CreateSchemaError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::create_schema::CreateSchemaError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::create_schema::CreateSchemaError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::create_schema::CreateSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_discoverer::DeleteDiscovererError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_discoverer::DeleteDiscovererError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_discoverer::DeleteDiscovererError> for Error {
    fn from(err: crate::operation::delete_discoverer::DeleteDiscovererError) -> Self {
        match err {
            crate::operation::delete_discoverer::DeleteDiscovererError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_discoverer::DeleteDiscovererError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_discoverer::DeleteDiscovererError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_discoverer::DeleteDiscovererError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_discoverer::DeleteDiscovererError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_discoverer::DeleteDiscovererError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_discoverer::DeleteDiscovererError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_registry::DeleteRegistryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_registry::DeleteRegistryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_registry::DeleteRegistryError> for Error {
    fn from(err: crate::operation::delete_registry::DeleteRegistryError) -> Self {
        match err {
            crate::operation::delete_registry::DeleteRegistryError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_registry::DeleteRegistryError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_registry::DeleteRegistryError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_registry::DeleteRegistryError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_registry::DeleteRegistryError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_registry::DeleteRegistryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_registry::DeleteRegistryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_policy::DeleteResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_resource_policy::DeleteResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_resource_policy::DeleteResourcePolicyError> for Error {
    fn from(err: crate::operation::delete_resource_policy::DeleteResourcePolicyError) -> Self {
        match err {
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_resource_policy::DeleteResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_schema::DeleteSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_schema::DeleteSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_schema::DeleteSchemaError> for Error {
    fn from(err: crate::operation::delete_schema::DeleteSchemaError) -> Self {
        match err {
            crate::operation::delete_schema::DeleteSchemaError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_schema::DeleteSchemaError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_schema::DeleteSchemaError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::delete_schema::DeleteSchemaError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_schema::DeleteSchemaError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::delete_schema::DeleteSchemaError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_schema::DeleteSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_schema_version::DeleteSchemaVersionError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_schema_version::DeleteSchemaVersionError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::delete_schema_version::DeleteSchemaVersionError> for Error {
    fn from(err: crate::operation::delete_schema_version::DeleteSchemaVersionError) -> Self {
        match err {
            crate::operation::delete_schema_version::DeleteSchemaVersionError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::delete_schema_version::DeleteSchemaVersionError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::delete_schema_version::DeleteSchemaVersionError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::delete_schema_version::DeleteSchemaVersionError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::delete_schema_version::DeleteSchemaVersionError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::delete_schema_version::DeleteSchemaVersionError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::delete_schema_version::DeleteSchemaVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_code_binding::DescribeCodeBindingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_code_binding::DescribeCodeBindingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_code_binding::DescribeCodeBindingError> for Error {
    fn from(err: crate::operation::describe_code_binding::DescribeCodeBindingError) -> Self {
        match err {
            crate::operation::describe_code_binding::DescribeCodeBindingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_code_binding::DescribeCodeBindingError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_code_binding::DescribeCodeBindingError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_code_binding::DescribeCodeBindingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_code_binding::DescribeCodeBindingError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::describe_code_binding::DescribeCodeBindingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_code_binding::DescribeCodeBindingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_discoverer::DescribeDiscovererError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_discoverer::DescribeDiscovererError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_discoverer::DescribeDiscovererError> for Error {
    fn from(err: crate::operation::describe_discoverer::DescribeDiscovererError) -> Self {
        match err {
            crate::operation::describe_discoverer::DescribeDiscovererError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_discoverer::DescribeDiscovererError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_discoverer::DescribeDiscovererError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_discoverer::DescribeDiscovererError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_discoverer::DescribeDiscovererError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_discoverer::DescribeDiscovererError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_discoverer::DescribeDiscovererError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_registry::DescribeRegistryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_registry::DescribeRegistryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_registry::DescribeRegistryError> for Error {
    fn from(err: crate::operation::describe_registry::DescribeRegistryError) -> Self {
        match err {
            crate::operation::describe_registry::DescribeRegistryError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_registry::DescribeRegistryError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_registry::DescribeRegistryError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::describe_registry::DescribeRegistryError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_registry::DescribeRegistryError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::describe_registry::DescribeRegistryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_registry::DescribeRegistryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_schema::DescribeSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_schema::DescribeSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::describe_schema::DescribeSchemaError> for Error {
    fn from(err: crate::operation::describe_schema::DescribeSchemaError) -> Self {
        match err {
            crate::operation::describe_schema::DescribeSchemaError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::describe_schema::DescribeSchemaError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::describe_schema::DescribeSchemaError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::describe_schema::DescribeSchemaError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::describe_schema::DescribeSchemaError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::describe_schema::DescribeSchemaError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::describe_schema::DescribeSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_schema::ExportSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::export_schema::ExportSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::export_schema::ExportSchemaError> for Error {
    fn from(err: crate::operation::export_schema::ExportSchemaError) -> Self {
        match err {
            crate::operation::export_schema::ExportSchemaError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::export_schema::ExportSchemaError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::export_schema::ExportSchemaError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::export_schema::ExportSchemaError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::export_schema::ExportSchemaError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::export_schema::ExportSchemaError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::export_schema::ExportSchemaError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::export_schema::ExportSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_code_binding_source::GetCodeBindingSourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_code_binding_source::GetCodeBindingSourceError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_code_binding_source::GetCodeBindingSourceError> for Error {
    fn from(err: crate::operation::get_code_binding_source::GetCodeBindingSourceError) -> Self {
        match err {
            crate::operation::get_code_binding_source::GetCodeBindingSourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_code_binding_source::GetCodeBindingSourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_code_binding_source::GetCodeBindingSourceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_code_binding_source::GetCodeBindingSourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_code_binding_source::GetCodeBindingSourceError::TooManyRequestsException(inner) => {
                Error::TooManyRequestsException(inner)
            }
            crate::operation::get_code_binding_source::GetCodeBindingSourceError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_code_binding_source::GetCodeBindingSourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_discovered_schema::GetDiscoveredSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_discovered_schema::GetDiscoveredSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_discovered_schema::GetDiscoveredSchemaError> for Error {
    fn from(err: crate::operation::get_discovered_schema::GetDiscoveredSchemaError) -> Self {
        match err {
            crate::operation::get_discovered_schema::GetDiscoveredSchemaError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_discovered_schema::GetDiscoveredSchemaError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_discovered_schema::GetDiscoveredSchemaError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_discovered_schema::GetDiscoveredSchemaError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_discovered_schema::GetDiscoveredSchemaError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_discovered_schema::GetDiscoveredSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_policy::GetResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::get_resource_policy::GetResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::get_resource_policy::GetResourcePolicyError> for Error {
    fn from(err: crate::operation::get_resource_policy::GetResourcePolicyError) -> Self {
        match err {
            crate::operation::get_resource_policy::GetResourcePolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::get_resource_policy::GetResourcePolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::get_resource_policy::GetResourcePolicyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::get_resource_policy::GetResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_discoverers::ListDiscoverersError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_discoverers::ListDiscoverersError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_discoverers::ListDiscoverersError> for Error {
    fn from(err: crate::operation::list_discoverers::ListDiscoverersError) -> Self {
        match err {
            crate::operation::list_discoverers::ListDiscoverersError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_discoverers::ListDiscoverersError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_discoverers::ListDiscoverersError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_discoverers::ListDiscoverersError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_discoverers::ListDiscoverersError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_discoverers::ListDiscoverersError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_registries::ListRegistriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_registries::ListRegistriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_registries::ListRegistriesError> for Error {
    fn from(err: crate::operation::list_registries::ListRegistriesError) -> Self {
        match err {
            crate::operation::list_registries::ListRegistriesError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_registries::ListRegistriesError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_registries::ListRegistriesError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_registries::ListRegistriesError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_registries::ListRegistriesError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_registries::ListRegistriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schemas::ListSchemasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schemas::ListSchemasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_schemas::ListSchemasError> for Error {
    fn from(err: crate::operation::list_schemas::ListSchemasError) -> Self {
        match err {
            crate::operation::list_schemas::ListSchemasError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_schemas::ListSchemasError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_schemas::ListSchemasError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::list_schemas::ListSchemasError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::list_schemas::ListSchemasError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_schemas::ListSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schema_versions::ListSchemaVersionsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_schema_versions::ListSchemaVersionsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_schema_versions::ListSchemaVersionsError> for Error {
    fn from(err: crate::operation::list_schema_versions::ListSchemaVersionsError) -> Self {
        match err {
            crate::operation::list_schema_versions::ListSchemaVersionsError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_schema_versions::ListSchemaVersionsError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::list_schema_versions::ListSchemaVersionsError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::list_schema_versions::ListSchemaVersionsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_code_binding::PutCodeBindingError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_code_binding::PutCodeBindingError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_code_binding::PutCodeBindingError> for Error {
    fn from(err: crate::operation::put_code_binding::PutCodeBindingError) -> Self {
        match err {
            crate::operation::put_code_binding::PutCodeBindingError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_code_binding::PutCodeBindingError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_code_binding::PutCodeBindingError::GoneException(inner) => Error::GoneException(inner),
            crate::operation::put_code_binding::PutCodeBindingError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_code_binding::PutCodeBindingError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_code_binding::PutCodeBindingError::TooManyRequestsException(inner) => Error::TooManyRequestsException(inner),
            crate::operation::put_code_binding::PutCodeBindingError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_code_binding::PutCodeBindingError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_policy::PutResourcePolicyError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::put_resource_policy::PutResourcePolicyError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::put_resource_policy::PutResourcePolicyError> for Error {
    fn from(err: crate::operation::put_resource_policy::PutResourcePolicyError) -> Self {
        match err {
            crate::operation::put_resource_policy::PutResourcePolicyError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::put_resource_policy::PutResourcePolicyError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::PreconditionFailedException(inner) => {
                Error::PreconditionFailedException(inner)
            }
            crate::operation::put_resource_policy::PutResourcePolicyError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::put_resource_policy::PutResourcePolicyError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::put_resource_policy::PutResourcePolicyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_schemas::SearchSchemasError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::search_schemas::SearchSchemasError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::search_schemas::SearchSchemasError> for Error {
    fn from(err: crate::operation::search_schemas::SearchSchemasError) -> Self {
        match err {
            crate::operation::search_schemas::SearchSchemasError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::search_schemas::SearchSchemasError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::search_schemas::SearchSchemasError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::search_schemas::SearchSchemasError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::search_schemas::SearchSchemasError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::search_schemas::SearchSchemasError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_discoverer::StartDiscovererError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::start_discoverer::StartDiscovererError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::start_discoverer::StartDiscovererError> for Error {
    fn from(err: crate::operation::start_discoverer::StartDiscovererError) -> Self {
        match err {
            crate::operation::start_discoverer::StartDiscovererError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::start_discoverer::StartDiscovererError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::start_discoverer::StartDiscovererError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::start_discoverer::StartDiscovererError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::start_discoverer::StartDiscovererError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::start_discoverer::StartDiscovererError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::start_discoverer::StartDiscovererError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_discoverer::StopDiscovererError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::stop_discoverer::StopDiscovererError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::stop_discoverer::StopDiscovererError> for Error {
    fn from(err: crate::operation::stop_discoverer::StopDiscovererError) -> Self {
        match err {
            crate::operation::stop_discoverer::StopDiscovererError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::stop_discoverer::StopDiscovererError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::stop_discoverer::StopDiscovererError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::stop_discoverer::StopDiscovererError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::stop_discoverer::StopDiscovererError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::stop_discoverer::StopDiscovererError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::stop_discoverer::StopDiscovererError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::tag_resource::TagResourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::tag_resource::TagResourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::tag_resource::TagResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::untag_resource::UntagResourceError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::untag_resource::UntagResourceError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::untag_resource::UntagResourceError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_discoverer::UpdateDiscovererError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_discoverer::UpdateDiscovererError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_discoverer::UpdateDiscovererError> for Error {
    fn from(err: crate::operation::update_discoverer::UpdateDiscovererError) -> Self {
        match err {
            crate::operation::update_discoverer::UpdateDiscovererError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_discoverer::UpdateDiscovererError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_discoverer::UpdateDiscovererError::InternalServerErrorException(inner) => {
                Error::InternalServerErrorException(inner)
            }
            crate::operation::update_discoverer::UpdateDiscovererError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_discoverer::UpdateDiscovererError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::operation::update_discoverer::UpdateDiscovererError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_discoverer::UpdateDiscovererError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_registry::UpdateRegistryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_registry::UpdateRegistryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_registry::UpdateRegistryError> for Error {
    fn from(err: crate::operation::update_registry::UpdateRegistryError) -> Self {
        match err {
            crate::operation::update_registry::UpdateRegistryError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_registry::UpdateRegistryError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_registry::UpdateRegistryError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_registry::UpdateRegistryError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_registry::UpdateRegistryError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_registry::UpdateRegistryError::UnauthorizedException(inner) => Error::UnauthorizedException(inner),
            crate::operation::update_registry::UpdateRegistryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_schema::UpdateSchemaError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_schema::UpdateSchemaError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(
                ::aws_smithy_types::error::Unhandled::builder()
                    .meta(::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone())
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::operation::update_schema::UpdateSchemaError> for Error {
    fn from(err: crate::operation::update_schema::UpdateSchemaError) -> Self {
        match err {
            crate::operation::update_schema::UpdateSchemaError::BadRequestException(inner) => Error::BadRequestException(inner),
            crate::operation::update_schema::UpdateSchemaError::ForbiddenException(inner) => Error::ForbiddenException(inner),
            crate::operation::update_schema::UpdateSchemaError::InternalServerErrorException(inner) => Error::InternalServerErrorException(inner),
            crate::operation::update_schema::UpdateSchemaError::NotFoundException(inner) => Error::NotFoundException(inner),
            crate::operation::update_schema::UpdateSchemaError::ServiceUnavailableException(inner) => Error::ServiceUnavailableException(inner),
            crate::operation::update_schema::UpdateSchemaError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::BadRequestException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::ForbiddenException(inner) => inner.source(),
            Error::GoneException(inner) => inner.source(),
            Error::InternalServerErrorException(inner) => inner.source(),
            Error::NotFoundException(inner) => inner.source(),
            Error::PreconditionFailedException(inner) => inner.source(),
            Error::ServiceUnavailableException(inner) => inner.source(),
            Error::TooManyRequestsException(inner) => inner.source(),
            Error::UnauthorizedException(inner) => inner.source(),
            Error::Unhandled(inner) => inner.source(),
        }
    }
}
impl ::aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::BadRequestException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::ForbiddenException(e) => e.request_id(),
            Self::GoneException(e) => e.request_id(),
            Self::InternalServerErrorException(e) => e.request_id(),
            Self::NotFoundException(e) => e.request_id(),
            Self::PreconditionFailedException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::TooManyRequestsException(e) => e.request_id(),
            Self::UnauthorizedException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
