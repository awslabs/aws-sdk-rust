// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_simulation_job_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_simulation_job::CreateSimulationJobInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_request_token {
        object.key("clientRequestToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.compute {
        #[allow(unused_mut)]
        let mut object_3 = object.key("compute").start_object();
        crate::protocol_serde::shape_compute::ser_compute(&mut object_3, var_2)?;
        object_3.finish();
    }
    if let Some(var_4) = &input.data_sources {
        let mut array_5 = object.key("dataSources").start_array();
        for item_6 in var_4 {
            {
                #[allow(unused_mut)]
                let mut object_7 = array_5.value().start_object();
                crate::protocol_serde::shape_data_source_config::ser_data_source_config(&mut object_7, item_6)?;
                object_7.finish();
            }
        }
        array_5.finish();
    }
    if let Some(var_8) = &input.failure_behavior {
        object.key("failureBehavior").string(var_8.as_str());
    }
    if let Some(var_9) = &input.iam_role {
        object.key("iamRole").string(var_9.as_str());
    }
    if let Some(var_10) = &input.logging_config {
        #[allow(unused_mut)]
        let mut object_11 = object.key("loggingConfig").start_object();
        crate::protocol_serde::shape_logging_config::ser_logging_config(&mut object_11, var_10)?;
        object_11.finish();
    }
    if let Some(var_12) = &input.max_job_duration_in_seconds {
        object.key("maxJobDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            ::aws_smithy_types::Number::NegInt((*var_12).into()),
        );
    }
    if let Some(var_13) = &input.output_location {
        #[allow(unused_mut)]
        let mut object_14 = object.key("outputLocation").start_object();
        crate::protocol_serde::shape_output_location::ser_output_location(&mut object_14, var_13)?;
        object_14.finish();
    }
    if let Some(var_15) = &input.robot_applications {
        let mut array_16 = object.key("robotApplications").start_array();
        for item_17 in var_15 {
            {
                #[allow(unused_mut)]
                let mut object_18 = array_16.value().start_object();
                crate::protocol_serde::shape_robot_application_config::ser_robot_application_config(&mut object_18, item_17)?;
                object_18.finish();
            }
        }
        array_16.finish();
    }
    if let Some(var_19) = &input.simulation_applications {
        let mut array_20 = object.key("simulationApplications").start_array();
        for item_21 in var_19 {
            {
                #[allow(unused_mut)]
                let mut object_22 = array_20.value().start_object();
                crate::protocol_serde::shape_simulation_application_config::ser_simulation_application_config(&mut object_22, item_21)?;
                object_22.finish();
            }
        }
        array_20.finish();
    }
    if let Some(var_23) = &input.tags {
        #[allow(unused_mut)]
        let mut object_24 = object.key("tags").start_object();
        for (key_25, value_26) in var_23 {
            {
                object_24.key(key_25.as_str()).string(value_26.as_str());
            }
        }
        object_24.finish();
    }
    if let Some(var_27) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_28 = object.key("vpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_28, var_27)?;
        object_28.finish();
    }
    Ok(())
}
