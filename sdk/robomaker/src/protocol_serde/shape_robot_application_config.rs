// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_robot_application_config(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::RobotApplicationConfig,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.application {
        object.key("application").string(var_1.as_str());
    }
    if let Some(var_2) = &input.application_version {
        object.key("applicationVersion").string(var_2.as_str());
    }
    if let Some(var_3) = &input.launch_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("launchConfig").start_object();
        crate::protocol_serde::shape_launch_config::ser_launch_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.upload_configurations {
        let mut array_6 = object.key("uploadConfigurations").start_array();
        for item_7 in var_5 {
            {
                #[allow(unused_mut)]
                let mut object_8 = array_6.value().start_object();
                crate::protocol_serde::shape_upload_configuration::ser_upload_configuration(
                    &mut object_8,
                    item_7,
                )?;
                object_8.finish();
            }
        }
        array_6.finish();
    }
    if let Some(var_9) = &input.use_default_upload_configurations {
        object.key("useDefaultUploadConfigurations").boolean(*var_9);
    }
    if let Some(var_10) = &input.tools {
        let mut array_11 = object.key("tools").start_array();
        for item_12 in var_10 {
            {
                #[allow(unused_mut)]
                let mut object_13 = array_11.value().start_object();
                crate::protocol_serde::shape_tool::ser_tool(&mut object_13, item_12)?;
                object_13.finish();
            }
        }
        array_11.finish();
    }
    if let Some(var_14) = &input.use_default_tools {
        object.key("useDefaultTools").boolean(*var_14);
    }
    Ok(())
}

pub(crate) fn de_robot_application_config<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::RobotApplicationConfig>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::RobotApplicationConfigBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "application" => {
                                builder = builder.set_application(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "applicationVersion" => {
                                builder = builder.set_application_version(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "launchConfig" => {
                                builder = builder.set_launch_config(
                                    crate::protocol_serde::shape_launch_config::de_launch_config(
                                        tokens,
                                    )?,
                                );
                            }
                            "uploadConfigurations" => {
                                builder = builder.set_upload_configurations(
                                    crate::protocol_serde::shape_upload_configurations::de_upload_configurations(tokens)?
                                );
                            }
                            "useDefaultUploadConfigurations" => {
                                builder = builder.set_use_default_upload_configurations(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "tools" => {
                                builder = builder.set_tools(
                                    crate::protocol_serde::shape_tools::de_tools(tokens)?,
                                );
                            }
                            "useDefaultTools" => {
                                builder = builder.set_use_default_tools(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
