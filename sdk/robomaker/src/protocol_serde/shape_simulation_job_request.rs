// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_simulation_job_request(
    object: &mut aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::types::SimulationJobRequest,
) -> Result<(), aws_smithy_http::operation::error::SerializationError> {
    if let Some(var_1) = &input.output_location {
        #[allow(unused_mut)]
        let mut object_2 = object.key("outputLocation").start_object();
        crate::protocol_serde::shape_output_location::ser_output_location(&mut object_2, var_1)?;
        object_2.finish();
    }
    if let Some(var_3) = &input.logging_config {
        #[allow(unused_mut)]
        let mut object_4 = object.key("loggingConfig").start_object();
        crate::protocol_serde::shape_logging_config::ser_logging_config(&mut object_4, var_3)?;
        object_4.finish();
    }
    {
        object.key("maxJobDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            aws_smithy_types::Number::NegInt((input.max_job_duration_in_seconds).into()),
        );
    }
    if let Some(var_5) = &input.iam_role {
        object.key("iamRole").string(var_5.as_str());
    }
    if let Some(var_6) = &input.failure_behavior {
        object.key("failureBehavior").string(var_6.as_str());
    }
    if let Some(var_7) = &input.use_default_applications {
        object.key("useDefaultApplications").boolean(*var_7);
    }
    if let Some(var_8) = &input.robot_applications {
        let mut array_9 = object.key("robotApplications").start_array();
        for item_10 in var_8 {
            {
                #[allow(unused_mut)]
                let mut object_11 = array_9.value().start_object();
                crate::protocol_serde::shape_robot_application_config::ser_robot_application_config(&mut object_11, item_10)?;
                object_11.finish();
            }
        }
        array_9.finish();
    }
    if let Some(var_12) = &input.simulation_applications {
        let mut array_13 = object.key("simulationApplications").start_array();
        for item_14 in var_12 {
            {
                #[allow(unused_mut)]
                let mut object_15 = array_13.value().start_object();
                crate::protocol_serde::shape_simulation_application_config::ser_simulation_application_config(&mut object_15, item_14)?;
                object_15.finish();
            }
        }
        array_13.finish();
    }
    if let Some(var_16) = &input.data_sources {
        let mut array_17 = object.key("dataSources").start_array();
        for item_18 in var_16 {
            {
                #[allow(unused_mut)]
                let mut object_19 = array_17.value().start_object();
                crate::protocol_serde::shape_data_source_config::ser_data_source_config(
                    &mut object_19,
                    item_18,
                )?;
                object_19.finish();
            }
        }
        array_17.finish();
    }
    if let Some(var_20) = &input.vpc_config {
        #[allow(unused_mut)]
        let mut object_21 = object.key("vpcConfig").start_object();
        crate::protocol_serde::shape_vpc_config::ser_vpc_config(&mut object_21, var_20)?;
        object_21.finish();
    }
    if let Some(var_22) = &input.compute {
        #[allow(unused_mut)]
        let mut object_23 = object.key("compute").start_object();
        crate::protocol_serde::shape_compute::ser_compute(&mut object_23, var_22)?;
        object_23.finish();
    }
    if let Some(var_24) = &input.tags {
        #[allow(unused_mut)]
        let mut object_25 = object.key("tags").start_object();
        for (key_26, value_27) in var_24 {
            {
                object_25.key(key_26.as_str()).string(value_27.as_str());
            }
        }
        object_25.finish();
    }
    Ok(())
}

pub(crate) fn de_simulation_job_request<'a, I>(
    tokens: &mut std::iter::Peekable<I>,
) -> Result<
    Option<crate::types::SimulationJobRequest>,
    aws_smithy_json::deserialize::error::DeserializeError,
>
where
    I: Iterator<
        Item = Result<
            aws_smithy_json::deserialize::Token<'a>,
            aws_smithy_json::deserialize::error::DeserializeError,
        >,
    >,
{
    match tokens.next().transpose()? {
        Some(aws_smithy_json::deserialize::Token::ValueNull { .. }) => Ok(None),
        Some(aws_smithy_json::deserialize::Token::StartObject { .. }) => {
            #[allow(unused_mut)]
            let mut builder = crate::types::builders::SimulationJobRequestBuilder::default();
            loop {
                match tokens.next().transpose()? {
                    Some(aws_smithy_json::deserialize::Token::EndObject { .. }) => break,
                    Some(aws_smithy_json::deserialize::Token::ObjectKey { key, .. }) => {
                        match key.to_unescaped()?.as_ref() {
                            "outputLocation" => {
                                builder = builder.set_output_location(
                                    crate::protocol_serde::shape_output_location::de_output_location(tokens)?
                                );
                            }
                            "loggingConfig" => {
                                builder = builder.set_logging_config(
                                    crate::protocol_serde::shape_logging_config::de_logging_config(
                                        tokens,
                                    )?,
                                );
                            }
                            "maxJobDurationInSeconds" => {
                                builder = builder.set_max_job_duration_in_seconds(
                                    aws_smithy_json::deserialize::token::expect_number_or_null(
                                        tokens.next(),
                                    )?
                                    .map(i64::try_from)
                                    .transpose()?,
                                );
                            }
                            "iamRole" => {
                                builder = builder.set_iam_role(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| s.to_unescaped().map(|u| u.into_owned()))
                                    .transpose()?,
                                );
                            }
                            "failureBehavior" => {
                                builder = builder.set_failure_behavior(
                                    aws_smithy_json::deserialize::token::expect_string_or_null(
                                        tokens.next(),
                                    )?
                                    .map(|s| {
                                        s.to_unescaped().map(|u| {
                                            crate::types::FailureBehavior::from(u.as_ref())
                                        })
                                    })
                                    .transpose()?,
                                );
                            }
                            "useDefaultApplications" => {
                                builder = builder.set_use_default_applications(
                                    aws_smithy_json::deserialize::token::expect_bool_or_null(
                                        tokens.next(),
                                    )?,
                                );
                            }
                            "robotApplications" => {
                                builder = builder.set_robot_applications(
                                    crate::protocol_serde::shape_robot_application_configs::de_robot_application_configs(tokens)?
                                );
                            }
                            "simulationApplications" => {
                                builder = builder.set_simulation_applications(
                                    crate::protocol_serde::shape_simulation_application_configs::de_simulation_application_configs(tokens)?
                                );
                            }
                            "dataSources" => {
                                builder = builder.set_data_sources(
                                    crate::protocol_serde::shape_data_source_configs::de_data_source_configs(tokens)?
                                );
                            }
                            "vpcConfig" => {
                                builder = builder.set_vpc_config(
                                    crate::protocol_serde::shape_vpc_config::de_vpc_config(tokens)?,
                                );
                            }
                            "compute" => {
                                builder = builder.set_compute(
                                    crate::protocol_serde::shape_compute::de_compute(tokens)?,
                                );
                            }
                            "tags" => {
                                builder = builder.set_tags(
                                    crate::protocol_serde::shape_tag_map::de_tag_map(tokens)?,
                                );
                            }
                            _ => aws_smithy_json::deserialize::token::skip_value(tokens)?,
                        }
                    }
                    other => {
                        return Err(
                            aws_smithy_json::deserialize::error::DeserializeError::custom(format!(
                                "expected object key or end object, found: {:?}",
                                other
                            )),
                        )
                    }
                }
            }
            Ok(Some(builder.build()))
        }
        _ => Err(
            aws_smithy_json::deserialize::error::DeserializeError::custom(
                "expected start object or null",
            ),
        ),
    }
}
