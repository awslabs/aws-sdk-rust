// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DescribeSimulationJob`](crate::client::fluent_builders::DescribeSimulationJob) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`job(impl Into<String>)`](crate::client::fluent_builders::DescribeSimulationJob::job) / [`set_job(Option<String>)`](crate::client::fluent_builders::DescribeSimulationJob::set_job): <p>The Amazon Resource Name (ARN) of the simulation job to be described.</p>
    /// - On success, responds with [`DescribeSimulationJobOutput`](crate::output::DescribeSimulationJobOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::DescribeSimulationJobOutput::arn): <p>The Amazon Resource Name (ARN) of the simulation job.</p>
    ///   - [`name(Option<String>)`](crate::output::DescribeSimulationJobOutput::name): <p>The name of the simulation job.</p>
    ///   - [`status(Option<SimulationJobStatus>)`](crate::output::DescribeSimulationJobOutput::status): <p>The status of the simulation job.</p>
    ///   - [`last_started_at(Option<DateTime>)`](crate::output::DescribeSimulationJobOutput::last_started_at): <p>The time, in milliseconds since the epoch, when the simulation job was last started.</p>
    ///   - [`last_updated_at(Option<DateTime>)`](crate::output::DescribeSimulationJobOutput::last_updated_at): <p>The time, in milliseconds since the epoch, when the simulation job was last updated.</p>
    ///   - [`failure_behavior(Option<FailureBehavior>)`](crate::output::DescribeSimulationJobOutput::failure_behavior): <p>The failure behavior for the simulation job.</p>
    ///   - [`failure_code(Option<SimulationJobErrorCode>)`](crate::output::DescribeSimulationJobOutput::failure_code): <p>The failure code of the simulation job if it failed:</p>  <dl>   <dt>   InternalServiceError  </dt>   <dd>    <p>Internal service error.</p>   </dd>   <dt>   RobotApplicationCrash  </dt>   <dd>    <p>Robot application exited abnormally.</p>   </dd>   <dt>   SimulationApplicationCrash  </dt>   <dd>    <p> Simulation application exited abnormally.</p>   </dd>   <dt>   BadPermissionsRobotApplication  </dt>   <dd>    <p>Robot application bundle could not be downloaded.</p>   </dd>   <dt>   BadPermissionsSimulationApplication  </dt>   <dd>    <p>Simulation application bundle could not be downloaded.</p>   </dd>   <dt>   BadPermissionsS3Output  </dt>   <dd>    <p>Unable to publish outputs to customer-provided S3 bucket.</p>   </dd>   <dt>   BadPermissionsCloudwatchLogs  </dt>   <dd>    <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>   </dd>   <dt>   SubnetIpLimitExceeded  </dt>   <dd>    <p>Subnet IP limit exceeded.</p>   </dd>   <dt>   ENILimitExceeded  </dt>   <dd>    <p>ENI limit exceeded.</p>   </dd>   <dt>   BadPermissionsUserCredentials  </dt>   <dd>    <p>Unable to use the Role provided.</p>   </dd>   <dt>   InvalidBundleRobotApplication  </dt>   <dd>    <p>Robot bundle cannot be extracted (invalid format, bundling error, or other issue).</p>   </dd>   <dt>   InvalidBundleSimulationApplication  </dt>   <dd>    <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).</p>   </dd>   <dt>   RobotApplicationVersionMismatchedEtag  </dt>   <dd>    <p>Etag for RobotApplication does not match value during version creation.</p>   </dd>   <dt>   SimulationApplicationVersionMismatchedEtag  </dt>   <dd>    <p>Etag for SimulationApplication does not match value during version creation.</p>   </dd>  </dl>
    ///   - [`failure_reason(Option<String>)`](crate::output::DescribeSimulationJobOutput::failure_reason): <p>Details about why the simulation job failed. For more information about troubleshooting, see <a href="https://docs.aws.amazon.com/robomaker/latest/dg/troubleshooting.html">Troubleshooting</a>.</p>
    ///   - [`client_request_token(Option<String>)`](crate::output::DescribeSimulationJobOutput::client_request_token): <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    ///   - [`output_location(Option<OutputLocation>)`](crate::output::DescribeSimulationJobOutput::output_location): <p>Location for output files generated by the simulation job.</p>
    ///   - [`logging_config(Option<LoggingConfig>)`](crate::output::DescribeSimulationJobOutput::logging_config): <p>The logging configuration.</p>
    ///   - [`max_job_duration_in_seconds(i64)`](crate::output::DescribeSimulationJobOutput::max_job_duration_in_seconds): <p>The maximum job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    ///   - [`simulation_time_millis(i64)`](crate::output::DescribeSimulationJobOutput::simulation_time_millis): <p>The simulation job execution duration in milliseconds.</p>
    ///   - [`iam_role(Option<String>)`](crate::output::DescribeSimulationJobOutput::iam_role): <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf.</p>
    ///   - [`robot_applications(Option<Vec<RobotApplicationConfig>>)`](crate::output::DescribeSimulationJobOutput::robot_applications): <p>A list of robot applications.</p>
    ///   - [`simulation_applications(Option<Vec<SimulationApplicationConfig>>)`](crate::output::DescribeSimulationJobOutput::simulation_applications): <p>A list of simulation applications.</p>
    ///   - [`data_sources(Option<Vec<DataSource>>)`](crate::output::DescribeSimulationJobOutput::data_sources): <p>The data sources for the simulation job.</p>
    ///   - [`tags(Option<HashMap<String, String>>)`](crate::output::DescribeSimulationJobOutput::tags): <p>The list of all tags added to the specified simulation job.</p>
    ///   - [`vpc_config(Option<VpcConfigResponse>)`](crate::output::DescribeSimulationJobOutput::vpc_config): <p>The VPC configuration.</p>
    ///   - [`network_interface(Option<NetworkInterface>)`](crate::output::DescribeSimulationJobOutput::network_interface): <p>The network interface information for the simulation job.</p>
    ///   - [`compute(Option<ComputeResponse>)`](crate::output::DescribeSimulationJobOutput::compute): <p>Compute information for the simulation job.</p>
    /// - On failure, responds with [`SdkError<DescribeSimulationJobError>`](crate::error::DescribeSimulationJobError)
    pub fn describe_simulation_job(&self) -> crate::client::fluent_builders::DescribeSimulationJob {
        crate::client::fluent_builders::DescribeSimulationJob::new(self.handle.clone())
    }
}
