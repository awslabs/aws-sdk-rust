// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateSimulationApplicationVersion`](crate::client::fluent_builders::CreateSimulationApplicationVersion) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`application(impl Into<String>)`](crate::client::fluent_builders::CreateSimulationApplicationVersion::application) / [`set_application(Option<String>)`](crate::client::fluent_builders::CreateSimulationApplicationVersion::set_application): <p>The application information for the simulation application.</p>
    ///   - [`current_revision_id(impl Into<String>)`](crate::client::fluent_builders::CreateSimulationApplicationVersion::current_revision_id) / [`set_current_revision_id(Option<String>)`](crate::client::fluent_builders::CreateSimulationApplicationVersion::set_current_revision_id): <p>The current revision id for the simulation application. If you provide a value and it matches the latest revision ID, a new version will be created.</p>
    ///   - [`s3_etags(Vec<String>)`](crate::client::fluent_builders::CreateSimulationApplicationVersion::s3_etags) / [`set_s3_etags(Option<Vec<String>>)`](crate::client::fluent_builders::CreateSimulationApplicationVersion::set_s3_etags): <p>The Amazon S3 eTag identifier for the zip file bundle that you use to create the simulation application.</p>
    ///   - [`image_digest(impl Into<String>)`](crate::client::fluent_builders::CreateSimulationApplicationVersion::image_digest) / [`set_image_digest(Option<String>)`](crate::client::fluent_builders::CreateSimulationApplicationVersion::set_image_digest): <p>The SHA256 digest used to identify the Docker image URI used to created the simulation application.</p>
    /// - On success, responds with [`CreateSimulationApplicationVersionOutput`](crate::output::CreateSimulationApplicationVersionOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::output::CreateSimulationApplicationVersionOutput::arn): <p>The Amazon Resource Name (ARN) of the simulation application.</p>
    ///   - [`name(Option<String>)`](crate::output::CreateSimulationApplicationVersionOutput::name): <p>The name of the simulation application.</p>
    ///   - [`version(Option<String>)`](crate::output::CreateSimulationApplicationVersionOutput::version): <p>The version of the simulation application.</p>
    ///   - [`sources(Option<Vec<Source>>)`](crate::output::CreateSimulationApplicationVersionOutput::sources): <p>The sources of the simulation application.</p>
    ///   - [`simulation_software_suite(Option<SimulationSoftwareSuite>)`](crate::output::CreateSimulationApplicationVersionOutput::simulation_software_suite): <p>The simulation software suite used by the simulation application.</p>
    ///   - [`robot_software_suite(Option<RobotSoftwareSuite>)`](crate::output::CreateSimulationApplicationVersionOutput::robot_software_suite): <p>Information about the robot software suite (ROS distribution).</p>
    ///   - [`rendering_engine(Option<RenderingEngine>)`](crate::output::CreateSimulationApplicationVersionOutput::rendering_engine): <p>The rendering engine for the simulation application.</p>
    ///   - [`last_updated_at(Option<DateTime>)`](crate::output::CreateSimulationApplicationVersionOutput::last_updated_at): <p>The time, in milliseconds since the epoch, when the simulation application was last updated.</p>
    ///   - [`revision_id(Option<String>)`](crate::output::CreateSimulationApplicationVersionOutput::revision_id): <p>The revision ID of the simulation application.</p>
    ///   - [`environment(Option<Environment>)`](crate::output::CreateSimulationApplicationVersionOutput::environment): <p>The object that contains the Docker image URI used to create the simulation application.</p>
    /// - On failure, responds with [`SdkError<CreateSimulationApplicationVersionError>`](crate::error::CreateSimulationApplicationVersionError)
    pub fn create_simulation_application_version(
        &self,
    ) -> crate::client::fluent_builders::CreateSimulationApplicationVersion {
        crate::client::fluent_builders::CreateSimulationApplicationVersion::new(self.handle.clone())
    }
}
