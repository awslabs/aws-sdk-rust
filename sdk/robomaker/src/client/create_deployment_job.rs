// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateDeploymentJob`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`deployment_config(DeploymentConfig)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::deployment_config) / [`set_deployment_config(Option<DeploymentConfig>)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::set_deployment_config):<br>required: **false**<br><p>The requested deployment configuration.</p><br>
    ///   - [`client_request_token(impl Into<String>)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::client_request_token) / [`set_client_request_token(Option<String>)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::set_client_request_token):<br>required: **true**<br><p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p><br>
    ///   - [`fleet(impl Into<String>)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::fleet) / [`set_fleet(Option<String>)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::set_fleet):<br>required: **true**<br><p>The Amazon Resource Name (ARN) of the fleet to deploy.</p><br>
    ///   - [`deployment_application_configs(DeploymentApplicationConfig)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::deployment_application_configs) / [`set_deployment_application_configs(Option<Vec::<DeploymentApplicationConfig>>)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::set_deployment_application_configs):<br>required: **true**<br><p>The deployment application configuration.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::set_tags):<br>required: **false**<br><p>A map that contains tag keys and tag values that are attached to the deployment job.</p><br>
    /// - On success, responds with [`CreateDeploymentJobOutput`](crate::operation::create_deployment_job::CreateDeploymentJobOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::arn): <p>The Amazon Resource Name (ARN) of the deployment job.</p>
    ///   - [`fleet(Option<String>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::fleet): <p>The target fleet for the deployment job.</p>
    ///   - [`status(Option<DeploymentStatus>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::status): <p>The status of the deployment job.</p>
    ///   - [`deployment_application_configs(Option<Vec::<DeploymentApplicationConfig>>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::deployment_application_configs): <p>The deployment application configuration.</p>
    ///   - [`failure_reason(Option<String>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::failure_reason): <p>The failure reason of the deployment job if it failed.</p>
    ///   - [`failure_code(Option<DeploymentJobErrorCode>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::failure_code): <p>The failure code of the simulation job if it failed:</p>  <dl>   <dt>   BadPermissionError  </dt>   <dd>    <p>AWS Greengrass requires a service-level role permission to access other services. The role must include the <a href="https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy$jsonEditor"> <code>AWSGreengrassResourceAccessRolePolicy</code> managed policy</a>. </p>   </dd>   <dt>   ExtractingBundleFailure  </dt>   <dd>    <p>The robot application could not be extracted from the bundle.</p>   </dd>   <dt>   FailureThresholdBreached  </dt>   <dd>    <p>The percentage of robots that could not be updated exceeded the percentage set for the deployment.</p>   </dd>   <dt>   GreengrassDeploymentFailed  </dt>   <dd>    <p>The robot application could not be deployed to the robot.</p>   </dd>   <dt>   GreengrassGroupVersionDoesNotExist  </dt>   <dd>    <p>The AWS Greengrass group or version associated with a robot is missing.</p>   </dd>   <dt>   InternalServerError  </dt>   <dd>    <p>An internal error has occurred. Retry your request, but if the problem persists, contact us with details.</p>   </dd>   <dt>   MissingRobotApplicationArchitecture  </dt>   <dd>    <p>The robot application does not have a source that matches the architecture of the robot.</p>   </dd>   <dt>   MissingRobotDeploymentResource  </dt>   <dd>    <p>One or more of the resources specified for the robot application are missing. For example, does the robot application have the correct launch package and launch file?</p>   </dd>   <dt>   PostLaunchFileFailure  </dt>   <dd>    <p>The post-launch script failed.</p>   </dd>   <dt>   PreLaunchFileFailure  </dt>   <dd>    <p>The pre-launch script failed.</p>   </dd>   <dt>   ResourceNotFound  </dt>   <dd>    <p>One or more deployment resources are missing. For example, do robot application source bundles still exist? </p>   </dd>   <dt>   RobotDeploymentNoResponse  </dt>   <dd>    <p>There is no response from the robot. It might not be powered on or connected to the internet.</p>   </dd>  </dl>
    ///   - [`created_at(Option<DateTime>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::created_at): <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    ///   - [`deployment_config(Option<DeploymentConfig>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::deployment_config): <p>The deployment configuration.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::create_deployment_job::CreateDeploymentJobOutput::tags): <p>The list of all tags added to the deployment job.</p>
    /// - On failure, responds with [`SdkError<CreateDeploymentJobError>`](crate::operation::create_deployment_job::CreateDeploymentJobError)
    #[deprecated(
        note = "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
    )]
    pub fn create_deployment_job(&self) -> crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder {
        crate::operation::create_deployment_job::builders::CreateDeploymentJobFluentBuilder::new(self.handle.clone())
    }
}
