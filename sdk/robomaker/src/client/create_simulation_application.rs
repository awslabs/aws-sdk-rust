// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`CreateSimulationApplication`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`name(impl Into<String>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::name) / [`set_name(Option<String>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::set_name):<br>required: **true**<br><p>The name of the simulation application.</p><br>
    ///   - [`sources(SourceConfig)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::sources) / [`set_sources(Option<Vec::<SourceConfig>>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::set_sources):<br>required: **false**<br><p>The sources of the simulation application.</p><br>
    ///   - [`simulation_software_suite(SimulationSoftwareSuite)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::simulation_software_suite) / [`set_simulation_software_suite(Option<SimulationSoftwareSuite>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::set_simulation_software_suite):<br>required: **true**<br><p>The simulation software suite used by the simulation application.</p><br>
    ///   - [`robot_software_suite(RobotSoftwareSuite)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::robot_software_suite) / [`set_robot_software_suite(Option<RobotSoftwareSuite>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::set_robot_software_suite):<br>required: **true**<br><p>The robot software suite (ROS distribution) used by the simulation application.</p><br>
    ///   - [`rendering_engine(RenderingEngine)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::rendering_engine) / [`set_rendering_engine(Option<RenderingEngine>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::set_rendering_engine):<br>required: **false**<br><p>The rendering engine for the simulation application.</p><br>
    ///   - [`tags(impl Into<String>, impl Into<String>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::tags) / [`set_tags(Option<HashMap::<String, String>>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::set_tags):<br>required: **false**<br><p>A map that contains tag keys and tag values that are attached to the simulation application.</p><br>
    ///   - [`environment(Environment)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::environment) / [`set_environment(Option<Environment>)`](crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::set_environment):<br>required: **false**<br><p>The object that contains the Docker image URI used to create your simulation application.</p><br>
    /// - On success, responds with [`CreateSimulationApplicationOutput`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput) with field(s):
    ///   - [`arn(Option<String>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::arn): <p>The Amazon Resource Name (ARN) of the simulation application.</p>
    ///   - [`name(Option<String>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::name): <p>The name of the simulation application.</p>
    ///   - [`version(Option<String>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::version): <p>The version of the simulation application.</p>
    ///   - [`sources(Option<Vec::<Source>>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::sources): <p>The sources of the simulation application.</p>
    ///   - [`simulation_software_suite(Option<SimulationSoftwareSuite>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::simulation_software_suite): <p>The simulation software suite used by the simulation application.</p>
    ///   - [`robot_software_suite(Option<RobotSoftwareSuite>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::robot_software_suite): <p>Information about the robot software suite (ROS distribution).</p>
    ///   - [`rendering_engine(Option<RenderingEngine>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::rendering_engine): <p>The rendering engine for the simulation application.</p>
    ///   - [`last_updated_at(Option<DateTime>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::last_updated_at): <p>The time, in milliseconds since the epoch, when the simulation application was last updated.</p>
    ///   - [`revision_id(Option<String>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::revision_id): <p>The revision id of the simulation application.</p>
    ///   - [`tags(Option<HashMap::<String, String>>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::tags): <p>The list of all tags added to the simulation application.</p>
    ///   - [`environment(Option<Environment>)`](crate::operation::create_simulation_application::CreateSimulationApplicationOutput::environment): <p>The object that contains the Docker image URI that you used to create your simulation application.</p>
    /// - On failure, responds with [`SdkError<CreateSimulationApplicationError>`](crate::operation::create_simulation_application::CreateSimulationApplicationError)
    pub fn create_simulation_application(
        &self,
    ) -> crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder {
        crate::operation::create_simulation_application::builders::CreateSimulationApplicationFluentBuilder::new(self.handle.clone())
    }
}
