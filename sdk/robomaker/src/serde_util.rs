// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn list_simulation_jobs_output_correct_errors(
    mut builder: crate::operation::list_simulation_jobs::builders::ListSimulationJobsOutputBuilder,
) -> crate::operation::list_simulation_jobs::builders::ListSimulationJobsOutputBuilder {
    if builder.simulation_job_summaries.is_none() {
        builder.simulation_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_world_export_jobs_output_correct_errors(
    mut builder: crate::operation::list_world_export_jobs::builders::ListWorldExportJobsOutputBuilder,
) -> crate::operation::list_world_export_jobs::builders::ListWorldExportJobsOutputBuilder {
    if builder.world_export_job_summaries.is_none() {
        builder.world_export_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_world_generation_jobs_output_correct_errors(
    mut builder: crate::operation::list_world_generation_jobs::builders::ListWorldGenerationJobsOutputBuilder,
) -> crate::operation::list_world_generation_jobs::builders::ListWorldGenerationJobsOutputBuilder {
    if builder.world_generation_job_summaries.is_none() {
        builder.world_generation_job_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn deployment_application_config_correct_errors(
    mut builder: crate::types::builders::DeploymentApplicationConfigBuilder,
) -> crate::types::builders::DeploymentApplicationConfigBuilder {
    if builder.application.is_none() {
        builder.application = Some(Default::default())
    }
    if builder.application_version.is_none() {
        builder.application_version = Some(Default::default())
    }
    if builder.launch_config.is_none() {
        builder.launch_config = {
            let builder = crate::types::builders::DeploymentLaunchConfigBuilder::default();
            crate::serde_util::deployment_launch_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn robot_application_config_correct_errors(
    mut builder: crate::types::builders::RobotApplicationConfigBuilder,
) -> crate::types::builders::RobotApplicationConfigBuilder {
    if builder.application.is_none() {
        builder.application = Some(Default::default())
    }
    if builder.launch_config.is_none() {
        builder.launch_config = {
            let builder = crate::types::builders::LaunchConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn s3_object_correct_errors(mut builder: crate::types::builders::S3ObjectBuilder) -> crate::types::builders::S3ObjectBuilder {
    if builder.bucket.is_none() {
        builder.bucket = Some(Default::default())
    }
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    builder
}

pub(crate) fn simulation_application_config_correct_errors(
    mut builder: crate::types::builders::SimulationApplicationConfigBuilder,
) -> crate::types::builders::SimulationApplicationConfigBuilder {
    if builder.application.is_none() {
        builder.application = Some(Default::default())
    }
    if builder.launch_config.is_none() {
        builder.launch_config = {
            let builder = crate::types::builders::LaunchConfigBuilder::default();
            Some(builder.build())
        }
    }
    builder
}

pub(crate) fn simulation_job_request_correct_errors(
    mut builder: crate::types::builders::SimulationJobRequestBuilder,
) -> crate::types::builders::SimulationJobRequestBuilder {
    if builder.max_job_duration_in_seconds.is_none() {
        builder.max_job_duration_in_seconds = Some(Default::default())
    }
    builder
}

pub(crate) fn deployment_launch_config_correct_errors(
    mut builder: crate::types::builders::DeploymentLaunchConfigBuilder,
) -> crate::types::builders::DeploymentLaunchConfigBuilder {
    if builder.package_name.is_none() {
        builder.package_name = Some(Default::default())
    }
    if builder.launch_file.is_none() {
        builder.launch_file = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.subnets.is_none() {
        builder.subnets = Some(Default::default())
    }
    builder
}

pub(crate) fn data_source_config_correct_errors(
    mut builder: crate::types::builders::DataSourceConfigBuilder,
) -> crate::types::builders::DataSourceConfigBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.s3_bucket.is_none() {
        builder.s3_bucket = Some(Default::default())
    }
    if builder.s3_keys.is_none() {
        builder.s3_keys = Some(Default::default())
    }
    builder
}

pub(crate) fn tool_correct_errors(mut builder: crate::types::builders::ToolBuilder) -> crate::types::builders::ToolBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.command.is_none() {
        builder.command = Some(Default::default())
    }
    builder
}

pub(crate) fn upload_configuration_correct_errors(
    mut builder: crate::types::builders::UploadConfigurationBuilder,
) -> crate::types::builders::UploadConfigurationBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.path.is_none() {
        builder.path = Some(Default::default())
    }
    if builder.upload_behavior.is_none() {
        builder.upload_behavior = "no value was set".parse::<crate::types::UploadBehavior>().ok()
    }
    builder
}

pub(crate) fn port_mapping_correct_errors(mut builder: crate::types::builders::PortMappingBuilder) -> crate::types::builders::PortMappingBuilder {
    if builder.job_port.is_none() {
        builder.job_port = Some(Default::default())
    }
    if builder.application_port.is_none() {
        builder.application_port = Some(Default::default())
    }
    builder
}
