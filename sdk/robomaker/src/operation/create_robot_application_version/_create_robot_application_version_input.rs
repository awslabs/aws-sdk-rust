// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CreateRobotApplicationVersionInput {
    /// <p>The application information for the robot application.</p>
    pub application: ::std::option::Option<::std::string::String>,
    /// <p>The current revision id for the robot application. If you provide a value and it matches the latest revision ID, a new version will be created.</p>
    pub current_revision_id: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon S3 identifier for the zip file bundle that you use for your robot application.</p>
    pub s3_etags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A SHA256 identifier for the Docker image that you use for your robot application.</p>
    pub image_digest: ::std::option::Option<::std::string::String>,
}
impl CreateRobotApplicationVersionInput {
    /// <p>The application information for the robot application.</p>
    pub fn application(&self) -> ::std::option::Option<&str> {
        self.application.as_deref()
    }
    /// <p>The current revision id for the robot application. If you provide a value and it matches the latest revision ID, a new version will be created.</p>
    pub fn current_revision_id(&self) -> ::std::option::Option<&str> {
        self.current_revision_id.as_deref()
    }
    /// <p>The Amazon S3 identifier for the zip file bundle that you use for your robot application.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.s3_etags.is_none()`.
    pub fn s3_etags(&self) -> &[::std::string::String] {
        self.s3_etags.as_deref().unwrap_or_default()
    }
    /// <p>A SHA256 identifier for the Docker image that you use for your robot application.</p>
    pub fn image_digest(&self) -> ::std::option::Option<&str> {
        self.image_digest.as_deref()
    }
}
impl CreateRobotApplicationVersionInput {
    /// Creates a new builder-style object to manufacture [`CreateRobotApplicationVersionInput`](crate::operation::create_robot_application_version::CreateRobotApplicationVersionInput).
    pub fn builder() -> crate::operation::create_robot_application_version::builders::CreateRobotApplicationVersionInputBuilder {
        crate::operation::create_robot_application_version::builders::CreateRobotApplicationVersionInputBuilder::default()
    }
}

/// A builder for [`CreateRobotApplicationVersionInput`](crate::operation::create_robot_application_version::CreateRobotApplicationVersionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CreateRobotApplicationVersionInputBuilder {
    pub(crate) application: ::std::option::Option<::std::string::String>,
    pub(crate) current_revision_id: ::std::option::Option<::std::string::String>,
    pub(crate) s3_etags: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) image_digest: ::std::option::Option<::std::string::String>,
}
impl CreateRobotApplicationVersionInputBuilder {
    /// <p>The application information for the robot application.</p>
    /// This field is required.
    pub fn application(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The application information for the robot application.</p>
    pub fn set_application(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application = input;
        self
    }
    /// <p>The application information for the robot application.</p>
    pub fn get_application(&self) -> &::std::option::Option<::std::string::String> {
        &self.application
    }
    /// <p>The current revision id for the robot application. If you provide a value and it matches the latest revision ID, a new version will be created.</p>
    pub fn current_revision_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_revision_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current revision id for the robot application. If you provide a value and it matches the latest revision ID, a new version will be created.</p>
    pub fn set_current_revision_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_revision_id = input;
        self
    }
    /// <p>The current revision id for the robot application. If you provide a value and it matches the latest revision ID, a new version will be created.</p>
    pub fn get_current_revision_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_revision_id
    }
    /// Appends an item to `s3_etags`.
    ///
    /// To override the contents of this collection use [`set_s3_etags`](Self::set_s3_etags).
    ///
    /// <p>The Amazon S3 identifier for the zip file bundle that you use for your robot application.</p>
    pub fn s3_etags(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.s3_etags.unwrap_or_default();
        v.push(input.into());
        self.s3_etags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The Amazon S3 identifier for the zip file bundle that you use for your robot application.</p>
    pub fn set_s3_etags(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.s3_etags = input;
        self
    }
    /// <p>The Amazon S3 identifier for the zip file bundle that you use for your robot application.</p>
    pub fn get_s3_etags(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.s3_etags
    }
    /// <p>A SHA256 identifier for the Docker image that you use for your robot application.</p>
    pub fn image_digest(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.image_digest = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A SHA256 identifier for the Docker image that you use for your robot application.</p>
    pub fn set_image_digest(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.image_digest = input;
        self
    }
    /// <p>A SHA256 identifier for the Docker image that you use for your robot application.</p>
    pub fn get_image_digest(&self) -> &::std::option::Option<::std::string::String> {
        &self.image_digest
    }
    /// Consumes the builder and constructs a [`CreateRobotApplicationVersionInput`](crate::operation::create_robot_application_version::CreateRobotApplicationVersionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_robot_application_version::CreateRobotApplicationVersionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::create_robot_application_version::CreateRobotApplicationVersionInput {
            application: self.application,
            current_revision_id: self.current_revision_id,
            s3_etags: self.s3_etags,
            image_digest: self.image_digest,
        })
    }
}
