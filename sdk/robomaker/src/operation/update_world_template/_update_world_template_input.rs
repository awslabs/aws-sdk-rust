// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateWorldTemplateInput {
    /// <p>The Amazon Resource Name (arn) of the world template to update.</p>
    pub template: ::std::option::Option<::std::string::String>,
    /// <p>The name of the template.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The world template body.</p>
    pub template_body: ::std::option::Option<::std::string::String>,
    /// <p>The location of the world template.</p>
    pub template_location: ::std::option::Option<crate::types::TemplateLocation>,
}
impl UpdateWorldTemplateInput {
    /// <p>The Amazon Resource Name (arn) of the world template to update.</p>
    pub fn template(&self) -> ::std::option::Option<&str> {
        self.template.as_deref()
    }
    /// <p>The name of the template.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The world template body.</p>
    pub fn template_body(&self) -> ::std::option::Option<&str> {
        self.template_body.as_deref()
    }
    /// <p>The location of the world template.</p>
    pub fn template_location(&self) -> ::std::option::Option<&crate::types::TemplateLocation> {
        self.template_location.as_ref()
    }
}
impl UpdateWorldTemplateInput {
    /// Creates a new builder-style object to manufacture [`UpdateWorldTemplateInput`](crate::operation::update_world_template::UpdateWorldTemplateInput).
    pub fn builder() -> crate::operation::update_world_template::builders::UpdateWorldTemplateInputBuilder {
        crate::operation::update_world_template::builders::UpdateWorldTemplateInputBuilder::default()
    }
}

/// A builder for [`UpdateWorldTemplateInput`](crate::operation::update_world_template::UpdateWorldTemplateInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateWorldTemplateInputBuilder {
    pub(crate) template: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) template_body: ::std::option::Option<::std::string::String>,
    pub(crate) template_location: ::std::option::Option<crate::types::TemplateLocation>,
}
impl UpdateWorldTemplateInputBuilder {
    /// <p>The Amazon Resource Name (arn) of the world template to update.</p>
    /// This field is required.
    pub fn template(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (arn) of the world template to update.</p>
    pub fn set_template(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template = input;
        self
    }
    /// <p>The Amazon Resource Name (arn) of the world template to update.</p>
    pub fn get_template(&self) -> &::std::option::Option<::std::string::String> {
        &self.template
    }
    /// <p>The name of the template.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the template.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the template.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The world template body.</p>
    pub fn template_body(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.template_body = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The world template body.</p>
    pub fn set_template_body(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.template_body = input;
        self
    }
    /// <p>The world template body.</p>
    pub fn get_template_body(&self) -> &::std::option::Option<::std::string::String> {
        &self.template_body
    }
    /// <p>The location of the world template.</p>
    pub fn template_location(mut self, input: crate::types::TemplateLocation) -> Self {
        self.template_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The location of the world template.</p>
    pub fn set_template_location(mut self, input: ::std::option::Option<crate::types::TemplateLocation>) -> Self {
        self.template_location = input;
        self
    }
    /// <p>The location of the world template.</p>
    pub fn get_template_location(&self) -> &::std::option::Option<crate::types::TemplateLocation> {
        &self.template_location
    }
    /// Consumes the builder and constructs a [`UpdateWorldTemplateInput`](crate::operation::update_world_template::UpdateWorldTemplateInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_world_template::UpdateWorldTemplateInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::update_world_template::UpdateWorldTemplateInput {
            template: self.template,
            name: self.name,
            template_body: self.template_body,
            template_location: self.template_location,
        })
    }
}
