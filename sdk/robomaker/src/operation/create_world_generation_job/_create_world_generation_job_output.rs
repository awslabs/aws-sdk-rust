// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateWorldGenerationJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the world generator job.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The status of the world generator job.</p>
    /// <dl>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The world generator job request is pending.</p>
    /// </dd>
    /// <dt>
    /// Running
    /// </dt>
    /// <dd>
    /// <p>The world generator job is running. </p>
    /// </dd>
    /// <dt>
    /// Completed
    /// </dt>
    /// <dd>
    /// <p>The world generator job completed. </p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The world generator job failed. See <code>failureCode</code> for more information. </p>
    /// </dd>
    /// <dt>
    /// PartialFailed
    /// </dt>
    /// <dd>
    /// <p>Some worlds did not generate.</p>
    /// </dd>
    /// <dt>
    /// Canceled
    /// </dt>
    /// <dd>
    /// <p>The world generator job was cancelled.</p>
    /// </dd>
    /// <dt>
    /// Canceling
    /// </dt>
    /// <dd>
    /// <p>The world generator job is being cancelled.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::WorldGenerationJobStatus>,
    /// <p>The time, in milliseconds since the epoch, when the world generator job was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The failure code of the world generator job if it failed:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// LimitExceeded
    /// </dt>
    /// <dd>
    /// <p>The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. </p>
    /// </dd>
    /// <dt>
    /// ResourceNotFound
    /// </dt>
    /// <dd>
    /// <p>The specified resource could not be found. </p>
    /// </dd>
    /// <dt>
    /// RequestThrottled
    /// </dt>
    /// <dd>
    /// <p>The request was throttled.</p>
    /// </dd>
    /// <dt>
    /// InvalidInput
    /// </dt>
    /// <dd>
    /// <p>An input parameter in the request is not valid.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub failure_code: std::option::Option<crate::types::WorldGenerationJobErrorCode>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (arn) of the world template.</p>
    #[doc(hidden)]
    pub template: std::option::Option<std::string::String>,
    /// <p>Information about the world count. </p>
    #[doc(hidden)]
    pub world_count: std::option::Option<crate::types::WorldCount>,
    /// <p>A map that contains tag keys and tag values that are attached to the world generator job.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    /// <p>A map that contains tag keys and tag values that are attached to the generated worlds.</p>
    #[doc(hidden)]
    pub world_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateWorldGenerationJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the world generator job.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The status of the world generator job.</p>
    /// <dl>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The world generator job request is pending.</p>
    /// </dd>
    /// <dt>
    /// Running
    /// </dt>
    /// <dd>
    /// <p>The world generator job is running. </p>
    /// </dd>
    /// <dt>
    /// Completed
    /// </dt>
    /// <dd>
    /// <p>The world generator job completed. </p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The world generator job failed. See <code>failureCode</code> for more information. </p>
    /// </dd>
    /// <dt>
    /// PartialFailed
    /// </dt>
    /// <dd>
    /// <p>Some worlds did not generate.</p>
    /// </dd>
    /// <dt>
    /// Canceled
    /// </dt>
    /// <dd>
    /// <p>The world generator job was cancelled.</p>
    /// </dd>
    /// <dt>
    /// Canceling
    /// </dt>
    /// <dd>
    /// <p>The world generator job is being cancelled.</p>
    /// </dd>
    /// </dl>
    pub fn status(&self) -> std::option::Option<&crate::types::WorldGenerationJobStatus> {
        self.status.as_ref()
    }
    /// <p>The time, in milliseconds since the epoch, when the world generator job was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The failure code of the world generator job if it failed:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// LimitExceeded
    /// </dt>
    /// <dd>
    /// <p>The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. </p>
    /// </dd>
    /// <dt>
    /// ResourceNotFound
    /// </dt>
    /// <dd>
    /// <p>The specified resource could not be found. </p>
    /// </dd>
    /// <dt>
    /// RequestThrottled
    /// </dt>
    /// <dd>
    /// <p>The request was throttled.</p>
    /// </dd>
    /// <dt>
    /// InvalidInput
    /// </dt>
    /// <dd>
    /// <p>An input parameter in the request is not valid.</p>
    /// </dd>
    /// </dl>
    pub fn failure_code(&self) -> std::option::Option<&crate::types::WorldGenerationJobErrorCode> {
        self.failure_code.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The Amazon Resource Name (arn) of the world template.</p>
    pub fn template(&self) -> std::option::Option<&str> {
        self.template.as_deref()
    }
    /// <p>Information about the world count. </p>
    pub fn world_count(&self) -> std::option::Option<&crate::types::WorldCount> {
        self.world_count.as_ref()
    }
    /// <p>A map that contains tag keys and tag values that are attached to the world generator job.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
    /// <p>A map that contains tag keys and tag values that are attached to the generated worlds.</p>
    pub fn world_tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.world_tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateWorldGenerationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateWorldGenerationJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateWorldGenerationJobOutput`](crate::operation::create_world_generation_job::CreateWorldGenerationJobOutput).
    pub fn builder() -> crate::operation::create_world_generation_job::builders::CreateWorldGenerationJobOutputBuilder{
        crate::operation::create_world_generation_job::builders::CreateWorldGenerationJobOutputBuilder::default()
    }
}

/// A builder for [`CreateWorldGenerationJobOutput`](crate::operation::create_world_generation_job::CreateWorldGenerationJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateWorldGenerationJobOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::WorldGenerationJobStatus>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) failure_code: std::option::Option<crate::types::WorldGenerationJobErrorCode>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) template: std::option::Option<std::string::String>,
    pub(crate) world_count: std::option::Option<crate::types::WorldCount>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    pub(crate) world_tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateWorldGenerationJobOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the world generator job.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the world generator job.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The status of the world generator job.</p>
    /// <dl>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The world generator job request is pending.</p>
    /// </dd>
    /// <dt>
    /// Running
    /// </dt>
    /// <dd>
    /// <p>The world generator job is running. </p>
    /// </dd>
    /// <dt>
    /// Completed
    /// </dt>
    /// <dd>
    /// <p>The world generator job completed. </p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The world generator job failed. See <code>failureCode</code> for more information. </p>
    /// </dd>
    /// <dt>
    /// PartialFailed
    /// </dt>
    /// <dd>
    /// <p>Some worlds did not generate.</p>
    /// </dd>
    /// <dt>
    /// Canceled
    /// </dt>
    /// <dd>
    /// <p>The world generator job was cancelled.</p>
    /// </dd>
    /// <dt>
    /// Canceling
    /// </dt>
    /// <dd>
    /// <p>The world generator job is being cancelled.</p>
    /// </dd>
    /// </dl>
    pub fn status(mut self, input: crate::types::WorldGenerationJobStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the world generator job.</p>
    /// <dl>
    /// <dt>
    /// Pending
    /// </dt>
    /// <dd>
    /// <p>The world generator job request is pending.</p>
    /// </dd>
    /// <dt>
    /// Running
    /// </dt>
    /// <dd>
    /// <p>The world generator job is running. </p>
    /// </dd>
    /// <dt>
    /// Completed
    /// </dt>
    /// <dd>
    /// <p>The world generator job completed. </p>
    /// </dd>
    /// <dt>
    /// Failed
    /// </dt>
    /// <dd>
    /// <p>The world generator job failed. See <code>failureCode</code> for more information. </p>
    /// </dd>
    /// <dt>
    /// PartialFailed
    /// </dt>
    /// <dd>
    /// <p>Some worlds did not generate.</p>
    /// </dd>
    /// <dt>
    /// Canceled
    /// </dt>
    /// <dd>
    /// <p>The world generator job was cancelled.</p>
    /// </dd>
    /// <dt>
    /// Canceling
    /// </dt>
    /// <dd>
    /// <p>The world generator job is being cancelled.</p>
    /// </dd>
    /// </dl>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::WorldGenerationJobStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the world generator job was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the world generator job was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The failure code of the world generator job if it failed:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// LimitExceeded
    /// </dt>
    /// <dd>
    /// <p>The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. </p>
    /// </dd>
    /// <dt>
    /// ResourceNotFound
    /// </dt>
    /// <dd>
    /// <p>The specified resource could not be found. </p>
    /// </dd>
    /// <dt>
    /// RequestThrottled
    /// </dt>
    /// <dd>
    /// <p>The request was throttled.</p>
    /// </dd>
    /// <dt>
    /// InvalidInput
    /// </dt>
    /// <dd>
    /// <p>An input parameter in the request is not valid.</p>
    /// </dd>
    /// </dl>
    pub fn failure_code(mut self, input: crate::types::WorldGenerationJobErrorCode) -> Self {
        self.failure_code = Some(input);
        self
    }
    /// <p>The failure code of the world generator job if it failed:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// LimitExceeded
    /// </dt>
    /// <dd>
    /// <p>The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. </p>
    /// </dd>
    /// <dt>
    /// ResourceNotFound
    /// </dt>
    /// <dd>
    /// <p>The specified resource could not be found. </p>
    /// </dd>
    /// <dt>
    /// RequestThrottled
    /// </dt>
    /// <dd>
    /// <p>The request was throttled.</p>
    /// </dd>
    /// <dt>
    /// InvalidInput
    /// </dt>
    /// <dd>
    /// <p>An input parameter in the request is not valid.</p>
    /// </dd>
    /// </dl>
    pub fn set_failure_code(
        mut self,
        input: std::option::Option<crate::types::WorldGenerationJobErrorCode>,
    ) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The Amazon Resource Name (arn) of the world template.</p>
    pub fn template(mut self, input: impl Into<std::string::String>) -> Self {
        self.template = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (arn) of the world template.</p>
    pub fn set_template(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.template = input;
        self
    }
    /// <p>Information about the world count. </p>
    pub fn world_count(mut self, input: crate::types::WorldCount) -> Self {
        self.world_count = Some(input);
        self
    }
    /// <p>Information about the world count. </p>
    pub fn set_world_count(mut self, input: std::option::Option<crate::types::WorldCount>) -> Self {
        self.world_count = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map that contains tag keys and tag values that are attached to the world generator job.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to the world generator job.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Adds a key-value pair to `world_tags`.
    ///
    /// To override the contents of this collection use [`set_world_tags`](Self::set_world_tags).
    ///
    /// <p>A map that contains tag keys and tag values that are attached to the generated worlds.</p>
    pub fn world_tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.world_tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.world_tags = Some(hash_map);
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to the generated worlds.</p>
    pub fn set_world_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.world_tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateWorldGenerationJobOutput`](crate::operation::create_world_generation_job::CreateWorldGenerationJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::create_world_generation_job::CreateWorldGenerationJobOutput {
        crate::operation::create_world_generation_job::CreateWorldGenerationJobOutput {
            arn: self.arn,
            status: self.status,
            created_at: self.created_at,
            failure_code: self.failure_code,
            client_request_token: self.client_request_token,
            template: self.template,
            world_count: self.world_count,
            tags: self.tags,
            world_tags: self.world_tags,
            _request_id: self._request_id,
        }
    }
}
