// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[deprecated(
    note = "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
)]
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SyncDeploymentJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the synchronization request.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fleet: ::std::option::Option<::std::string::String>,
    /// <p>The status of the synchronization job.</p>
    pub status: ::std::option::Option<crate::types::DeploymentStatus>,
    /// <p>Information about the deployment configuration.</p>
    pub deployment_config: ::std::option::Option<crate::types::DeploymentConfig>,
    /// <p>Information about the deployment application configurations.</p>
    pub deployment_application_configs: ::std::option::Option<::std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    /// <p>The failure reason if the job fails.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>The failure code if the job fails:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationCrash
    /// </dt>
    /// <dd>
    /// <p>Robot application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationCrash
    /// </dt>
    /// <dd>
    /// <p> Simulation application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsS3Output
    /// </dt>
    /// <dd>
    /// <p>Unable to publish outputs to customer-provided S3 bucket.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsCloudwatchLogs
    /// </dt>
    /// <dd>
    /// <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
    /// </dd>
    /// <dt>
    /// SubnetIpLimitExceeded
    /// </dt>
    /// <dd>
    /// <p>Subnet IP limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// ENILimitExceeded
    /// </dt>
    /// <dd>
    /// <p>ENI limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsUserCredentials
    /// </dt>
    /// <dd>
    /// <p>Unable to use the Role provided.</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for RobotApplication does not match value during version creation.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for SimulationApplication does not match value during version creation.</p>
    /// </dd>
    /// </dl>
    pub failure_code: ::std::option::Option<crate::types::DeploymentJobErrorCode>,
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl SyncDeploymentJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the synchronization request.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn fleet(&self) -> ::std::option::Option<&str> {
        self.fleet.as_deref()
    }
    /// <p>The status of the synchronization job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::DeploymentStatus> {
        self.status.as_ref()
    }
    /// <p>Information about the deployment configuration.</p>
    pub fn deployment_config(&self) -> ::std::option::Option<&crate::types::DeploymentConfig> {
        self.deployment_config.as_ref()
    }
    /// <p>Information about the deployment application configurations.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.deployment_application_configs.is_none()`.
    pub fn deployment_application_configs(&self) -> &[crate::types::DeploymentApplicationConfig] {
        self.deployment_application_configs.as_deref().unwrap_or_default()
    }
    /// <p>The failure reason if the job fails.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The failure code if the job fails:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationCrash
    /// </dt>
    /// <dd>
    /// <p>Robot application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationCrash
    /// </dt>
    /// <dd>
    /// <p> Simulation application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsS3Output
    /// </dt>
    /// <dd>
    /// <p>Unable to publish outputs to customer-provided S3 bucket.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsCloudwatchLogs
    /// </dt>
    /// <dd>
    /// <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
    /// </dd>
    /// <dt>
    /// SubnetIpLimitExceeded
    /// </dt>
    /// <dd>
    /// <p>Subnet IP limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// ENILimitExceeded
    /// </dt>
    /// <dd>
    /// <p>ENI limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsUserCredentials
    /// </dt>
    /// <dd>
    /// <p>Unable to use the Role provided.</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for RobotApplication does not match value during version creation.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for SimulationApplication does not match value during version creation.</p>
    /// </dd>
    /// </dl>
    pub fn failure_code(&self) -> ::std::option::Option<&crate::types::DeploymentJobErrorCode> {
        self.failure_code.as_ref()
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for SyncDeploymentJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl SyncDeploymentJobOutput {
    /// Creates a new builder-style object to manufacture [`SyncDeploymentJobOutput`](crate::operation::sync_deployment_job::SyncDeploymentJobOutput).
    pub fn builder() -> crate::operation::sync_deployment_job::builders::SyncDeploymentJobOutputBuilder {
        crate::operation::sync_deployment_job::builders::SyncDeploymentJobOutputBuilder::default()
    }
}

/// A builder for [`SyncDeploymentJobOutput`](crate::operation::sync_deployment_job::SyncDeploymentJobOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SyncDeploymentJobOutputBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) fleet: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::DeploymentStatus>,
    pub(crate) deployment_config: ::std::option::Option<crate::types::DeploymentConfig>,
    pub(crate) deployment_application_configs: ::std::option::Option<::std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) failure_code: ::std::option::Option<crate::types::DeploymentJobErrorCode>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl SyncDeploymentJobOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the synchronization request.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the synchronization request.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the synchronization request.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn fleet(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.fleet = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn set_fleet(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.fleet = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn get_fleet(&self) -> &::std::option::Option<::std::string::String> {
        &self.fleet
    }
    /// <p>The status of the synchronization job.</p>
    pub fn status(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the synchronization job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DeploymentStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the synchronization job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DeploymentStatus> {
        &self.status
    }
    /// <p>Information about the deployment configuration.</p>
    pub fn deployment_config(mut self, input: crate::types::DeploymentConfig) -> Self {
        self.deployment_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about the deployment configuration.</p>
    pub fn set_deployment_config(mut self, input: ::std::option::Option<crate::types::DeploymentConfig>) -> Self {
        self.deployment_config = input;
        self
    }
    /// <p>Information about the deployment configuration.</p>
    pub fn get_deployment_config(&self) -> &::std::option::Option<crate::types::DeploymentConfig> {
        &self.deployment_config
    }
    /// Appends an item to `deployment_application_configs`.
    ///
    /// To override the contents of this collection use [`set_deployment_application_configs`](Self::set_deployment_application_configs).
    ///
    /// <p>Information about the deployment application configurations.</p>
    pub fn deployment_application_configs(mut self, input: crate::types::DeploymentApplicationConfig) -> Self {
        let mut v = self.deployment_application_configs.unwrap_or_default();
        v.push(input);
        self.deployment_application_configs = ::std::option::Option::Some(v);
        self
    }
    /// <p>Information about the deployment application configurations.</p>
    pub fn set_deployment_application_configs(
        mut self,
        input: ::std::option::Option<::std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    ) -> Self {
        self.deployment_application_configs = input;
        self
    }
    /// <p>Information about the deployment application configurations.</p>
    pub fn get_deployment_application_configs(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeploymentApplicationConfig>> {
        &self.deployment_application_configs
    }
    /// <p>The failure reason if the job fails.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The failure reason if the job fails.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The failure reason if the job fails.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>The failure code if the job fails:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationCrash
    /// </dt>
    /// <dd>
    /// <p>Robot application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationCrash
    /// </dt>
    /// <dd>
    /// <p> Simulation application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsS3Output
    /// </dt>
    /// <dd>
    /// <p>Unable to publish outputs to customer-provided S3 bucket.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsCloudwatchLogs
    /// </dt>
    /// <dd>
    /// <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
    /// </dd>
    /// <dt>
    /// SubnetIpLimitExceeded
    /// </dt>
    /// <dd>
    /// <p>Subnet IP limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// ENILimitExceeded
    /// </dt>
    /// <dd>
    /// <p>ENI limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsUserCredentials
    /// </dt>
    /// <dd>
    /// <p>Unable to use the Role provided.</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for RobotApplication does not match value during version creation.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for SimulationApplication does not match value during version creation.</p>
    /// </dd>
    /// </dl>
    pub fn failure_code(mut self, input: crate::types::DeploymentJobErrorCode) -> Self {
        self.failure_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failure code if the job fails:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationCrash
    /// </dt>
    /// <dd>
    /// <p>Robot application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationCrash
    /// </dt>
    /// <dd>
    /// <p> Simulation application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsS3Output
    /// </dt>
    /// <dd>
    /// <p>Unable to publish outputs to customer-provided S3 bucket.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsCloudwatchLogs
    /// </dt>
    /// <dd>
    /// <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
    /// </dd>
    /// <dt>
    /// SubnetIpLimitExceeded
    /// </dt>
    /// <dd>
    /// <p>Subnet IP limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// ENILimitExceeded
    /// </dt>
    /// <dd>
    /// <p>ENI limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsUserCredentials
    /// </dt>
    /// <dd>
    /// <p>Unable to use the Role provided.</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for RobotApplication does not match value during version creation.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for SimulationApplication does not match value during version creation.</p>
    /// </dd>
    /// </dl>
    pub fn set_failure_code(mut self, input: ::std::option::Option<crate::types::DeploymentJobErrorCode>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The failure code if the job fails:</p>
    /// <dl>
    /// <dt>
    /// InternalServiceError
    /// </dt>
    /// <dd>
    /// <p>Internal service error.</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationCrash
    /// </dt>
    /// <dd>
    /// <p>Robot application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationCrash
    /// </dt>
    /// <dd>
    /// <p> Simulation application exited abnormally.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation application bundle could not be downloaded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsS3Output
    /// </dt>
    /// <dd>
    /// <p>Unable to publish outputs to customer-provided S3 bucket.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsCloudwatchLogs
    /// </dt>
    /// <dd>
    /// <p>Unable to publish logs to customer-provided CloudWatch Logs resource.</p>
    /// </dd>
    /// <dt>
    /// SubnetIpLimitExceeded
    /// </dt>
    /// <dd>
    /// <p>Subnet IP limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// ENILimitExceeded
    /// </dt>
    /// <dd>
    /// <p>ENI limit exceeded.</p>
    /// </dd>
    /// <dt>
    /// BadPermissionsUserCredentials
    /// </dt>
    /// <dd>
    /// <p>Unable to use the Role provided.</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleRobotApplication
    /// </dt>
    /// <dd>
    /// <p>Robot bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// InvalidBundleSimulationApplication
    /// </dt>
    /// <dd>
    /// <p>Simulation bundle cannot be extracted (invalid format, bundling error, or other issue).</p>
    /// </dd>
    /// <dt>
    /// RobotApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for RobotApplication does not match value during version creation.</p>
    /// </dd>
    /// <dt>
    /// SimulationApplicationVersionMismatchedEtag
    /// </dt>
    /// <dd>
    /// <p>Etag for SimulationApplication does not match value during version creation.</p>
    /// </dd>
    /// </dl>
    pub fn get_failure_code(&self) -> &::std::option::Option<crate::types::DeploymentJobErrorCode> {
        &self.failure_code
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`SyncDeploymentJobOutput`](crate::operation::sync_deployment_job::SyncDeploymentJobOutput).
    pub fn build(self) -> crate::operation::sync_deployment_job::SyncDeploymentJobOutput {
        crate::operation::sync_deployment_job::SyncDeploymentJobOutput {
            arn: self.arn,
            fleet: self.fleet,
            status: self.status,
            deployment_config: self.deployment_config,
            deployment_application_configs: self.deployment_application_configs,
            failure_reason: self.failure_reason,
            failure_code: self.failure_code,
            created_at: self.created_at,
            _request_id: self._request_id,
        }
    }
}
