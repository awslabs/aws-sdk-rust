// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DescribeWorldInput {
    /// <p>The Amazon Resource Name (arn) of the world you want to describe.</p>
    #[doc(hidden)]
    pub world: std::option::Option<std::string::String>,
}
impl DescribeWorldInput {
    /// <p>The Amazon Resource Name (arn) of the world you want to describe.</p>
    pub fn world(&self) -> std::option::Option<&str> {
        self.world.as_deref()
    }
}
impl DescribeWorldInput {
    /// Creates a new builder-style object to manufacture [`DescribeWorldInput`](crate::operation::describe_world::DescribeWorldInput).
    pub fn builder() -> crate::operation::describe_world::builders::DescribeWorldInputBuilder {
        crate::operation::describe_world::builders::DescribeWorldInputBuilder::default()
    }
}

/// A builder for [`DescribeWorldInput`](crate::operation::describe_world::DescribeWorldInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DescribeWorldInputBuilder {
    pub(crate) world: std::option::Option<std::string::String>,
}
impl DescribeWorldInputBuilder {
    /// <p>The Amazon Resource Name (arn) of the world you want to describe.</p>
    pub fn world(mut self, input: impl Into<std::string::String>) -> Self {
        self.world = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (arn) of the world you want to describe.</p>
    pub fn set_world(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.world = input;
        self
    }
    /// Consumes the builder and constructs a [`DescribeWorldInput`](crate::operation::describe_world::DescribeWorldInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::describe_world::DescribeWorldInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(crate::operation::describe_world::DescribeWorldInput { world: self.world })
    }
}
