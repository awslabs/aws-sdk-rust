// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct ListWorldExportJobsOutput {
    /// <p>Summary information for world export jobs.</p>
    #[doc(hidden)]
    pub world_export_job_summaries:
        std::option::Option<std::vec::Vec<crate::types::WorldExportJobSummary>>,
    /// <p>If the previous paginated request did not return all of the remaining results, the response object's <code>nextToken</code> parameter value is set to a token. To retrieve the next set of results, call <code>ListWorldExportJobsRequest</code> again and assign that token to the request object's <code>nextToken</code> parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. </p>
    #[doc(hidden)]
    pub next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListWorldExportJobsOutput {
    /// <p>Summary information for world export jobs.</p>
    pub fn world_export_job_summaries(
        &self,
    ) -> std::option::Option<&[crate::types::WorldExportJobSummary]> {
        self.world_export_job_summaries.as_deref()
    }
    /// <p>If the previous paginated request did not return all of the remaining results, the response object's <code>nextToken</code> parameter value is set to a token. To retrieve the next set of results, call <code>ListWorldExportJobsRequest</code> again and assign that token to the request object's <code>nextToken</code> parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. </p>
    pub fn next_token(&self) -> std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl aws_http::request_id::RequestId for ListWorldExportJobsOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ListWorldExportJobsOutput {
    /// Creates a new builder-style object to manufacture [`ListWorldExportJobsOutput`](crate::operation::list_world_export_jobs::ListWorldExportJobsOutput).
    pub fn builder(
    ) -> crate::operation::list_world_export_jobs::builders::ListWorldExportJobsOutputBuilder {
        crate::operation::list_world_export_jobs::builders::ListWorldExportJobsOutputBuilder::default()
    }
}

/// A builder for [`ListWorldExportJobsOutput`](crate::operation::list_world_export_jobs::ListWorldExportJobsOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct ListWorldExportJobsOutputBuilder {
    pub(crate) world_export_job_summaries:
        std::option::Option<std::vec::Vec<crate::types::WorldExportJobSummary>>,
    pub(crate) next_token: std::option::Option<std::string::String>,
    _request_id: Option<String>,
}
impl ListWorldExportJobsOutputBuilder {
    /// Appends an item to `world_export_job_summaries`.
    ///
    /// To override the contents of this collection use [`set_world_export_job_summaries`](Self::set_world_export_job_summaries).
    ///
    /// <p>Summary information for world export jobs.</p>
    pub fn world_export_job_summaries(
        mut self,
        input: crate::types::WorldExportJobSummary,
    ) -> Self {
        let mut v = self.world_export_job_summaries.unwrap_or_default();
        v.push(input);
        self.world_export_job_summaries = Some(v);
        self
    }
    /// <p>Summary information for world export jobs.</p>
    pub fn set_world_export_job_summaries(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WorldExportJobSummary>>,
    ) -> Self {
        self.world_export_job_summaries = input;
        self
    }
    /// <p>If the previous paginated request did not return all of the remaining results, the response object's <code>nextToken</code> parameter value is set to a token. To retrieve the next set of results, call <code>ListWorldExportJobsRequest</code> again and assign that token to the request object's <code>nextToken</code> parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. </p>
    pub fn next_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.next_token = Some(input.into());
        self
    }
    /// <p>If the previous paginated request did not return all of the remaining results, the response object's <code>nextToken</code> parameter value is set to a token. To retrieve the next set of results, call <code>ListWorldExportJobsRequest</code> again and assign that token to the request object's <code>nextToken</code> parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null. </p>
    pub fn set_next_token(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ListWorldExportJobsOutput`](crate::operation::list_world_export_jobs::ListWorldExportJobsOutput).
    pub fn build(self) -> crate::operation::list_world_export_jobs::ListWorldExportJobsOutput {
        crate::operation::list_world_export_jobs::ListWorldExportJobsOutput {
            world_export_job_summaries: self.world_export_job_summaries,
            next_token: self.next_token,
            _request_id: self._request_id,
        }
    }
}
