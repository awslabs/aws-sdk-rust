// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[deprecated(
    note = "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
)]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDeploymentJobInput {
    /// <p>The requested deployment configuration.</p>
    #[doc(hidden)]
    pub deployment_config: std::option::Option<crate::types::DeploymentConfig>,
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    #[doc(hidden)]
    pub client_request_token: std::option::Option<std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the fleet to deploy.</p>
    #[doc(hidden)]
    pub fleet: std::option::Option<std::string::String>,
    /// <p>The deployment application configuration.</p>
    #[doc(hidden)]
    pub deployment_application_configs:
        std::option::Option<std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    /// <p>A map that contains tag keys and tag values that are attached to the deployment job.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateDeploymentJobInput {
    /// <p>The requested deployment configuration.</p>
    pub fn deployment_config(&self) -> std::option::Option<&crate::types::DeploymentConfig> {
        self.deployment_config.as_ref()
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(&self) -> std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet to deploy.</p>
    pub fn fleet(&self) -> std::option::Option<&str> {
        self.fleet.as_deref()
    }
    /// <p>The deployment application configuration.</p>
    pub fn deployment_application_configs(
        &self,
    ) -> std::option::Option<&[crate::types::DeploymentApplicationConfig]> {
        self.deployment_application_configs.as_deref()
    }
    /// <p>A map that contains tag keys and tag values that are attached to the deployment job.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl CreateDeploymentJobInput {
    /// Creates a new builder-style object to manufacture [`CreateDeploymentJobInput`](crate::operation::create_deployment_job::CreateDeploymentJobInput).
    pub fn builder(
    ) -> crate::operation::create_deployment_job::builders::CreateDeploymentJobInputBuilder {
        crate::operation::create_deployment_job::builders::CreateDeploymentJobInputBuilder::default(
        )
    }
}

/// A builder for [`CreateDeploymentJobInput`](crate::operation::create_deployment_job::CreateDeploymentJobInput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDeploymentJobInputBuilder {
    pub(crate) deployment_config: std::option::Option<crate::types::DeploymentConfig>,
    pub(crate) client_request_token: std::option::Option<std::string::String>,
    pub(crate) fleet: std::option::Option<std::string::String>,
    pub(crate) deployment_application_configs:
        std::option::Option<std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl CreateDeploymentJobInputBuilder {
    /// <p>The requested deployment configuration.</p>
    pub fn deployment_config(mut self, input: crate::types::DeploymentConfig) -> Self {
        self.deployment_config = Some(input);
        self
    }
    /// <p>The requested deployment configuration.</p>
    pub fn set_deployment_config(
        mut self,
        input: std::option::Option<crate::types::DeploymentConfig>,
    ) -> Self {
        self.deployment_config = input;
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.client_request_token = Some(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet to deploy.</p>
    pub fn fleet(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet to deploy.</p>
    pub fn set_fleet(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet = input;
        self
    }
    /// Appends an item to `deployment_application_configs`.
    ///
    /// To override the contents of this collection use [`set_deployment_application_configs`](Self::set_deployment_application_configs).
    ///
    /// <p>The deployment application configuration.</p>
    pub fn deployment_application_configs(
        mut self,
        input: crate::types::DeploymentApplicationConfig,
    ) -> Self {
        let mut v = self.deployment_application_configs.unwrap_or_default();
        v.push(input);
        self.deployment_application_configs = Some(v);
        self
    }
    /// <p>The deployment application configuration.</p>
    pub fn set_deployment_application_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    ) -> Self {
        self.deployment_application_configs = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map that contains tag keys and tag values that are attached to the deployment job.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to the deployment job.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`CreateDeploymentJobInput`](crate::operation::create_deployment_job::CreateDeploymentJobInput).
    pub fn build(
        self,
    ) -> Result<
        crate::operation::create_deployment_job::CreateDeploymentJobInput,
        aws_smithy_http::operation::error::BuildError,
    > {
        Ok(
            crate::operation::create_deployment_job::CreateDeploymentJobInput {
                deployment_config: self.deployment_config,
                client_request_token: self.client_request_token,
                fleet: self.fleet,
                deployment_application_configs: self.deployment_application_configs,
                tags: self.tags,
            },
        )
    }
}
