// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_deployment_job::_create_deployment_job_output::CreateDeploymentJobOutputBuilder;

pub use crate::operation::create_deployment_job::_create_deployment_job_input::CreateDeploymentJobInputBuilder;

/// Fluent builder constructing a request to `CreateDeploymentJob`.
///
/// <p>Deploys a specific version of a robot application to robots in a fleet.</p> <important>
/// <p>This API is no longer supported and will throw an error if used.</p>
/// </important>
/// <p>The robot application must have a numbered <code>applicationVersion</code> for consistency reasons. To create a new version, use <code>CreateRobotApplicationVersion</code> or see <a href="https://docs.aws.amazon.com/robomaker/latest/dg/create-robot-application-version.html">Creating a Robot Application Version</a>. </p> <note>
/// <p>After 90 days, deployment jobs expire and will be deleted. They will no longer be accessible. </p>
/// </note>
#[deprecated(
    note = "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
)]
#[derive(std::clone::Clone, std::fmt::Debug)]
pub struct CreateDeploymentJobFluentBuilder {
    handle: std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_deployment_job::builders::CreateDeploymentJobInputBuilder,
}
impl CreateDeploymentJobFluentBuilder {
    /// Creates a new `CreateDeploymentJob`.
    pub(crate) fn new(handle: std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: Default::default(),
        }
    }

    /// Consume this builder, creating a customizable operation that can be modified before being
    /// sent. The operation's inner [http::Request] can be modified as well.
    pub async fn customize(
        self,
    ) -> std::result::Result<
        crate::client::customize::CustomizableOperation<
            crate::operation::create_deployment_job::CreateDeploymentJob,
            aws_http::retry::AwsResponseRetryClassifier,
        >,
        aws_smithy_http::result::SdkError<
            crate::operation::create_deployment_job::CreateDeploymentJobError,
        >,
    > {
        let handle = self.handle.clone();
        let operation = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        Ok(crate::client::customize::CustomizableOperation { handle, operation })
    }

    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> std::result::Result<
        crate::operation::create_deployment_job::CreateDeploymentJobOutput,
        aws_smithy_http::result::SdkError<
            crate::operation::create_deployment_job::CreateDeploymentJobError,
        >,
    > {
        let op = self
            .inner
            .build()
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?
            .make_operation(&self.handle.conf)
            .await
            .map_err(aws_smithy_http::result::SdkError::construction_failure)?;
        self.handle.client.call(op).await
    }
    /// <p>The requested deployment configuration.</p>
    pub fn deployment_config(mut self, input: crate::types::DeploymentConfig) -> Self {
        self.inner = self.inner.deployment_config(input);
        self
    }
    /// <p>The requested deployment configuration.</p>
    pub fn set_deployment_config(
        mut self,
        input: std::option::Option<crate::types::DeploymentConfig>,
    ) -> Self {
        self.inner = self.inner.set_deployment_config(input);
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn client_request_token(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>Unique, case-sensitive identifier that you provide to ensure the idempotency of the request.</p>
    pub fn set_client_request_token(
        mut self,
        input: std::option::Option<std::string::String>,
    ) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet to deploy.</p>
    pub fn fleet(mut self, input: impl Into<std::string::String>) -> Self {
        self.inner = self.inner.fleet(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet to deploy.</p>
    pub fn set_fleet(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.inner = self.inner.set_fleet(input);
        self
    }
    /// Appends an item to `deploymentApplicationConfigs`.
    ///
    /// To override the contents of this collection use [`set_deployment_application_configs`](Self::set_deployment_application_configs).
    ///
    /// <p>The deployment application configuration.</p>
    pub fn deployment_application_configs(
        mut self,
        input: crate::types::DeploymentApplicationConfig,
    ) -> Self {
        self.inner = self.inner.deployment_application_configs(input);
        self
    }
    /// <p>The deployment application configuration.</p>
    pub fn set_deployment_application_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    ) -> Self {
        self.inner = self.inner.set_deployment_application_configs(input);
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map that contains tag keys and tag values that are attached to the deployment job.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        self.inner = self.inner.tags(k.into(), v.into());
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to the deployment job.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.inner = self.inner.set_tags(input);
        self
    }
}
