// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[deprecated(
    note = "AWS RoboMaker is unable to process this request as the support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
)]
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct CreateDeploymentJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the deployment job.</p>
    #[doc(hidden)]
    pub arn: std::option::Option<std::string::String>,
    /// <p>The target fleet for the deployment job.</p>
    #[doc(hidden)]
    pub fleet: std::option::Option<std::string::String>,
    /// <p>The status of the deployment job.</p>
    #[doc(hidden)]
    pub status: std::option::Option<crate::types::DeploymentStatus>,
    /// <p>The deployment application configuration.</p>
    #[doc(hidden)]
    pub deployment_application_configs:
        std::option::Option<std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    /// <p>The failure reason of the deployment job if it failed.</p>
    #[doc(hidden)]
    pub failure_reason: std::option::Option<std::string::String>,
    /// <p>The failure code of the simulation job if it failed:</p>
    /// <dl>
    /// <dt>
    /// BadPermissionError
    /// </dt>
    /// <dd>
    /// <p>AWS Greengrass requires a service-level role permission to access other services. The role must include the <a href="https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy$jsonEditor"> <code>AWSGreengrassResourceAccessRolePolicy</code> managed policy</a>. </p>
    /// </dd>
    /// <dt>
    /// ExtractingBundleFailure
    /// </dt>
    /// <dd>
    /// <p>The robot application could not be extracted from the bundle.</p>
    /// </dd>
    /// <dt>
    /// FailureThresholdBreached
    /// </dt>
    /// <dd>
    /// <p>The percentage of robots that could not be updated exceeded the percentage set for the deployment.</p>
    /// </dd>
    /// <dt>
    /// GreengrassDeploymentFailed
    /// </dt>
    /// <dd>
    /// <p>The robot application could not be deployed to the robot.</p>
    /// </dd>
    /// <dt>
    /// GreengrassGroupVersionDoesNotExist
    /// </dt>
    /// <dd>
    /// <p>The AWS Greengrass group or version associated with a robot is missing.</p>
    /// </dd>
    /// <dt>
    /// InternalServerError
    /// </dt>
    /// <dd>
    /// <p>An internal error has occurred. Retry your request, but if the problem persists, contact us with details.</p>
    /// </dd>
    /// <dt>
    /// MissingRobotApplicationArchitecture
    /// </dt>
    /// <dd>
    /// <p>The robot application does not have a source that matches the architecture of the robot.</p>
    /// </dd>
    /// <dt>
    /// MissingRobotDeploymentResource
    /// </dt>
    /// <dd>
    /// <p>One or more of the resources specified for the robot application are missing. For example, does the robot application have the correct launch package and launch file?</p>
    /// </dd>
    /// <dt>
    /// PostLaunchFileFailure
    /// </dt>
    /// <dd>
    /// <p>The post-launch script failed.</p>
    /// </dd>
    /// <dt>
    /// PreLaunchFileFailure
    /// </dt>
    /// <dd>
    /// <p>The pre-launch script failed.</p>
    /// </dd>
    /// <dt>
    /// ResourceNotFound
    /// </dt>
    /// <dd>
    /// <p>One or more deployment resources are missing. For example, do robot application source bundles still exist? </p>
    /// </dd>
    /// <dt>
    /// RobotDeploymentNoResponse
    /// </dt>
    /// <dd>
    /// <p>There is no response from the robot. It might not be powered on or connected to the internet.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub failure_code: std::option::Option<crate::types::DeploymentJobErrorCode>,
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    #[doc(hidden)]
    pub created_at: std::option::Option<aws_smithy_types::DateTime>,
    /// <p>The deployment configuration.</p>
    #[doc(hidden)]
    pub deployment_config: std::option::Option<crate::types::DeploymentConfig>,
    /// <p>The list of all tags added to the deployment job.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateDeploymentJobOutput {
    /// <p>The Amazon Resource Name (ARN) of the deployment job.</p>
    pub fn arn(&self) -> std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The target fleet for the deployment job.</p>
    pub fn fleet(&self) -> std::option::Option<&str> {
        self.fleet.as_deref()
    }
    /// <p>The status of the deployment job.</p>
    pub fn status(&self) -> std::option::Option<&crate::types::DeploymentStatus> {
        self.status.as_ref()
    }
    /// <p>The deployment application configuration.</p>
    pub fn deployment_application_configs(
        &self,
    ) -> std::option::Option<&[crate::types::DeploymentApplicationConfig]> {
        self.deployment_application_configs.as_deref()
    }
    /// <p>The failure reason of the deployment job if it failed.</p>
    pub fn failure_reason(&self) -> std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>The failure code of the simulation job if it failed:</p>
    /// <dl>
    /// <dt>
    /// BadPermissionError
    /// </dt>
    /// <dd>
    /// <p>AWS Greengrass requires a service-level role permission to access other services. The role must include the <a href="https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy$jsonEditor"> <code>AWSGreengrassResourceAccessRolePolicy</code> managed policy</a>. </p>
    /// </dd>
    /// <dt>
    /// ExtractingBundleFailure
    /// </dt>
    /// <dd>
    /// <p>The robot application could not be extracted from the bundle.</p>
    /// </dd>
    /// <dt>
    /// FailureThresholdBreached
    /// </dt>
    /// <dd>
    /// <p>The percentage of robots that could not be updated exceeded the percentage set for the deployment.</p>
    /// </dd>
    /// <dt>
    /// GreengrassDeploymentFailed
    /// </dt>
    /// <dd>
    /// <p>The robot application could not be deployed to the robot.</p>
    /// </dd>
    /// <dt>
    /// GreengrassGroupVersionDoesNotExist
    /// </dt>
    /// <dd>
    /// <p>The AWS Greengrass group or version associated with a robot is missing.</p>
    /// </dd>
    /// <dt>
    /// InternalServerError
    /// </dt>
    /// <dd>
    /// <p>An internal error has occurred. Retry your request, but if the problem persists, contact us with details.</p>
    /// </dd>
    /// <dt>
    /// MissingRobotApplicationArchitecture
    /// </dt>
    /// <dd>
    /// <p>The robot application does not have a source that matches the architecture of the robot.</p>
    /// </dd>
    /// <dt>
    /// MissingRobotDeploymentResource
    /// </dt>
    /// <dd>
    /// <p>One or more of the resources specified for the robot application are missing. For example, does the robot application have the correct launch package and launch file?</p>
    /// </dd>
    /// <dt>
    /// PostLaunchFileFailure
    /// </dt>
    /// <dd>
    /// <p>The post-launch script failed.</p>
    /// </dd>
    /// <dt>
    /// PreLaunchFileFailure
    /// </dt>
    /// <dd>
    /// <p>The pre-launch script failed.</p>
    /// </dd>
    /// <dt>
    /// ResourceNotFound
    /// </dt>
    /// <dd>
    /// <p>One or more deployment resources are missing. For example, do robot application source bundles still exist? </p>
    /// </dd>
    /// <dt>
    /// RobotDeploymentNoResponse
    /// </dt>
    /// <dd>
    /// <p>There is no response from the robot. It might not be powered on or connected to the internet.</p>
    /// </dd>
    /// </dl>
    pub fn failure_code(&self) -> std::option::Option<&crate::types::DeploymentJobErrorCode> {
        self.failure_code.as_ref()
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn created_at(&self) -> std::option::Option<&aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The deployment configuration.</p>
    pub fn deployment_config(&self) -> std::option::Option<&crate::types::DeploymentConfig> {
        self.deployment_config.as_ref()
    }
    /// <p>The list of all tags added to the deployment job.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl aws_http::request_id::RequestId for CreateDeploymentJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl CreateDeploymentJobOutput {
    /// Creates a new builder-style object to manufacture [`CreateDeploymentJobOutput`](crate::operation::create_deployment_job::CreateDeploymentJobOutput).
    pub fn builder(
    ) -> crate::operation::create_deployment_job::builders::CreateDeploymentJobOutputBuilder {
        crate::operation::create_deployment_job::builders::CreateDeploymentJobOutputBuilder::default(
        )
    }
}

/// A builder for [`CreateDeploymentJobOutput`](crate::operation::create_deployment_job::CreateDeploymentJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct CreateDeploymentJobOutputBuilder {
    pub(crate) arn: std::option::Option<std::string::String>,
    pub(crate) fleet: std::option::Option<std::string::String>,
    pub(crate) status: std::option::Option<crate::types::DeploymentStatus>,
    pub(crate) deployment_application_configs:
        std::option::Option<std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    pub(crate) failure_reason: std::option::Option<std::string::String>,
    pub(crate) failure_code: std::option::Option<crate::types::DeploymentJobErrorCode>,
    pub(crate) created_at: std::option::Option<aws_smithy_types::DateTime>,
    pub(crate) deployment_config: std::option::Option<crate::types::DeploymentConfig>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
    _request_id: Option<String>,
}
impl CreateDeploymentJobOutputBuilder {
    /// <p>The Amazon Resource Name (ARN) of the deployment job.</p>
    pub fn arn(mut self, input: impl Into<std::string::String>) -> Self {
        self.arn = Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the deployment job.</p>
    pub fn set_arn(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The target fleet for the deployment job.</p>
    pub fn fleet(mut self, input: impl Into<std::string::String>) -> Self {
        self.fleet = Some(input.into());
        self
    }
    /// <p>The target fleet for the deployment job.</p>
    pub fn set_fleet(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.fleet = input;
        self
    }
    /// <p>The status of the deployment job.</p>
    pub fn status(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.status = Some(input);
        self
    }
    /// <p>The status of the deployment job.</p>
    pub fn set_status(
        mut self,
        input: std::option::Option<crate::types::DeploymentStatus>,
    ) -> Self {
        self.status = input;
        self
    }
    /// Appends an item to `deployment_application_configs`.
    ///
    /// To override the contents of this collection use [`set_deployment_application_configs`](Self::set_deployment_application_configs).
    ///
    /// <p>The deployment application configuration.</p>
    pub fn deployment_application_configs(
        mut self,
        input: crate::types::DeploymentApplicationConfig,
    ) -> Self {
        let mut v = self.deployment_application_configs.unwrap_or_default();
        v.push(input);
        self.deployment_application_configs = Some(v);
        self
    }
    /// <p>The deployment application configuration.</p>
    pub fn set_deployment_application_configs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DeploymentApplicationConfig>>,
    ) -> Self {
        self.deployment_application_configs = input;
        self
    }
    /// <p>The failure reason of the deployment job if it failed.</p>
    pub fn failure_reason(mut self, input: impl Into<std::string::String>) -> Self {
        self.failure_reason = Some(input.into());
        self
    }
    /// <p>The failure reason of the deployment job if it failed.</p>
    pub fn set_failure_reason(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The failure code of the simulation job if it failed:</p>
    /// <dl>
    /// <dt>
    /// BadPermissionError
    /// </dt>
    /// <dd>
    /// <p>AWS Greengrass requires a service-level role permission to access other services. The role must include the <a href="https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy$jsonEditor"> <code>AWSGreengrassResourceAccessRolePolicy</code> managed policy</a>. </p>
    /// </dd>
    /// <dt>
    /// ExtractingBundleFailure
    /// </dt>
    /// <dd>
    /// <p>The robot application could not be extracted from the bundle.</p>
    /// </dd>
    /// <dt>
    /// FailureThresholdBreached
    /// </dt>
    /// <dd>
    /// <p>The percentage of robots that could not be updated exceeded the percentage set for the deployment.</p>
    /// </dd>
    /// <dt>
    /// GreengrassDeploymentFailed
    /// </dt>
    /// <dd>
    /// <p>The robot application could not be deployed to the robot.</p>
    /// </dd>
    /// <dt>
    /// GreengrassGroupVersionDoesNotExist
    /// </dt>
    /// <dd>
    /// <p>The AWS Greengrass group or version associated with a robot is missing.</p>
    /// </dd>
    /// <dt>
    /// InternalServerError
    /// </dt>
    /// <dd>
    /// <p>An internal error has occurred. Retry your request, but if the problem persists, contact us with details.</p>
    /// </dd>
    /// <dt>
    /// MissingRobotApplicationArchitecture
    /// </dt>
    /// <dd>
    /// <p>The robot application does not have a source that matches the architecture of the robot.</p>
    /// </dd>
    /// <dt>
    /// MissingRobotDeploymentResource
    /// </dt>
    /// <dd>
    /// <p>One or more of the resources specified for the robot application are missing. For example, does the robot application have the correct launch package and launch file?</p>
    /// </dd>
    /// <dt>
    /// PostLaunchFileFailure
    /// </dt>
    /// <dd>
    /// <p>The post-launch script failed.</p>
    /// </dd>
    /// <dt>
    /// PreLaunchFileFailure
    /// </dt>
    /// <dd>
    /// <p>The pre-launch script failed.</p>
    /// </dd>
    /// <dt>
    /// ResourceNotFound
    /// </dt>
    /// <dd>
    /// <p>One or more deployment resources are missing. For example, do robot application source bundles still exist? </p>
    /// </dd>
    /// <dt>
    /// RobotDeploymentNoResponse
    /// </dt>
    /// <dd>
    /// <p>There is no response from the robot. It might not be powered on or connected to the internet.</p>
    /// </dd>
    /// </dl>
    pub fn failure_code(mut self, input: crate::types::DeploymentJobErrorCode) -> Self {
        self.failure_code = Some(input);
        self
    }
    /// <p>The failure code of the simulation job if it failed:</p>
    /// <dl>
    /// <dt>
    /// BadPermissionError
    /// </dt>
    /// <dd>
    /// <p>AWS Greengrass requires a service-level role permission to access other services. The role must include the <a href="https://console.aws.amazon.com/iam/home?#/policies/arn:aws:iam::aws:policy/service-role/AWSGreengrassResourceAccessRolePolicy$jsonEditor"> <code>AWSGreengrassResourceAccessRolePolicy</code> managed policy</a>. </p>
    /// </dd>
    /// <dt>
    /// ExtractingBundleFailure
    /// </dt>
    /// <dd>
    /// <p>The robot application could not be extracted from the bundle.</p>
    /// </dd>
    /// <dt>
    /// FailureThresholdBreached
    /// </dt>
    /// <dd>
    /// <p>The percentage of robots that could not be updated exceeded the percentage set for the deployment.</p>
    /// </dd>
    /// <dt>
    /// GreengrassDeploymentFailed
    /// </dt>
    /// <dd>
    /// <p>The robot application could not be deployed to the robot.</p>
    /// </dd>
    /// <dt>
    /// GreengrassGroupVersionDoesNotExist
    /// </dt>
    /// <dd>
    /// <p>The AWS Greengrass group or version associated with a robot is missing.</p>
    /// </dd>
    /// <dt>
    /// InternalServerError
    /// </dt>
    /// <dd>
    /// <p>An internal error has occurred. Retry your request, but if the problem persists, contact us with details.</p>
    /// </dd>
    /// <dt>
    /// MissingRobotApplicationArchitecture
    /// </dt>
    /// <dd>
    /// <p>The robot application does not have a source that matches the architecture of the robot.</p>
    /// </dd>
    /// <dt>
    /// MissingRobotDeploymentResource
    /// </dt>
    /// <dd>
    /// <p>One or more of the resources specified for the robot application are missing. For example, does the robot application have the correct launch package and launch file?</p>
    /// </dd>
    /// <dt>
    /// PostLaunchFileFailure
    /// </dt>
    /// <dd>
    /// <p>The post-launch script failed.</p>
    /// </dd>
    /// <dt>
    /// PreLaunchFileFailure
    /// </dt>
    /// <dd>
    /// <p>The pre-launch script failed.</p>
    /// </dd>
    /// <dt>
    /// ResourceNotFound
    /// </dt>
    /// <dd>
    /// <p>One or more deployment resources are missing. For example, do robot application source bundles still exist? </p>
    /// </dd>
    /// <dt>
    /// RobotDeploymentNoResponse
    /// </dt>
    /// <dd>
    /// <p>There is no response from the robot. It might not be powered on or connected to the internet.</p>
    /// </dd>
    /// </dl>
    pub fn set_failure_code(
        mut self,
        input: std::option::Option<crate::types::DeploymentJobErrorCode>,
    ) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn created_at(mut self, input: aws_smithy_types::DateTime) -> Self {
        self.created_at = Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn set_created_at(
        mut self,
        input: std::option::Option<aws_smithy_types::DateTime>,
    ) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The deployment configuration.</p>
    pub fn deployment_config(mut self, input: crate::types::DeploymentConfig) -> Self {
        self.deployment_config = Some(input);
        self
    }
    /// <p>The deployment configuration.</p>
    pub fn set_deployment_config(
        mut self,
        input: std::option::Option<crate::types::DeploymentConfig>,
    ) -> Self {
        self.deployment_config = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of all tags added to the deployment job.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>The list of all tags added to the deployment job.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`CreateDeploymentJobOutput`](crate::operation::create_deployment_job::CreateDeploymentJobOutput).
    pub fn build(self) -> crate::operation::create_deployment_job::CreateDeploymentJobOutput {
        crate::operation::create_deployment_job::CreateDeploymentJobOutput {
            arn: self.arn,
            fleet: self.fleet,
            status: self.status,
            deployment_application_configs: self.deployment_application_configs,
            failure_reason: self.failure_reason,
            failure_code: self.failure_code,
            created_at: self.created_at,
            deployment_config: self.deployment_config,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
