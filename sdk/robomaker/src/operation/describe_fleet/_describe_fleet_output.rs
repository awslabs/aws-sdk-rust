// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[deprecated(
    note = "Support for the AWS RoboMaker application deployment feature has ended. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/fleets.html."
)]
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DescribeFleetOutput {
    /// <p>The name of the fleet.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>A list of robots.</p>
    pub robots: ::std::option::Option<::std::vec::Vec<crate::types::Robot>>,
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The status of the last deployment.</p>
    pub last_deployment_status: ::std::option::Option<crate::types::DeploymentStatus>,
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub last_deployment_job: ::std::option::Option<::std::string::String>,
    /// <p>The time of the last deployment.</p>
    pub last_deployment_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The list of all tags added to the specified fleet.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeFleetOutput {
    /// <p>The name of the fleet.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>A list of robots.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.robots.is_none()`.
    pub fn robots(&self) -> &[crate::types::Robot] {
        self.robots.as_deref().unwrap_or_default()
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn created_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.created_at.as_ref()
    }
    /// <p>The status of the last deployment.</p>
    pub fn last_deployment_status(&self) -> ::std::option::Option<&crate::types::DeploymentStatus> {
        self.last_deployment_status.as_ref()
    }
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub fn last_deployment_job(&self) -> ::std::option::Option<&str> {
        self.last_deployment_job.as_deref()
    }
    /// <p>The time of the last deployment.</p>
    pub fn last_deployment_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_deployment_time.as_ref()
    }
    /// <p>The list of all tags added to the specified fleet.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
}
impl ::aws_http::request_id::RequestId for DescribeFleetOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl DescribeFleetOutput {
    /// Creates a new builder-style object to manufacture [`DescribeFleetOutput`](crate::operation::describe_fleet::DescribeFleetOutput).
    pub fn builder() -> crate::operation::describe_fleet::builders::DescribeFleetOutputBuilder {
        crate::operation::describe_fleet::builders::DescribeFleetOutputBuilder::default()
    }
}

/// A builder for [`DescribeFleetOutput`](crate::operation::describe_fleet::DescribeFleetOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DescribeFleetOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) robots: ::std::option::Option<::std::vec::Vec<crate::types::Robot>>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_deployment_status: ::std::option::Option<crate::types::DeploymentStatus>,
    pub(crate) last_deployment_job: ::std::option::Option<::std::string::String>,
    pub(crate) last_deployment_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    _request_id: Option<String>,
}
impl DescribeFleetOutputBuilder {
    /// <p>The name of the fleet.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the fleet.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the fleet.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// Appends an item to `robots`.
    ///
    /// To override the contents of this collection use [`set_robots`](Self::set_robots).
    ///
    /// <p>A list of robots.</p>
    pub fn robots(mut self, input: crate::types::Robot) -> Self {
        let mut v = self.robots.unwrap_or_default();
        v.push(input);
        self.robots = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of robots.</p>
    pub fn set_robots(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Robot>>) -> Self {
        self.robots = input;
        self
    }
    /// <p>A list of robots.</p>
    pub fn get_robots(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Robot>> {
        &self.robots
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the fleet was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The status of the last deployment.</p>
    pub fn last_deployment_status(mut self, input: crate::types::DeploymentStatus) -> Self {
        self.last_deployment_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the last deployment.</p>
    pub fn set_last_deployment_status(mut self, input: ::std::option::Option<crate::types::DeploymentStatus>) -> Self {
        self.last_deployment_status = input;
        self
    }
    /// <p>The status of the last deployment.</p>
    pub fn get_last_deployment_status(&self) -> &::std::option::Option<crate::types::DeploymentStatus> {
        &self.last_deployment_status
    }
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub fn last_deployment_job(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.last_deployment_job = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub fn set_last_deployment_job(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.last_deployment_job = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the last deployment job.</p>
    pub fn get_last_deployment_job(&self) -> &::std::option::Option<::std::string::String> {
        &self.last_deployment_job
    }
    /// <p>The time of the last deployment.</p>
    pub fn last_deployment_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_deployment_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time of the last deployment.</p>
    pub fn set_last_deployment_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_deployment_time = input;
        self
    }
    /// <p>The time of the last deployment.</p>
    pub fn get_last_deployment_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_deployment_time
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The list of all tags added to the specified fleet.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The list of all tags added to the specified fleet.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The list of all tags added to the specified fleet.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`DescribeFleetOutput`](crate::operation::describe_fleet::DescribeFleetOutput).
    pub fn build(self) -> crate::operation::describe_fleet::DescribeFleetOutput {
        crate::operation::describe_fleet::DescribeFleetOutput {
            name: self.name,
            arn: self.arn,
            robots: self.robots,
            created_at: self.created_at,
            last_deployment_status: self.last_deployment_status,
            last_deployment_job: self.last_deployment_job,
            last_deployment_time: self.last_deployment_time,
            tags: self.tags,
            _request_id: self._request_id,
        }
    }
}
