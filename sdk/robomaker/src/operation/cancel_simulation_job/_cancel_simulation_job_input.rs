// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct CancelSimulationJobInput {
    /// <p>The simulation job ARN to cancel.</p>
    pub job: ::std::option::Option<::std::string::String>,
}
impl CancelSimulationJobInput {
    /// <p>The simulation job ARN to cancel.</p>
    pub fn job(&self) -> ::std::option::Option<&str> {
        self.job.as_deref()
    }
}
impl CancelSimulationJobInput {
    /// Creates a new builder-style object to manufacture [`CancelSimulationJobInput`](crate::operation::cancel_simulation_job::CancelSimulationJobInput).
    pub fn builder() -> crate::operation::cancel_simulation_job::builders::CancelSimulationJobInputBuilder {
        crate::operation::cancel_simulation_job::builders::CancelSimulationJobInputBuilder::default()
    }
}

/// A builder for [`CancelSimulationJobInput`](crate::operation::cancel_simulation_job::CancelSimulationJobInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct CancelSimulationJobInputBuilder {
    pub(crate) job: ::std::option::Option<::std::string::String>,
}
impl CancelSimulationJobInputBuilder {
    /// <p>The simulation job ARN to cancel.</p>
    /// This field is required.
    pub fn job(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.job = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The simulation job ARN to cancel.</p>
    pub fn set_job(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.job = input;
        self
    }
    /// <p>The simulation job ARN to cancel.</p>
    pub fn get_job(&self) -> &::std::option::Option<::std::string::String> {
        &self.job
    }
    /// Consumes the builder and constructs a [`CancelSimulationJobInput`](crate::operation::cancel_simulation_job::CancelSimulationJobInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::cancel_simulation_job::CancelSimulationJobInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::cancel_simulation_job::CancelSimulationJobInput { job: self.job })
    }
}
