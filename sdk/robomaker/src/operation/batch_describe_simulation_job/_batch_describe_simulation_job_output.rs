// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchDescribeSimulationJobOutput {
    /// <p>A list of simulation jobs.</p>
    #[doc(hidden)]
    pub jobs: std::option::Option<std::vec::Vec<crate::types::SimulationJob>>,
    /// <p>A list of unprocessed simulation job Amazon Resource Names (ARNs).</p>
    #[doc(hidden)]
    pub unprocessed_jobs: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl BatchDescribeSimulationJobOutput {
    /// <p>A list of simulation jobs.</p>
    pub fn jobs(&self) -> std::option::Option<&[crate::types::SimulationJob]> {
        self.jobs.as_deref()
    }
    /// <p>A list of unprocessed simulation job Amazon Resource Names (ARNs).</p>
    pub fn unprocessed_jobs(&self) -> std::option::Option<&[std::string::String]> {
        self.unprocessed_jobs.as_deref()
    }
}
impl aws_http::request_id::RequestId for BatchDescribeSimulationJobOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDescribeSimulationJobOutput {
    /// Creates a new builder-style object to manufacture [`BatchDescribeSimulationJobOutput`](crate::operation::batch_describe_simulation_job::BatchDescribeSimulationJobOutput).
    pub fn builder() -> crate::operation::batch_describe_simulation_job::builders::BatchDescribeSimulationJobOutputBuilder{
        crate::operation::batch_describe_simulation_job::builders::BatchDescribeSimulationJobOutputBuilder::default()
    }
}

/// A builder for [`BatchDescribeSimulationJobOutput`](crate::operation::batch_describe_simulation_job::BatchDescribeSimulationJobOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchDescribeSimulationJobOutputBuilder {
    pub(crate) jobs: std::option::Option<std::vec::Vec<crate::types::SimulationJob>>,
    pub(crate) unprocessed_jobs: std::option::Option<std::vec::Vec<std::string::String>>,
    _request_id: Option<String>,
}
impl BatchDescribeSimulationJobOutputBuilder {
    /// Appends an item to `jobs`.
    ///
    /// To override the contents of this collection use [`set_jobs`](Self::set_jobs).
    ///
    /// <p>A list of simulation jobs.</p>
    pub fn jobs(mut self, input: crate::types::SimulationJob) -> Self {
        let mut v = self.jobs.unwrap_or_default();
        v.push(input);
        self.jobs = Some(v);
        self
    }
    /// <p>A list of simulation jobs.</p>
    pub fn set_jobs(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SimulationJob>>,
    ) -> Self {
        self.jobs = input;
        self
    }
    /// Appends an item to `unprocessed_jobs`.
    ///
    /// To override the contents of this collection use [`set_unprocessed_jobs`](Self::set_unprocessed_jobs).
    ///
    /// <p>A list of unprocessed simulation job Amazon Resource Names (ARNs).</p>
    pub fn unprocessed_jobs(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.unprocessed_jobs.unwrap_or_default();
        v.push(input.into());
        self.unprocessed_jobs = Some(v);
        self
    }
    /// <p>A list of unprocessed simulation job Amazon Resource Names (ARNs).</p>
    pub fn set_unprocessed_jobs(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.unprocessed_jobs = input;
        self
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchDescribeSimulationJobOutput`](crate::operation::batch_describe_simulation_job::BatchDescribeSimulationJobOutput).
    pub fn build(
        self,
    ) -> crate::operation::batch_describe_simulation_job::BatchDescribeSimulationJobOutput {
        crate::operation::batch_describe_simulation_job::BatchDescribeSimulationJobOutput {
            jobs: self.jobs,
            unprocessed_jobs: self.unprocessed_jobs,
            _request_id: self._request_id,
        }
    }
}
