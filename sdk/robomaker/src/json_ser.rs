// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_batch_delete_worlds_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDeleteWorldsInput,
) {
    if let Some(var_1) = &input.worlds {
        let mut array_2 = object.key("worlds").start_array();
        for item_3 in var_1 {
            {
                array_2.value().string(item_3);
            }
        }
        array_2.finish();
    }
}

pub fn serialize_structure_crate_input_batch_describe_simulation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::BatchDescribeSimulationJobInput,
) {
    if let Some(var_4) = &input.jobs {
        let mut array_5 = object.key("jobs").start_array();
        for item_6 in var_4 {
            {
                array_5.value().string(item_6);
            }
        }
        array_5.finish();
    }
}

pub fn serialize_structure_crate_input_cancel_deployment_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelDeploymentJobInput,
) {
    if let Some(var_7) = &input.job {
        object.key("job").string(var_7);
    }
}

pub fn serialize_structure_crate_input_cancel_simulation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelSimulationJobInput,
) {
    if let Some(var_8) = &input.job {
        object.key("job").string(var_8);
    }
}

pub fn serialize_structure_crate_input_cancel_simulation_job_batch_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelSimulationJobBatchInput,
) {
    if let Some(var_9) = &input.batch {
        object.key("batch").string(var_9);
    }
}

pub fn serialize_structure_crate_input_cancel_world_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelWorldExportJobInput,
) {
    if let Some(var_10) = &input.job {
        object.key("job").string(var_10);
    }
}

pub fn serialize_structure_crate_input_cancel_world_generation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CancelWorldGenerationJobInput,
) {
    if let Some(var_11) = &input.job {
        object.key("job").string(var_11);
    }
}

pub fn serialize_structure_crate_input_create_deployment_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateDeploymentJobInput,
) {
    if let Some(var_12) = &input.client_request_token {
        object.key("clientRequestToken").string(var_12);
    }
    if let Some(var_13) = &input.deployment_application_configs {
        let mut array_14 = object.key("deploymentApplicationConfigs").start_array();
        for item_15 in var_13 {
            {
                let mut object_16 = array_14.value().start_object();
                crate::json_ser::serialize_structure_crate_model_deployment_application_config(
                    &mut object_16,
                    item_15,
                );
                object_16.finish();
            }
        }
        array_14.finish();
    }
    if let Some(var_17) = &input.deployment_config {
        let mut object_18 = object.key("deploymentConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_config(&mut object_18, var_17);
        object_18.finish();
    }
    if let Some(var_19) = &input.fleet {
        object.key("fleet").string(var_19);
    }
    if let Some(var_20) = &input.tags {
        let mut object_21 = object.key("tags").start_object();
        for (key_22, value_23) in var_20 {
            {
                object_21.key(key_22).string(value_23);
            }
        }
        object_21.finish();
    }
}

pub fn serialize_structure_crate_input_create_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFleetInput,
) {
    if let Some(var_24) = &input.name {
        object.key("name").string(var_24);
    }
    if let Some(var_25) = &input.tags {
        let mut object_26 = object.key("tags").start_object();
        for (key_27, value_28) in var_25 {
            {
                object_26.key(key_27).string(value_28);
            }
        }
        object_26.finish();
    }
}

pub fn serialize_structure_crate_input_create_robot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRobotInput,
) {
    if let Some(var_29) = &input.architecture {
        object.key("architecture").string(var_29.as_str());
    }
    if let Some(var_30) = &input.greengrass_group_id {
        object.key("greengrassGroupId").string(var_30);
    }
    if let Some(var_31) = &input.name {
        object.key("name").string(var_31);
    }
    if let Some(var_32) = &input.tags {
        let mut object_33 = object.key("tags").start_object();
        for (key_34, value_35) in var_32 {
            {
                object_33.key(key_34).string(value_35);
            }
        }
        object_33.finish();
    }
}

pub fn serialize_structure_crate_input_create_robot_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRobotApplicationInput,
) {
    if let Some(var_36) = &input.name {
        object.key("name").string(var_36);
    }
    if let Some(var_37) = &input.robot_software_suite {
        let mut object_38 = object.key("robotSoftwareSuite").start_object();
        crate::json_ser::serialize_structure_crate_model_robot_software_suite(
            &mut object_38,
            var_37,
        );
        object_38.finish();
    }
    if let Some(var_39) = &input.sources {
        let mut array_40 = object.key("sources").start_array();
        for item_41 in var_39 {
            {
                let mut object_42 = array_40.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_config(
                    &mut object_42,
                    item_41,
                );
                object_42.finish();
            }
        }
        array_40.finish();
    }
    if let Some(var_43) = &input.tags {
        let mut object_44 = object.key("tags").start_object();
        for (key_45, value_46) in var_43 {
            {
                object_44.key(key_45).string(value_46);
            }
        }
        object_44.finish();
    }
}

pub fn serialize_structure_crate_input_create_robot_application_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateRobotApplicationVersionInput,
) {
    if let Some(var_47) = &input.application {
        object.key("application").string(var_47);
    }
    if let Some(var_48) = &input.current_revision_id {
        object.key("currentRevisionId").string(var_48);
    }
}

pub fn serialize_structure_crate_input_create_simulation_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSimulationApplicationInput,
) {
    if let Some(var_49) = &input.name {
        object.key("name").string(var_49);
    }
    if let Some(var_50) = &input.rendering_engine {
        let mut object_51 = object.key("renderingEngine").start_object();
        crate::json_ser::serialize_structure_crate_model_rendering_engine(&mut object_51, var_50);
        object_51.finish();
    }
    if let Some(var_52) = &input.robot_software_suite {
        let mut object_53 = object.key("robotSoftwareSuite").start_object();
        crate::json_ser::serialize_structure_crate_model_robot_software_suite(
            &mut object_53,
            var_52,
        );
        object_53.finish();
    }
    if let Some(var_54) = &input.simulation_software_suite {
        let mut object_55 = object.key("simulationSoftwareSuite").start_object();
        crate::json_ser::serialize_structure_crate_model_simulation_software_suite(
            &mut object_55,
            var_54,
        );
        object_55.finish();
    }
    if let Some(var_56) = &input.sources {
        let mut array_57 = object.key("sources").start_array();
        for item_58 in var_56 {
            {
                let mut object_59 = array_57.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_config(
                    &mut object_59,
                    item_58,
                );
                object_59.finish();
            }
        }
        array_57.finish();
    }
    if let Some(var_60) = &input.tags {
        let mut object_61 = object.key("tags").start_object();
        for (key_62, value_63) in var_60 {
            {
                object_61.key(key_62).string(value_63);
            }
        }
        object_61.finish();
    }
}

pub fn serialize_structure_crate_input_create_simulation_application_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSimulationApplicationVersionInput,
) {
    if let Some(var_64) = &input.application {
        object.key("application").string(var_64);
    }
    if let Some(var_65) = &input.current_revision_id {
        object.key("currentRevisionId").string(var_65);
    }
}

pub fn serialize_structure_crate_input_create_simulation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateSimulationJobInput,
) {
    if let Some(var_66) = &input.client_request_token {
        object.key("clientRequestToken").string(var_66);
    }
    if let Some(var_67) = &input.compute {
        let mut object_68 = object.key("compute").start_object();
        crate::json_ser::serialize_structure_crate_model_compute(&mut object_68, var_67);
        object_68.finish();
    }
    if let Some(var_69) = &input.data_sources {
        let mut array_70 = object.key("dataSources").start_array();
        for item_71 in var_69 {
            {
                let mut object_72 = array_70.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_config(
                    &mut object_72,
                    item_71,
                );
                object_72.finish();
            }
        }
        array_70.finish();
    }
    if let Some(var_73) = &input.failure_behavior {
        object.key("failureBehavior").string(var_73.as_str());
    }
    if let Some(var_74) = &input.iam_role {
        object.key("iamRole").string(var_74);
    }
    if let Some(var_75) = &input.logging_config {
        let mut object_76 = object.key("loggingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_config(&mut object_76, var_75);
        object_76.finish();
    }
    {
        object.key("maxJobDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_job_duration_in_seconds).into()),
        );
    }
    if let Some(var_77) = &input.output_location {
        let mut object_78 = object.key("outputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location(&mut object_78, var_77);
        object_78.finish();
    }
    if let Some(var_79) = &input.robot_applications {
        let mut array_80 = object.key("robotApplications").start_array();
        for item_81 in var_79 {
            {
                let mut object_82 = array_80.value().start_object();
                crate::json_ser::serialize_structure_crate_model_robot_application_config(
                    &mut object_82,
                    item_81,
                );
                object_82.finish();
            }
        }
        array_80.finish();
    }
    if let Some(var_83) = &input.simulation_applications {
        let mut array_84 = object.key("simulationApplications").start_array();
        for item_85 in var_83 {
            {
                let mut object_86 = array_84.value().start_object();
                crate::json_ser::serialize_structure_crate_model_simulation_application_config(
                    &mut object_86,
                    item_85,
                );
                object_86.finish();
            }
        }
        array_84.finish();
    }
    if let Some(var_87) = &input.tags {
        let mut object_88 = object.key("tags").start_object();
        for (key_89, value_90) in var_87 {
            {
                object_88.key(key_89).string(value_90);
            }
        }
        object_88.finish();
    }
    if let Some(var_91) = &input.vpc_config {
        let mut object_92 = object.key("vpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_92, var_91);
        object_92.finish();
    }
}

pub fn serialize_structure_crate_input_create_world_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorldExportJobInput,
) {
    if let Some(var_93) = &input.client_request_token {
        object.key("clientRequestToken").string(var_93);
    }
    if let Some(var_94) = &input.iam_role {
        object.key("iamRole").string(var_94);
    }
    if let Some(var_95) = &input.output_location {
        let mut object_96 = object.key("outputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location(&mut object_96, var_95);
        object_96.finish();
    }
    if let Some(var_97) = &input.tags {
        let mut object_98 = object.key("tags").start_object();
        for (key_99, value_100) in var_97 {
            {
                object_98.key(key_99).string(value_100);
            }
        }
        object_98.finish();
    }
    if let Some(var_101) = &input.worlds {
        let mut array_102 = object.key("worlds").start_array();
        for item_103 in var_101 {
            {
                array_102.value().string(item_103);
            }
        }
        array_102.finish();
    }
}

pub fn serialize_structure_crate_input_create_world_generation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorldGenerationJobInput,
) {
    if let Some(var_104) = &input.client_request_token {
        object.key("clientRequestToken").string(var_104);
    }
    if let Some(var_105) = &input.tags {
        let mut object_106 = object.key("tags").start_object();
        for (key_107, value_108) in var_105 {
            {
                object_106.key(key_107).string(value_108);
            }
        }
        object_106.finish();
    }
    if let Some(var_109) = &input.template {
        object.key("template").string(var_109);
    }
    if let Some(var_110) = &input.world_count {
        let mut object_111 = object.key("worldCount").start_object();
        crate::json_ser::serialize_structure_crate_model_world_count(&mut object_111, var_110);
        object_111.finish();
    }
    if let Some(var_112) = &input.world_tags {
        let mut object_113 = object.key("worldTags").start_object();
        for (key_114, value_115) in var_112 {
            {
                object_113.key(key_114).string(value_115);
            }
        }
        object_113.finish();
    }
}

pub fn serialize_structure_crate_input_create_world_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateWorldTemplateInput,
) {
    if let Some(var_116) = &input.client_request_token {
        object.key("clientRequestToken").string(var_116);
    }
    if let Some(var_117) = &input.name {
        object.key("name").string(var_117);
    }
    if let Some(var_118) = &input.tags {
        let mut object_119 = object.key("tags").start_object();
        for (key_120, value_121) in var_118 {
            {
                object_119.key(key_120).string(value_121);
            }
        }
        object_119.finish();
    }
    if let Some(var_122) = &input.template_body {
        object.key("templateBody").string(var_122);
    }
    if let Some(var_123) = &input.template_location {
        let mut object_124 = object.key("templateLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_template_location(
            &mut object_124,
            var_123,
        );
        object_124.finish();
    }
}

pub fn serialize_structure_crate_input_delete_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteFleetInput,
) {
    if let Some(var_125) = &input.fleet {
        object.key("fleet").string(var_125);
    }
}

pub fn serialize_structure_crate_input_delete_robot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRobotInput,
) {
    if let Some(var_126) = &input.robot {
        object.key("robot").string(var_126);
    }
}

pub fn serialize_structure_crate_input_delete_robot_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteRobotApplicationInput,
) {
    if let Some(var_127) = &input.application {
        object.key("application").string(var_127);
    }
    if let Some(var_128) = &input.application_version {
        object.key("applicationVersion").string(var_128);
    }
}

pub fn serialize_structure_crate_input_delete_simulation_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteSimulationApplicationInput,
) {
    if let Some(var_129) = &input.application {
        object.key("application").string(var_129);
    }
    if let Some(var_130) = &input.application_version {
        object.key("applicationVersion").string(var_130);
    }
}

pub fn serialize_structure_crate_input_delete_world_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeleteWorldTemplateInput,
) {
    if let Some(var_131) = &input.template {
        object.key("template").string(var_131);
    }
}

pub fn serialize_structure_crate_input_deregister_robot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DeregisterRobotInput,
) {
    if let Some(var_132) = &input.fleet {
        object.key("fleet").string(var_132);
    }
    if let Some(var_133) = &input.robot {
        object.key("robot").string(var_133);
    }
}

pub fn serialize_structure_crate_input_describe_deployment_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeDeploymentJobInput,
) {
    if let Some(var_134) = &input.job {
        object.key("job").string(var_134);
    }
}

pub fn serialize_structure_crate_input_describe_fleet_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeFleetInput,
) {
    if let Some(var_135) = &input.fleet {
        object.key("fleet").string(var_135);
    }
}

pub fn serialize_structure_crate_input_describe_robot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRobotInput,
) {
    if let Some(var_136) = &input.robot {
        object.key("robot").string(var_136);
    }
}

pub fn serialize_structure_crate_input_describe_robot_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeRobotApplicationInput,
) {
    if let Some(var_137) = &input.application {
        object.key("application").string(var_137);
    }
    if let Some(var_138) = &input.application_version {
        object.key("applicationVersion").string(var_138);
    }
}

pub fn serialize_structure_crate_input_describe_simulation_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSimulationApplicationInput,
) {
    if let Some(var_139) = &input.application {
        object.key("application").string(var_139);
    }
    if let Some(var_140) = &input.application_version {
        object.key("applicationVersion").string(var_140);
    }
}

pub fn serialize_structure_crate_input_describe_simulation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSimulationJobInput,
) {
    if let Some(var_141) = &input.job {
        object.key("job").string(var_141);
    }
}

pub fn serialize_structure_crate_input_describe_simulation_job_batch_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeSimulationJobBatchInput,
) {
    if let Some(var_142) = &input.batch {
        object.key("batch").string(var_142);
    }
}

pub fn serialize_structure_crate_input_describe_world_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorldInput,
) {
    if let Some(var_143) = &input.world {
        object.key("world").string(var_143);
    }
}

pub fn serialize_structure_crate_input_describe_world_export_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorldExportJobInput,
) {
    if let Some(var_144) = &input.job {
        object.key("job").string(var_144);
    }
}

pub fn serialize_structure_crate_input_describe_world_generation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorldGenerationJobInput,
) {
    if let Some(var_145) = &input.job {
        object.key("job").string(var_145);
    }
}

pub fn serialize_structure_crate_input_describe_world_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeWorldTemplateInput,
) {
    if let Some(var_146) = &input.template {
        object.key("template").string(var_146);
    }
}

pub fn serialize_structure_crate_input_get_world_template_body_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::GetWorldTemplateBodyInput,
) {
    if let Some(var_147) = &input.generation_job {
        object.key("generationJob").string(var_147);
    }
    if let Some(var_148) = &input.template {
        object.key("template").string(var_148);
    }
}

pub fn serialize_structure_crate_input_list_deployment_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListDeploymentJobsInput,
) {
    if let Some(var_149) = &input.filters {
        let mut array_150 = object.key("filters").start_array();
        for item_151 in var_149 {
            {
                let mut object_152 = array_150.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_152, item_151);
                object_152.finish();
            }
        }
        array_150.finish();
    }
    if let Some(var_153) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_153).into()),
        );
    }
    if let Some(var_154) = &input.next_token {
        object.key("nextToken").string(var_154);
    }
}

pub fn serialize_structure_crate_input_list_fleets_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListFleetsInput,
) {
    if let Some(var_155) = &input.filters {
        let mut array_156 = object.key("filters").start_array();
        for item_157 in var_155 {
            {
                let mut object_158 = array_156.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_158, item_157);
                object_158.finish();
            }
        }
        array_156.finish();
    }
    if let Some(var_159) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_159).into()),
        );
    }
    if let Some(var_160) = &input.next_token {
        object.key("nextToken").string(var_160);
    }
}

pub fn serialize_structure_crate_input_list_robot_applications_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRobotApplicationsInput,
) {
    if let Some(var_161) = &input.filters {
        let mut array_162 = object.key("filters").start_array();
        for item_163 in var_161 {
            {
                let mut object_164 = array_162.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_164, item_163);
                object_164.finish();
            }
        }
        array_162.finish();
    }
    if let Some(var_165) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_165).into()),
        );
    }
    if let Some(var_166) = &input.next_token {
        object.key("nextToken").string(var_166);
    }
    if let Some(var_167) = &input.version_qualifier {
        object.key("versionQualifier").string(var_167);
    }
}

pub fn serialize_structure_crate_input_list_robots_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListRobotsInput,
) {
    if let Some(var_168) = &input.filters {
        let mut array_169 = object.key("filters").start_array();
        for item_170 in var_168 {
            {
                let mut object_171 = array_169.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_171, item_170);
                object_171.finish();
            }
        }
        array_169.finish();
    }
    if let Some(var_172) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    if let Some(var_173) = &input.next_token {
        object.key("nextToken").string(var_173);
    }
}

pub fn serialize_structure_crate_input_list_simulation_applications_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSimulationApplicationsInput,
) {
    if let Some(var_174) = &input.filters {
        let mut array_175 = object.key("filters").start_array();
        for item_176 in var_174 {
            {
                let mut object_177 = array_175.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_177, item_176);
                object_177.finish();
            }
        }
        array_175.finish();
    }
    if let Some(var_178) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_178).into()),
        );
    }
    if let Some(var_179) = &input.next_token {
        object.key("nextToken").string(var_179);
    }
    if let Some(var_180) = &input.version_qualifier {
        object.key("versionQualifier").string(var_180);
    }
}

pub fn serialize_structure_crate_input_list_simulation_job_batches_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSimulationJobBatchesInput,
) {
    if let Some(var_181) = &input.filters {
        let mut array_182 = object.key("filters").start_array();
        for item_183 in var_181 {
            {
                let mut object_184 = array_182.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_184, item_183);
                object_184.finish();
            }
        }
        array_182.finish();
    }
    if let Some(var_185) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_185).into()),
        );
    }
    if let Some(var_186) = &input.next_token {
        object.key("nextToken").string(var_186);
    }
}

pub fn serialize_structure_crate_input_list_simulation_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListSimulationJobsInput,
) {
    if let Some(var_187) = &input.filters {
        let mut array_188 = object.key("filters").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_190, item_189);
                object_190.finish();
            }
        }
        array_188.finish();
    }
    if let Some(var_191) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_191).into()),
        );
    }
    if let Some(var_192) = &input.next_token {
        object.key("nextToken").string(var_192);
    }
}

pub fn serialize_structure_crate_input_list_world_export_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorldExportJobsInput,
) {
    if let Some(var_193) = &input.filters {
        let mut array_194 = object.key("filters").start_array();
        for item_195 in var_193 {
            {
                let mut object_196 = array_194.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_196, item_195);
                object_196.finish();
            }
        }
        array_194.finish();
    }
    if let Some(var_197) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_197).into()),
        );
    }
    if let Some(var_198) = &input.next_token {
        object.key("nextToken").string(var_198);
    }
}

pub fn serialize_structure_crate_input_list_world_generation_jobs_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorldGenerationJobsInput,
) {
    if let Some(var_199) = &input.filters {
        let mut array_200 = object.key("filters").start_array();
        for item_201 in var_199 {
            {
                let mut object_202 = array_200.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_202, item_201);
                object_202.finish();
            }
        }
        array_200.finish();
    }
    if let Some(var_203) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_203).into()),
        );
    }
    if let Some(var_204) = &input.next_token {
        object.key("nextToken").string(var_204);
    }
}

pub fn serialize_structure_crate_input_list_worlds_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorldsInput,
) {
    if let Some(var_205) = &input.filters {
        let mut array_206 = object.key("filters").start_array();
        for item_207 in var_205 {
            {
                let mut object_208 = array_206.value().start_object();
                crate::json_ser::serialize_structure_crate_model_filter(&mut object_208, item_207);
                object_208.finish();
            }
        }
        array_206.finish();
    }
    if let Some(var_209) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_209).into()),
        );
    }
    if let Some(var_210) = &input.next_token {
        object.key("nextToken").string(var_210);
    }
}

pub fn serialize_structure_crate_input_list_world_templates_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::ListWorldTemplatesInput,
) {
    if let Some(var_211) = &input.max_results {
        object.key("maxResults").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_211).into()),
        );
    }
    if let Some(var_212) = &input.next_token {
        object.key("nextToken").string(var_212);
    }
}

pub fn serialize_structure_crate_input_register_robot_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RegisterRobotInput,
) {
    if let Some(var_213) = &input.fleet {
        object.key("fleet").string(var_213);
    }
    if let Some(var_214) = &input.robot {
        object.key("robot").string(var_214);
    }
}

pub fn serialize_structure_crate_input_restart_simulation_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::RestartSimulationJobInput,
) {
    if let Some(var_215) = &input.job {
        object.key("job").string(var_215);
    }
}

pub fn serialize_structure_crate_input_start_simulation_job_batch_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::StartSimulationJobBatchInput,
) {
    if let Some(var_216) = &input.batch_policy {
        let mut object_217 = object.key("batchPolicy").start_object();
        crate::json_ser::serialize_structure_crate_model_batch_policy(&mut object_217, var_216);
        object_217.finish();
    }
    if let Some(var_218) = &input.client_request_token {
        object.key("clientRequestToken").string(var_218);
    }
    if let Some(var_219) = &input.create_simulation_job_requests {
        let mut array_220 = object.key("createSimulationJobRequests").start_array();
        for item_221 in var_219 {
            {
                let mut object_222 = array_220.value().start_object();
                crate::json_ser::serialize_structure_crate_model_simulation_job_request(
                    &mut object_222,
                    item_221,
                );
                object_222.finish();
            }
        }
        array_220.finish();
    }
    if let Some(var_223) = &input.tags {
        let mut object_224 = object.key("tags").start_object();
        for (key_225, value_226) in var_223 {
            {
                object_224.key(key_225).string(value_226);
            }
        }
        object_224.finish();
    }
}

pub fn serialize_structure_crate_input_sync_deployment_job_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::SyncDeploymentJobInput,
) {
    if let Some(var_227) = &input.client_request_token {
        object.key("clientRequestToken").string(var_227);
    }
    if let Some(var_228) = &input.fleet {
        object.key("fleet").string(var_228);
    }
}

pub fn serialize_structure_crate_input_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_229) = &input.tags {
        let mut object_230 = object.key("tags").start_object();
        for (key_231, value_232) in var_229 {
            {
                object_230.key(key_231).string(value_232);
            }
        }
        object_230.finish();
    }
}

pub fn serialize_structure_crate_input_update_robot_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateRobotApplicationInput,
) {
    if let Some(var_233) = &input.application {
        object.key("application").string(var_233);
    }
    if let Some(var_234) = &input.current_revision_id {
        object.key("currentRevisionId").string(var_234);
    }
    if let Some(var_235) = &input.robot_software_suite {
        let mut object_236 = object.key("robotSoftwareSuite").start_object();
        crate::json_ser::serialize_structure_crate_model_robot_software_suite(
            &mut object_236,
            var_235,
        );
        object_236.finish();
    }
    if let Some(var_237) = &input.sources {
        let mut array_238 = object.key("sources").start_array();
        for item_239 in var_237 {
            {
                let mut object_240 = array_238.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_config(
                    &mut object_240,
                    item_239,
                );
                object_240.finish();
            }
        }
        array_238.finish();
    }
}

pub fn serialize_structure_crate_input_update_simulation_application_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateSimulationApplicationInput,
) {
    if let Some(var_241) = &input.application {
        object.key("application").string(var_241);
    }
    if let Some(var_242) = &input.current_revision_id {
        object.key("currentRevisionId").string(var_242);
    }
    if let Some(var_243) = &input.rendering_engine {
        let mut object_244 = object.key("renderingEngine").start_object();
        crate::json_ser::serialize_structure_crate_model_rendering_engine(&mut object_244, var_243);
        object_244.finish();
    }
    if let Some(var_245) = &input.robot_software_suite {
        let mut object_246 = object.key("robotSoftwareSuite").start_object();
        crate::json_ser::serialize_structure_crate_model_robot_software_suite(
            &mut object_246,
            var_245,
        );
        object_246.finish();
    }
    if let Some(var_247) = &input.simulation_software_suite {
        let mut object_248 = object.key("simulationSoftwareSuite").start_object();
        crate::json_ser::serialize_structure_crate_model_simulation_software_suite(
            &mut object_248,
            var_247,
        );
        object_248.finish();
    }
    if let Some(var_249) = &input.sources {
        let mut array_250 = object.key("sources").start_array();
        for item_251 in var_249 {
            {
                let mut object_252 = array_250.value().start_object();
                crate::json_ser::serialize_structure_crate_model_source_config(
                    &mut object_252,
                    item_251,
                );
                object_252.finish();
            }
        }
        array_250.finish();
    }
}

pub fn serialize_structure_crate_input_update_world_template_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateWorldTemplateInput,
) {
    if let Some(var_253) = &input.name {
        object.key("name").string(var_253);
    }
    if let Some(var_254) = &input.template {
        object.key("template").string(var_254);
    }
    if let Some(var_255) = &input.template_body {
        object.key("templateBody").string(var_255);
    }
    if let Some(var_256) = &input.template_location {
        let mut object_257 = object.key("templateLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_template_location(
            &mut object_257,
            var_256,
        );
        object_257.finish();
    }
}

pub fn serialize_structure_crate_model_deployment_application_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentApplicationConfig,
) {
    if let Some(var_258) = &input.application {
        object.key("application").string(var_258);
    }
    if let Some(var_259) = &input.application_version {
        object.key("applicationVersion").string(var_259);
    }
    if let Some(var_260) = &input.launch_config {
        let mut object_261 = object.key("launchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_deployment_launch_config(
            &mut object_261,
            var_260,
        );
        object_261.finish();
    }
}

pub fn serialize_structure_crate_model_deployment_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentConfig,
) {
    if let Some(var_262) = &input.concurrent_deployment_percentage {
        object.key("concurrentDeploymentPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_262).into()),
        );
    }
    if let Some(var_263) = &input.failure_threshold_percentage {
        object.key("failureThresholdPercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_263).into()),
        );
    }
    if let Some(var_264) = &input.robot_deployment_timeout_in_seconds {
        object.key("robotDeploymentTimeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_264).into()),
        );
    }
    if let Some(var_265) = &input.download_condition_file {
        let mut object_266 = object.key("downloadConditionFile").start_object();
        crate::json_ser::serialize_structure_crate_model_s3_object(&mut object_266, var_265);
        object_266.finish();
    }
}

pub fn serialize_structure_crate_model_robot_software_suite(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RobotSoftwareSuite,
) {
    if let Some(var_267) = &input.name {
        object.key("name").string(var_267.as_str());
    }
    if let Some(var_268) = &input.version {
        object.key("version").string(var_268.as_str());
    }
}

pub fn serialize_structure_crate_model_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SourceConfig,
) {
    if let Some(var_269) = &input.s3_bucket {
        object.key("s3Bucket").string(var_269);
    }
    if let Some(var_270) = &input.s3_key {
        object.key("s3Key").string(var_270);
    }
    if let Some(var_271) = &input.architecture {
        object.key("architecture").string(var_271.as_str());
    }
}

pub fn serialize_structure_crate_model_rendering_engine(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RenderingEngine,
) {
    if let Some(var_272) = &input.name {
        object.key("name").string(var_272.as_str());
    }
    if let Some(var_273) = &input.version {
        object.key("version").string(var_273);
    }
}

pub fn serialize_structure_crate_model_simulation_software_suite(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimulationSoftwareSuite,
) {
    if let Some(var_274) = &input.name {
        object.key("name").string(var_274.as_str());
    }
    if let Some(var_275) = &input.version {
        object.key("version").string(var_275);
    }
}

pub fn serialize_structure_crate_model_compute(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Compute,
) {
    if let Some(var_276) = &input.simulation_unit_limit {
        object.key("simulationUnitLimit").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_276).into()),
        );
    }
}

pub fn serialize_structure_crate_model_data_source_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DataSourceConfig,
) {
    if let Some(var_277) = &input.name {
        object.key("name").string(var_277);
    }
    if let Some(var_278) = &input.s3_bucket {
        object.key("s3Bucket").string(var_278);
    }
    if let Some(var_279) = &input.s3_keys {
        let mut array_280 = object.key("s3Keys").start_array();
        for item_281 in var_279 {
            {
                array_280.value().string(item_281);
            }
        }
        array_280.finish();
    }
}

pub fn serialize_structure_crate_model_logging_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LoggingConfig,
) {
    if let Some(var_282) = &input.record_all_ros_topics {
        object.key("recordAllRosTopics").boolean(*var_282);
    }
}

pub fn serialize_structure_crate_model_output_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OutputLocation,
) {
    if let Some(var_283) = &input.s3_bucket {
        object.key("s3Bucket").string(var_283);
    }
    if let Some(var_284) = &input.s3_prefix {
        object.key("s3Prefix").string(var_284);
    }
}

pub fn serialize_structure_crate_model_robot_application_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RobotApplicationConfig,
) {
    if let Some(var_285) = &input.application {
        object.key("application").string(var_285);
    }
    if let Some(var_286) = &input.application_version {
        object.key("applicationVersion").string(var_286);
    }
    if let Some(var_287) = &input.launch_config {
        let mut object_288 = object.key("launchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_launch_config(&mut object_288, var_287);
        object_288.finish();
    }
    if let Some(var_289) = &input.upload_configurations {
        let mut array_290 = object.key("uploadConfigurations").start_array();
        for item_291 in var_289 {
            {
                let mut object_292 = array_290.value().start_object();
                crate::json_ser::serialize_structure_crate_model_upload_configuration(
                    &mut object_292,
                    item_291,
                );
                object_292.finish();
            }
        }
        array_290.finish();
    }
    if let Some(var_293) = &input.use_default_upload_configurations {
        object
            .key("useDefaultUploadConfigurations")
            .boolean(*var_293);
    }
    if let Some(var_294) = &input.tools {
        let mut array_295 = object.key("tools").start_array();
        for item_296 in var_294 {
            {
                let mut object_297 = array_295.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tool(&mut object_297, item_296);
                object_297.finish();
            }
        }
        array_295.finish();
    }
    if let Some(var_298) = &input.use_default_tools {
        object.key("useDefaultTools").boolean(*var_298);
    }
}

pub fn serialize_structure_crate_model_simulation_application_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimulationApplicationConfig,
) {
    if let Some(var_299) = &input.application {
        object.key("application").string(var_299);
    }
    if let Some(var_300) = &input.application_version {
        object.key("applicationVersion").string(var_300);
    }
    if let Some(var_301) = &input.launch_config {
        let mut object_302 = object.key("launchConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_launch_config(&mut object_302, var_301);
        object_302.finish();
    }
    if let Some(var_303) = &input.upload_configurations {
        let mut array_304 = object.key("uploadConfigurations").start_array();
        for item_305 in var_303 {
            {
                let mut object_306 = array_304.value().start_object();
                crate::json_ser::serialize_structure_crate_model_upload_configuration(
                    &mut object_306,
                    item_305,
                );
                object_306.finish();
            }
        }
        array_304.finish();
    }
    if let Some(var_307) = &input.world_configs {
        let mut array_308 = object.key("worldConfigs").start_array();
        for item_309 in var_307 {
            {
                let mut object_310 = array_308.value().start_object();
                crate::json_ser::serialize_structure_crate_model_world_config(
                    &mut object_310,
                    item_309,
                );
                object_310.finish();
            }
        }
        array_308.finish();
    }
    if let Some(var_311) = &input.use_default_upload_configurations {
        object
            .key("useDefaultUploadConfigurations")
            .boolean(*var_311);
    }
    if let Some(var_312) = &input.tools {
        let mut array_313 = object.key("tools").start_array();
        for item_314 in var_312 {
            {
                let mut object_315 = array_313.value().start_object();
                crate::json_ser::serialize_structure_crate_model_tool(&mut object_315, item_314);
                object_315.finish();
            }
        }
        array_313.finish();
    }
    if let Some(var_316) = &input.use_default_tools {
        object.key("useDefaultTools").boolean(*var_316);
    }
}

pub fn serialize_structure_crate_model_vpc_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfig,
) {
    if let Some(var_317) = &input.subnets {
        let mut array_318 = object.key("subnets").start_array();
        for item_319 in var_317 {
            {
                array_318.value().string(item_319);
            }
        }
        array_318.finish();
    }
    if let Some(var_320) = &input.security_groups {
        let mut array_321 = object.key("securityGroups").start_array();
        for item_322 in var_320 {
            {
                array_321.value().string(item_322);
            }
        }
        array_321.finish();
    }
    if input.assign_public_ip {
        object.key("assignPublicIp").boolean(input.assign_public_ip);
    }
}

pub fn serialize_structure_crate_model_world_count(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorldCount,
) {
    if let Some(var_323) = &input.floorplan_count {
        object.key("floorplanCount").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_323).into()),
        );
    }
    if let Some(var_324) = &input.interior_count_per_floorplan {
        object.key("interiorCountPerFloorplan").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_324).into()),
        );
    }
}

pub fn serialize_structure_crate_model_template_location(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::TemplateLocation,
) {
    if let Some(var_325) = &input.s3_bucket {
        object.key("s3Bucket").string(var_325);
    }
    if let Some(var_326) = &input.s3_key {
        object.key("s3Key").string(var_326);
    }
}

pub fn serialize_structure_crate_model_filter(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Filter,
) {
    if let Some(var_327) = &input.name {
        object.key("name").string(var_327);
    }
    if let Some(var_328) = &input.values {
        let mut array_329 = object.key("values").start_array();
        for item_330 in var_328 {
            {
                array_329.value().string(item_330);
            }
        }
        array_329.finish();
    }
}

pub fn serialize_structure_crate_model_batch_policy(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::BatchPolicy,
) {
    if let Some(var_331) = &input.timeout_in_seconds {
        object.key("timeoutInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_331).into()),
        );
    }
    if let Some(var_332) = &input.max_concurrency {
        object.key("maxConcurrency").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_332).into()),
        );
    }
}

pub fn serialize_structure_crate_model_simulation_job_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::SimulationJobRequest,
) {
    if let Some(var_333) = &input.output_location {
        let mut object_334 = object.key("outputLocation").start_object();
        crate::json_ser::serialize_structure_crate_model_output_location(&mut object_334, var_333);
        object_334.finish();
    }
    if let Some(var_335) = &input.logging_config {
        let mut object_336 = object.key("loggingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_logging_config(&mut object_336, var_335);
        object_336.finish();
    }
    {
        object.key("maxJobDurationInSeconds").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.max_job_duration_in_seconds).into()),
        );
    }
    if let Some(var_337) = &input.iam_role {
        object.key("iamRole").string(var_337);
    }
    if let Some(var_338) = &input.failure_behavior {
        object.key("failureBehavior").string(var_338.as_str());
    }
    if let Some(var_339) = &input.use_default_applications {
        object.key("useDefaultApplications").boolean(*var_339);
    }
    if let Some(var_340) = &input.robot_applications {
        let mut array_341 = object.key("robotApplications").start_array();
        for item_342 in var_340 {
            {
                let mut object_343 = array_341.value().start_object();
                crate::json_ser::serialize_structure_crate_model_robot_application_config(
                    &mut object_343,
                    item_342,
                );
                object_343.finish();
            }
        }
        array_341.finish();
    }
    if let Some(var_344) = &input.simulation_applications {
        let mut array_345 = object.key("simulationApplications").start_array();
        for item_346 in var_344 {
            {
                let mut object_347 = array_345.value().start_object();
                crate::json_ser::serialize_structure_crate_model_simulation_application_config(
                    &mut object_347,
                    item_346,
                );
                object_347.finish();
            }
        }
        array_345.finish();
    }
    if let Some(var_348) = &input.data_sources {
        let mut array_349 = object.key("dataSources").start_array();
        for item_350 in var_348 {
            {
                let mut object_351 = array_349.value().start_object();
                crate::json_ser::serialize_structure_crate_model_data_source_config(
                    &mut object_351,
                    item_350,
                );
                object_351.finish();
            }
        }
        array_349.finish();
    }
    if let Some(var_352) = &input.vpc_config {
        let mut object_353 = object.key("vpcConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_vpc_config(&mut object_353, var_352);
        object_353.finish();
    }
    if let Some(var_354) = &input.compute {
        let mut object_355 = object.key("compute").start_object();
        crate::json_ser::serialize_structure_crate_model_compute(&mut object_355, var_354);
        object_355.finish();
    }
    if let Some(var_356) = &input.tags {
        let mut object_357 = object.key("tags").start_object();
        for (key_358, value_359) in var_356 {
            {
                object_357.key(key_358).string(value_359);
            }
        }
        object_357.finish();
    }
}

pub fn serialize_structure_crate_model_deployment_launch_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::DeploymentLaunchConfig,
) {
    if let Some(var_360) = &input.package_name {
        object.key("packageName").string(var_360);
    }
    if let Some(var_361) = &input.pre_launch_file {
        object.key("preLaunchFile").string(var_361);
    }
    if let Some(var_362) = &input.launch_file {
        object.key("launchFile").string(var_362);
    }
    if let Some(var_363) = &input.post_launch_file {
        object.key("postLaunchFile").string(var_363);
    }
    if let Some(var_364) = &input.environment_variables {
        let mut object_365 = object.key("environmentVariables").start_object();
        for (key_366, value_367) in var_364 {
            {
                object_365.key(key_366).string(value_367);
            }
        }
        object_365.finish();
    }
}

pub fn serialize_structure_crate_model_s3_object(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::S3Object,
) {
    if let Some(var_368) = &input.bucket {
        object.key("bucket").string(var_368);
    }
    if let Some(var_369) = &input.key {
        object.key("key").string(var_369);
    }
    if let Some(var_370) = &input.etag {
        object.key("etag").string(var_370);
    }
}

pub fn serialize_structure_crate_model_launch_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LaunchConfig,
) {
    if let Some(var_371) = &input.package_name {
        object.key("packageName").string(var_371);
    }
    if let Some(var_372) = &input.launch_file {
        object.key("launchFile").string(var_372);
    }
    if let Some(var_373) = &input.environment_variables {
        let mut object_374 = object.key("environmentVariables").start_object();
        for (key_375, value_376) in var_373 {
            {
                object_374.key(key_375).string(value_376);
            }
        }
        object_374.finish();
    }
    if let Some(var_377) = &input.port_forwarding_config {
        let mut object_378 = object.key("portForwardingConfig").start_object();
        crate::json_ser::serialize_structure_crate_model_port_forwarding_config(
            &mut object_378,
            var_377,
        );
        object_378.finish();
    }
    if input.stream_ui {
        object.key("streamUI").boolean(input.stream_ui);
    }
}

pub fn serialize_structure_crate_model_upload_configuration(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UploadConfiguration,
) {
    if let Some(var_379) = &input.name {
        object.key("name").string(var_379);
    }
    if let Some(var_380) = &input.path {
        object.key("path").string(var_380);
    }
    if let Some(var_381) = &input.upload_behavior {
        object.key("uploadBehavior").string(var_381.as_str());
    }
}

pub fn serialize_structure_crate_model_tool(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Tool,
) {
    if let Some(var_382) = &input.stream_ui {
        object.key("streamUI").boolean(*var_382);
    }
    if let Some(var_383) = &input.name {
        object.key("name").string(var_383);
    }
    if let Some(var_384) = &input.command {
        object.key("command").string(var_384);
    }
    if let Some(var_385) = &input.stream_output_to_cloud_watch {
        object.key("streamOutputToCloudWatch").boolean(*var_385);
    }
    if let Some(var_386) = &input.exit_behavior {
        object.key("exitBehavior").string(var_386.as_str());
    }
}

pub fn serialize_structure_crate_model_world_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::WorldConfig,
) {
    if let Some(var_387) = &input.world {
        object.key("world").string(var_387);
    }
}

pub fn serialize_structure_crate_model_port_forwarding_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortForwardingConfig,
) {
    if let Some(var_388) = &input.port_mappings {
        let mut array_389 = object.key("portMappings").start_array();
        for item_390 in var_388 {
            {
                let mut object_391 = array_389.value().start_object();
                crate::json_ser::serialize_structure_crate_model_port_mapping(
                    &mut object_391,
                    item_390,
                );
                object_391.finish();
            }
        }
        array_389.finish();
    }
}

pub fn serialize_structure_crate_model_port_mapping(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::PortMapping,
) {
    {
        object.key("jobPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.job_port).into()),
        );
    }
    {
        object.key("applicationPort").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((input.application_port).into()),
        );
    }
    if input.enable_on_public_ip {
        object
            .key("enableOnPublicIp")
            .boolean(input.enable_on_public_ip);
    }
}
