// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_deployment_jobs_output_next_token(
    input: &crate::operation::list_deployment_jobs::ListDeploymentJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_fleets_output_next_token(
    input: &crate::operation::list_fleets::ListFleetsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_robot_applications_output_next_token(
    input: &crate::operation::list_robot_applications::ListRobotApplicationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_robots_output_next_token(
    input: &crate::operation::list_robots::ListRobotsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_simulation_applications_output_next_token(
    input: &crate::operation::list_simulation_applications::ListSimulationApplicationsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_simulation_job_batches_output_next_token(
    input: &crate::operation::list_simulation_job_batches::ListSimulationJobBatchesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_simulation_jobs_output_next_token(
    input: &crate::operation::list_simulation_jobs::ListSimulationJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_world_export_jobs_output_next_token(
    input: &crate::operation::list_world_export_jobs::ListWorldExportJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_world_generation_jobs_output_next_token(
    input: &crate::operation::list_world_generation_jobs::ListWorldGenerationJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_world_templates_output_next_token(
    input: &crate::operation::list_world_templates::ListWorldTemplatesOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_worlds_output_next_token(
    input: &crate::operation::list_worlds::ListWorldsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_deployment_jobs_output_deployment_jobs(
    input: crate::operation::list_deployment_jobs::ListDeploymentJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::DeploymentJob>> {
    let input = match input.deployment_jobs {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_fleets_output_fleet_details(
    input: crate::operation::list_fleets::ListFleetsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Fleet>> {
    let input = match input.fleet_details {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_robot_applications_output_robot_application_summaries(
    input: crate::operation::list_robot_applications::ListRobotApplicationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::RobotApplicationSummary>> {
    let input = match input.robot_application_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_robots_output_robots(
    input: crate::operation::list_robots::ListRobotsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::Robot>> {
    let input = match input.robots {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_simulation_applications_output_simulation_application_summaries(
    input: crate::operation::list_simulation_applications::ListSimulationApplicationsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SimulationApplicationSummary>> {
    let input = match input.simulation_application_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_simulation_job_batches_output_simulation_job_batch_summaries(
    input: crate::operation::list_simulation_job_batches::ListSimulationJobBatchesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SimulationJobBatchSummary>> {
    let input = match input.simulation_job_batch_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_simulation_jobs_output_simulation_job_summaries(
    input: crate::operation::list_simulation_jobs::ListSimulationJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::SimulationJobSummary>> {
    let input = input.simulation_job_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_world_export_jobs_output_world_export_job_summaries(
    input: crate::operation::list_world_export_jobs::ListWorldExportJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorldExportJobSummary>> {
    let input = input.world_export_job_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_world_generation_jobs_output_world_generation_job_summaries(
    input: crate::operation::list_world_generation_jobs::ListWorldGenerationJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorldGenerationJobSummary>> {
    let input = input.world_generation_job_summaries;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_world_templates_output_template_summaries(
    input: crate::operation::list_world_templates::ListWorldTemplatesOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::TemplateSummary>> {
    let input = match input.template_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_worlds_output_world_summaries(
    input: crate::operation::list_worlds::ListWorldsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::WorldSummary>> {
    let input = match input.world_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
