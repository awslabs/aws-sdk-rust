// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum Error {
    /// <p>The failure percentage threshold percentage was met.</p>
    ConcurrentDeploymentException(crate::error::ConcurrentDeploymentException),
    /// <p>The request uses the same client token as a previous, but non-identical request. Do not reuse a client token with different requests, unless the requests are identical. </p>
    IdempotentParameterMismatchException(crate::error::IdempotentParameterMismatchException),
    /// <p>AWS RoboMaker experienced a service issue. Try your call again.</p>
    InternalServerException(crate::error::InternalServerException),
    /// <p>A parameter specified in a request is not valid, is unsupported, or cannot be used. The returned message provides an explanation of the error value.</p>
    InvalidParameterException(crate::error::InvalidParameterException),
    /// <p>The requested resource exceeds the maximum number allowed, or the number of concurrent stream requests exceeds the maximum number allowed. </p>
    LimitExceededException(crate::error::LimitExceededException),
    /// <p>The specified resource already exists.</p>
    ResourceAlreadyExistsException(crate::error::ResourceAlreadyExistsException),
    /// <p>The specified resource does not exist.</p>
    ResourceNotFoundException(crate::error::ResourceNotFoundException),
    /// <p>The request has failed due to a temporary failure of the server.</p>
    ServiceUnavailableException(crate::error::ServiceUnavailableException),
    /// <p>AWS RoboMaker is temporarily unable to process the request. Try your call again.</p>
    ThrottlingException(crate::error::ThrottlingException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    Unhandled(aws_smithy_types::error::Unhandled),
}
impl std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::ConcurrentDeploymentException(inner) => inner.fmt(f),
            Error::IdempotentParameterMismatchException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidParameterException(inner) => inner.fmt(f),
            Error::LimitExceededException(inner) => inner.fmt(f),
            Error::ResourceAlreadyExistsException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceUnavailableException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::Unhandled(inner) => inner.fmt(f),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDeleteWorldsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDeleteWorldsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDeleteWorldsError> for Error {
    fn from(err: crate::error::BatchDeleteWorldsError) -> Self {
        match err {
            crate::error::BatchDeleteWorldsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDeleteWorldsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::BatchDeleteWorldsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchDeleteWorldsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::BatchDescribeSimulationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::BatchDescribeSimulationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::BatchDescribeSimulationJobError> for Error {
    fn from(err: crate::error::BatchDescribeSimulationJobError) -> Self {
        match err {
            crate::error::BatchDescribeSimulationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::BatchDescribeSimulationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::BatchDescribeSimulationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::BatchDescribeSimulationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::BatchDescribeSimulationJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelDeploymentJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelDeploymentJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelDeploymentJobError> for Error {
    fn from(err: crate::error::CancelDeploymentJobError) -> Self {
        match err {
            crate::error::CancelDeploymentJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelDeploymentJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CancelDeploymentJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelDeploymentJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelDeploymentJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelSimulationJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelSimulationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelSimulationJobError> for Error {
    fn from(err: crate::error::CancelSimulationJobError) -> Self {
        match err {
            crate::error::CancelSimulationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelSimulationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CancelSimulationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelSimulationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelSimulationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelSimulationJobBatchError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelSimulationJobBatchError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelSimulationJobBatchError> for Error {
    fn from(err: crate::error::CancelSimulationJobBatchError) -> Self {
        match err {
            crate::error::CancelSimulationJobBatchError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelSimulationJobBatchError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CancelSimulationJobBatchError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelSimulationJobBatchError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelSimulationJobBatchError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelWorldExportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelWorldExportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelWorldExportJobError> for Error {
    fn from(err: crate::error::CancelWorldExportJobError) -> Self {
        match err {
            crate::error::CancelWorldExportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelWorldExportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CancelWorldExportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelWorldExportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelWorldExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CancelWorldGenerationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CancelWorldGenerationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CancelWorldGenerationJobError> for Error {
    fn from(err: crate::error::CancelWorldGenerationJobError) -> Self {
        match err {
            crate::error::CancelWorldGenerationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CancelWorldGenerationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CancelWorldGenerationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CancelWorldGenerationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CancelWorldGenerationJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateDeploymentJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateDeploymentJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateDeploymentJobError> for Error {
    fn from(err: crate::error::CreateDeploymentJobError) -> Self {
        match err {
            crate::error::CreateDeploymentJobError::ConcurrentDeploymentException(inner) => {
                Error::ConcurrentDeploymentException(inner)
            }
            crate::error::CreateDeploymentJobError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateDeploymentJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateDeploymentJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateDeploymentJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateDeploymentJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateDeploymentJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateDeploymentJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateFleetError> for Error {
    fn from(err: crate::error::CreateFleetError) -> Self {
        match err {
            crate::error::CreateFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateFleetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateFleetError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRobotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::CreateRobotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRobotError> for Error {
    fn from(err: crate::error::CreateRobotError) -> Self {
        match err {
            crate::error::CreateRobotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateRobotError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateRobotError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRobotError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateRobotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateRobotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRobotApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRobotApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRobotApplicationError> for Error {
    fn from(err: crate::error::CreateRobotApplicationError) -> Self {
        match err {
            crate::error::CreateRobotApplicationError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateRobotApplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateRobotApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateRobotApplicationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateRobotApplicationError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateRobotApplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateRobotApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateRobotApplicationVersionError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateRobotApplicationVersionError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateRobotApplicationVersionError> for Error {
    fn from(err: crate::error::CreateRobotApplicationVersionError) -> Self {
        match err {
            crate::error::CreateRobotApplicationVersionError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateRobotApplicationVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateRobotApplicationVersionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::CreateRobotApplicationVersionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateRobotApplicationVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateRobotApplicationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSimulationApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSimulationApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSimulationApplicationError> for Error {
    fn from(err: crate::error::CreateSimulationApplicationError) -> Self {
        match err {
            crate::error::CreateSimulationApplicationError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateSimulationApplicationError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateSimulationApplicationError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::CreateSimulationApplicationError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateSimulationApplicationError::ResourceAlreadyExistsException(inner) => Error::ResourceAlreadyExistsException(inner),
            crate::error::CreateSimulationApplicationError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateSimulationApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R>
    From<
        aws_smithy_http::result::SdkError<crate::error::CreateSimulationApplicationVersionError, R>,
    > for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<
            crate::error::CreateSimulationApplicationVersionError,
            R,
        >,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSimulationApplicationVersionError> for Error {
    fn from(err: crate::error::CreateSimulationApplicationVersionError) -> Self {
        match err {
            crate::error::CreateSimulationApplicationVersionError::IdempotentParameterMismatchException(inner) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateSimulationApplicationVersionError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::error::CreateSimulationApplicationVersionError::InvalidParameterException(inner) => Error::InvalidParameterException(inner),
            crate::error::CreateSimulationApplicationVersionError::LimitExceededException(inner) => Error::LimitExceededException(inner),
            crate::error::CreateSimulationApplicationVersionError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::error::CreateSimulationApplicationVersionError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateSimulationJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateSimulationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateSimulationJobError> for Error {
    fn from(err: crate::error::CreateSimulationJobError) -> Self {
        match err {
            crate::error::CreateSimulationJobError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::CreateSimulationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateSimulationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateSimulationJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateSimulationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateSimulationJobError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateSimulationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateSimulationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorldExportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateWorldExportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateWorldExportJobError> for Error {
    fn from(err: crate::error::CreateWorldExportJobError) -> Self {
        match err {
            crate::error::CreateWorldExportJobError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateWorldExportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateWorldExportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateWorldExportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateWorldExportJobError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateWorldExportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateWorldExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorldGenerationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateWorldGenerationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateWorldGenerationJobError> for Error {
    fn from(err: crate::error::CreateWorldGenerationJobError) -> Self {
        match err {
            crate::error::CreateWorldGenerationJobError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::CreateWorldGenerationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateWorldGenerationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateWorldGenerationJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateWorldGenerationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateWorldGenerationJobError::ServiceUnavailableException(inner) => {
                Error::ServiceUnavailableException(inner)
            }
            crate::error::CreateWorldGenerationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateWorldGenerationJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::CreateWorldTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::CreateWorldTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::CreateWorldTemplateError> for Error {
    fn from(err: crate::error::CreateWorldTemplateError) -> Self {
        match err {
            crate::error::CreateWorldTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::CreateWorldTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::CreateWorldTemplateError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::CreateWorldTemplateError::ResourceAlreadyExistsException(inner) => {
                Error::ResourceAlreadyExistsException(inner)
            }
            crate::error::CreateWorldTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::CreateWorldTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::CreateWorldTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteFleetError> for Error {
    fn from(err: crate::error::DeleteFleetError) -> Self {
        match err {
            crate::error::DeleteFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteFleetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRobotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeleteRobotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRobotError> for Error {
    fn from(err: crate::error::DeleteRobotError) -> Self {
        match err {
            crate::error::DeleteRobotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteRobotError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteRobotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteRobotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteRobotApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteRobotApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteRobotApplicationError> for Error {
    fn from(err: crate::error::DeleteRobotApplicationError) -> Self {
        match err {
            crate::error::DeleteRobotApplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteRobotApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteRobotApplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteRobotApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteSimulationApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteSimulationApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteSimulationApplicationError> for Error {
    fn from(err: crate::error::DeleteSimulationApplicationError) -> Self {
        match err {
            crate::error::DeleteSimulationApplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteSimulationApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteSimulationApplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteSimulationApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeleteWorldTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DeleteWorldTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeleteWorldTemplateError> for Error {
    fn from(err: crate::error::DeleteWorldTemplateError) -> Self {
        match err {
            crate::error::DeleteWorldTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeleteWorldTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeleteWorldTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeleteWorldTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeleteWorldTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DeregisterRobotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DeregisterRobotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DeregisterRobotError> for Error {
    fn from(err: crate::error::DeregisterRobotError) -> Self {
        match err {
            crate::error::DeregisterRobotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DeregisterRobotError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DeregisterRobotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DeregisterRobotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DeregisterRobotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeDeploymentJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeDeploymentJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeDeploymentJobError> for Error {
    fn from(err: crate::error::DescribeDeploymentJobError) -> Self {
        match err {
            crate::error::DescribeDeploymentJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeDeploymentJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeDeploymentJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeDeploymentJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeDeploymentJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeFleetError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeFleetError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeFleetError> for Error {
    fn from(err: crate::error::DescribeFleetError) -> Self {
        match err {
            crate::error::DescribeFleetError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeFleetError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeFleetError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeFleetError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeFleetError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRobotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeRobotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRobotError> for Error {
    fn from(err: crate::error::DescribeRobotError) -> Self {
        match err {
            crate::error::DescribeRobotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeRobotError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeRobotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeRobotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeRobotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeRobotApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeRobotApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeRobotApplicationError> for Error {
    fn from(err: crate::error::DescribeRobotApplicationError) -> Self {
        match err {
            crate::error::DescribeRobotApplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeRobotApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeRobotApplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeRobotApplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeRobotApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSimulationApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSimulationApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSimulationApplicationError> for Error {
    fn from(err: crate::error::DescribeSimulationApplicationError) -> Self {
        match err {
            crate::error::DescribeSimulationApplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSimulationApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeSimulationApplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSimulationApplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSimulationApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSimulationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSimulationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSimulationJobError> for Error {
    fn from(err: crate::error::DescribeSimulationJobError) -> Self {
        match err {
            crate::error::DescribeSimulationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSimulationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeSimulationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSimulationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeSimulationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeSimulationJobBatchError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeSimulationJobBatchError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeSimulationJobBatchError> for Error {
    fn from(err: crate::error::DescribeSimulationJobBatchError) -> Self {
        match err {
            crate::error::DescribeSimulationJobBatchError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeSimulationJobBatchError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeSimulationJobBatchError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeSimulationJobBatchError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWorldError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::DescribeWorldError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWorldError> for Error {
    fn from(err: crate::error::DescribeWorldError) -> Self {
        match err {
            crate::error::DescribeWorldError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeWorldError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeWorldError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeWorldError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeWorldError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWorldExportJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeWorldExportJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWorldExportJobError> for Error {
    fn from(err: crate::error::DescribeWorldExportJobError) -> Self {
        match err {
            crate::error::DescribeWorldExportJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeWorldExportJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeWorldExportJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeWorldExportJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeWorldExportJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWorldGenerationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeWorldGenerationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWorldGenerationJobError> for Error {
    fn from(err: crate::error::DescribeWorldGenerationJobError) -> Self {
        match err {
            crate::error::DescribeWorldGenerationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeWorldGenerationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeWorldGenerationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeWorldGenerationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeWorldGenerationJobError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::DescribeWorldTemplateError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::DescribeWorldTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::DescribeWorldTemplateError> for Error {
    fn from(err: crate::error::DescribeWorldTemplateError) -> Self {
        match err {
            crate::error::DescribeWorldTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::DescribeWorldTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::DescribeWorldTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::DescribeWorldTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::DescribeWorldTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::GetWorldTemplateBodyError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::GetWorldTemplateBodyError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::GetWorldTemplateBodyError> for Error {
    fn from(err: crate::error::GetWorldTemplateBodyError) -> Self {
        match err {
            crate::error::GetWorldTemplateBodyError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::GetWorldTemplateBodyError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::GetWorldTemplateBodyError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::GetWorldTemplateBodyError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::GetWorldTemplateBodyError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListDeploymentJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListDeploymentJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListDeploymentJobsError> for Error {
    fn from(err: crate::error::ListDeploymentJobsError) -> Self {
        match err {
            crate::error::ListDeploymentJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListDeploymentJobsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListDeploymentJobsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListDeploymentJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListDeploymentJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListFleetsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListFleetsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListFleetsError> for Error {
    fn from(err: crate::error::ListFleetsError) -> Self {
        match err {
            crate::error::ListFleetsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListFleetsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListFleetsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListFleetsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListFleetsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRobotApplicationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListRobotApplicationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRobotApplicationsError> for Error {
    fn from(err: crate::error::ListRobotApplicationsError) -> Self {
        match err {
            crate::error::ListRobotApplicationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListRobotApplicationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListRobotApplicationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRobotApplicationsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListRobotsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListRobotsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListRobotsError> for Error {
    fn from(err: crate::error::ListRobotsError) -> Self {
        match err {
            crate::error::ListRobotsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListRobotsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListRobotsError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListRobotsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListRobotsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSimulationApplicationsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSimulationApplicationsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSimulationApplicationsError> for Error {
    fn from(err: crate::error::ListSimulationApplicationsError) -> Self {
        match err {
            crate::error::ListSimulationApplicationsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSimulationApplicationsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListSimulationApplicationsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSimulationApplicationsError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSimulationJobBatchesError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSimulationJobBatchesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSimulationJobBatchesError> for Error {
    fn from(err: crate::error::ListSimulationJobBatchesError) -> Self {
        match err {
            crate::error::ListSimulationJobBatchesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSimulationJobBatchesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListSimulationJobBatchesError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListSimulationJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListSimulationJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListSimulationJobsError> for Error {
    fn from(err: crate::error::ListSimulationJobsError) -> Self {
        match err {
            crate::error::ListSimulationJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListSimulationJobsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListSimulationJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListSimulationJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListTagsForResourceError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListTagsForResourceError> for Error {
    fn from(err: crate::error::ListTagsForResourceError) -> Self {
        match err {
            crate::error::ListTagsForResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListTagsForResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::ListTagsForResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorldExportJobsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListWorldExportJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWorldExportJobsError> for Error {
    fn from(err: crate::error::ListWorldExportJobsError) -> Self {
        match err {
            crate::error::ListWorldExportJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListWorldExportJobsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListWorldExportJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListWorldExportJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorldGenerationJobsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListWorldGenerationJobsError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWorldGenerationJobsError> for Error {
    fn from(err: crate::error::ListWorldGenerationJobsError) -> Self {
        match err {
            crate::error::ListWorldGenerationJobsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListWorldGenerationJobsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListWorldGenerationJobsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListWorldGenerationJobsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorldsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::ListWorldsError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWorldsError> for Error {
    fn from(err: crate::error::ListWorldsError) -> Self {
        match err {
            crate::error::ListWorldsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListWorldsError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListWorldsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListWorldsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::ListWorldTemplatesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::ListWorldTemplatesError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::ListWorldTemplatesError> for Error {
    fn from(err: crate::error::ListWorldTemplatesError) -> Self {
        match err {
            crate::error::ListWorldTemplatesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::ListWorldTemplatesError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::ListWorldTemplatesError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::ListWorldTemplatesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RegisterRobotError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::RegisterRobotError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RegisterRobotError> for Error {
    fn from(err: crate::error::RegisterRobotError) -> Self {
        match err {
            crate::error::RegisterRobotError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RegisterRobotError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RegisterRobotError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RegisterRobotError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RegisterRobotError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RegisterRobotError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::RestartSimulationJobError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::RestartSimulationJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::RestartSimulationJobError> for Error {
    fn from(err: crate::error::RestartSimulationJobError) -> Self {
        match err {
            crate::error::RestartSimulationJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::RestartSimulationJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::RestartSimulationJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::RestartSimulationJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::RestartSimulationJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::RestartSimulationJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::StartSimulationJobBatchError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::StartSimulationJobBatchError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::StartSimulationJobBatchError> for Error {
    fn from(err: crate::error::StartSimulationJobBatchError) -> Self {
        match err {
            crate::error::StartSimulationJobBatchError::IdempotentParameterMismatchException(
                inner,
            ) => Error::IdempotentParameterMismatchException(inner),
            crate::error::StartSimulationJobBatchError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::StartSimulationJobBatchError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::StartSimulationJobBatchError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::StartSimulationJobBatchError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::StartSimulationJobBatchError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::SyncDeploymentJobError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::SyncDeploymentJobError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::SyncDeploymentJobError> for Error {
    fn from(err: crate::error::SyncDeploymentJobError) -> Self {
        match err {
            crate::error::SyncDeploymentJobError::ConcurrentDeploymentException(inner) => {
                Error::ConcurrentDeploymentException(inner)
            }
            crate::error::SyncDeploymentJobError::IdempotentParameterMismatchException(inner) => {
                Error::IdempotentParameterMismatchException(inner)
            }
            crate::error::SyncDeploymentJobError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::SyncDeploymentJobError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::SyncDeploymentJobError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::SyncDeploymentJobError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::SyncDeploymentJobError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::SyncDeploymentJobError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::TagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::TagResourceError> for Error {
    fn from(err: crate::error::TagResourceError) -> Self {
        match err {
            crate::error::TagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::TagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::TagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::TagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: aws_smithy_http::result::SdkError<crate::error::UntagResourceError, R>) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UntagResourceError> for Error {
    fn from(err: crate::error::UntagResourceError) -> Self {
        match err {
            crate::error::UntagResourceError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UntagResourceError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UntagResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UntagResourceError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateRobotApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateRobotApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateRobotApplicationError> for Error {
    fn from(err: crate::error::UpdateRobotApplicationError) -> Self {
        match err {
            crate::error::UpdateRobotApplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateRobotApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateRobotApplicationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateRobotApplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateRobotApplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateRobotApplicationError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateSimulationApplicationError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateSimulationApplicationError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateSimulationApplicationError> for Error {
    fn from(err: crate::error::UpdateSimulationApplicationError) -> Self {
        match err {
            crate::error::UpdateSimulationApplicationError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateSimulationApplicationError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateSimulationApplicationError::LimitExceededException(inner) => {
                Error::LimitExceededException(inner)
            }
            crate::error::UpdateSimulationApplicationError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateSimulationApplicationError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateSimulationApplicationError::Unhandled(inner) => {
                Error::Unhandled(inner)
            }
        }
    }
}
impl<R> From<aws_smithy_http::result::SdkError<crate::error::UpdateWorldTemplateError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: aws_smithy_http::result::SdkError<crate::error::UpdateWorldTemplateError, R>,
    ) -> Self {
        match err {
            aws_smithy_http::result::SdkError::ServiceError(context) => {
                Self::from(context.into_err())
            }
            _ => Error::Unhandled(
                aws_smithy_types::error::Unhandled::builder()
                    .meta(
                        aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                    )
                    .source(err)
                    .build(),
            ),
        }
    }
}
impl From<crate::error::UpdateWorldTemplateError> for Error {
    fn from(err: crate::error::UpdateWorldTemplateError) -> Self {
        match err {
            crate::error::UpdateWorldTemplateError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::error::UpdateWorldTemplateError::InvalidParameterException(inner) => {
                Error::InvalidParameterException(inner)
            }
            crate::error::UpdateWorldTemplateError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::error::UpdateWorldTemplateError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::error::UpdateWorldTemplateError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl std::error::Error for Error {}
impl aws_http::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::ConcurrentDeploymentException(e) => e.request_id(),
            Self::IdempotentParameterMismatchException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidParameterException(e) => e.request_id(),
            Self::LimitExceededException(e) => e.request_id(),
            Self::ResourceAlreadyExistsException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceUnavailableException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::Unhandled(e) => e.request_id(),
        }
    }
}
