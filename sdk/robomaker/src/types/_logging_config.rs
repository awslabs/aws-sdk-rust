// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The logging configuration.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct LoggingConfig {
    /// <p>A boolean indicating whether to record all ROS topics.</p> <important>
    /// <p>This API is no longer supported and will throw an error if used.</p>
    /// </important>
    #[deprecated(
        note = "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
    )]
    #[doc(hidden)]
    pub record_all_ros_topics: std::option::Option<bool>,
}
impl LoggingConfig {
    /// <p>A boolean indicating whether to record all ROS topics.</p> <important>
    /// <p>This API is no longer supported and will throw an error if used.</p>
    /// </important>
    #[deprecated(
        note = "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
    )]
    pub fn record_all_ros_topics(&self) -> std::option::Option<bool> {
        self.record_all_ros_topics
    }
}
impl LoggingConfig {
    /// Creates a new builder-style object to manufacture [`LoggingConfig`](crate::types::LoggingConfig).
    pub fn builder() -> crate::types::builders::LoggingConfigBuilder {
        crate::types::builders::LoggingConfigBuilder::default()
    }
}

/// A builder for [`LoggingConfig`](crate::types::LoggingConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct LoggingConfigBuilder {
    pub(crate) record_all_ros_topics: std::option::Option<bool>,
}
impl LoggingConfigBuilder {
    /// <p>A boolean indicating whether to record all ROS topics.</p> <important>
    /// <p>This API is no longer supported and will throw an error if used.</p>
    /// </important>
    #[deprecated(
        note = "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
    )]
    pub fn record_all_ros_topics(mut self, input: bool) -> Self {
        self.record_all_ros_topics = Some(input);
        self
    }
    /// <p>A boolean indicating whether to record all ROS topics.</p> <important>
    /// <p>This API is no longer supported and will throw an error if used.</p>
    /// </important>
    #[deprecated(
        note = "AWS RoboMaker is ending support for ROS software suite. For additional information, see https://docs.aws.amazon.com/robomaker/latest/dg/software-support-policy.html."
    )]
    pub fn set_record_all_ros_topics(mut self, input: std::option::Option<bool>) -> Self {
        self.record_all_ros_topics = input;
        self
    }
    /// Consumes the builder and constructs a [`LoggingConfig`](crate::types::LoggingConfig).
    pub fn build(self) -> crate::types::LoggingConfig {
        crate::types::LoggingConfig {
            record_all_ros_topics: self.record_all_ros_topics,
        }
    }
}
