// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the batch policy.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct BatchPolicy {
    /// <p>The amount of time, in seconds, to wait for the batch to complete. </p>
    /// <p>If a batch times out, and there are pending requests that were failing due to an internal failure (like <code>InternalServiceError</code>), they will be moved to the failed list and the batch status will be <code>Failed</code>. If the pending requests were failing for any other reason, the failed pending requests will be moved to the failed list and the batch status will be <code>TimedOut</code>. </p>
    #[doc(hidden)]
    pub timeout_in_seconds: std::option::Option<i64>,
    /// <p>The number of active simulation jobs create as part of the batch that can be in an active state at the same time. </p>
    /// <p>Active states include: <code>Pending</code>,<code>Preparing</code>, <code>Running</code>, <code>Restarting</code>, <code>RunningFailed</code> and <code>Terminating</code>. All other states are terminal states. </p>
    #[doc(hidden)]
    pub max_concurrency: std::option::Option<i32>,
}
impl BatchPolicy {
    /// <p>The amount of time, in seconds, to wait for the batch to complete. </p>
    /// <p>If a batch times out, and there are pending requests that were failing due to an internal failure (like <code>InternalServiceError</code>), they will be moved to the failed list and the batch status will be <code>Failed</code>. If the pending requests were failing for any other reason, the failed pending requests will be moved to the failed list and the batch status will be <code>TimedOut</code>. </p>
    pub fn timeout_in_seconds(&self) -> std::option::Option<i64> {
        self.timeout_in_seconds
    }
    /// <p>The number of active simulation jobs create as part of the batch that can be in an active state at the same time. </p>
    /// <p>Active states include: <code>Pending</code>,<code>Preparing</code>, <code>Running</code>, <code>Restarting</code>, <code>RunningFailed</code> and <code>Terminating</code>. All other states are terminal states. </p>
    pub fn max_concurrency(&self) -> std::option::Option<i32> {
        self.max_concurrency
    }
}
impl BatchPolicy {
    /// Creates a new builder-style object to manufacture [`BatchPolicy`](crate::types::BatchPolicy).
    pub fn builder() -> crate::types::builders::BatchPolicyBuilder {
        crate::types::builders::BatchPolicyBuilder::default()
    }
}

/// A builder for [`BatchPolicy`](crate::types::BatchPolicy).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct BatchPolicyBuilder {
    pub(crate) timeout_in_seconds: std::option::Option<i64>,
    pub(crate) max_concurrency: std::option::Option<i32>,
}
impl BatchPolicyBuilder {
    /// <p>The amount of time, in seconds, to wait for the batch to complete. </p>
    /// <p>If a batch times out, and there are pending requests that were failing due to an internal failure (like <code>InternalServiceError</code>), they will be moved to the failed list and the batch status will be <code>Failed</code>. If the pending requests were failing for any other reason, the failed pending requests will be moved to the failed list and the batch status will be <code>TimedOut</code>. </p>
    pub fn timeout_in_seconds(mut self, input: i64) -> Self {
        self.timeout_in_seconds = Some(input);
        self
    }
    /// <p>The amount of time, in seconds, to wait for the batch to complete. </p>
    /// <p>If a batch times out, and there are pending requests that were failing due to an internal failure (like <code>InternalServiceError</code>), they will be moved to the failed list and the batch status will be <code>Failed</code>. If the pending requests were failing for any other reason, the failed pending requests will be moved to the failed list and the batch status will be <code>TimedOut</code>. </p>
    pub fn set_timeout_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.timeout_in_seconds = input;
        self
    }
    /// <p>The number of active simulation jobs create as part of the batch that can be in an active state at the same time. </p>
    /// <p>Active states include: <code>Pending</code>,<code>Preparing</code>, <code>Running</code>, <code>Restarting</code>, <code>RunningFailed</code> and <code>Terminating</code>. All other states are terminal states. </p>
    pub fn max_concurrency(mut self, input: i32) -> Self {
        self.max_concurrency = Some(input);
        self
    }
    /// <p>The number of active simulation jobs create as part of the batch that can be in an active state at the same time. </p>
    /// <p>Active states include: <code>Pending</code>,<code>Preparing</code>, <code>Running</code>, <code>Restarting</code>, <code>RunningFailed</code> and <code>Terminating</code>. All other states are terminal states. </p>
    pub fn set_max_concurrency(mut self, input: std::option::Option<i32>) -> Self {
        self.max_concurrency = input;
        self
    }
    /// Consumes the builder and constructs a [`BatchPolicy`](crate::types::BatchPolicy).
    pub fn build(self) -> crate::types::BatchPolicy {
        crate::types::BatchPolicy {
            timeout_in_seconds: self.timeout_in_seconds,
            max_concurrency: self.max_concurrency,
        }
    }
}
