// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a simulation job request.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct SimulationJobRequest {
    /// <p>The output location.</p>
    #[doc(hidden)]
    pub output_location: std::option::Option<crate::types::OutputLocation>,
    /// <p>The logging configuration.</p>
    #[doc(hidden)]
    pub logging_config: std::option::Option<crate::types::LoggingConfig>,
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    #[doc(hidden)]
    pub max_job_duration_in_seconds: i64,
    /// <p>The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    #[doc(hidden)]
    pub iam_role: std::option::Option<std::string::String>,
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    #[doc(hidden)]
    pub failure_behavior: std::option::Option<crate::types::FailureBehavior>,
    /// <p>A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. </p>
    #[doc(hidden)]
    pub use_default_applications: std::option::Option<bool>,
    /// <p>The robot applications to use in the simulation job.</p>
    #[doc(hidden)]
    pub robot_applications:
        std::option::Option<std::vec::Vec<crate::types::RobotApplicationConfig>>,
    /// <p>The simulation applications to use in the simulation job.</p>
    #[doc(hidden)]
    pub simulation_applications:
        std::option::Option<std::vec::Vec<crate::types::SimulationApplicationConfig>>,
    /// <p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note>
    /// <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p>
    /// </note>
    #[doc(hidden)]
    pub data_sources: std::option::Option<std::vec::Vec<crate::types::DataSourceConfig>>,
    /// <p>If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.</p>
    #[doc(hidden)]
    pub vpc_config: std::option::Option<crate::types::VpcConfig>,
    /// <p>Compute information for the simulation job</p>
    #[doc(hidden)]
    pub compute: std::option::Option<crate::types::Compute>,
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job request.</p>
    #[doc(hidden)]
    pub tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SimulationJobRequest {
    /// <p>The output location.</p>
    pub fn output_location(&self) -> std::option::Option<&crate::types::OutputLocation> {
        self.output_location.as_ref()
    }
    /// <p>The logging configuration.</p>
    pub fn logging_config(&self) -> std::option::Option<&crate::types::LoggingConfig> {
        self.logging_config.as_ref()
    }
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    pub fn max_job_duration_in_seconds(&self) -> i64 {
        self.max_job_duration_in_seconds
    }
    /// <p>The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    pub fn iam_role(&self) -> std::option::Option<&str> {
        self.iam_role.as_deref()
    }
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    pub fn failure_behavior(&self) -> std::option::Option<&crate::types::FailureBehavior> {
        self.failure_behavior.as_ref()
    }
    /// <p>A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. </p>
    pub fn use_default_applications(&self) -> std::option::Option<bool> {
        self.use_default_applications
    }
    /// <p>The robot applications to use in the simulation job.</p>
    pub fn robot_applications(
        &self,
    ) -> std::option::Option<&[crate::types::RobotApplicationConfig]> {
        self.robot_applications.as_deref()
    }
    /// <p>The simulation applications to use in the simulation job.</p>
    pub fn simulation_applications(
        &self,
    ) -> std::option::Option<&[crate::types::SimulationApplicationConfig]> {
        self.simulation_applications.as_deref()
    }
    /// <p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note>
    /// <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p>
    /// </note>
    pub fn data_sources(&self) -> std::option::Option<&[crate::types::DataSourceConfig]> {
        self.data_sources.as_deref()
    }
    /// <p>If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.</p>
    pub fn vpc_config(&self) -> std::option::Option<&crate::types::VpcConfig> {
        self.vpc_config.as_ref()
    }
    /// <p>Compute information for the simulation job</p>
    pub fn compute(&self) -> std::option::Option<&crate::types::Compute> {
        self.compute.as_ref()
    }
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job request.</p>
    pub fn tags(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.tags.as_ref()
    }
}
impl SimulationJobRequest {
    /// Creates a new builder-style object to manufacture [`SimulationJobRequest`](crate::types::SimulationJobRequest).
    pub fn builder() -> crate::types::builders::SimulationJobRequestBuilder {
        crate::types::builders::SimulationJobRequestBuilder::default()
    }
}

/// A builder for [`SimulationJobRequest`](crate::types::SimulationJobRequest).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct SimulationJobRequestBuilder {
    pub(crate) output_location: std::option::Option<crate::types::OutputLocation>,
    pub(crate) logging_config: std::option::Option<crate::types::LoggingConfig>,
    pub(crate) max_job_duration_in_seconds: std::option::Option<i64>,
    pub(crate) iam_role: std::option::Option<std::string::String>,
    pub(crate) failure_behavior: std::option::Option<crate::types::FailureBehavior>,
    pub(crate) use_default_applications: std::option::Option<bool>,
    pub(crate) robot_applications:
        std::option::Option<std::vec::Vec<crate::types::RobotApplicationConfig>>,
    pub(crate) simulation_applications:
        std::option::Option<std::vec::Vec<crate::types::SimulationApplicationConfig>>,
    pub(crate) data_sources: std::option::Option<std::vec::Vec<crate::types::DataSourceConfig>>,
    pub(crate) vpc_config: std::option::Option<crate::types::VpcConfig>,
    pub(crate) compute: std::option::Option<crate::types::Compute>,
    pub(crate) tags:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl SimulationJobRequestBuilder {
    /// <p>The output location.</p>
    pub fn output_location(mut self, input: crate::types::OutputLocation) -> Self {
        self.output_location = Some(input);
        self
    }
    /// <p>The output location.</p>
    pub fn set_output_location(
        mut self,
        input: std::option::Option<crate::types::OutputLocation>,
    ) -> Self {
        self.output_location = input;
        self
    }
    /// <p>The logging configuration.</p>
    pub fn logging_config(mut self, input: crate::types::LoggingConfig) -> Self {
        self.logging_config = Some(input);
        self
    }
    /// <p>The logging configuration.</p>
    pub fn set_logging_config(
        mut self,
        input: std::option::Option<crate::types::LoggingConfig>,
    ) -> Self {
        self.logging_config = input;
        self
    }
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    pub fn max_job_duration_in_seconds(mut self, input: i64) -> Self {
        self.max_job_duration_in_seconds = Some(input);
        self
    }
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    pub fn set_max_job_duration_in_seconds(mut self, input: std::option::Option<i64>) -> Self {
        self.max_job_duration_in_seconds = input;
        self
    }
    /// <p>The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    pub fn iam_role(mut self, input: impl Into<std::string::String>) -> Self {
        self.iam_role = Some(input.into());
        self
    }
    /// <p>The IAM role name that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    pub fn set_iam_role(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.iam_role = input;
        self
    }
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    pub fn failure_behavior(mut self, input: crate::types::FailureBehavior) -> Self {
        self.failure_behavior = Some(input);
        self
    }
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    pub fn set_failure_behavior(
        mut self,
        input: std::option::Option<crate::types::FailureBehavior>,
    ) -> Self {
        self.failure_behavior = input;
        self
    }
    /// <p>A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. </p>
    pub fn use_default_applications(mut self, input: bool) -> Self {
        self.use_default_applications = Some(input);
        self
    }
    /// <p>A Boolean indicating whether to use default applications in the simulation job. Default applications include Gazebo, rqt, rviz and terminal access. </p>
    pub fn set_use_default_applications(mut self, input: std::option::Option<bool>) -> Self {
        self.use_default_applications = input;
        self
    }
    /// Appends an item to `robot_applications`.
    ///
    /// To override the contents of this collection use [`set_robot_applications`](Self::set_robot_applications).
    ///
    /// <p>The robot applications to use in the simulation job.</p>
    pub fn robot_applications(mut self, input: crate::types::RobotApplicationConfig) -> Self {
        let mut v = self.robot_applications.unwrap_or_default();
        v.push(input);
        self.robot_applications = Some(v);
        self
    }
    /// <p>The robot applications to use in the simulation job.</p>
    pub fn set_robot_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::RobotApplicationConfig>>,
    ) -> Self {
        self.robot_applications = input;
        self
    }
    /// Appends an item to `simulation_applications`.
    ///
    /// To override the contents of this collection use [`set_simulation_applications`](Self::set_simulation_applications).
    ///
    /// <p>The simulation applications to use in the simulation job.</p>
    pub fn simulation_applications(
        mut self,
        input: crate::types::SimulationApplicationConfig,
    ) -> Self {
        let mut v = self.simulation_applications.unwrap_or_default();
        v.push(input);
        self.simulation_applications = Some(v);
        self
    }
    /// <p>The simulation applications to use in the simulation job.</p>
    pub fn set_simulation_applications(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::SimulationApplicationConfig>>,
    ) -> Self {
        self.simulation_applications = input;
        self
    }
    /// Appends an item to `data_sources`.
    ///
    /// To override the contents of this collection use [`set_data_sources`](Self::set_data_sources).
    ///
    /// <p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note>
    /// <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p>
    /// </note>
    pub fn data_sources(mut self, input: crate::types::DataSourceConfig) -> Self {
        let mut v = self.data_sources.unwrap_or_default();
        v.push(input);
        self.data_sources = Some(v);
        self
    }
    /// <p>Specify data sources to mount read-only files from S3 into your simulation. These files are available under <code>/opt/robomaker/datasources/data_source_name</code>. </p> <note>
    /// <p>There is a limit of 100 files and a combined size of 25GB for all <code>DataSourceConfig</code> objects. </p>
    /// </note>
    pub fn set_data_sources(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::DataSourceConfig>>,
    ) -> Self {
        self.data_sources = input;
        self
    }
    /// <p>If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfig) -> Self {
        self.vpc_config = Some(input);
        self
    }
    /// <p>If your simulation job accesses resources in a VPC, you provide this parameter identifying the list of security group IDs and subnet IDs. These must belong to the same VPC. You must provide at least one security group and two subnet IDs.</p>
    pub fn set_vpc_config(mut self, input: std::option::Option<crate::types::VpcConfig>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>Compute information for the simulation job</p>
    pub fn compute(mut self, input: crate::types::Compute) -> Self {
        self.compute = Some(input);
        self
    }
    /// <p>Compute information for the simulation job</p>
    pub fn set_compute(mut self, input: std::option::Option<crate::types::Compute>) -> Self {
        self.compute = input;
        self
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job request.</p>
    pub fn tags(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = Some(hash_map);
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job request.</p>
    pub fn set_tags(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.tags = input;
        self
    }
    /// Consumes the builder and constructs a [`SimulationJobRequest`](crate::types::SimulationJobRequest).
    pub fn build(self) -> crate::types::SimulationJobRequest {
        crate::types::SimulationJobRequest {
            output_location: self.output_location,
            logging_config: self.logging_config,
            max_job_duration_in_seconds: self.max_job_duration_in_seconds.unwrap_or_default(),
            iam_role: self.iam_role,
            failure_behavior: self.failure_behavior,
            use_default_applications: self.use_default_applications,
            robot_applications: self.robot_applications,
            simulation_applications: self.simulation_applications,
            data_sources: self.data_sources,
            vpc_config: self.vpc_config,
            compute: self.compute,
            tags: self.tags,
        }
    }
}
