// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a simulation job.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SimulationJob {
    /// <p>The Amazon Resource Name (ARN) of the simulation job.</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The name of the simulation job.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>Status of the simulation job.</p>
    pub status: ::std::option::Option<crate::types::SimulationJobStatus>,
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last started.</p>
    pub last_started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last updated.</p>
    pub last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    pub failure_behavior: ::std::option::Option<crate::types::FailureBehavior>,
    /// <p>The failure code of the simulation job if it failed.</p>
    pub failure_code: ::std::option::Option<crate::types::SimulationJobErrorCode>,
    /// <p>The reason why the simulation job failed.</p>
    pub failure_reason: ::std::option::Option<::std::string::String>,
    /// <p>A unique identifier for this <code>SimulationJob</code> request.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
    /// <p>Location for output files generated by the simulation job.</p>
    pub output_location: ::std::option::Option<crate::types::OutputLocation>,
    /// <p>The logging configuration.</p>
    pub logging_config: ::std::option::Option<crate::types::LoggingConfig>,
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    pub max_job_duration_in_seconds: i64,
    /// <p>The simulation job execution duration in milliseconds.</p>
    pub simulation_time_millis: i64,
    /// <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    pub iam_role: ::std::option::Option<::std::string::String>,
    /// <p>A list of robot applications.</p>
    pub robot_applications: ::std::option::Option<::std::vec::Vec<crate::types::RobotApplicationConfig>>,
    /// <p>A list of simulation applications.</p>
    pub simulation_applications: ::std::option::Option<::std::vec::Vec<crate::types::SimulationApplicationConfig>>,
    /// <p>The data sources for the simulation job.</p>
    pub data_sources: ::std::option::Option<::std::vec::Vec<crate::types::DataSource>>,
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job.</p>
    pub tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>VPC configuration information.</p>
    pub vpc_config: ::std::option::Option<crate::types::VpcConfigResponse>,
    /// <p>Information about a network interface.</p>
    pub network_interface: ::std::option::Option<crate::types::NetworkInterface>,
    /// <p>Compute information for the simulation job</p>
    pub compute: ::std::option::Option<crate::types::ComputeResponse>,
}
impl SimulationJob {
    /// <p>The Amazon Resource Name (ARN) of the simulation job.</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The name of the simulation job.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>Status of the simulation job.</p>
    pub fn status(&self) -> ::std::option::Option<&crate::types::SimulationJobStatus> {
        self.status.as_ref()
    }
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last started.</p>
    pub fn last_started_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_started_at.as_ref()
    }
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last updated.</p>
    pub fn last_updated_at(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_updated_at.as_ref()
    }
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    pub fn failure_behavior(&self) -> ::std::option::Option<&crate::types::FailureBehavior> {
        self.failure_behavior.as_ref()
    }
    /// <p>The failure code of the simulation job if it failed.</p>
    pub fn failure_code(&self) -> ::std::option::Option<&crate::types::SimulationJobErrorCode> {
        self.failure_code.as_ref()
    }
    /// <p>The reason why the simulation job failed.</p>
    pub fn failure_reason(&self) -> ::std::option::Option<&str> {
        self.failure_reason.as_deref()
    }
    /// <p>A unique identifier for this <code>SimulationJob</code> request.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
    /// <p>Location for output files generated by the simulation job.</p>
    pub fn output_location(&self) -> ::std::option::Option<&crate::types::OutputLocation> {
        self.output_location.as_ref()
    }
    /// <p>The logging configuration.</p>
    pub fn logging_config(&self) -> ::std::option::Option<&crate::types::LoggingConfig> {
        self.logging_config.as_ref()
    }
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    pub fn max_job_duration_in_seconds(&self) -> i64 {
        self.max_job_duration_in_seconds
    }
    /// <p>The simulation job execution duration in milliseconds.</p>
    pub fn simulation_time_millis(&self) -> i64 {
        self.simulation_time_millis
    }
    /// <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    pub fn iam_role(&self) -> ::std::option::Option<&str> {
        self.iam_role.as_deref()
    }
    /// <p>A list of robot applications.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.robot_applications.is_none()`.
    pub fn robot_applications(&self) -> &[crate::types::RobotApplicationConfig] {
        self.robot_applications.as_deref().unwrap_or_default()
    }
    /// <p>A list of simulation applications.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.simulation_applications.is_none()`.
    pub fn simulation_applications(&self) -> &[crate::types::SimulationApplicationConfig] {
        self.simulation_applications.as_deref().unwrap_or_default()
    }
    /// <p>The data sources for the simulation job.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.data_sources.is_none()`.
    pub fn data_sources(&self) -> &[crate::types::DataSource] {
        self.data_sources.as_deref().unwrap_or_default()
    }
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job.</p>
    pub fn tags(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.tags.as_ref()
    }
    /// <p>VPC configuration information.</p>
    pub fn vpc_config(&self) -> ::std::option::Option<&crate::types::VpcConfigResponse> {
        self.vpc_config.as_ref()
    }
    /// <p>Information about a network interface.</p>
    pub fn network_interface(&self) -> ::std::option::Option<&crate::types::NetworkInterface> {
        self.network_interface.as_ref()
    }
    /// <p>Compute information for the simulation job</p>
    pub fn compute(&self) -> ::std::option::Option<&crate::types::ComputeResponse> {
        self.compute.as_ref()
    }
}
impl SimulationJob {
    /// Creates a new builder-style object to manufacture [`SimulationJob`](crate::types::SimulationJob).
    pub fn builder() -> crate::types::builders::SimulationJobBuilder {
        crate::types::builders::SimulationJobBuilder::default()
    }
}

/// A builder for [`SimulationJob`](crate::types::SimulationJob).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SimulationJobBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::SimulationJobStatus>,
    pub(crate) last_started_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_behavior: ::std::option::Option<crate::types::FailureBehavior>,
    pub(crate) failure_code: ::std::option::Option<crate::types::SimulationJobErrorCode>,
    pub(crate) failure_reason: ::std::option::Option<::std::string::String>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
    pub(crate) output_location: ::std::option::Option<crate::types::OutputLocation>,
    pub(crate) logging_config: ::std::option::Option<crate::types::LoggingConfig>,
    pub(crate) max_job_duration_in_seconds: ::std::option::Option<i64>,
    pub(crate) simulation_time_millis: ::std::option::Option<i64>,
    pub(crate) iam_role: ::std::option::Option<::std::string::String>,
    pub(crate) robot_applications: ::std::option::Option<::std::vec::Vec<crate::types::RobotApplicationConfig>>,
    pub(crate) simulation_applications: ::std::option::Option<::std::vec::Vec<crate::types::SimulationApplicationConfig>>,
    pub(crate) data_sources: ::std::option::Option<::std::vec::Vec<crate::types::DataSource>>,
    pub(crate) tags: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) vpc_config: ::std::option::Option<crate::types::VpcConfigResponse>,
    pub(crate) network_interface: ::std::option::Option<crate::types::NetworkInterface>,
    pub(crate) compute: ::std::option::Option<crate::types::ComputeResponse>,
}
impl SimulationJobBuilder {
    /// <p>The Amazon Resource Name (ARN) of the simulation job.</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the simulation job.</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the simulation job.</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The name of the simulation job.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the simulation job.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the simulation job.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>Status of the simulation job.</p>
    pub fn status(mut self, input: crate::types::SimulationJobStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status of the simulation job.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::SimulationJobStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Status of the simulation job.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::SimulationJobStatus> {
        &self.status
    }
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last started.</p>
    pub fn last_started_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_started_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last started.</p>
    pub fn set_last_started_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_started_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last started.</p>
    pub fn get_last_started_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_started_at
    }
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last updated.</p>
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last updated.</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>The time, in milliseconds since the epoch, when the simulation job was last updated.</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    pub fn failure_behavior(mut self, input: crate::types::FailureBehavior) -> Self {
        self.failure_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    pub fn set_failure_behavior(mut self, input: ::std::option::Option<crate::types::FailureBehavior>) -> Self {
        self.failure_behavior = input;
        self
    }
    /// <p>The failure behavior the simulation job.</p>
    /// <dl>
    /// <dt>
    /// Continue
    /// </dt>
    /// <dd>
    /// <p>Leaves the host running for its maximum timeout duration after a <code>4XX</code> error code.</p>
    /// </dd>
    /// <dt>
    /// Fail
    /// </dt>
    /// <dd>
    /// <p>Stop the simulation job and terminate the instance.</p>
    /// </dd>
    /// </dl>
    pub fn get_failure_behavior(&self) -> &::std::option::Option<crate::types::FailureBehavior> {
        &self.failure_behavior
    }
    /// <p>The failure code of the simulation job if it failed.</p>
    pub fn failure_code(mut self, input: crate::types::SimulationJobErrorCode) -> Self {
        self.failure_code = ::std::option::Option::Some(input);
        self
    }
    /// <p>The failure code of the simulation job if it failed.</p>
    pub fn set_failure_code(mut self, input: ::std::option::Option<crate::types::SimulationJobErrorCode>) -> Self {
        self.failure_code = input;
        self
    }
    /// <p>The failure code of the simulation job if it failed.</p>
    pub fn get_failure_code(&self) -> &::std::option::Option<crate::types::SimulationJobErrorCode> {
        &self.failure_code
    }
    /// <p>The reason why the simulation job failed.</p>
    pub fn failure_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The reason why the simulation job failed.</p>
    pub fn set_failure_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_reason = input;
        self
    }
    /// <p>The reason why the simulation job failed.</p>
    pub fn get_failure_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_reason
    }
    /// <p>A unique identifier for this <code>SimulationJob</code> request.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique identifier for this <code>SimulationJob</code> request.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique identifier for this <code>SimulationJob</code> request.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// <p>Location for output files generated by the simulation job.</p>
    pub fn output_location(mut self, input: crate::types::OutputLocation) -> Self {
        self.output_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>Location for output files generated by the simulation job.</p>
    pub fn set_output_location(mut self, input: ::std::option::Option<crate::types::OutputLocation>) -> Self {
        self.output_location = input;
        self
    }
    /// <p>Location for output files generated by the simulation job.</p>
    pub fn get_output_location(&self) -> &::std::option::Option<crate::types::OutputLocation> {
        &self.output_location
    }
    /// <p>The logging configuration.</p>
    pub fn logging_config(mut self, input: crate::types::LoggingConfig) -> Self {
        self.logging_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The logging configuration.</p>
    pub fn set_logging_config(mut self, input: ::std::option::Option<crate::types::LoggingConfig>) -> Self {
        self.logging_config = input;
        self
    }
    /// <p>The logging configuration.</p>
    pub fn get_logging_config(&self) -> &::std::option::Option<crate::types::LoggingConfig> {
        &self.logging_config
    }
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    pub fn max_job_duration_in_seconds(mut self, input: i64) -> Self {
        self.max_job_duration_in_seconds = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    pub fn set_max_job_duration_in_seconds(mut self, input: ::std::option::Option<i64>) -> Self {
        self.max_job_duration_in_seconds = input;
        self
    }
    /// <p>The maximum simulation job duration in seconds. The value must be 8 days (691,200 seconds) or less.</p>
    pub fn get_max_job_duration_in_seconds(&self) -> &::std::option::Option<i64> {
        &self.max_job_duration_in_seconds
    }
    /// <p>The simulation job execution duration in milliseconds.</p>
    pub fn simulation_time_millis(mut self, input: i64) -> Self {
        self.simulation_time_millis = ::std::option::Option::Some(input);
        self
    }
    /// <p>The simulation job execution duration in milliseconds.</p>
    pub fn set_simulation_time_millis(mut self, input: ::std::option::Option<i64>) -> Self {
        self.simulation_time_millis = input;
        self
    }
    /// <p>The simulation job execution duration in milliseconds.</p>
    pub fn get_simulation_time_millis(&self) -> &::std::option::Option<i64> {
        &self.simulation_time_millis
    }
    /// <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    pub fn iam_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    pub fn set_iam_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role = input;
        self
    }
    /// <p>The IAM role that allows the simulation instance to call the AWS APIs that are specified in its associated policies on your behalf. This is how credentials are passed in to your simulation job. </p>
    pub fn get_iam_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role
    }
    /// Appends an item to `robot_applications`.
    ///
    /// To override the contents of this collection use [`set_robot_applications`](Self::set_robot_applications).
    ///
    /// <p>A list of robot applications.</p>
    pub fn robot_applications(mut self, input: crate::types::RobotApplicationConfig) -> Self {
        let mut v = self.robot_applications.unwrap_or_default();
        v.push(input);
        self.robot_applications = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of robot applications.</p>
    pub fn set_robot_applications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::RobotApplicationConfig>>) -> Self {
        self.robot_applications = input;
        self
    }
    /// <p>A list of robot applications.</p>
    pub fn get_robot_applications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::RobotApplicationConfig>> {
        &self.robot_applications
    }
    /// Appends an item to `simulation_applications`.
    ///
    /// To override the contents of this collection use [`set_simulation_applications`](Self::set_simulation_applications).
    ///
    /// <p>A list of simulation applications.</p>
    pub fn simulation_applications(mut self, input: crate::types::SimulationApplicationConfig) -> Self {
        let mut v = self.simulation_applications.unwrap_or_default();
        v.push(input);
        self.simulation_applications = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of simulation applications.</p>
    pub fn set_simulation_applications(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::SimulationApplicationConfig>>) -> Self {
        self.simulation_applications = input;
        self
    }
    /// <p>A list of simulation applications.</p>
    pub fn get_simulation_applications(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::SimulationApplicationConfig>> {
        &self.simulation_applications
    }
    /// Appends an item to `data_sources`.
    ///
    /// To override the contents of this collection use [`set_data_sources`](Self::set_data_sources).
    ///
    /// <p>The data sources for the simulation job.</p>
    pub fn data_sources(mut self, input: crate::types::DataSource) -> Self {
        let mut v = self.data_sources.unwrap_or_default();
        v.push(input);
        self.data_sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The data sources for the simulation job.</p>
    pub fn set_data_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DataSource>>) -> Self {
        self.data_sources = input;
        self
    }
    /// <p>The data sources for the simulation job.</p>
    pub fn get_data_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DataSource>> {
        &self.data_sources
    }
    /// Adds a key-value pair to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job.</p>
    pub fn tags(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.tags.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.tags = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>A map that contains tag keys and tag values that are attached to the simulation job.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.tags
    }
    /// <p>VPC configuration information.</p>
    pub fn vpc_config(mut self, input: crate::types::VpcConfigResponse) -> Self {
        self.vpc_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>VPC configuration information.</p>
    pub fn set_vpc_config(mut self, input: ::std::option::Option<crate::types::VpcConfigResponse>) -> Self {
        self.vpc_config = input;
        self
    }
    /// <p>VPC configuration information.</p>
    pub fn get_vpc_config(&self) -> &::std::option::Option<crate::types::VpcConfigResponse> {
        &self.vpc_config
    }
    /// <p>Information about a network interface.</p>
    pub fn network_interface(mut self, input: crate::types::NetworkInterface) -> Self {
        self.network_interface = ::std::option::Option::Some(input);
        self
    }
    /// <p>Information about a network interface.</p>
    pub fn set_network_interface(mut self, input: ::std::option::Option<crate::types::NetworkInterface>) -> Self {
        self.network_interface = input;
        self
    }
    /// <p>Information about a network interface.</p>
    pub fn get_network_interface(&self) -> &::std::option::Option<crate::types::NetworkInterface> {
        &self.network_interface
    }
    /// <p>Compute information for the simulation job</p>
    pub fn compute(mut self, input: crate::types::ComputeResponse) -> Self {
        self.compute = ::std::option::Option::Some(input);
        self
    }
    /// <p>Compute information for the simulation job</p>
    pub fn set_compute(mut self, input: ::std::option::Option<crate::types::ComputeResponse>) -> Self {
        self.compute = input;
        self
    }
    /// <p>Compute information for the simulation job</p>
    pub fn get_compute(&self) -> &::std::option::Option<crate::types::ComputeResponse> {
        &self.compute
    }
    /// Consumes the builder and constructs a [`SimulationJob`](crate::types::SimulationJob).
    pub fn build(self) -> crate::types::SimulationJob {
        crate::types::SimulationJob {
            arn: self.arn,
            name: self.name,
            status: self.status,
            last_started_at: self.last_started_at,
            last_updated_at: self.last_updated_at,
            failure_behavior: self.failure_behavior,
            failure_code: self.failure_code,
            failure_reason: self.failure_reason,
            client_request_token: self.client_request_token,
            output_location: self.output_location,
            logging_config: self.logging_config,
            max_job_duration_in_seconds: self.max_job_duration_in_seconds.unwrap_or_default(),
            simulation_time_millis: self.simulation_time_millis.unwrap_or_default(),
            iam_role: self.iam_role,
            robot_applications: self.robot_applications,
            simulation_applications: self.simulation_applications,
            data_sources: self.data_sources,
            tags: self.tags,
            vpc_config: self.vpc_config,
            network_interface: self.network_interface,
            compute: self.compute,
        }
    }
}
