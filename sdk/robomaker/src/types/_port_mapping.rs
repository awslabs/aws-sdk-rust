// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object representing a port mapping.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct PortMapping {
    /// <p>The port number on the simulation job instance to use as a remote connection point. </p>
    #[doc(hidden)]
    pub job_port: i32,
    /// <p>The port number on the application.</p>
    #[doc(hidden)]
    pub application_port: i32,
    /// <p>A Boolean indicating whether to enable this port mapping on public IP.</p>
    #[doc(hidden)]
    pub enable_on_public_ip: bool,
}
impl PortMapping {
    /// <p>The port number on the simulation job instance to use as a remote connection point. </p>
    pub fn job_port(&self) -> i32 {
        self.job_port
    }
    /// <p>The port number on the application.</p>
    pub fn application_port(&self) -> i32 {
        self.application_port
    }
    /// <p>A Boolean indicating whether to enable this port mapping on public IP.</p>
    pub fn enable_on_public_ip(&self) -> bool {
        self.enable_on_public_ip
    }
}
impl PortMapping {
    /// Creates a new builder-style object to manufacture [`PortMapping`](crate::types::PortMapping).
    pub fn builder() -> crate::types::builders::PortMappingBuilder {
        crate::types::builders::PortMappingBuilder::default()
    }
}

/// A builder for [`PortMapping`](crate::types::PortMapping).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct PortMappingBuilder {
    pub(crate) job_port: std::option::Option<i32>,
    pub(crate) application_port: std::option::Option<i32>,
    pub(crate) enable_on_public_ip: std::option::Option<bool>,
}
impl PortMappingBuilder {
    /// <p>The port number on the simulation job instance to use as a remote connection point. </p>
    pub fn job_port(mut self, input: i32) -> Self {
        self.job_port = Some(input);
        self
    }
    /// <p>The port number on the simulation job instance to use as a remote connection point. </p>
    pub fn set_job_port(mut self, input: std::option::Option<i32>) -> Self {
        self.job_port = input;
        self
    }
    /// <p>The port number on the application.</p>
    pub fn application_port(mut self, input: i32) -> Self {
        self.application_port = Some(input);
        self
    }
    /// <p>The port number on the application.</p>
    pub fn set_application_port(mut self, input: std::option::Option<i32>) -> Self {
        self.application_port = input;
        self
    }
    /// <p>A Boolean indicating whether to enable this port mapping on public IP.</p>
    pub fn enable_on_public_ip(mut self, input: bool) -> Self {
        self.enable_on_public_ip = Some(input);
        self
    }
    /// <p>A Boolean indicating whether to enable this port mapping on public IP.</p>
    pub fn set_enable_on_public_ip(mut self, input: std::option::Option<bool>) -> Self {
        self.enable_on_public_ip = input;
        self
    }
    /// Consumes the builder and constructs a [`PortMapping`](crate::types::PortMapping).
    pub fn build(self) -> crate::types::PortMapping {
        crate::types::PortMapping {
            job_port: self.job_port.unwrap_or_default(),
            application_port: self.application_port.unwrap_or_default(),
            enable_on_public_ip: self.enable_on_public_ip.unwrap_or_default(),
        }
    }
}
