// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about S3 keys.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct S3KeyOutput {
    /// <p>The S3 key.</p>
    #[doc(hidden)]
    pub s3_key: std::option::Option<std::string::String>,
    /// <p>The etag for the object.</p>
    #[doc(hidden)]
    pub etag: std::option::Option<std::string::String>,
}
impl S3KeyOutput {
    /// <p>The S3 key.</p>
    pub fn s3_key(&self) -> std::option::Option<&str> {
        self.s3_key.as_deref()
    }
    /// <p>The etag for the object.</p>
    pub fn etag(&self) -> std::option::Option<&str> {
        self.etag.as_deref()
    }
}
impl S3KeyOutput {
    /// Creates a new builder-style object to manufacture [`S3KeyOutput`](crate::types::S3KeyOutput).
    pub fn builder() -> crate::types::builders::S3KeyOutputBuilder {
        crate::types::builders::S3KeyOutputBuilder::default()
    }
}

/// A builder for [`S3KeyOutput`](crate::types::S3KeyOutput).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct S3KeyOutputBuilder {
    pub(crate) s3_key: std::option::Option<std::string::String>,
    pub(crate) etag: std::option::Option<std::string::String>,
}
impl S3KeyOutputBuilder {
    /// <p>The S3 key.</p>
    pub fn s3_key(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_key = Some(input.into());
        self
    }
    /// <p>The S3 key.</p>
    pub fn set_s3_key(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_key = input;
        self
    }
    /// <p>The etag for the object.</p>
    pub fn etag(mut self, input: impl Into<std::string::String>) -> Self {
        self.etag = Some(input.into());
        self
    }
    /// <p>The etag for the object.</p>
    pub fn set_etag(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.etag = input;
        self
    }
    /// Consumes the builder and constructs a [`S3KeyOutput`](crate::types::S3KeyOutput).
    pub fn build(self) -> crate::types::S3KeyOutput {
        crate::types::S3KeyOutput {
            s3_key: self.s3_key,
            etag: self.etag,
        }
    }
}
