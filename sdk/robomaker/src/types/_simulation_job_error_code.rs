// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `SimulationJobErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let simulationjoberrorcode = unimplemented!();
/// match simulationjoberrorcode {
///     SimulationJobErrorCode::BadPermissionsCloudwatchLogs => { /* ... */ },
///     SimulationJobErrorCode::BadPermissionsRobotApplication => { /* ... */ },
///     SimulationJobErrorCode::BadPermissionsS3Object => { /* ... */ },
///     SimulationJobErrorCode::BadPermissionsS3Output => { /* ... */ },
///     SimulationJobErrorCode::BadPermissionsSimulationApplication => { /* ... */ },
///     SimulationJobErrorCode::BadPermissionsUserCredentials => { /* ... */ },
///     SimulationJobErrorCode::BatchCanceled => { /* ... */ },
///     SimulationJobErrorCode::BatchTimedOut => { /* ... */ },
///     SimulationJobErrorCode::EniLimitExceeded => { /* ... */ },
///     SimulationJobErrorCode::InternalServiceError => { /* ... */ },
///     SimulationJobErrorCode::InvalidBundleRobotApplication => { /* ... */ },
///     SimulationJobErrorCode::InvalidBundleSimulationApplication => { /* ... */ },
///     SimulationJobErrorCode::InvalidInput => { /* ... */ },
///     SimulationJobErrorCode::InvalidS3Resource => { /* ... */ },
///     SimulationJobErrorCode::LimitExceeded => { /* ... */ },
///     SimulationJobErrorCode::MismatchedEtag => { /* ... */ },
///     SimulationJobErrorCode::RequestThrottled => { /* ... */ },
///     SimulationJobErrorCode::ResourceNotFound => { /* ... */ },
///     SimulationJobErrorCode::RobotApplicationCrash => { /* ... */ },
///     SimulationJobErrorCode::RobotApplicationHealthCheckFailure => { /* ... */ },
///     SimulationJobErrorCode::RobotApplicationVersionMismatchedEtag => { /* ... */ },
///     SimulationJobErrorCode::SimulationApplicationCrash => { /* ... */ },
///     SimulationJobErrorCode::SimulationApplicationHealthCheckFailure => { /* ... */ },
///     SimulationJobErrorCode::SimulationApplicationVersionMismatchedEtag => { /* ... */ },
///     SimulationJobErrorCode::SubnetIpLimitExceeded => { /* ... */ },
///     SimulationJobErrorCode::ThrottlingError => { /* ... */ },
///     SimulationJobErrorCode::UploadContentMismatchError => { /* ... */ },
///     SimulationJobErrorCode::WrongRegionRobotApplication => { /* ... */ },
///     SimulationJobErrorCode::WrongRegionS3Bucket => { /* ... */ },
///     SimulationJobErrorCode::WrongRegionS3Output => { /* ... */ },
///     SimulationJobErrorCode::WrongRegionSimulationApplication => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `simulationjoberrorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `SimulationJobErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `SimulationJobErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `SimulationJobErrorCode::NewFeature` is defined.
/// Specifically, when `simulationjoberrorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `SimulationJobErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum SimulationJobErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    BadPermissionsCloudwatchLogs,
    #[allow(missing_docs)] // documentation missing in model
    BadPermissionsRobotApplication,
    #[allow(missing_docs)] // documentation missing in model
    BadPermissionsS3Object,
    #[allow(missing_docs)] // documentation missing in model
    BadPermissionsS3Output,
    #[allow(missing_docs)] // documentation missing in model
    BadPermissionsSimulationApplication,
    #[allow(missing_docs)] // documentation missing in model
    BadPermissionsUserCredentials,
    #[allow(missing_docs)] // documentation missing in model
    BatchCanceled,
    #[allow(missing_docs)] // documentation missing in model
    BatchTimedOut,
    #[allow(missing_docs)] // documentation missing in model
    EniLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    InternalServiceError,
    #[allow(missing_docs)] // documentation missing in model
    InvalidBundleRobotApplication,
    #[allow(missing_docs)] // documentation missing in model
    InvalidBundleSimulationApplication,
    #[allow(missing_docs)] // documentation missing in model
    InvalidInput,
    #[allow(missing_docs)] // documentation missing in model
    InvalidS3Resource,
    #[allow(missing_docs)] // documentation missing in model
    LimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    MismatchedEtag,
    #[allow(missing_docs)] // documentation missing in model
    RequestThrottled,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    RobotApplicationCrash,
    #[allow(missing_docs)] // documentation missing in model
    RobotApplicationHealthCheckFailure,
    #[allow(missing_docs)] // documentation missing in model
    RobotApplicationVersionMismatchedEtag,
    #[allow(missing_docs)] // documentation missing in model
    SimulationApplicationCrash,
    #[allow(missing_docs)] // documentation missing in model
    SimulationApplicationHealthCheckFailure,
    #[allow(missing_docs)] // documentation missing in model
    SimulationApplicationVersionMismatchedEtag,
    #[allow(missing_docs)] // documentation missing in model
    SubnetIpLimitExceeded,
    #[allow(missing_docs)] // documentation missing in model
    ThrottlingError,
    #[allow(missing_docs)] // documentation missing in model
    UploadContentMismatchError,
    #[allow(missing_docs)] // documentation missing in model
    WrongRegionRobotApplication,
    #[allow(missing_docs)] // documentation missing in model
    WrongRegionS3Bucket,
    #[allow(missing_docs)] // documentation missing in model
    WrongRegionS3Output,
    #[allow(missing_docs)] // documentation missing in model
    WrongRegionSimulationApplication,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for SimulationJobErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "BadPermissionsCloudwatchLogs" => SimulationJobErrorCode::BadPermissionsCloudwatchLogs,
            "BadPermissionsRobotApplication" => {
                SimulationJobErrorCode::BadPermissionsRobotApplication
            }
            "BadPermissionsS3Object" => SimulationJobErrorCode::BadPermissionsS3Object,
            "BadPermissionsS3Output" => SimulationJobErrorCode::BadPermissionsS3Output,
            "BadPermissionsSimulationApplication" => {
                SimulationJobErrorCode::BadPermissionsSimulationApplication
            }
            "BadPermissionsUserCredentials" => {
                SimulationJobErrorCode::BadPermissionsUserCredentials
            }
            "BatchCanceled" => SimulationJobErrorCode::BatchCanceled,
            "BatchTimedOut" => SimulationJobErrorCode::BatchTimedOut,
            "ENILimitExceeded" => SimulationJobErrorCode::EniLimitExceeded,
            "InternalServiceError" => SimulationJobErrorCode::InternalServiceError,
            "InvalidBundleRobotApplication" => {
                SimulationJobErrorCode::InvalidBundleRobotApplication
            }
            "InvalidBundleSimulationApplication" => {
                SimulationJobErrorCode::InvalidBundleSimulationApplication
            }
            "InvalidInput" => SimulationJobErrorCode::InvalidInput,
            "InvalidS3Resource" => SimulationJobErrorCode::InvalidS3Resource,
            "LimitExceeded" => SimulationJobErrorCode::LimitExceeded,
            "MismatchedEtag" => SimulationJobErrorCode::MismatchedEtag,
            "RequestThrottled" => SimulationJobErrorCode::RequestThrottled,
            "ResourceNotFound" => SimulationJobErrorCode::ResourceNotFound,
            "RobotApplicationCrash" => SimulationJobErrorCode::RobotApplicationCrash,
            "RobotApplicationHealthCheckFailure" => {
                SimulationJobErrorCode::RobotApplicationHealthCheckFailure
            }
            "RobotApplicationVersionMismatchedEtag" => {
                SimulationJobErrorCode::RobotApplicationVersionMismatchedEtag
            }
            "SimulationApplicationCrash" => SimulationJobErrorCode::SimulationApplicationCrash,
            "SimulationApplicationHealthCheckFailure" => {
                SimulationJobErrorCode::SimulationApplicationHealthCheckFailure
            }
            "SimulationApplicationVersionMismatchedEtag" => {
                SimulationJobErrorCode::SimulationApplicationVersionMismatchedEtag
            }
            "SubnetIpLimitExceeded" => SimulationJobErrorCode::SubnetIpLimitExceeded,
            "ThrottlingError" => SimulationJobErrorCode::ThrottlingError,
            "UploadContentMismatchError" => SimulationJobErrorCode::UploadContentMismatchError,
            "WrongRegionRobotApplication" => SimulationJobErrorCode::WrongRegionRobotApplication,
            "WrongRegionS3Bucket" => SimulationJobErrorCode::WrongRegionS3Bucket,
            "WrongRegionS3Output" => SimulationJobErrorCode::WrongRegionS3Output,
            "WrongRegionSimulationApplication" => {
                SimulationJobErrorCode::WrongRegionSimulationApplication
            }
            other => SimulationJobErrorCode::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for SimulationJobErrorCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(SimulationJobErrorCode::from(s))
    }
}
impl SimulationJobErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            SimulationJobErrorCode::BadPermissionsCloudwatchLogs => "BadPermissionsCloudwatchLogs",
            SimulationJobErrorCode::BadPermissionsRobotApplication => {
                "BadPermissionsRobotApplication"
            }
            SimulationJobErrorCode::BadPermissionsS3Object => "BadPermissionsS3Object",
            SimulationJobErrorCode::BadPermissionsS3Output => "BadPermissionsS3Output",
            SimulationJobErrorCode::BadPermissionsSimulationApplication => {
                "BadPermissionsSimulationApplication"
            }
            SimulationJobErrorCode::BadPermissionsUserCredentials => {
                "BadPermissionsUserCredentials"
            }
            SimulationJobErrorCode::BatchCanceled => "BatchCanceled",
            SimulationJobErrorCode::BatchTimedOut => "BatchTimedOut",
            SimulationJobErrorCode::EniLimitExceeded => "ENILimitExceeded",
            SimulationJobErrorCode::InternalServiceError => "InternalServiceError",
            SimulationJobErrorCode::InvalidBundleRobotApplication => {
                "InvalidBundleRobotApplication"
            }
            SimulationJobErrorCode::InvalidBundleSimulationApplication => {
                "InvalidBundleSimulationApplication"
            }
            SimulationJobErrorCode::InvalidInput => "InvalidInput",
            SimulationJobErrorCode::InvalidS3Resource => "InvalidS3Resource",
            SimulationJobErrorCode::LimitExceeded => "LimitExceeded",
            SimulationJobErrorCode::MismatchedEtag => "MismatchedEtag",
            SimulationJobErrorCode::RequestThrottled => "RequestThrottled",
            SimulationJobErrorCode::ResourceNotFound => "ResourceNotFound",
            SimulationJobErrorCode::RobotApplicationCrash => "RobotApplicationCrash",
            SimulationJobErrorCode::RobotApplicationHealthCheckFailure => {
                "RobotApplicationHealthCheckFailure"
            }
            SimulationJobErrorCode::RobotApplicationVersionMismatchedEtag => {
                "RobotApplicationVersionMismatchedEtag"
            }
            SimulationJobErrorCode::SimulationApplicationCrash => "SimulationApplicationCrash",
            SimulationJobErrorCode::SimulationApplicationHealthCheckFailure => {
                "SimulationApplicationHealthCheckFailure"
            }
            SimulationJobErrorCode::SimulationApplicationVersionMismatchedEtag => {
                "SimulationApplicationVersionMismatchedEtag"
            }
            SimulationJobErrorCode::SubnetIpLimitExceeded => "SubnetIpLimitExceeded",
            SimulationJobErrorCode::ThrottlingError => "ThrottlingError",
            SimulationJobErrorCode::UploadContentMismatchError => "UploadContentMismatchError",
            SimulationJobErrorCode::WrongRegionRobotApplication => "WrongRegionRobotApplication",
            SimulationJobErrorCode::WrongRegionS3Bucket => "WrongRegionS3Bucket",
            SimulationJobErrorCode::WrongRegionS3Output => "WrongRegionS3Output",
            SimulationJobErrorCode::WrongRegionSimulationApplication => {
                "WrongRegionSimulationApplication"
            }
            SimulationJobErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BadPermissionsCloudwatchLogs",
            "BadPermissionsRobotApplication",
            "BadPermissionsS3Object",
            "BadPermissionsS3Output",
            "BadPermissionsSimulationApplication",
            "BadPermissionsUserCredentials",
            "BatchCanceled",
            "BatchTimedOut",
            "ENILimitExceeded",
            "InternalServiceError",
            "InvalidBundleRobotApplication",
            "InvalidBundleSimulationApplication",
            "InvalidInput",
            "InvalidS3Resource",
            "LimitExceeded",
            "MismatchedEtag",
            "RequestThrottled",
            "ResourceNotFound",
            "RobotApplicationCrash",
            "RobotApplicationHealthCheckFailure",
            "RobotApplicationVersionMismatchedEtag",
            "SimulationApplicationCrash",
            "SimulationApplicationHealthCheckFailure",
            "SimulationApplicationVersionMismatchedEtag",
            "SubnetIpLimitExceeded",
            "ThrottlingError",
            "UploadContentMismatchError",
            "WrongRegionRobotApplication",
            "WrongRegionS3Bucket",
            "WrongRegionS3Output",
            "WrongRegionSimulationApplication",
        ]
    }
}
impl AsRef<str> for SimulationJobErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
