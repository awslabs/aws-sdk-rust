// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about worlds that failed.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FailureSummary {
    /// <p>The total number of failures.</p>
    #[doc(hidden)]
    pub total_failure_count: i32,
    /// <p>The worlds that failed.</p>
    #[doc(hidden)]
    pub failures: std::option::Option<std::vec::Vec<crate::types::WorldFailure>>,
}
impl FailureSummary {
    /// <p>The total number of failures.</p>
    pub fn total_failure_count(&self) -> i32 {
        self.total_failure_count
    }
    /// <p>The worlds that failed.</p>
    pub fn failures(&self) -> std::option::Option<&[crate::types::WorldFailure]> {
        self.failures.as_deref()
    }
}
impl FailureSummary {
    /// Creates a new builder-style object to manufacture [`FailureSummary`](crate::types::FailureSummary).
    pub fn builder() -> crate::types::builders::FailureSummaryBuilder {
        crate::types::builders::FailureSummaryBuilder::default()
    }
}

/// A builder for [`FailureSummary`](crate::types::FailureSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FailureSummaryBuilder {
    pub(crate) total_failure_count: std::option::Option<i32>,
    pub(crate) failures: std::option::Option<std::vec::Vec<crate::types::WorldFailure>>,
}
impl FailureSummaryBuilder {
    /// <p>The total number of failures.</p>
    pub fn total_failure_count(mut self, input: i32) -> Self {
        self.total_failure_count = Some(input);
        self
    }
    /// <p>The total number of failures.</p>
    pub fn set_total_failure_count(mut self, input: std::option::Option<i32>) -> Self {
        self.total_failure_count = input;
        self
    }
    /// Appends an item to `failures`.
    ///
    /// To override the contents of this collection use [`set_failures`](Self::set_failures).
    ///
    /// <p>The worlds that failed.</p>
    pub fn failures(mut self, input: crate::types::WorldFailure) -> Self {
        let mut v = self.failures.unwrap_or_default();
        v.push(input);
        self.failures = Some(v);
        self
    }
    /// <p>The worlds that failed.</p>
    pub fn set_failures(
        mut self,
        input: std::option::Option<std::vec::Vec<crate::types::WorldFailure>>,
    ) -> Self {
        self.failures = input;
        self
    }
    /// Consumes the builder and constructs a [`FailureSummary`](crate::types::FailureSummary).
    pub fn build(self) -> crate::types::FailureSummary {
        crate::types::FailureSummary {
            total_failure_count: self.total_failure_count.unwrap_or_default(),
            failures: self.failures,
        }
    }
}
