// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// When writing a match expression against `DeploymentJobErrorCode`, it is important to ensure
/// your code is forward-compatible. That is, if a match arm handles a case for a
/// feature that is supported by the service but has not been represented as an enum
/// variant in a current version of SDK, your code should continue to work when you
/// upgrade SDK to a future version in which the enum does include a variant for that
/// feature.
///
/// Here is an example of how you can make a match expression forward-compatible:
///
/// ```text
/// # let deploymentjoberrorcode = unimplemented!();
/// match deploymentjoberrorcode {
///     DeploymentJobErrorCode::BadLambdaAssociated => { /* ... */ },
///     DeploymentJobErrorCode::BadPermissionError => { /* ... */ },
///     DeploymentJobErrorCode::DeploymentFleetDoesNotExist => { /* ... */ },
///     DeploymentJobErrorCode::DownloadConditionFailed => { /* ... */ },
///     DeploymentJobErrorCode::EnvironmentSetupError => { /* ... */ },
///     DeploymentJobErrorCode::EtagMismatch => { /* ... */ },
///     DeploymentJobErrorCode::ExtractingBundleFailure => { /* ... */ },
///     DeploymentJobErrorCode::FailureThresholdBreached => { /* ... */ },
///     DeploymentJobErrorCode::FleetDeploymentTimeout => { /* ... */ },
///     DeploymentJobErrorCode::GreengrassDeploymentFailed => { /* ... */ },
///     DeploymentJobErrorCode::GreengrassGroupVersionDoesNotExist => { /* ... */ },
///     DeploymentJobErrorCode::InternalServerError => { /* ... */ },
///     DeploymentJobErrorCode::InvalidGreengrassGroup => { /* ... */ },
///     DeploymentJobErrorCode::LambdaDeleted => { /* ... */ },
///     DeploymentJobErrorCode::MissingRobotApplicationArchitecture => { /* ... */ },
///     DeploymentJobErrorCode::MissingRobotArchitecture => { /* ... */ },
///     DeploymentJobErrorCode::MissingRobotDeploymentResource => { /* ... */ },
///     DeploymentJobErrorCode::PostLaunchFileFailure => { /* ... */ },
///     DeploymentJobErrorCode::PreLaunchFileFailure => { /* ... */ },
///     DeploymentJobErrorCode::ResourceNotFound => { /* ... */ },
///     DeploymentJobErrorCode::RobotAgentConnectionTimeout => { /* ... */ },
///     DeploymentJobErrorCode::RobotApplicationDoesNotExist => { /* ... */ },
///     DeploymentJobErrorCode::RobotDeploymentAborted => { /* ... */ },
///     DeploymentJobErrorCode::RobotDeploymentNoResponse => { /* ... */ },
///     other @ _ if other.as_str() == "NewFeature" => { /* handles a case for `NewFeature` */ },
///     _ => { /* ... */ },
/// }
/// ```
/// The above code demonstrates that when `deploymentjoberrorcode` represents
/// `NewFeature`, the execution path will lead to the second last match arm,
/// even though the enum does not contain a variant `DeploymentJobErrorCode::NewFeature`
/// in the current version of SDK. The reason is that the variable `other`,
/// created by the `@` operator, is bound to
/// `DeploymentJobErrorCode::Unknown(UnknownVariantValue("NewFeature".to_owned()))`
/// and calling `as_str` on it yields `"NewFeature"`.
/// This match expression is forward-compatible when executed with a newer
/// version of SDK where the variant `DeploymentJobErrorCode::NewFeature` is defined.
/// Specifically, when `deploymentjoberrorcode` represents `NewFeature`,
/// the execution path will hit the second last match arm as before by virtue of
/// calling `as_str` on `DeploymentJobErrorCode::NewFeature` also yielding `"NewFeature"`.
///
/// Explicitly matching on the `Unknown` variant should
/// be avoided for two reasons:
/// - The inner data `UnknownVariantValue` is opaque, and no further information can be extracted.
/// - It might inadvertently shadow other intended match arms.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(
    std::clone::Clone,
    std::cmp::Eq,
    std::cmp::Ord,
    std::cmp::PartialEq,
    std::cmp::PartialOrd,
    std::fmt::Debug,
    std::hash::Hash,
)]
pub enum DeploymentJobErrorCode {
    #[allow(missing_docs)] // documentation missing in model
    BadLambdaAssociated,
    #[allow(missing_docs)] // documentation missing in model
    BadPermissionError,
    #[allow(missing_docs)] // documentation missing in model
    DeploymentFleetDoesNotExist,
    #[allow(missing_docs)] // documentation missing in model
    DownloadConditionFailed,
    #[allow(missing_docs)] // documentation missing in model
    EnvironmentSetupError,
    #[allow(missing_docs)] // documentation missing in model
    EtagMismatch,
    #[allow(missing_docs)] // documentation missing in model
    ExtractingBundleFailure,
    #[allow(missing_docs)] // documentation missing in model
    FailureThresholdBreached,
    #[allow(missing_docs)] // documentation missing in model
    FleetDeploymentTimeout,
    #[allow(missing_docs)] // documentation missing in model
    GreengrassDeploymentFailed,
    #[allow(missing_docs)] // documentation missing in model
    GreengrassGroupVersionDoesNotExist,
    #[allow(missing_docs)] // documentation missing in model
    InternalServerError,
    #[allow(missing_docs)] // documentation missing in model
    InvalidGreengrassGroup,
    #[allow(missing_docs)] // documentation missing in model
    LambdaDeleted,
    #[allow(missing_docs)] // documentation missing in model
    MissingRobotApplicationArchitecture,
    #[allow(missing_docs)] // documentation missing in model
    MissingRobotArchitecture,
    #[allow(missing_docs)] // documentation missing in model
    MissingRobotDeploymentResource,
    #[allow(missing_docs)] // documentation missing in model
    PostLaunchFileFailure,
    #[allow(missing_docs)] // documentation missing in model
    PreLaunchFileFailure,
    #[allow(missing_docs)] // documentation missing in model
    ResourceNotFound,
    #[allow(missing_docs)] // documentation missing in model
    RobotAgentConnectionTimeout,
    #[allow(missing_docs)] // documentation missing in model
    RobotApplicationDoesNotExist,
    #[allow(missing_docs)] // documentation missing in model
    RobotDeploymentAborted,
    #[allow(missing_docs)] // documentation missing in model
    RobotDeploymentNoResponse,
    /// `Unknown` contains new variants that have been added since this code was generated.
    Unknown(crate::primitives::UnknownVariantValue),
}
impl std::convert::From<&str> for DeploymentJobErrorCode {
    fn from(s: &str) -> Self {
        match s {
            "BadLambdaAssociated" => DeploymentJobErrorCode::BadLambdaAssociated,
            "BadPermissionError" => DeploymentJobErrorCode::BadPermissionError,
            "DeploymentFleetDoesNotExist" => DeploymentJobErrorCode::DeploymentFleetDoesNotExist,
            "DownloadConditionFailed" => DeploymentJobErrorCode::DownloadConditionFailed,
            "EnvironmentSetupError" => DeploymentJobErrorCode::EnvironmentSetupError,
            "EtagMismatch" => DeploymentJobErrorCode::EtagMismatch,
            "ExtractingBundleFailure" => DeploymentJobErrorCode::ExtractingBundleFailure,
            "FailureThresholdBreached" => DeploymentJobErrorCode::FailureThresholdBreached,
            "FleetDeploymentTimeout" => DeploymentJobErrorCode::FleetDeploymentTimeout,
            "GreengrassDeploymentFailed" => DeploymentJobErrorCode::GreengrassDeploymentFailed,
            "GreengrassGroupVersionDoesNotExist" => {
                DeploymentJobErrorCode::GreengrassGroupVersionDoesNotExist
            }
            "InternalServerError" => DeploymentJobErrorCode::InternalServerError,
            "InvalidGreengrassGroup" => DeploymentJobErrorCode::InvalidGreengrassGroup,
            "LambdaDeleted" => DeploymentJobErrorCode::LambdaDeleted,
            "MissingRobotApplicationArchitecture" => {
                DeploymentJobErrorCode::MissingRobotApplicationArchitecture
            }
            "MissingRobotArchitecture" => DeploymentJobErrorCode::MissingRobotArchitecture,
            "MissingRobotDeploymentResource" => {
                DeploymentJobErrorCode::MissingRobotDeploymentResource
            }
            "PostLaunchFileFailure" => DeploymentJobErrorCode::PostLaunchFileFailure,
            "PreLaunchFileFailure" => DeploymentJobErrorCode::PreLaunchFileFailure,
            "ResourceNotFound" => DeploymentJobErrorCode::ResourceNotFound,
            "RobotAgentConnectionTimeout" => DeploymentJobErrorCode::RobotAgentConnectionTimeout,
            "RobotApplicationDoesNotExist" => DeploymentJobErrorCode::RobotApplicationDoesNotExist,
            "RobotDeploymentAborted" => DeploymentJobErrorCode::RobotDeploymentAborted,
            "RobotDeploymentNoResponse" => DeploymentJobErrorCode::RobotDeploymentNoResponse,
            other => DeploymentJobErrorCode::Unknown(crate::primitives::UnknownVariantValue(
                other.to_owned(),
            )),
        }
    }
}
impl std::str::FromStr for DeploymentJobErrorCode {
    type Err = std::convert::Infallible;

    fn from_str(s: &str) -> std::result::Result<Self, Self::Err> {
        Ok(DeploymentJobErrorCode::from(s))
    }
}
impl DeploymentJobErrorCode {
    /// Returns the `&str` value of the enum member.
    pub fn as_str(&self) -> &str {
        match self {
            DeploymentJobErrorCode::BadLambdaAssociated => "BadLambdaAssociated",
            DeploymentJobErrorCode::BadPermissionError => "BadPermissionError",
            DeploymentJobErrorCode::DeploymentFleetDoesNotExist => "DeploymentFleetDoesNotExist",
            DeploymentJobErrorCode::DownloadConditionFailed => "DownloadConditionFailed",
            DeploymentJobErrorCode::EnvironmentSetupError => "EnvironmentSetupError",
            DeploymentJobErrorCode::EtagMismatch => "EtagMismatch",
            DeploymentJobErrorCode::ExtractingBundleFailure => "ExtractingBundleFailure",
            DeploymentJobErrorCode::FailureThresholdBreached => "FailureThresholdBreached",
            DeploymentJobErrorCode::FleetDeploymentTimeout => "FleetDeploymentTimeout",
            DeploymentJobErrorCode::GreengrassDeploymentFailed => "GreengrassDeploymentFailed",
            DeploymentJobErrorCode::GreengrassGroupVersionDoesNotExist => {
                "GreengrassGroupVersionDoesNotExist"
            }
            DeploymentJobErrorCode::InternalServerError => "InternalServerError",
            DeploymentJobErrorCode::InvalidGreengrassGroup => "InvalidGreengrassGroup",
            DeploymentJobErrorCode::LambdaDeleted => "LambdaDeleted",
            DeploymentJobErrorCode::MissingRobotApplicationArchitecture => {
                "MissingRobotApplicationArchitecture"
            }
            DeploymentJobErrorCode::MissingRobotArchitecture => "MissingRobotArchitecture",
            DeploymentJobErrorCode::MissingRobotDeploymentResource => {
                "MissingRobotDeploymentResource"
            }
            DeploymentJobErrorCode::PostLaunchFileFailure => "PostLaunchFileFailure",
            DeploymentJobErrorCode::PreLaunchFileFailure => "PreLaunchFileFailure",
            DeploymentJobErrorCode::ResourceNotFound => "ResourceNotFound",
            DeploymentJobErrorCode::RobotAgentConnectionTimeout => "RobotAgentConnectionTimeout",
            DeploymentJobErrorCode::RobotApplicationDoesNotExist => "RobotApplicationDoesNotExist",
            DeploymentJobErrorCode::RobotDeploymentAborted => "RobotDeploymentAborted",
            DeploymentJobErrorCode::RobotDeploymentNoResponse => "RobotDeploymentNoResponse",
            DeploymentJobErrorCode::Unknown(value) => value.as_str(),
        }
    }
    /// Returns all the `&str` representations of the enum members.
    pub const fn values() -> &'static [&'static str] {
        &[
            "BadLambdaAssociated",
            "BadPermissionError",
            "DeploymentFleetDoesNotExist",
            "DownloadConditionFailed",
            "EnvironmentSetupError",
            "EtagMismatch",
            "ExtractingBundleFailure",
            "FailureThresholdBreached",
            "FleetDeploymentTimeout",
            "GreengrassDeploymentFailed",
            "GreengrassGroupVersionDoesNotExist",
            "InternalServerError",
            "InvalidGreengrassGroup",
            "LambdaDeleted",
            "MissingRobotApplicationArchitecture",
            "MissingRobotArchitecture",
            "MissingRobotDeploymentResource",
            "PostLaunchFileFailure",
            "PreLaunchFileFailure",
            "ResourceNotFound",
            "RobotAgentConnectionTimeout",
            "RobotApplicationDoesNotExist",
            "RobotDeploymentAborted",
            "RobotDeploymentNoResponse",
        ]
    }
}
impl AsRef<str> for DeploymentJobErrorCode {
    fn as_ref(&self) -> &str {
        self.as_str()
    }
}
