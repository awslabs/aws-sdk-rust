// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Provides upload configuration information. Files are uploaded from the simulation job to a location you specify. </p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UploadConfiguration {
    /// <p>A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. </p>
    /// <p> For example, if your simulation output location is <code>s3://my-bucket</code> and your upload configuration name is <code>robot-test</code>, your files will be uploaded to <code>s3://my-bucket/
    /// <simid>
    /// /
    /// <runid>
    /// /robot-test
    /// </runid>
    /// </simid></code>. </p>
    pub name: ::std::string::String,
    /// <p> Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of <code>**</code> as a <i>super asterisk</i>. For example, specifying <code>/var/log/**.log</code> causes all .log files in the <code>/var/log</code> directory tree to be collected. For more examples, see <a href="https://github.com/gobwas/glob">Glob Library</a>. </p>
    pub path: ::std::string::String,
    /// <p>Specifies when to upload the files:</p>
    /// <dl>
    /// <dt>
    /// UPLOAD_ON_TERMINATE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded once the simulation enters the <code>TERMINATING</code> state. Matching files are not uploaded until all of your code (including tools) have stopped. </p>
    /// <p>If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.</p>
    /// </dd>
    /// <dt>
    /// UPLOAD_ROLLING_AUTO_REMOVE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. </p>
    /// </dd>
    /// </dl>
    pub upload_behavior: crate::types::UploadBehavior,
}
impl UploadConfiguration {
    /// <p>A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. </p>
    /// <p> For example, if your simulation output location is <code>s3://my-bucket</code> and your upload configuration name is <code>robot-test</code>, your files will be uploaded to <code>s3://my-bucket/
    /// <simid>
    /// /
    /// <runid>
    /// /robot-test
    /// </runid>
    /// </simid></code>. </p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p> Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of <code>**</code> as a <i>super asterisk</i>. For example, specifying <code>/var/log/**.log</code> causes all .log files in the <code>/var/log</code> directory tree to be collected. For more examples, see <a href="https://github.com/gobwas/glob">Glob Library</a>. </p>
    pub fn path(&self) -> &str {
        use std::ops::Deref;
        self.path.deref()
    }
    /// <p>Specifies when to upload the files:</p>
    /// <dl>
    /// <dt>
    /// UPLOAD_ON_TERMINATE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded once the simulation enters the <code>TERMINATING</code> state. Matching files are not uploaded until all of your code (including tools) have stopped. </p>
    /// <p>If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.</p>
    /// </dd>
    /// <dt>
    /// UPLOAD_ROLLING_AUTO_REMOVE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. </p>
    /// </dd>
    /// </dl>
    pub fn upload_behavior(&self) -> &crate::types::UploadBehavior {
        &self.upload_behavior
    }
}
impl UploadConfiguration {
    /// Creates a new builder-style object to manufacture [`UploadConfiguration`](crate::types::UploadConfiguration).
    pub fn builder() -> crate::types::builders::UploadConfigurationBuilder {
        crate::types::builders::UploadConfigurationBuilder::default()
    }
}

/// A builder for [`UploadConfiguration`](crate::types::UploadConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UploadConfigurationBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) path: ::std::option::Option<::std::string::String>,
    pub(crate) upload_behavior: ::std::option::Option<crate::types::UploadBehavior>,
}
impl UploadConfigurationBuilder {
    /// <p>A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. </p>
    /// <p> For example, if your simulation output location is <code>s3://my-bucket</code> and your upload configuration name is <code>robot-test</code>, your files will be uploaded to <code>s3://my-bucket/
    /// <simid>
    /// /
    /// <runid>
    /// /robot-test
    /// </runid>
    /// </simid></code>. </p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. </p>
    /// <p> For example, if your simulation output location is <code>s3://my-bucket</code> and your upload configuration name is <code>robot-test</code>, your files will be uploaded to <code>s3://my-bucket/
    /// <simid>
    /// /
    /// <runid>
    /// /robot-test
    /// </runid>
    /// </simid></code>. </p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A prefix that specifies where files will be uploaded in Amazon S3. It is appended to the simulation output location to determine the final path. </p>
    /// <p> For example, if your simulation output location is <code>s3://my-bucket</code> and your upload configuration name is <code>robot-test</code>, your files will be uploaded to <code>s3://my-bucket/
    /// <simid>
    /// /
    /// <runid>
    /// /robot-test
    /// </runid>
    /// </simid></code>. </p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p> Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of <code>**</code> as a <i>super asterisk</i>. For example, specifying <code>/var/log/**.log</code> causes all .log files in the <code>/var/log</code> directory tree to be collected. For more examples, see <a href="https://github.com/gobwas/glob">Glob Library</a>. </p>
    /// This field is required.
    pub fn path(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.path = ::std::option::Option::Some(input.into());
        self
    }
    /// <p> Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of <code>**</code> as a <i>super asterisk</i>. For example, specifying <code>/var/log/**.log</code> causes all .log files in the <code>/var/log</code> directory tree to be collected. For more examples, see <a href="https://github.com/gobwas/glob">Glob Library</a>. </p>
    pub fn set_path(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.path = input;
        self
    }
    /// <p> Specifies the path of the file(s) to upload. Standard Unix glob matching rules are accepted, with the addition of <code>**</code> as a <i>super asterisk</i>. For example, specifying <code>/var/log/**.log</code> causes all .log files in the <code>/var/log</code> directory tree to be collected. For more examples, see <a href="https://github.com/gobwas/glob">Glob Library</a>. </p>
    pub fn get_path(&self) -> &::std::option::Option<::std::string::String> {
        &self.path
    }
    /// <p>Specifies when to upload the files:</p>
    /// <dl>
    /// <dt>
    /// UPLOAD_ON_TERMINATE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded once the simulation enters the <code>TERMINATING</code> state. Matching files are not uploaded until all of your code (including tools) have stopped. </p>
    /// <p>If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.</p>
    /// </dd>
    /// <dt>
    /// UPLOAD_ROLLING_AUTO_REMOVE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. </p>
    /// </dd>
    /// </dl>
    /// This field is required.
    pub fn upload_behavior(mut self, input: crate::types::UploadBehavior) -> Self {
        self.upload_behavior = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies when to upload the files:</p>
    /// <dl>
    /// <dt>
    /// UPLOAD_ON_TERMINATE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded once the simulation enters the <code>TERMINATING</code> state. Matching files are not uploaded until all of your code (including tools) have stopped. </p>
    /// <p>If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.</p>
    /// </dd>
    /// <dt>
    /// UPLOAD_ROLLING_AUTO_REMOVE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. </p>
    /// </dd>
    /// </dl>
    pub fn set_upload_behavior(mut self, input: ::std::option::Option<crate::types::UploadBehavior>) -> Self {
        self.upload_behavior = input;
        self
    }
    /// <p>Specifies when to upload the files:</p>
    /// <dl>
    /// <dt>
    /// UPLOAD_ON_TERMINATE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded once the simulation enters the <code>TERMINATING</code> state. Matching files are not uploaded until all of your code (including tools) have stopped. </p>
    /// <p>If there is a problem uploading a file, the upload is retried. If problems persist, no further upload attempts will be made.</p>
    /// </dd>
    /// <dt>
    /// UPLOAD_ROLLING_AUTO_REMOVE
    /// </dt>
    /// <dd>
    /// <p>Matching files are uploaded as they are created. They are deleted after they are uploaded. The specified path is checked every 5 seconds. A final check is made when all of your code (including tools) have stopped. </p>
    /// </dd>
    /// </dl>
    pub fn get_upload_behavior(&self) -> &::std::option::Option<crate::types::UploadBehavior> {
        &self.upload_behavior
    }
    /// Consumes the builder and constructs a [`UploadConfiguration`](crate::types::UploadConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::UploadConfigurationBuilder::name)
    /// - [`path`](crate::types::builders::UploadConfigurationBuilder::path)
    /// - [`upload_behavior`](crate::types::builders::UploadConfigurationBuilder::upload_behavior)
    pub fn build(self) -> ::std::result::Result<crate::types::UploadConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::UploadConfiguration {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building UploadConfiguration",
                )
            })?,
            path: self.path.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "path",
                    "path was not specified but it is required when building UploadConfiguration",
                )
            })?,
            upload_behavior: self.upload_behavior.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "upload_behavior",
                    "upload_behavior was not specified but it is required when building UploadConfiguration",
                )
            })?,
        })
    }
}
