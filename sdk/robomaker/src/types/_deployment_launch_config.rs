// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for a deployment launch.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct DeploymentLaunchConfig {
    /// <p>The package name.</p>
    #[doc(hidden)]
    pub package_name: std::option::Option<std::string::String>,
    /// <p>The deployment pre-launch file. This file will be executed prior to the launch file.</p>
    #[doc(hidden)]
    pub pre_launch_file: std::option::Option<std::string::String>,
    /// <p>The launch file name.</p>
    #[doc(hidden)]
    pub launch_file: std::option::Option<std::string::String>,
    /// <p>The deployment post-launch file. This file will be executed after the launch file.</p>
    #[doc(hidden)]
    pub post_launch_file: std::option::Option<std::string::String>,
    /// <p>An array of key/value pairs specifying environment variables for the robot application</p>
    #[doc(hidden)]
    pub environment_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DeploymentLaunchConfig {
    /// <p>The package name.</p>
    pub fn package_name(&self) -> std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The deployment pre-launch file. This file will be executed prior to the launch file.</p>
    pub fn pre_launch_file(&self) -> std::option::Option<&str> {
        self.pre_launch_file.as_deref()
    }
    /// <p>The launch file name.</p>
    pub fn launch_file(&self) -> std::option::Option<&str> {
        self.launch_file.as_deref()
    }
    /// <p>The deployment post-launch file. This file will be executed after the launch file.</p>
    pub fn post_launch_file(&self) -> std::option::Option<&str> {
        self.post_launch_file.as_deref()
    }
    /// <p>An array of key/value pairs specifying environment variables for the robot application</p>
    pub fn environment_variables(
        &self,
    ) -> std::option::Option<&std::collections::HashMap<std::string::String, std::string::String>>
    {
        self.environment_variables.as_ref()
    }
}
impl DeploymentLaunchConfig {
    /// Creates a new builder-style object to manufacture [`DeploymentLaunchConfig`](crate::types::DeploymentLaunchConfig).
    pub fn builder() -> crate::types::builders::DeploymentLaunchConfigBuilder {
        crate::types::builders::DeploymentLaunchConfigBuilder::default()
    }
}

/// A builder for [`DeploymentLaunchConfig`](crate::types::DeploymentLaunchConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct DeploymentLaunchConfigBuilder {
    pub(crate) package_name: std::option::Option<std::string::String>,
    pub(crate) pre_launch_file: std::option::Option<std::string::String>,
    pub(crate) launch_file: std::option::Option<std::string::String>,
    pub(crate) post_launch_file: std::option::Option<std::string::String>,
    pub(crate) environment_variables:
        std::option::Option<std::collections::HashMap<std::string::String, std::string::String>>,
}
impl DeploymentLaunchConfigBuilder {
    /// <p>The package name.</p>
    pub fn package_name(mut self, input: impl Into<std::string::String>) -> Self {
        self.package_name = Some(input.into());
        self
    }
    /// <p>The package name.</p>
    pub fn set_package_name(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The deployment pre-launch file. This file will be executed prior to the launch file.</p>
    pub fn pre_launch_file(mut self, input: impl Into<std::string::String>) -> Self {
        self.pre_launch_file = Some(input.into());
        self
    }
    /// <p>The deployment pre-launch file. This file will be executed prior to the launch file.</p>
    pub fn set_pre_launch_file(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.pre_launch_file = input;
        self
    }
    /// <p>The launch file name.</p>
    pub fn launch_file(mut self, input: impl Into<std::string::String>) -> Self {
        self.launch_file = Some(input.into());
        self
    }
    /// <p>The launch file name.</p>
    pub fn set_launch_file(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.launch_file = input;
        self
    }
    /// <p>The deployment post-launch file. This file will be executed after the launch file.</p>
    pub fn post_launch_file(mut self, input: impl Into<std::string::String>) -> Self {
        self.post_launch_file = Some(input.into());
        self
    }
    /// <p>The deployment post-launch file. This file will be executed after the launch file.</p>
    pub fn set_post_launch_file(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.post_launch_file = input;
        self
    }
    /// Adds a key-value pair to `environment_variables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p>An array of key/value pairs specifying environment variables for the robot application</p>
    pub fn environment_variables(
        mut self,
        k: impl Into<std::string::String>,
        v: impl Into<std::string::String>,
    ) -> Self {
        let mut hash_map = self.environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.environment_variables = Some(hash_map);
        self
    }
    /// <p>An array of key/value pairs specifying environment variables for the robot application</p>
    pub fn set_environment_variables(
        mut self,
        input: std::option::Option<
            std::collections::HashMap<std::string::String, std::string::String>,
        >,
    ) -> Self {
        self.environment_variables = input;
        self
    }
    /// Consumes the builder and constructs a [`DeploymentLaunchConfig`](crate::types::DeploymentLaunchConfig).
    pub fn build(self) -> crate::types::DeploymentLaunchConfig {
        crate::types::DeploymentLaunchConfig {
            package_name: self.package_name,
            pre_launch_file: self.pre_launch_file,
            launch_file: self.launch_file,
            post_launch_file: self.post_launch_file,
            environment_variables: self.environment_variables,
        }
    }
}
