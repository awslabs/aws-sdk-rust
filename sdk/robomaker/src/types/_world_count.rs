// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The number of worlds that will be created. You can configure the number of unique floorplans and the number of unique interiors for each floor plan. For example, if you want 1 world with 20 unique interiors, you set <code>floorplanCount = 1</code> and <code>interiorCountPerFloorplan = 20</code>. This will result in 20 worlds (<code>floorplanCount</code> * <code>interiorCountPerFloorplan)</code>. </p>
/// <p>If you set <code>floorplanCount = 4</code> and <code>interiorCountPerFloorplan = 5</code>, there will be 20 worlds with 5 unique floor plans. </p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorldCount {
    /// <p>The number of unique floorplans.</p>
    #[doc(hidden)]
    pub floorplan_count: std::option::Option<i32>,
    /// <p>The number of unique interiors per floorplan.</p>
    #[doc(hidden)]
    pub interior_count_per_floorplan: std::option::Option<i32>,
}
impl WorldCount {
    /// <p>The number of unique floorplans.</p>
    pub fn floorplan_count(&self) -> std::option::Option<i32> {
        self.floorplan_count
    }
    /// <p>The number of unique interiors per floorplan.</p>
    pub fn interior_count_per_floorplan(&self) -> std::option::Option<i32> {
        self.interior_count_per_floorplan
    }
}
impl WorldCount {
    /// Creates a new builder-style object to manufacture [`WorldCount`](crate::types::WorldCount).
    pub fn builder() -> crate::types::builders::WorldCountBuilder {
        crate::types::builders::WorldCountBuilder::default()
    }
}

/// A builder for [`WorldCount`](crate::types::WorldCount).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorldCountBuilder {
    pub(crate) floorplan_count: std::option::Option<i32>,
    pub(crate) interior_count_per_floorplan: std::option::Option<i32>,
}
impl WorldCountBuilder {
    /// <p>The number of unique floorplans.</p>
    pub fn floorplan_count(mut self, input: i32) -> Self {
        self.floorplan_count = Some(input);
        self
    }
    /// <p>The number of unique floorplans.</p>
    pub fn set_floorplan_count(mut self, input: std::option::Option<i32>) -> Self {
        self.floorplan_count = input;
        self
    }
    /// <p>The number of unique interiors per floorplan.</p>
    pub fn interior_count_per_floorplan(mut self, input: i32) -> Self {
        self.interior_count_per_floorplan = Some(input);
        self
    }
    /// <p>The number of unique interiors per floorplan.</p>
    pub fn set_interior_count_per_floorplan(mut self, input: std::option::Option<i32>) -> Self {
        self.interior_count_per_floorplan = input;
        self
    }
    /// Consumes the builder and constructs a [`WorldCount`](crate::types::WorldCount).
    pub fn build(self) -> crate::types::WorldCount {
        crate::types::WorldCount {
            floorplan_count: self.floorplan_count,
            interior_count_per_floorplan: self.interior_count_per_floorplan,
        }
    }
}
