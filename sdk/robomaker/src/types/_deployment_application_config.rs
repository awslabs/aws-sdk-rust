// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a deployment application configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeploymentApplicationConfig {
    /// <p>The Amazon Resource Name (ARN) of the robot application.</p>
    pub application: ::std::string::String,
    /// <p>The version of the application.</p>
    pub application_version: ::std::string::String,
    /// <p>The launch configuration.</p>
    pub launch_config: ::std::option::Option<crate::types::DeploymentLaunchConfig>,
}
impl DeploymentApplicationConfig {
    /// <p>The Amazon Resource Name (ARN) of the robot application.</p>
    pub fn application(&self) -> &str {
        use std::ops::Deref;
        self.application.deref()
    }
    /// <p>The version of the application.</p>
    pub fn application_version(&self) -> &str {
        use std::ops::Deref;
        self.application_version.deref()
    }
    /// <p>The launch configuration.</p>
    pub fn launch_config(&self) -> ::std::option::Option<&crate::types::DeploymentLaunchConfig> {
        self.launch_config.as_ref()
    }
}
impl DeploymentApplicationConfig {
    /// Creates a new builder-style object to manufacture [`DeploymentApplicationConfig`](crate::types::DeploymentApplicationConfig).
    pub fn builder() -> crate::types::builders::DeploymentApplicationConfigBuilder {
        crate::types::builders::DeploymentApplicationConfigBuilder::default()
    }
}

/// A builder for [`DeploymentApplicationConfig`](crate::types::DeploymentApplicationConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeploymentApplicationConfigBuilder {
    pub(crate) application: ::std::option::Option<::std::string::String>,
    pub(crate) application_version: ::std::option::Option<::std::string::String>,
    pub(crate) launch_config: ::std::option::Option<crate::types::DeploymentLaunchConfig>,
}
impl DeploymentApplicationConfigBuilder {
    /// <p>The Amazon Resource Name (ARN) of the robot application.</p>
    /// This field is required.
    pub fn application(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the robot application.</p>
    pub fn set_application(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the robot application.</p>
    pub fn get_application(&self) -> &::std::option::Option<::std::string::String> {
        &self.application
    }
    /// <p>The version of the application.</p>
    /// This field is required.
    pub fn application_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.application_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the application.</p>
    pub fn set_application_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.application_version = input;
        self
    }
    /// <p>The version of the application.</p>
    pub fn get_application_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.application_version
    }
    /// <p>The launch configuration.</p>
    /// This field is required.
    pub fn launch_config(mut self, input: crate::types::DeploymentLaunchConfig) -> Self {
        self.launch_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The launch configuration.</p>
    pub fn set_launch_config(mut self, input: ::std::option::Option<crate::types::DeploymentLaunchConfig>) -> Self {
        self.launch_config = input;
        self
    }
    /// <p>The launch configuration.</p>
    pub fn get_launch_config(&self) -> &::std::option::Option<crate::types::DeploymentLaunchConfig> {
        &self.launch_config
    }
    /// Consumes the builder and constructs a [`DeploymentApplicationConfig`](crate::types::DeploymentApplicationConfig).
    /// This method will fail if any of the following fields are not set:
    /// - [`application`](crate::types::builders::DeploymentApplicationConfigBuilder::application)
    /// - [`application_version`](crate::types::builders::DeploymentApplicationConfigBuilder::application_version)
    pub fn build(self) -> ::std::result::Result<crate::types::DeploymentApplicationConfig, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::DeploymentApplicationConfig {
            application: self.application.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application",
                    "application was not specified but it is required when building DeploymentApplicationConfig",
                )
            })?,
            application_version: self.application_version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "application_version",
                    "application_version was not specified but it is required when building DeploymentApplicationConfig",
                )
            })?,
            launch_config: self.launch_config,
        })
    }
}
