// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for a world.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct WorldConfig {
    /// <p>The world generated by Simulation WorldForge.</p>
    #[doc(hidden)]
    pub world: std::option::Option<std::string::String>,
}
impl WorldConfig {
    /// <p>The world generated by Simulation WorldForge.</p>
    pub fn world(&self) -> std::option::Option<&str> {
        self.world.as_deref()
    }
}
impl WorldConfig {
    /// Creates a new builder-style object to manufacture [`WorldConfig`](crate::types::WorldConfig).
    pub fn builder() -> crate::types::builders::WorldConfigBuilder {
        crate::types::builders::WorldConfigBuilder::default()
    }
}

/// A builder for [`WorldConfig`](crate::types::WorldConfig).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct WorldConfigBuilder {
    pub(crate) world: std::option::Option<std::string::String>,
}
impl WorldConfigBuilder {
    /// <p>The world generated by Simulation WorldForge.</p>
    pub fn world(mut self, input: impl Into<std::string::String>) -> Self {
        self.world = Some(input.into());
        self
    }
    /// <p>The world generated by Simulation WorldForge.</p>
    pub fn set_world(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.world = input;
        self
    }
    /// Consumes the builder and constructs a [`WorldConfig`](crate::types::WorldConfig).
    pub fn build(self) -> crate::types::WorldConfig {
        crate::types::WorldConfig { world: self.world }
    }
}
