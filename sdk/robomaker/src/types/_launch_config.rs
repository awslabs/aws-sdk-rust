// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a launch configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LaunchConfig {
    /// <p>The package name.</p>
    pub package_name: ::std::option::Option<::std::string::String>,
    /// <p>The launch file name.</p>
    pub launch_file: ::std::option::Option<::std::string::String>,
    /// <p>The environment variables for the application launch.</p>
    pub environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    /// <p>The port forwarding configuration.</p>
    pub port_forwarding_config: ::std::option::Option<crate::types::PortForwardingConfig>,
    /// <p>Boolean indicating whether a streaming session will be configured for the application. If <code>True</code>, AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. </p>
    pub stream_ui: bool,
    /// <p>If you've specified <code>General</code> as the value for your <code>RobotSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    /// <p>If you've specified <code>SimulationRuntime</code> as the value for your <code>SimulationSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    pub command: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LaunchConfig {
    /// <p>The package name.</p>
    pub fn package_name(&self) -> ::std::option::Option<&str> {
        self.package_name.as_deref()
    }
    /// <p>The launch file name.</p>
    pub fn launch_file(&self) -> ::std::option::Option<&str> {
        self.launch_file.as_deref()
    }
    /// <p>The environment variables for the application launch.</p>
    pub fn environment_variables(&self) -> ::std::option::Option<&::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        self.environment_variables.as_ref()
    }
    /// <p>The port forwarding configuration.</p>
    pub fn port_forwarding_config(&self) -> ::std::option::Option<&crate::types::PortForwardingConfig> {
        self.port_forwarding_config.as_ref()
    }
    /// <p>Boolean indicating whether a streaming session will be configured for the application. If <code>True</code>, AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. </p>
    pub fn stream_ui(&self) -> bool {
        self.stream_ui
    }
    /// <p>If you've specified <code>General</code> as the value for your <code>RobotSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    /// <p>If you've specified <code>SimulationRuntime</code> as the value for your <code>SimulationSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.command.is_none()`.
    pub fn command(&self) -> &[::std::string::String] {
        self.command.as_deref().unwrap_or_default()
    }
}
impl LaunchConfig {
    /// Creates a new builder-style object to manufacture [`LaunchConfig`](crate::types::LaunchConfig).
    pub fn builder() -> crate::types::builders::LaunchConfigBuilder {
        crate::types::builders::LaunchConfigBuilder::default()
    }
}

/// A builder for [`LaunchConfig`](crate::types::LaunchConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LaunchConfigBuilder {
    pub(crate) package_name: ::std::option::Option<::std::string::String>,
    pub(crate) launch_file: ::std::option::Option<::std::string::String>,
    pub(crate) environment_variables: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) port_forwarding_config: ::std::option::Option<crate::types::PortForwardingConfig>,
    pub(crate) stream_ui: ::std::option::Option<bool>,
    pub(crate) command: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl LaunchConfigBuilder {
    /// <p>The package name.</p>
    pub fn package_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.package_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The package name.</p>
    pub fn set_package_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.package_name = input;
        self
    }
    /// <p>The package name.</p>
    pub fn get_package_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.package_name
    }
    /// <p>The launch file name.</p>
    pub fn launch_file(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.launch_file = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The launch file name.</p>
    pub fn set_launch_file(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.launch_file = input;
        self
    }
    /// <p>The launch file name.</p>
    pub fn get_launch_file(&self) -> &::std::option::Option<::std::string::String> {
        &self.launch_file
    }
    /// Adds a key-value pair to `environment_variables`.
    ///
    /// To override the contents of this collection use [`set_environment_variables`](Self::set_environment_variables).
    ///
    /// <p>The environment variables for the application launch.</p>
    pub fn environment_variables(
        mut self,
        k: impl ::std::convert::Into<::std::string::String>,
        v: impl ::std::convert::Into<::std::string::String>,
    ) -> Self {
        let mut hash_map = self.environment_variables.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.environment_variables = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>The environment variables for the application launch.</p>
    pub fn set_environment_variables(
        mut self,
        input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    ) -> Self {
        self.environment_variables = input;
        self
    }
    /// <p>The environment variables for the application launch.</p>
    pub fn get_environment_variables(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.environment_variables
    }
    /// <p>The port forwarding configuration.</p>
    pub fn port_forwarding_config(mut self, input: crate::types::PortForwardingConfig) -> Self {
        self.port_forwarding_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port forwarding configuration.</p>
    pub fn set_port_forwarding_config(mut self, input: ::std::option::Option<crate::types::PortForwardingConfig>) -> Self {
        self.port_forwarding_config = input;
        self
    }
    /// <p>The port forwarding configuration.</p>
    pub fn get_port_forwarding_config(&self) -> &::std::option::Option<crate::types::PortForwardingConfig> {
        &self.port_forwarding_config
    }
    /// <p>Boolean indicating whether a streaming session will be configured for the application. If <code>True</code>, AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. </p>
    pub fn stream_ui(mut self, input: bool) -> Self {
        self.stream_ui = ::std::option::Option::Some(input);
        self
    }
    /// <p>Boolean indicating whether a streaming session will be configured for the application. If <code>True</code>, AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. </p>
    pub fn set_stream_ui(mut self, input: ::std::option::Option<bool>) -> Self {
        self.stream_ui = input;
        self
    }
    /// <p>Boolean indicating whether a streaming session will be configured for the application. If <code>True</code>, AWS RoboMaker will configure a connection so you can interact with your application as it is running in the simulation. You must configure and launch the component. It must have a graphical user interface. </p>
    pub fn get_stream_ui(&self) -> &::std::option::Option<bool> {
        &self.stream_ui
    }
    /// Appends an item to `command`.
    ///
    /// To override the contents of this collection use [`set_command`](Self::set_command).
    ///
    /// <p>If you've specified <code>General</code> as the value for your <code>RobotSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    /// <p>If you've specified <code>SimulationRuntime</code> as the value for your <code>SimulationSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    pub fn command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.command.unwrap_or_default();
        v.push(input.into());
        self.command = ::std::option::Option::Some(v);
        self
    }
    /// <p>If you've specified <code>General</code> as the value for your <code>RobotSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    /// <p>If you've specified <code>SimulationRuntime</code> as the value for your <code>SimulationSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    pub fn set_command(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.command = input;
        self
    }
    /// <p>If you've specified <code>General</code> as the value for your <code>RobotSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    /// <p>If you've specified <code>SimulationRuntime</code> as the value for your <code>SimulationSoftwareSuite</code>, you can use this field to specify a list of commands for your container image.</p>
    pub fn get_command(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.command
    }
    /// Consumes the builder and constructs a [`LaunchConfig`](crate::types::LaunchConfig).
    pub fn build(self) -> crate::types::LaunchConfig {
        crate::types::LaunchConfig {
            package_name: self.package_name,
            launch_file: self.launch_file,
            environment_variables: self.environment_variables,
            port_forwarding_config: self.port_forwarding_config,
            stream_ui: self.stream_ui.unwrap_or_default(),
            command: self.command,
        }
    }
}
