// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The output location.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct OutputLocation {
    /// <p>The S3 bucket for output.</p>
    #[doc(hidden)]
    pub s3_bucket: std::option::Option<std::string::String>,
    /// <p>The S3 folder in the <code>s3Bucket</code> where output files will be placed.</p>
    #[doc(hidden)]
    pub s3_prefix: std::option::Option<std::string::String>,
}
impl OutputLocation {
    /// <p>The S3 bucket for output.</p>
    pub fn s3_bucket(&self) -> std::option::Option<&str> {
        self.s3_bucket.as_deref()
    }
    /// <p>The S3 folder in the <code>s3Bucket</code> where output files will be placed.</p>
    pub fn s3_prefix(&self) -> std::option::Option<&str> {
        self.s3_prefix.as_deref()
    }
}
impl OutputLocation {
    /// Creates a new builder-style object to manufacture [`OutputLocation`](crate::types::OutputLocation).
    pub fn builder() -> crate::types::builders::OutputLocationBuilder {
        crate::types::builders::OutputLocationBuilder::default()
    }
}

/// A builder for [`OutputLocation`](crate::types::OutputLocation).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct OutputLocationBuilder {
    pub(crate) s3_bucket: std::option::Option<std::string::String>,
    pub(crate) s3_prefix: std::option::Option<std::string::String>,
}
impl OutputLocationBuilder {
    /// <p>The S3 bucket for output.</p>
    pub fn s3_bucket(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_bucket = Some(input.into());
        self
    }
    /// <p>The S3 bucket for output.</p>
    pub fn set_s3_bucket(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_bucket = input;
        self
    }
    /// <p>The S3 folder in the <code>s3Bucket</code> where output files will be placed.</p>
    pub fn s3_prefix(mut self, input: impl Into<std::string::String>) -> Self {
        self.s3_prefix = Some(input.into());
        self
    }
    /// <p>The S3 folder in the <code>s3Bucket</code> where output files will be placed.</p>
    pub fn set_s3_prefix(mut self, input: std::option::Option<std::string::String>) -> Self {
        self.s3_prefix = input;
        self
    }
    /// Consumes the builder and constructs a [`OutputLocation`](crate::types::OutputLocation).
    pub fn build(self) -> crate::types::OutputLocation {
        crate::types::OutputLocation {
            s3_bucket: self.s3_bucket,
            s3_prefix: self.s3_prefix,
        }
    }
}
