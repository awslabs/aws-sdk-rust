// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration information for port forwarding.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PortForwardingConfig {
    /// <p>The port mappings for the configuration.</p>
    pub port_mappings: ::std::option::Option<::std::vec::Vec<crate::types::PortMapping>>,
}
impl PortForwardingConfig {
    /// <p>The port mappings for the configuration.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.port_mappings.is_none()`.
    pub fn port_mappings(&self) -> &[crate::types::PortMapping] {
        self.port_mappings.as_deref().unwrap_or_default()
    }
}
impl PortForwardingConfig {
    /// Creates a new builder-style object to manufacture [`PortForwardingConfig`](crate::types::PortForwardingConfig).
    pub fn builder() -> crate::types::builders::PortForwardingConfigBuilder {
        crate::types::builders::PortForwardingConfigBuilder::default()
    }
}

/// A builder for [`PortForwardingConfig`](crate::types::PortForwardingConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PortForwardingConfigBuilder {
    pub(crate) port_mappings: ::std::option::Option<::std::vec::Vec<crate::types::PortMapping>>,
}
impl PortForwardingConfigBuilder {
    /// Appends an item to `port_mappings`.
    ///
    /// To override the contents of this collection use [`set_port_mappings`](Self::set_port_mappings).
    ///
    /// <p>The port mappings for the configuration.</p>
    pub fn port_mappings(mut self, input: crate::types::PortMapping) -> Self {
        let mut v = self.port_mappings.unwrap_or_default();
        v.push(input);
        self.port_mappings = ::std::option::Option::Some(v);
        self
    }
    /// <p>The port mappings for the configuration.</p>
    pub fn set_port_mappings(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::PortMapping>>) -> Self {
        self.port_mappings = input;
        self
    }
    /// <p>The port mappings for the configuration.</p>
    pub fn get_port_mappings(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::PortMapping>> {
        &self.port_mappings
    }
    /// Consumes the builder and constructs a [`PortForwardingConfig`](crate::types::PortForwardingConfig).
    pub fn build(self) -> crate::types::PortForwardingConfig {
        crate::types::PortForwardingConfig {
            port_mappings: self.port_mappings,
        }
    }
}
