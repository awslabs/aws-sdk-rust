// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about worlds that finished.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
pub struct FinishedWorldsSummary {
    /// <p>The total number of finished worlds.</p>
    #[doc(hidden)]
    pub finished_count: i32,
    /// <p>A list of worlds that succeeded.</p>
    #[doc(hidden)]
    pub succeeded_worlds: std::option::Option<std::vec::Vec<std::string::String>>,
    /// <p>Information about worlds that failed.</p>
    #[doc(hidden)]
    pub failure_summary: std::option::Option<crate::types::FailureSummary>,
}
impl FinishedWorldsSummary {
    /// <p>The total number of finished worlds.</p>
    pub fn finished_count(&self) -> i32 {
        self.finished_count
    }
    /// <p>A list of worlds that succeeded.</p>
    pub fn succeeded_worlds(&self) -> std::option::Option<&[std::string::String]> {
        self.succeeded_worlds.as_deref()
    }
    /// <p>Information about worlds that failed.</p>
    pub fn failure_summary(&self) -> std::option::Option<&crate::types::FailureSummary> {
        self.failure_summary.as_ref()
    }
}
impl FinishedWorldsSummary {
    /// Creates a new builder-style object to manufacture [`FinishedWorldsSummary`](crate::types::FinishedWorldsSummary).
    pub fn builder() -> crate::types::builders::FinishedWorldsSummaryBuilder {
        crate::types::builders::FinishedWorldsSummaryBuilder::default()
    }
}

/// A builder for [`FinishedWorldsSummary`](crate::types::FinishedWorldsSummary).
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq, std::default::Default, std::fmt::Debug)]
pub struct FinishedWorldsSummaryBuilder {
    pub(crate) finished_count: std::option::Option<i32>,
    pub(crate) succeeded_worlds: std::option::Option<std::vec::Vec<std::string::String>>,
    pub(crate) failure_summary: std::option::Option<crate::types::FailureSummary>,
}
impl FinishedWorldsSummaryBuilder {
    /// <p>The total number of finished worlds.</p>
    pub fn finished_count(mut self, input: i32) -> Self {
        self.finished_count = Some(input);
        self
    }
    /// <p>The total number of finished worlds.</p>
    pub fn set_finished_count(mut self, input: std::option::Option<i32>) -> Self {
        self.finished_count = input;
        self
    }
    /// Appends an item to `succeeded_worlds`.
    ///
    /// To override the contents of this collection use [`set_succeeded_worlds`](Self::set_succeeded_worlds).
    ///
    /// <p>A list of worlds that succeeded.</p>
    pub fn succeeded_worlds(mut self, input: impl Into<std::string::String>) -> Self {
        let mut v = self.succeeded_worlds.unwrap_or_default();
        v.push(input.into());
        self.succeeded_worlds = Some(v);
        self
    }
    /// <p>A list of worlds that succeeded.</p>
    pub fn set_succeeded_worlds(
        mut self,
        input: std::option::Option<std::vec::Vec<std::string::String>>,
    ) -> Self {
        self.succeeded_worlds = input;
        self
    }
    /// <p>Information about worlds that failed.</p>
    pub fn failure_summary(mut self, input: crate::types::FailureSummary) -> Self {
        self.failure_summary = Some(input);
        self
    }
    /// <p>Information about worlds that failed.</p>
    pub fn set_failure_summary(
        mut self,
        input: std::option::Option<crate::types::FailureSummary>,
    ) -> Self {
        self.failure_summary = input;
        self
    }
    /// Consumes the builder and constructs a [`FinishedWorldsSummary`](crate::types::FinishedWorldsSummary).
    pub fn build(self) -> crate::types::FinishedWorldsSummary {
        crate::types::FinishedWorldsSummary {
            finished_count: self.finished_count.unwrap_or_default(),
            succeeded_worlds: self.succeeded_worlds,
            failure_summary: self.failure_summary,
        }
    }
}
