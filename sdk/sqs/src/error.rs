// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct AddPermissionError {
    pub kind: AddPermissionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum AddPermissionErrorKind {
    OverLimit(crate::error::OverLimit),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for AddPermissionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            AddPermissionErrorKind::OverLimit(_inner) => _inner.fmt(f),
            AddPermissionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for AddPermissionError {
    fn code(&self) -> Option<&str> {
        AddPermissionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl AddPermissionError {
    pub fn new(kind: AddPermissionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: AddPermissionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: AddPermissionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_over_limit(&self) -> bool {
        matches!(&self.kind, AddPermissionErrorKind::OverLimit(_))
    }
}
impl std::error::Error for AddPermissionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            AddPermissionErrorKind::OverLimit(_inner) => Some(_inner),
            AddPermissionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ChangeMessageVisibilityError {
    pub kind: ChangeMessageVisibilityErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ChangeMessageVisibilityErrorKind {
    MessageNotInflight(crate::error::MessageNotInflight),
    ReceiptHandleIsInvalid(crate::error::ReceiptHandleIsInvalid),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ChangeMessageVisibilityError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ChangeMessageVisibilityErrorKind::MessageNotInflight(_inner) => _inner.fmt(f),
            ChangeMessageVisibilityErrorKind::ReceiptHandleIsInvalid(_inner) => _inner.fmt(f),
            ChangeMessageVisibilityErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ChangeMessageVisibilityError {
    fn code(&self) -> Option<&str> {
        ChangeMessageVisibilityError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ChangeMessageVisibilityError {
    pub fn new(kind: ChangeMessageVisibilityErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ChangeMessageVisibilityErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ChangeMessageVisibilityErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_message_not_inflight(&self) -> bool {
        matches!(
            &self.kind,
            ChangeMessageVisibilityErrorKind::MessageNotInflight(_)
        )
    }
    pub fn is_receipt_handle_is_invalid(&self) -> bool {
        matches!(
            &self.kind,
            ChangeMessageVisibilityErrorKind::ReceiptHandleIsInvalid(_)
        )
    }
}
impl std::error::Error for ChangeMessageVisibilityError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ChangeMessageVisibilityErrorKind::MessageNotInflight(_inner) => Some(_inner),
            ChangeMessageVisibilityErrorKind::ReceiptHandleIsInvalid(_inner) => Some(_inner),
            ChangeMessageVisibilityErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ChangeMessageVisibilityBatchError {
    pub kind: ChangeMessageVisibilityBatchErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ChangeMessageVisibilityBatchErrorKind {
    BatchEntryIdsNotDistinct(crate::error::BatchEntryIdsNotDistinct),
    EmptyBatchRequest(crate::error::EmptyBatchRequest),
    InvalidBatchEntryId(crate::error::InvalidBatchEntryId),
    TooManyEntriesInBatchRequest(crate::error::TooManyEntriesInBatchRequest),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ChangeMessageVisibilityBatchError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ChangeMessageVisibilityBatchErrorKind::BatchEntryIdsNotDistinct(_inner) => {
                _inner.fmt(f)
            }
            ChangeMessageVisibilityBatchErrorKind::EmptyBatchRequest(_inner) => _inner.fmt(f),
            ChangeMessageVisibilityBatchErrorKind::InvalidBatchEntryId(_inner) => _inner.fmt(f),
            ChangeMessageVisibilityBatchErrorKind::TooManyEntriesInBatchRequest(_inner) => {
                _inner.fmt(f)
            }
            ChangeMessageVisibilityBatchErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ChangeMessageVisibilityBatchError {
    fn code(&self) -> Option<&str> {
        ChangeMessageVisibilityBatchError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ChangeMessageVisibilityBatchError {
    pub fn new(kind: ChangeMessageVisibilityBatchErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ChangeMessageVisibilityBatchErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ChangeMessageVisibilityBatchErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_batch_entry_ids_not_distinct(&self) -> bool {
        matches!(
            &self.kind,
            ChangeMessageVisibilityBatchErrorKind::BatchEntryIdsNotDistinct(_)
        )
    }
    pub fn is_empty_batch_request(&self) -> bool {
        matches!(
            &self.kind,
            ChangeMessageVisibilityBatchErrorKind::EmptyBatchRequest(_)
        )
    }
    pub fn is_invalid_batch_entry_id(&self) -> bool {
        matches!(
            &self.kind,
            ChangeMessageVisibilityBatchErrorKind::InvalidBatchEntryId(_)
        )
    }
    pub fn is_too_many_entries_in_batch_request(&self) -> bool {
        matches!(
            &self.kind,
            ChangeMessageVisibilityBatchErrorKind::TooManyEntriesInBatchRequest(_)
        )
    }
}
impl std::error::Error for ChangeMessageVisibilityBatchError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ChangeMessageVisibilityBatchErrorKind::BatchEntryIdsNotDistinct(_inner) => Some(_inner),
            ChangeMessageVisibilityBatchErrorKind::EmptyBatchRequest(_inner) => Some(_inner),
            ChangeMessageVisibilityBatchErrorKind::InvalidBatchEntryId(_inner) => Some(_inner),
            ChangeMessageVisibilityBatchErrorKind::TooManyEntriesInBatchRequest(_inner) => {
                Some(_inner)
            }
            ChangeMessageVisibilityBatchErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct CreateQueueError {
    pub kind: CreateQueueErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum CreateQueueErrorKind {
    QueueDeletedRecently(crate::error::QueueDeletedRecently),
    QueueNameExists(crate::error::QueueNameExists),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for CreateQueueError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            CreateQueueErrorKind::QueueDeletedRecently(_inner) => _inner.fmt(f),
            CreateQueueErrorKind::QueueNameExists(_inner) => _inner.fmt(f),
            CreateQueueErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for CreateQueueError {
    fn code(&self) -> Option<&str> {
        CreateQueueError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl CreateQueueError {
    pub fn new(kind: CreateQueueErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: CreateQueueErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: CreateQueueErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_queue_deleted_recently(&self) -> bool {
        matches!(&self.kind, CreateQueueErrorKind::QueueDeletedRecently(_))
    }
    pub fn is_queue_name_exists(&self) -> bool {
        matches!(&self.kind, CreateQueueErrorKind::QueueNameExists(_))
    }
}
impl std::error::Error for CreateQueueError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            CreateQueueErrorKind::QueueDeletedRecently(_inner) => Some(_inner),
            CreateQueueErrorKind::QueueNameExists(_inner) => Some(_inner),
            CreateQueueErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteMessageError {
    pub kind: DeleteMessageErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteMessageErrorKind {
    InvalidIdFormat(crate::error::InvalidIdFormat),
    ReceiptHandleIsInvalid(crate::error::ReceiptHandleIsInvalid),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteMessageError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteMessageErrorKind::InvalidIdFormat(_inner) => _inner.fmt(f),
            DeleteMessageErrorKind::ReceiptHandleIsInvalid(_inner) => _inner.fmt(f),
            DeleteMessageErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteMessageError {
    fn code(&self) -> Option<&str> {
        DeleteMessageError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteMessageError {
    pub fn new(kind: DeleteMessageErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteMessageErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteMessageErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_id_format(&self) -> bool {
        matches!(&self.kind, DeleteMessageErrorKind::InvalidIdFormat(_))
    }
    pub fn is_receipt_handle_is_invalid(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMessageErrorKind::ReceiptHandleIsInvalid(_)
        )
    }
}
impl std::error::Error for DeleteMessageError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteMessageErrorKind::InvalidIdFormat(_inner) => Some(_inner),
            DeleteMessageErrorKind::ReceiptHandleIsInvalid(_inner) => Some(_inner),
            DeleteMessageErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteMessageBatchError {
    pub kind: DeleteMessageBatchErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteMessageBatchErrorKind {
    BatchEntryIdsNotDistinct(crate::error::BatchEntryIdsNotDistinct),
    EmptyBatchRequest(crate::error::EmptyBatchRequest),
    InvalidBatchEntryId(crate::error::InvalidBatchEntryId),
    TooManyEntriesInBatchRequest(crate::error::TooManyEntriesInBatchRequest),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteMessageBatchError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteMessageBatchErrorKind::BatchEntryIdsNotDistinct(_inner) => _inner.fmt(f),
            DeleteMessageBatchErrorKind::EmptyBatchRequest(_inner) => _inner.fmt(f),
            DeleteMessageBatchErrorKind::InvalidBatchEntryId(_inner) => _inner.fmt(f),
            DeleteMessageBatchErrorKind::TooManyEntriesInBatchRequest(_inner) => _inner.fmt(f),
            DeleteMessageBatchErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteMessageBatchError {
    fn code(&self) -> Option<&str> {
        DeleteMessageBatchError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteMessageBatchError {
    pub fn new(kind: DeleteMessageBatchErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteMessageBatchErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteMessageBatchErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_batch_entry_ids_not_distinct(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMessageBatchErrorKind::BatchEntryIdsNotDistinct(_)
        )
    }
    pub fn is_empty_batch_request(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMessageBatchErrorKind::EmptyBatchRequest(_)
        )
    }
    pub fn is_invalid_batch_entry_id(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMessageBatchErrorKind::InvalidBatchEntryId(_)
        )
    }
    pub fn is_too_many_entries_in_batch_request(&self) -> bool {
        matches!(
            &self.kind,
            DeleteMessageBatchErrorKind::TooManyEntriesInBatchRequest(_)
        )
    }
}
impl std::error::Error for DeleteMessageBatchError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteMessageBatchErrorKind::BatchEntryIdsNotDistinct(_inner) => Some(_inner),
            DeleteMessageBatchErrorKind::EmptyBatchRequest(_inner) => Some(_inner),
            DeleteMessageBatchErrorKind::InvalidBatchEntryId(_inner) => Some(_inner),
            DeleteMessageBatchErrorKind::TooManyEntriesInBatchRequest(_inner) => Some(_inner),
            DeleteMessageBatchErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct DeleteQueueError {
    pub kind: DeleteQueueErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum DeleteQueueErrorKind {
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for DeleteQueueError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            DeleteQueueErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for DeleteQueueError {
    fn code(&self) -> Option<&str> {
        DeleteQueueError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl DeleteQueueError {
    pub fn new(kind: DeleteQueueErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: DeleteQueueErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: DeleteQueueErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for DeleteQueueError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            DeleteQueueErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetQueueAttributesError {
    pub kind: GetQueueAttributesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetQueueAttributesErrorKind {
    InvalidAttributeName(crate::error::InvalidAttributeName),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetQueueAttributesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetQueueAttributesErrorKind::InvalidAttributeName(_inner) => _inner.fmt(f),
            GetQueueAttributesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetQueueAttributesError {
    fn code(&self) -> Option<&str> {
        GetQueueAttributesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetQueueAttributesError {
    pub fn new(kind: GetQueueAttributesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetQueueAttributesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetQueueAttributesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_attribute_name(&self) -> bool {
        matches!(
            &self.kind,
            GetQueueAttributesErrorKind::InvalidAttributeName(_)
        )
    }
}
impl std::error::Error for GetQueueAttributesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetQueueAttributesErrorKind::InvalidAttributeName(_inner) => Some(_inner),
            GetQueueAttributesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct GetQueueUrlError {
    pub kind: GetQueueUrlErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum GetQueueUrlErrorKind {
    QueueDoesNotExist(crate::error::QueueDoesNotExist),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for GetQueueUrlError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            GetQueueUrlErrorKind::QueueDoesNotExist(_inner) => _inner.fmt(f),
            GetQueueUrlErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for GetQueueUrlError {
    fn code(&self) -> Option<&str> {
        GetQueueUrlError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl GetQueueUrlError {
    pub fn new(kind: GetQueueUrlErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: GetQueueUrlErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: GetQueueUrlErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_queue_does_not_exist(&self) -> bool {
        matches!(&self.kind, GetQueueUrlErrorKind::QueueDoesNotExist(_))
    }
}
impl std::error::Error for GetQueueUrlError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            GetQueueUrlErrorKind::QueueDoesNotExist(_inner) => Some(_inner),
            GetQueueUrlErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListDeadLetterSourceQueuesError {
    pub kind: ListDeadLetterSourceQueuesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListDeadLetterSourceQueuesErrorKind {
    QueueDoesNotExist(crate::error::QueueDoesNotExist),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListDeadLetterSourceQueuesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListDeadLetterSourceQueuesErrorKind::QueueDoesNotExist(_inner) => _inner.fmt(f),
            ListDeadLetterSourceQueuesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListDeadLetterSourceQueuesError {
    fn code(&self) -> Option<&str> {
        ListDeadLetterSourceQueuesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListDeadLetterSourceQueuesError {
    pub fn new(kind: ListDeadLetterSourceQueuesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListDeadLetterSourceQueuesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListDeadLetterSourceQueuesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_queue_does_not_exist(&self) -> bool {
        matches!(
            &self.kind,
            ListDeadLetterSourceQueuesErrorKind::QueueDoesNotExist(_)
        )
    }
}
impl std::error::Error for ListDeadLetterSourceQueuesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListDeadLetterSourceQueuesErrorKind::QueueDoesNotExist(_inner) => Some(_inner),
            ListDeadLetterSourceQueuesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListQueuesError {
    pub kind: ListQueuesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListQueuesErrorKind {
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListQueuesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListQueuesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListQueuesError {
    fn code(&self) -> Option<&str> {
        ListQueuesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListQueuesError {
    pub fn new(kind: ListQueuesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListQueuesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListQueuesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for ListQueuesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListQueuesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ListQueueTagsError {
    pub kind: ListQueueTagsErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ListQueueTagsErrorKind {
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ListQueueTagsError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ListQueueTagsErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ListQueueTagsError {
    fn code(&self) -> Option<&str> {
        ListQueueTagsError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ListQueueTagsError {
    pub fn new(kind: ListQueueTagsErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ListQueueTagsErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ListQueueTagsErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for ListQueueTagsError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ListQueueTagsErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct PurgeQueueError {
    pub kind: PurgeQueueErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum PurgeQueueErrorKind {
    PurgeQueueInProgress(crate::error::PurgeQueueInProgress),
    QueueDoesNotExist(crate::error::QueueDoesNotExist),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for PurgeQueueError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            PurgeQueueErrorKind::PurgeQueueInProgress(_inner) => _inner.fmt(f),
            PurgeQueueErrorKind::QueueDoesNotExist(_inner) => _inner.fmt(f),
            PurgeQueueErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for PurgeQueueError {
    fn code(&self) -> Option<&str> {
        PurgeQueueError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl PurgeQueueError {
    pub fn new(kind: PurgeQueueErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: PurgeQueueErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: PurgeQueueErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_purge_queue_in_progress(&self) -> bool {
        matches!(&self.kind, PurgeQueueErrorKind::PurgeQueueInProgress(_))
    }
    pub fn is_queue_does_not_exist(&self) -> bool {
        matches!(&self.kind, PurgeQueueErrorKind::QueueDoesNotExist(_))
    }
}
impl std::error::Error for PurgeQueueError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            PurgeQueueErrorKind::PurgeQueueInProgress(_inner) => Some(_inner),
            PurgeQueueErrorKind::QueueDoesNotExist(_inner) => Some(_inner),
            PurgeQueueErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct ReceiveMessageError {
    pub kind: ReceiveMessageErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum ReceiveMessageErrorKind {
    OverLimit(crate::error::OverLimit),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for ReceiveMessageError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            ReceiveMessageErrorKind::OverLimit(_inner) => _inner.fmt(f),
            ReceiveMessageErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for ReceiveMessageError {
    fn code(&self) -> Option<&str> {
        ReceiveMessageError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl ReceiveMessageError {
    pub fn new(kind: ReceiveMessageErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: ReceiveMessageErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: ReceiveMessageErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_over_limit(&self) -> bool {
        matches!(&self.kind, ReceiveMessageErrorKind::OverLimit(_))
    }
}
impl std::error::Error for ReceiveMessageError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            ReceiveMessageErrorKind::OverLimit(_inner) => Some(_inner),
            ReceiveMessageErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct RemovePermissionError {
    pub kind: RemovePermissionErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum RemovePermissionErrorKind {
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for RemovePermissionError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            RemovePermissionErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for RemovePermissionError {
    fn code(&self) -> Option<&str> {
        RemovePermissionError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl RemovePermissionError {
    pub fn new(kind: RemovePermissionErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: RemovePermissionErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: RemovePermissionErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for RemovePermissionError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            RemovePermissionErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct SendMessageError {
    pub kind: SendMessageErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum SendMessageErrorKind {
    InvalidMessageContents(crate::error::InvalidMessageContents),
    UnsupportedOperation(crate::error::UnsupportedOperation),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for SendMessageError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            SendMessageErrorKind::InvalidMessageContents(_inner) => _inner.fmt(f),
            SendMessageErrorKind::UnsupportedOperation(_inner) => _inner.fmt(f),
            SendMessageErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for SendMessageError {
    fn code(&self) -> Option<&str> {
        SendMessageError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl SendMessageError {
    pub fn new(kind: SendMessageErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: SendMessageErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: SendMessageErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_message_contents(&self) -> bool {
        matches!(&self.kind, SendMessageErrorKind::InvalidMessageContents(_))
    }
    pub fn is_unsupported_operation(&self) -> bool {
        matches!(&self.kind, SendMessageErrorKind::UnsupportedOperation(_))
    }
}
impl std::error::Error for SendMessageError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            SendMessageErrorKind::InvalidMessageContents(_inner) => Some(_inner),
            SendMessageErrorKind::UnsupportedOperation(_inner) => Some(_inner),
            SendMessageErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct SendMessageBatchError {
    pub kind: SendMessageBatchErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum SendMessageBatchErrorKind {
    BatchEntryIdsNotDistinct(crate::error::BatchEntryIdsNotDistinct),
    BatchRequestTooLong(crate::error::BatchRequestTooLong),
    EmptyBatchRequest(crate::error::EmptyBatchRequest),
    InvalidBatchEntryId(crate::error::InvalidBatchEntryId),
    TooManyEntriesInBatchRequest(crate::error::TooManyEntriesInBatchRequest),
    UnsupportedOperation(crate::error::UnsupportedOperation),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for SendMessageBatchError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            SendMessageBatchErrorKind::BatchEntryIdsNotDistinct(_inner) => _inner.fmt(f),
            SendMessageBatchErrorKind::BatchRequestTooLong(_inner) => _inner.fmt(f),
            SendMessageBatchErrorKind::EmptyBatchRequest(_inner) => _inner.fmt(f),
            SendMessageBatchErrorKind::InvalidBatchEntryId(_inner) => _inner.fmt(f),
            SendMessageBatchErrorKind::TooManyEntriesInBatchRequest(_inner) => _inner.fmt(f),
            SendMessageBatchErrorKind::UnsupportedOperation(_inner) => _inner.fmt(f),
            SendMessageBatchErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for SendMessageBatchError {
    fn code(&self) -> Option<&str> {
        SendMessageBatchError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl SendMessageBatchError {
    pub fn new(kind: SendMessageBatchErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: SendMessageBatchErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: SendMessageBatchErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_batch_entry_ids_not_distinct(&self) -> bool {
        matches!(
            &self.kind,
            SendMessageBatchErrorKind::BatchEntryIdsNotDistinct(_)
        )
    }
    pub fn is_batch_request_too_long(&self) -> bool {
        matches!(
            &self.kind,
            SendMessageBatchErrorKind::BatchRequestTooLong(_)
        )
    }
    pub fn is_empty_batch_request(&self) -> bool {
        matches!(&self.kind, SendMessageBatchErrorKind::EmptyBatchRequest(_))
    }
    pub fn is_invalid_batch_entry_id(&self) -> bool {
        matches!(
            &self.kind,
            SendMessageBatchErrorKind::InvalidBatchEntryId(_)
        )
    }
    pub fn is_too_many_entries_in_batch_request(&self) -> bool {
        matches!(
            &self.kind,
            SendMessageBatchErrorKind::TooManyEntriesInBatchRequest(_)
        )
    }
    pub fn is_unsupported_operation(&self) -> bool {
        matches!(
            &self.kind,
            SendMessageBatchErrorKind::UnsupportedOperation(_)
        )
    }
}
impl std::error::Error for SendMessageBatchError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            SendMessageBatchErrorKind::BatchEntryIdsNotDistinct(_inner) => Some(_inner),
            SendMessageBatchErrorKind::BatchRequestTooLong(_inner) => Some(_inner),
            SendMessageBatchErrorKind::EmptyBatchRequest(_inner) => Some(_inner),
            SendMessageBatchErrorKind::InvalidBatchEntryId(_inner) => Some(_inner),
            SendMessageBatchErrorKind::TooManyEntriesInBatchRequest(_inner) => Some(_inner),
            SendMessageBatchErrorKind::UnsupportedOperation(_inner) => Some(_inner),
            SendMessageBatchErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct SetQueueAttributesError {
    pub kind: SetQueueAttributesErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum SetQueueAttributesErrorKind {
    InvalidAttributeName(crate::error::InvalidAttributeName),
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for SetQueueAttributesError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            SetQueueAttributesErrorKind::InvalidAttributeName(_inner) => _inner.fmt(f),
            SetQueueAttributesErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for SetQueueAttributesError {
    fn code(&self) -> Option<&str> {
        SetQueueAttributesError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl SetQueueAttributesError {
    pub fn new(kind: SetQueueAttributesErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: SetQueueAttributesErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: SetQueueAttributesErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
    pub fn is_invalid_attribute_name(&self) -> bool {
        matches!(
            &self.kind,
            SetQueueAttributesErrorKind::InvalidAttributeName(_)
        )
    }
}
impl std::error::Error for SetQueueAttributesError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            SetQueueAttributesErrorKind::InvalidAttributeName(_inner) => Some(_inner),
            SetQueueAttributesErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct TagQueueError {
    pub kind: TagQueueErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum TagQueueErrorKind {
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for TagQueueError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            TagQueueErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for TagQueueError {
    fn code(&self) -> Option<&str> {
        TagQueueError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl TagQueueError {
    pub fn new(kind: TagQueueErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: TagQueueErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: TagQueueErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for TagQueueError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            TagQueueErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub struct UntagQueueError {
    pub kind: UntagQueueErrorKind,
    pub(crate) meta: smithy_types::Error,
}
#[non_exhaustive]
#[derive(std::fmt::Debug)]
pub enum UntagQueueErrorKind {
    /// An unexpected error, eg. invalid JSON returned by the service or an unknown error code
    Unhandled(Box<dyn std::error::Error + Send + Sync + 'static>),
}
impl std::fmt::Display for UntagQueueError {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match &self.kind {
            UntagQueueErrorKind::Unhandled(_inner) => _inner.fmt(f),
        }
    }
}
impl smithy_types::retry::ProvideErrorKind for UntagQueueError {
    fn code(&self) -> Option<&str> {
        UntagQueueError::code(self)
    }
    fn retryable_error_kind(&self) -> Option<smithy_types::retry::ErrorKind> {
        None
    }
}
impl UntagQueueError {
    pub fn new(kind: UntagQueueErrorKind, meta: smithy_types::Error) -> Self {
        Self { kind, meta }
    }

    pub fn unhandled(err: impl Into<Box<dyn std::error::Error + Send + Sync + 'static>>) -> Self {
        Self {
            kind: UntagQueueErrorKind::Unhandled(err.into()),
            meta: Default::default(),
        }
    }

    pub fn generic(err: smithy_types::Error) -> Self {
        Self {
            meta: err.clone(),
            kind: UntagQueueErrorKind::Unhandled(err.into()),
        }
    }

    // Consider if this should actually be `Option<Cow<&str>>`. This would enable us to use display as implemented
    // by std::Error to generate a message in that case.
    pub fn message(&self) -> Option<&str> {
        self.meta.message()
    }

    pub fn meta(&self) -> &smithy_types::Error {
        &self.meta
    }

    pub fn request_id(&self) -> Option<&str> {
        self.meta.request_id()
    }

    pub fn code(&self) -> Option<&str> {
        self.meta.code()
    }
}
impl std::error::Error for UntagQueueError {
    fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
        match &self.kind {
            UntagQueueErrorKind::Unhandled(_inner) => Some(_inner.as_ref()),
        }
    }
}

/// <p>The specified attribute doesn't exist.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidAttributeName {}
impl std::fmt::Debug for InvalidAttributeName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidAttributeName");
        formatter.finish()
    }
}
impl InvalidAttributeName {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for InvalidAttributeName {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidAttributeName")?;
        Ok(())
    }
}
impl std::error::Error for InvalidAttributeName {}
/// See [`InvalidAttributeName`](crate::error::InvalidAttributeName)
pub mod invalid_attribute_name {
    /// A builder for [`InvalidAttributeName`](crate::error::InvalidAttributeName)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`InvalidAttributeName`](crate::error::InvalidAttributeName)
        pub fn build(self) -> crate::error::InvalidAttributeName {
            crate::error::InvalidAttributeName {}
        }
    }
}
impl InvalidAttributeName {
    /// Creates a new builder-style object to manufacture [`InvalidAttributeName`](crate::error::InvalidAttributeName)
    pub fn builder() -> crate::error::invalid_attribute_name::Builder {
        crate::error::invalid_attribute_name::Builder::default()
    }
}

/// <p>Error code 400. Unsupported operation.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UnsupportedOperation {}
impl std::fmt::Debug for UnsupportedOperation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("UnsupportedOperation");
        formatter.finish()
    }
}
impl UnsupportedOperation {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for UnsupportedOperation {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "UnsupportedOperation")?;
        Ok(())
    }
}
impl std::error::Error for UnsupportedOperation {}
/// See [`UnsupportedOperation`](crate::error::UnsupportedOperation)
pub mod unsupported_operation {
    /// A builder for [`UnsupportedOperation`](crate::error::UnsupportedOperation)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`UnsupportedOperation`](crate::error::UnsupportedOperation)
        pub fn build(self) -> crate::error::UnsupportedOperation {
            crate::error::UnsupportedOperation {}
        }
    }
}
impl UnsupportedOperation {
    /// Creates a new builder-style object to manufacture [`UnsupportedOperation`](crate::error::UnsupportedOperation)
    pub fn builder() -> crate::error::unsupported_operation::Builder {
        crate::error::unsupported_operation::Builder::default()
    }
}

/// <p>The batch request contains more entries than permissible.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TooManyEntriesInBatchRequest {}
impl std::fmt::Debug for TooManyEntriesInBatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("TooManyEntriesInBatchRequest");
        formatter.finish()
    }
}
impl TooManyEntriesInBatchRequest {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for TooManyEntriesInBatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "TooManyEntriesInBatchRequest")?;
        Ok(())
    }
}
impl std::error::Error for TooManyEntriesInBatchRequest {}
/// See [`TooManyEntriesInBatchRequest`](crate::error::TooManyEntriesInBatchRequest)
pub mod too_many_entries_in_batch_request {
    /// A builder for [`TooManyEntriesInBatchRequest`](crate::error::TooManyEntriesInBatchRequest)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`TooManyEntriesInBatchRequest`](crate::error::TooManyEntriesInBatchRequest)
        pub fn build(self) -> crate::error::TooManyEntriesInBatchRequest {
            crate::error::TooManyEntriesInBatchRequest {}
        }
    }
}
impl TooManyEntriesInBatchRequest {
    /// Creates a new builder-style object to manufacture [`TooManyEntriesInBatchRequest`](crate::error::TooManyEntriesInBatchRequest)
    pub fn builder() -> crate::error::too_many_entries_in_batch_request::Builder {
        crate::error::too_many_entries_in_batch_request::Builder::default()
    }
}

/// <p>The <code>Id</code> of a batch entry in a batch request doesn't abide by the specification.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidBatchEntryId {}
impl std::fmt::Debug for InvalidBatchEntryId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidBatchEntryId");
        formatter.finish()
    }
}
impl InvalidBatchEntryId {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for InvalidBatchEntryId {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidBatchEntryId")?;
        Ok(())
    }
}
impl std::error::Error for InvalidBatchEntryId {}
/// See [`InvalidBatchEntryId`](crate::error::InvalidBatchEntryId)
pub mod invalid_batch_entry_id {
    /// A builder for [`InvalidBatchEntryId`](crate::error::InvalidBatchEntryId)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`InvalidBatchEntryId`](crate::error::InvalidBatchEntryId)
        pub fn build(self) -> crate::error::InvalidBatchEntryId {
            crate::error::InvalidBatchEntryId {}
        }
    }
}
impl InvalidBatchEntryId {
    /// Creates a new builder-style object to manufacture [`InvalidBatchEntryId`](crate::error::InvalidBatchEntryId)
    pub fn builder() -> crate::error::invalid_batch_entry_id::Builder {
        crate::error::invalid_batch_entry_id::Builder::default()
    }
}

/// <p>The batch request doesn't contain any entries.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct EmptyBatchRequest {}
impl std::fmt::Debug for EmptyBatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("EmptyBatchRequest");
        formatter.finish()
    }
}
impl EmptyBatchRequest {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for EmptyBatchRequest {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "EmptyBatchRequest")?;
        Ok(())
    }
}
impl std::error::Error for EmptyBatchRequest {}
/// See [`EmptyBatchRequest`](crate::error::EmptyBatchRequest)
pub mod empty_batch_request {
    /// A builder for [`EmptyBatchRequest`](crate::error::EmptyBatchRequest)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`EmptyBatchRequest`](crate::error::EmptyBatchRequest)
        pub fn build(self) -> crate::error::EmptyBatchRequest {
            crate::error::EmptyBatchRequest {}
        }
    }
}
impl EmptyBatchRequest {
    /// Creates a new builder-style object to manufacture [`EmptyBatchRequest`](crate::error::EmptyBatchRequest)
    pub fn builder() -> crate::error::empty_batch_request::Builder {
        crate::error::empty_batch_request::Builder::default()
    }
}

/// <p>The length of all the messages put together is more than the limit.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchRequestTooLong {}
impl std::fmt::Debug for BatchRequestTooLong {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchRequestTooLong");
        formatter.finish()
    }
}
impl BatchRequestTooLong {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for BatchRequestTooLong {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "BatchRequestTooLong")?;
        Ok(())
    }
}
impl std::error::Error for BatchRequestTooLong {}
/// See [`BatchRequestTooLong`](crate::error::BatchRequestTooLong)
pub mod batch_request_too_long {
    /// A builder for [`BatchRequestTooLong`](crate::error::BatchRequestTooLong)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`BatchRequestTooLong`](crate::error::BatchRequestTooLong)
        pub fn build(self) -> crate::error::BatchRequestTooLong {
            crate::error::BatchRequestTooLong {}
        }
    }
}
impl BatchRequestTooLong {
    /// Creates a new builder-style object to manufacture [`BatchRequestTooLong`](crate::error::BatchRequestTooLong)
    pub fn builder() -> crate::error::batch_request_too_long::Builder {
        crate::error::batch_request_too_long::Builder::default()
    }
}

/// <p>Two or more batch entries in the request have the same <code>Id</code>.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct BatchEntryIdsNotDistinct {}
impl std::fmt::Debug for BatchEntryIdsNotDistinct {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("BatchEntryIdsNotDistinct");
        formatter.finish()
    }
}
impl BatchEntryIdsNotDistinct {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for BatchEntryIdsNotDistinct {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "BatchEntryIdsNotDistinct")?;
        Ok(())
    }
}
impl std::error::Error for BatchEntryIdsNotDistinct {}
/// See [`BatchEntryIdsNotDistinct`](crate::error::BatchEntryIdsNotDistinct)
pub mod batch_entry_ids_not_distinct {
    /// A builder for [`BatchEntryIdsNotDistinct`](crate::error::BatchEntryIdsNotDistinct)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`BatchEntryIdsNotDistinct`](crate::error::BatchEntryIdsNotDistinct)
        pub fn build(self) -> crate::error::BatchEntryIdsNotDistinct {
            crate::error::BatchEntryIdsNotDistinct {}
        }
    }
}
impl BatchEntryIdsNotDistinct {
    /// Creates a new builder-style object to manufacture [`BatchEntryIdsNotDistinct`](crate::error::BatchEntryIdsNotDistinct)
    pub fn builder() -> crate::error::batch_entry_ids_not_distinct::Builder {
        crate::error::batch_entry_ids_not_distinct::Builder::default()
    }
}

/// <p>The message contains characters outside the allowed set.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidMessageContents {}
impl std::fmt::Debug for InvalidMessageContents {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidMessageContents");
        formatter.finish()
    }
}
impl InvalidMessageContents {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for InvalidMessageContents {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidMessageContents")?;
        Ok(())
    }
}
impl std::error::Error for InvalidMessageContents {}
/// See [`InvalidMessageContents`](crate::error::InvalidMessageContents)
pub mod invalid_message_contents {
    /// A builder for [`InvalidMessageContents`](crate::error::InvalidMessageContents)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`InvalidMessageContents`](crate::error::InvalidMessageContents)
        pub fn build(self) -> crate::error::InvalidMessageContents {
            crate::error::InvalidMessageContents {}
        }
    }
}
impl InvalidMessageContents {
    /// Creates a new builder-style object to manufacture [`InvalidMessageContents`](crate::error::InvalidMessageContents)
    pub fn builder() -> crate::error::invalid_message_contents::Builder {
        crate::error::invalid_message_contents::Builder::default()
    }
}

/// <p>The specified action violates a limit. For example, <code>ReceiveMessage</code>
/// returns this error if the maximum number of inflight messages is reached and
/// <code>AddPermission</code> returns this error if the maximum number of permissions
/// for the queue is reached.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct OverLimit {}
impl std::fmt::Debug for OverLimit {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("OverLimit");
        formatter.finish()
    }
}
impl OverLimit {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for OverLimit {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "OverLimit")?;
        Ok(())
    }
}
impl std::error::Error for OverLimit {}
/// See [`OverLimit`](crate::error::OverLimit)
pub mod over_limit {
    /// A builder for [`OverLimit`](crate::error::OverLimit)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`OverLimit`](crate::error::OverLimit)
        pub fn build(self) -> crate::error::OverLimit {
            crate::error::OverLimit {}
        }
    }
}
impl OverLimit {
    /// Creates a new builder-style object to manufacture [`OverLimit`](crate::error::OverLimit)
    pub fn builder() -> crate::error::over_limit::Builder {
        crate::error::over_limit::Builder::default()
    }
}

/// <p>The specified queue doesn't exist.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct QueueDoesNotExist {}
impl std::fmt::Debug for QueueDoesNotExist {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("QueueDoesNotExist");
        formatter.finish()
    }
}
impl QueueDoesNotExist {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for QueueDoesNotExist {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "QueueDoesNotExist")?;
        Ok(())
    }
}
impl std::error::Error for QueueDoesNotExist {}
/// See [`QueueDoesNotExist`](crate::error::QueueDoesNotExist)
pub mod queue_does_not_exist {
    /// A builder for [`QueueDoesNotExist`](crate::error::QueueDoesNotExist)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`QueueDoesNotExist`](crate::error::QueueDoesNotExist)
        pub fn build(self) -> crate::error::QueueDoesNotExist {
            crate::error::QueueDoesNotExist {}
        }
    }
}
impl QueueDoesNotExist {
    /// Creates a new builder-style object to manufacture [`QueueDoesNotExist`](crate::error::QueueDoesNotExist)
    pub fn builder() -> crate::error::queue_does_not_exist::Builder {
        crate::error::queue_does_not_exist::Builder::default()
    }
}

/// <p>Indicates that the specified queue previously received a <code>PurgeQueue</code> request within the last 60 seconds (the time it can take to delete the messages in the queue).</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct PurgeQueueInProgress {}
impl std::fmt::Debug for PurgeQueueInProgress {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("PurgeQueueInProgress");
        formatter.finish()
    }
}
impl PurgeQueueInProgress {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for PurgeQueueInProgress {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "PurgeQueueInProgress")?;
        Ok(())
    }
}
impl std::error::Error for PurgeQueueInProgress {}
/// See [`PurgeQueueInProgress`](crate::error::PurgeQueueInProgress)
pub mod purge_queue_in_progress {
    /// A builder for [`PurgeQueueInProgress`](crate::error::PurgeQueueInProgress)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`PurgeQueueInProgress`](crate::error::PurgeQueueInProgress)
        pub fn build(self) -> crate::error::PurgeQueueInProgress {
            crate::error::PurgeQueueInProgress {}
        }
    }
}
impl PurgeQueueInProgress {
    /// Creates a new builder-style object to manufacture [`PurgeQueueInProgress`](crate::error::PurgeQueueInProgress)
    pub fn builder() -> crate::error::purge_queue_in_progress::Builder {
        crate::error::purge_queue_in_progress::Builder::default()
    }
}

/// <p>The specified receipt handle isn't valid.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ReceiptHandleIsInvalid {}
impl std::fmt::Debug for ReceiptHandleIsInvalid {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("ReceiptHandleIsInvalid");
        formatter.finish()
    }
}
impl ReceiptHandleIsInvalid {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for ReceiptHandleIsInvalid {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "ReceiptHandleIsInvalid")?;
        Ok(())
    }
}
impl std::error::Error for ReceiptHandleIsInvalid {}
/// See [`ReceiptHandleIsInvalid`](crate::error::ReceiptHandleIsInvalid)
pub mod receipt_handle_is_invalid {
    /// A builder for [`ReceiptHandleIsInvalid`](crate::error::ReceiptHandleIsInvalid)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`ReceiptHandleIsInvalid`](crate::error::ReceiptHandleIsInvalid)
        pub fn build(self) -> crate::error::ReceiptHandleIsInvalid {
            crate::error::ReceiptHandleIsInvalid {}
        }
    }
}
impl ReceiptHandleIsInvalid {
    /// Creates a new builder-style object to manufacture [`ReceiptHandleIsInvalid`](crate::error::ReceiptHandleIsInvalid)
    pub fn builder() -> crate::error::receipt_handle_is_invalid::Builder {
        crate::error::receipt_handle_is_invalid::Builder::default()
    }
}

/// <p>The specified receipt handle isn't valid for the current version.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InvalidIdFormat {}
impl std::fmt::Debug for InvalidIdFormat {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("InvalidIdFormat");
        formatter.finish()
    }
}
impl InvalidIdFormat {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for InvalidIdFormat {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "InvalidIdFormat")?;
        Ok(())
    }
}
impl std::error::Error for InvalidIdFormat {}
/// See [`InvalidIdFormat`](crate::error::InvalidIdFormat)
pub mod invalid_id_format {
    /// A builder for [`InvalidIdFormat`](crate::error::InvalidIdFormat)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`InvalidIdFormat`](crate::error::InvalidIdFormat)
        pub fn build(self) -> crate::error::InvalidIdFormat {
            crate::error::InvalidIdFormat {}
        }
    }
}
impl InvalidIdFormat {
    /// Creates a new builder-style object to manufacture [`InvalidIdFormat`](crate::error::InvalidIdFormat)
    pub fn builder() -> crate::error::invalid_id_format::Builder {
        crate::error::invalid_id_format::Builder::default()
    }
}

/// <p>A queue with this name already exists. Amazon SQS returns this error only if the request
/// includes attributes whose values differ from those of the existing queue.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct QueueNameExists {}
impl std::fmt::Debug for QueueNameExists {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("QueueNameExists");
        formatter.finish()
    }
}
impl QueueNameExists {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for QueueNameExists {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "QueueNameExists")?;
        Ok(())
    }
}
impl std::error::Error for QueueNameExists {}
/// See [`QueueNameExists`](crate::error::QueueNameExists)
pub mod queue_name_exists {
    /// A builder for [`QueueNameExists`](crate::error::QueueNameExists)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`QueueNameExists`](crate::error::QueueNameExists)
        pub fn build(self) -> crate::error::QueueNameExists {
            crate::error::QueueNameExists {}
        }
    }
}
impl QueueNameExists {
    /// Creates a new builder-style object to manufacture [`QueueNameExists`](crate::error::QueueNameExists)
    pub fn builder() -> crate::error::queue_name_exists::Builder {
        crate::error::queue_name_exists::Builder::default()
    }
}

/// <p>You must wait 60 seconds after deleting a queue before you can create another queue
/// with the same name.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct QueueDeletedRecently {}
impl std::fmt::Debug for QueueDeletedRecently {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("QueueDeletedRecently");
        formatter.finish()
    }
}
impl QueueDeletedRecently {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for QueueDeletedRecently {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "QueueDeletedRecently")?;
        Ok(())
    }
}
impl std::error::Error for QueueDeletedRecently {}
/// See [`QueueDeletedRecently`](crate::error::QueueDeletedRecently)
pub mod queue_deleted_recently {
    /// A builder for [`QueueDeletedRecently`](crate::error::QueueDeletedRecently)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`QueueDeletedRecently`](crate::error::QueueDeletedRecently)
        pub fn build(self) -> crate::error::QueueDeletedRecently {
            crate::error::QueueDeletedRecently {}
        }
    }
}
impl QueueDeletedRecently {
    /// Creates a new builder-style object to manufacture [`QueueDeletedRecently`](crate::error::QueueDeletedRecently)
    pub fn builder() -> crate::error::queue_deleted_recently::Builder {
        crate::error::queue_deleted_recently::Builder::default()
    }
}

/// <p>The specified message isn't in flight.</p>
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct MessageNotInflight {}
impl std::fmt::Debug for MessageNotInflight {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        let mut formatter = f.debug_struct("MessageNotInflight");
        formatter.finish()
    }
}
impl MessageNotInflight {
    pub fn message(&self) -> Option<&str> {
        None
    }
}
impl std::fmt::Display for MessageNotInflight {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        write!(f, "MessageNotInflight")?;
        Ok(())
    }
}
impl std::error::Error for MessageNotInflight {}
/// See [`MessageNotInflight`](crate::error::MessageNotInflight)
pub mod message_not_inflight {
    /// A builder for [`MessageNotInflight`](crate::error::MessageNotInflight)
    #[non_exhaustive]
    #[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
    pub struct Builder {}
    impl Builder {
        /// Consumes the builder and constructs a [`MessageNotInflight`](crate::error::MessageNotInflight)
        pub fn build(self) -> crate::error::MessageNotInflight {
            crate::error::MessageNotInflight {}
        }
    }
}
impl MessageNotInflight {
    /// Creates a new builder-style object to manufacture [`MessageNotInflight`](crate::error::MessageNotInflight)
    pub fn builder() -> crate::error::message_not_inflight::Builder {
        crate::error::message_not_inflight::Builder::default()
    }
}
