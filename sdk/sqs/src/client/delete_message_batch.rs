// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeleteMessageBatch`](crate::operation::delete_message_batch::builders::DeleteMessageBatchFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`queue_url(impl Into<String>)`](crate::operation::delete_message_batch::builders::DeleteMessageBatchFluentBuilder::queue_url) / [`set_queue_url(Option<String>)`](crate::operation::delete_message_batch::builders::DeleteMessageBatchFluentBuilder::set_queue_url): <p>The URL of the Amazon SQS queue from which messages are deleted.</p>  <p>Queue URLs and names are case-sensitive.</p>
    ///   - [`entries(Vec<DeleteMessageBatchRequestEntry>)`](crate::operation::delete_message_batch::builders::DeleteMessageBatchFluentBuilder::entries) / [`set_entries(Option<Vec<DeleteMessageBatchRequestEntry>>)`](crate::operation::delete_message_batch::builders::DeleteMessageBatchFluentBuilder::set_entries): <p>A list of receipt handles for the messages to be deleted.</p>
    /// - On success, responds with [`DeleteMessageBatchOutput`](crate::operation::delete_message_batch::DeleteMessageBatchOutput) with field(s):
    ///   - [`successful(Option<Vec<DeleteMessageBatchResultEntry>>)`](crate::operation::delete_message_batch::DeleteMessageBatchOutput::successful): <p>A list of <code> <code>DeleteMessageBatchResultEntry</code> </code> items.</p>
    ///   - [`failed(Option<Vec<BatchResultErrorEntry>>)`](crate::operation::delete_message_batch::DeleteMessageBatchOutput::failed): <p>A list of <code> <code>BatchResultErrorEntry</code> </code> items.</p>
    /// - On failure, responds with [`SdkError<DeleteMessageBatchError>`](crate::operation::delete_message_batch::DeleteMessageBatchError)
    pub fn delete_message_batch(
        &self,
    ) -> crate::operation::delete_message_batch::builders::DeleteMessageBatchFluentBuilder {
        crate::operation::delete_message_batch::builders::DeleteMessageBatchFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
